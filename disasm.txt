
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e8 7a 00 00       	call   c0007b08 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c8 23 02 c0       	mov    eax,0xc00223c8
c0000025:	3d c8 23 02 c0       	cmp    eax,0xc00223c8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c8 23 02 c0       	push   0xc00223c8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c8 23 02 c0       	mov    eax,0xc00223c8
c0000051:	2d c8 23 02 c0       	sub    eax,0xc00223c8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c8 23 02 c0       	push   0xc00223c8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 0c f3 01 c0       	mov    ebx,0xc001f30c
c0000097:	81 eb 08 f3 01 c0    	sub    ebx,0xc001f308
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 08 f3 01 c0       	mov    esi,0xc001f308
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c8 23 02 c0       	push   0xc00223c8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 c8 23 02 c0       	push   0xc00223c8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 2b 46 01 00       	call   c00148d8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 85 a4 00 00       	call   c000a74a <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 09 46 01 00       	call   c00148d8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 16 4b 01 00       	call   c0014e04 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 d5 51 01 00       	call   c00154cc <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 5b 05 01 00       	jmp    c00108da <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 f3 01 c0 02 	test   BYTE PTR [edx-0x3ffe0ce0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0ce0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0ce0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 f3 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0ce0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0ce0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000df7:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 a8 6a 00 00       	call   c0007980 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 ed 69 00 00       	call   c0007980 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 d7 69 00 00       	call   c0007980 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 b3 69 00 00       	call   c0007980 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001176:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011b2:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011b7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011c5:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c0001216:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c0001231:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00012eb:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00012f1:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00012f8:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013be:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013c4:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013cb:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 24 f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0bdc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 f6 6b 01 00       	jmp    c0018998 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 20 6c 01 00       	jmp    c00189d8 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 41 6c 01 00       	jmp    c0018a18 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 80 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0a80]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 80 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0a80]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba c0 16 02 c0       	mov    edx,0xc00216c0
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 3c f4 01 c0       	mov    edx,0xc001f43c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 42 f4 01 c0       	mov    eax,0xc001f442
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 00 f5 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0b00]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 4b f4 01 c0       	mov    eax,0xc001f44b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 80 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0a80]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 d0 f4 01 c0       	mov    eax,0xc001f4d0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb c0 f4 01 c0       	mov    ebx,0xc001f4c0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 a0 f4 01 c0       	mov    eax,0xc001f4a0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 b0 f4 01 c0       	mov    eax,0xc001f4b0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 52 f4 01 c0       	mov    edx,0xc001f452
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 5e f4 01 c0       	mov    edx,0xc001f45e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 72 f4 01 c0       	mov    edx,0xc001f472
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 7f 1e 00 00       	call   c0007aae <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 77 1e 00 00       	call   c0007abe <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c a0 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f8a0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 a0 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f8a0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 e0 f5 01 c0       	mov    eax,0xc001f5e0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 a0 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a60]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 a0 f9 01 c0       	push   0xc001f9a0
c000611b:	e8 14 32 01 00       	call   c0019334 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ae f9 01 c0       	push   0xc001f9ae
c0006153:	e8 dc 31 01 00       	call   c0019334 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 45 31 01 00       	call   c00192d8 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 bd f9 01 c0       	push   0xc001f9bd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000655e:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006564:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006580:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065f9:	8b 8d 4c 45 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdbab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066f1:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000672f:	05 40 45 02 c0       	add    eax,0xc0024540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067ee:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 c0 f9 01 c0       	push   0xc001f9c0
c0006812:	e8 1d 2b 01 00       	call   c0019334 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 31 2b 01 00       	call   c0019350 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 c5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9c5
c000682c:	e8 03 2b 01 00       	call   c0019334 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006838:	e8 13 2b 01 00       	call   c0019350 <iso_kprintfd>
c000683d:	c7 04 24 cb f9 01 c0 	mov    DWORD PTR [esp],0xc001f9cb
c0006844:	e8 eb 2a 01 00       	call   c0019334 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006850:	e8 fb 2a 01 00       	call   c0019350 <iso_kprintfd>
c0006855:	c7 04 24 d1 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9d1
c000685c:	e8 d3 2a 01 00       	call   c0019334 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006868:	e8 e3 2a 01 00       	call   c0019350 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068ce:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 45 02 c0    	lea    ebp,[eax-0x3ffdbaa8]
c000692a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 45 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdbaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 bd f9 01 c0       	push   0xc001f9bd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a06:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a0c:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 45 02 c0       	add    eax,0xc0024550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 da f9 01 c0       	push   0xc001f9da
c0006a31:	e8 fe 28 01 00       	call   c0019334 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a66:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 e5 f9 01 c0       	push   0xc001f9e5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 ec f9 01 c0       	push   0xc001f9ec
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b27:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 f3 f9 01 c0       	push   0xc001f9f3
c0006b48:	e8 e7 27 01 00       	call   c0019334 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 fe f9 01 c0       	push   0xc001f9fe
c0006b63:	e8 cc 27 01 00       	call   c0019334 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 45 02 c0       	push   0xc0024540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b8d:	e8 1c 0f 00 00       	call   c0007aae <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b9e:	e8 0b 0f 00 00       	call   c0007aae <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 f6 0e 00 00       	call   c0007aae <malloc>
c0006bb8:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 dd 0e 00 00       	call   c0007aae <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bfe:	e8 bb 0e 00 00       	call   c0007abe <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 ad 0e 00 00       	call   c0007abe <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 93 0e 00 00       	call   c0007abe <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 7e 0e 00 00       	call   c0007abe <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c4d:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c73:	83 ec 0c             	sub    esp,0xc
c0006c76:	50                   	push   eax
c0006c77:	e8 98 52 00 00       	call   c000bf14 <Device::closeAll()>
c0006c7c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c82:	83 c4 10             	add    esp,0x10
c0006c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c87:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c8b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c9b:	5b                   	pop    ebx
c0006c9c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c9f:	5e                   	pop    esi
c0006ca0:	5f                   	pop    edi
c0006ca1:	ff e0                	jmp    eax

c0006ca3 <Krnl::firstTask()>:
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 14             	sub    esp,0x14
c0006ca7:	fb                   	sti    
c0006ca8:	68 0f fa 01 c0       	push   0xc001fa0f
c0006cad:	e8 c0 95 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c0006cb2:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cb9:	e8 f0 0d 00 00       	call   c0007aae <malloc>
c0006cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc5:	89 c3                	mov    ebx,eax
c0006cc7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006ccc:	50                   	push   eax
c0006ccd:	68 28 fa 01 c0       	push   0xc001fa28
c0006cd2:	6a 01                	push   0x1
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 56 df 00 00       	call   c0014c30 <Process::Process(bool, char const*, Process*, char**)>
c0006cda:	83 c4 20             	add    esp,0x20
c0006cdd:	68 ff 00 00 00       	push   0xff
c0006ce2:	6a 00                	push   0x0
c0006ce4:	68 f5 74 00 c0       	push   0xc00074f5
c0006ce9:	53                   	push   ebx
c0006cea:	e8 65 e1 00 00       	call   c0014e54 <Process::createThread(void (*)(void*), void*, int)>
c0006cef:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006cf5:	6a 7a                	push   0x7a
c0006cf7:	6a 00                	push   0x0
c0006cf9:	68 3c 59 01 c0       	push   0xc001593c
c0006cfe:	52                   	push   edx
c0006cff:	e8 50 e1 00 00       	call   c0014e54 <Process::createThread(void (*)(void*), void*, int)>
c0006d04:	83 c4 20             	add    esp,0x20
c0006d07:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0c:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d13:	e8 90 9d 00 00       	call   c0010aa8 <KeInitRand()>
c0006d18:	83 ec 0c             	sub    esp,0xc
c0006d1b:	68 24 fb 01 c0       	push   0xc001fb24
c0006d20:	e8 4d 95 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c0006d25:	e8 35 f0 00 00       	call   c0015d5f <Vm::initialise8086()>
c0006d2a:	e8 35 40 00 00       	call   c000ad64 <Fs::initVFS()>
c0006d2f:	c7 04 24 35 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa35
c0006d36:	e8 37 95 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c0006d3b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d48:	6a 00                	push   0x0
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	50                   	push   eax
c0006d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d52:	83 c4 14             	add    esp,0x14
c0006d55:	68 24 fb 01 c0       	push   0xc001fb24
c0006d5a:	e8 13 95 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c0006d5f:	e8 ee 99 00 00       	call   c0010752 <Krnl::loadSystemEnv()>
c0006d64:	e8 4b 9c 00 00       	call   c00109b4 <Krnl::setupPowerManager()>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	6a 3a                	push   0x3a
c0006d6e:	68 4f fa 01 c0       	push   0xc001fa4f
c0006d73:	68 58 fa 01 c0       	push   0xc001fa58
c0006d78:	e8 fb c1 00 00       	call   c0012f78 <Reg::readIntWithDefault(char*, char*, int)>
c0006d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d80:	e8 ef 4a 00 00       	call   c000b874 <User::loadClockSettings(int)>
c0006d85:	c7 04 24 48 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb48
c0006d8c:	e8 e1 94 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c0006d91:	59                   	pop    ecx
c0006d92:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d97:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d9d:	53                   	push   ebx
c0006d9e:	e8 6f 51 00 00       	call   c000bf12 <Device::loadDriversForAll()>
c0006da3:	c7 04 24 60 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa60
c0006daa:	e8 c3 94 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c0006daf:	58                   	pop    eax
c0006db0:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006db6:	5a                   	pop    edx
c0006db7:	6a 01                	push   0x1
c0006db9:	68 71 fa 01 c0       	push   0xc001fa71
c0006dbe:	e8 83 d8 00 00       	call   c0014646 <Thr::loadDLL(char const*, bool)>
c0006dc3:	59                   	pop    ecx
c0006dc4:	5a                   	pop    edx
c0006dc5:	53                   	push   ebx
c0006dc6:	50                   	push   eax
c0006dc7:	e8 ab da 00 00       	call   c0014877 <Thr::executeDLL(unsigned long, void*)>
c0006dcc:	83 c4 10             	add    esp,0x10
c0006dcf:	83 ec 0c             	sub    esp,0xc
c0006dd2:	6a 02                	push   0x2
c0006dd4:	e8 df e4 00 00       	call   c00152b8 <blockTask(TaskState)>
c0006dd9:	83 c4 10             	add    esp,0x10
c0006ddc:	eb f1                	jmp    c0006dcf <Krnl::firstTask()+0x12c>

c0006dde <Computer::Computer()>:
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de5:	83 ec 08             	sub    esp,0x8
c0006de8:	68 8d fa 01 c0       	push   0xc001fa8d
c0006ded:	50                   	push   eax
c0006dee:	e8 9b 51 00 00       	call   c000bf8e <Device::Device(char const*)>
c0006df3:	83 c4 10             	add    esp,0x10
c0006df6:	ba 94 fb 01 c0       	mov    edx,0xc001fb94
c0006dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dff:	89 10                	mov    DWORD PTR [eax],edx
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e27:	83 ca 04             	or     edx,0x4
c0006e2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e3a:	0f b6 d0             	movzx  edx,al
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e52:	0f b6 d0             	movzx  edx,al
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	8d 50 01             	lea    edx,[eax+0x1]
c0006e6b:	88 d1                	mov    cl,dl
c0006e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e77:	0f b6 d0             	movzx  edx,al
c0006e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e82:	83 e1 3f             	and    ecx,0x3f
c0006e85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e89:	90                   	nop
c0006e8a:	83 c4 0c             	add    esp,0xc
c0006e8d:	c3                   	ret    

c0006e8e <Computer::setBootMessage(char const*)>:
c0006e8e:	c3                   	ret    
c0006e8f:	90                   	nop

c0006e90 <Computer::detectFeatures()>:
c0006e90:	55                   	push   ebp
c0006e91:	57                   	push   edi
c0006e92:	56                   	push   esi
c0006e93:	53                   	push   ebx
c0006e94:	83 ec 1c             	sub    esp,0x1c
c0006e97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ea7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ead:	e8 47 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eb2:	31 d2                	xor    edx,edx
c0006eb4:	85 c0                	test   eax,eax
c0006eb6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ebc:	0f 95 c2             	setne  dl
c0006ebf:	83 e0 fd             	and    eax,0xfffffffd
c0006ec2:	d1 e2                	shl    edx,1
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	a8 02                	test   al,0x2
c0006ece:	75 51                	jne    c0006f21 <Computer::detectFeatures()+0x91>
c0006ed0:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ed7:	74 0f                	je     c0006ee8 <Computer::detectFeatures()+0x58>
c0006ed9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006edf:	83 e0 fb             	and    eax,0xfffffffb
c0006ee2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee8:	e8 19 74 01 00       	call   c001e306 <x87Detect>
c0006eed:	83 e0 01             	and    eax,0x1
c0006ef0:	c1 e0 04             	shl    eax,0x4
c0006ef3:	89 c2                	mov    edx,eax
c0006ef5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efb:	83 e0 ef             	and    eax,0xffffffef
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	88 c2                	mov    dl,al
c0006f08:	a8 10                	test   al,0x10
c0006f0a:	0f 85 33 01 00 00    	jne    c0007043 <Computer::detectFeatures()+0x1b3>
c0006f10:	80 e2 80             	and    dl,0x80
c0006f13:	0f 85 4c 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1d5>
c0006f19:	83 c4 1c             	add    esp,0x1c
c0006f1c:	5b                   	pop    ebx
c0006f1d:	5e                   	pop    esi
c0006f1e:	5f                   	pop    edi
c0006f1f:	5d                   	pop    ebp
c0006f20:	c3                   	ret    
c0006f21:	83 ec 0c             	sub    esp,0xc
c0006f24:	6a 20                	push   0x20
c0006f26:	e8 5d 88 00 00       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c0006f2b:	83 e0 01             	and    eax,0x1
c0006f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 f7             	and    eax,0xfffffff7
c0006f3e:	09 d0                	or     eax,edx
c0006f40:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f46:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f4d:	e8 36 88 00 00       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c0006f52:	89 c2                	mov    edx,eax
c0006f54:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f5a:	83 e2 01             	and    edx,0x1
c0006f5d:	83 e0 fe             	and    eax,0xfffffffe
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f68:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f6f:	e8 14 88 00 00       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	c1 e2 07             	shl    edx,0x7
c0006f7f:	83 e0 7f             	and    eax,0x7f
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f91:	e8 f2 87 00 00       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	83 c4 10             	add    esp,0x10
c0006f99:	83 e0 01             	and    eax,0x1
c0006f9c:	c1 e0 05             	shl    eax,0x5
c0006f9f:	89 c2                	mov    edx,eax
c0006fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa7:	83 e0 df             	and    eax,0xffffffdf
c0006faa:	09 d0                	or     eax,edx
c0006fac:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fb6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbc:	0f 84 c9 00 00 00    	je     c000708b <Computer::detectFeatures()+0x1fb>
c0006fc2:	83 e0 fe             	and    eax,0xfffffffe
c0006fc5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	89 c2                	mov    edx,eax
c0006fd3:	83 e2 09             	and    edx,0x9
c0006fd6:	83 fa 01             	cmp    edx,0x1
c0006fd9:	75 09                	jne    c0006fe4 <Computer::detectFeatures()+0x154>
c0006fdb:	83 e0 fe             	and    eax,0xfffffffe
c0006fde:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe4:	83 ec 0c             	sub    esp,0xc
c0006fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006feb:	50                   	push   eax
c0006fec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff0:	55                   	push   ebp
c0006ff1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ff5:	57                   	push   edi
c0006ff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ffa:	56                   	push   esi
c0006ffb:	68 00 00 00 80       	push   0x80000000
c0007000:	e8 ff 86 00 00       	call   c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007005:	83 c4 20             	add    esp,0x20
c0007008:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000700f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007013:	0f 86 b7 fe ff ff    	jbe    c0006ed0 <Computer::detectFeatures()+0x40>
c0007019:	83 ec 0c             	sub    esp,0xc
c000701c:	50                   	push   eax
c000701d:	55                   	push   ebp
c000701e:	57                   	push   edi
c000701f:	56                   	push   esi
c0007020:	68 01 00 00 80       	push   0x80000001
c0007025:	e8 da 86 00 00       	call   c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007030:	83 c4 20             	add    esp,0x20
c0007033:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007038:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000703e:	e9 8d fe ff ff       	jmp    c0006ed0 <Computer::detectFeatures()+0x40>
c0007043:	e8 78 72 01 00       	call   c001e2c0 <absolutelyNoChanceInHell>
c0007048:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000704e:	c1 e0 07             	shl    eax,0x7
c0007051:	83 e2 7f             	and    edx,0x7f
c0007054:	09 c2                	or     edx,eax
c0007056:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000705c:	80 e2 80             	and    dl,0x80
c000705f:	0f 84 b4 fe ff ff    	je     c0006f19 <Computer::detectFeatures()+0x89>
c0007065:	e8 c6 6e 01 00       	call   c001df30 <avxDetect>
c000706a:	83 e0 01             	and    eax,0x1
c000706d:	c1 e0 05             	shl    eax,0x5
c0007070:	89 c2                	mov    edx,eax
c0007072:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007078:	83 e0 df             	and    eax,0xffffffdf
c000707b:	09 d0                	or     eax,edx
c000707d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007083:	83 c4 1c             	add    esp,0x1c
c0007086:	5b                   	pop    ebx
c0007087:	5e                   	pop    esi
c0007088:	5f                   	pop    edi
c0007089:	5d                   	pop    ebp
c000708a:	c3                   	ret    
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	68 00 02 00 00       	push   0x200
c0007093:	e8 f0 86 00 00       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	89 c2                	mov    edx,eax
c000709d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070a3:	83 e2 01             	and    edx,0x1
c00070a6:	83 e0 fe             	and    eax,0xfffffffe
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b1:	e9 15 ff ff ff       	jmp    c0006fcb <Computer::detectFeatures()+0x13b>

c00070b6 <Computer::displayFeatures()>:
c00070b6:	c3                   	ret    
c00070b7:	90                   	nop

c00070b8 <Computer::rdmsr(unsigned int)>:
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070c6:	74 0a                	je     c00070d2 <Computer::rdmsr(unsigned int)+0x1a>
c00070c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070cc:	0f 32                	rdmsr  
c00070ce:	83 c4 0c             	add    esp,0xc
c00070d1:	c3                   	ret    
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	68 96 fa 01 c0       	push   0xc001fa96
c00070da:	e8 10 98 00 00       	call   c00108ef <KePanic(char const*)>
c00070df:	83 c4 10             	add    esp,0x10
c00070e2:	eb e4                	jmp    c00070c8 <Computer::rdmsr(unsigned int)+0x10>

c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e4:	57                   	push   edi
c00070e5:	56                   	push   esi
c00070e6:	83 ec 04             	sub    esp,0x4
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fc:	74 10                	je     c000710e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007102:	89 f0                	mov    eax,esi
c0007104:	89 fa                	mov    edx,edi
c0007106:	0f 30                	wrmsr  
c0007108:	83 c4 04             	add    esp,0x4
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	c3                   	ret    
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 9c fa 01 c0       	push   0xc001fa9c
c0007116:	e8 d4 97 00 00       	call   c00108ef <KePanic(char const*)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	eb de                	jmp    c00070fe <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007120 <Computer::shutdown()>:
c0007120:	83 ec 0c             	sub    esp,0xc
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 10                	mov    edx,DWORD PTR [eax]
c0007129:	6a 00                	push   0x0
c000712b:	6a 00                	push   0x0
c000712d:	6a 00                	push   0x0
c000712f:	50                   	push   eax
c0007130:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007133:	83 c4 1c             	add    esp,0x1c
c0007136:	c3                   	ret    
c0007137:	90                   	nop

c0007138 <Computer::restart()>:
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007141:	6a 00                	push   0x0
c0007143:	6a 00                	push   0x0
c0007145:	6a 01                	push   0x1
c0007147:	50                   	push   eax
c0007148:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714b:	83 c4 1c             	add    esp,0x1c
c000714e:	c3                   	ret    
c000714f:	90                   	nop

c0007150 <Computer::sleep()>:
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000715a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000715e:	e9 3d 80 00 00       	jmp    c000f1a0 <ACPI::sleep()>
c0007163:	90                   	nop

c0007164 <Computer::nmiEnabled()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::readCMOS(unsigned char)>:
c0007170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007178:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000717f:	75 09                	jne    c000718a <Computer::readCMOS(unsigned char)+0x1a>
c0007181:	b2 80                	mov    dl,0x80
c0007183:	09 d0                	or     eax,edx
c0007185:	e6 70                	out    0x70,al
c0007187:	e4 71                	in     al,0x71
c0007189:	c3                   	ret    
c000718a:	31 d2                	xor    edx,edx
c000718c:	eb f5                	jmp    c0007183 <Computer::readCMOS(unsigned char)+0x13>

c000718e <Computer::enableNMI(bool)>:
c000718e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000719c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071a4:	eb ca                	jmp    c0007170 <Computer::readCMOS(unsigned char)>

c00071a6 <Computer::open(int, int, void*)>:
c00071a6:	56                   	push   esi
c00071a7:	53                   	push   ebx
c00071a8:	83 ec 10             	sub    esp,0x10
c00071ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071af:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071b6:	68 a2 fa 01 c0       	push   0xc001faa2
c00071bb:	0f 94 05 00 1f 02 c0 	sete   BYTE PTR ds:0xc0021f00
c00071c2:	e8 ab 90 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c00071c7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ce:	e8 db 08 00 00       	call   c0007aae <malloc>
c00071d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071d6:	89 c6                	mov    esi,eax
c00071d8:	e8 37 7b 00 00       	call   c000ed14 <ACPI::ACPI()>
c00071dd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071e3:	58                   	pop    eax
c00071e4:	5a                   	pop    edx
c00071e5:	56                   	push   esi
c00071e6:	53                   	push   ebx
c00071e7:	e8 0a 4c 00 00       	call   c000bdf6 <Device::addChild(Device*)>
c00071ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071ef:	e8 9c fc ff ff       	call   c0006e90 <Computer::detectFeatures()>
c00071f4:	59                   	pop    ecx
c00071f5:	5e                   	pop    esi
c00071f6:	6a 01                	push   0x1
c00071f8:	53                   	push   ebx
c00071f9:	e8 90 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c00071fe:	c7 04 24 ba fa 01 c0 	mov    DWORD PTR [esp],0xc001faba
c0007205:	e8 68 90 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c000720a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007211:	e8 98 08 00 00       	call   c0007aae <malloc>
c0007216:	89 04 24             	mov    DWORD PTR [esp],eax
c0007219:	89 c6                	mov    esi,eax
c000721b:	e8 20 86 00 00       	call   c000f840 <CPU::CPU()>
c0007220:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007226:	58                   	pop    eax
c0007227:	5a                   	pop    edx
c0007228:	56                   	push   esi
c0007229:	53                   	push   ebx
c000722a:	e8 c7 4b 00 00       	call   c000bdf6 <Device::addChild(Device*)>
c000722f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007235:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007239:	8b 10                	mov    edx,DWORD PTR [eax]
c000723b:	51                   	push   ecx
c000723c:	6a 00                	push   0x0
c000723e:	6a 00                	push   0x0
c0007240:	50                   	push   eax
c0007241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007244:	83 c4 14             	add    esp,0x14
c0007247:	68 68 fb 01 c0       	push   0xc001fb68
c000724c:	e8 21 90 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c0007251:	e8 de fc 00 00       	call   c0016f34 <HalInitialiseCoprocessor()>
c0007256:	c7 04 24 d4 fa 01 c0 	mov    DWORD PTR [esp],0xc001fad4
c000725d:	e8 10 90 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c0007262:	c7 04 24 a3 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca3
c0007269:	e8 12 dd 00 00       	call   c0014f80 <setupMultitasking(void (*)())>
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007276:	5b                   	pop    ebx
c0007277:	5e                   	pop    esi
c0007278:	c3                   	ret    
c0007279:	90                   	nop

c000727a <Computer::disableNMI()>:
c000727a:	6a 00                	push   0x0
c000727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007280:	50                   	push   eax
c0007281:	e8 08 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c0007286:	5a                   	pop    edx
c0007287:	59                   	pop    ecx
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000728a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000728e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007296:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000729d:	75 0b                	jne    c00072aa <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c000729f:	b1 80                	mov    cl,0x80
c00072a1:	09 c8                	or     eax,ecx
c00072a3:	e6 70                	out    0x70,al
c00072a5:	88 d0                	mov    al,dl
c00072a7:	e6 71                	out    0x71,al
c00072a9:	c3                   	ret    
c00072aa:	31 c9                	xor    ecx,ecx
c00072ac:	eb f3                	jmp    c00072a1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072ae <Computer::handleNMI()>:
c00072ae:	56                   	push   esi
c00072af:	53                   	push   ebx
c00072b0:	83 ec 10             	sub    esp,0x10
c00072b3:	e4 92                	in     al,0x92
c00072b5:	89 c6                	mov    esi,eax
c00072b7:	e4 61                	in     al,0x61
c00072b9:	68 ef fa 01 c0       	push   0xc001faef
c00072be:	88 c3                	mov    bl,al
c00072c0:	e8 fd 36 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	83 e6 10             	and    esi,0x10
c00072cb:	75 10                	jne    c00072dd <Computer::handleNMI()+0x2f>
c00072cd:	f6 c3 40             	test   bl,0x40
c00072d0:	75 20                	jne    c00072f2 <Computer::handleNMI()+0x44>
c00072d2:	80 e3 80             	and    bl,0x80
c00072d5:	75 30                	jne    c0007307 <Computer::handleNMI()+0x59>
c00072d7:	83 c4 04             	add    esp,0x4
c00072da:	5b                   	pop    ebx
c00072db:	5e                   	pop    esi
c00072dc:	c3                   	ret    
c00072dd:	83 ec 0c             	sub    esp,0xc
c00072e0:	68 00 fb 01 c0       	push   0xc001fb00
c00072e5:	e8 05 96 00 00       	call   c00108ef <KePanic(char const*)>
c00072ea:	83 c4 10             	add    esp,0x10
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	74 e0                	je     c00072d2 <Computer::handleNMI()+0x24>
c00072f2:	83 ec 0c             	sub    esp,0xc
c00072f5:	68 0d fb 01 c0       	push   0xc001fb0d
c00072fa:	e8 f0 95 00 00       	call   c00108ef <KePanic(char const*)>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	80 e3 80             	and    bl,0x80
c0007305:	74 d0                	je     c00072d7 <Computer::handleNMI()+0x29>
c0007307:	c7 44 24 10 17 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb17
c000730f:	83 c4 04             	add    esp,0x4
c0007312:	5b                   	pop    ebx
c0007313:	5e                   	pop    esi
c0007314:	e9 d6 95 00 00       	jmp    c00108ef <KePanic(char const*)>
c0007319:	90                   	nop

c000731a <GDTEntry::setBase(unsigned int)>:
c000731a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000731e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007322:	89 c1                	mov    ecx,eax
c0007324:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007328:	c1 e9 10             	shr    ecx,0x10
c000732b:	c1 e8 18             	shr    eax,0x18
c000732e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007331:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007334:	c3                   	ret    
c0007335:	90                   	nop

c0007336 <GDTEntry::setLimit(unsigned int)>:
c0007336:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007341:	66 89 01             	mov    WORD PTR [ecx],ax
c0007344:	83 e2 f0             	and    edx,0xfffffff0
c0007347:	c1 e8 10             	shr    eax,0x10
c000734a:	83 e0 0f             	and    eax,0xf
c000734d:	09 d0                	or     eax,edx
c000734f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007352:	c3                   	ret    
c0007353:	90                   	nop

c0007354 <GDT::GDT()>:
c0007354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000735e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007368:	90                   	nop
c0007369:	c3                   	ret    

c000736a <GDT::addEntry(GDTEntry)>:
c000736a:	53                   	push   ebx
c000736b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000736f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007373:	8b 02                	mov    eax,DWORD PTR [edx]
c0007375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007379:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000737d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007381:	8d 48 01             	lea    ecx,[eax+0x1]
c0007384:	c1 e0 03             	shl    eax,0x3
c0007387:	89 0a                	mov    DWORD PTR [edx],ecx
c0007389:	5b                   	pop    ebx
c000738a:	c3                   	ret    
c000738b:	90                   	nop

c000738c <GDT::getNumberOfEntries()>:
c000738c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007390:	8b 00                	mov    eax,DWORD PTR [eax]
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::flush()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 10                	mov    edx,DWORD PTR [eax]
c000739a:	83 c0 04             	add    eax,0x4
c000739d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073a4:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073a9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073b0:	e9 a5 8f ff ff       	jmp    c000035a <loadGDT>
c00073b5:	90                   	nop

c00073b6 <GDT::setup()>:
c00073b6:	57                   	push   edi
c00073b7:	56                   	push   esi
c00073b8:	53                   	push   ebx
c00073b9:	83 ec 30             	sub    esp,0x30
c00073bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c0:	6a 00                	push   0x0
c00073c2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073c6:	56                   	push   esi
c00073c7:	e8 4e ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073cc:	6a 00                	push   0x0
c00073ce:	56                   	push   esi
c00073cf:	e8 62 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073d4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073dc:	6a 00                	push   0x0
c00073de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073e2:	56                   	push   esi
c00073e3:	e8 32 ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073e8:	68 ff ff ff 00       	push   0xffffff
c00073ed:	56                   	push   esi
c00073ee:	e8 43 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073ff:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007403:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007408:	0d 00 9a c0 00       	or     eax,0xc09a00
c000740d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007411:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007415:	89 f8                	mov    eax,edi
c0007417:	89 fa                	mov    edx,edi
c0007419:	80 e4 f7             	and    ah,0xf7
c000741c:	80 ce 60             	or     dh,0x60
c000741f:	89 c7                	mov    edi,eax
c0007421:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007425:	80 cc 60             	or     ah,0x60
c0007428:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000742c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007430:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007434:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007438:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000743c:	83 c4 20             	add    esp,0x20
c000743f:	6a 00                	push   0x0
c0007441:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007445:	50                   	push   eax
c0007446:	e8 cf fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000744b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000744f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007453:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007457:	83 e0 3f             	and    eax,0x3f
c000745a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000745e:	6a 00                	push   0x0
c0007460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007464:	50                   	push   eax
c0007465:	e8 b0 fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000746a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000746e:	83 e0 3f             	and    eax,0x3f
c0007471:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007475:	83 c4 0c             	add    esp,0xc
c0007478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000747c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007480:	53                   	push   ebx
c0007481:	e8 e4 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007486:	83 c4 0c             	add    esp,0xc
c0007489:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000748d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007491:	53                   	push   ebx
c0007492:	e8 d3 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007497:	83 c4 0c             	add    esp,0xc
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	e8 c8 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074a9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074ad:	53                   	push   ebx
c00074ae:	e8 b7 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074b3:	83 c4 0c             	add    esp,0xc
c00074b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074be:	53                   	push   ebx
c00074bf:	e8 a6 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074c4:	83 c4 0c             	add    esp,0xc
c00074c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cf:	53                   	push   ebx
c00074d0:	e8 95 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074d5:	83 c4 0c             	add    esp,0xc
c00074d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e0:	53                   	push   ebx
c00074e1:	e8 84 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::flush()>
c00074ee:	83 c4 40             	add    esp,0x40
c00074f1:	5b                   	pop    ebx
c00074f2:	5e                   	pop    esi
c00074f3:	5f                   	pop    edi
c00074f4:	c3                   	ret    

c00074f5 <idleFunction(void*)>:
c00074f5:	83 ec 0c             	sub    esp,0xc
c00074f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00074fd:	48                   	dec    eax
c00074fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007503:	75 01                	jne    c0007506 <idleFunction(void*)+0x11>
c0007505:	fb                   	sti    
c0007506:	e8 f5 f6 00 00       	call   c0016c00 <HalSystemIdle()>
c000750b:	e8 b2 73 01 00       	call   c001e8c2 <idleCommon()>
c0007510:	eb f4                	jmp    c0007506 <idleFunction(void*)+0x11>
c0007512:	66 90                	xchg   ax,ax

c0007514 <IDTEntry::IDTEntry(bool)>:
c0007514:	53                   	push   ebx
c0007515:	83 ec 04             	sub    esp,0x4
c0007518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751c:	88 04 24             	mov    BYTE PTR [esp],al
c000751f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007523:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007538:	83 e2 f0             	and    edx,0xfffffff0
c000753b:	83 ca 0e             	or     edx,0xe
c000753e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007545:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007548:	83 e2 ef             	and    edx,0xffffffef
c000754b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007552:	85 c0                	test   eax,eax
c0007554:	74 06                	je     c000755c <IDTEntry::IDTEntry(bool)+0x48>
c0007556:	b2 03                	mov    dl,0x3
c0007558:	eb 06                	jmp    c0007560 <IDTEntry::IDTEntry(bool)+0x4c>
c000755a:	66 90                	xchg   ax,ax
c000755c:	b2 00                	mov    dl,0x0
c000755e:	66 90                	xchg   ax,ax
c0007560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007564:	83 e2 03             	and    edx,0x3
c0007567:	89 d3                	mov    ebx,edx
c0007569:	c1 e3 05             	shl    ebx,0x5
c000756c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000756f:	83 e2 9f             	and    edx,0xffffff9f
c0007572:	88 d1                	mov    cl,dl
c0007574:	88 da                	mov    dl,bl
c0007576:	09 ca                	or     edx,ecx
c0007578:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007582:	83 ca 80             	or     edx,0xffffff80
c0007585:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007588:	90                   	nop
c0007589:	83 c4 04             	add    esp,0x4
c000758c:	5b                   	pop    ebx
c000758d:	c3                   	ret    

c000758e <IDTEntry::setOffset(unsigned int)>:
c000758e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007596:	66 89 02             	mov    WORD PTR [edx],ax
c0007599:	c1 e8 10             	shr    eax,0x10
c000759c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a0:	c3                   	ret    
c00075a1:	90                   	nop
c00075a2:	66 90                	xchg   ax,ax

c00075a4 <IDT::IDT()>:
c00075a4:	90                   	nop
c00075a5:	c3                   	ret    

c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075aa:	83 c0 30             	add    eax,0x30
c00075ad:	c3                   	ret    

c00075ae <IDT::addEntry(IDTEntry, int)>:
c00075ae:	53                   	push   ebx
c00075af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075c6:	5b                   	pop    ebx
c00075c7:	c3                   	ret    

c00075c8 <IDT::addEntry(int, void (*)(), bool)>:
c00075c8:	53                   	push   ebx
c00075c9:	83 ec 10             	sub    esp,0x10
c00075cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d1:	50                   	push   eax
c00075d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075d6:	53                   	push   ebx
c00075d7:	e8 38 ff ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c00075dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e0:	53                   	push   ebx
c00075e1:	e8 a8 ff ff ff       	call   c000758e <IDTEntry::setOffset(unsigned int)>
c00075e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075f6:	e8 b3 ff ff ff       	call   c00075ae <IDT::addEntry(IDTEntry, int)>
c00075fb:	83 c4 30             	add    esp,0x30
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::flush()>:
c0007600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007604:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c000760d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007612:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007619:	c3                   	ret    

c000761a <IDT::setup()>:
c000761a:	57                   	push   edi
c000761b:	56                   	push   esi
c000761c:	53                   	push   ebx
c000761d:	83 ec 10             	sub    esp,0x10
c0007620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007624:	6a 00                	push   0x0
c0007626:	68 c0 df 01 c0       	push   0xc001dfc0
c000762b:	6a 00                	push   0x0
c000762d:	53                   	push   ebx
c000762e:	e8 95 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007633:	6a 00                	push   0x0
c0007635:	68 d0 df 01 c0       	push   0xc001dfd0
c000763a:	6a 01                	push   0x1
c000763c:	53                   	push   ebx
c000763d:	e8 86 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	6a 00                	push   0x0
c0007647:	68 da df 01 c0       	push   0xc001dfda
c000764c:	6a 02                	push   0x2
c000764e:	53                   	push   ebx
c000764f:	e8 74 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007654:	6a 00                	push   0x0
c0007656:	68 e4 df 01 c0       	push   0xc001dfe4
c000765b:	6a 03                	push   0x3
c000765d:	53                   	push   ebx
c000765e:	e8 65 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007663:	83 c4 20             	add    esp,0x20
c0007666:	6a 00                	push   0x0
c0007668:	68 ee df 01 c0       	push   0xc001dfee
c000766d:	6a 04                	push   0x4
c000766f:	53                   	push   ebx
c0007670:	e8 53 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007675:	6a 00                	push   0x0
c0007677:	68 f8 df 01 c0       	push   0xc001dff8
c000767c:	6a 05                	push   0x5
c000767e:	53                   	push   ebx
c000767f:	e8 44 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007684:	83 c4 20             	add    esp,0x20
c0007687:	6a 00                	push   0x0
c0007689:	68 02 e0 01 c0       	push   0xc001e002
c000768e:	6a 06                	push   0x6
c0007690:	53                   	push   ebx
c0007691:	e8 32 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007696:	6a 00                	push   0x0
c0007698:	68 0c e0 01 c0       	push   0xc001e00c
c000769d:	6a 07                	push   0x7
c000769f:	53                   	push   ebx
c00076a0:	e8 23 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076a5:	83 c4 20             	add    esp,0x20
c00076a8:	6a 00                	push   0x0
c00076aa:	68 16 e0 01 c0       	push   0xc001e016
c00076af:	6a 08                	push   0x8
c00076b1:	53                   	push   ebx
c00076b2:	e8 11 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076b7:	6a 00                	push   0x0
c00076b9:	68 1e e0 01 c0       	push   0xc001e01e
c00076be:	6a 09                	push   0x9
c00076c0:	53                   	push   ebx
c00076c1:	e8 02 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076c6:	83 c4 20             	add    esp,0x20
c00076c9:	6a 00                	push   0x0
c00076cb:	68 28 e0 01 c0       	push   0xc001e028
c00076d0:	6a 0a                	push   0xa
c00076d2:	53                   	push   ebx
c00076d3:	e8 f0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076d8:	6a 00                	push   0x0
c00076da:	68 30 e0 01 c0       	push   0xc001e030
c00076df:	6a 0b                	push   0xb
c00076e1:	53                   	push   ebx
c00076e2:	e8 e1 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076e7:	83 c4 20             	add    esp,0x20
c00076ea:	6a 00                	push   0x0
c00076ec:	68 38 e0 01 c0       	push   0xc001e038
c00076f1:	6a 0c                	push   0xc
c00076f3:	53                   	push   ebx
c00076f4:	e8 cf fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076f9:	6a 00                	push   0x0
c00076fb:	68 40 e0 01 c0       	push   0xc001e040
c0007700:	6a 0d                	push   0xd
c0007702:	53                   	push   ebx
c0007703:	e8 c0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007708:	83 c4 20             	add    esp,0x20
c000770b:	6a 00                	push   0x0
c000770d:	68 5a e0 01 c0       	push   0xc001e05a
c0007712:	6a 0e                	push   0xe
c0007714:	53                   	push   ebx
c0007715:	e8 ae fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000771a:	6a 00                	push   0x0
c000771c:	68 62 e0 01 c0       	push   0xc001e062
c0007721:	6a 0f                	push   0xf
c0007723:	53                   	push   ebx
c0007724:	e8 9f fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007729:	83 c4 20             	add    esp,0x20
c000772c:	6a 00                	push   0x0
c000772e:	68 6c e0 01 c0       	push   0xc001e06c
c0007733:	6a 10                	push   0x10
c0007735:	53                   	push   ebx
c0007736:	e8 8d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000773b:	6a 00                	push   0x0
c000773d:	68 76 e0 01 c0       	push   0xc001e076
c0007742:	6a 11                	push   0x11
c0007744:	53                   	push   ebx
c0007745:	e8 7e fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000774a:	83 c4 20             	add    esp,0x20
c000774d:	6a 00                	push   0x0
c000774f:	68 80 e0 01 c0       	push   0xc001e080
c0007754:	6a 12                	push   0x12
c0007756:	53                   	push   ebx
c0007757:	e8 6c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000775c:	6a 01                	push   0x1
c000775e:	68 1a e1 01 c0       	push   0xc001e11a
c0007763:	6a 60                	push   0x60
c0007765:	53                   	push   ebx
c0007766:	e8 5d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000776b:	83 c4 20             	add    esp,0x20
c000776e:	6a 00                	push   0x0
c0007770:	68 21 e1 01 c0       	push   0xc001e121
c0007775:	6a 20                	push   0x20
c0007777:	53                   	push   ebx
c0007778:	e8 4b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000777d:	6a 00                	push   0x0
c000777f:	68 0c e1 01 c0       	push   0xc001e10c
c0007784:	6a 21                	push   0x21
c0007786:	53                   	push   ebx
c0007787:	e8 3c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000778c:	83 c4 20             	add    esp,0x20
c000778f:	6a 00                	push   0x0
c0007791:	68 13 e1 01 c0       	push   0xc001e113
c0007796:	6a 22                	push   0x22
c0007798:	53                   	push   ebx
c0007799:	e8 2a fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000779e:	6a 00                	push   0x0
c00077a0:	68 8a e0 01 c0       	push   0xc001e08a
c00077a5:	6a 23                	push   0x23
c00077a7:	53                   	push   ebx
c00077a8:	e8 1b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ad:	83 c4 20             	add    esp,0x20
c00077b0:	6a 00                	push   0x0
c00077b2:	68 94 e0 01 c0       	push   0xc001e094
c00077b7:	6a 24                	push   0x24
c00077b9:	53                   	push   ebx
c00077ba:	e8 09 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077bf:	6a 00                	push   0x0
c00077c1:	68 9e e0 01 c0       	push   0xc001e09e
c00077c6:	6a 25                	push   0x25
c00077c8:	53                   	push   ebx
c00077c9:	e8 fa fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ce:	83 c4 20             	add    esp,0x20
c00077d1:	6a 00                	push   0x0
c00077d3:	68 a8 e0 01 c0       	push   0xc001e0a8
c00077d8:	6a 26                	push   0x26
c00077da:	53                   	push   ebx
c00077db:	e8 e8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077e0:	6a 00                	push   0x0
c00077e2:	68 b2 e0 01 c0       	push   0xc001e0b2
c00077e7:	6a 27                	push   0x27
c00077e9:	53                   	push   ebx
c00077ea:	e8 d9 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ef:	83 c4 20             	add    esp,0x20
c00077f2:	6a 00                	push   0x0
c00077f4:	68 bc e0 01 c0       	push   0xc001e0bc
c00077f9:	6a 28                	push   0x28
c00077fb:	53                   	push   ebx
c00077fc:	e8 c7 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007801:	6a 00                	push   0x0
c0007803:	68 c6 e0 01 c0       	push   0xc001e0c6
c0007808:	6a 29                	push   0x29
c000780a:	53                   	push   ebx
c000780b:	e8 b8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007810:	83 c4 20             	add    esp,0x20
c0007813:	6a 00                	push   0x0
c0007815:	68 d0 e0 01 c0       	push   0xc001e0d0
c000781a:	6a 2a                	push   0x2a
c000781c:	53                   	push   ebx
c000781d:	e8 a6 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007822:	6a 00                	push   0x0
c0007824:	68 da e0 01 c0       	push   0xc001e0da
c0007829:	6a 2b                	push   0x2b
c000782b:	53                   	push   ebx
c000782c:	e8 97 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007831:	83 c4 20             	add    esp,0x20
c0007834:	6a 00                	push   0x0
c0007836:	68 e4 e0 01 c0       	push   0xc001e0e4
c000783b:	6a 2c                	push   0x2c
c000783d:	53                   	push   ebx
c000783e:	e8 85 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007843:	6a 00                	push   0x0
c0007845:	68 ee e0 01 c0       	push   0xc001e0ee
c000784a:	6a 2d                	push   0x2d
c000784c:	53                   	push   ebx
c000784d:	e8 76 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007852:	83 c4 20             	add    esp,0x20
c0007855:	6a 00                	push   0x0
c0007857:	68 f8 e0 01 c0       	push   0xc001e0f8
c000785c:	6a 2e                	push   0x2e
c000785e:	53                   	push   ebx
c000785f:	e8 64 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007864:	6a 00                	push   0x0
c0007866:	68 02 e1 01 c0       	push   0xc001e102
c000786b:	6a 2f                	push   0x2f
c000786d:	53                   	push   ebx
c000786e:	e8 55 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007873:	83 c4 20             	add    esp,0x20
c0007876:	6a 00                	push   0x0
c0007878:	68 5c e2 01 c0       	push   0xc001e25c
c000787d:	6a 30                	push   0x30
c000787f:	53                   	push   ebx
c0007880:	e8 43 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007885:	6a 00                	push   0x0
c0007887:	68 66 e2 01 c0       	push   0xc001e266
c000788c:	6a 31                	push   0x31
c000788e:	53                   	push   ebx
c000788f:	e8 34 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007894:	83 c4 20             	add    esp,0x20
c0007897:	6a 00                	push   0x0
c0007899:	68 70 e2 01 c0       	push   0xc001e270
c000789e:	6a 32                	push   0x32
c00078a0:	53                   	push   ebx
c00078a1:	e8 22 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078a6:	6a 00                	push   0x0
c00078a8:	68 7a e2 01 c0       	push   0xc001e27a
c00078ad:	6a 33                	push   0x33
c00078af:	53                   	push   ebx
c00078b0:	e8 13 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078b5:	83 c4 20             	add    esp,0x20
c00078b8:	6a 00                	push   0x0
c00078ba:	68 84 e2 01 c0       	push   0xc001e284
c00078bf:	6a 34                	push   0x34
c00078c1:	53                   	push   ebx
c00078c2:	e8 01 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078c7:	6a 00                	push   0x0
c00078c9:	68 8e e2 01 c0       	push   0xc001e28e
c00078ce:	6a 35                	push   0x35
c00078d0:	53                   	push   ebx
c00078d1:	e8 f2 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078d6:	83 c4 20             	add    esp,0x20
c00078d9:	6a 00                	push   0x0
c00078db:	68 98 e2 01 c0       	push   0xc001e298
c00078e0:	6a 36                	push   0x36
c00078e2:	53                   	push   ebx
c00078e3:	e8 e0 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078e8:	6a 00                	push   0x0
c00078ea:	68 a2 e2 01 c0       	push   0xc001e2a2
c00078ef:	6a 37                	push   0x37
c00078f1:	53                   	push   ebx
c00078f2:	e8 d1 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078f7:	83 c4 1c             	add    esp,0x1c
c00078fa:	6a 03                	push   0x3
c00078fc:	6a 02                	push   0x2
c00078fe:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007904:	e8 01 25 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007909:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007910:	89 c6                	mov    esi,eax
c0007912:	e8 97 01 00 00       	call   c0007aae <malloc>
c0007917:	81 c6 00 20 00 00    	add    esi,0x2000
c000791d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007920:	89 c7                	mov    edi,eax
c0007922:	e8 2d 16 00 00       	call   c0008f54 <TSS::TSS()>
c0007927:	83 c4 0c             	add    esp,0xc
c000792a:	68 16 e0 01 c0       	push   0xc001e016
c000792f:	56                   	push   esi
c0007930:	57                   	push   edi
c0007931:	e8 62 16 00 00       	call   c0008f98 <TSS::setup(unsigned long, unsigned long)>
c0007936:	89 c6                	mov    esi,eax
c0007938:	58                   	pop    eax
c0007939:	5a                   	pop    edx
c000793a:	6a 00                	push   0x0
c000793c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007940:	50                   	push   eax
c0007941:	e8 ce fb ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c0007946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000794f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007956:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000795c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007960:	80 ce 05             	or     dh,0x5
c0007963:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007966:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000796a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007974:	e8 87 fc ff ff       	call   c0007600 <IDT::flush()>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	c3                   	ret    

c0007980 <sbrk>:
c0007980:	55                   	push   ebp
c0007981:	57                   	push   edi
c0007982:	56                   	push   esi
c0007983:	53                   	push   ebx
c0007984:	83 ec 1c             	sub    esp,0x1c
c0007987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000798b:	85 c0                	test   eax,eax
c000798d:	74 61                	je     c00079f0 <sbrk+0x70>
c000798f:	78 66                	js     c00079f7 <sbrk+0x77>
c0007991:	8b 15 e8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021ee8
c0007997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000799b:	05 ff 0f 00 00       	add    eax,0xfff
c00079a0:	89 c5                	mov    ebp,eax
c00079a2:	78 6b                	js     c0007a0f <sbrk+0x8f>
c00079a4:	c1 fd 0c             	sar    ebp,0xc
c00079a7:	bb 00 00 00 00       	mov    ebx,0x0
c00079ac:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079b2:	8b 3d e8 1e 02 c0    	mov    edi,DWORD PTR ds:0xc0021ee8
c00079b8:	e8 f6 03 00 00       	call   c0007db3 <Phys::allocatePage()>
c00079bd:	68 01 04 00 00       	push   0x401
c00079c2:	57                   	push   edi
c00079c3:	50                   	push   eax
c00079c4:	56                   	push   esi
c00079c5:	e8 3a 23 00 00       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ca:	81 05 e8 1e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021ee8,0x1000
c00079d4:	83 c3 01             	add    ebx,0x1
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	39 dd                	cmp    ebp,ebx
c00079dc:	75 ce                	jne    c00079ac <sbrk+0x2c>
c00079de:	0f 20 d8             	mov    eax,cr3
c00079e1:	0f 22 d8             	mov    cr3,eax
c00079e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e8:	83 c4 1c             	add    esp,0x1c
c00079eb:	5b                   	pop    ebx
c00079ec:	5e                   	pop    esi
c00079ed:	5f                   	pop    edi
c00079ee:	5d                   	pop    ebp
c00079ef:	c3                   	ret    
c00079f0:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c00079f5:	eb f1                	jmp    c00079e8 <sbrk+0x68>
c00079f7:	83 ec 08             	sub    esp,0x8
c00079fa:	50                   	push   eax
c00079fb:	68 b8 fb 01 c0       	push   0xc001fbb8
c0007a00:	e8 bd 2f 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a0d:	eb d9                	jmp    c00079e8 <sbrk+0x68>
c0007a0f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a15:	eb 8d                	jmp    c00079a4 <sbrk+0x24>

c0007a17 <mmap>:
c0007a17:	83 ec 18             	sub    esp,0x18
c0007a1a:	68 e8 fb 01 c0       	push   0xc001fbe8
c0007a1f:	e8 cb 8e 00 00       	call   c00108ef <KePanic(char const*)>
c0007a24:	b8 00 00 00 00       	mov    eax,0x0
c0007a29:	83 c4 1c             	add    esp,0x1c
c0007a2c:	c3                   	ret    

c0007a2d <munmap>:
c0007a2d:	83 ec 18             	sub    esp,0x18
c0007a30:	68 ed fb 01 c0       	push   0xc001fbed
c0007a35:	e8 b5 8e 00 00       	call   c00108ef <KePanic(char const*)>
c0007a3a:	b8 00 00 00 00       	mov    eax,0x0
c0007a3f:	83 c4 1c             	add    esp,0x1c
c0007a42:	c3                   	ret    

c0007a43 <liballoc_lock()>:
c0007a43:	fa                   	cli    
c0007a44:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a4b:	b8 00 00 00 00       	mov    eax,0x0
c0007a50:	c3                   	ret    

c0007a51 <liballoc_unlock()>:
c0007a51:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a56:	83 e8 01             	sub    eax,0x1
c0007a59:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a5e:	75 01                	jne    c0007a61 <liballoc_unlock()+0x10>
c0007a60:	fb                   	sti    
c0007a61:	b8 00 00 00 00       	mov    eax,0x0
c0007a66:	c3                   	ret    

c0007a67 <liballoc_alloc(int)>:
c0007a67:	83 ec 10             	sub    esp,0x10
c0007a6a:	6a 01                	push   0x1
c0007a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a70:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a76:	e8 8f 23 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007a7b:	83 c4 1c             	add    esp,0x1c
c0007a7e:	c3                   	ret    

c0007a7f <liballoc_free(void*, int)>:
c0007a7f:	83 ec 14             	sub    esp,0x14
c0007a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a86:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a8c:	e8 bb 1f 00 00       	call   c0009a4c <VAS::freeAllocatedPages(unsigned long)>
c0007a91:	b8 00 00 00 00       	mov    eax,0x0
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	c3                   	ret    

c0007a9a <realloc>:
c0007a9a:	83 ec 14             	sub    esp,0x14
c0007a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa5:	e8 3e 9b ff ff       	call   c00015e8 <dlrealloc>
c0007aaa:	83 c4 1c             	add    esp,0x1c
c0007aad:	c3                   	ret    

c0007aae <malloc>:
c0007aae:	83 ec 18             	sub    esp,0x18
c0007ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab5:	e8 f1 95 ff ff       	call   c00010ab <dlmalloc>
c0007aba:	83 c4 1c             	add    esp,0x1c
c0007abd:	c3                   	ret    

c0007abe <free>:
c0007abe:	83 ec 18             	sub    esp,0x18
c0007ac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac5:	e8 89 92 ff ff       	call   c0000d53 <dlfree>
c0007aca:	83 c4 1c             	add    esp,0x1c
c0007acd:	c3                   	ret    

c0007ace <rfree>:
c0007ace:	83 ec 18             	sub    esp,0x18
c0007ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad5:	e8 79 92 ff ff       	call   c0000d53 <dlfree>
c0007ada:	83 c4 1c             	add    esp,0x1c
c0007add:	c3                   	ret    

c0007ade <calloc>:
c0007ade:	56                   	push   esi
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 10             	sub    esp,0x10
c0007ae3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ae7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007aec:	53                   	push   ebx
c0007aed:	e8 bc ff ff ff       	call   c0007aae <malloc>
c0007af2:	89 c6                	mov    esi,eax
c0007af4:	83 c4 0c             	add    esp,0xc
c0007af7:	53                   	push   ebx
c0007af8:	6a 00                	push   0x0
c0007afa:	50                   	push   eax
c0007afb:	e8 f0 89 ff ff       	call   c00004f0 <memset>
c0007b00:	89 f0                	mov    eax,esi
c0007b02:	83 c4 14             	add    esp,0x14
c0007b05:	5b                   	pop    ebx
c0007b06:	5e                   	pop    esi
c0007b07:	c3                   	ret    

c0007b08 <KeEntryPoint>:
c0007b08:	57                   	push   edi
c0007b09:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b0e:	56                   	push   esi
c0007b0f:	89 fa                	mov    edx,edi
c0007b11:	53                   	push   ebx
c0007b12:	31 f6                	xor    esi,esi
c0007b14:	83 ec 2c             	sub    esp,0x2c
c0007b17:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b1c:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b21:	89 f0                	mov    eax,esi
c0007b23:	ee                   	out    dx,al
c0007b24:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b29:	b0 80                	mov    al,0x80
c0007b2b:	89 da                	mov    edx,ebx
c0007b2d:	ee                   	out    dx,al
c0007b2e:	b1 03                	mov    cl,0x3
c0007b30:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b35:	88 c8                	mov    al,cl
c0007b37:	ee                   	out    dx,al
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	89 fa                	mov    edx,edi
c0007b3c:	ee                   	out    dx,al
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	89 da                	mov    edx,ebx
c0007b41:	ee                   	out    dx,al
c0007b42:	b0 c7                	mov    al,0xc7
c0007b44:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 0b                	mov    al,0xb
c0007b4c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b51:	ee                   	out    dx,al
c0007b52:	68 f4 fb 01 c0       	push   0xc001fbf4
c0007b57:	e8 66 2e 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0007b5c:	e8 9c 86 00 00       	call   c00101fd <KeDisplaySplashScreen()>
c0007b61:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b66:	05 ff 0f 00 00       	add    eax,0xfff
c0007b6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b73:	e8 a9 03 00 00       	call   c0007f21 <Phys::physicalMemorySetup(unsigned int)>
c0007b78:	e8 7e 1c 00 00       	call   c00097fb <Virt::virtualMemorySetup()>
c0007b7d:	58                   	pop    eax
c0007b7e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b82:	53                   	push   ebx
c0007b83:	e8 44 1f 00 00       	call   c0009acc <VAS::VAS()>
c0007b88:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b8e:	e8 c7 6c 01 00       	call   c001e85a <_init>
c0007b93:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b9a:	e8 0f ff ff ff       	call   c0007aae <malloc>
c0007b9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ba2:	89 c6                	mov    esi,eax
c0007ba4:	e8 35 f2 ff ff       	call   c0006dde <Computer::Computer()>
c0007ba9:	6a 00                	push   0x0
c0007bab:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bb1:	6a 00                	push   0x0
c0007bb3:	6a 00                	push   0x0
c0007bb5:	56                   	push   esi
c0007bb6:	e8 eb f5 ff ff       	call   c00071a6 <Computer::open(int, int, void*)>
c0007bbb:	83 c4 14             	add    esp,0x14
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 d2 1f 00 00       	call   c0009b96 <VAS::~VAS()>
c0007bc4:	83 c4 30             	add    esp,0x30
c0007bc7:	5b                   	pop    ebx
c0007bc8:	5e                   	pop    esi
c0007bc9:	5f                   	pop    edi
c0007bca:	c3                   	ret    

c0007bcb <Phys::allocateDMA(unsigned long)>:
c0007bcb:	55                   	push   ebp
c0007bcc:	31 ed                	xor    ebp,ebp
c0007bce:	57                   	push   edi
c0007bcf:	56                   	push   esi
c0007bd0:	53                   	push   ebx
c0007bd1:	31 db                	xor    ebx,ebx
c0007bd3:	83 ec 1c             	sub    esp,0x1c
c0007bd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bda:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007be2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007be8:	31 c0                	xor    eax,eax
c0007bea:	c1 ef 0c             	shr    edi,0xc
c0007bed:	eb 1b                	jmp    c0007c0a <Phys::allocateDMA(unsigned long)+0x3f>
c0007bef:	85 c0                	test   eax,eax
c0007bf1:	75 06                	jne    c0007bf9 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bf3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bf7:	89 dd                	mov    ebp,ebx
c0007bf9:	8d 70 01             	lea    esi,[eax+0x1]
c0007bfc:	39 f7                	cmp    edi,esi
c0007bfe:	74 37                	je     c0007c37 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c00:	89 f0                	mov    eax,esi
c0007c02:	83 c3 01             	add    ebx,0x1
c0007c05:	83 fb 0f             	cmp    ebx,0xf
c0007c08:	7f 13                	jg     c0007c1d <Phys::allocateDMA(unsigned long)+0x52>
c0007c0a:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c11:	74 dc                	je     c0007bef <Phys::allocateDMA(unsigned long)+0x24>
c0007c13:	31 c0                	xor    eax,eax
c0007c15:	83 c3 01             	add    ebx,0x1
c0007c18:	83 fb 0f             	cmp    ebx,0xf
c0007c1b:	7e ed                	jle    c0007c0a <Phys::allocateDMA(unsigned long)+0x3f>
c0007c1d:	83 ec 0c             	sub    esp,0xc
c0007c20:	68 0c fc 01 c0       	push   0xc001fc0c
c0007c25:	e8 c5 8c 00 00       	call   c00108ef <KePanic(char const*)>
c0007c2a:	83 c4 10             	add    esp,0x10
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c4 1c             	add    esp,0x1c
c0007c32:	5b                   	pop    ebx
c0007c33:	5e                   	pop    esi
c0007c34:	5f                   	pop    edi
c0007c35:	5d                   	pop    ebp
c0007c36:	c3                   	ret    
c0007c37:	89 e9                	mov    ecx,ebp
c0007c39:	c1 f9 04             	sar    ecx,0x4
c0007c3c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c40:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c44:	89 ca                	mov    edx,ecx
c0007c46:	83 ea 01             	sub    edx,0x1
c0007c49:	79 03                	jns    c0007c4e <Phys::allocateDMA(unsigned long)+0x83>
c0007c4b:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c4e:	c1 fa 04             	sar    edx,0x4
c0007c51:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c55:	74 08                	je     c0007c5f <Phys::allocateDMA(unsigned long)+0x94>
c0007c57:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c5b:	31 c0                	xor    eax,eax
c0007c5d:	eb b6                	jmp    c0007c15 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c5f:	85 f6                	test   esi,esi
c0007c61:	74 17                	je     c0007c7a <Phys::allocateDMA(unsigned long)+0xaf>
c0007c63:	8d 95 ec 4e 02 c0    	lea    edx,[ebp-0x3ffdb114]
c0007c69:	8d 84 05 ed 4e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdb113]
c0007c70:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c73:	83 c2 01             	add    edx,0x1
c0007c76:	39 d0                	cmp    eax,edx
c0007c78:	75 f6                	jne    c0007c70 <Phys::allocateDMA(unsigned long)+0xa5>
c0007c7a:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007c7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c83:	01 f8                	add    eax,edi
c0007c85:	85 d2                	test   edx,edx
c0007c87:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007c8c:	74 17                	je     c0007ca5 <Phys::allocateDMA(unsigned long)+0xda>
c0007c8e:	83 ec 0c             	sub    esp,0xc
c0007c91:	68 0c fc 01 c0       	push   0xc001fc0c
c0007c96:	e8 54 8c 00 00       	call   c00108ef <KePanic(char const*)>
c0007c9b:	83 c4 10             	add    esp,0x10
c0007c9e:	89 f0                	mov    eax,esi
c0007ca0:	e9 5d ff ff ff       	jmp    c0007c02 <Phys::allocateDMA(unsigned long)+0x37>
c0007ca5:	c1 e5 0c             	shl    ebp,0xc
c0007ca8:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cae:	e9 7c ff ff ff       	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x64>

c0007cb3 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cbd:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007cc2:	c1 ea 0c             	shr    edx,0xc
c0007cc5:	29 d0                	sub    eax,edx
c0007cc7:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd0:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cd5:	c1 e8 0c             	shr    eax,0xc
c0007cd8:	85 d2                	test   edx,edx
c0007cda:	74 11                	je     c0007ced <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cdc:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007ce1:	01 c2                	add    edx,eax
c0007ce3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007ce6:	83 c0 01             	add    eax,0x1
c0007ce9:	39 d0                	cmp    eax,edx
c0007ceb:	75 f6                	jne    c0007ce3 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007ced:	c3                   	ret    

c0007cee <Phys::setPageState(unsigned long, bool)>:
c0007cee:	57                   	push   edi
c0007cef:	56                   	push   esi
c0007cf0:	8b 35 ec 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eec
c0007cf6:	53                   	push   ebx
c0007cf7:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d04:	0f b6 c0             	movzx  eax,al
c0007d07:	89 ca                	mov    edx,ecx
c0007d09:	83 e1 07             	and    ecx,0x7
c0007d0c:	c1 ea 03             	shr    edx,0x3
c0007d0f:	d3 c3                	rol    ebx,cl
c0007d11:	01 d6                	add    esi,edx
c0007d13:	d3 e0                	shl    eax,cl
c0007d15:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d18:	21 fb                	and    ebx,edi
c0007d1a:	88 1e                	mov    BYTE PTR [esi],bl
c0007d1c:	8b 1d ec 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eec
c0007d22:	01 da                	add    edx,ebx
c0007d24:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d26:	09 c8                	or     eax,ecx
c0007d28:	88 02                	mov    BYTE PTR [edx],al
c0007d2a:	5b                   	pop    ebx
c0007d2b:	5e                   	pop    esi
c0007d2c:	5f                   	pop    edi
c0007d2d:	c3                   	ret    

c0007d2e <Phys::getPageState(unsigned long)>:
c0007d2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d32:	8b 15 ec 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eec
c0007d38:	89 c8                	mov    eax,ecx
c0007d3a:	83 e1 07             	and    ecx,0x7
c0007d3d:	c1 e8 03             	shr    eax,0x3
c0007d40:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d44:	d3 f8                	sar    eax,cl
c0007d46:	83 e0 01             	and    eax,0x1
c0007d49:	c3                   	ret    

c0007d4a <Phys::freePage(unsigned long)>:
c0007d4a:	53                   	push   ebx
c0007d4b:	83 ec 08             	sub    esp,0x8
c0007d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d52:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d58:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d5e:	76 41                	jbe    c0007da1 <Phys::freePage(unsigned long)+0x57>
c0007d60:	c1 e8 0c             	shr    eax,0xc
c0007d63:	50                   	push   eax
c0007d64:	89 c3                	mov    ebx,eax
c0007d66:	e8 c3 ff ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007d6b:	5a                   	pop    edx
c0007d6c:	84 c0                	test   al,al
c0007d6e:	74 20                	je     c0007d90 <Phys::freePage(unsigned long)+0x46>
c0007d70:	83 ec 08             	sub    esp,0x8
c0007d73:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d78:	6a 00                	push   0x0
c0007d7a:	83 e8 01             	sub    eax,0x1
c0007d7d:	53                   	push   ebx
c0007d7e:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d83:	e8 66 ff ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007d88:	83 c4 10             	add    esp,0x10
c0007d8b:	83 c4 08             	add    esp,0x8
c0007d8e:	5b                   	pop    ebx
c0007d8f:	c3                   	ret    
c0007d90:	c7 44 24 10 b1 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fcb1
c0007d98:	83 c4 08             	add    esp,0x8
c0007d9b:	5b                   	pop    ebx
c0007d9c:	e9 4e 8b 00 00       	jmp    c00108ef <KePanic(char const*)>
c0007da1:	68 00 10 00 00       	push   0x1000
c0007da6:	50                   	push   eax
c0007da7:	e8 07 ff ff ff       	call   c0007cb3 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dac:	59                   	pop    ecx
c0007dad:	5b                   	pop    ebx
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    

c0007db3 <Phys::allocatePage()>:
c0007db3:	56                   	push   esi
c0007db4:	53                   	push   ebx
c0007db5:	83 ec 14             	sub    esp,0x14
c0007db8:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007dbe:	89 f3                	mov    ebx,esi
c0007dc0:	eb 0a                	jmp    c0007dcc <Phys::allocatePage()+0x19>
c0007dc2:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007dc8:	39 de                	cmp    esi,ebx
c0007dca:	74 26                	je     c0007df2 <Phys::allocatePage()+0x3f>
c0007dcc:	53                   	push   ebx
c0007dcd:	e8 5c ff ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007dd2:	5a                   	pop    edx
c0007dd3:	84 c0                	test   al,al
c0007dd5:	74 67                	je     c0007e3e <Phys::allocatePage()+0x8b>
c0007dd7:	83 c3 01             	add    ebx,0x1
c0007dda:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007de0:	75 e0                	jne    c0007dc2 <Phys::allocatePage()+0xf>
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007dee:	39 de                	cmp    esi,ebx
c0007df0:	75 da                	jne    c0007dcc <Phys::allocatePage()+0x19>
c0007df2:	83 ec 0c             	sub    esp,0xc
c0007df5:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007dfa:	83 f0 01             	xor    eax,0x1
c0007dfd:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e0a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e10:	50                   	push   eax
c0007e11:	e8 4e 28 00 00       	call   c000a664 <VAS::scanForEviction()>
c0007e16:	83 c4 10             	add    esp,0x10
c0007e19:	85 c0                	test   eax,eax
c0007e1b:	75 48                	jne    c0007e65 <Phys::allocatePage()+0xb2>
c0007e1d:	83 ec 0c             	sub    esp,0xc
c0007e20:	68 34 fc 01 c0       	push   0xc001fc34
c0007e25:	e8 c5 8a 00 00       	call   c00108ef <KePanic(char const*)>
c0007e2a:	83 c4 10             	add    esp,0x10
c0007e2d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e33:	53                   	push   ebx
c0007e34:	e8 f5 fe ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007e39:	5a                   	pop    edx
c0007e3a:	84 c0                	test   al,al
c0007e3c:	75 99                	jne    c0007dd7 <Phys::allocatePage()+0x24>
c0007e3e:	6a 01                	push   0x1
c0007e40:	53                   	push   ebx
c0007e41:	e8 a8 fe ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007e46:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e4c:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e51:	83 c2 01             	add    edx,0x1
c0007e54:	59                   	pop    ecx
c0007e55:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e5b:	c1 e0 0c             	shl    eax,0xc
c0007e5e:	5b                   	pop    ebx
c0007e5f:	83 c4 14             	add    esp,0x14
c0007e62:	5b                   	pop    ebx
c0007e63:	5e                   	pop    esi
c0007e64:	c3                   	ret    
c0007e65:	83 ec 08             	sub    esp,0x8
c0007e68:	89 c2                	mov    edx,eax
c0007e6a:	6a 01                	push   0x1
c0007e6c:	c1 ea 0c             	shr    edx,0xc
c0007e6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e73:	52                   	push   edx
c0007e74:	e8 75 fe ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007e79:	83 c4 10             	add    esp,0x10
c0007e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e80:	eb dd                	jmp    c0007e5f <Phys::allocatePage()+0xac>

c0007e82 <Phys::allocateContiguousPages(int)>:
c0007e82:	57                   	push   edi
c0007e83:	56                   	push   esi
c0007e84:	53                   	push   ebx
c0007e85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e89:	fa                   	cli    
c0007e8a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e8f:	31 db                	xor    ebx,ebx
c0007e91:	83 c0 01             	add    eax,0x1
c0007e94:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e99:	85 db                	test   ebx,ebx
c0007e9b:	75 11                	jne    c0007eae <Phys::allocateContiguousPages(int)+0x2c>
c0007e9d:	e8 11 ff ff ff       	call   c0007db3 <Phys::allocatePage()>
c0007ea2:	83 fe 01             	cmp    esi,0x1
c0007ea5:	89 c7                	mov    edi,eax
c0007ea7:	74 21                	je     c0007eca <Phys::allocateContiguousPages(int)+0x48>
c0007ea9:	bb 01 00 00 00       	mov    ebx,0x1
c0007eae:	e8 00 ff ff ff       	call   c0007db3 <Phys::allocatePage()>
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	c1 e2 0c             	shl    edx,0xc
c0007eb8:	01 fa                	add    edx,edi
c0007eba:	39 c2                	cmp    edx,eax
c0007ebc:	74 22                	je     c0007ee0 <Phys::allocateContiguousPages(int)+0x5e>
c0007ebe:	bb 01 00 00 00       	mov    ebx,0x1
c0007ec3:	89 c7                	mov    edi,eax
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	75 e4                	jne    c0007eae <Phys::allocateContiguousPages(int)+0x2c>
c0007eca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ecf:	83 e8 01             	sub    eax,0x1
c0007ed2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ed7:	75 01                	jne    c0007eda <Phys::allocateContiguousPages(int)+0x58>
c0007ed9:	fb                   	sti    
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	5b                   	pop    ebx
c0007edd:	5e                   	pop    esi
c0007ede:	5f                   	pop    edi
c0007edf:	c3                   	ret    
c0007ee0:	83 c3 01             	add    ebx,0x1
c0007ee3:	39 f3                	cmp    ebx,esi
c0007ee5:	75 b2                	jne    c0007e99 <Phys::allocateContiguousPages(int)+0x17>
c0007ee7:	eb e1                	jmp    c0007eca <Phys::allocateContiguousPages(int)+0x48>

c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ee9:	56                   	push   esi
c0007eea:	53                   	push   ebx
c0007eeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eef:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007ef5:	73 06                	jae    c0007efd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ef7:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f01:	c1 eb 0c             	shr    ebx,0xc
c0007f04:	c1 e8 0c             	shr    eax,0xc
c0007f07:	39 d8                	cmp    eax,ebx
c0007f09:	73 13                	jae    c0007f1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f0b:	6a 00                	push   0x0
c0007f0d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f10:	50                   	push   eax
c0007f11:	e8 d8 fd ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007f16:	5a                   	pop    edx
c0007f17:	89 f0                	mov    eax,esi
c0007f19:	59                   	pop    ecx
c0007f1a:	39 f3                	cmp    ebx,esi
c0007f1c:	75 ed                	jne    c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f1e:	5b                   	pop    ebx
c0007f1f:	5e                   	pop    esi
c0007f20:	c3                   	ret    

c0007f21 <Phys::physicalMemorySetup(unsigned int)>:
c0007f21:	55                   	push   ebp
c0007f22:	57                   	push   edi
c0007f23:	56                   	push   esi
c0007f24:	53                   	push   ebx
c0007f25:	83 ec 40             	sub    esp,0x40
c0007f28:	6a 10                	push   0x10
c0007f2a:	6a 00                	push   0x0
c0007f2c:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f31:	e8 ba 85 ff ff       	call   c00004f0 <memset>
c0007f36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f3f:	05 00 10 00 00       	add    eax,0x1000
c0007f44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f48:	5b                   	pop    ebx
c0007f49:	31 db                	xor    ebx,ebx
c0007f4b:	5e                   	pop    esi
c0007f4c:	50                   	push   eax
c0007f4d:	68 c7 fc 01 c0       	push   0xc001fcc7
c0007f52:	e8 6b 2a 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0007f57:	83 c4 10             	add    esp,0x10
c0007f5a:	83 ec 08             	sub    esp,0x8
c0007f5d:	6a 01                	push   0x1
c0007f5f:	53                   	push   ebx
c0007f60:	83 c3 01             	add    ebx,0x1
c0007f63:	e8 86 fd ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007f68:	83 c4 10             	add    esp,0x10
c0007f6b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f71:	75 e7                	jne    c0007f5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f73:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007f7e:	85 c0                	test   eax,eax
c0007f80:	0f 84 98 01 00 00    	je     c000811e <Phys::physicalMemorySetup(unsigned int)+0x1fd>
c0007f86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f8a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f92:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f97:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f9b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fa3:	eb 1c                	jmp    c0007fc1 <Phys::physicalMemorySetup(unsigned int)+0xa0>
c0007fa5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fa9:	83 c3 18             	add    ebx,0x18
c0007fac:	83 c6 01             	add    esi,0x1
c0007faf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fb7:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fbb:	0f 84 6d 01 00 00    	je     c000812e <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0007fc1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fc4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fc7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fd2:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fd4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fd7:	01 f0                	add    eax,esi
c0007fd9:	55                   	push   ebp
c0007fda:	11 fa                	adc    edx,edi
c0007fdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fe0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fe4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe8:	51                   	push   ecx
c0007fe9:	56                   	push   esi
c0007fea:	68 64 fc 01 c0       	push   0xc001fc64
c0007fef:	e8 ce 29 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0007ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007ff8:	83 c4 10             	add    esp,0x10
c0007ffb:	09 f8                	or     eax,edi
c0007ffd:	0f 85 2b 01 00 00    	jne    c000812e <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0008003:	83 fd 01             	cmp    ebp,0x1
c0008006:	75 9d                	jne    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c0008008:	ba 00 00 08 00       	mov    edx,0x80000
c000800d:	89 c1                	mov    ecx,eax
c000800f:	39 f2                	cmp    edx,esi
c0008011:	19 f9                	sbb    ecx,edi
c0008013:	0f 82 ab 00 00 00    	jb     c00080c4 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008019:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000801d:	89 c1                	mov    ecx,eax
c000801f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008023:	0f 83 9b 00 00 00    	jae    c00080c4 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008029:	ba 00 00 0a 00       	mov    edx,0xa0000
c000802e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008032:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008036:	39 fa                	cmp    edx,edi
c0008038:	19 e8                	sbb    eax,ebp
c000803a:	0f 82 b0 01 00 00    	jb     c00081f0 <Phys::physicalMemorySetup(unsigned int)+0x2cf>
c0008040:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008044:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008048:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000804e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008053:	83 d5 ff             	adc    ebp,0xffffffff
c0008056:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000805a:	31 c0                	xor    eax,eax
c000805c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008060:	39 fa                	cmp    edx,edi
c0008062:	89 c1                	mov    ecx,eax
c0008064:	19 e9                	sbb    ecx,ebp
c0008066:	0f 83 39 ff ff ff    	jae    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c000806c:	be 00 00 08 00       	mov    esi,0x80000
c0008071:	83 ec 04             	sub    esp,0x4
c0008074:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008078:	57                   	push   edi
c0008079:	56                   	push   esi
c000807a:	68 88 fc 01 c0       	push   0xc001fc88
c000807f:	e8 3e 29 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0008084:	5d                   	pop    ebp
c0008085:	58                   	pop    eax
c0008086:	57                   	push   edi
c0008087:	56                   	push   esi
c0008088:	e8 5c fe ff ff       	call   c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000808d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008091:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008095:	83 c4 0c             	add    esp,0xc
c0008098:	0f ac d0 0c          	shrd   eax,edx,0xc
c000809c:	8b 15 e8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee8
c00080a2:	01 d0                	add    eax,edx
c00080a4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080ab:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080b0:	52                   	push   edx
c00080b1:	50                   	push   eax
c00080b2:	68 ed fc 01 c0       	push   0xc001fced
c00080b7:	e8 06 29 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00080bc:	83 c4 10             	add    esp,0x10
c00080bf:	e9 e1 fe ff ff       	jmp    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080c4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080d0:	39 ea                	cmp    edx,ebp
c00080d2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080d6:	0f 82 c9 fe ff ff    	jb     c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080dc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080e1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080e5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080e9:	0f 83 b6 fe ff ff    	jae    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080ef:	39 ee                	cmp    esi,ebp
c00080f1:	89 f8                	mov    eax,edi
c00080f3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00080f7:	0f 83 74 ff ff ff    	jae    c0008071 <Phys::physicalMemorySetup(unsigned int)+0x150>
c00080fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008101:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008105:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008109:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000810d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008111:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008115:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008119:	e9 53 ff ff ff       	jmp    c0008071 <Phys::physicalMemorySetup(unsigned int)+0x150>
c000811e:	83 ec 0c             	sub    esp,0xc
c0008121:	68 df fc 01 c0       	push   0xc001fcdf
c0008126:	e8 c4 87 00 00       	call   c00108ef <KePanic(char const*)>
c000812b:	83 c4 10             	add    esp,0x10
c000812e:	83 ec 08             	sub    esp,0x8
c0008131:	bb 60 00 00 00       	mov    ebx,0x60
c0008136:	6a 00                	push   0x0
c0008138:	6a 06                	push   0x6
c000813a:	e8 af fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000813f:	58                   	pop    eax
c0008140:	5a                   	pop    edx
c0008141:	6a 00                	push   0x0
c0008143:	6a 07                	push   0x7
c0008145:	e8 a4 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000814a:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0008150:	83 c4 10             	add    esp,0x10
c0008153:	83 c1 02             	add    ecx,0x2
c0008156:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000815c:	83 ec 08             	sub    esp,0x8
c000815f:	6a 00                	push   0x0
c0008161:	53                   	push   ebx
c0008162:	83 c3 01             	add    ebx,0x1
c0008165:	e8 84 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008173:	75 e7                	jne    c000815c <Phys::physicalMemorySetup(unsigned int)+0x23b>
c0008175:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000817a:	bb 40 01 00 00       	mov    ebx,0x140
c000817f:	83 c0 20             	add    eax,0x20
c0008182:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008187:	eb 26                	jmp    c00081af <Phys::physicalMemorySetup(unsigned int)+0x28e>
c0008189:	83 ec 08             	sub    esp,0x8
c000818c:	6a 00                	push   0x0
c000818e:	53                   	push   ebx
c000818f:	83 c3 01             	add    ebx,0x1
c0008192:	e8 57 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0008197:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000819c:	83 c4 10             	add    esp,0x10
c000819f:	83 c0 01             	add    eax,0x1
c00081a2:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081a8:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081ad:	74 07                	je     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x295>
c00081af:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081b4:	7e d3                	jle    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x268>
c00081b6:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081bb:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081c0:	7f 26                	jg     c00081e8 <Phys::physicalMemorySetup(unsigned int)+0x2c7>
c00081c2:	83 ec 08             	sub    esp,0x8
c00081c5:	6a 00                	push   0x0
c00081c7:	53                   	push   ebx
c00081c8:	83 c3 01             	add    ebx,0x1
c00081cb:	e8 1e fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c00081d0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081d5:	83 c4 10             	add    esp,0x10
c00081d8:	83 c0 01             	add    eax,0x1
c00081db:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081e1:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081e6:	75 d3                	jne    c00081bb <Phys::physicalMemorySetup(unsigned int)+0x29a>
c00081e8:	83 c4 3c             	add    esp,0x3c
c00081eb:	5b                   	pop    ebx
c00081ec:	5e                   	pop    esi
c00081ed:	5f                   	pop    edi
c00081ee:	5d                   	pop    ebp
c00081ef:	c3                   	ret    
c00081f0:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00081f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008200:	e9 3b fe ff ff       	jmp    c0008040 <Phys::physicalMemorySetup(unsigned int)+0x11f>
c0008205:	90                   	nop

c0008206 <Pipe::isAtty()>:
c0008206:	31 c0                	xor    eax,eax
c0008208:	c3                   	ret    
c0008209:	90                   	nop

c000820a <Pipe::~Pipe()>:
c000820a:	83 ec 0c             	sub    esp,0xc
c000820d:	ba 4c fd 01 c0       	mov    edx,0xc001fd4c
c0008212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008216:	89 10                	mov    DWORD PTR [eax],edx
c0008218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821c:	83 ec 0c             	sub    esp,0xc
c000821f:	50                   	push   eax
c0008220:	e8 8f 11 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008225:	83 c4 10             	add    esp,0x10
c0008228:	90                   	nop
c0008229:	83 c4 0c             	add    esp,0xc
c000822c:	c3                   	ret    
c000822d:	90                   	nop

c000822e <Pipe::~Pipe()>:
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	83 ec 0c             	sub    esp,0xc
c0008234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008238:	e8 cd ff ff ff       	call   c000820a <Pipe::~Pipe()>
c000823d:	83 c4 10             	add    esp,0x10
c0008240:	83 ec 08             	sub    esp,0x8
c0008243:	6a 20                	push   0x20
c0008245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008249:	e8 47 26 00 00       	call   c000a895 <operator delete(void*, unsigned long)>
c000824e:	83 c4 10             	add    esp,0x10
c0008251:	83 c4 0c             	add    esp,0xc
c0008254:	c3                   	ret    
c0008255:	90                   	nop

c0008256 <Pipe::write(unsigned long long, void*, int*)>:
c0008256:	55                   	push   ebp
c0008257:	57                   	push   edi
c0008258:	56                   	push   esi
c0008259:	53                   	push   ebx
c000825a:	83 ec 1c             	sub    esp,0x1c
c000825d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008261:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008265:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008268:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000826c:	89 04 24             	mov    DWORD PTR [esp],eax
c000826f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008273:	89 d8                	mov    eax,ebx
c0008275:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008278:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000827c:	89 d6                	mov    esi,edx
c000827e:	89 d7                	mov    edi,edx
c0008280:	c1 ff 1f             	sar    edi,0x1f
c0008283:	03 34 24             	add    esi,DWORD PTR [esp]
c0008286:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000828a:	c1 f8 1f             	sar    eax,0x1f
c000828d:	39 f3                	cmp    ebx,esi
c000828f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008297:	19 f8                	sbb    eax,edi
c0008299:	b8 01 00 00 00       	mov    eax,0x1
c000829e:	72 6e                	jb     c000830e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082a3:	01 d0                	add    eax,edx
c00082a5:	99                   	cdq    
c00082a6:	f7 fb                	idiv   ebx
c00082a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ac:	29 d3                	sub    ebx,edx
c00082ae:	89 d7                	mov    edi,edx
c00082b0:	89 de                	mov    esi,ebx
c00082b2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082b5:	c1 fb 1f             	sar    ebx,0x1f
c00082b8:	39 f2                	cmp    edx,esi
c00082ba:	19 d8                	sbb    eax,ebx
c00082bc:	b8 00 00 00 00       	mov    eax,0x0
c00082c1:	72 04                	jb     c00082c7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082c3:	89 d0                	mov    eax,edx
c00082c5:	29 f0                	sub    eax,esi
c00082c7:	89 d3                	mov    ebx,edx
c00082c9:	29 c3                	sub    ebx,eax
c00082cb:	74 0b                	je     c00082d8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082cd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082d0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082d4:	89 d9                	mov    ecx,ebx
c00082d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082d8:	85 c0                	test   eax,eax
c00082da:	74 0d                	je     c00082e9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082dc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082e3:	89 de                	mov    esi,ebx
c00082e5:	89 c1                	mov    ecx,eax
c00082e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082e9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082ec:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082f1:	75 10                	jne    c0008303 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082f3:	83 ec 0c             	sub    esp,0xc
c00082f6:	68 09 fd 01 c0       	push   0xc001fd09
c00082fb:	e8 ef 85 00 00       	call   c00108ef <KePanic(char const*)>
c0008300:	83 c4 10             	add    esp,0x10
c0008303:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008307:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000830a:	89 08                	mov    DWORD PTR [eax],ecx
c000830c:	31 c0                	xor    eax,eax
c000830e:	83 c4 1c             	add    esp,0x1c
c0008311:	5b                   	pop    ebx
c0008312:	5e                   	pop    esi
c0008313:	5f                   	pop    edi
c0008314:	5d                   	pop    ebp
c0008315:	c3                   	ret    

c0008316 <Pipe::read(unsigned long long, void*, int*)>:
c0008316:	55                   	push   ebp
c0008317:	57                   	push   edi
c0008318:	56                   	push   esi
c0008319:	53                   	push   ebx
c000831a:	83 ec 1c             	sub    esp,0x1c
c000831d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008321:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008325:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008329:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000832c:	89 c8                	mov    eax,ecx
c000832e:	99                   	cdq    
c000832f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008333:	74 24                	je     c0008359 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008335:	39 f9                	cmp    ecx,edi
c0008337:	89 d1                	mov    ecx,edx
c0008339:	19 f1                	sbb    ecx,esi
c000833b:	73 1c                	jae    c0008359 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000833d:	fa                   	cli    
c000833e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008344:	e8 5b cd 00 00       	call   c00150a4 <schedule()>
c0008349:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000834e:	48                   	dec    eax
c000834f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008354:	75 d3                	jne    c0008329 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008356:	fb                   	sti    
c0008357:	eb d0                	jmp    c0008329 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008359:	39 f8                	cmp    eax,edi
c000835b:	89 d1                	mov    ecx,edx
c000835d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008360:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008364:	19 f1                	sbb    ecx,esi
c0008366:	73 07                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008368:	89 04 24             	mov    DWORD PTR [esp],eax
c000836b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000836f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008372:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008375:	29 f7                	sub    edi,esi
c0008377:	89 f8                	mov    eax,edi
c0008379:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000837d:	99                   	cdq    
c000837e:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008381:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008385:	19 d0                	sbb    eax,edx
c0008387:	73 07                	jae    c0008390 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008389:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008393:	89 ea                	mov    edx,ebp
c0008395:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008399:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000839e:	74 0d                	je     c00083ad <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083a0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083a3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ad:	85 d2                	test   edx,edx
c00083af:	74 11                	je     c00083c2 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083b5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083b8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083bc:	89 d1                	mov    ecx,edx
c00083be:	89 c7                	mov    edi,eax
c00083c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083c5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083c8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083cb:	99                   	cdq    
c00083cc:	89 f7                	mov    edi,esi
c00083ce:	03 04 24             	add    eax,DWORD PTR [esp]
c00083d1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083d5:	c1 ff 1f             	sar    edi,0x1f
c00083d8:	57                   	push   edi
c00083d9:	56                   	push   esi
c00083da:	52                   	push   edx
c00083db:	50                   	push   eax
c00083dc:	e8 5f 63 01 00       	call   c001e740 <__umoddi3>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083e7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ec:	75 10                	jne    c00083fe <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	68 26 fd 01 c0       	push   0xc001fd26
c00083f6:	e8 f4 84 00 00       	call   c00108ef <KePanic(char const*)>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008402:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008405:	89 10                	mov    DWORD PTR [eax],edx
c0008407:	83 c4 1c             	add    esp,0x1c
c000840a:	31 c0                	xor    eax,eax
c000840c:	5b                   	pop    ebx
c000840d:	5e                   	pop    esi
c000840e:	5f                   	pop    edi
c000840f:	5d                   	pop    ebp
c0008410:	c3                   	ret    
c0008411:	90                   	nop

c0008412 <Pipe::Pipe(int)>:
c0008412:	83 ec 0c             	sub    esp,0xc
c0008415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008419:	83 ec 08             	sub    esp,0x8
c000841c:	6a 00                	push   0x0
c000841e:	50                   	push   eax
c000841f:	e8 aa 0d 00 00       	call   c00091ce <UnixFile::UnixFile(int)>
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	ba 4c fd 01 c0       	mov    edx,0xc001fd4c
c000842c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008430:	89 10                	mov    DWORD PTR [eax],edx
c0008432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000843a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000843d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008441:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008453:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008457:	83 ec 0c             	sub    esp,0xc
c000845a:	50                   	push   eax
c000845b:	e8 4e f6 ff ff       	call   c0007aae <malloc>
c0008460:	83 c4 10             	add    esp,0x10
c0008463:	89 c2                	mov    edx,eax
c0008465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008469:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000846c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008470:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008474:	90                   	nop
c0008475:	83 c4 0c             	add    esp,0xc
c0008478:	c3                   	ret    
c0008479:	90                   	nop

c000847a <VgaText::isAtty()>:
c000847a:	b0 01                	mov    al,0x1
c000847c:	c3                   	ret    
c000847d:	90                   	nop

c000847e <VgaText::~VgaText()>:
c000847e:	83 ec 0c             	sub    esp,0xc
c0008481:	ba 94 fd 01 c0       	mov    edx,0xc001fd94
c0008486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848a:	89 10                	mov    DWORD PTR [eax],edx
c000848c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008490:	83 ec 0c             	sub    esp,0xc
c0008493:	50                   	push   eax
c0008494:	e8 1b 0f 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008499:	83 c4 10             	add    esp,0x10
c000849c:	90                   	nop
c000849d:	83 c4 0c             	add    esp,0xc
c00084a0:	c3                   	ret    
c00084a1:	90                   	nop

c00084a2 <VgaText::~VgaText()>:
c00084a2:	83 ec 0c             	sub    esp,0xc
c00084a5:	83 ec 0c             	sub    esp,0xc
c00084a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ac:	e8 cd ff ff ff       	call   c000847e <VgaText::~VgaText()>
c00084b1:	83 c4 10             	add    esp,0x10
c00084b4:	83 ec 08             	sub    esp,0x8
c00084b7:	68 84 01 00 00       	push   0x184
c00084bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c0:	e8 d0 23 00 00       	call   c000a895 <operator delete(void*, unsigned long)>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	83 c4 0c             	add    esp,0xc
c00084cb:	c3                   	ret    

c00084cc <VgaText::read(unsigned long long, void*, int*)>:
c00084cc:	83 ec 10             	sub    esp,0x10
c00084cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084db:	e8 f0 47 00 00       	call   c000ccd0 <readKeyboard(VgaText*, char*, unsigned long)>
c00084e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e4:	89 02                	mov    DWORD PTR [edx],eax
c00084e6:	31 c0                	xor    eax,eax
c00084e8:	83 c4 1c             	add    esp,0x1c
c00084eb:	c3                   	ret    

c00084ec <setTerminalScrollLock(bool)>:
c00084ec:	c3                   	ret    

c00084ed <doTerminalCycle()>:
c00084ed:	c3                   	ret    

c00084ee <addToTerminalCycle(VgaText*)>:
c00084ee:	c3                   	ret    

c00084ef <scrollTerminalScrollLock(int)>:
c00084ef:	c3                   	ret    

c00084f0 <VgaText::updateTitle()>:
c00084f0:	c3                   	ret    
c00084f1:	90                   	nop

c00084f2 <VgaText::load()>:
c00084f2:	c3                   	ret    
c00084f3:	90                   	nop

c00084f4 <VgaText::updateCursor()>:
c00084f4:	83 ec 14             	sub    esp,0x14
c00084f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084fb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084fe:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008501:	e8 e6 f8 00 00       	call   c0017dec <HalConsoleCursorUpdate(int, int)>
c0008506:	83 c4 1c             	add    esp,0x1c
c0008509:	c3                   	ret    

c000850a <VgaText::doANSI_SGR(int)>:
c000850a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000850e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008512:	85 d2                	test   edx,edx
c0008514:	75 0b                	jne    c0008521 <VgaText::doANSI_SGR(int)+0x17>
c0008516:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008519:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000851c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000851f:	eb 59                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008521:	83 fa 07             	cmp    edx,0x7
c0008524:	75 0b                	jne    c0008531 <VgaText::doANSI_SGR(int)+0x27>
c0008526:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008529:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000852c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000852f:	eb 49                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008531:	83 fa 1b             	cmp    edx,0x1b
c0008534:	74 e0                	je     c0008516 <VgaText::doANSI_SGR(int)+0xc>
c0008536:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008539:	83 f9 07             	cmp    ecx,0x7
c000853c:	77 09                	ja     c0008547 <VgaText::doANSI_SGR(int)+0x3d>
c000853e:	8b 14 8d 20 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde0e0]
c0008545:	eb 20                	jmp    c0008567 <VgaText::doANSI_SGR(int)+0x5d>
c0008547:	8d 4a d8             	lea    ecx,[edx-0x28]
c000854a:	83 f9 07             	cmp    ecx,0x7
c000854d:	77 09                	ja     c0008558 <VgaText::doANSI_SGR(int)+0x4e>
c000854f:	8b 14 8d 20 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde0e0]
c0008556:	eb 22                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008558:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000855b:	83 f9 07             	cmp    ecx,0x7
c000855e:	77 0b                	ja     c000856b <VgaText::doANSI_SGR(int)+0x61>
c0008560:	8b 14 95 d8 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde228]
c0008567:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000856a:	c3                   	ret    
c000856b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000856e:	83 f9 07             	cmp    ecx,0x7
c0008571:	77 0a                	ja     c000857d <VgaText::doANSI_SGR(int)+0x73>
c0008573:	8b 14 95 b0 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde250]
c000857a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000857d:	c3                   	ret    

c000857e <VgaText::setDefaultBgColour(VgaColour)>:
c000857e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008582:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008586:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008589:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000858c:	c3                   	ret    
c000858d:	90                   	nop

c000858e <VgaText::setDefaultFgColour(VgaColour)>:
c000858e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008596:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008599:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000859c:	c3                   	ret    
c000859d:	90                   	nop

c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000859e:	53                   	push   ebx
c000859f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085ab:	51                   	push   ecx
c00085ac:	e8 cd ff ff ff       	call   c000857e <VgaText::setDefaultBgColour(VgaColour)>
c00085b1:	58                   	pop    eax
c00085b2:	5a                   	pop    edx
c00085b3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085bb:	5b                   	pop    ebx
c00085bc:	eb d0                	jmp    c000858e <VgaText::setDefaultFgColour(VgaColour)>

c00085be <VgaText::setTitleTextColour(VgaColour)>:
c00085be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085c9:	c3                   	ret    

c00085ca <VgaText::setTitleColour(VgaColour)>:
c00085ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085d5:	c3                   	ret    

c00085d6 <VgaText::setTitle(char*)>:
c00085d6:	c3                   	ret    
c00085d7:	90                   	nop

c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085e1:	83 e0 0f             	and    eax,0xf
c00085e4:	c1 e2 04             	shl    edx,0x4
c00085e7:	09 d0                	or     eax,edx
c00085e9:	c3                   	ret    

c00085ea <VgaText::scrollScreen()>:
c00085ea:	55                   	push   ebp
c00085eb:	57                   	push   edi
c00085ec:	56                   	push   esi
c00085ed:	be 01 00 00 00       	mov    esi,0x1
c00085f2:	53                   	push   ebx
c00085f3:	83 ec 0c             	sub    esp,0xc
c00085f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00085fa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00085fd:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008603:	31 ff                	xor    edi,edi
c0008605:	01 e9                	add    ecx,ebp
c0008607:	8a 01                	mov    al,BYTE PTR [ecx]
c0008609:	83 fe 18             	cmp    esi,0x18
c000860c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008612:	75 20                	jne    c0008634 <VgaText::scrollScreen()+0x4a>
c0008614:	f7 c7 01 00 00 00    	test   edi,0x1
c000861a:	74 15                	je     c0008631 <VgaText::scrollScreen()+0x47>
c000861c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008620:	50                   	push   eax
c0008621:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008625:	50                   	push   eax
c0008626:	e8 ad ff ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c000862b:	5a                   	pop    edx
c000862c:	5a                   	pop    edx
c000862d:	88 01                	mov    BYTE PTR [ecx],al
c000862f:	eb 03                	jmp    c0008634 <VgaText::scrollScreen()+0x4a>
c0008631:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008634:	47                   	inc    edi
c0008635:	41                   	inc    ecx
c0008636:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000863c:	75 c9                	jne    c0008607 <VgaText::scrollScreen()+0x1d>
c000863e:	46                   	inc    esi
c000863f:	83 fe 19             	cmp    esi,0x19
c0008642:	75 b9                	jne    c00085fd <VgaText::scrollScreen()+0x13>
c0008644:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c000864a:	75 1f                	jne    c000866b <VgaText::scrollScreen()+0x81>
c000864c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008650:	74 05                	je     c0008657 <VgaText::scrollScreen()+0x6d>
c0008652:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008655:	eb 14                	jmp    c000866b <VgaText::scrollScreen()+0x81>
c0008657:	50                   	push   eax
c0008658:	50                   	push   eax
c0008659:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000865d:	50                   	push   eax
c000865e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008662:	50                   	push   eax
c0008663:	e8 18 f6 00 00       	call   c0017c80 <HalConsoleScroll(int, int)>
c0008668:	83 c4 10             	add    esp,0x10
c000866b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000866f:	83 c4 0c             	add    esp,0xc
c0008672:	5b                   	pop    ebx
c0008673:	5e                   	pop    esi
c0008674:	5f                   	pop    edi
c0008675:	5d                   	pop    ebp
c0008676:	e9 79 fe ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c000867b:	90                   	nop

c000867c <VgaText::combineCharAndColour(char, unsigned char)>:
c000867c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008681:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008686:	c1 e0 08             	shl    eax,0x8
c0008689:	09 d0                	or     eax,edx
c000868b:	c3                   	ret    

c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000868c:	55                   	push   ebp
c000868d:	57                   	push   edi
c000868e:	56                   	push   esi
c000868f:	53                   	push   ebx
c0008690:	83 ec 1c             	sub    esp,0x1c
c0008693:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008697:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000869b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000869f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086a3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086a7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086ab:	0f b6 c3             	movzx  eax,bl
c00086ae:	50                   	push   eax
c00086af:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086b4:	50                   	push   eax
c00086b5:	e8 1e ff ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c00086ba:	5a                   	pop    edx
c00086bb:	0f b6 c0             	movzx  eax,al
c00086be:	59                   	pop    ecx
c00086bf:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086c4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086c8:	50                   	push   eax
c00086c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086cd:	e8 aa ff ff ff       	call   c000867c <VgaText::combineCharAndColour(char, unsigned char)>
c00086d2:	5a                   	pop    edx
c00086d3:	6b d7 50             	imul   edx,edi,0x50
c00086d6:	59                   	pop    ecx
c00086d7:	01 f2                	add    edx,esi
c00086d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086dc:	0f b7 d2             	movzx  edx,dx
c00086df:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086e3:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086e9:	75 28                	jne    c0008713 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086f3:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086f7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00086fb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008703:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008707:	83 c4 1c             	add    esp,0x1c
c000870a:	5b                   	pop    ebx
c000870b:	5e                   	pop    esi
c000870c:	5f                   	pop    edi
c000870d:	5d                   	pop    ebp
c000870e:	e9 75 f6 00 00       	jmp    c0017d88 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008713:	83 c4 1c             	add    esp,0x1c
c0008716:	5b                   	pop    ebx
c0008717:	5e                   	pop    esi
c0008718:	5f                   	pop    edi
c0008719:	5d                   	pop    ebp
c000871a:	c3                   	ret    
c000871b:	90                   	nop

c000871c <VgaText::getCursorX()>:
c000871c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008720:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008723:	c3                   	ret    

c0008724 <VgaText::getCursorY()>:
c0008724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008728:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000872b:	c3                   	ret    

c000872c <VgaText::setCursor(int, int)>:
c000872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008730:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008734:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008737:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000873b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000873e:	e9 b1 fd ff ff       	jmp    c00084f4 <VgaText::updateCursor()>

c0008743 <setActiveTerminal(VgaText*)>:
c0008743:	53                   	push   ebx
c0008744:	83 ec 08             	sub    esp,0x8
c0008747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000874b:	85 db                	test   ebx,ebx
c000874d:	75 11                	jne    c0008760 <setActiveTerminal(VgaText*)+0x1d>
c000874f:	c7 44 24 10 60 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd60
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	e9 8f 81 00 00       	jmp    c00108ef <KePanic(char const*)>
c0008760:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008765:	85 c0                	test   eax,eax
c0008767:	74 0c                	je     c0008775 <setActiveTerminal(VgaText*)+0x32>
c0008769:	83 ec 0c             	sub    esp,0xc
c000876c:	50                   	push   eax
c000876d:	e8 82 fd ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008772:	83 c4 10             	add    esp,0x10
c0008775:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c000877b:	50                   	push   eax
c000877c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000877f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008782:	53                   	push   ebx
c0008783:	e8 a4 ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008788:	83 c4 18             	add    esp,0x18
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <VgaText::clearScreen()>:
c000878e:	57                   	push   edi
c000878f:	56                   	push   esi
c0008790:	31 f6                	xor    esi,esi
c0008792:	53                   	push   ebx
c0008793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008797:	52                   	push   edx
c0008798:	6a 00                	push   0x0
c000879a:	6a 00                	push   0x0
c000879c:	53                   	push   ebx
c000879d:	e8 8a ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c00087a2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087a9:	83 c4 10             	add    esp,0x10
c00087ac:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087af:	7e 20                	jle    c00087d1 <VgaText::clearScreen()+0x43>
c00087b1:	31 ff                	xor    edi,edi
c00087b3:	50                   	push   eax
c00087b4:	50                   	push   eax
c00087b5:	56                   	push   esi
c00087b6:	57                   	push   edi
c00087b7:	47                   	inc    edi
c00087b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087be:	6a 20                	push   0x20
c00087c0:	53                   	push   ebx
c00087c1:	e8 c6 fe ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087c6:	83 c4 20             	add    esp,0x20
c00087c9:	83 ff 50             	cmp    edi,0x50
c00087cc:	75 e5                	jne    c00087b3 <VgaText::clearScreen()+0x25>
c00087ce:	46                   	inc    esi
c00087cf:	eb db                	jmp    c00087ac <VgaText::clearScreen()+0x1e>
c00087d1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087d8:	5b                   	pop    ebx
c00087d9:	5e                   	pop    esi
c00087da:	5f                   	pop    edi
c00087db:	c3                   	ret    

c00087dc <VgaText::setCursorX(int)>:
c00087dc:	83 ec 10             	sub    esp,0x10
c00087df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087e3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087ea:	50                   	push   eax
c00087eb:	e8 3c ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c00087f0:	83 c4 1c             	add    esp,0x1c
c00087f3:	c3                   	ret    

c00087f4 <VgaText::setCursorY(int)>:
c00087f4:	83 ec 10             	sub    esp,0x10
c00087f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087ff:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008802:	50                   	push   eax
c0008803:	e8 24 ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008808:	83 c4 1c             	add    esp,0x1c
c000880b:	c3                   	ret    

c000880c <VgaText::incrementCursor(bool)>:
c000880c:	56                   	push   esi
c000880d:	53                   	push   ebx
c000880e:	51                   	push   ecx
c000880f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008813:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008817:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000881a:	40                   	inc    eax
c000881b:	83 f8 50             	cmp    eax,0x50
c000881e:	74 05                	je     c0008825 <VgaText::incrementCursor(bool)+0x19>
c0008820:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008823:	eb 24                	jmp    c0008849 <VgaText::incrementCursor(bool)+0x3d>
c0008825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008828:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000882f:	8d 50 01             	lea    edx,[eax+0x1]
c0008832:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008835:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008838:	75 0f                	jne    c0008849 <VgaText::incrementCursor(bool)+0x3d>
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008840:	53                   	push   ebx
c0008841:	e8 a4 fd ff ff       	call   c00085ea <VgaText::scrollScreen()>
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	89 f0                	mov    eax,esi
c000884b:	84 c0                	test   al,al
c000884d:	74 0c                	je     c000885b <VgaText::incrementCursor(bool)+0x4f>
c000884f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008853:	5a                   	pop    edx
c0008854:	5b                   	pop    ebx
c0008855:	5e                   	pop    esi
c0008856:	e9 99 fc ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c000885b:	58                   	pop    eax
c000885c:	5b                   	pop    ebx
c000885d:	5e                   	pop    esi
c000885e:	c3                   	ret    
c000885f:	90                   	nop

c0008860 <VgaText::decrementCursor(bool)>:
c0008860:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008864:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008868:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000886b:	85 c0                	test   eax,eax
c000886d:	74 04                	je     c0008873 <VgaText::decrementCursor(bool)+0x13>
c000886f:	48                   	dec    eax
c0008870:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008873:	84 c9                	test   cl,cl
c0008875:	74 09                	je     c0008880 <VgaText::decrementCursor(bool)+0x20>
c0008877:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000887b:	e9 74 fc ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c0008880:	c3                   	ret    
c0008881:	90                   	nop

c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008882:	53                   	push   ebx
c0008883:	83 ec 08             	sub    esp,0x8
c0008886:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c000888b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000888f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008893:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008897:	83 f8 07             	cmp    eax,0x7
c000889a:	75 21                	jne    c00088bd <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c000889c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088a4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ac:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088b4:	83 c4 08             	add    esp,0x8
c00088b7:	5b                   	pop    ebx
c00088b8:	e9 5e 2f 00 00       	jmp    c000b81b <Krnl::beep(int, int, bool)>
c00088bd:	83 f8 0d             	cmp    eax,0xd
c00088c0:	75 09                	jne    c00088cb <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c9:	eb 2d                	jmp    c00088f8 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088cb:	83 f8 0a             	cmp    eax,0xa
c00088ce:	75 31                	jne    c0008901 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088d0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088d3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088da:	8d 50 01             	lea    edx,[eax+0x1]
c00088dd:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088e0:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088e3:	75 0f                	jne    c00088f4 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088e5:	83 ec 0c             	sub    esp,0xc
c00088e8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088eb:	53                   	push   ebx
c00088ec:	e8 f9 fc ff ff       	call   c00085ea <VgaText::scrollScreen()>
c00088f1:	83 c4 10             	add    esp,0x10
c00088f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088f8:	83 c4 08             	add    esp,0x8
c00088fb:	5b                   	pop    ebx
c00088fc:	e9 f3 fb ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c0008901:	83 f8 08             	cmp    eax,0x8
c0008904:	75 25                	jne    c000892b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008906:	50                   	push   eax
c0008907:	50                   	push   eax
c0008908:	6a 01                	push   0x1
c000890a:	53                   	push   ebx
c000890b:	e8 50 ff ff ff       	call   c0008860 <VgaText::decrementCursor(bool)>
c0008910:	5a                   	pop    edx
c0008911:	59                   	pop    ecx
c0008912:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008915:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008918:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000891b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000891e:	6a 20                	push   0x20
c0008920:	53                   	push   ebx
c0008921:	e8 66 fd ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008926:	83 c4 28             	add    esp,0x28
c0008929:	5b                   	pop    ebx
c000892a:	c3                   	ret    
c000892b:	83 ec 08             	sub    esp,0x8
c000892e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008931:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008934:	51                   	push   ecx
c0008935:	52                   	push   edx
c0008936:	50                   	push   eax
c0008937:	53                   	push   ebx
c0008938:	e8 4f fd ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008941:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008949:	83 c4 28             	add    esp,0x28
c000894c:	5b                   	pop    ebx
c000894d:	e9 ba fe ff ff       	jmp    c000880c <VgaText::incrementCursor(bool)>

c0008952 <VgaText::putchar(char)>:
c0008952:	57                   	push   edi
c0008953:	56                   	push   esi
c0008954:	53                   	push   ebx
c0008955:	83 ec 10             	sub    esp,0x10
c0008958:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000895c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008960:	89 f8                	mov    eax,edi
c0008962:	0f be c0             	movsx  eax,al
c0008965:	83 f8 5b             	cmp    eax,0x5b
c0008968:	75 18                	jne    c0008982 <VgaText::putchar(char)+0x30>
c000896a:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000896e:	74 20                	je     c0008990 <VgaText::putchar(char)+0x3e>
c0008970:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008976:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000897d:	e9 c1 00 00 00       	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008982:	83 f8 1b             	cmp    eax,0x1b
c0008985:	75 09                	jne    c0008990 <VgaText::putchar(char)+0x3e>
c0008987:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000898b:	e9 b3 00 00 00       	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008990:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008993:	84 c9                	test   cl,cl
c0008995:	0f 84 98 00 00 00    	je     c0008a33 <VgaText::putchar(char)+0xe1>
c000899b:	8d 77 c0             	lea    esi,[edi-0x40]
c000899e:	89 f2                	mov    edx,esi
c00089a0:	80 fa 3e             	cmp    dl,0x3e
c00089a3:	77 78                	ja     c0008a1d <VgaText::putchar(char)+0xcb>
c00089a5:	83 f8 6d             	cmp    eax,0x6d
c00089a8:	75 47                	jne    c00089f1 <VgaText::putchar(char)+0x9f>
c00089aa:	31 f6                	xor    esi,esi
c00089ac:	31 d2                	xor    edx,edx
c00089ae:	31 c0                	xor    eax,eax
c00089b0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089b3:	7e 2d                	jle    c00089e2 <VgaText::putchar(char)+0x90>
c00089b5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089ba:	83 fa 3b             	cmp    edx,0x3b
c00089bd:	75 17                	jne    c00089d6 <VgaText::putchar(char)+0x84>
c00089bf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089c3:	50                   	push   eax
c00089c4:	53                   	push   ebx
c00089c5:	e8 40 fb ff ff       	call   c000850a <VgaText::doANSI_SGR(int)>
c00089ca:	59                   	pop    ecx
c00089cb:	31 d2                	xor    edx,edx
c00089cd:	5f                   	pop    edi
c00089ce:	31 c0                	xor    eax,eax
c00089d0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089d4:	eb 09                	jmp    c00089df <VgaText::putchar(char)+0x8d>
c00089d6:	6b c0 0a             	imul   eax,eax,0xa
c00089d9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089dd:	88 ca                	mov    dl,cl
c00089df:	46                   	inc    esi
c00089e0:	eb ce                	jmp    c00089b0 <VgaText::putchar(char)+0x5e>
c00089e2:	84 d2                	test   dl,dl
c00089e4:	74 2f                	je     c0008a15 <VgaText::putchar(char)+0xc3>
c00089e6:	50                   	push   eax
c00089e7:	53                   	push   ebx
c00089e8:	e8 1d fb ff ff       	call   c000850a <VgaText::doANSI_SGR(int)>
c00089ed:	58                   	pop    eax
c00089ee:	5a                   	pop    edx
c00089ef:	eb 24                	jmp    c0008a15 <VgaText::putchar(char)+0xc3>
c00089f1:	83 f8 4a             	cmp    eax,0x4a
c00089f4:	75 1f                	jne    c0008a15 <VgaText::putchar(char)+0xc3>
c00089f6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00089fa:	75 19                	jne    c0008a15 <VgaText::putchar(char)+0xc3>
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 89 fd ff ff       	call   c000878e <VgaText::clearScreen()>
c0008a05:	83 c4 0c             	add    esp,0xc
c0008a08:	6a 00                	push   0x0
c0008a0a:	6a 00                	push   0x0
c0008a0c:	53                   	push   ebx
c0008a0d:	e8 1a fd ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008a12:	83 c4 10             	add    esp,0x10
c0008a15:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a1b:	eb 26                	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008a1d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a20:	83 f8 0e             	cmp    eax,0xe
c0008a23:	7f 1e                	jg     c0008a43 <VgaText::putchar(char)+0xf1>
c0008a25:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a28:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a2b:	89 f9                	mov    ecx,edi
c0008a2d:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a31:	eb 10                	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008a33:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a36:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a39:	50                   	push   eax
c0008a3a:	53                   	push   ebx
c0008a3b:	e8 42 fe ff ff       	call   c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	5b                   	pop    ebx
c0008a47:	5e                   	pop    esi
c0008a48:	5f                   	pop    edi
c0008a49:	c3                   	ret    

c0008a4a <VgaText::putx(unsigned int)>:
c0008a4a:	57                   	push   edi
c0008a4b:	b9 11 00 00 00       	mov    ecx,0x11
c0008a50:	56                   	push   esi
c0008a51:	be 6e fd 01 c0       	mov    esi,0xc001fd6e
c0008a56:	53                   	push   ebx
c0008a57:	83 ec 20             	sub    esp,0x20
c0008a5a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a5e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a62:	fc                   	cld    
c0008a63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a65:	be 08 00 00 00       	mov    esi,0x8
c0008a6a:	50                   	push   eax
c0008a6b:	50                   	push   eax
c0008a6c:	89 d8                	mov    eax,ebx
c0008a6e:	c1 e3 04             	shl    ebx,0x4
c0008a71:	c1 e8 1c             	shr    eax,0x1c
c0008a74:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a79:	50                   	push   eax
c0008a7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a7e:	e8 cf fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008a83:	83 c4 10             	add    esp,0x10
c0008a86:	4e                   	dec    esi
c0008a87:	75 e1                	jne    c0008a6a <VgaText::putx(unsigned int)+0x20>
c0008a89:	83 c4 20             	add    esp,0x20
c0008a8c:	5b                   	pop    ebx
c0008a8d:	5e                   	pop    esi
c0008a8e:	5f                   	pop    edi
c0008a8f:	c3                   	ret    

c0008a90 <VgaText::puts(char const*)>:
c0008a90:	53                   	push   ebx
c0008a91:	83 ec 08             	sub    esp,0x8
c0008a94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a98:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a9b:	85 c0                	test   eax,eax
c0008a9d:	74 12                	je     c0008ab1 <VgaText::puts(char const*)+0x21>
c0008a9f:	43                   	inc    ebx
c0008aa0:	51                   	push   ecx
c0008aa1:	51                   	push   ecx
c0008aa2:	50                   	push   eax
c0008aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa7:	e8 a6 fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	eb e7                	jmp    c0008a98 <VgaText::puts(char const*)+0x8>
c0008ab1:	83 c4 08             	add    esp,0x8
c0008ab4:	5b                   	pop    ebx
c0008ab5:	c3                   	ret    

c0008ab6 <VgaText::write(unsigned long long, void*, int*)>:
c0008ab6:	55                   	push   ebp
c0008ab7:	57                   	push   edi
c0008ab8:	56                   	push   esi
c0008ab9:	53                   	push   ebx
c0008aba:	83 ec 0c             	sub    esp,0xc
c0008abd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ac5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ac9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad3:	39 eb                	cmp    ebx,ebp
c0008ad5:	74 13                	je     c0008aea <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ad7:	43                   	inc    ebx
c0008ad8:	50                   	push   eax
c0008ad9:	50                   	push   eax
c0008ada:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ade:	50                   	push   eax
c0008adf:	56                   	push   esi
c0008ae0:	e8 6d fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008ae5:	83 c4 10             	add    esp,0x10
c0008ae8:	eb e9                	jmp    c0008ad3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008aea:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008af5:	89 38                	mov    DWORD PTR [eax],edi
c0008af7:	83 c4 0c             	add    esp,0xc
c0008afa:	31 c0                	xor    eax,eax
c0008afc:	5b                   	pop    ebx
c0008afd:	5e                   	pop    esi
c0008afe:	5f                   	pop    edi
c0008aff:	5d                   	pop    ebp
c0008b00:	c3                   	ret    
c0008b01:	90                   	nop

c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b02:	55                   	push   ebp
c0008b03:	57                   	push   edi
c0008b04:	56                   	push   esi
c0008b05:	53                   	push   ebx
c0008b06:	83 ec 0c             	sub    esp,0xc
c0008b09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b12:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b19:	50                   	push   eax
c0008b1a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b1f:	50                   	push   eax
c0008b20:	e8 b3 fa ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b25:	5a                   	pop    edx
c0008b26:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b2a:	59                   	pop    ecx
c0008b2b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b2e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b32:	0f b7 f6             	movzx  esi,si
c0008b35:	0f b6 e8             	movzx  ebp,al
c0008b38:	01 f6                	add    esi,esi
c0008b3a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b3d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b40:	85 c0                	test   eax,eax
c0008b42:	0f 84 ef 00 00 00    	je     c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b48:	83 f8 0d             	cmp    eax,0xd
c0008b4b:	75 0c                	jne    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b4d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b54:	e9 d8 00 00 00       	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b59:	83 f8 0a             	cmp    eax,0xa
c0008b5c:	75 44                	jne    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b61:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b68:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b6b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b6e:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b71:	75 0f                	jne    c0008b82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b79:	53                   	push   ebx
c0008b7a:	e8 6b fa ff ff       	call   c00085ea <VgaText::scrollScreen()>
c0008b7f:	83 c4 10             	add    esp,0x10
c0008b82:	83 ec 0c             	sub    esp,0xc
c0008b85:	53                   	push   ebx
c0008b86:	e8 69 f9 ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008b8b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b8f:	83 c4 10             	add    esp,0x10
c0008b92:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b95:	0f b7 f6             	movzx  esi,si
c0008b98:	01 f6                	add    esi,esi
c0008b9a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b9d:	e9 8f 00 00 00       	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba2:	83 f8 08             	cmp    eax,0x8
c0008ba5:	75 34                	jne    c0008bdb <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008ba7:	51                   	push   ecx
c0008ba8:	51                   	push   ecx
c0008ba9:	6a 01                	push   0x1
c0008bab:	53                   	push   ebx
c0008bac:	e8 af fc ff ff       	call   c0008860 <VgaText::decrementCursor(bool)>
c0008bb1:	5e                   	pop    esi
c0008bb2:	58                   	pop    eax
c0008bb3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bb6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bb9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bbc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bbf:	6a 20                	push   0x20
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 c5 fa ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bc7:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bcb:	83 c4 20             	add    esp,0x20
c0008bce:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bd1:	0f b7 f6             	movzx  esi,si
c0008bd4:	01 f6                	add    esi,esi
c0008bd6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bd9:	eb 56                	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bdb:	52                   	push   edx
c0008bdc:	52                   	push   edx
c0008bdd:	55                   	push   ebp
c0008bde:	50                   	push   eax
c0008bdf:	e8 98 fa ff ff       	call   c000867c <VgaText::combineCharAndColour(char, unsigned char)>
c0008be4:	83 c4 10             	add    esp,0x10
c0008be7:	66 89 06             	mov    WORD PTR [esi],ax
c0008bea:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008bf0:	75 1d                	jne    c0008c0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf2:	83 ec 0c             	sub    esp,0xc
c0008bf5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bf8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bfb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c03:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c06:	50                   	push   eax
c0008c07:	e8 7c f1 00 00       	call   c0017d88 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c0c:	83 c4 20             	add    esp,0x20
c0008c0f:	83 c6 02             	add    esi,0x2
c0008c12:	50                   	push   eax
c0008c13:	50                   	push   eax
c0008c14:	6a 00                	push   0x0
c0008c16:	53                   	push   ebx
c0008c17:	e8 f0 fb ff ff       	call   c000880c <VgaText::incrementCursor(bool)>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c23:	75 0c                	jne    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c25:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c29:	0f b7 f6             	movzx  esi,si
c0008c2c:	01 f6                	add    esi,esi
c0008c2e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c31:	47                   	inc    edi
c0008c32:	e9 06 ff ff ff       	jmp    c0008b3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c37:	83 ec 0c             	sub    esp,0xc
c0008c3a:	53                   	push   ebx
c0008c3b:	e8 b4 f8 ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008c40:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c47:	83 c4 1c             	add    esp,0x1c
c0008c4a:	5b                   	pop    ebx
c0008c4b:	5e                   	pop    esi
c0008c4c:	5f                   	pop    edi
c0008c4d:	5d                   	pop    ebp
c0008c4e:	c3                   	ret    
c0008c4f:	90                   	nop

c0008c50 <VgaText::VgaText(char const*)>:
c0008c50:	56                   	push   esi
c0008c51:	53                   	push   ebx
c0008c52:	83 ec 04             	sub    esp,0x4
c0008c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c59:	83 ec 08             	sub    esp,0x8
c0008c5c:	6a 00                	push   0x0
c0008c5e:	50                   	push   eax
c0008c5f:	e8 6a 05 00 00       	call   c00091ce <UnixFile::UnixFile(int)>
c0008c64:	83 c4 10             	add    esp,0x10
c0008c67:	ba 94 fd 01 c0       	mov    edx,0xc001fd94
c0008c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c70:	89 10                	mov    DWORD PTR [eax],edx
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c81:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c94:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ccf:	83 ec 0c             	sub    esp,0xc
c0008cd2:	6a 01                	push   0x1
c0008cd4:	e8 44 09 00 00       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0008cd9:	83 c4 10             	add    esp,0x10
c0008cdc:	89 c2                	mov    edx,eax
c0008cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ce5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf2:	89 c6                	mov    esi,eax
c0008cf4:	e8 ba f0 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0008cf9:	68 05 0c 00 00       	push   0xc05
c0008cfe:	56                   	push   esi
c0008cff:	50                   	push   eax
c0008d00:	53                   	push   ebx
c0008d01:	e8 fe 0f 00 00       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d06:	83 c4 10             	add    esp,0x10
c0008d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d10:	83 ec 04             	sub    esp,0x4
c0008d13:	68 a0 0f 00 00       	push   0xfa0
c0008d18:	6a 00                	push   0x0
c0008d1a:	50                   	push   eax
c0008d1b:	e8 d0 77 ff ff       	call   c00004f0 <memset>
c0008d20:	83 c4 10             	add    esp,0x10
c0008d23:	83 ec 04             	sub    esp,0x4
c0008d26:	6a 00                	push   0x0
c0008d28:	6a 07                	push   0x7
c0008d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d2e:	e8 6b f8 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d33:	83 c4 10             	add    esp,0x10
c0008d36:	83 ec 04             	sub    esp,0x4
c0008d39:	6a 00                	push   0x0
c0008d3b:	6a 00                	push   0x0
c0008d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d41:	e8 e6 f9 ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	83 ec 0c             	sub    esp,0xc
c0008d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d50:	e8 39 fa ff ff       	call   c000878e <VgaText::clearScreen()>
c0008d55:	83 c4 10             	add    esp,0x10
c0008d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d5c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d64:	05 82 00 00 00       	add    eax,0x82
c0008d69:	83 ec 04             	sub    esp,0x4
c0008d6c:	68 80 00 00 00       	push   0x80
c0008d71:	6a 00                	push   0x0
c0008d73:	50                   	push   eax
c0008d74:	e8 77 77 ff ff       	call   c00004f0 <memset>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 02 01 00 00       	add    eax,0x102
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	90                   	nop
c0008d99:	83 c4 04             	add    esp,0x4
c0008d9c:	5b                   	pop    ebx
c0008d9d:	5e                   	pop    esi
c0008d9e:	c3                   	ret    
c0008d9f:	90                   	nop

c0008da0 <VgaText::receiveKey(unsigned char)>:
c0008da0:	55                   	push   ebp
c0008da1:	57                   	push   edi
c0008da2:	56                   	push   esi
c0008da3:	53                   	push   ebx
c0008da4:	83 ec 2c             	sub    esp,0x2c
c0008da7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008daf:	89 ef                	mov    edi,ebp
c0008db1:	81 e7 ff 00 00 00    	and    edi,0xff
c0008db7:	0f 84 66 01 00 00    	je     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008dbd:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc3:	83 ff 08             	cmp    edi,0x8
c0008dc6:	75 73                	jne    c0008e3b <VgaText::receiveKey(unsigned char)+0x9b>
c0008dc8:	83 ec 0c             	sub    esp,0xc
c0008dcb:	56                   	push   esi
c0008dcc:	e8 9f 77 ff ff       	call   c0000570 <strlen>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	85 c0                	test   eax,eax
c0008dd6:	0f 84 02 01 00 00    	je     c0008ede <VgaText::receiveKey(unsigned char)+0x13e>
c0008ddc:	50                   	push   eax
c0008ddd:	50                   	push   eax
c0008dde:	6a 08                	push   0x8
c0008de0:	53                   	push   ebx
c0008de1:	e8 6c fb ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008de6:	89 34 24             	mov    DWORD PTR [esp],esi
c0008de9:	e8 82 77 ff ff       	call   c0000570 <strlen>
c0008dee:	83 c4 10             	add    esp,0x10
c0008df1:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008df9:	83 fa 0d             	cmp    edx,0xd
c0008dfc:	89 d0                	mov    eax,edx
c0008dfe:	0f 95 c1             	setne  cl
c0008e01:	83 fa 1f             	cmp    edx,0x1f
c0008e04:	0f 9e c2             	setle  dl
c0008e07:	0f b6 d2             	movzx  edx,dl
c0008e0a:	85 ca                	test   edx,ecx
c0008e0c:	74 17                	je     c0008e25 <VgaText::receiveKey(unsigned char)+0x85>
c0008e0e:	83 e8 08             	sub    eax,0x8
c0008e11:	3c 02                	cmp    al,0x2
c0008e13:	76 10                	jbe    c0008e25 <VgaText::receiveKey(unsigned char)+0x85>
c0008e15:	55                   	push   ebp
c0008e16:	55                   	push   ebp
c0008e17:	68 7f fd 01 c0       	push   0xc001fd7f
c0008e1c:	53                   	push   ebx
c0008e1d:	e8 6e fc ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0008e22:	83 c4 10             	add    esp,0x10
c0008e25:	83 ec 0c             	sub    esp,0xc
c0008e28:	56                   	push   esi
c0008e29:	e8 42 77 ff ff       	call   c0000570 <strlen>
c0008e2e:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e36:	e9 a0 00 00 00       	jmp    c0008edb <VgaText::receiveKey(unsigned char)+0x13b>
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e44:	50                   	push   eax
c0008e45:	e8 26 77 ff ff       	call   c0000570 <strlen>
c0008e4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e51:	e8 1a 77 ff ff       	call   c0000570 <strlen>
c0008e56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e5a:	83 c4 10             	add    esp,0x10
c0008e5d:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e61:	3d 80 00 00 00       	cmp    eax,0x80
c0008e66:	0f 87 b7 00 00 00    	ja     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008e6c:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e6f:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e72:	3c 1e                	cmp    al,0x1e
c0008e74:	0f 96 c0             	setbe  al
c0008e77:	80 fa 01             	cmp    dl,0x1
c0008e7a:	0f 97 c2             	seta   dl
c0008e7d:	0f b6 d2             	movzx  edx,dl
c0008e80:	85 c2                	test   edx,eax
c0008e82:	74 2e                	je     c0008eb2 <VgaText::receiveKey(unsigned char)+0x112>
c0008e84:	83 ff 0d             	cmp    edi,0xd
c0008e87:	74 29                	je     c0008eb2 <VgaText::receiveKey(unsigned char)+0x112>
c0008e89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e8c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e8f:	68 85 fd 01 c0       	push   0xc001fd85
c0008e94:	53                   	push   ebx
c0008e95:	e8 68 fc ff ff       	call   c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e9a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e9d:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ea0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea3:	0f b6 c0             	movzx  eax,al
c0008ea6:	50                   	push   eax
c0008ea7:	53                   	push   ebx
c0008ea8:	e8 d5 f9 ff ff       	call   c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ead:	83 c4 20             	add    esp,0x20
c0008eb0:	eb 11                	jmp    c0008ec3 <VgaText::receiveKey(unsigned char)+0x123>
c0008eb2:	89 e8                	mov    eax,ebp
c0008eb4:	51                   	push   ecx
c0008eb5:	0f be c0             	movsx  eax,al
c0008eb8:	51                   	push   ecx
c0008eb9:	50                   	push   eax
c0008eba:	53                   	push   ebx
c0008ebb:	e8 92 fa ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008ec0:	83 c4 10             	add    esp,0x10
c0008ec3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ece:	52                   	push   edx
c0008ecf:	52                   	push   edx
c0008ed0:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ed4:	50                   	push   eax
c0008ed5:	56                   	push   esi
c0008ed6:	e8 65 79 ff ff       	call   c0000840 <strcat>
c0008edb:	83 c4 10             	add    esp,0x10
c0008ede:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008ee4:	b0 01                	mov    al,0x1
c0008ee6:	83 ff 1c             	cmp    edi,0x1c
c0008ee9:	77 0e                	ja     c0008ef9 <VgaText::receiveKey(unsigned char)+0x159>
c0008eeb:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ef0:	89 f9                	mov    ecx,edi
c0008ef2:	d3 e8                	shr    eax,cl
c0008ef4:	f7 d0                	not    eax
c0008ef6:	83 e0 01             	and    eax,0x1
c0008ef9:	84 c0                	test   al,al
c0008efb:	74 04                	je     c0008f01 <VgaText::receiveKey(unsigned char)+0x161>
c0008efd:	84 d2                	test   dl,dl
c0008eff:	74 22                	je     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008f01:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f07:	50                   	push   eax
c0008f08:	50                   	push   eax
c0008f09:	56                   	push   esi
c0008f0a:	53                   	push   ebx
c0008f0b:	e8 30 79 ff ff       	call   c0000840 <strcat>
c0008f10:	83 c4 0c             	add    esp,0xc
c0008f13:	68 80 00 00 00       	push   0x80
c0008f18:	6a 00                	push   0x0
c0008f1a:	56                   	push   esi
c0008f1b:	e8 d0 75 ff ff       	call   c00004f0 <memset>
c0008f20:	83 c4 10             	add    esp,0x10
c0008f23:	83 c4 2c             	add    esp,0x2c
c0008f26:	5b                   	pop    ebx
c0008f27:	5e                   	pop    esi
c0008f28:	5f                   	pop    edi
c0008f29:	5d                   	pop    ebp
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <VgaText::doUpdate()>:
c0008f2c:	c3                   	ret    

c0008f2d <newTerminal(char*)>:
c0008f2d:	83 ec 28             	sub    esp,0x28
c0008f30:	68 84 01 00 00       	push   0x184
c0008f35:	e8 74 eb ff ff       	call   c0007aae <malloc>
c0008f3a:	5a                   	pop    edx
c0008f3b:	59                   	pop    ecx
c0008f3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f40:	50                   	push   eax
c0008f41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f45:	e8 06 fd ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0008f4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f4e:	83 c4 2c             	add    esp,0x2c
c0008f51:	c3                   	ret    
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::TSS()>:
c0008f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f5f:	90                   	nop
c0008f60:	c3                   	ret    
c0008f61:	90                   	nop
c0008f62:	66 90                	xchg   ax,ax

c0008f64 <TSS::setESP(unsigned long)>:
c0008f64:	55                   	push   ebp
c0008f65:	89 e5                	mov    ebp,esp
c0008f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f70:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f73:	90                   	nop
c0008f74:	5d                   	pop    ebp
c0008f75:	c3                   	ret    
c0008f76:	66 90                	xchg   ax,ax

c0008f78 <TSS::flush()>:
c0008f78:	55                   	push   ebp
c0008f79:	89 e5                	mov    ebp,esp
c0008f7b:	83 ec 10             	sub    esp,0x10
c0008f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f81:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f83:	83 c8 03             	or     eax,0x3
c0008f86:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f8a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f8e:	66 89 d0             	mov    ax,dx
c0008f91:	0f 00 d8             	ltr    ax
c0008f94:	90                   	nop
c0008f95:	c9                   	leave  
c0008f96:	c3                   	ret    
c0008f97:	90                   	nop

c0008f98 <TSS::setup(unsigned long, unsigned long)>:
c0008f98:	55                   	push   ebp
c0008f99:	89 e5                	mov    ebp,esp
c0008f9b:	83 ec 18             	sub    esp,0x18
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	6a 68                	push   0x68
c0008fa3:	e8 06 eb ff ff       	call   c0007aae <malloc>
c0008fa8:	83 c4 10             	add    esp,0x10
c0008fab:	89 c2                	mov    edx,eax
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb9:	83 ec 04             	sub    esp,0x4
c0008fbc:	6a 68                	push   0x68
c0008fbe:	6a 00                	push   0x0
c0008fc0:	50                   	push   eax
c0008fc1:	e8 2a 75 ff ff       	call   c00004f0 <memset>
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000903e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009047:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000904a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000904d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009053:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000905a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009060:	0f 20 da             	mov    edx,cr3
c0009063:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009066:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009069:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000906c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000906f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	50                   	push   eax
c0009076:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009079:	50                   	push   eax
c000907a:	e8 9b e2 ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000907f:	83 c4 10             	add    esp,0x10
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	6a 68                	push   0x68
c0009087:	8d 45 ec             	lea    eax,[ebp-0x14]
c000908a:	50                   	push   eax
c000908b:	e8 a6 e2 ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009097:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000909a:	83 e0 0f             	and    eax,0xf
c000909d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090a3:	83 c8 40             	or     eax,0x40
c00090a6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b4:	05 78 01 00 00       	add    eax,0x178
c00090b9:	83 ec 04             	sub    esp,0x4
c00090bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090bf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090c2:	50                   	push   eax
c00090c3:	e8 a2 e2 ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	89 c2                	mov    edx,eax
c00090cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d0:	89 10                	mov    DWORD PTR [eax],edx
c00090d2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090dd:	05 78 01 00 00       	add    eax,0x178
c00090e2:	83 ec 0c             	sub    esp,0xc
c00090e5:	50                   	push   eax
c00090e6:	e8 a9 e2 ff ff       	call   c0007394 <GDT::flush()>
c00090eb:	83 c4 10             	add    esp,0x10
c00090ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090f3:	c9                   	leave  
c00090f4:	c3                   	ret    
c00090f5:	90                   	nop

c00090f6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009101:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009106:	75 08                	jne    c0009110 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009108:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000910e:	eb 38                	jmp    c0009148 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009110:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009115:	75 17                	jne    c000912e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000911c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000911f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009125:	8b 10                	mov    edx,DWORD PTR [eax]
c0009127:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000912b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000912e:	89 c1                	mov    ecx,eax
c0009130:	83 e1 fd             	and    ecx,0xfffffffd
c0009133:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009139:	74 cd                	je     c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000913b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009140:	83 e0 ef             	and    eax,0xffffffef
c0009143:	83 f8 08             	cmp    eax,0x8
c0009146:	76 c0                	jbe    c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009148:	31 c0                	xor    eax,eax
c000914a:	c3                   	ret    
c000914b:	90                   	nop

c000914c <ReservedFilename::isAtty()>:
c000914c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009150:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009153:	31 c0                	xor    eax,eax
c0009155:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000915b:	74 09                	je     c0009166 <ReservedFilename::isAtty()+0x1a>
c000915d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009163:	0f 94 c0             	sete   al
c0009166:	c3                   	ret    
c0009167:	90                   	nop

c0009168 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000916c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009173:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009177:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000917c:	75 08                	jne    c0009186 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000917e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009184:	eb 3d                	jmp    c00091c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009186:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000918b:	75 17                	jne    c00091a4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000918d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009192:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009195:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000919b:	8b 10                	mov    edx,DWORD PTR [eax]
c000919d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091a1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091a9:	75 04                	jne    c00091af <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091ab:	89 0a                	mov    DWORD PTR [edx],ecx
c00091ad:	eb 14                	jmp    c00091c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091af:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091b4:	74 c8                	je     c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091bb:	83 e0 ef             	and    eax,0xffffffef
c00091be:	83 f8 08             	cmp    eax,0x8
c00091c1:	76 bb                	jbe    c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091c3:	31 c0                	xor    eax,eax
c00091c5:	c3                   	ret    

c00091c6 <UnixFile::getFileDescriptor()>:
c00091c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091cd:	c3                   	ret    

c00091ce <UnixFile::UnixFile(int)>:
c00091ce:	53                   	push   ebx
c00091cf:	83 ec 28             	sub    esp,0x28
c00091d2:	ba 5c fe 01 c0       	mov    edx,0xc001fe5c
c00091d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091db:	89 10                	mov    DWORD PTR [eax],edx
c00091dd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091e5:	0f 8f 90 01 00 00    	jg     c000937b <UnixFile::UnixFile(int)+0x1ad>
c00091eb:	a1 60 1f 02 c0       	mov    eax,ds:0xc0021f60
c00091f0:	8d 50 01             	lea    edx,[eax+0x1]
c00091f3:	89 15 60 1f 02 c0    	mov    DWORD PTR ds:0xc0021f60,edx
c00091f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009200:	83 ec 08             	sub    esp,0x8
c0009203:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009207:	68 98 4f 02 c0       	push   0xc0024f98
c000920c:	e8 17 57 01 00       	call   c001e928 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009219:	83 f0 01             	xor    eax,0x1
c000921c:	0f b6 c0             	movzx  eax,al
c000921f:	85 c0                	test   eax,eax
c0009221:	0f 84 55 01 00 00    	je     c000937c <UnixFile::UnixFile(int)+0x1ae>
c0009227:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c000922e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009236:	83 ec 0c             	sub    esp,0xc
c0009239:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000923d:	e8 6c e8 ff ff       	call   c0007aae <malloc>
c0009242:	83 c4 10             	add    esp,0x10
c0009245:	89 c3                	mov    ebx,eax
c0009247:	83 ec 08             	sub    esp,0x8
c000924a:	68 03 ff ff 0f       	push   0xfffff03
c000924f:	53                   	push   ebx
c0009250:	e8 2d 01 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009255:	83 c4 10             	add    esp,0x10
c0009258:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c000925e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000926d:	e8 3c e8 ff ff       	call   c0007aae <malloc>
c0009272:	83 c4 10             	add    esp,0x10
c0009275:	89 c3                	mov    ebx,eax
c0009277:	83 ec 08             	sub    esp,0x8
c000927a:	68 01 ff ff 0f       	push   0xfffff01
c000927f:	53                   	push   ebx
c0009280:	e8 fd 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000928e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009296:	83 ec 0c             	sub    esp,0xc
c0009299:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000929d:	e8 0c e8 ff ff       	call   c0007aae <malloc>
c00092a2:	83 c4 10             	add    esp,0x10
c00092a5:	89 c3                	mov    ebx,eax
c00092a7:	83 ec 08             	sub    esp,0x8
c00092aa:	68 00 ff ff 0f       	push   0xfffff00
c00092af:	53                   	push   ebx
c00092b0:	e8 cd 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092be:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092c6:	83 ec 0c             	sub    esp,0xc
c00092c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092cd:	e8 dc e7 ff ff       	call   c0007aae <malloc>
c00092d2:	83 c4 10             	add    esp,0x10
c00092d5:	89 c3                	mov    ebx,eax
c00092d7:	83 ec 08             	sub    esp,0x8
c00092da:	68 02 ff ff 0f       	push   0xfffff02
c00092df:	53                   	push   ebx
c00092e0:	e8 9d 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092e5:	83 c4 10             	add    esp,0x10
c00092e8:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092ee:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092f6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092fb:	7f 7f                	jg     c000937c <UnixFile::UnixFile(int)+0x1ae>
c00092fd:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009305:	83 ec 0c             	sub    esp,0xc
c0009308:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000930c:	e8 9d e7 ff ff       	call   c0007aae <malloc>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	89 c3                	mov    ebx,eax
c0009316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000931a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000931f:	83 ec 08             	sub    esp,0x8
c0009322:	50                   	push   eax
c0009323:	53                   	push   ebx
c0009324:	e8 59 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009329:	83 c4 10             	add    esp,0x10
c000932c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009330:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009337:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000933f:	83 ec 0c             	sub    esp,0xc
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 63 e7 ff ff       	call   c0007aae <malloc>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	89 c3                	mov    ebx,eax
c0009350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009354:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009359:	83 ec 08             	sub    esp,0x8
c000935c:	50                   	push   eax
c000935d:	53                   	push   ebx
c000935e:	e8 1f 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009363:	83 c4 10             	add    esp,0x10
c0009366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000936a:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009371:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009376:	e9 7b ff ff ff       	jmp    c00092f6 <UnixFile::UnixFile(int)+0x128>
c000937b:	90                   	nop
c000937c:	83 c4 28             	add    esp,0x28
c000937f:	5b                   	pop    ebx
c0009380:	c3                   	ret    
c0009381:	90                   	nop

c0009382 <ReservedFilename::ReservedFilename(int)>:
c0009382:	83 ec 0c             	sub    esp,0xc
c0009385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009389:	83 ec 08             	sub    esp,0x8
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	50                   	push   eax
c0009391:	e8 38 fe ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c0009396:	83 c4 10             	add    esp,0x10
c0009399:	ba 78 fe 01 c0       	mov    edx,0xc001fe78
c000939e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a2:	89 10                	mov    DWORD PTR [eax],edx
c00093a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093af:	90                   	nop
c00093b0:	83 c4 0c             	add    esp,0xc
c00093b3:	c3                   	ret    

c00093b4 <UnixFile::~UnixFile()>:
c00093b4:	83 ec 1c             	sub    esp,0x1c
c00093b7:	ba 5c fe 01 c0       	mov    edx,0xc001fe5c
c00093bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c0:	89 10                	mov    DWORD PTR [eax],edx
c00093c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093ce:	7f 76                	jg     c0009446 <UnixFile::~UnixFile()+0x92>
c00093d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093d8:	83 ec 0c             	sub    esp,0xc
c00093db:	68 98 4f 02 c0       	push   0xc0024f98
c00093e0:	e8 17 56 01 00       	call   c001e9fc <LinkedList<UnixFile>::getFirstElement()>
c00093e5:	83 c4 10             	add    esp,0x10
c00093e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	68 98 4f 02 c0       	push   0xc0024f98
c00093f4:	e8 0b 56 01 00       	call   c001ea04 <LinkedList<UnixFile>::removeFirst()>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009400:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009404:	74 43                	je     c0009449 <UnixFile::~UnixFile()+0x95>
c0009406:	83 ec 08             	sub    esp,0x8
c0009409:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000940d:	68 98 4f 02 c0       	push   0xc0024f98
c0009412:	e8 11 55 01 00       	call   c001e928 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009417:	83 c4 10             	add    esp,0x10
c000941a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000941e:	8d 50 01             	lea    edx,[eax+0x1]
c0009421:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009425:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000942a:	0f 94 c0             	sete   al
c000942d:	0f b6 c0             	movzx  eax,al
c0009430:	85 c0                	test   eax,eax
c0009432:	74 a4                	je     c00093d8 <UnixFile::~UnixFile()+0x24>
c0009434:	83 ec 0c             	sub    esp,0xc
c0009437:	68 34 fe 01 c0       	push   0xc001fe34
c000943c:	e8 ae 74 00 00       	call   c00108ef <KePanic(char const*)>
c0009441:	83 c4 10             	add    esp,0x10
c0009444:	eb 92                	jmp    c00093d8 <UnixFile::~UnixFile()+0x24>
c0009446:	90                   	nop
c0009447:	eb 01                	jmp    c000944a <UnixFile::~UnixFile()+0x96>
c0009449:	90                   	nop
c000944a:	90                   	nop
c000944b:	83 c4 1c             	add    esp,0x1c
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <UnixFile::~UnixFile()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	83 ec 0c             	sub    esp,0xc
c0009456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945a:	e8 55 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	83 ec 08             	sub    esp,0x8
c0009465:	6a 0c                	push   0xc
c0009467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000946b:	e8 25 14 00 00       	call   c000a895 <operator delete(void*, unsigned long)>
c0009470:	83 c4 10             	add    esp,0x10
c0009473:	83 c4 0c             	add    esp,0xc
c0009476:	c3                   	ret    
c0009477:	90                   	nop

c0009478 <ReservedFilename::~ReservedFilename()>:
c0009478:	83 ec 0c             	sub    esp,0xc
c000947b:	ba 78 fe 01 c0       	mov    edx,0xc001fe78
c0009480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009484:	89 10                	mov    DWORD PTR [eax],edx
c0009486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	50                   	push   eax
c000948e:	e8 21 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	90                   	nop
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    
c000949b:	90                   	nop

c000949c <ReservedFilename::~ReservedFilename()>:
c000949c:	83 ec 0c             	sub    esp,0xc
c000949f:	83 ec 0c             	sub    esp,0xc
c00094a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a6:	e8 cd ff ff ff       	call   c0009478 <ReservedFilename::~ReservedFilename()>
c00094ab:	83 c4 10             	add    esp,0x10
c00094ae:	83 ec 08             	sub    esp,0x8
c00094b1:	6a 0c                	push   0xc
c00094b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094b7:	e8 d9 13 00 00       	call   c000a895 <operator delete(void*, unsigned long)>
c00094bc:	83 c4 10             	add    esp,0x10
c00094bf:	83 c4 0c             	add    esp,0xc
c00094c2:	c3                   	ret    

c00094c3 <getFromFileDescriptor(int)>:
c00094c3:	53                   	push   ebx
c00094c4:	83 ec 08             	sub    esp,0x8
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094d1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094d7:	7f 2c                	jg     c0009505 <getFromFileDescriptor(int)+0x42>
c00094d9:	83 ec 0c             	sub    esp,0xc
c00094dc:	68 98 4f 02 c0       	push   0xc0024f98
c00094e1:	e8 16 55 01 00       	call   c001e9fc <LinkedList<UnixFile>::getFirstElement()>
c00094e6:	83 c4 10             	add    esp,0x10
c00094e9:	85 c0                	test   eax,eax
c00094eb:	75 04                	jne    c00094f1 <getFromFileDescriptor(int)+0x2e>
c00094ed:	31 c0                	xor    eax,eax
c00094ef:	eb 6e                	jmp    c000955f <getFromFileDescriptor(int)+0x9c>
c00094f1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094f4:	74 69                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c00094f6:	52                   	push   edx
c00094f7:	52                   	push   edx
c00094f8:	50                   	push   eax
c00094f9:	68 98 4f 02 c0       	push   0xc0024f98
c00094fe:	e8 a3 55 01 00       	call   c001eaa6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009503:	eb e1                	jmp    c00094e6 <getFromFileDescriptor(int)+0x23>
c0009505:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c000950a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009510:	74 4d                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c0009512:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009517:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000951d:	74 40                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c000951f:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009524:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000952a:	74 33                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c000952c:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009531:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009537:	74 26                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c0009539:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000953f:	83 f8 08             	cmp    eax,0x8
c0009542:	77 09                	ja     c000954d <getFromFileDescriptor(int)+0x8a>
c0009544:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000954b:	eb 12                	jmp    c000955f <getFromFileDescriptor(int)+0x9c>
c000954d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009553:	83 fb 08             	cmp    ebx,0x8
c0009556:	77 95                	ja     c00094ed <getFromFileDescriptor(int)+0x2a>
c0009558:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000955f:	83 c4 08             	add    esp,0x8
c0009562:	5b                   	pop    ebx
c0009563:	c3                   	ret    

c0009564 <__static_initialization_and_destruction_0(int, int)>:
c0009564:	83 ec 0c             	sub    esp,0xc
c0009567:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000956c:	75 34                	jne    c00095a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000956e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009576:	75 2a                	jne    c00095a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009578:	83 ec 0c             	sub    esp,0xc
c000957b:	68 98 4f 02 c0       	push   0xc0024f98
c0009580:	e8 61 53 01 00       	call   c001e8e6 <LinkedList<UnixFile>::LinkedList()>
c0009585:	83 c4 10             	add    esp,0x10
c0009588:	83 ec 04             	sub    esp,0x4
c000958b:	68 e4 1e 02 c0       	push   0xc0021ee4
c0009590:	68 98 4f 02 c0       	push   0xc0024f98
c0009595:	68 e4 e8 01 c0       	push   0xc001e8e4
c000959a:	e8 a6 12 00 00       	call   c000a845 <__cxa_atexit>
c000959f:	83 c4 10             	add    esp,0x10
c00095a2:	90                   	nop
c00095a3:	83 c4 0c             	add    esp,0xc
c00095a6:	c3                   	ret    

c00095a7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095a7:	83 ec 0c             	sub    esp,0xc
c00095aa:	83 ec 08             	sub    esp,0x8
c00095ad:	68 ff ff 00 00       	push   0xffff
c00095b2:	6a 01                	push   0x1
c00095b4:	e8 ab ff ff ff       	call   c0009564 <__static_initialization_and_destruction_0(int, int)>
c00095b9:	83 c4 10             	add    esp,0x10
c00095bc:	83 c4 0c             	add    esp,0xc
c00095bf:	c3                   	ret    

c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095c0:	53                   	push   ebx
c00095c1:	8b 15 68 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f68
c00095c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095cf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095d5:	89 d8                	mov    eax,ebx
c00095d7:	d1 e8                	shr    eax,1
c00095d9:	01 d0                	add    eax,edx
c00095db:	80 e3 01             	and    bl,0x1
c00095de:	8a 10                	mov    dl,BYTE PTR [eax]
c00095e0:	75 09                	jne    c00095eb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095e2:	83 e2 f0             	and    edx,0xfffffff0
c00095e5:	09 ca                	or     edx,ecx
c00095e7:	88 10                	mov    BYTE PTR [eax],dl
c00095e9:	5b                   	pop    ebx
c00095ea:	c3                   	ret    
c00095eb:	83 e2 0f             	and    edx,0xf
c00095ee:	0f b6 c9             	movzx  ecx,cl
c00095f1:	c1 e1 04             	shl    ecx,0x4
c00095f4:	09 ca                	or     edx,ecx
c00095f6:	88 10                	mov    BYTE PTR [eax],dl
c00095f8:	5b                   	pop    ebx
c00095f9:	c3                   	ret    

c00095fa <Virt::getPageState(unsigned long)>:
c00095fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fe:	8b 0d 68 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f68
c0009604:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000960a:	89 d0                	mov    eax,edx
c000960c:	d1 e8                	shr    eax,1
c000960e:	80 e2 01             	and    dl,0x1
c0009611:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009614:	74 03                	je     c0009619 <Virt::getPageState(unsigned long)+0x1f>
c0009616:	c1 e8 04             	shr    eax,0x4
c0009619:	83 e0 0f             	and    eax,0xf
c000961c:	c3                   	ret    

c000961d <Virt::allocateKernelVirtualPages(int)>:
c000961d:	55                   	push   ebp
c000961e:	31 ed                	xor    ebp,ebp
c0009620:	57                   	push   edi
c0009621:	31 ff                	xor    edi,edi
c0009623:	56                   	push   esi
c0009624:	53                   	push   ebx
c0009625:	31 db                	xor    ebx,ebx
c0009627:	83 ec 0c             	sub    esp,0xc
c000962a:	8b 35 64 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021f64
c0009630:	56                   	push   esi
c0009631:	e8 c4 ff ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009636:	5a                   	pop    edx
c0009637:	84 c0                	test   al,al
c0009639:	75 41                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000963b:	85 db                	test   ebx,ebx
c000963d:	75 02                	jne    c0009641 <Virt::allocateKernelVirtualPages(int)+0x24>
c000963f:	89 f5                	mov    ebp,esi
c0009641:	83 c3 01             	add    ebx,0x1
c0009644:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009648:	74 5f                	je     c00096a9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000964a:	83 c6 01             	add    esi,0x1
c000964d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009653:	76 34                	jbe    c0009689 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009655:	c7 05 64 1f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021f64,0xc8000
c000965f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009665:	75 2a                	jne    c0009691 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009667:	be 00 80 0c 00       	mov    esi,0xc8000
c000966c:	bf 01 00 00 00       	mov    edi,0x1
c0009671:	56                   	push   esi
c0009672:	e8 83 ff ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009677:	5a                   	pop    edx
c0009678:	84 c0                	test   al,al
c000967a:	74 bf                	je     c000963b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000967c:	31 db                	xor    ebx,ebx
c000967e:	83 c6 01             	add    esi,0x1
c0009681:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009687:	77 cc                	ja     c0009655 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009689:	89 35 64 1f 02 c0    	mov    DWORD PTR ds:0xc0021f64,esi
c000968f:	eb 9f                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009691:	83 ec 0c             	sub    esp,0xc
c0009694:	68 8c fe 01 c0       	push   0xc001fe8c
c0009699:	e8 51 72 00 00       	call   c00108ef <KePanic(char const*)>
c000969e:	8b 35 64 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021f64
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	eb 87                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096a9:	89 2d 64 1f 02 c0    	mov    DWORD PTR ds:0xc0021f64,ebp
c00096af:	83 fb 01             	cmp    ebx,0x1
c00096b2:	74 6f                	je     c0009723 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b8:	85 c9                	test   ecx,ecx
c00096ba:	74 49                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096c0:	89 e8                	mov    eax,ebp
c00096c2:	31 db                	xor    ebx,ebx
c00096c4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096c7:	eb 18                	jmp    c00096e1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096c9:	6a 01                	push   0x1
c00096cb:	83 c3 01             	add    ebx,0x1
c00096ce:	50                   	push   eax
c00096cf:	e8 ec fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d4:	58                   	pop    eax
c00096d5:	5a                   	pop    edx
c00096d6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096da:	74 29                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096dc:	a1 64 1f 02 c0       	mov    eax,ds:0xc0021f64
c00096e1:	8d 50 01             	lea    edx,[eax+0x1]
c00096e4:	85 db                	test   ebx,ebx
c00096e6:	89 15 64 1f 02 c0    	mov    DWORD PTR ds:0xc0021f64,edx
c00096ec:	74 24                	je     c0009712 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096ee:	39 df                	cmp    edi,ebx
c00096f0:	75 d7                	jne    c00096c9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096f2:	6a 03                	push   0x3
c00096f4:	83 c3 01             	add    ebx,0x1
c00096f7:	50                   	push   eax
c00096f8:	e8 c3 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fd:	59                   	pop    ecx
c00096fe:	5e                   	pop    esi
c00096ff:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009703:	75 d7                	jne    c00096dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009705:	83 c4 0c             	add    esp,0xc
c0009708:	89 e8                	mov    eax,ebp
c000970a:	5b                   	pop    ebx
c000970b:	c1 e0 0c             	shl    eax,0xc
c000970e:	5e                   	pop    esi
c000970f:	5f                   	pop    edi
c0009710:	5d                   	pop    ebp
c0009711:	c3                   	ret    
c0009712:	6a 02                	push   0x2
c0009714:	bb 01 00 00 00       	mov    ebx,0x1
c0009719:	50                   	push   eax
c000971a:	e8 a1 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971f:	58                   	pop    eax
c0009720:	5a                   	pop    edx
c0009721:	eb b9                	jmp    c00096dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009723:	6a 04                	push   0x4
c0009725:	8d 45 01             	lea    eax,[ebp+0x1]
c0009728:	55                   	push   ebp
c0009729:	a3 64 1f 02 c0       	mov    ds:0xc0021f64,eax
c000972e:	e8 8d fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009733:	5b                   	pop    ebx
c0009734:	89 e8                	mov    eax,ebp
c0009736:	5e                   	pop    esi
c0009737:	c1 e0 0c             	shl    eax,0xc
c000973a:	83 c4 0c             	add    esp,0xc
c000973d:	5b                   	pop    ebx
c000973e:	5e                   	pop    esi
c000973f:	5f                   	pop    edi
c0009740:	5d                   	pop    ebp
c0009741:	c3                   	ret    

c0009742 <Virt::freeSwapfilePage(unsigned long)>:
c0009742:	53                   	push   ebx
c0009743:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009749:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000974d:	b8 01 00 00 00       	mov    eax,0x1
c0009752:	89 cb                	mov    ebx,ecx
c0009754:	d3 e0                	shl    eax,cl
c0009756:	c1 eb 05             	shr    ebx,0x5
c0009759:	f7 d0                	not    eax
c000975b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000975e:	21 c1                	and    ecx,eax
c0009760:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009763:	5b                   	pop    ebx
c0009764:	c3                   	ret    

c0009765 <Virt::swapIDToSector(unsigned long)>:
c0009765:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009769:	8b 15 6c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f6c
c000976f:	8b 0d 74 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f74
c0009775:	0f af c2             	imul   eax,edx
c0009778:	01 c8                	add    eax,ecx
c000977a:	c3                   	ret    

c000977b <Virt::allocateSwapfilePage()>:
c000977b:	55                   	push   ebp
c000977c:	31 d2                	xor    edx,edx
c000977e:	57                   	push   edi
c000977f:	56                   	push   esi
c0009780:	53                   	push   ebx
c0009781:	83 ec 0c             	sub    esp,0xc
c0009784:	8b 0d 6c 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f6c
c000978a:	a1 70 1f 02 c0       	mov    eax,ds:0xc0021f70
c000978f:	f7 f1                	div    ecx
c0009791:	39 0d 70 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f70,ecx
c0009797:	72 2f                	jb     c00097c8 <Virt::allocateSwapfilePage()+0x4d>
c0009799:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000979f:	8b 16                	mov    edx,DWORD PTR [esi]
c00097a1:	f6 c2 01             	test   dl,0x1
c00097a4:	74 3e                	je     c00097e4 <Virt::allocateSwapfilePage()+0x69>
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	bf 01 00 00 00       	mov    edi,0x1
c00097ad:	eb 12                	jmp    c00097c1 <Virt::allocateSwapfilePage()+0x46>
c00097af:	89 fd                	mov    ebp,edi
c00097b1:	89 ca                	mov    edx,ecx
c00097b3:	d3 e5                	shl    ebp,cl
c00097b5:	c1 ea 05             	shr    edx,0x5
c00097b8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097bd:	85 ea                	test   edx,ebp
c00097bf:	74 2c                	je     c00097ed <Virt::allocateSwapfilePage()+0x72>
c00097c1:	83 c1 01             	add    ecx,0x1
c00097c4:	39 c8                	cmp    eax,ecx
c00097c6:	77 e7                	ja     c00097af <Virt::allocateSwapfilePage()+0x34>
c00097c8:	83 ec 0c             	sub    esp,0xc
c00097cb:	68 f3 ff 01 c0       	push   0xc001fff3
c00097d0:	e8 1a 71 00 00       	call   c00108ef <KePanic(char const*)>
c00097d5:	83 c4 10             	add    esp,0x10
c00097d8:	31 c9                	xor    ecx,ecx
c00097da:	83 c4 0c             	add    esp,0xc
c00097dd:	89 c8                	mov    eax,ecx
c00097df:	5b                   	pop    ebx
c00097e0:	5e                   	pop    esi
c00097e1:	5f                   	pop    edi
c00097e2:	5d                   	pop    ebp
c00097e3:	c3                   	ret    
c00097e4:	89 f3                	mov    ebx,esi
c00097e6:	bd 01 00 00 00       	mov    ebp,0x1
c00097eb:	31 c9                	xor    ecx,ecx
c00097ed:	09 ea                	or     edx,ebp
c00097ef:	89 c8                	mov    eax,ecx
c00097f1:	89 13                	mov    DWORD PTR [ebx],edx
c00097f3:	83 c4 0c             	add    esp,0xc
c00097f6:	5b                   	pop    ebx
c00097f7:	5e                   	pop    esi
c00097f8:	5f                   	pop    edi
c00097f9:	5d                   	pop    ebp
c00097fa:	c3                   	ret    

c00097fb <Virt::virtualMemorySetup()>:
c00097fb:	53                   	push   ebx
c00097fc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009801:	6a 0f                	push   0xf
c0009803:	53                   	push   ebx
c0009804:	83 c3 01             	add    ebx,0x1
c0009807:	e8 b4 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980c:	58                   	pop    eax
c000980d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009813:	5a                   	pop    edx
c0009814:	75 eb                	jne    c0009801 <Virt::virtualMemorySetup()+0x6>
c0009816:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000981b:	6a 00                	push   0x0
c000981d:	53                   	push   ebx
c000981e:	83 c3 01             	add    ebx,0x1
c0009821:	e8 9a fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009826:	59                   	pop    ecx
c0009827:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000982d:	58                   	pop    eax
c000982e:	75 eb                	jne    c000981b <Virt::virtualMemorySetup()+0x20>
c0009830:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009835:	6a 0f                	push   0xf
c0009837:	53                   	push   ebx
c0009838:	83 c3 01             	add    ebx,0x1
c000983b:	e8 80 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009840:	58                   	pop    eax
c0009841:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009847:	5a                   	pop    edx
c0009848:	75 eb                	jne    c0009835 <Virt::virtualMemorySetup()+0x3a>
c000984a:	5b                   	pop    ebx
c000984b:	c3                   	ret    

c000984c <Virt::setupPageSwapping(int)>:
c000984c:	53                   	push   ebx
c000984d:	83 ec 0c             	sub    esp,0xc
c0009850:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009854:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009859:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000985f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009861:	53                   	push   ebx
c0009862:	c1 e3 0b             	shl    ebx,0xb
c0009865:	68 0a 00 02 c0       	push   0xc002000a
c000986a:	50                   	push   eax
c000986b:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000986e:	89 1d 70 1f 02 c0    	mov    DWORD PTR ds:0xc0021f70,ebx
c0009874:	c6 05 78 1f 02 c0 43 	mov    BYTE PTR ds:0xc0021f78,0x43
c000987b:	c1 eb 08             	shr    ebx,0x8
c000987e:	a3 74 1f 02 c0       	mov    ds:0xc0021f74,eax
c0009883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009886:	c7 05 6c 1f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021f6c,0x8
c0009890:	e8 19 e2 ff ff       	call   c0007aae <malloc>
c0009895:	83 c4 0c             	add    esp,0xc
c0009898:	89 c1                	mov    ecx,eax
c000989a:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000989f:	31 d2                	xor    edx,edx
c00098a1:	a1 70 1f 02 c0       	mov    eax,ds:0xc0021f70
c00098a6:	f7 35 6c 1f 02 c0    	div    DWORD PTR ds:0xc0021f6c
c00098ac:	c1 e8 05             	shr    eax,0x5
c00098af:	50                   	push   eax
c00098b0:	6a 00                	push   0x0
c00098b2:	51                   	push   ecx
c00098b3:	e8 38 6c ff ff       	call   c00004f0 <memset>
c00098b8:	83 c4 18             	add    esp,0x18
c00098bb:	5b                   	pop    ebx
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <VAS::VAS(VAS*)>:
c00098be:	83 ec 0c             	sub    esp,0xc
c00098c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	68 ac fe 01 c0       	push   0xc001feac
c00098df:	e8 0b 70 00 00       	call   c00108ef <KePanic(char const*)>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	90                   	nop
c00098e8:	83 c4 0c             	add    esp,0xc
c00098eb:	c3                   	ret    

c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098f5:	89 c2                	mov    edx,eax
c00098f7:	c1 e8 0a             	shr    eax,0xa
c00098fa:	c1 ea 16             	shr    edx,0x16
c00098fd:	83 f9 01             	cmp    ecx,0x1
c0009900:	19 c9                	sbb    ecx,ecx
c0009902:	c1 e2 0c             	shl    edx,0xc
c0009905:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000990b:	25 fc 0f 00 00       	and    eax,0xffc
c0009910:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009917:	01 d0                	add    eax,edx
c0009919:	c3                   	ret    

c000991a <VAS::getPageTableEntry(unsigned long)>:
c000991a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000991e:	89 ca                	mov    edx,ecx
c0009920:	c1 e9 0a             	shr    ecx,0xa
c0009923:	c1 ea 16             	shr    edx,0x16
c0009926:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000992c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009932:	c1 e0 0c             	shl    eax,0xc
c0009935:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009938:	c3                   	ret    

c0009939 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009939:	55                   	push   ebp
c000993a:	57                   	push   edi
c000993b:	bf 01 00 00 00       	mov    edi,0x1
c0009940:	56                   	push   esi
c0009941:	53                   	push   ebx
c0009942:	83 ec 0c             	sub    esp,0xc
c0009945:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009949:	c1 ee 0c             	shr    esi,0xc
c000994c:	eb 3a                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000994e:	83 ec 08             	sub    esp,0x8
c0009951:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009956:	55                   	push   ebp
c0009957:	50                   	push   eax
c0009958:	e8 bd ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000995d:	83 c4 10             	add    esp,0x10
c0009960:	8b 00                	mov    eax,DWORD PTR [eax]
c0009962:	f6 c4 04             	test   ah,0x4
c0009965:	75 5a                	jne    c00099c1 <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009967:	83 fb 04             	cmp    ebx,0x4
c000996a:	74 6b                	je     c00099d7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000996c:	83 fb 02             	cmp    ebx,0x2
c000996f:	74 7f                	je     c00099f0 <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 a3 00 00 00    	je     c0009a1d <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 87 00 00 00    	je     c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 6a fc ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 b3                	jne    c000994e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 21 00 02 c0       	push   0xc0020021
c00099a3:	e8 47 6f 00 00       	call   c00108ef <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 63 ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00099bc:	f6 c4 04             	test   ah,0x4
c00099bf:	74 c2                	je     c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099c1:	83 ec 0c             	sub    esp,0xc
c00099c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099c9:	50                   	push   eax
c00099ca:	e8 7b e3 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c00099cf:	83 c4 10             	add    esp,0x10
c00099d2:	83 fb 04             	cmp    ebx,0x4
c00099d5:	75 95                	jne    c000996c <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099d7:	83 e7 01             	and    edi,0x1
c00099da:	75 46                	jne    c0009a22 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099dc:	c7 44 24 20 d0 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fed0
c00099e4:	83 c4 0c             	add    esp,0xc
c00099e7:	5b                   	pop    ebx
c00099e8:	5e                   	pop    esi
c00099e9:	5f                   	pop    edi
c00099ea:	5d                   	pop    ebp
c00099eb:	e9 ff 6e 00 00       	jmp    c00108ef <KePanic(char const*)>
c00099f0:	83 e7 01             	and    edi,0x1
c00099f3:	75 15                	jne    c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099f5:	83 ec 0c             	sub    esp,0xc
c00099f8:	68 3d 00 02 c0       	push   0xc002003d
c00099fd:	e8 ed 6e 00 00       	call   c00108ef <KePanic(char const*)>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	e9 79 ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a0a:	83 ec 08             	sub    esp,0x8
c0009a0d:	6a 00                	push   0x0
c0009a0f:	56                   	push   esi
c0009a10:	e8 ab fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	e9 66 ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a1d:	83 e7 01             	and    edi,0x1
c0009a20:	75 16                	jne    c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a22:	83 ec 08             	sub    esp,0x8
c0009a25:	6a 00                	push   0x0
c0009a27:	56                   	push   esi
c0009a28:	e8 93 fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a2d:	83 c4 10             	add    esp,0x10
c0009a30:	83 c4 0c             	add    esp,0xc
c0009a33:	5b                   	pop    ebx
c0009a34:	5e                   	pop    esi
c0009a35:	5f                   	pop    edi
c0009a36:	5d                   	pop    ebp
c0009a37:	c3                   	ret    
c0009a38:	c7 44 24 20 59 00 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020059
c0009a40:	83 c4 0c             	add    esp,0xc
c0009a43:	5b                   	pop    ebx
c0009a44:	5e                   	pop    esi
c0009a45:	5f                   	pop    edi
c0009a46:	5d                   	pop    ebp
c0009a47:	e9 a3 6e 00 00       	jmp    c00108ef <KePanic(char const*)>

c0009a4c <VAS::freeAllocatedPages(unsigned long)>:
c0009a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a54:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a58:	74 09                	je     c0009a63 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a5e:	e9 d6 fe ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a63:	c7 44 24 04 f4 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fef4
c0009a6b:	e9 52 0f 00 00       	jmp    c000a9c2 <Dbg::kprintf(char const*, ...)>

c0009a70 <VAS::virtualToPhysical(unsigned long)>:
c0009a70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a74:	50                   	push   eax
c0009a75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a79:	52                   	push   edx
c0009a7a:	e8 9b fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009a7f:	59                   	pop    ecx
c0009a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a82:	5a                   	pop    edx
c0009a83:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a88:	c3                   	ret    
c0009a89:	90                   	nop

c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a8a:	55                   	push   ebp
c0009a8b:	57                   	push   edi
c0009a8c:	56                   	push   esi
c0009a8d:	53                   	push   ebx
c0009a8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a92:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a96:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a9a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a9e:	85 db                	test   ebx,ebx
c0009aa0:	7e 24                	jle    c0009ac6 <VAS::reflagRange(unsigned long, int, int, int)+0x3c>
c0009aa2:	c1 e3 0c             	shl    ebx,0xc
c0009aa5:	01 f3                	add    ebx,esi
c0009aa7:	56                   	push   esi
c0009aa8:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aae:	55                   	push   ebp
c0009aaf:	e8 66 fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009ab4:	5a                   	pop    edx
c0009ab5:	59                   	pop    ecx
c0009ab6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009abc:	21 f9                	and    ecx,edi
c0009abe:	09 d1                	or     ecx,edx
c0009ac0:	39 f3                	cmp    ebx,esi
c0009ac2:	89 08                	mov    DWORD PTR [eax],ecx
c0009ac4:	75 e1                	jne    c0009aa7 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009ac6:	5b                   	pop    ebx
c0009ac7:	5e                   	pop    esi
c0009ac8:	5f                   	pop    edi
c0009ac9:	5d                   	pop    ebp
c0009aca:	c3                   	ret    
c0009acb:	90                   	nop

c0009acc <VAS::VAS()>:
c0009acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009adb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009aeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aef:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afe:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b05:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009b0a:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b0f:	29 c2                	sub    edx,eax
c0009b11:	89 d0                	mov    eax,edx
c0009b13:	05 ff 0f 00 00       	add    eax,0xfff
c0009b18:	c1 e8 0c             	shr    eax,0xc
c0009b1b:	89 c2                	mov    edx,eax
c0009b1d:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b22:	6a 04                	push   0x4
c0009b24:	6a ff                	push   0xffffffff
c0009b26:	52                   	push   edx
c0009b27:	50                   	push   eax
c0009b28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2c:	e8 59 ff ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c0009b31:	83 c4 14             	add    esp,0x14
c0009b34:	90                   	nop
c0009b35:	c3                   	ret    

c0009b36 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b36:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b41:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b48:	75 01                	jne    c0009b4b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b4a:	c3                   	ret    
c0009b4b:	68 80 00 00 00       	push   0x80
c0009b50:	6a ff                	push   0xffffffff
c0009b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b56:	50                   	push   eax
c0009b57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b5b:	52                   	push   edx
c0009b5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b60:	51                   	push   ecx
c0009b61:	e8 24 ff ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c0009b66:	83 c4 14             	add    esp,0x14
c0009b69:	c3                   	ret    

c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b75:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b7d:	83 f8 01             	cmp    eax,0x1
c0009b80:	19 c0                	sbb    eax,eax
c0009b82:	83 ca 03             	or     edx,0x3
c0009b85:	83 e0 fc             	and    eax,0xfffffffc
c0009b88:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b8f:	0f 20 d8             	mov    eax,cr3
c0009b92:	0f 22 d8             	mov    cr3,eax
c0009b95:	c3                   	ret    

c0009b96 <VAS::~VAS()>:
c0009b96:	83 ec 2c             	sub    esp,0x2c
c0009b99:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ba1:	fa                   	cli    
c0009ba2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ba7:	83 c0 01             	add    eax,0x1
c0009baa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009baf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bc3:	6a 01                	push   0x1
c0009bc5:	50                   	push   eax
c0009bc6:	e8 9f ff ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bcb:	83 c4 0c             	add    esp,0xc
c0009bce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bde:	0f 8f d8 00 00 00    	jg     c0009cbc <VAS::~VAS()+0x126>
c0009be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009beb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bef:	c1 e2 02             	shl    edx,0x2
c0009bf2:	01 d0                	add    eax,edx
c0009bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bfe:	83 e0 01             	and    eax,0x1
c0009c01:	0f 84 ab 00 00 00    	je     c0009cb2 <VAS::~VAS()+0x11c>
c0009c07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c0f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c17:	7f 74                	jg     c0009c8d <VAS::~VAS()+0xf7>
c0009c19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c1d:	c1 e0 0a             	shl    eax,0xa
c0009c20:	89 c2                	mov    edx,eax
c0009c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c26:	01 d0                	add    eax,edx
c0009c28:	c1 e0 0c             	shl    eax,0xc
c0009c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c2f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c43:	6a 01                	push   0x1
c0009c45:	50                   	push   eax
c0009c46:	e8 a1 fc ff ff       	call   c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c4b:	83 c4 0c             	add    esp,0xc
c0009c4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c60:	25 01 04 00 00       	and    eax,0x401
c0009c65:	3d 01 04 00 00       	cmp    eax,0x401
c0009c6a:	75 1a                	jne    c0009c86 <VAS::~VAS()+0xf0>
c0009c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c75:	83 ec 0c             	sub    esp,0xc
c0009c78:	50                   	push   eax
c0009c79:	e8 cc e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009c7e:	83 c4 10             	add    esp,0x10
c0009c81:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c86:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c8b:	eb 82                	jmp    c0009c0f <VAS::~VAS()+0x79>
c0009c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c91:	25 00 04 00 00       	and    eax,0x400
c0009c96:	74 1a                	je     c0009cb2 <VAS::~VAS()+0x11c>
c0009c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca1:	83 ec 0c             	sub    esp,0xc
c0009ca4:	50                   	push   eax
c0009ca5:	e8 a0 e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009caa:	83 c4 10             	add    esp,0x10
c0009cad:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cb2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb7:	e9 1a ff ff ff       	jmp    c0009bd6 <VAS::~VAS()+0x40>
c0009cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cc3:	83 ec 0c             	sub    esp,0xc
c0009cc6:	50                   	push   eax
c0009cc7:	e8 6d fc ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ccc:	83 c4 10             	add    esp,0x10
c0009ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd6:	83 ec 0c             	sub    esp,0xc
c0009cd9:	50                   	push   eax
c0009cda:	e8 6b e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009cdf:	83 c4 10             	add    esp,0x10
c0009ce2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cec:	83 e8 01             	sub    eax,0x1
c0009cef:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cf4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cf9:	85 c0                	test   eax,eax
c0009cfb:	75 01                	jne    c0009cfe <VAS::~VAS()+0x168>
c0009cfd:	fb                   	sti    
c0009cfe:	90                   	nop
c0009cff:	83 c4 2c             	add    esp,0x2c
c0009d02:	c3                   	ret    
c0009d03:	90                   	nop

c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d04:	55                   	push   ebp
c0009d05:	57                   	push   edi
c0009d06:	56                   	push   esi
c0009d07:	53                   	push   ebx
c0009d08:	83 ec 1c             	sub    esp,0x1c
c0009d0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d0f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d13:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d19:	77 0b                	ja     c0009d26 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009d1b:	0f 20 d8             	mov    eax,cr3
c0009d1e:	0f 20 d8             	mov    eax,cr3
c0009d21:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d24:	75 49                	jne    c0009d6f <VAS::mapPage(unsigned long, unsigned long, int)+0x6b>
c0009d26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d2a:	09 d8                	or     eax,ebx
c0009d2c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d31:	75 59                	jne    c0009d8c <VAS::mapPage(unsigned long, unsigned long, int)+0x88>
c0009d33:	89 de                	mov    esi,ebx
c0009d35:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d38:	c1 ee 16             	shr    esi,0x16
c0009d3b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d42:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d46:	74 56                	je     c0009d9e <VAS::mapPage(unsigned long, unsigned long, int)+0x9a>
c0009d48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d50:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d56:	c1 eb 0a             	shr    ebx,0xa
c0009d59:	c1 e6 0c             	shl    esi,0xc
c0009d5c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d62:	09 d0                	or     eax,edx
c0009d64:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d67:	83 c4 1c             	add    esp,0x1c
c0009d6a:	5b                   	pop    ebx
c0009d6b:	5e                   	pop    esi
c0009d6c:	5f                   	pop    edi
c0009d6d:	5d                   	pop    ebp
c0009d6e:	c3                   	ret    
c0009d6f:	83 ec 0c             	sub    esp,0xc
c0009d72:	68 18 ff 01 c0       	push   0xc001ff18
c0009d77:	e8 46 0c 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0009d7c:	83 c4 10             	add    esp,0x10
c0009d7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d83:	09 d8                	or     eax,ebx
c0009d85:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d8a:	74 a7                	je     c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	68 80 ff 01 c0       	push   0xc001ff80
c0009d94:	e8 56 6b 00 00       	call   c00108ef <KePanic(char const*)>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	eb 95                	jmp    c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009da2:	e8 0c e0 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009da7:	83 ec 0c             	sub    esp,0xc
c0009daa:	89 c5                	mov    ebp,eax
c0009dac:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009db2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009db6:	6a 01                	push   0x1
c0009db8:	e8 60 f8 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0009dbd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dc4:	6a 01                	push   0x1
c0009dc6:	50                   	push   eax
c0009dc7:	55                   	push   ebp
c0009dc8:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dd2:	51                   	push   ecx
c0009dd3:	e8 40 02 00 00       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dd8:	83 c4 1c             	add    esp,0x1c
c0009ddb:	68 00 10 00 00       	push   0x1000
c0009de0:	6a 00                	push   0x0
c0009de2:	50                   	push   eax
c0009de3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009de7:	e8 04 67 ff ff       	call   c00004f0 <memset>
c0009dec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009df0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df3:	e8 41 fb ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009df8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dfc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e05:	e9 3e ff ff ff       	jmp    c0009d48 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009e0a <VAS::allocatePages(int, int)>:
c0009e0a:	55                   	push   ebp
c0009e0b:	57                   	push   edi
c0009e0c:	56                   	push   esi
c0009e0d:	53                   	push   ebx
c0009e0e:	83 ec 1c             	sub    esp,0x1c
c0009e11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e15:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009e1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e20:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e26:	83 e0 01             	and    eax,0x1
c0009e29:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e31:	89 c7                	mov    edi,eax
c0009e33:	0f 85 d6 00 00 00    	jne    c0009f0f <VAS::allocatePages(int, int)+0x105>
c0009e39:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	0f 84 ab 00 00 00    	je     c0009ef3 <VAS::allocatePages(int, int)+0xe9>
c0009e48:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e4c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e50:	c1 e6 0c             	shl    esi,0xc
c0009e53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e57:	01 de                	add    esi,ebx
c0009e59:	85 c0                	test   eax,eax
c0009e5b:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e5e:	7e 3a                	jle    c0009e9a <VAS::allocatePages(int, int)+0x90>
c0009e60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e64:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e68:	80 cc 04             	or     ah,0x4
c0009e6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e6f:	89 f8                	mov    eax,edi
c0009e71:	0f b6 f8             	movzx  edi,al
c0009e74:	e8 3a df ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009e79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e7d:	52                   	push   edx
c0009e7e:	53                   	push   ebx
c0009e7f:	50                   	push   eax
c0009e80:	55                   	push   ebp
c0009e81:	e8 7e fe ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e86:	83 c4 10             	add    esp,0x10
c0009e89:	85 ff                	test   edi,edi
c0009e8b:	74 03                	je     c0009e90 <VAS::allocatePages(int, int)+0x86>
c0009e8d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e90:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e96:	39 de                	cmp    esi,ebx
c0009e98:	75 da                	jne    c0009e74 <VAS::allocatePages(int, int)+0x6a>
c0009e9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e9e:	85 c9                	test   ecx,ecx
c0009ea0:	75 12                	jne    c0009eb4 <VAS::allocatePages(int, int)+0xaa>
c0009ea2:	0f 20 d8             	mov    eax,cr3
c0009ea5:	0f 22 d8             	mov    cr3,eax
c0009ea8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eac:	83 c4 1c             	add    esp,0x1c
c0009eaf:	5b                   	pop    ebx
c0009eb0:	5e                   	pop    esi
c0009eb1:	5f                   	pop    edi
c0009eb2:	5d                   	pop    ebp
c0009eb3:	c3                   	ret    
c0009eb4:	c1 ee 0a             	shr    esi,0xa
c0009eb7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ebb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ec1:	c1 eb 0a             	shr    ebx,0xa
c0009ec4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009eca:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ed0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ed6:	39 c3                	cmp    ebx,eax
c0009ed8:	77 ce                	ja     c0009ea8 <VAS::allocatePages(int, int)+0x9e>
c0009eda:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009edd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee3:	39 d8                	cmp    eax,ebx
c0009ee5:	73 f3                	jae    c0009eda <VAS::allocatePages(int, int)+0xd0>
c0009ee7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eeb:	83 c4 1c             	add    esp,0x1c
c0009eee:	5b                   	pop    ebx
c0009eef:	5e                   	pop    esi
c0009ef0:	5f                   	pop    edi
c0009ef1:	5d                   	pop    ebp
c0009ef2:	c3                   	ret    
c0009ef3:	83 ec 0c             	sub    esp,0xc
c0009ef6:	68 a4 ff 01 c0       	push   0xc001ffa4
c0009efb:	e8 ef 69 00 00       	call   c00108ef <KePanic(char const*)>
c0009f00:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009f03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f07:	83 c4 10             	add    esp,0x10
c0009f0a:	e9 39 ff ff ff       	jmp    c0009e48 <VAS::allocatePages(int, int)+0x3e>
c0009f0f:	83 ec 0c             	sub    esp,0xc
c0009f12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f16:	50                   	push   eax
c0009f17:	e8 01 f7 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0009f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f20:	83 c4 10             	add    esp,0x10
c0009f23:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f28:	0f 87 a4 00 00 00    	ja     c0009fd2 <VAS::allocatePages(int, int)+0x1c8>
c0009f2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f32:	85 c0                	test   eax,eax
c0009f34:	7e 44                	jle    c0009f7a <VAS::allocatePages(int, int)+0x170>
c0009f36:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f3e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f42:	c1 e0 0c             	shl    eax,0xc
c0009f45:	81 ce 00 04 00 00    	or     esi,0x400
c0009f4b:	01 d8                	add    eax,ebx
c0009f4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f51:	89 f8                	mov    eax,edi
c0009f53:	0f b6 f8             	movzx  edi,al
c0009f56:	e8 58 de ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009f5b:	56                   	push   esi
c0009f5c:	53                   	push   ebx
c0009f5d:	50                   	push   eax
c0009f5e:	55                   	push   ebp
c0009f5f:	e8 a0 fd ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f64:	83 c4 10             	add    esp,0x10
c0009f67:	85 ff                	test   edi,edi
c0009f69:	74 03                	je     c0009f6e <VAS::allocatePages(int, int)+0x164>
c0009f6b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f74:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f78:	75 dc                	jne    c0009f56 <VAS::allocatePages(int, int)+0x14c>
c0009f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7e:	85 c0                	test   eax,eax
c0009f80:	0f 84 1c ff ff ff    	je     c0009ea2 <VAS::allocatePages(int, int)+0x98>
c0009f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f8e:	89 d3                	mov    ebx,edx
c0009f90:	c1 e0 0c             	shl    eax,0xc
c0009f93:	c1 eb 0a             	shr    ebx,0xa
c0009f96:	01 d0                	add    eax,edx
c0009f98:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f9e:	c1 e8 0a             	shr    eax,0xa
c0009fa1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009fa7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fac:	2d 00 00 40 00       	sub    eax,0x400000
c0009fb1:	39 c3                	cmp    ebx,eax
c0009fb3:	0f 87 ef fe ff ff    	ja     c0009ea8 <VAS::allocatePages(int, int)+0x9e>
c0009fb9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fbc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fc2:	39 d8                	cmp    eax,ebx
c0009fc4:	73 f3                	jae    c0009fb9 <VAS::allocatePages(int, int)+0x1af>
c0009fc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fca:	83 c4 1c             	add    esp,0x1c
c0009fcd:	5b                   	pop    ebx
c0009fce:	5e                   	pop    esi
c0009fcf:	5f                   	pop    edi
c0009fd0:	5d                   	pop    ebp
c0009fd1:	c3                   	ret    
c0009fd2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fdd:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fe4:	0f 84 44 ff ff ff    	je     c0009f2e <VAS::allocatePages(int, int)+0x124>
c0009fea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fee:	80 cc 01             	or     ah,0x1
c0009ff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ff5:	e9 34 ff ff ff       	jmp    c0009f2e <VAS::allocatePages(int, int)+0x124>

c0009ffa <VAS::setCPUSpecific(unsigned long)>:
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	6a 05                	push   0x5
c0009fff:	68 00 00 40 c2       	push   0xc2400000
c000a004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a008:	50                   	push   eax
c000a009:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a00d:	52                   	push   edx
c000a00e:	e8 f1 fc ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a013:	83 c4 1c             	add    esp,0x1c
c000a016:	c3                   	ret    
c000a017:	90                   	nop

c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a018:	55                   	push   ebp
c000a019:	57                   	push   edi
c000a01a:	56                   	push   esi
c000a01b:	53                   	push   ebx
c000a01c:	83 ec 1c             	sub    esp,0x1c
c000a01f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a024:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a028:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a032:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a038:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a03c:	83 e0 01             	and    eax,0x1
c000a03f:	85 db                	test   ebx,ebx
c000a041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a045:	7e 43                	jle    c000a08a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x72>
c000a047:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a04f:	c1 e2 0c             	shl    edx,0xc
c000a052:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a056:	01 ca                	add    edx,ecx
c000a058:	0f b6 f0             	movzx  esi,al
c000a05b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a05f:	55                   	push   ebp
c000a060:	53                   	push   ebx
c000a061:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a065:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000a069:	29 d0                	sub    eax,edx
c000a06b:	01 d8                	add    eax,ebx
c000a06d:	50                   	push   eax
c000a06e:	57                   	push   edi
c000a06f:	e8 90 fc ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a074:	83 c4 10             	add    esp,0x10
c000a077:	85 f6                	test   esi,esi
c000a079:	74 03                	je     c000a07e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000a07b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a07e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a084:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a088:	75 d5                	jne    c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c000a08a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a08e:	85 c9                	test   ecx,ecx
c000a090:	75 12                	jne    c000a0a4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8c>
c000a092:	0f 20 d8             	mov    eax,cr3
c000a095:	0f 22 d8             	mov    cr3,eax
c000a098:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a09c:	83 c4 1c             	add    esp,0x1c
c000a09f:	5b                   	pop    ebx
c000a0a0:	5e                   	pop    esi
c000a0a1:	5f                   	pop    edi
c000a0a2:	5d                   	pop    ebp
c000a0a3:	c3                   	ret    
c000a0a4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a0a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0ac:	c1 eb 0a             	shr    ebx,0xa
c000a0af:	c1 e0 0c             	shl    eax,0xc
c000a0b2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0b8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a0bc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a0c2:	01 d0                	add    eax,edx
c000a0c4:	c1 e8 0a             	shr    eax,0xa
c000a0c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0cc:	2d 00 00 40 00       	sub    eax,0x400000
c000a0d1:	39 c3                	cmp    ebx,eax
c000a0d3:	77 c3                	ja     c000a098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x80>
c000a0d5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0de:	39 d8                	cmp    eax,ebx
c000a0e0:	73 f3                	jae    c000a0d5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xbd>
c000a0e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a0e6:	83 c4 1c             	add    esp,0x1c
c000a0e9:	5b                   	pop    ebx
c000a0ea:	5e                   	pop    esi
c000a0eb:	5f                   	pop    edi
c000a0ec:	5d                   	pop    ebp
c000a0ed:	c3                   	ret    

c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0ee:	55                   	push   ebp
c000a0ef:	57                   	push   edi
c000a0f0:	56                   	push   esi
c000a0f1:	53                   	push   ebx
c000a0f2:	83 ec 1c             	sub    esp,0x1c
c000a0f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0f9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a0fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a101:	09 f8                	or     eax,edi
c000a103:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a107:	a9 ff 0f 00 00       	test   eax,0xfff
c000a10c:	75 4f                	jne    c000a15d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a10e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a112:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a115:	c1 eb 16             	shr    ebx,0x16
c000a118:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c000a11f:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a123:	74 52                	je     c000a177 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c000a125:	0f b6 f2             	movzx  esi,dl
c000a128:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a12c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a130:	c1 e8 0a             	shr    eax,0xa
c000a133:	83 fe 01             	cmp    esi,0x1
c000a136:	19 d2                	sbb    edx,edx
c000a138:	c1 e3 0c             	shl    ebx,0xc
c000a13b:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a141:	25 fc 0f 00 00       	and    eax,0xffc
c000a146:	01 d8                	add    eax,ebx
c000a148:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a14c:	09 d9                	or     ecx,ebx
c000a14e:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a155:	83 c4 1c             	add    esp,0x1c
c000a158:	5b                   	pop    ebx
c000a159:	5e                   	pop    esi
c000a15a:	5f                   	pop    edi
c000a15b:	5d                   	pop    ebp
c000a15c:	c3                   	ret    
c000a15d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a161:	83 ec 0c             	sub    esp,0xc
c000a164:	68 d0 ff 01 c0       	push   0xc001ffd0
c000a169:	e8 81 67 00 00       	call   c00108ef <KePanic(char const*)>
c000a16e:	83 c4 10             	add    esp,0x10
c000a171:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a175:	eb 97                	jmp    c000a10e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a17b:	e8 33 dc ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a180:	83 ec 0c             	sub    esp,0xc
c000a183:	89 c5                	mov    ebp,eax
c000a185:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a18b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a18f:	6a 01                	push   0x1
c000a191:	e8 87 f4 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000a196:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a19d:	6a 01                	push   0x1
c000a19f:	50                   	push   eax
c000a1a0:	55                   	push   ebp
c000a1a1:	81 cd 07 04 00 00    	or     ebp,0x407
c000a1a7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a1ab:	51                   	push   ecx
c000a1ac:	e8 67 fe ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a1b1:	83 c4 1c             	add    esp,0x1c
c000a1b4:	68 00 10 00 00       	push   0x1000
c000a1b9:	6a 00                	push   0x0
c000a1bb:	50                   	push   eax
c000a1bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1c0:	e8 2b 63 ff ff       	call   c00004f0 <memset>
c000a1c5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a1c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1cc:	e8 68 f7 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a1d1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1d4:	83 c4 10             	add    esp,0x10
c000a1d7:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1de:	e9 42 ff ff ff       	jmp    c000a125 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a1e3:	90                   	nop

c000a1e4 <VAS::VAS(bool)>:
c000a1e4:	53                   	push   ebx
c000a1e5:	83 ec 28             	sub    esp,0x28
c000a1e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a20e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a211:	e8 9d db ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a216:	89 c2                	mov    edx,eax
c000a218:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a21c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a21f:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a225:	83 ec 0c             	sub    esp,0xc
c000a228:	6a 01                	push   0x1
c000a22a:	e8 ee f3 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	89 c2                	mov    edx,eax
c000a234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a238:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a23b:	83 ec 0c             	sub    esp,0xc
c000a23e:	6a 03                	push   0x3
c000a240:	6a 01                	push   0x1
c000a242:	52                   	push   edx
c000a243:	50                   	push   eax
c000a244:	53                   	push   ebx
c000a245:	e8 ce fd ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a24a:	83 c4 20             	add    esp,0x20
c000a24d:	89 c2                	mov    edx,eax
c000a24f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a253:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a256:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a25e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a266:	7f 1d                	jg     c000a285 <VAS::VAS(bool)+0xa1>
c000a268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a26c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a26f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a273:	c1 e2 02             	shl    edx,0x2
c000a276:	01 d0                	add    eax,edx
c000a278:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a27e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a283:	eb d9                	jmp    c000a25e <VAS::VAS(bool)+0x7a>
c000a285:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a28d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a295:	7f 7e                	jg     c000a315 <VAS::VAS(bool)+0x131>
c000a297:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a29b:	2d 00 02 00 00       	sub    eax,0x200
c000a2a0:	c1 e0 0c             	shl    eax,0xc
c000a2a3:	83 c8 05             	or     eax,0x5
c000a2a6:	89 c2                	mov    edx,eax
c000a2a8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2b3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2b9:	83 e0 10             	and    eax,0x10
c000a2bc:	0f b6 c0             	movzx  eax,al
c000a2bf:	85 c0                	test   eax,eax
c000a2c1:	74 07                	je     c000a2ca <VAS::VAS(bool)+0xe6>
c000a2c3:	b8 00 01 00 00       	mov    eax,0x100
c000a2c8:	eb 05                	jmp    c000a2cf <VAS::VAS(bool)+0xeb>
c000a2ca:	b8 00 00 00 00       	mov    eax,0x0
c000a2cf:	09 d0                	or     eax,edx
c000a2d1:	89 c1                	mov    ecx,eax
c000a2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2de:	c1 e2 02             	shl    edx,0x2
c000a2e1:	01 d0                	add    eax,edx
c000a2e3:	89 ca                	mov    edx,ecx
c000a2e5:	89 10                	mov    DWORD PTR [eax],edx
c000a2e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2eb:	2d 40 03 00 00       	sub    eax,0x340
c000a2f0:	83 f8 7f             	cmp    eax,0x7f
c000a2f3:	77 16                	ja     c000a30b <VAS::VAS(bool)+0x127>
c000a2f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2f9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a300:	c1 e2 02             	shl    edx,0x2
c000a303:	01 d0                	add    eax,edx
c000a305:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a30b:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a310:	e9 78 ff ff ff       	jmp    c000a28d <VAS::VAS(bool)+0xa9>
c000a315:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a31a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a320:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a326:	83 e0 10             	and    eax,0x10
c000a329:	0f b6 c0             	movzx  eax,al
c000a32c:	85 c0                	test   eax,eax
c000a32e:	74 07                	je     c000a337 <VAS::VAS(bool)+0x153>
c000a330:	b8 03 41 00 00       	mov    eax,0x4103
c000a335:	eb 05                	jmp    c000a33c <VAS::VAS(bool)+0x158>
c000a337:	b8 03 40 00 00       	mov    eax,0x4003
c000a33c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a340:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a343:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a349:	89 02                	mov    DWORD PTR [edx],eax
c000a34b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a350:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a356:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a35c:	83 ec 08             	sub    esp,0x8
c000a35f:	50                   	push   eax
c000a360:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a364:	e8 91 fc ff ff       	call   c0009ffa <VAS::setCPUSpecific(unsigned long)>
c000a369:	83 c4 10             	add    esp,0x10
c000a36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a370:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a373:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a378:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a37e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a384:	83 e0 10             	and    eax,0x10
c000a387:	0f b6 c0             	movzx  eax,al
c000a38a:	85 c0                	test   eax,eax
c000a38c:	74 07                	je     c000a395 <VAS::VAS(bool)+0x1b1>
c000a38e:	b8 00 01 00 00       	mov    eax,0x100
c000a393:	eb 05                	jmp    c000a39a <VAS::VAS(bool)+0x1b6>
c000a395:	b8 00 00 00 00       	mov    eax,0x0
c000a39a:	09 c2                	or     edx,eax
c000a39c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a3a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a3a3:	05 fc 0f 00 00       	add    eax,0xffc
c000a3a8:	83 ca 03             	or     edx,0x3
c000a3ab:	89 10                	mov    DWORD PTR [eax],edx
c000a3ad:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3b8:	83 ec 0c             	sub    esp,0xc
c000a3bb:	50                   	push   eax
c000a3bc:	e8 c9 1c 00 00       	call   c000c08a <Device::getName()>
c000a3c1:	83 c4 10             	add    esp,0x10
c000a3c4:	83 ec 08             	sub    esp,0x8
c000a3c7:	68 73 00 02 c0       	push   0xc0020073
c000a3cc:	50                   	push   eax
c000a3cd:	e8 7e 63 ff ff       	call   c0000750 <strcmp>
c000a3d2:	83 c4 10             	add    esp,0x10
c000a3d5:	85 c0                	test   eax,eax
c000a3d7:	0f 94 c0             	sete   al
c000a3da:	0f b6 c0             	movzx  eax,al
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	0f 84 8b 00 00 00    	je     c000a470 <VAS::VAS(bool)+0x28c>
c000a3e5:	fa                   	cli    
c000a3e6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3eb:	83 c0 01             	add    eax,0x1
c000a3ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3f3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3fe:	05 7c 09 00 00       	add    eax,0x97c
c000a403:	83 ec 0c             	sub    esp,0xc
c000a406:	50                   	push   eax
c000a407:	e8 9a d1 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a40c:	83 c4 10             	add    esp,0x10
c000a40f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a414:	89 c3                	mov    ebx,eax
c000a416:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a41b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a421:	05 7c 09 00 00       	add    eax,0x97c
c000a426:	83 ec 0c             	sub    esp,0xc
c000a429:	50                   	push   eax
c000a42a:	e8 77 d1 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a42f:	83 c4 10             	add    esp,0x10
c000a432:	83 ec 08             	sub    esp,0x8
c000a435:	50                   	push   eax
c000a436:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a43a:	e8 db f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a43f:	83 c4 10             	add    esp,0x10
c000a442:	8b 00                	mov    eax,DWORD PTR [eax]
c000a444:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a449:	6a 11                	push   0x11
c000a44b:	53                   	push   ebx
c000a44c:	50                   	push   eax
c000a44d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a451:	e8 ae f8 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a45e:	83 e8 01             	sub    eax,0x1
c000a461:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a466:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a46b:	85 c0                	test   eax,eax
c000a46d:	75 01                	jne    c000a470 <VAS::VAS(bool)+0x28c>
c000a46f:	fb                   	sti    
c000a470:	90                   	nop
c000a471:	83 c4 28             	add    esp,0x28
c000a474:	5b                   	pop    ebx
c000a475:	c3                   	ret    

c000a476 <VAS::evict(unsigned long)>:
c000a476:	55                   	push   ebp
c000a477:	57                   	push   edi
c000a478:	56                   	push   esi
c000a479:	53                   	push   ebx
c000a47a:	83 ec 1c             	sub    esp,0x1c
c000a47d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a481:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a485:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a489:	e8 ed f2 ff ff       	call   c000977b <Virt::allocateSwapfilePage()>
c000a48e:	89 c7                	mov    edi,eax
c000a490:	a1 6c 1f 02 c0       	mov    eax,ds:0xc0021f6c
c000a495:	85 c0                	test   eax,eax
c000a497:	7e 40                	jle    c000a4d9 <VAS::evict(unsigned long)+0x63>
c000a499:	89 ee                	mov    esi,ebp
c000a49b:	31 db                	xor    ebx,ebx
c000a49d:	83 ec 0c             	sub    esp,0xc
c000a4a0:	57                   	push   edi
c000a4a1:	e8 bf f2 ff ff       	call   c0009765 <Virt::swapIDToSector(unsigned long)>
c000a4a6:	89 34 24             	mov    DWORD PTR [esp],esi
c000a4a9:	01 d8                	add    eax,ebx
c000a4ab:	6a 01                	push   0x1
c000a4ad:	31 d2                	xor    edx,edx
c000a4af:	83 c3 01             	add    ebx,0x1
c000a4b2:	52                   	push   edx
c000a4b3:	81 c6 00 02 00 00    	add    esi,0x200
c000a4b9:	50                   	push   eax
c000a4ba:	0f be 05 78 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021f78
c000a4c1:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a4c8:	50                   	push   eax
c000a4c9:	e8 76 2d 00 00       	call   c000d244 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4ce:	83 c4 20             	add    esp,0x20
c000a4d1:	39 1d 6c 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f6c,ebx
c000a4d7:	7f c4                	jg     c000a49d <VAS::evict(unsigned long)+0x27>
c000a4d9:	83 ec 08             	sub    esp,0x8
c000a4dc:	c1 e7 0b             	shl    edi,0xb
c000a4df:	55                   	push   ebp
c000a4e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4e4:	50                   	push   eax
c000a4e5:	e8 30 f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a4ea:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4ec:	89 d1                	mov    ecx,edx
c000a4ee:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4f4:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4fa:	09 cf                	or     edi,ecx
c000a4fc:	89 38                	mov    DWORD PTR [eax],edi
c000a4fe:	89 14 24             	mov    DWORD PTR [esp],edx
c000a501:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a507:	83 c1 01             	add    ecx,0x1
c000a50a:	89 0d a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,ecx
c000a510:	e8 35 d8 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c000a515:	0f 20 d8             	mov    eax,cr3
c000a518:	0f 22 d8             	mov    cr3,eax
c000a51b:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a520:	c7 44 24 40 81 00 02 c0 	mov    DWORD PTR [esp+0x40],0xc0020081
c000a528:	8d 50 01             	lea    edx,[eax+0x1]
c000a52b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a52f:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a535:	83 c4 2c             	add    esp,0x2c
c000a538:	5b                   	pop    ebx
c000a539:	5e                   	pop    esi
c000a53a:	5f                   	pop    edi
c000a53b:	5d                   	pop    ebp
c000a53c:	e9 81 04 00 00       	jmp    c000a9c2 <Dbg::kprintf(char const*, ...)>
c000a541:	90                   	nop

c000a542 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a542:	55                   	push   ebp
c000a543:	57                   	push   edi
c000a544:	56                   	push   esi
c000a545:	53                   	push   ebx
c000a546:	83 ec 0c             	sub    esp,0xc
c000a549:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a54d:	89 de                	mov    esi,ebx
c000a54f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a555:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a55b:	77 1f                	ja     c000a57c <VAS::tryLoadBackOffDisk(unsigned long)+0x3a>
c000a55d:	83 ec 08             	sub    esp,0x8
c000a560:	53                   	push   ebx
c000a561:	68 a4 00 02 c0       	push   0xc00200a4
c000a566:	e8 57 04 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000a56b:	83 c4 10             	add    esp,0x10
c000a56e:	85 f6                	test   esi,esi
c000a570:	75 27                	jne    c000a599 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000a572:	31 c0                	xor    eax,eax
c000a574:	83 c4 0c             	add    esp,0xc
c000a577:	5b                   	pop    ebx
c000a578:	5e                   	pop    esi
c000a579:	5f                   	pop    edi
c000a57a:	5d                   	pop    ebp
c000a57b:	c3                   	ret    
c000a57c:	83 ec 0c             	sub    esp,0xc
c000a57f:	68 92 00 02 c0       	push   0xc0020092
c000a584:	e8 66 63 00 00       	call   c00108ef <KePanic(char const*)>
c000a589:	5f                   	pop    edi
c000a58a:	5d                   	pop    ebp
c000a58b:	53                   	push   ebx
c000a58c:	68 a4 00 02 c0       	push   0xc00200a4
c000a591:	e8 2c 04 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000a596:	83 c4 10             	add    esp,0x10
c000a599:	83 ec 08             	sub    esp,0x8
c000a59c:	56                   	push   esi
c000a59d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a5a1:	51                   	push   ecx
c000a5a2:	e8 73 f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a5a7:	83 c4 10             	add    esp,0x10
c000a5aa:	89 c3                	mov    ebx,eax
c000a5ac:	85 c0                	test   eax,eax
c000a5ae:	74 c2                	je     c000a572 <VAS::tryLoadBackOffDisk(unsigned long)+0x30>
c000a5b0:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a5b2:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a5b8:	75 b8                	jne    c000a572 <VAS::tryLoadBackOffDisk(unsigned long)+0x30>
c000a5ba:	e8 f4 d7 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a5bf:	c1 ed 0b             	shr    ebp,0xb
c000a5c2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a5c4:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5ca:	09 c2                	or     edx,eax
c000a5cc:	81 ca 01 08 00 00    	or     edx,0x801
c000a5d2:	89 13                	mov    DWORD PTR [ebx],edx
c000a5d4:	8b 15 6c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f6c
c000a5da:	85 d2                	test   edx,edx
c000a5dc:	7e 40                	jle    c000a61e <VAS::tryLoadBackOffDisk(unsigned long)+0xdc>
c000a5de:	89 f7                	mov    edi,esi
c000a5e0:	31 db                	xor    ebx,ebx
c000a5e2:	83 ec 0c             	sub    esp,0xc
c000a5e5:	55                   	push   ebp
c000a5e6:	e8 7a f1 ff ff       	call   c0009765 <Virt::swapIDToSector(unsigned long)>
c000a5eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ee:	01 d8                	add    eax,ebx
c000a5f0:	6a 01                	push   0x1
c000a5f2:	31 d2                	xor    edx,edx
c000a5f4:	83 c3 01             	add    ebx,0x1
c000a5f7:	52                   	push   edx
c000a5f8:	81 c7 00 02 00 00    	add    edi,0x200
c000a5fe:	50                   	push   eax
c000a5ff:	0f be 05 78 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021f78
c000a606:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a60d:	50                   	push   eax
c000a60e:	e8 c5 2b 00 00       	call   c000d1d8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a613:	83 c4 20             	add    esp,0x20
c000a616:	39 1d 6c 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f6c,ebx
c000a61c:	7f c4                	jg     c000a5e2 <VAS::tryLoadBackOffDisk(unsigned long)+0xa0>
c000a61e:	83 ec 04             	sub    esp,0x4
c000a621:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a626:	83 e8 01             	sub    eax,0x1
c000a629:	50                   	push   eax
c000a62a:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a62f:	56                   	push   esi
c000a630:	68 b7 00 02 c0       	push   0xc00200b7
c000a635:	e8 88 03 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000a63a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a63d:	e8 00 f1 ff ff       	call   c0009742 <Virt::freeSwapfilePage(unsigned long)>
c000a642:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a647:	83 c4 10             	add    esp,0x10
c000a64a:	83 e8 01             	sub    eax,0x1
c000a64d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a652:	85 c0                	test   eax,eax
c000a654:	75 01                	jne    c000a657 <VAS::tryLoadBackOffDisk(unsigned long)+0x115>
c000a656:	fb                   	sti    
c000a657:	0f 20 d8             	mov    eax,cr3
c000a65a:	0f 22 d8             	mov    cr3,eax
c000a65d:	b0 01                	mov    al,0x1
c000a65f:	e9 10 ff ff ff       	jmp    c000a574 <VAS::tryLoadBackOffDisk(unsigned long)+0x32>

c000a664 <VAS::scanForEviction()>:
c000a664:	57                   	push   edi
c000a665:	31 ff                	xor    edi,edi
c000a667:	56                   	push   esi
c000a668:	53                   	push   ebx
c000a669:	83 ec 10             	sub    esp,0x10
c000a66c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a670:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a673:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a679:	75 0e                	jne    c000a689 <VAS::scanForEviction()+0x25>
c000a67b:	89 da                	mov    edx,ebx
c000a67d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a680:	c1 ea 16             	shr    edx,0x16
c000a683:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a687:	74 50                	je     c000a6d9 <VAS::scanForEviction()+0x75>
c000a689:	53                   	push   ebx
c000a68a:	56                   	push   esi
c000a68b:	e8 8a f2 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a690:	5a                   	pop    edx
c000a691:	8b 10                	mov    edx,DWORD PTR [eax]
c000a693:	59                   	pop    ecx
c000a694:	89 d1                	mov    ecx,edx
c000a696:	81 e1 01 08 00 00    	and    ecx,0x801
c000a69c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a6a2:	74 40                	je     c000a6e4 <VAS::scanForEviction()+0x80>
c000a6a4:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a6aa:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a6b0:	76 2d                	jbe    c000a6df <VAS::scanForEviction()+0x7b>
c000a6b2:	83 c7 01             	add    edi,0x1
c000a6b5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a6bc:	83 ff 03             	cmp    edi,0x3
c000a6bf:	74 32                	je     c000a6f3 <VAS::scanForEviction()+0x8f>
c000a6c1:	31 db                	xor    ebx,ebx
c000a6c3:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6c9:	75 be                	jne    c000a689 <VAS::scanForEviction()+0x25>
c000a6cb:	89 da                	mov    edx,ebx
c000a6cd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a6d0:	c1 ea 16             	shr    edx,0x16
c000a6d3:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6d7:	75 b0                	jne    c000a689 <VAS::scanForEviction()+0x25>
c000a6d9:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6df:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6e2:	eb 8f                	jmp    c000a673 <VAS::scanForEviction()+0xf>
c000a6e4:	f6 c2 20             	test   dl,0x20
c000a6e7:	74 13                	je     c000a6fc <VAS::scanForEviction()+0x98>
c000a6e9:	83 e2 df             	and    edx,0xffffffdf
c000a6ec:	89 10                	mov    DWORD PTR [eax],edx
c000a6ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6f1:	eb b1                	jmp    c000a6a4 <VAS::scanForEviction()+0x40>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	31 c0                	xor    eax,eax
c000a6f8:	5b                   	pop    ebx
c000a6f9:	5e                   	pop    esi
c000a6fa:	5f                   	pop    edi
c000a6fb:	c3                   	ret    
c000a6fc:	83 ec 08             	sub    esp,0x8
c000a6ff:	89 d0                	mov    eax,edx
c000a701:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a706:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a70a:	53                   	push   ebx
c000a70b:	68 cc 00 02 c0       	push   0xc00200cc
c000a710:	e8 ad 02 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000a715:	58                   	pop    eax
c000a716:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a719:	5a                   	pop    edx
c000a71a:	51                   	push   ecx
c000a71b:	56                   	push   esi
c000a71c:	e8 55 fd ff ff       	call   c000a476 <VAS::evict(unsigned long)>
c000a721:	5b                   	pop    ebx
c000a722:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a725:	5f                   	pop    edi
c000a726:	50                   	push   eax
c000a727:	68 e0 00 02 c0       	push   0xc00200e0
c000a72c:	e8 91 02 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000a731:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	05 00 10 00 00       	add    eax,0x1000
c000a73c:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a73f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a743:	83 c4 10             	add    esp,0x10
c000a746:	5b                   	pop    ebx
c000a747:	5e                   	pop    esi
c000a748:	5f                   	pop    edi
c000a749:	c3                   	ret    

c000a74a <mapVASFirstTime>:
c000a74a:	55                   	push   ebp
c000a74b:	57                   	push   edi
c000a74c:	56                   	push   esi
c000a74d:	53                   	push   ebx
c000a74e:	83 ec 0c             	sub    esp,0xc
c000a751:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a756:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a759:	83 fa 01             	cmp    edx,0x1
c000a75c:	0f 84 cb 00 00 00    	je     c000a82d <mapVASFirstTime+0xe3>
c000a762:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a765:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a768:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a76d:	c1 e5 15             	shl    ebp,0x15
c000a770:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a775:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a77b:	29 eb                	sub    ebx,ebp
c000a77d:	29 ef                	sub    edi,ebp
c000a77f:	e8 2f d6 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a784:	83 ec 0c             	sub    esp,0xc
c000a787:	68 03 04 00 00       	push   0x403
c000a78c:	6a 01                	push   0x1
c000a78e:	53                   	push   ebx
c000a78f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a795:	50                   	push   eax
c000a796:	56                   	push   esi
c000a797:	e8 7c f8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a79c:	83 c4 20             	add    esp,0x20
c000a79f:	39 fb                	cmp    ebx,edi
c000a7a1:	75 dc                	jne    c000a77f <mapVASFirstTime+0x35>
c000a7a3:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a7a8:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a7ad:	29 eb                	sub    ebx,ebp
c000a7af:	29 ef                	sub    edi,ebp
c000a7b1:	e8 fd d5 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a7b6:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a7ba:	83 fa 01             	cmp    edx,0x1
c000a7bd:	19 d2                	sbb    edx,edx
c000a7bf:	83 ec 0c             	sub    esp,0xc
c000a7c2:	83 e2 04             	and    edx,0x4
c000a7c5:	81 c2 03 04 00 00    	add    edx,0x403
c000a7cb:	52                   	push   edx
c000a7cc:	6a 01                	push   0x1
c000a7ce:	53                   	push   ebx
c000a7cf:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7d5:	50                   	push   eax
c000a7d6:	56                   	push   esi
c000a7d7:	e8 3c f8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7dc:	83 c4 20             	add    esp,0x20
c000a7df:	39 df                	cmp    edi,ebx
c000a7e1:	75 ce                	jne    c000a7b1 <mapVASFirstTime+0x67>
c000a7e3:	83 ec 0c             	sub    esp,0xc
c000a7e6:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7eb:	6a 04                	push   0x4
c000a7ed:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7f3:	6a ff                	push   0xffffffff
c000a7f5:	c1 eb 0c             	shr    ebx,0xc
c000a7f8:	53                   	push   ebx
c000a7f9:	68 00 30 02 c0       	push   0xc0023000
c000a7fe:	56                   	push   esi
c000a7ff:	e8 86 f2 ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c000a804:	83 c4 14             	add    esp,0x14
c000a807:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a80c:	6a 04                	push   0x4
c000a80e:	6a ff                	push   0xffffffff
c000a810:	53                   	push   ebx
c000a811:	68 00 30 02 c0       	push   0xc0023000
c000a816:	50                   	push   eax
c000a817:	e8 6e f2 ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c000a81c:	0f 20 d8             	mov    eax,cr3
c000a81f:	0f 22 d8             	mov    cr3,eax
c000a822:	83 c4 20             	add    esp,0x20
c000a825:	83 c4 0c             	add    esp,0xc
c000a828:	5b                   	pop    ebx
c000a829:	5e                   	pop    esi
c000a82a:	5f                   	pop    edi
c000a82b:	5d                   	pop    ebp
c000a82c:	c3                   	ret    
c000a82d:	83 ec 0c             	sub    esp,0xc
c000a830:	68 f3 00 02 c0       	push   0xc00200f3
c000a835:	e8 88 01 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000a83a:	83 c4 10             	add    esp,0x10
c000a83d:	83 c4 0c             	add    esp,0xc
c000a840:	5b                   	pop    ebx
c000a841:	5e                   	pop    esi
c000a842:	5f                   	pop    edi
c000a843:	5d                   	pop    ebp
c000a844:	c3                   	ret    

c000a845 <__cxa_atexit>:
c000a845:	31 c0                	xor    eax,eax
c000a847:	c3                   	ret    

c000a848 <__cxa_finalize>:
c000a848:	c3                   	ret    

c000a849 <__stack_chk_fail>:
c000a849:	55                   	push   ebp
c000a84a:	89 e5                	mov    ebp,esp
c000a84c:	83 ec 10             	sub    esp,0x10
c000a84f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a852:	68 0c 01 02 c0       	push   0xc002010c
c000a857:	e8 66 01 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000a85c:	58                   	pop    eax
c000a85d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a860:	5a                   	pop    edx
c000a861:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a864:	68 0c 01 02 c0       	push   0xc002010c
c000a869:	e8 54 01 00 00       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000a86e:	c7 04 24 14 01 02 c0 	mov    DWORD PTR [esp],0xc0020114
c000a875:	e8 75 60 00 00       	call   c00108ef <KePanic(char const*)>
c000a87a:	83 c4 10             	add    esp,0x10
c000a87d:	c9                   	leave  
c000a87e:	c3                   	ret    

c000a87f <__cxa_pure_virtual>:
c000a87f:	83 ec 18             	sub    esp,0x18
c000a882:	68 2c 01 02 c0       	push   0xc002012c
c000a887:	e8 63 60 00 00       	call   c00108ef <KePanic(char const*)>
c000a88c:	83 c4 1c             	add    esp,0x1c
c000a88f:	c3                   	ret    

c000a890 <operator new[](unsigned long)>:
c000a890:	e9 19 d2 ff ff       	jmp    c0007aae <malloc>

c000a895 <operator delete(void*, unsigned long)>:
c000a895:	e9 34 d2 ff ff       	jmp    c0007ace <rfree>

c000a89a <operator delete[](void*)>:
c000a89a:	e9 2f d2 ff ff       	jmp    c0007ace <rfree>

c000a89f <operator delete[](void*, unsigned long)>:
c000a89f:	e9 2a d2 ff ff       	jmp    c0007ace <rfree>

c000a8a4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a8a4:	55                   	push   ebp
c000a8a5:	57                   	push   edi
c000a8a6:	56                   	push   esi
c000a8a7:	be 6f fd 01 c0       	mov    esi,0xc001fd6f
c000a8ac:	53                   	push   ebx
c000a8ad:	83 ec 20             	sub    esp,0x20
c000a8b0:	a0 6e fd 01 c0       	mov    al,ds:0xc001fd6e
c000a8b5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a8b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a8bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a8c1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a8c5:	b8 10 00 00 00       	mov    eax,0x10
c000a8ca:	f7 c7 02 00 00 00    	test   edi,0x2
c000a8d0:	75 60                	jne    c000a932 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a8d2:	89 c1                	mov    ecx,eax
c000a8d4:	c1 e9 02             	shr    ecx,0x2
c000a8d7:	fc                   	cld    
c000a8d8:	31 d2                	xor    edx,edx
c000a8da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a8dc:	a8 02                	test   al,0x2
c000a8de:	74 0b                	je     c000a8eb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a8e0:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8e3:	66 89 17             	mov    WORD PTR [edi],dx
c000a8e6:	ba 02 00 00 00       	mov    edx,0x2
c000a8eb:	a8 01                	test   al,0x1
c000a8ed:	74 06                	je     c000a8f5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a8ef:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a8f2:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a8f5:	89 ee                	mov    esi,ebp
c000a8f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a8fb:	eb 02                	jmp    c000a8ff <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a8fd:	89 c6                	mov    esi,eax
c000a8ff:	31 d2                	xor    edx,edx
c000a901:	83 c1 01             	add    ecx,0x1
c000a904:	89 f0                	mov    eax,esi
c000a906:	f7 f3                	div    ebx
c000a908:	39 de                	cmp    esi,ebx
c000a90a:	73 f1                	jae    c000a8fd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a90c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a90f:	eb 02                	jmp    c000a913 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a911:	89 c5                	mov    ebp,eax
c000a913:	31 d2                	xor    edx,edx
c000a915:	83 e9 01             	sub    ecx,0x1
c000a918:	89 e8                	mov    eax,ebp
c000a91a:	f7 f3                	div    ebx
c000a91c:	39 dd                	cmp    ebp,ebx
c000a91e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a922:	88 11                	mov    BYTE PTR [ecx],dl
c000a924:	73 eb                	jae    c000a911 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a926:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a92a:	83 c4 20             	add    esp,0x20
c000a92d:	5b                   	pop    ebx
c000a92e:	5e                   	pop    esi
c000a92f:	5f                   	pop    edi
c000a930:	5d                   	pop    ebp
c000a931:	c3                   	ret    
c000a932:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a935:	83 c7 02             	add    edi,0x2
c000a938:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a93c:	83 c6 02             	add    esi,0x2
c000a93f:	83 e8 02             	sub    eax,0x2
c000a942:	eb 8e                	jmp    c000a8d2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a944 <Dbg::logc(char)>:
c000a944:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a948:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a94f:	75 12                	jne    c000a963 <Dbg::logc(char)+0x1f>
c000a951:	ba fd 03 00 00       	mov    edx,0x3fd
c000a956:	ec                   	in     al,dx
c000a957:	a8 20                	test   al,0x20
c000a959:	74 fb                	je     c000a956 <Dbg::logc(char)+0x12>
c000a95b:	ba f8 03 00 00       	mov    edx,0x3f8
c000a960:	88 c8                	mov    al,cl
c000a962:	ee                   	out    dx,al
c000a963:	c3                   	ret    

c000a964 <Dbg::logs(char*)>:
c000a964:	53                   	push   ebx
c000a965:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a969:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96c:	85 c0                	test   eax,eax
c000a96e:	74 11                	je     c000a981 <Dbg::logs(char*)+0x1d>
c000a970:	83 c3 01             	add    ebx,0x1
c000a973:	50                   	push   eax
c000a974:	e8 cb ff ff ff       	call   c000a944 <Dbg::logc(char)>
c000a979:	58                   	pop    eax
c000a97a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a97d:	85 c0                	test   eax,eax
c000a97f:	75 ef                	jne    c000a970 <Dbg::logs(char*)+0xc>
c000a981:	5b                   	pop    ebx
c000a982:	c3                   	ret    

c000a983 <Dbg::logWriteInt(unsigned int)>:
c000a983:	83 ec 10             	sub    esp,0x10
c000a986:	6a 0a                	push   0xa
c000a988:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a98c:	50                   	push   eax
c000a98d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a991:	50                   	push   eax
c000a992:	e8 0d ff ff ff       	call   c000a8a4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a997:	50                   	push   eax
c000a998:	e8 c7 ff ff ff       	call   c000a964 <Dbg::logs(char*)>
c000a99d:	83 c4 20             	add    esp,0x20
c000a9a0:	c3                   	ret    

c000a9a1 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a9a1:	83 ec 10             	sub    esp,0x10
c000a9a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9a8:	50                   	push   eax
c000a9a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a9ad:	50                   	push   eax
c000a9ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a9b2:	52                   	push   edx
c000a9b3:	e8 ec fe ff ff       	call   c000a8a4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9b8:	50                   	push   eax
c000a9b9:	e8 a6 ff ff ff       	call   c000a964 <Dbg::logs(char*)>
c000a9be:	83 c4 20             	add    esp,0x20
c000a9c1:	c3                   	ret    

c000a9c2 <Dbg::kprintf(char const*, ...)>:
c000a9c2:	55                   	push   ebp
c000a9c3:	57                   	push   edi
c000a9c4:	56                   	push   esi
c000a9c5:	53                   	push   ebx
c000a9c6:	83 ec 0c             	sub    esp,0xc
c000a9c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9cd:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9d4:	74 08                	je     c000a9de <Dbg::kprintf(char const*, ...)+0x1c>
c000a9d6:	83 c4 0c             	add    esp,0xc
c000a9d9:	5b                   	pop    ebx
c000a9da:	5e                   	pop    esi
c000a9db:	5f                   	pop    edi
c000a9dc:	5d                   	pop    ebp
c000a9dd:	c3                   	ret    
c000a9de:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a9e2:	31 ff                	xor    edi,edi
c000a9e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9e8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9eb:	85 c0                	test   eax,eax
c000a9ed:	74 e7                	je     c000a9d6 <Dbg::kprintf(char const*, ...)+0x14>
c000a9ef:	8d 77 01             	lea    esi,[edi+0x1]
c000a9f2:	83 f8 25             	cmp    eax,0x25
c000a9f5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9f8:	75 47                	jne    c000aa41 <Dbg::kprintf(char const*, ...)+0x7f>
c000a9fa:	83 c7 02             	add    edi,0x2
c000a9fd:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa00:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000aa03:	83 e8 25             	sub    eax,0x25
c000aa06:	0f b6 c0             	movzx  eax,al
c000aa09:	83 f8 53             	cmp    eax,0x53
c000aa0c:	0f 87 ce 00 00 00    	ja     c000aae0 <Dbg::kprintf(char const*, ...)+0x11e>
c000aa12:	ff 24 85 40 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfec0]
c000aa19:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1d:	89 c8                	mov    eax,ecx
c000aa1f:	83 c1 04             	add    ecx,0x4
c000aa22:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa26:	8b 28                	mov    ebp,DWORD PTR [eax]
c000aa28:	55                   	push   ebp
c000aa29:	e8 55 ff ff ff       	call   c000a983 <Dbg::logWriteInt(unsigned int)>
c000aa2e:	58                   	pop    eax
c000aa2f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa32:	85 c0                	test   eax,eax
c000aa34:	74 a0                	je     c000a9d6 <Dbg::kprintf(char const*, ...)+0x14>
c000aa36:	8d 77 01             	lea    esi,[edi+0x1]
c000aa39:	83 f8 25             	cmp    eax,0x25
c000aa3c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa3f:	74 b9                	je     c000a9fa <Dbg::kprintf(char const*, ...)+0x38>
c000aa41:	50                   	push   eax
c000aa42:	89 f7                	mov    edi,esi
c000aa44:	e8 fb fe ff ff       	call   c000a944 <Dbg::logc(char)>
c000aa49:	89 ee                	mov    esi,ebp
c000aa4b:	58                   	pop    eax
c000aa4c:	eb e1                	jmp    c000aa2f <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa52:	89 c8                	mov    eax,ecx
c000aa54:	83 c1 04             	add    ecx,0x4
c000aa57:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa59:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa5d:	50                   	push   eax
c000aa5e:	e8 01 ff ff ff       	call   c000a964 <Dbg::logs(char*)>
c000aa63:	58                   	pop    eax
c000aa64:	eb c9                	jmp    c000aa2f <Dbg::kprintf(char const*, ...)+0x6d>
c000aa66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa6a:	89 d0                	mov    eax,edx
c000aa6c:	83 c2 04             	add    edx,0x4
c000aa6f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa73:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa75:	50                   	push   eax
c000aa76:	e8 08 ff ff ff       	call   c000a983 <Dbg::logWriteInt(unsigned int)>
c000aa7b:	58                   	pop    eax
c000aa7c:	eb b1                	jmp    c000aa2f <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa82:	89 d0                	mov    eax,edx
c000aa84:	83 c2 04             	add    edx,0x4
c000aa87:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa8a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa8e:	50                   	push   eax
c000aa8f:	e8 b0 fe ff ff       	call   c000a944 <Dbg::logc(char)>
c000aa94:	58                   	pop    eax
c000aa95:	eb 98                	jmp    c000aa2f <Dbg::kprintf(char const*, ...)+0x6d>
c000aa97:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa9b:	89 c8                	mov    eax,ecx
c000aa9d:	83 c1 04             	add    ecx,0x4
c000aaa0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aaa4:	6a 10                	push   0x10
c000aaa6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aaa8:	51                   	push   ecx
c000aaa9:	e8 f3 fe ff ff       	call   c000a9a1 <Dbg::logWriteIntBase(unsigned int, int)>
c000aaae:	5d                   	pop    ebp
c000aaaf:	58                   	pop    eax
c000aab0:	e9 7a ff ff ff       	jmp    c000aa2f <Dbg::kprintf(char const*, ...)+0x6d>
c000aab5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aab9:	89 d0                	mov    eax,edx
c000aabb:	83 c2 08             	add    edx,0x8
c000aabe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aac2:	6a 10                	push   0x10
c000aac4:	8b 00                	mov    eax,DWORD PTR [eax]
c000aac6:	50                   	push   eax
c000aac7:	e8 d5 fe ff ff       	call   c000a9a1 <Dbg::logWriteIntBase(unsigned int, int)>
c000aacc:	58                   	pop    eax
c000aacd:	5a                   	pop    edx
c000aace:	e9 5c ff ff ff       	jmp    c000aa2f <Dbg::kprintf(char const*, ...)+0x6d>
c000aad3:	6a 25                	push   0x25
c000aad5:	e8 6a fe ff ff       	call   c000a944 <Dbg::logc(char)>
c000aada:	5a                   	pop    edx
c000aadb:	e9 4f ff ff ff       	jmp    c000aa2f <Dbg::kprintf(char const*, ...)+0x6d>
c000aae0:	6a 25                	push   0x25
c000aae2:	e8 5d fe ff ff       	call   c000a944 <Dbg::logc(char)>
c000aae7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aaeb:	50                   	push   eax
c000aaec:	e8 53 fe ff ff       	call   c000a944 <Dbg::logc(char)>
c000aaf1:	5a                   	pop    edx
c000aaf2:	59                   	pop    ecx
c000aaf3:	e9 37 ff ff ff       	jmp    c000aa2f <Dbg::kprintf(char const*, ...)+0x6d>

c000aaf8 <File::read(unsigned long long, void*, int*)>:
c000aaf8:	53                   	push   ebx
c000aaf9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aafd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab01:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab08:	83 f8 19             	cmp    eax,0x19
c000ab0b:	77 35                	ja     c000ab42 <File::read(unsigned long long, void*, int*)+0x4a>
c000ab0d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab14:	85 c0                	test   eax,eax
c000ab16:	74 2a                	je     c000ab42 <File::read(unsigned long long, void*, int*)+0x4a>
c000ab18:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab1e:	85 c0                	test   eax,eax
c000ab20:	74 20                	je     c000ab42 <File::read(unsigned long long, void*, int*)+0x4a>
c000ab22:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab26:	74 21                	je     c000ab49 <File::read(unsigned long long, void*, int*)+0x51>
c000ab28:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab2a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab2e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab3c:	5b                   	pop    ebx
c000ab3d:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab40:	ff e0                	jmp    eax
c000ab42:	b8 0b 00 00 00       	mov    eax,0xb
c000ab47:	eb 05                	jmp    c000ab4e <File::read(unsigned long long, void*, int*)+0x56>
c000ab49:	b8 05 00 00 00       	mov    eax,0x5
c000ab4e:	5b                   	pop    ebx
c000ab4f:	c3                   	ret    

c000ab50 <File::write(unsigned long long, void*, int*)>:
c000ab50:	53                   	push   ebx
c000ab51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab55:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab59:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab60:	83 f8 19             	cmp    eax,0x19
c000ab63:	77 35                	ja     c000ab9a <File::write(unsigned long long, void*, int*)+0x4a>
c000ab65:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab6c:	85 c0                	test   eax,eax
c000ab6e:	74 2a                	je     c000ab9a <File::write(unsigned long long, void*, int*)+0x4a>
c000ab70:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab76:	85 c0                	test   eax,eax
c000ab78:	74 20                	je     c000ab9a <File::write(unsigned long long, void*, int*)+0x4a>
c000ab7a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab7e:	74 21                	je     c000aba1 <File::write(unsigned long long, void*, int*)+0x51>
c000ab80:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab82:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab86:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab94:	5b                   	pop    ebx
c000ab95:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab98:	ff e0                	jmp    eax
c000ab9a:	b8 0b 00 00 00       	mov    eax,0xb
c000ab9f:	eb 05                	jmp    c000aba6 <File::write(unsigned long long, void*, int*)+0x56>
c000aba1:	b8 05 00 00 00       	mov    eax,0x5
c000aba6:	5b                   	pop    ebx
c000aba7:	c3                   	ret    

c000aba8 <Directory::read(unsigned long long, void*, int*)>:
c000aba8:	53                   	push   ebx
c000aba9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000abb1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000abb8:	83 f8 19             	cmp    eax,0x19
c000abbb:	77 35                	ja     c000abf2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abbd:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abc4:	85 c0                	test   eax,eax
c000abc6:	74 2a                	je     c000abf2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abc8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abce:	85 c0                	test   eax,eax
c000abd0:	74 20                	je     c000abf2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abd2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abd6:	74 21                	je     c000abf9 <Directory::read(unsigned long long, void*, int*)+0x51>
c000abd8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abda:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abde:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abe8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abec:	5b                   	pop    ebx
c000abed:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000abf0:	ff e0                	jmp    eax
c000abf2:	b8 0b 00 00 00       	mov    eax,0xb
c000abf7:	eb 05                	jmp    c000abfe <Directory::read(unsigned long long, void*, int*)+0x56>
c000abf9:	b8 05 00 00 00       	mov    eax,0x5
c000abfe:	5b                   	pop    ebx
c000abff:	c3                   	ret    

c000ac00 <Directory::write(unsigned long long, void*, int*)>:
c000ac00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac04:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ac0b:	b8 0b 00 00 00       	mov    eax,0xb
c000ac10:	83 fa 19             	cmp    edx,0x19
c000ac13:	77 18                	ja     c000ac2d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac15:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ac1c:	85 d2                	test   edx,edx
c000ac1e:	74 0d                	je     c000ac2d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac20:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ac27:	19 c0                	sbb    eax,eax
c000ac29:	83 e0 0a             	and    eax,0xa
c000ac2c:	40                   	inc    eax
c000ac2d:	c3                   	ret    

c000ac2e <File::isAtty()>:
c000ac2e:	31 c0                	xor    eax,eax
c000ac30:	c3                   	ret    
c000ac31:	90                   	nop

c000ac32 <Directory::isAtty()>:
c000ac32:	31 c0                	xor    eax,eax
c000ac34:	c3                   	ret    
c000ac35:	90                   	nop

c000ac36 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ac36:	b8 0a 00 00 00       	mov    eax,0xa
c000ac3b:	c3                   	ret    

c000ac3c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ac3c:	b8 0a 00 00 00       	mov    eax,0xa
c000ac41:	c3                   	ret    

c000ac42 <Filesystem::allocateSwapfile(char const*, int)>:
c000ac42:	31 c0                	xor    eax,eax
c000ac44:	31 d2                	xor    edx,edx
c000ac46:	c3                   	ret    
c000ac47:	90                   	nop

c000ac48 <File::~File()>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	ba 00 03 02 c0       	mov    edx,0xc0020300
c000ac50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac54:	89 10                	mov    DWORD PTR [eax],edx
c000ac56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac5a:	83 ec 0c             	sub    esp,0xc
c000ac5d:	50                   	push   eax
c000ac5e:	e8 51 e7 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	90                   	nop
c000ac67:	83 c4 0c             	add    esp,0xc
c000ac6a:	c3                   	ret    
c000ac6b:	90                   	nop

c000ac6c <File::~File()>:
c000ac6c:	83 ec 0c             	sub    esp,0xc
c000ac6f:	83 ec 0c             	sub    esp,0xc
c000ac72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac76:	e8 cd ff ff ff       	call   c000ac48 <File::~File()>
c000ac7b:	83 c4 10             	add    esp,0x10
c000ac7e:	83 ec 08             	sub    esp,0x8
c000ac81:	68 14 01 00 00       	push   0x114
c000ac86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac8a:	e8 06 fc ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	83 c4 0c             	add    esp,0xc
c000ac95:	c3                   	ret    

c000ac96 <Directory::~Directory()>:
c000ac96:	83 ec 0c             	sub    esp,0xc
c000ac99:	ba 1c 03 02 c0       	mov    edx,0xc002031c
c000ac9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aca2:	89 10                	mov    DWORD PTR [eax],edx
c000aca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aca8:	83 ec 0c             	sub    esp,0xc
c000acab:	50                   	push   eax
c000acac:	e8 03 e7 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000acb1:	83 c4 10             	add    esp,0x10
c000acb4:	90                   	nop
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    
c000acb9:	90                   	nop

c000acba <Directory::~Directory()>:
c000acba:	83 ec 0c             	sub    esp,0xc
c000acbd:	83 ec 0c             	sub    esp,0xc
c000acc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acc4:	e8 cd ff ff ff       	call   c000ac96 <Directory::~Directory()>
c000acc9:	83 c4 10             	add    esp,0x10
c000accc:	83 ec 08             	sub    esp,0x8
c000accf:	68 14 01 00 00       	push   0x114
c000acd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acd8:	e8 b8 fb ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000acdd:	83 c4 10             	add    esp,0x10
c000ace0:	83 c4 0c             	add    esp,0xc
c000ace3:	c3                   	ret    

c000ace4 <Filesystem::Filesystem()>:
c000ace4:	ba 98 02 02 c0       	mov    edx,0xc0020298
c000ace9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aced:	89 10                	mov    DWORD PTR [eax],edx
c000acef:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000acf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acf9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000acfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad00:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ad05:	90                   	nop
c000ad06:	c3                   	ret    
c000ad07:	90                   	nop

c000ad08 <Filesystem::~Filesystem()>:
c000ad08:	ba 98 02 02 c0       	mov    edx,0xc0020298
c000ad0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad11:	89 10                	mov    DWORD PTR [eax],edx
c000ad13:	90                   	nop
c000ad14:	c3                   	ret    
c000ad15:	90                   	nop

c000ad16 <Filesystem::~Filesystem()>:
c000ad16:	83 ec 0c             	sub    esp,0xc
c000ad19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad1d:	e8 e6 ff ff ff       	call   c000ad08 <Filesystem::~Filesystem()>
c000ad22:	83 c4 04             	add    esp,0x4
c000ad25:	83 ec 08             	sub    esp,0x8
c000ad28:	6a 08                	push   0x8
c000ad2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad2e:	e8 62 fb ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000ad33:	83 c4 10             	add    esp,0x10
c000ad36:	83 c4 0c             	add    esp,0xc
c000ad39:	c3                   	ret    

c000ad3a <Fs::getcwd(Process*, char*, int)>:
c000ad3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad3e:	31 c0                	xor    eax,eax
c000ad40:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad43:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad47:	7d 15                	jge    c000ad5e <Fs::getcwd(Process*, char*, int)+0x24>
c000ad49:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad4d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad54:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad57:	84 c9                	test   cl,cl
c000ad59:	74 06                	je     c000ad61 <Fs::getcwd(Process*, char*, int)+0x27>
c000ad5b:	40                   	inc    eax
c000ad5c:	eb e2                	jmp    c000ad40 <Fs::getcwd(Process*, char*, int)+0x6>
c000ad5e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad61:	31 c0                	xor    eax,eax
c000ad63:	c3                   	ret    

c000ad64 <Fs::initVFS()>:
c000ad64:	83 ec 18             	sub    esp,0x18
c000ad67:	6a 08                	push   0x8
c000ad69:	e8 40 cd ff ff       	call   c0007aae <malloc>
c000ad6e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad71:	e8 be dd 00 00       	call   c0018b34 <FAT::FAT()>
c000ad76:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad7d:	e8 2c cd ff ff       	call   c0007aae <malloc>
c000ad82:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad85:	e8 d0 ec 00 00       	call   c0019a5a <ISO9660::ISO9660()>
c000ad8a:	83 c4 1c             	add    esp,0x1c
c000ad8d:	c3                   	ret    

c000ad8e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	53                   	push   ebx
c000ad92:	81 ec 10 04 00 00    	sub    esp,0x410
c000ad98:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ad9f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ada6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000adad:	68 00 04 00 00       	push   0x400
c000adb2:	6a 00                	push   0x0
c000adb4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000adb8:	56                   	push   esi
c000adb9:	e8 32 57 ff ff       	call   c00004f0 <memset>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000adc5:	75 0b                	jne    c000add2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000adc7:	50                   	push   eax
c000adc8:	50                   	push   eax
c000adc9:	57                   	push   edi
c000adca:	56                   	push   esi
c000adcb:	e8 70 58 ff ff       	call   c0000640 <strcpy>
c000add0:	eb 44                	jmp    c000ae16 <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000add2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000add5:	83 f8 5c             	cmp    eax,0x5c
c000add8:	74 05                	je     c000addf <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000adda:	83 f8 2f             	cmp    eax,0x2f
c000addd:	75 18                	jne    c000adf7 <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000addf:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ade2:	3c 60                	cmp    al,0x60
c000ade4:	7e 03                	jle    c000ade9 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ade6:	83 e8 20             	sub    eax,0x20
c000ade9:	88 04 24             	mov    BYTE PTR [esp],al
c000adec:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000adf3:	50                   	push   eax
c000adf4:	50                   	push   eax
c000adf5:	eb 18                	jmp    c000ae0f <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000adf7:	50                   	push   eax
c000adf8:	50                   	push   eax
c000adf9:	55                   	push   ebp
c000adfa:	56                   	push   esi
c000adfb:	e8 40 58 ff ff       	call   c0000640 <strcpy>
c000ae00:	5a                   	pop    edx
c000ae01:	59                   	pop    ecx
c000ae02:	68 13 12 02 c0       	push   0xc0021213
c000ae07:	56                   	push   esi
c000ae08:	e8 33 5a ff ff       	call   c0000840 <strcat>
c000ae0d:	5d                   	pop    ebp
c000ae0e:	58                   	pop    eax
c000ae0f:	57                   	push   edi
c000ae10:	56                   	push   esi
c000ae11:	e8 2a 5a ff ff       	call   c0000840 <strcat>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ae1c:	3c 60                	cmp    al,0x60
c000ae1e:	7e 03                	jle    c000ae23 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000ae20:	83 e8 20             	sub    eax,0x20
c000ae23:	88 04 24             	mov    BYTE PTR [esp],al
c000ae26:	88 03                	mov    BYTE PTR [ebx],al
c000ae28:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae2f:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ae35:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ae39:	bf 03 00 00 00       	mov    edi,0x3
c000ae3e:	b8 03 00 00 00       	mov    eax,0x3
c000ae43:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000ae47:	89 ea                	mov    edx,ebp
c000ae49:	85 ed                	test   ebp,ebp
c000ae4b:	0f 84 97 00 00 00    	je     c000aee8 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000ae51:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ae54:	83 fd 5c             	cmp    ebp,0x5c
c000ae57:	74 05                	je     c000ae5e <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000ae59:	83 fd 2f             	cmp    ebp,0x2f
c000ae5c:	75 12                	jne    c000ae70 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae5e:	89 c5                	mov    ebp,eax
c000ae60:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae65:	74 09                	je     c000ae70 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae67:	40                   	inc    eax
c000ae68:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae6c:	89 cf                	mov    edi,ecx
c000ae6e:	eb d3                	jmp    c000ae43 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000ae70:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000ae75:	0f be ea             	movsx  ebp,dl
c000ae78:	75 5e                	jne    c000aed8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae7a:	83 fd 2e             	cmp    ebp,0x2e
c000ae7d:	75 59                	jne    c000aed8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae7f:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ae83:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000ae88:	74 18                	je     c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000ae8a:	83 fd 2e             	cmp    ebp,0x2e
c000ae8d:	74 53                	je     c000aee2 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000ae8f:	89 f9                	mov    ecx,edi
c000ae91:	41                   	inc    ecx
c000ae92:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000ae96:	83 fa 2f             	cmp    edx,0x2f
c000ae99:	74 f6                	je     c000ae91 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000ae9b:	83 fa 5c             	cmp    edx,0x5c
c000ae9e:	74 f1                	je     c000ae91 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000aea0:	eb ca                	jmp    c000ae6c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aea2:	83 fd 2e             	cmp    ebp,0x2e
c000aea5:	74 3b                	je     c000aee2 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000aea7:	83 f8 03             	cmp    eax,0x3
c000aeaa:	74 c0                	je     c000ae6c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aeac:	41                   	inc    ecx
c000aead:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000aeb1:	83 fa 2f             	cmp    edx,0x2f
c000aeb4:	74 f6                	je     c000aeac <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000aeb6:	83 fa 5c             	cmp    edx,0x5c
c000aeb9:	74 f1                	je     c000aeac <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000aebb:	48                   	dec    eax
c000aebc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aec0:	75 06                	jne    c000aec8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000aec2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aec6:	eb f3                	jmp    c000aebb <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000aec8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aecc:	74 07                	je     c000aed5 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000aece:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aed2:	48                   	dec    eax
c000aed3:	eb f3                	jmp    c000aec8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000aed5:	40                   	inc    eax
c000aed6:	eb 94                	jmp    c000ae6c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aed8:	83 fd 2f             	cmp    ebp,0x2f
c000aedb:	74 8f                	je     c000ae6c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aedd:	83 fd 5c             	cmp    ebp,0x5c
c000aee0:	74 8a                	je     c000ae6c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aee2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aee5:	40                   	inc    eax
c000aee6:	eb 84                	jmp    c000ae6c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aee8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aeec:	83 ec 0c             	sub    esp,0xc
c000aeef:	53                   	push   ebx
c000aef0:	e8 7b 56 ff ff       	call   c0000570 <strlen>
c000aef5:	83 c4 10             	add    esp,0x10
c000aef8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aefd:	75 26                	jne    c000af25 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000aeff:	83 ec 0c             	sub    esp,0xc
c000af02:	53                   	push   ebx
c000af03:	e8 68 56 ff ff       	call   c0000570 <strlen>
c000af08:	83 c4 10             	add    esp,0x10
c000af0b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000af10:	74 26                	je     c000af38 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000af12:	83 ec 0c             	sub    esp,0xc
c000af15:	53                   	push   ebx
c000af16:	e8 55 56 ff ff       	call   c0000570 <strlen>
c000af1b:	83 c4 10             	add    esp,0x10
c000af1e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000af23:	eb c7                	jmp    c000aeec <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000af25:	83 ec 0c             	sub    esp,0xc
c000af28:	53                   	push   ebx
c000af29:	e8 42 56 ff ff       	call   c0000570 <strlen>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af36:	74 c7                	je     c000aeff <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000af38:	81 c4 0c 04 00 00    	add    esp,0x40c
c000af3e:	5b                   	pop    ebx
c000af3f:	5e                   	pop    esi
c000af40:	5f                   	pop    edi
c000af41:	5d                   	pop    ebp
c000af42:	c3                   	ret    
c000af43:	90                   	nop

c000af44 <File::File(char const*, Process*)>:
c000af44:	83 ec 0c             	sub    esp,0xc
c000af47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4b:	83 ec 08             	sub    esp,0x8
c000af4e:	6a 00                	push   0x0
c000af50:	50                   	push   eax
c000af51:	e8 78 e2 ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c000af56:	83 c4 10             	add    esp,0x10
c000af59:	ba 00 03 02 c0       	mov    edx,0xc0020300
c000af5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af62:	89 10                	mov    DWORD PTR [eax],edx
c000af64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af68:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af72:	83 c0 0d             	add    eax,0xd
c000af75:	83 ec 04             	sub    esp,0x4
c000af78:	52                   	push   edx
c000af79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af7d:	50                   	push   eax
c000af7e:	e8 0b fe ff ff       	call   c000ad8e <Fs::standardiseFiles(char*, char const*, char const*)>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af8d:	83 e8 41             	sub    eax,0x41
c000af90:	88 c2                	mov    dl,al
c000af92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af96:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afae:	0f b6 c0             	movzx  eax,al
c000afb1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afb8:	85 c0                	test   eax,eax
c000afba:	74 3e                	je     c000affa <File::File(char const*, Process*)+0xb6>
c000afbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afc6:	0f b6 c0             	movzx  eax,al
c000afc9:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afd0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000afd6:	85 c0                	test   eax,eax
c000afd8:	75 20                	jne    c000affa <File::File(char const*, Process*)+0xb6>
c000afda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afde:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afe4:	0f b6 c0             	movzx  eax,al
c000afe7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afee:	83 ec 0c             	sub    esp,0xc
c000aff1:	50                   	push   eax
c000aff2:	e8 1f 21 00 00       	call   c000d116 <LogicalDisk::mount()>
c000aff7:	83 c4 10             	add    esp,0x10
c000affa:	90                   	nop
c000affb:	83 c4 0c             	add    esp,0xc
c000affe:	c3                   	ret    
c000afff:	90                   	nop

c000b000 <File::open(FileOpenMode)>:
c000b000:	53                   	push   ebx
c000b001:	b8 0b 00 00 00       	mov    eax,0xb
c000b006:	83 ec 08             	sub    esp,0x8
c000b009:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b00d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b014:	83 fa 19             	cmp    edx,0x19
c000b017:	77 40                	ja     c000b059 <File::open(FileOpenMode)+0x59>
c000b019:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b020:	85 d2                	test   edx,edx
c000b022:	74 35                	je     c000b059 <File::open(FileOpenMode)+0x59>
c000b024:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b02a:	85 d2                	test   edx,edx
c000b02c:	74 2b                	je     c000b059 <File::open(FileOpenMode)+0x59>
c000b02e:	b8 06 00 00 00       	mov    eax,0x6
c000b033:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b037:	75 20                	jne    c000b059 <File::open(FileOpenMode)+0x59>
c000b039:	8b 02                	mov    eax,DWORD PTR [edx]
c000b03b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b041:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b045:	51                   	push   ecx
c000b046:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b049:	51                   	push   ecx
c000b04a:	52                   	push   edx
c000b04b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	85 c0                	test   eax,eax
c000b053:	75 04                	jne    c000b059 <File::open(FileOpenMode)+0x59>
c000b055:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b059:	83 c4 08             	add    esp,0x8
c000b05c:	5b                   	pop    ebx
c000b05d:	c3                   	ret    

c000b05e <File::close()>:
c000b05e:	53                   	push   ebx
c000b05f:	b8 0b 00 00 00       	mov    eax,0xb
c000b064:	83 ec 08             	sub    esp,0x8
c000b067:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b06b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b072:	83 f9 19             	cmp    ecx,0x19
c000b075:	77 41                	ja     c000b0b8 <File::close()+0x5a>
c000b077:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b07e:	85 db                	test   ebx,ebx
c000b080:	74 36                	je     c000b0b8 <File::close()+0x5a>
c000b082:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b089:	74 2d                	je     c000b0b8 <File::close()+0x5a>
c000b08b:	b8 05 00 00 00       	mov    eax,0x5
c000b090:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b094:	74 22                	je     c000b0b8 <File::close()+0x5a>
c000b096:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b09a:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b0a1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b0a7:	53                   	push   ebx
c000b0a8:	53                   	push   ebx
c000b0a9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b0ab:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b0b1:	50                   	push   eax
c000b0b2:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b0b5:	83 c4 10             	add    esp,0x10
c000b0b8:	83 c4 08             	add    esp,0x8
c000b0bb:	5b                   	pop    ebx
c000b0bc:	c3                   	ret    
c000b0bd:	90                   	nop

c000b0be <File::seek(unsigned long long)>:
c000b0be:	56                   	push   esi
c000b0bf:	53                   	push   ebx
c000b0c0:	b8 0b 00 00 00       	mov    eax,0xb
c000b0c5:	51                   	push   ecx
c000b0c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b0ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b0ce:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b0d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b0d9:	83 fa 19             	cmp    edx,0x19
c000b0dc:	77 31                	ja     c000b10f <File::seek(unsigned long long)+0x51>
c000b0de:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0e5:	85 d2                	test   edx,edx
c000b0e7:	74 26                	je     c000b10f <File::seek(unsigned long long)+0x51>
c000b0e9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0ef:	85 d2                	test   edx,edx
c000b0f1:	74 1c                	je     c000b10f <File::seek(unsigned long long)+0x51>
c000b0f3:	b8 05 00 00 00       	mov    eax,0x5
c000b0f8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b0fc:	74 11                	je     c000b10f <File::seek(unsigned long long)+0x51>
c000b0fe:	8b 02                	mov    eax,DWORD PTR [edx]
c000b100:	53                   	push   ebx
c000b101:	51                   	push   ecx
c000b102:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b108:	52                   	push   edx
c000b109:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b10c:	83 c4 10             	add    esp,0x10
c000b10f:	5a                   	pop    edx
c000b110:	5b                   	pop    ebx
c000b111:	5e                   	pop    esi
c000b112:	c3                   	ret    
c000b113:	90                   	nop

c000b114 <File::tell(unsigned long long*)>:
c000b114:	83 ec 0c             	sub    esp,0xc
c000b117:	b8 0b 00 00 00       	mov    eax,0xb
c000b11c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b120:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b127:	83 fa 19             	cmp    edx,0x19
c000b12a:	77 34                	ja     c000b160 <File::tell(unsigned long long*)+0x4c>
c000b12c:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b133:	85 d2                	test   edx,edx
c000b135:	74 29                	je     c000b160 <File::tell(unsigned long long*)+0x4c>
c000b137:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b13d:	85 d2                	test   edx,edx
c000b13f:	74 1f                	je     c000b160 <File::tell(unsigned long long*)+0x4c>
c000b141:	b8 05 00 00 00       	mov    eax,0x5
c000b146:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b14a:	74 14                	je     c000b160 <File::tell(unsigned long long*)+0x4c>
c000b14c:	50                   	push   eax
c000b14d:	8b 02                	mov    eax,DWORD PTR [edx]
c000b14f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b153:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b159:	52                   	push   edx
c000b15a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	83 c4 0c             	add    esp,0xc
c000b163:	c3                   	ret    

c000b164 <File::rewind()>:
c000b164:	83 ec 10             	sub    esp,0x10
c000b167:	6a 00                	push   0x0
c000b169:	6a 00                	push   0x0
c000b16b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b16f:	e8 4a ff ff ff       	call   c000b0be <File::seek(unsigned long long)>
c000b174:	83 c4 1c             	add    esp,0x1c
c000b177:	c3                   	ret    

c000b178 <File::unlink()>:
c000b178:	83 ec 0c             	sub    esp,0xc
c000b17b:	b8 0b 00 00 00       	mov    eax,0xb
c000b180:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b184:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b18b:	83 f9 19             	cmp    ecx,0x19
c000b18e:	77 2f                	ja     c000b1bf <File::unlink()+0x47>
c000b190:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b197:	85 c9                	test   ecx,ecx
c000b199:	74 24                	je     c000b1bf <File::unlink()+0x47>
c000b19b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1a1:	85 c9                	test   ecx,ecx
c000b1a3:	74 1a                	je     c000b1bf <File::unlink()+0x47>
c000b1a5:	b8 06 00 00 00       	mov    eax,0x6
c000b1aa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ae:	75 0f                	jne    c000b1bf <File::unlink()+0x47>
c000b1b0:	83 c2 0d             	add    edx,0xd
c000b1b3:	50                   	push   eax
c000b1b4:	50                   	push   eax
c000b1b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1b7:	52                   	push   edx
c000b1b8:	51                   	push   ecx
c000b1b9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	83 c4 0c             	add    esp,0xc
c000b1c2:	c3                   	ret    
c000b1c3:	90                   	nop

c000b1c4 <File::rename(char const*)>:
c000b1c4:	83 ec 0c             	sub    esp,0xc
c000b1c7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1d7:	83 f9 19             	cmp    ecx,0x19
c000b1da:	77 32                	ja     c000b20e <File::rename(char const*)+0x4a>
c000b1dc:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1e3:	85 c9                	test   ecx,ecx
c000b1e5:	74 27                	je     c000b20e <File::rename(char const*)+0x4a>
c000b1e7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1ed:	85 c9                	test   ecx,ecx
c000b1ef:	74 1d                	je     c000b20e <File::rename(char const*)+0x4a>
c000b1f1:	b8 06 00 00 00       	mov    eax,0x6
c000b1f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1fa:	75 12                	jne    c000b20e <File::rename(char const*)+0x4a>
c000b1fc:	83 c2 0d             	add    edx,0xd
c000b1ff:	50                   	push   eax
c000b200:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b202:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b206:	52                   	push   edx
c000b207:	51                   	push   ecx
c000b208:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b20b:	83 c4 10             	add    esp,0x10
c000b20e:	83 c4 0c             	add    esp,0xc
c000b211:	c3                   	ret    

c000b212 <File::chfatattr(unsigned char, unsigned char)>:
c000b212:	57                   	push   edi
c000b213:	b8 0b 00 00 00       	mov    eax,0xb
c000b218:	56                   	push   esi
c000b219:	53                   	push   ebx
c000b21a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b21e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b222:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b229:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b22d:	83 f9 19             	cmp    ecx,0x19
c000b230:	77 37                	ja     c000b269 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b232:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b239:	85 c9                	test   ecx,ecx
c000b23b:	74 2c                	je     c000b269 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b23d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b243:	85 c9                	test   ecx,ecx
c000b245:	74 22                	je     c000b269 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b247:	b8 06 00 00 00       	mov    eax,0x6
c000b24c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b250:	75 17                	jne    c000b269 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b252:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b254:	89 f0                	mov    eax,esi
c000b256:	83 c2 0d             	add    edx,0xd
c000b259:	0f b6 f0             	movzx  esi,al
c000b25c:	0f b6 db             	movzx  ebx,bl
c000b25f:	56                   	push   esi
c000b260:	53                   	push   ebx
c000b261:	52                   	push   edx
c000b262:	51                   	push   ecx
c000b263:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b266:	83 c4 10             	add    esp,0x10
c000b269:	5b                   	pop    ebx
c000b26a:	5e                   	pop    esi
c000b26b:	5f                   	pop    edi
c000b26c:	c3                   	ret    
c000b26d:	90                   	nop

c000b26e <File::exists()>:
c000b26e:	83 ec 0c             	sub    esp,0xc
c000b271:	31 c0                	xor    eax,eax
c000b273:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b277:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b27e:	83 f9 19             	cmp    ecx,0x19
c000b281:	77 24                	ja     c000b2a7 <File::exists()+0x39>
c000b283:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b28a:	85 c9                	test   ecx,ecx
c000b28c:	74 19                	je     c000b2a7 <File::exists()+0x39>
c000b28e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b294:	85 c9                	test   ecx,ecx
c000b296:	74 0f                	je     c000b2a7 <File::exists()+0x39>
c000b298:	83 c2 0d             	add    edx,0xd
c000b29b:	50                   	push   eax
c000b29c:	50                   	push   eax
c000b29d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b29f:	52                   	push   edx
c000b2a0:	51                   	push   ecx
c000b2a1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2a4:	83 c4 10             	add    esp,0x10
c000b2a7:	83 c4 0c             	add    esp,0xc
c000b2aa:	c3                   	ret    
c000b2ab:	90                   	nop

c000b2ac <File::stat(unsigned long long*, bool*)>:
c000b2ac:	56                   	push   esi
c000b2ad:	53                   	push   ebx
c000b2ae:	50                   	push   eax
c000b2af:	b8 0b 00 00 00       	mov    eax,0xb
c000b2b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b2bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2c7:	83 f9 19             	cmp    ecx,0x19
c000b2ca:	77 3d                	ja     c000b309 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2cc:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2d3:	85 c9                	test   ecx,ecx
c000b2d5:	74 32                	je     c000b309 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2dd:	85 c9                	test   ecx,ecx
c000b2df:	74 28                	je     c000b309 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2e7:	74 13                	je     c000b2fc <File::stat(unsigned long long*, bool*)+0x50>
c000b2e9:	83 ec 04             	sub    esp,0x4
c000b2ec:	56                   	push   esi
c000b2ed:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2f3:	51                   	push   ecx
c000b2f4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b2f7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b2fa:	eb 0a                	jmp    c000b306 <File::stat(unsigned long long*, bool*)+0x5a>
c000b2fc:	53                   	push   ebx
c000b2fd:	83 c2 0d             	add    edx,0xd
c000b300:	56                   	push   esi
c000b301:	52                   	push   edx
c000b302:	51                   	push   ecx
c000b303:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	5a                   	pop    edx
c000b30a:	5b                   	pop    ebx
c000b30b:	5e                   	pop    esi
c000b30c:	c3                   	ret    

c000b30d <Fs::setcwd(Process*, char*)>:
c000b30d:	55                   	push   ebp
c000b30e:	57                   	push   edi
c000b30f:	56                   	push   esi
c000b310:	53                   	push   ebx
c000b311:	81 ec 20 02 00 00    	sub    esp,0x220
c000b317:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b31e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b324:	57                   	push   edi
c000b325:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b32c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b330:	56                   	push   esi
c000b331:	e8 58 fa ff ff       	call   c000ad8e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b336:	89 34 24             	mov    DWORD PTR [esp],esi
c000b339:	e8 32 52 ff ff       	call   c0000570 <strlen>
c000b33e:	83 c4 10             	add    esp,0x10
c000b341:	83 f8 02             	cmp    eax,0x2
c000b344:	77 15                	ja     c000b35b <Fs::setcwd(Process*, char*)+0x4e>
c000b346:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b34b:	83 eb 41             	sub    ebx,0x41
c000b34e:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b355:	85 c0                	test   eax,eax
c000b357:	75 1c                	jne    c000b375 <Fs::setcwd(Process*, char*)+0x68>
c000b359:	eb 2f                	jmp    c000b38a <Fs::setcwd(Process*, char*)+0x7d>
c000b35b:	83 ec 0c             	sub    esp,0xc
c000b35e:	56                   	push   esi
c000b35f:	e8 0c 52 ff ff       	call   c0000570 <strlen>
c000b364:	83 c4 10             	add    esp,0x10
c000b367:	83 f8 03             	cmp    eax,0x3
c000b36a:	75 57                	jne    c000b3c3 <Fs::setcwd(Process*, char*)+0xb6>
c000b36c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b371:	75 50                	jne    c000b3c3 <Fs::setcwd(Process*, char*)+0xb6>
c000b373:	eb d1                	jmp    c000b346 <Fs::setcwd(Process*, char*)+0x39>
c000b375:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b37c:	75 0c                	jne    c000b38a <Fs::setcwd(Process*, char*)+0x7d>
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	50                   	push   eax
c000b382:	e8 8f 1d 00 00       	call   c000d116 <LogicalDisk::mount()>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	b8 03 00 00 00       	mov    eax,0x3
c000b38f:	83 fb 19             	cmp    ebx,0x19
c000b392:	0f 87 c6 00 00 00    	ja     c000b45e <Fs::setcwd(Process*, char*)+0x151>
c000b398:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b39f:	b8 05 00 00 00       	mov    eax,0x5
c000b3a4:	85 d2                	test   edx,edx
c000b3a6:	0f 84 b2 00 00 00    	je     c000b45e <Fs::setcwd(Process*, char*)+0x151>
c000b3ac:	b8 06 00 00 00       	mov    eax,0x6
c000b3b1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b3b8:	0f 85 92 00 00 00    	jne    c000b450 <Fs::setcwd(Process*, char*)+0x143>
c000b3be:	e9 9b 00 00 00       	jmp    c000b45e <Fs::setcwd(Process*, char*)+0x151>
c000b3c3:	83 ec 0c             	sub    esp,0xc
c000b3c6:	68 14 01 00 00       	push   0x114
c000b3cb:	e8 de c6 ff ff       	call   c0007aae <malloc>
c000b3d0:	83 c4 0c             	add    esp,0xc
c000b3d3:	89 c3                	mov    ebx,eax
c000b3d5:	55                   	push   ebp
c000b3d6:	56                   	push   esi
c000b3d7:	50                   	push   eax
c000b3d8:	e8 67 fb ff ff       	call   c000af44 <File::File(char const*, Process*)>
c000b3dd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b3e2:	83 c4 0c             	add    esp,0xc
c000b3e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b3e9:	50                   	push   eax
c000b3ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b3ee:	50                   	push   eax
c000b3ef:	53                   	push   ebx
c000b3f0:	e8 b7 fe ff ff       	call   c000b2ac <File::stat(unsigned long long*, bool*)>
c000b3f5:	83 c4 10             	add    esp,0x10
c000b3f8:	83 f8 02             	cmp    eax,0x2
c000b3fb:	74 27                	je     c000b424 <Fs::setcwd(Process*, char*)+0x117>
c000b3fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b402:	75 1c                	jne    c000b420 <Fs::setcwd(Process*, char*)+0x113>
c000b404:	b8 02 00 00 00       	mov    eax,0x2
c000b409:	85 db                	test   ebx,ebx
c000b40b:	74 51                	je     c000b45e <Fs::setcwd(Process*, char*)+0x151>
c000b40d:	83 ec 0c             	sub    esp,0xc
c000b410:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b412:	53                   	push   ebx
c000b413:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b416:	83 c4 10             	add    esp,0x10
c000b419:	b8 02 00 00 00       	mov    eax,0x2
c000b41e:	eb 3e                	jmp    c000b45e <Fs::setcwd(Process*, char*)+0x151>
c000b420:	85 c0                	test   eax,eax
c000b422:	74 1c                	je     c000b440 <Fs::setcwd(Process*, char*)+0x133>
c000b424:	b8 01 00 00 00       	mov    eax,0x1
c000b429:	85 db                	test   ebx,ebx
c000b42b:	74 31                	je     c000b45e <Fs::setcwd(Process*, char*)+0x151>
c000b42d:	83 ec 0c             	sub    esp,0xc
c000b430:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b432:	53                   	push   ebx
c000b433:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b436:	83 c4 10             	add    esp,0x10
c000b439:	b8 01 00 00 00       	mov    eax,0x1
c000b43e:	eb 1e                	jmp    c000b45e <Fs::setcwd(Process*, char*)+0x151>
c000b440:	85 db                	test   ebx,ebx
c000b442:	74 0c                	je     c000b450 <Fs::setcwd(Process*, char*)+0x143>
c000b444:	83 ec 0c             	sub    esp,0xc
c000b447:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b449:	53                   	push   ebx
c000b44a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b44d:	83 c4 10             	add    esp,0x10
c000b450:	50                   	push   eax
c000b451:	50                   	push   eax
c000b452:	56                   	push   esi
c000b453:	57                   	push   edi
c000b454:	e8 e7 51 ff ff       	call   c0000640 <strcpy>
c000b459:	83 c4 10             	add    esp,0x10
c000b45c:	31 c0                	xor    eax,eax
c000b45e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b464:	5b                   	pop    ebx
c000b465:	5e                   	pop    esi
c000b466:	5f                   	pop    edi
c000b467:	5d                   	pop    ebp
c000b468:	c3                   	ret    
c000b469:	90                   	nop

c000b46a <Directory::Directory(char const*, Process*)>:
c000b46a:	83 ec 0c             	sub    esp,0xc
c000b46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b471:	83 ec 08             	sub    esp,0x8
c000b474:	6a 00                	push   0x0
c000b476:	50                   	push   eax
c000b477:	e8 52 dd ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c000b47c:	83 c4 10             	add    esp,0x10
c000b47f:	ba 1c 03 02 c0       	mov    edx,0xc002031c
c000b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b488:	89 10                	mov    DWORD PTR [eax],edx
c000b48a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b48e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b498:	83 c0 0d             	add    eax,0xd
c000b49b:	83 ec 04             	sub    esp,0x4
c000b49e:	52                   	push   edx
c000b49f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a3:	50                   	push   eax
c000b4a4:	e8 e5 f8 ff ff       	call   c000ad8e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b4a9:	83 c4 10             	add    esp,0x10
c000b4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b4b3:	83 e8 41             	sub    eax,0x41
c000b4b6:	88 c2                	mov    dl,al
c000b4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4bc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ce:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4d4:	0f b6 c0             	movzx  eax,al
c000b4d7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4de:	85 c0                	test   eax,eax
c000b4e0:	74 3e                	je     c000b520 <Directory::Directory(char const*, Process*)+0xb6>
c000b4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4ec:	0f b6 c0             	movzx  eax,al
c000b4ef:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4f6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b4fc:	85 c0                	test   eax,eax
c000b4fe:	75 20                	jne    c000b520 <Directory::Directory(char const*, Process*)+0xb6>
c000b500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b504:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b50a:	0f b6 c0             	movzx  eax,al
c000b50d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b514:	83 ec 0c             	sub    esp,0xc
c000b517:	50                   	push   eax
c000b518:	e8 f9 1b 00 00       	call   c000d116 <LogicalDisk::mount()>
c000b51d:	83 c4 10             	add    esp,0x10
c000b520:	90                   	nop
c000b521:	83 c4 0c             	add    esp,0xc
c000b524:	c3                   	ret    
c000b525:	90                   	nop

c000b526 <Directory::open()>:
c000b526:	53                   	push   ebx
c000b527:	b8 0b 00 00 00       	mov    eax,0xb
c000b52c:	83 ec 08             	sub    esp,0x8
c000b52f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b533:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b53a:	83 fa 19             	cmp    edx,0x19
c000b53d:	77 3d                	ja     c000b57c <Directory::open()+0x56>
c000b53f:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b546:	85 d2                	test   edx,edx
c000b548:	74 32                	je     c000b57c <Directory::open()+0x56>
c000b54a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b550:	85 d2                	test   edx,edx
c000b552:	74 28                	je     c000b57c <Directory::open()+0x56>
c000b554:	b8 06 00 00 00       	mov    eax,0x6
c000b559:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b55d:	75 1d                	jne    c000b57c <Directory::open()+0x56>
c000b55f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b565:	50                   	push   eax
c000b566:	8b 02                	mov    eax,DWORD PTR [edx]
c000b568:	51                   	push   ecx
c000b569:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b56c:	51                   	push   ecx
c000b56d:	52                   	push   edx
c000b56e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b571:	83 c4 10             	add    esp,0x10
c000b574:	85 c0                	test   eax,eax
c000b576:	75 04                	jne    c000b57c <Directory::open()+0x56>
c000b578:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b57c:	83 c4 08             	add    esp,0x8
c000b57f:	5b                   	pop    ebx
c000b580:	c3                   	ret    
c000b581:	90                   	nop

c000b582 <Directory::close()>:
c000b582:	53                   	push   ebx
c000b583:	b8 0b 00 00 00       	mov    eax,0xb
c000b588:	83 ec 08             	sub    esp,0x8
c000b58b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b58f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b596:	83 f9 19             	cmp    ecx,0x19
c000b599:	77 41                	ja     c000b5dc <Directory::close()+0x5a>
c000b59b:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5a2:	85 db                	test   ebx,ebx
c000b5a4:	74 36                	je     c000b5dc <Directory::close()+0x5a>
c000b5a6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b5ad:	74 2d                	je     c000b5dc <Directory::close()+0x5a>
c000b5af:	b8 05 00 00 00       	mov    eax,0x5
c000b5b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5b8:	74 22                	je     c000b5dc <Directory::close()+0x5a>
c000b5ba:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b5be:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5c5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5cb:	53                   	push   ebx
c000b5cc:	53                   	push   ebx
c000b5cd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5cf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b5d5:	50                   	push   eax
c000b5d6:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	83 c4 08             	add    esp,0x8
c000b5df:	5b                   	pop    ebx
c000b5e0:	c3                   	ret    
c000b5e1:	90                   	nop

c000b5e2 <Directory::unlink()>:
c000b5e2:	83 ec 0c             	sub    esp,0xc
c000b5e5:	b8 0b 00 00 00       	mov    eax,0xb
c000b5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5f5:	83 f9 19             	cmp    ecx,0x19
c000b5f8:	77 2f                	ja     c000b629 <Directory::unlink()+0x47>
c000b5fa:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b601:	85 c9                	test   ecx,ecx
c000b603:	74 24                	je     c000b629 <Directory::unlink()+0x47>
c000b605:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b60b:	85 c9                	test   ecx,ecx
c000b60d:	74 1a                	je     c000b629 <Directory::unlink()+0x47>
c000b60f:	b8 06 00 00 00       	mov    eax,0x6
c000b614:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b618:	75 0f                	jne    c000b629 <Directory::unlink()+0x47>
c000b61a:	83 c2 0d             	add    edx,0xd
c000b61d:	50                   	push   eax
c000b61e:	50                   	push   eax
c000b61f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b621:	52                   	push   edx
c000b622:	51                   	push   ecx
c000b623:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b626:	83 c4 10             	add    esp,0x10
c000b629:	83 c4 0c             	add    esp,0xc
c000b62c:	c3                   	ret    
c000b62d:	90                   	nop

c000b62e <Directory::rename(char const*)>:
c000b62e:	83 ec 0c             	sub    esp,0xc
c000b631:	b8 0b 00 00 00       	mov    eax,0xb
c000b636:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b63a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b641:	83 f9 19             	cmp    ecx,0x19
c000b644:	77 32                	ja     c000b678 <Directory::rename(char const*)+0x4a>
c000b646:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b64d:	85 c9                	test   ecx,ecx
c000b64f:	74 27                	je     c000b678 <Directory::rename(char const*)+0x4a>
c000b651:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b657:	85 c9                	test   ecx,ecx
c000b659:	74 1d                	je     c000b678 <Directory::rename(char const*)+0x4a>
c000b65b:	b8 06 00 00 00       	mov    eax,0x6
c000b660:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b664:	75 12                	jne    c000b678 <Directory::rename(char const*)+0x4a>
c000b666:	83 c2 0d             	add    edx,0xd
c000b669:	50                   	push   eax
c000b66a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b66c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b670:	52                   	push   edx
c000b671:	51                   	push   ecx
c000b672:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b675:	83 c4 10             	add    esp,0x10
c000b678:	83 c4 0c             	add    esp,0xc
c000b67b:	c3                   	ret    

c000b67c <Directory::exists()>:
c000b67c:	83 ec 0c             	sub    esp,0xc
c000b67f:	31 c0                	xor    eax,eax
c000b681:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b685:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b68c:	83 f9 19             	cmp    ecx,0x19
c000b68f:	77 24                	ja     c000b6b5 <Directory::exists()+0x39>
c000b691:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b698:	85 c9                	test   ecx,ecx
c000b69a:	74 19                	je     c000b6b5 <Directory::exists()+0x39>
c000b69c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6a2:	85 c9                	test   ecx,ecx
c000b6a4:	74 0f                	je     c000b6b5 <Directory::exists()+0x39>
c000b6a6:	83 c2 0d             	add    edx,0xd
c000b6a9:	50                   	push   eax
c000b6aa:	50                   	push   eax
c000b6ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6ad:	52                   	push   edx
c000b6ae:	51                   	push   ecx
c000b6af:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b6b2:	83 c4 10             	add    esp,0x10
c000b6b5:	83 c4 0c             	add    esp,0xc
c000b6b8:	c3                   	ret    
c000b6b9:	90                   	nop

c000b6ba <Directory::read(dirent*)>:
c000b6ba:	83 ec 1c             	sub    esp,0x1c
c000b6bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b6c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b6c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6cd:	83 f9 19             	cmp    ecx,0x19
c000b6d0:	77 30                	ja     c000b702 <Directory::read(dirent*)+0x48>
c000b6d2:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6d9:	85 c9                	test   ecx,ecx
c000b6db:	74 25                	je     c000b702 <Directory::read(dirent*)+0x48>
c000b6dd:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b6e4:	74 1c                	je     c000b702 <Directory::read(dirent*)+0x48>
c000b6e6:	83 ec 0c             	sub    esp,0xc
c000b6e9:	8b 02                	mov    eax,DWORD PTR [edx]
c000b6eb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b6ef:	51                   	push   ecx
c000b6f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6f4:	6a 00                	push   0x0
c000b6f6:	68 10 01 00 00       	push   0x110
c000b6fb:	52                   	push   edx
c000b6fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6ff:	83 c4 20             	add    esp,0x20
c000b702:	83 c4 1c             	add    esp,0x1c
c000b705:	c3                   	ret    

c000b706 <Directory::create()>:
c000b706:	83 ec 0c             	sub    esp,0xc
c000b709:	b8 0b 00 00 00       	mov    eax,0xb
c000b70e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b712:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b719:	83 f9 19             	cmp    ecx,0x19
c000b71c:	77 2f                	ja     c000b74d <Directory::create()+0x47>
c000b71e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b725:	85 c9                	test   ecx,ecx
c000b727:	74 24                	je     c000b74d <Directory::create()+0x47>
c000b729:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b72f:	85 c9                	test   ecx,ecx
c000b731:	74 1a                	je     c000b74d <Directory::create()+0x47>
c000b733:	b8 06 00 00 00       	mov    eax,0x6
c000b738:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b73c:	75 0f                	jne    c000b74d <Directory::create()+0x47>
c000b73e:	83 c2 0d             	add    edx,0xd
c000b741:	50                   	push   eax
c000b742:	50                   	push   eax
c000b743:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b745:	52                   	push   edx
c000b746:	51                   	push   ecx
c000b747:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b74a:	83 c4 10             	add    esp,0x10
c000b74d:	83 c4 0c             	add    esp,0xc
c000b750:	c3                   	ret    
c000b751:	90                   	nop

c000b752 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b752:	b8 0a 00 00 00       	mov    eax,0xa
c000b757:	c3                   	ret    

c000b758 <Bus::Bus(char const*)>:
c000b758:	83 ec 0c             	sub    esp,0xc
c000b75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75f:	83 ec 08             	sub    esp,0x8
c000b762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b766:	50                   	push   eax
c000b767:	e8 22 08 00 00       	call   c000bf8e <Device::Device(char const*)>
c000b76c:	83 c4 10             	add    esp,0x10
c000b76f:	ba 38 03 02 c0       	mov    edx,0xc0020338
c000b774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b778:	89 10                	mov    DWORD PTR [eax],edx
c000b77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b77e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b788:	90                   	nop
c000b789:	83 c4 0c             	add    esp,0xc
c000b78c:	c3                   	ret    
c000b78d:	90                   	nop
c000b78e:	66 90                	xchg   ax,ax

c000b790 <Bus::~Bus()>:
c000b790:	83 ec 0c             	sub    esp,0xc
c000b793:	ba 38 03 02 c0       	mov    edx,0xc0020338
c000b798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b79c:	89 10                	mov    DWORD PTR [eax],edx
c000b79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a2:	83 ec 0c             	sub    esp,0xc
c000b7a5:	50                   	push   eax
c000b7a6:	e8 4d 05 00 00       	call   c000bcf8 <Device::~Device()>
c000b7ab:	83 c4 10             	add    esp,0x10
c000b7ae:	90                   	nop
c000b7af:	83 c4 0c             	add    esp,0xc
c000b7b2:	c3                   	ret    
c000b7b3:	90                   	nop

c000b7b4 <Bus::~Bus()>:
c000b7b4:	83 ec 0c             	sub    esp,0xc
c000b7b7:	83 ec 0c             	sub    esp,0xc
c000b7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7be:	e8 cd ff ff ff       	call   c000b790 <Bus::~Bus()>
c000b7c3:	83 c4 10             	add    esp,0x10
c000b7c6:	83 ec 08             	sub    esp,0x8
c000b7c9:	68 58 01 00 00       	push   0x158
c000b7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d2:	e8 be f0 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000b7d7:	83 c4 10             	add    esp,0x10
c000b7da:	83 c4 0c             	add    esp,0xc
c000b7dd:	c3                   	ret    

c000b7de <beepThread(void*)>:
c000b7de:	83 ec 0c             	sub    esp,0xc
c000b7e1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b7e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7ea:	48                   	dec    eax
c000b7eb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b7f0:	75 01                	jne    c000b7f3 <beepThread(void*)+0x15>
c000b7f2:	fb                   	sti    
c000b7f3:	83 ec 0c             	sub    esp,0xc
c000b7f6:	6b c2 0a             	imul   eax,edx,0xa
c000b7f9:	50                   	push   eax
c000b7fa:	e8 d5 9b 00 00       	call   c00153d4 <milliTenthSleep(unsigned int)>
c000b7ff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b806:	e8 b4 ba 00 00       	call   c00172bf <HalMakeBeep(int)>
c000b80b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b813:	83 c4 1c             	add    esp,0x1c
c000b816:	e9 9d 9a 00 00       	jmp    c00152b8 <blockTask(TaskState)>

c000b81b <Krnl::beep(int, int, bool)>:
c000b81b:	56                   	push   esi
c000b81c:	53                   	push   ebx
c000b81d:	83 ec 10             	sub    esp,0x10
c000b820:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b824:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b82c:	e8 8e ba 00 00       	call   c00172bf <HalMakeBeep(int)>
c000b831:	83 c4 10             	add    esp,0x10
c000b834:	89 f0                	mov    eax,esi
c000b836:	84 c0                	test   al,al
c000b838:	74 1e                	je     c000b858 <Krnl::beep(int, int, bool)+0x3d>
c000b83a:	83 ec 0c             	sub    esp,0xc
c000b83d:	6b db 0a             	imul   ebx,ebx,0xa
c000b840:	53                   	push   ebx
c000b841:	e8 8e 9b 00 00       	call   c00153d4 <milliTenthSleep(unsigned int)>
c000b846:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b84e:	83 c4 14             	add    esp,0x14
c000b851:	5b                   	pop    ebx
c000b852:	5e                   	pop    esi
c000b853:	e9 67 ba 00 00       	jmp    c00172bf <HalMakeBeep(int)>
c000b858:	68 e6 00 00 00       	push   0xe6
c000b85d:	53                   	push   ebx
c000b85e:	68 de b7 00 c0       	push   0xc000b7de
c000b863:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b869:	e8 e6 95 00 00       	call   c0014e54 <Process::createThread(void (*)(void*), void*, int)>
c000b86e:	83 c4 14             	add    esp,0x14
c000b871:	5b                   	pop    ebx
c000b872:	5e                   	pop    esi
c000b873:	c3                   	ret    

c000b874 <User::loadClockSettings(int)>:
c000b874:	53                   	push   ebx
c000b875:	83 ec 14             	sub    esp,0x14
c000b878:	68 14 01 00 00       	push   0x114
c000b87d:	e8 2c c2 ff ff       	call   c0007aae <malloc>
c000b882:	83 c4 0c             	add    esp,0xc
c000b885:	89 c3                	mov    ebx,eax
c000b887:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b88d:	68 5c 03 02 c0       	push   0xc002035c
c000b892:	50                   	push   eax
c000b893:	e8 ac f6 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c000b898:	58                   	pop    eax
c000b899:	5a                   	pop    edx
c000b89a:	6a 01                	push   0x1
c000b89c:	53                   	push   ebx
c000b89d:	e8 5e f7 ff ff       	call   c000b000 <File::open(FileOpenMode)>
c000b8a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8a5:	e8 b4 f7 ff ff       	call   c000b05e <File::close()>
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	85 db                	test   ebx,ebx
c000b8af:	74 0f                	je     c000b8c0 <User::loadClockSettings(int)+0x4c>
c000b8b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b8b3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b8b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b8ba:	83 c4 08             	add    esp,0x8
c000b8bd:	5b                   	pop    ebx
c000b8be:	ff e0                	jmp    eax
c000b8c0:	83 c4 08             	add    esp,0x8
c000b8c3:	5b                   	pop    ebx
c000b8c4:	c3                   	ret    
c000b8c5:	90                   	nop

c000b8c6 <Clock::Clock(char const*)>:
c000b8c6:	83 ec 0c             	sub    esp,0xc
c000b8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8cd:	83 ec 08             	sub    esp,0x8
c000b8d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d4:	50                   	push   eax
c000b8d5:	e8 b4 06 00 00       	call   c000bf8e <Device::Device(char const*)>
c000b8da:	83 c4 10             	add    esp,0x10
c000b8dd:	ba 84 03 02 c0       	mov    edx,0xc0020384
c000b8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8e6:	89 10                	mov    DWORD PTR [eax],edx
c000b8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ec:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b8f6:	90                   	nop
c000b8f7:	83 c4 0c             	add    esp,0xc
c000b8fa:	c3                   	ret    
c000b8fb:	90                   	nop

c000b8fc <Clock::~Clock()>:
c000b8fc:	83 ec 0c             	sub    esp,0xc
c000b8ff:	ba 84 03 02 c0       	mov    edx,0xc0020384
c000b904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b908:	89 10                	mov    DWORD PTR [eax],edx
c000b90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b90e:	83 ec 0c             	sub    esp,0xc
c000b911:	50                   	push   eax
c000b912:	e8 e1 03 00 00       	call   c000bcf8 <Device::~Device()>
c000b917:	83 c4 10             	add    esp,0x10
c000b91a:	90                   	nop
c000b91b:	83 c4 0c             	add    esp,0xc
c000b91e:	c3                   	ret    
c000b91f:	90                   	nop

c000b920 <Clock::~Clock()>:
c000b920:	83 ec 0c             	sub    esp,0xc
c000b923:	83 ec 0c             	sub    esp,0xc
c000b926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b92a:	e8 cd ff ff ff       	call   c000b8fc <Clock::~Clock()>
c000b92f:	83 c4 10             	add    esp,0x10
c000b932:	83 ec 08             	sub    esp,0x8
c000b935:	68 58 01 00 00       	push   0x158
c000b93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b93e:	e8 52 ef ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000b943:	83 c4 10             	add    esp,0x10
c000b946:	83 c4 0c             	add    esp,0xc
c000b949:	c3                   	ret    

c000b94a <Clock::timeInSecondsLocal()>:
c000b94a:	53                   	push   ebx
c000b94b:	83 ec 14             	sub    esp,0x14
c000b94e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b952:	8b 10                	mov    edx,DWORD PTR [eax]
c000b954:	50                   	push   eax
c000b955:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b958:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b95f:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b965:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b96b:	89 cb                	mov    ebx,ecx
c000b96d:	c1 fb 1f             	sar    ebx,0x1f
c000b970:	01 c8                	add    eax,ecx
c000b972:	11 da                	adc    edx,ebx
c000b974:	83 c4 10             	add    esp,0x10
c000b977:	31 c9                	xor    ecx,ecx
c000b979:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b980:	74 05                	je     c000b987 <Clock::timeInSecondsLocal()+0x3d>
c000b982:	b9 08 07 00 00       	mov    ecx,0x708
c000b987:	31 db                	xor    ebx,ebx
c000b989:	01 c8                	add    eax,ecx
c000b98b:	11 da                	adc    edx,ebx
c000b98d:	83 c4 08             	add    esp,0x8
c000b990:	5b                   	pop    ebx
c000b991:	c3                   	ret    

c000b992 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b992:	57                   	push   edi
c000b993:	56                   	push   esi
c000b994:	53                   	push   ebx
c000b995:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b999:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b99d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b99f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b9a3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b9a6:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b9ad:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b9b3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b9b9:	99                   	cdq    
c000b9ba:	29 c6                	sub    esi,eax
c000b9bc:	19 d7                	sbb    edi,edx
c000b9be:	89 f0                	mov    eax,esi
c000b9c0:	89 fa                	mov    edx,edi
c000b9c2:	31 f6                	xor    esi,esi
c000b9c4:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9cb:	74 05                	je     c000b9d2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b9cd:	be 08 07 00 00       	mov    esi,0x708
c000b9d2:	31 ff                	xor    edi,edi
c000b9d4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b9d8:	29 f0                	sub    eax,esi
c000b9da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b9de:	19 fa                	sbb    edx,edi
c000b9e0:	89 d8                	mov    eax,ebx
c000b9e2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9e6:	5b                   	pop    ebx
c000b9e7:	5e                   	pop    esi
c000b9e8:	5f                   	pop    edi
c000b9e9:	ff e0                	jmp    eax

c000b9eb <datetimeToSeconds(datetime_t)>:
c000b9eb:	55                   	push   ebp
c000b9ec:	57                   	push   edi
c000b9ed:	56                   	push   esi
c000b9ee:	53                   	push   ebx
c000b9ef:	83 ec 0c             	sub    esp,0xc
c000b9f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b9f6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000b9fa:	89 d6                	mov    esi,edx
c000b9fc:	0f b6 c7             	movzx  eax,bh
c000b9ff:	c1 ee 10             	shr    esi,0x10
c000ba02:	6b e8 3c             	imul   ebp,eax,0x3c
c000ba05:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000ba0b:	0f b6 ce             	movzx  ecx,dh
c000ba0e:	89 df                	mov    edi,ebx
c000ba10:	49                   	dec    ecx
c000ba11:	c1 ef 10             	shr    edi,0x10
c000ba14:	0f b6 db             	movzx  ebx,bl
c000ba17:	89 f8                	mov    eax,edi
c000ba19:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000ba1f:	0f b6 f8             	movzx  edi,al
c000ba22:	0f b6 d2             	movzx  edx,dl
c000ba25:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000ba29:	01 d8                	add    eax,ebx
c000ba2b:	0f b7 de             	movzx  ebx,si
c000ba2e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba31:	c1 f8 1f             	sar    eax,0x1f
c000ba34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba38:	0f b6 c1             	movzx  eax,cl
c000ba3b:	8b 0c 85 c0 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfc40]
c000ba42:	83 f8 01             	cmp    eax,0x1
c000ba45:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ba49:	76 27                	jbe    c000ba72 <datetimeToSeconds(datetime_t)+0x87>
c000ba4b:	83 e6 03             	and    esi,0x3
c000ba4e:	75 22                	jne    c000ba72 <datetimeToSeconds(datetime_t)+0x87>
c000ba50:	31 d2                	xor    edx,edx
c000ba52:	be 64 00 00 00       	mov    esi,0x64
c000ba57:	89 d8                	mov    eax,ebx
c000ba59:	f7 f6                	div    esi
c000ba5b:	85 d2                	test   edx,edx
c000ba5d:	75 12                	jne    c000ba71 <datetimeToSeconds(datetime_t)+0x86>
c000ba5f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba65:	be 90 01 00 00       	mov    esi,0x190
c000ba6a:	99                   	cdq    
c000ba6b:	f7 fe                	idiv   esi
c000ba6d:	85 d2                	test   edx,edx
c000ba6f:	75 01                	jne    c000ba72 <datetimeToSeconds(datetime_t)+0x87>
c000ba71:	41                   	inc    ecx
c000ba72:	83 fb 46             	cmp    ebx,0x46
c000ba75:	76 48                	jbe    c000babf <datetimeToSeconds(datetime_t)+0xd4>
c000ba77:	be 46 00 00 00       	mov    esi,0x46
c000ba7c:	bf 64 00 00 00       	mov    edi,0x64
c000ba81:	bd 90 01 00 00       	mov    ebp,0x190
c000ba86:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba8b:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba91:	75 23                	jne    c000bab6 <datetimeToSeconds(datetime_t)+0xcb>
c000ba93:	89 f0                	mov    eax,esi
c000ba95:	99                   	cdq    
c000ba96:	f7 ff                	idiv   edi
c000ba98:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba9d:	85 d2                	test   edx,edx
c000ba9f:	75 15                	jne    c000bab6 <datetimeToSeconds(datetime_t)+0xcb>
c000baa1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000baa7:	99                   	cdq    
c000baa8:	f7 fd                	idiv   ebp
c000baaa:	83 fa 01             	cmp    edx,0x1
c000baad:	19 c0                	sbb    eax,eax
c000baaf:	f7 d0                	not    eax
c000bab1:	05 6e 01 00 00       	add    eax,0x16e
c000bab6:	01 c1                	add    ecx,eax
c000bab8:	46                   	inc    esi
c000bab9:	39 de                	cmp    esi,ebx
c000babb:	7c c9                	jl     c000ba86 <datetimeToSeconds(datetime_t)+0x9b>
c000babd:	eb 34                	jmp    c000baf3 <datetimeToSeconds(datetime_t)+0x108>
c000babf:	74 32                	je     c000baf3 <datetimeToSeconds(datetime_t)+0x108>
c000bac1:	b8 45 00 00 00       	mov    eax,0x45
c000bac6:	89 c2                	mov    edx,eax
c000bac8:	83 e2 03             	and    edx,0x3
c000bacb:	39 d8                	cmp    eax,ebx
c000bacd:	7e 0f                	jle    c000bade <datetimeToSeconds(datetime_t)+0xf3>
c000bacf:	83 fa 01             	cmp    edx,0x1
c000bad2:	19 d2                	sbb    edx,edx
c000bad4:	48                   	dec    eax
c000bad5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000badc:	eb e8                	jmp    c000bac6 <datetimeToSeconds(datetime_t)+0xdb>
c000bade:	b8 6d 01 00 00       	mov    eax,0x16d
c000bae3:	85 d2                	test   edx,edx
c000bae5:	75 0a                	jne    c000baf1 <datetimeToSeconds(datetime_t)+0x106>
c000bae7:	83 fb 01             	cmp    ebx,0x1
c000baea:	19 c0                	sbb    eax,eax
c000baec:	05 6e 01 00 00       	add    eax,0x16e
c000baf1:	29 c1                	sub    ecx,eax
c000baf3:	b8 80 51 01 00       	mov    eax,0x15180
c000baf8:	f7 e9                	imul   ecx
c000bafa:	03 04 24             	add    eax,DWORD PTR [esp]
c000bafd:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bb01:	83 c4 0c             	add    esp,0xc
c000bb04:	5b                   	pop    ebx
c000bb05:	5e                   	pop    esi
c000bb06:	5f                   	pop    edi
c000bb07:	5d                   	pop    ebp
c000bb08:	c3                   	ret    
c000bb09:	90                   	nop

c000bb0a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bb0a:	57                   	push   edi
c000bb0b:	56                   	push   esi
c000bb0c:	53                   	push   ebx
c000bb0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bb11:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb13:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bb16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb1e:	e8 c8 fe ff ff       	call   c000b9eb <datetimeToSeconds(datetime_t)>
c000bb23:	59                   	pop    ecx
c000bb24:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb2b:	5b                   	pop    ebx
c000bb2c:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb32:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb38:	89 cb                	mov    ebx,ecx
c000bb3a:	c1 fb 1f             	sar    ebx,0x1f
c000bb3d:	29 c8                	sub    eax,ecx
c000bb3f:	19 da                	sbb    edx,ebx
c000bb41:	31 c9                	xor    ecx,ecx
c000bb43:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb4a:	74 05                	je     c000bb51 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb4c:	b9 08 07 00 00       	mov    ecx,0x708
c000bb51:	31 db                	xor    ebx,ebx
c000bb53:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb57:	29 c8                	sub    eax,ecx
c000bb59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb5d:	19 da                	sbb    edx,ebx
c000bb5f:	89 f8                	mov    eax,edi
c000bb61:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb65:	5b                   	pop    ebx
c000bb66:	5e                   	pop    esi
c000bb67:	5f                   	pop    edi
c000bb68:	ff e0                	jmp    eax

c000bb6a <secondsToDatetime(unsigned long long)>:
c000bb6a:	55                   	push   ebp
c000bb6b:	57                   	push   edi
c000bb6c:	56                   	push   esi
c000bb6d:	53                   	push   ebx
c000bb6e:	83 ec 1c             	sub    esp,0x1c
c000bb71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb75:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb79:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb7d:	6a 00                	push   0x0
c000bb7f:	68 80 51 01 00       	push   0x15180
c000bb84:	55                   	push   ebp
c000bb85:	57                   	push   edi
c000bb86:	e8 b5 2a 01 00       	call   c001e640 <__udivdi3>
c000bb8b:	83 c4 10             	add    esp,0x10
c000bb8e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb98:	6a 00                	push   0x0
c000bb9a:	68 80 51 01 00       	push   0x15180
c000bb9f:	55                   	push   ebp
c000bba0:	57                   	push   edi
c000bba1:	bf 10 0e 00 00       	mov    edi,0xe10
c000bba6:	e8 95 2b 01 00       	call   c001e740 <__umoddi3>
c000bbab:	83 c4 10             	add    esp,0x10
c000bbae:	99                   	cdq    
c000bbaf:	f7 ff                	idiv   edi
c000bbb1:	bf 3c 00 00 00       	mov    edi,0x3c
c000bbb6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bbb9:	89 d0                	mov    eax,edx
c000bbbb:	99                   	cdq    
c000bbbc:	f7 ff                	idiv   edi
c000bbbe:	85 db                	test   ebx,ebx
c000bbc0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bbc3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bbc6:	79 11                	jns    c000bbd9 <secondsToDatetime(unsigned long long)+0x6f>
c000bbc8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bbcc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bbd2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbd7:	eb 07                	jmp    c000bbe0 <secondsToDatetime(unsigned long long)+0x76>
c000bbd9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbde:	89 d8                	mov    eax,ebx
c000bbe0:	bf b4 05 00 00       	mov    edi,0x5b4
c000bbe5:	99                   	cdq    
c000bbe6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bbeb:	f7 f9                	idiv   ecx
c000bbed:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bbf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbf6:	31 d2                	xor    edx,edx
c000bbf8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bc00:	01 c3                	add    ebx,eax
c000bc02:	89 d8                	mov    eax,ebx
c000bc04:	f7 f1                	div    ecx
c000bc06:	31 d2                	xor    edx,edx
c000bc08:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bc0b:	89 d8                	mov    eax,ebx
c000bc0d:	f7 f7                	div    edi
c000bc0f:	31 d2                	xor    edx,edx
c000bc11:	29 c1                	sub    ecx,eax
c000bc13:	89 d8                	mov    eax,ebx
c000bc15:	f7 f5                	div    ebp
c000bc17:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bc1c:	29 c1                	sub    ecx,eax
c000bc1e:	31 d2                	xor    edx,edx
c000bc20:	89 c8                	mov    eax,ecx
c000bc22:	f7 f5                	div    ebp
c000bc24:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bc29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc2d:	31 d2                	xor    edx,edx
c000bc2f:	89 c8                	mov    eax,ecx
c000bc31:	f7 f5                	div    ebp
c000bc33:	31 d2                	xor    edx,edx
c000bc35:	01 c3                	add    ebx,eax
c000bc37:	89 c8                	mov    eax,ecx
c000bc39:	f7 f7                	div    edi
c000bc3b:	bf 99 00 00 00       	mov    edi,0x99
c000bc40:	29 c3                	sub    ebx,eax
c000bc42:	31 d2                	xor    edx,edx
c000bc44:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc4c:	29 c3                	sub    ebx,eax
c000bc4e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc51:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc54:	bb 05 00 00 00       	mov    ebx,0x5
c000bc59:	83 c1 02             	add    ecx,0x2
c000bc5c:	89 c8                	mov    eax,ecx
c000bc5e:	f7 f7                	div    edi
c000bc60:	31 d2                	xor    edx,edx
c000bc62:	89 c7                	mov    edi,eax
c000bc64:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc6a:	83 c0 02             	add    eax,0x2
c000bc6d:	f7 f3                	div    ebx
c000bc6f:	89 eb                	mov    ebx,ebp
c000bc71:	29 c3                	sub    ebx,eax
c000bc73:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc79:	88 1e                	mov    BYTE PTR [esi],bl
c000bc7b:	19 c0                	sbb    eax,eax
c000bc7d:	31 d2                	xor    edx,edx
c000bc7f:	83 e0 0c             	and    eax,0xc
c000bc82:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc86:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc8e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc92:	83 f9 01             	cmp    ecx,0x1
c000bc95:	0f 96 c2             	setbe  dl
c000bc98:	41                   	inc    ecx
c000bc99:	01 d0                	add    eax,edx
c000bc9b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc9e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bca2:	83 c4 1c             	add    esp,0x1c
c000bca5:	89 f0                	mov    eax,esi
c000bca7:	5b                   	pop    ebx
c000bca8:	5e                   	pop    esi
c000bca9:	5f                   	pop    edi
c000bcaa:	5d                   	pop    ebp
c000bcab:	c2 04 00             	ret    0x4

c000bcae <Clock::timeInDatetimeLocal()>:
c000bcae:	53                   	push   ebx
c000bcaf:	83 ec 14             	sub    esp,0x14
c000bcb2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcb6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcba:	e8 8b fc ff ff       	call   c000b94a <Clock::timeInSecondsLocal()>
c000bcbf:	83 c4 0c             	add    esp,0xc
c000bcc2:	52                   	push   edx
c000bcc3:	50                   	push   eax
c000bcc4:	53                   	push   ebx
c000bcc5:	e8 a0 fe ff ff       	call   c000bb6a <secondsToDatetime(unsigned long long)>
c000bcca:	89 d8                	mov    eax,ebx
c000bccc:	83 c4 14             	add    esp,0x14
c000bccf:	5b                   	pop    ebx
c000bcd0:	c2 04 00             	ret    0x4
c000bcd3:	90                   	nop

c000bcd4 <Device::hibernate()>:
c000bcd4:	c3                   	ret    
c000bcd5:	90                   	nop

c000bcd6 <Device::wake()>:
c000bcd6:	c3                   	ret    
c000bcd7:	90                   	nop

c000bcd8 <Device::detect()>:
c000bcd8:	c3                   	ret    
c000bcd9:	90                   	nop

c000bcda <Device::disableLegacy()>:
c000bcda:	c3                   	ret    
c000bcdb:	90                   	nop

c000bcdc <Device::powerSaving(PowerSavingLevel)>:
c000bcdc:	c3                   	ret    
c000bcdd:	90                   	nop

c000bcde <DriverlessDevice::close(int, int, void*)>:
c000bcde:	31 c0                	xor    eax,eax
c000bce0:	c3                   	ret    
c000bce1:	90                   	nop

c000bce2 <DriverlessDevice::detect()>:
c000bce2:	c3                   	ret    
c000bce3:	90                   	nop

c000bce4 <DriverlessDevice::open(int, int, void*)>:
c000bce4:	83 ec 18             	sub    esp,0x18
c000bce7:	68 f0 03 02 c0       	push   0xc00203f0
c000bcec:	e8 fe 4b 00 00       	call   c00108ef <KePanic(char const*)>
c000bcf1:	83 c8 ff             	or     eax,0xffffffff
c000bcf4:	83 c4 1c             	add    esp,0x1c
c000bcf7:	c3                   	ret    

c000bcf8 <Device::~Device()>:
c000bcf8:	ba 50 04 02 c0       	mov    edx,0xc0020450
c000bcfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd01:	89 10                	mov    DWORD PTR [eax],edx
c000bd03:	90                   	nop
c000bd04:	c3                   	ret    
c000bd05:	90                   	nop

c000bd06 <Device::~Device()>:
c000bd06:	83 ec 0c             	sub    esp,0xc
c000bd09:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bd0d:	e8 e6 ff ff ff       	call   c000bcf8 <Device::~Device()>
c000bd12:	83 c4 04             	add    esp,0x4
c000bd15:	83 ec 08             	sub    esp,0x8
c000bd18:	68 58 01 00 00       	push   0x158
c000bd1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd21:	e8 6f eb ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000bd26:	83 c4 10             	add    esp,0x10
c000bd29:	83 c4 0c             	add    esp,0xc
c000bd2c:	c3                   	ret    
c000bd2d:	90                   	nop

c000bd2e <Device::findAndLoadDriver()>:
c000bd2e:	c7 44 24 04 0e 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc002040e
c000bd36:	e9 87 ec ff ff       	jmp    c000a9c2 <Dbg::kprintf(char const*, ...)>
c000bd3b:	90                   	nop

c000bd3c <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd3c:	57                   	push   edi
c000bd3d:	b9 09 00 00 00       	mov    ecx,0x9
c000bd42:	56                   	push   esi
c000bd43:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd47:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd4b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd55:	81 c7 18 01 00 00    	add    edi,0x118
c000bd5b:	fc                   	cld    
c000bd5c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd5e:	5e                   	pop    esi
c000bd5f:	5f                   	pop    edi
c000bd60:	c3                   	ret    
c000bd61:	90                   	nop

c000bd62 <Device::preOpenACPI(void*, char*, char*)>:
c000bd62:	57                   	push   edi
c000bd63:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd68:	56                   	push   esi
c000bd69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd71:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd7b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd81:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd8d:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd92:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd98:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd9e:	5e                   	pop    esi
c000bd9f:	5f                   	pop    edi
c000bda0:	c3                   	ret    
c000bda1:	90                   	nop

c000bda2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bda2:	53                   	push   ebx
c000bda3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bda7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bdaf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bdb3:	0f b6 c0             	movzx  eax,al
c000bdb6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bdba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bdbe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdc2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdc6:	5b                   	pop    ebx
c000bdc7:	e9 a8 05 00 00       	jmp    c000c374 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bdcc <Device::getParent()>:
c000bdcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdd0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bdd6:	c3                   	ret    
c000bdd7:	90                   	nop

c000bdd8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bdd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bddc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bde0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bde5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bde9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bded:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bdf1:	e9 e6 06 00 00       	jmp    c000c4dc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bdf6 <Device::addChild(Device*)>:
c000bdf6:	53                   	push   ebx
c000bdf7:	83 ec 08             	sub    esp,0x8
c000bdfa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be02:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000be08:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000be0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be10:	85 d2                	test   edx,edx
c000be12:	74 04                	je     c000be18 <Device::addChild(Device*)+0x22>
c000be14:	89 d3                	mov    ebx,edx
c000be16:	eb f6                	jmp    c000be0e <Device::addChild(Device*)+0x18>
c000be18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000be1b:	83 ec 0c             	sub    esp,0xc
c000be1e:	6a 08                	push   0x8
c000be20:	e8 89 bc ff ff       	call   c0007aae <malloc>
c000be25:	89 03                	mov    DWORD PTR [ebx],eax
c000be27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be34:	83 c4 18             	add    esp,0x18
c000be37:	5b                   	pop    ebx
c000be38:	c3                   	ret    
c000be39:	90                   	nop

c000be3a <Device::removeAllChildren()>:
c000be3a:	56                   	push   esi
c000be3b:	53                   	push   ebx
c000be3c:	52                   	push   edx
c000be3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be41:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be4a:	74 17                	je     c000be63 <Device::removeAllChildren()+0x29>
c000be4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be4f:	85 c0                	test   eax,eax
c000be51:	74 0c                	je     c000be5f <Device::removeAllChildren()+0x25>
c000be53:	83 ec 0c             	sub    esp,0xc
c000be56:	8b 10                	mov    edx,DWORD PTR [eax]
c000be58:	50                   	push   eax
c000be59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be5c:	83 c4 10             	add    esp,0x10
c000be5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be61:	eb e4                	jmp    c000be47 <Device::removeAllChildren()+0xd>
c000be63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be7c:	58                   	pop    eax
c000be7d:	5b                   	pop    ebx
c000be7e:	5e                   	pop    esi
c000be7f:	c3                   	ret    

c000be80 <Device::hibernateAll()>:
c000be80:	53                   	push   ebx
c000be81:	83 ec 14             	sub    esp,0x14
c000be84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be88:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be8a:	53                   	push   ebx
c000be8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be94:	83 c4 10             	add    esp,0x10
c000be97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be9a:	74 0f                	je     c000beab <Device::hibernateAll()+0x2b>
c000be9c:	83 ec 0c             	sub    esp,0xc
c000be9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bea2:	e8 d9 ff ff ff       	call   c000be80 <Device::hibernateAll()>
c000bea7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bea9:	eb e9                	jmp    c000be94 <Device::hibernateAll()+0x14>
c000beab:	83 c4 08             	add    esp,0x8
c000beae:	5b                   	pop    ebx
c000beaf:	c3                   	ret    

c000beb0 <Device::wakeAll()>:
c000beb0:	53                   	push   ebx
c000beb1:	83 ec 14             	sub    esp,0x14
c000beb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000beb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000beba:	53                   	push   ebx
c000bebb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bebe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beca:	74 0f                	je     c000bedb <Device::wakeAll()+0x2b>
c000becc:	83 ec 0c             	sub    esp,0xc
c000becf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bed2:	e8 d9 ff ff ff       	call   c000beb0 <Device::wakeAll()>
c000bed7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bed9:	eb e9                	jmp    c000bec4 <Device::wakeAll()+0x14>
c000bedb:	83 c4 08             	add    esp,0x8
c000bede:	5b                   	pop    ebx
c000bedf:	c3                   	ret    

c000bee0 <Device::detectAll()>:
c000bee0:	53                   	push   ebx
c000bee1:	83 ec 14             	sub    esp,0x14
c000bee4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bee8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000beea:	53                   	push   ebx
c000beeb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000beee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bef4:	83 c4 10             	add    esp,0x10
c000bef7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000befa:	74 0f                	je     c000bf0b <Device::detectAll()+0x2b>
c000befc:	83 ec 0c             	sub    esp,0xc
c000beff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf02:	e8 d9 ff ff ff       	call   c000bee0 <Device::detectAll()>
c000bf07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf09:	eb e9                	jmp    c000bef4 <Device::detectAll()+0x14>
c000bf0b:	83 c4 08             	add    esp,0x8
c000bf0e:	5b                   	pop    ebx
c000bf0f:	c3                   	ret    

c000bf10 <Device::disableLegacyAll()>:
c000bf10:	c3                   	ret    
c000bf11:	90                   	nop

c000bf12 <Device::loadDriversForAll()>:
c000bf12:	c3                   	ret    
c000bf13:	90                   	nop

c000bf14 <Device::closeAll()>:
c000bf14:	53                   	push   ebx
c000bf15:	83 ec 08             	sub    esp,0x8
c000bf18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf1e:	6a 00                	push   0x0
c000bf20:	6a 00                	push   0x0
c000bf22:	6a 00                	push   0x0
c000bf24:	53                   	push   ebx
c000bf25:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf2e:	83 c4 10             	add    esp,0x10
c000bf31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf34:	74 0f                	je     c000bf45 <Device::closeAll()+0x31>
c000bf36:	83 ec 0c             	sub    esp,0xc
c000bf39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf3c:	e8 d3 ff ff ff       	call   c000bf14 <Device::closeAll()>
c000bf41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf43:	eb e9                	jmp    c000bf2e <Device::closeAll()+0x1a>
c000bf45:	83 c4 08             	add    esp,0x8
c000bf48:	5b                   	pop    ebx
c000bf49:	c3                   	ret    

c000bf4a <Device::powerSavingAll(PowerSavingLevel)>:
c000bf4a:	56                   	push   esi
c000bf4b:	53                   	push   ebx
c000bf4c:	83 ec 0c             	sub    esp,0xc
c000bf4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf53:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf59:	56                   	push   esi
c000bf5a:	53                   	push   ebx
c000bf5b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf5e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf64:	83 c4 10             	add    esp,0x10
c000bf67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf6a:	74 0f                	je     c000bf7b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf6c:	52                   	push   edx
c000bf6d:	52                   	push   edx
c000bf6e:	56                   	push   esi
c000bf6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf72:	e8 d3 ff ff ff       	call   c000bf4a <Device::powerSavingAll(PowerSavingLevel)>
c000bf77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf79:	eb e9                	jmp    c000bf64 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf7b:	58                   	pop    eax
c000bf7c:	5b                   	pop    ebx
c000bf7d:	5e                   	pop    esi
c000bf7e:	c3                   	ret    
c000bf7f:	90                   	nop

c000bf80 <Device::setName(char const*)>:
c000bf80:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf88:	e9 b3 46 ff ff       	jmp    c0000640 <strcpy>
c000bf8d:	90                   	nop

c000bf8e <Device::Device(char const*)>:
c000bf8e:	83 ec 1c             	sub    esp,0x1c
c000bf91:	ba 50 04 02 c0       	mov    edx,0xc0020450
c000bf96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf9a:	89 10                	mov    DWORD PTR [eax],edx
c000bf9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfa0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bfaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bfb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfbc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bfd4:	83 ec 08             	sub    esp,0x8
c000bfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfdf:	e8 9c ff ff ff       	call   c000bf80 <Device::setName(char const*)>
c000bfe4:	83 c4 10             	add    esp,0x10
c000bfe7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bfef:	83 ec 0c             	sub    esp,0xc
c000bff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bff6:	e8 b3 ba ff ff       	call   c0007aae <malloc>
c000bffb:	83 c4 10             	add    esp,0x10
c000bffe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c004:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c00b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c00f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c019:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c01f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c025:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c029:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c02f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c03a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c041:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c045:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c04c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c050:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c05a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c05e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c06c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c07a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c084:	90                   	nop
c000c085:	83 c4 1c             	add    esp,0x1c
c000c088:	c3                   	ret    
c000c089:	90                   	nop

c000c08a <Device::getName()>:
c000c08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c08e:	05 d0 00 00 00       	add    eax,0xd0
c000c093:	c3                   	ret    

c000c094 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c094:	83 ec 0c             	sub    esp,0xc
c000c097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c09b:	83 ec 08             	sub    esp,0x8
c000c09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a2:	50                   	push   eax
c000c0a3:	e8 e6 fe ff ff       	call   c000bf8e <Device::Device(char const*)>
c000c0a8:	83 c4 10             	add    esp,0x10
c000c0ab:	ba 7c 04 02 c0       	mov    edx,0xc002047c
c000c0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b4:	89 10                	mov    DWORD PTR [eax],edx
c000c0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ba:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c0c4:	90                   	nop
c000c0c5:	83 c4 0c             	add    esp,0xc
c000c0c8:	c3                   	ret    
c000c0c9:	90                   	nop

c000c0ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c0ca:	57                   	push   edi
c000c0cb:	56                   	push   esi
c000c0cc:	53                   	push   ebx
c000c0cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c0d9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c0df:	75 0c                	jne    c000c0ed <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c0e1:	52                   	push   edx
c000c0e2:	52                   	push   edx
c000c0e3:	53                   	push   ebx
c000c0e4:	56                   	push   esi
c000c0e5:	e8 08 2a 01 00       	call   c001eaf2 <LinkedList<Device>::addElement(Device*)>
c000c0ea:	83 c4 10             	add    esp,0x10
c000c0ed:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0f6:	74 12                	je     c000c10a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c0f8:	50                   	push   eax
c000c0f9:	57                   	push   edi
c000c0fa:	56                   	push   esi
c000c0fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0fe:	e8 c7 ff ff ff       	call   c000c0ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c103:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c105:	83 c4 10             	add    esp,0x10
c000c108:	eb e9                	jmp    c000c0f3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c10a:	5b                   	pop    ebx
c000c10b:	5e                   	pop    esi
c000c10c:	5f                   	pop    edi
c000c10d:	c3                   	ret    

c000c10e <getDevicesOfType(DeviceType)>:
c000c10e:	53                   	push   ebx
c000c10f:	83 ec 14             	sub    esp,0x14
c000c112:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c116:	53                   	push   ebx
c000c117:	e8 b2 2a 01 00       	call   c001ebce <LinkedList<Device>::LinkedList()>
c000c11c:	83 c4 0c             	add    esp,0xc
c000c11f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c123:	53                   	push   ebx
c000c124:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c12a:	e8 9b ff ff ff       	call   c000c0ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c12f:	89 d8                	mov    eax,ebx
c000c131:	83 c4 18             	add    esp,0x18
c000c134:	5b                   	pop    ebx
c000c135:	c2 04 00             	ret    0x4

c000c138 <HardDiskController::HardDiskController(char const*)>:
c000c138:	83 ec 0c             	sub    esp,0xc
c000c13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	50                   	push   eax
c000c147:	e8 42 fe ff ff       	call   c000bf8e <Device::Device(char const*)>
c000c14c:	83 c4 10             	add    esp,0x10
c000c14f:	ba a8 04 02 c0       	mov    edx,0xc00204a8
c000c154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c158:	89 10                	mov    DWORD PTR [eax],edx
c000c15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c15e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c168:	90                   	nop
c000c169:	83 c4 0c             	add    esp,0xc
c000c16c:	c3                   	ret    
c000c16d:	90                   	nop
c000c16e:	66 90                	xchg   ax,ax

c000c170 <HardDiskController::~HardDiskController()>:
c000c170:	83 ec 0c             	sub    esp,0xc
c000c173:	ba a8 04 02 c0       	mov    edx,0xc00204a8
c000c178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c17c:	89 10                	mov    DWORD PTR [eax],edx
c000c17e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c182:	83 ec 0c             	sub    esp,0xc
c000c185:	50                   	push   eax
c000c186:	e8 6d fb ff ff       	call   c000bcf8 <Device::~Device()>
c000c18b:	83 c4 10             	add    esp,0x10
c000c18e:	90                   	nop
c000c18f:	83 c4 0c             	add    esp,0xc
c000c192:	c3                   	ret    
c000c193:	90                   	nop

c000c194 <HardDiskController::~HardDiskController()>:
c000c194:	83 ec 0c             	sub    esp,0xc
c000c197:	83 ec 0c             	sub    esp,0xc
c000c19a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19e:	e8 cd ff ff ff       	call   c000c170 <HardDiskController::~HardDiskController()>
c000c1a3:	83 c4 10             	add    esp,0x10
c000c1a6:	83 ec 08             	sub    esp,0x8
c000c1a9:	68 58 01 00 00       	push   0x158
c000c1ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b2:	e8 de e6 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000c1b7:	83 c4 10             	add    esp,0x10
c000c1ba:	83 c4 0c             	add    esp,0xc
c000c1bd:	c3                   	ret    

c000c1be <PhysicalDisk::eject()>:
c000c1be:	83 c8 ff             	or     eax,0xffffffff
c000c1c1:	c3                   	ret    

c000c1c2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c1c2:	83 ec 0c             	sub    esp,0xc
c000c1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c9:	83 ec 08             	sub    esp,0x8
c000c1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1d0:	50                   	push   eax
c000c1d1:	e8 b8 fd ff ff       	call   c000bf8e <Device::Device(char const*)>
c000c1d6:	83 c4 10             	add    esp,0x10
c000c1d9:	ba d4 04 02 c0       	mov    edx,0xc00204d4
c000c1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e2:	89 10                	mov    DWORD PTR [eax],edx
c000c1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1fe:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c20c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c210:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c224:	90                   	nop
c000c225:	83 c4 0c             	add    esp,0xc
c000c228:	c3                   	ret    
c000c229:	90                   	nop

c000c22a <PhysicalDisk::startCache()>:
c000c22a:	56                   	push   esi
c000c22b:	53                   	push   ebx
c000c22c:	83 ec 10             	sub    esp,0x10
c000c22f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c233:	6a 44                	push   0x44
c000c235:	e8 74 b8 ff ff       	call   c0007aae <malloc>
c000c23a:	89 c6                	mov    esi,eax
c000c23c:	58                   	pop    eax
c000c23d:	5a                   	pop    edx
c000c23e:	53                   	push   ebx
c000c23f:	56                   	push   esi
c000c240:	e8 7b 17 00 00       	call   c000d9c0 <VCache::VCache(PhysicalDisk*)>
c000c245:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c24b:	83 c4 14             	add    esp,0x14
c000c24e:	5b                   	pop    ebx
c000c24f:	5e                   	pop    esi
c000c250:	c3                   	ret    
c000c251:	90                   	nop

c000c252 <PhysicalDisk::~PhysicalDisk()>:
c000c252:	83 ec 0c             	sub    esp,0xc
c000c255:	ba d4 04 02 c0       	mov    edx,0xc00204d4
c000c25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25e:	89 10                	mov    DWORD PTR [eax],edx
c000c260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	50                   	push   eax
c000c268:	e8 8b fa ff ff       	call   c000bcf8 <Device::~Device()>
c000c26d:	83 c4 10             	add    esp,0x10
c000c270:	90                   	nop
c000c271:	83 c4 0c             	add    esp,0xc
c000c274:	c3                   	ret    
c000c275:	90                   	nop

c000c276 <PhysicalDisk::~PhysicalDisk()>:
c000c276:	83 ec 0c             	sub    esp,0xc
c000c279:	83 ec 0c             	sub    esp,0xc
c000c27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c280:	e8 cd ff ff ff       	call   c000c252 <PhysicalDisk::~PhysicalDisk()>
c000c285:	83 c4 10             	add    esp,0x10
c000c288:	83 ec 08             	sub    esp,0x8
c000c28b:	68 6c 01 00 00       	push   0x16c
c000c290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c294:	e8 fc e5 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000c299:	83 c4 10             	add    esp,0x10
c000c29c:	83 c4 0c             	add    esp,0xc
c000c29f:	c3                   	ret    

c000c2a0 <int_handler>:
c000c2a0:	55                   	push   ebp
c000c2a1:	57                   	push   edi
c000c2a2:	56                   	push   esi
c000c2a3:	53                   	push   ebx
c000c2a4:	83 ec 0c             	sub    esp,0xc
c000c2a7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c2ab:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2b2:	74 0b                	je     c000c2bf <int_handler+0x1f>
c000c2b4:	fa                   	cli    
c000c2b5:	f4                   	hlt    
c000c2b6:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2bd:	75 f5                	jne    c000c2b4 <int_handler+0x14>
c000c2bf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c2c2:	8d 46 e0             	lea    eax,[esi-0x20]
c000c2c5:	83 f8 17             	cmp    eax,0x17
c000c2c8:	76 40                	jbe    c000c30a <int_handler+0x6a>
c000c2ca:	c1 e6 04             	shl    esi,0x4
c000c2cd:	31 db                	xor    ebx,ebx
c000c2cf:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c2d5:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c2db:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c2df:	85 c0                	test   eax,eax
c000c2e1:	74 13                	je     c000c2f6 <int_handler+0x56>
c000c2e3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c2e6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2ea:	74 2c                	je     c000c318 <int_handler+0x78>
c000c2ec:	83 ec 08             	sub    esp,0x8
c000c2ef:	52                   	push   edx
c000c2f0:	57                   	push   edi
c000c2f1:	ff d0                	call   eax
c000c2f3:	83 c4 10             	add    esp,0x10
c000c2f6:	83 c3 01             	add    ebx,0x1
c000c2f9:	83 fb 04             	cmp    ebx,0x4
c000c2fc:	75 dd                	jne    c000c2db <int_handler+0x3b>
c000c2fe:	83 c4 0c             	add    esp,0xc
c000c301:	31 c0                	xor    eax,eax
c000c303:	5b                   	pop    ebx
c000c304:	31 d2                	xor    edx,edx
c000c306:	5e                   	pop    esi
c000c307:	5f                   	pop    edi
c000c308:	5d                   	pop    ebp
c000c309:	c3                   	ret    
c000c30a:	83 ec 0c             	sub    esp,0xc
c000c30d:	50                   	push   eax
c000c30e:	e8 e9 af 00 00       	call   c00172fc <HalEndOfInterrupt(int)>
c000c313:	83 c4 10             	add    esp,0x10
c000c316:	eb b2                	jmp    c000c2ca <int_handler+0x2a>
c000c318:	83 ec 08             	sub    esp,0x8
c000c31b:	52                   	push   edx
c000c31c:	57                   	push   edi
c000c31d:	ff d0                	call   eax
c000c31f:	83 c4 10             	add    esp,0x10
c000c322:	83 c4 0c             	add    esp,0xc
c000c325:	5b                   	pop    ebx
c000c326:	5e                   	pop    esi
c000c327:	5f                   	pop    edi
c000c328:	5d                   	pop    ebp
c000c329:	c3                   	ret    

c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c32a:	56                   	push   esi
c000c32b:	31 c0                	xor    eax,eax
c000c32d:	53                   	push   ebx
c000c32e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c332:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c336:	89 ca                	mov    edx,ecx
c000c338:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c33c:	c1 e2 04             	shl    edx,0x4
c000c33f:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c347:	74 17                	je     c000c360 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c349:	83 c0 01             	add    eax,0x1
c000c34c:	83 f8 04             	cmp    eax,0x4
c000c34f:	75 ee                	jne    c000c33f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c351:	c7 44 24 0c 04 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020504
c000c359:	5b                   	pop    ebx
c000c35a:	5e                   	pop    esi
c000c35b:	e9 8f 45 00 00       	jmp    c00108ef <KePanic(char const*)>
c000c360:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c363:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c36a:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c371:	5b                   	pop    ebx
c000c372:	5e                   	pop    esi
c000c373:	c3                   	ret    

c000c374 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c374:	57                   	push   edi
c000c375:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c37b:	56                   	push   esi
c000c37c:	53                   	push   ebx
c000c37d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c381:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c385:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c38c:	74 54                	je     c000c3e2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000c38e:	89 c7                	mov    edi,eax
c000c390:	84 c0                	test   al,al
c000c392:	74 1d                	je     c000c3b1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c394:	83 fe 0f             	cmp    esi,0xf
c000c397:	0f 8f d5 00 00 00    	jg     c000c472 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000c39d:	0f b6 b6 80 1f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde080]
c000c3a4:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c3ac:	d1 ef                	shr    edi,1
c000c3ae:	83 e7 01             	and    edi,0x1
c000c3b1:	83 ec 08             	sub    esp,0x8
c000c3b4:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3b9:	31 db                	xor    ebx,ebx
c000c3bb:	50                   	push   eax
c000c3bc:	68 11 05 02 c0       	push   0xc0020511
c000c3c1:	e8 fc e5 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000c3c6:	83 c4 10             	add    esp,0x10
c000c3c9:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3ce:	85 c0                	test   eax,eax
c000c3d0:	7f 55                	jg     c000c427 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c3d2:	83 ec 0c             	sub    esp,0xc
c000c3d5:	68 28 05 02 c0       	push   0xc0020528
c000c3da:	e8 10 45 00 00       	call   c00108ef <KePanic(char const*)>
c000c3df:	83 c4 10             	add    esp,0x10
c000c3e2:	8d 7e 20             	lea    edi,[esi+0x20]
c000c3e5:	89 f8                	mov    eax,edi
c000c3e7:	31 d2                	xor    edx,edx
c000c3e9:	c1 e0 04             	shl    eax,0x4
c000c3ec:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c3f3:	85 c9                	test   ecx,ecx
c000c3f5:	0f 84 8e 00 00 00    	je     c000c489 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000c3fb:	83 c2 01             	add    edx,0x1
c000c3fe:	83 fa 04             	cmp    edx,0x4
c000c401:	75 e9                	jne    c000c3ec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c403:	83 ec 0c             	sub    esp,0xc
c000c406:	68 7c 05 02 c0       	push   0xc002057c
c000c40b:	e8 df 44 00 00       	call   c00108ef <KePanic(char const*)>
c000c410:	83 c4 10             	add    esp,0x10
c000c413:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c418:	5b                   	pop    ebx
c000c419:	5e                   	pop    esi
c000c41a:	5f                   	pop    edi
c000c41b:	c3                   	ret    
c000c41c:	83 c3 01             	add    ebx,0x1
c000c41f:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c425:	7e ab                	jle    c000c3d2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000c427:	83 ec 08             	sub    esp,0x8
c000c42a:	8b 04 9d 80 8b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7480]
c000c431:	56                   	push   esi
c000c432:	50                   	push   eax
c000c433:	e8 de 15 01 00       	call   c001da16 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c438:	83 c4 10             	add    esp,0x10
c000c43b:	84 c0                	test   al,al
c000c43d:	74 dd                	je     c000c41c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c43f:	83 ec 04             	sub    esp,0x4
c000c442:	89 f8                	mov    eax,edi
c000c444:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c44b:	0f b6 f8             	movzx  edi,al
c000c44e:	57                   	push   edi
c000c44f:	8d 7e 20             	lea    edi,[esi+0x20]
c000c452:	6a 00                	push   0x0
c000c454:	89 f8                	mov    eax,edi
c000c456:	0f b6 c0             	movzx  eax,al
c000c459:	50                   	push   eax
c000c45a:	89 f0                	mov    eax,esi
c000c45c:	6a 00                	push   0x0
c000c45e:	0f b6 c0             	movzx  eax,al
c000c461:	6a 00                	push   0x0
c000c463:	50                   	push   eax
c000c464:	53                   	push   ebx
c000c465:	e8 18 17 01 00       	call   c001db82 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c46a:	83 c4 20             	add    esp,0x20
c000c46d:	e9 73 ff ff ff       	jmp    c000c3e5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000c472:	83 ec 0c             	sub    esp,0xc
c000c475:	31 ff                	xor    edi,edi
c000c477:	68 44 05 02 c0       	push   0xc0020544
c000c47c:	e8 6e 44 00 00       	call   c00108ef <KePanic(char const*)>
c000c481:	83 c4 10             	add    esp,0x10
c000c484:	e9 28 ff ff ff       	jmp    c000c3b1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c489:	8d 04 ba             	lea    eax,[edx+edi*4]
c000c48c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c490:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c497:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c49b:	5b                   	pop    ebx
c000c49c:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c4a3:	89 f0                	mov    eax,esi
c000c4a5:	5e                   	pop    esi
c000c4a6:	5f                   	pop    edi
c000c4a7:	c3                   	ret    

c000c4a8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c4a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4b0:	c1 e0 04             	shl    eax,0x4
c000c4b3:	8d 50 10             	lea    edx,[eax+0x10]
c000c4b6:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c4bc:	74 08                	je     c000c4c6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c4be:	83 c0 04             	add    eax,0x4
c000c4c1:	39 d0                	cmp    eax,edx
c000c4c3:	75 f1                	jne    c000c4b6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c4c5:	c3                   	ret    
c000c4c6:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4d0:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4da:	eb e2                	jmp    c000c4be <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c4dc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c4dc:	53                   	push   ebx
c000c4dd:	83 ec 08             	sub    esp,0x8
c000c4e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c4e4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c4e9:	74 0e                	je     c000c4f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c4eb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c4f0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c4f7:	75 37                	jne    c000c530 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4fd:	83 c0 20             	add    eax,0x20
c000c500:	c1 e0 04             	shl    eax,0x4
c000c503:	8d 50 10             	lea    edx,[eax+0x10]
c000c506:	39 98 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ebx
c000c50c:	74 0c                	je     c000c51a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c50e:	83 c0 04             	add    eax,0x4
c000c511:	39 d0                	cmp    eax,edx
c000c513:	75 f1                	jne    c000c506 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c515:	83 c4 08             	add    esp,0x8
c000c518:	5b                   	pop    ebx
c000c519:	c3                   	ret    
c000c51a:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c524:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c52e:	eb de                	jmp    c000c50e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c530:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c535:	7f 11                	jg     c000c548 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c53b:	0f b6 80 80 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde080]
c000c542:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c546:	eb b1                	jmp    c000c4f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c548:	83 ec 0c             	sub    esp,0xc
c000c54b:	68 35 05 02 c0       	push   0xc0020535
c000c550:	e8 9a 43 00 00       	call   c00108ef <KePanic(char const*)>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	eb 9f                	jmp    c000c4f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c55a <setupINTS()>:
c000c55a:	31 c0                	xor    eax,eax
c000c55c:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c566:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c570:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c57a:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c584:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c58e:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c598:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c5a2:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c5ac:	83 c0 10             	add    eax,0x10
c000c5af:	3d 00 10 00 00       	cmp    eax,0x1000
c000c5b4:	75 a6                	jne    c000c55c <setupINTS()+0x2>
c000c5b6:	c3                   	ret    

c000c5b7 <convertLegacyIRQNumber(int)>:
c000c5b7:	83 ec 0c             	sub    esp,0xc
c000c5ba:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5c4:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5cb:	74 0c                	je     c000c5d9 <convertLegacyIRQNumber(int)+0x22>
c000c5cd:	83 f8 0f             	cmp    eax,0xf
c000c5d0:	7f 0b                	jg     c000c5dd <convertLegacyIRQNumber(int)+0x26>
c000c5d2:	0f b6 80 80 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde080]
c000c5d9:	83 c4 0c             	add    esp,0xc
c000c5dc:	c3                   	ret    
c000c5dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5e1:	83 ec 0c             	sub    esp,0xc
c000c5e4:	68 44 05 02 c0       	push   0xc0020544
c000c5e9:	e8 01 43 00 00       	call   c00108ef <KePanic(char const*)>
c000c5ee:	83 c4 10             	add    esp,0x10
c000c5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5f5:	83 c4 0c             	add    esp,0xc
c000c5f8:	c3                   	ret    
c000c5f9:	90                   	nop

c000c5fa <startGUI(void*)>:
c000c5fa:	55                   	push   ebp
c000c5fb:	89 e5                	mov    ebp,esp
c000c5fd:	53                   	push   ebx
c000c5fe:	83 ec 04             	sub    esp,0x4
c000c601:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c606:	83 e8 01             	sub    eax,0x1
c000c609:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c60e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c613:	85 c0                	test   eax,eax
c000c615:	75 01                	jne    c000c618 <startGUI(void*)+0x1e>
c000c617:	fb                   	sti    
c000c618:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c61e:	83 ec 08             	sub    esp,0x8
c000c621:	6a 01                	push   0x1
c000c623:	68 a1 05 02 c0       	push   0xc00205a1
c000c628:	e8 19 80 00 00       	call   c0014646 <Thr::loadDLL(char const*, bool)>
c000c62d:	83 c4 10             	add    esp,0x10
c000c630:	83 ec 08             	sub    esp,0x8
c000c633:	53                   	push   ebx
c000c634:	50                   	push   eax
c000c635:	e8 3d 82 00 00       	call   c0014877 <Thr::executeDLL(unsigned long, void*)>
c000c63a:	83 c4 10             	add    esp,0x10
c000c63d:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c643:	83 ec 08             	sub    esp,0x8
c000c646:	6a 01                	push   0x1
c000c648:	68 bb 05 02 c0       	push   0xc00205bb
c000c64d:	e8 f4 7f 00 00       	call   c0014646 <Thr::loadDLL(char const*, bool)>
c000c652:	83 c4 10             	add    esp,0x10
c000c655:	83 ec 08             	sub    esp,0x8
c000c658:	53                   	push   ebx
c000c659:	50                   	push   eax
c000c65a:	e8 18 82 00 00       	call   c0014877 <Thr::executeDLL(unsigned long, void*)>
c000c65f:	83 c4 10             	add    esp,0x10
c000c662:	90                   	nop
c000c663:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c666:	c9                   	leave  
c000c667:	c3                   	ret    

c000c668 <startGUIVESA(void*)>:
c000c668:	55                   	push   ebp
c000c669:	89 e5                	mov    ebp,esp
c000c66b:	53                   	push   ebx
c000c66c:	83 ec 04             	sub    esp,0x4
c000c66f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c674:	83 e8 01             	sub    eax,0x1
c000c677:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c67c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c681:	85 c0                	test   eax,eax
c000c683:	75 01                	jne    c000c686 <startGUIVESA(void*)+0x1e>
c000c685:	fb                   	sti    
c000c686:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c68c:	83 ec 08             	sub    esp,0x8
c000c68f:	6a 01                	push   0x1
c000c691:	68 d9 05 02 c0       	push   0xc00205d9
c000c696:	e8 ab 7f 00 00       	call   c0014646 <Thr::loadDLL(char const*, bool)>
c000c69b:	83 c4 10             	add    esp,0x10
c000c69e:	83 ec 08             	sub    esp,0x8
c000c6a1:	53                   	push   ebx
c000c6a2:	50                   	push   eax
c000c6a3:	e8 cf 81 00 00       	call   c0014877 <Thr::executeDLL(unsigned long, void*)>
c000c6a8:	83 c4 10             	add    esp,0x10
c000c6ab:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6b1:	83 ec 08             	sub    esp,0x8
c000c6b4:	6a 01                	push   0x1
c000c6b6:	68 bb 05 02 c0       	push   0xc00205bb
c000c6bb:	e8 86 7f 00 00       	call   c0014646 <Thr::loadDLL(char const*, bool)>
c000c6c0:	83 c4 10             	add    esp,0x10
c000c6c3:	83 ec 08             	sub    esp,0x8
c000c6c6:	53                   	push   ebx
c000c6c7:	50                   	push   eax
c000c6c8:	e8 aa 81 00 00       	call   c0014877 <Thr::executeDLL(unsigned long, void*)>
c000c6cd:	83 c4 10             	add    esp,0x10
c000c6d0:	90                   	nop
c000c6d1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c6d4:	c9                   	leave  
c000c6d5:	c3                   	ret    

c000c6d6 <sendKeyToTerminal(unsigned char)>:
c000c6d6:	55                   	push   ebp
c000c6d7:	89 e5                	mov    ebp,esp
c000c6d9:	83 ec 28             	sub    esp,0x28
c000c6dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6df:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c6e2:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c6e7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c6eb:	83 ec 08             	sub    esp,0x8
c000c6ee:	52                   	push   edx
c000c6ef:	50                   	push   eax
c000c6f0:	e8 ab c6 ff ff       	call   c0008da0 <VgaText::receiveKey(unsigned char)>
c000c6f5:	83 c4 10             	add    esp,0x10
c000c6f8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6fc:	83 f8 0a             	cmp    eax,0xa
c000c6ff:	74 16                	je     c000c717 <sendKeyToTerminal(unsigned char)+0x41>
c000c701:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c705:	83 f8 03             	cmp    eax,0x3
c000c708:	74 0d                	je     c000c717 <sendKeyToTerminal(unsigned char)+0x41>
c000c70a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c70e:	83 f8 1c             	cmp    eax,0x1c
c000c711:	0f 85 97 00 00 00    	jne    c000c7ae <sendKeyToTerminal(unsigned char)+0xd8>
c000c717:	fa                   	cli    
c000c718:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c71d:	83 c0 01             	add    eax,0x1
c000c720:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c725:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c72a:	83 c0 01             	add    eax,0x1
c000c72d:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c732:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c737:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c73a:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c744:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c748:	74 1f                	je     c000c769 <sendKeyToTerminal(unsigned char)+0x93>
c000c74a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c74d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c750:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c753:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c756:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c759:	83 ec 0c             	sub    esp,0xc
c000c75c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c75f:	e8 58 8e 00 00       	call   c00155bc <unblockTask(ThreadControlBlock*)>
c000c764:	83 c4 10             	add    esp,0x10
c000c767:	eb db                	jmp    c000c744 <sendKeyToTerminal(unsigned char)+0x6e>
c000c769:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c76e:	83 e8 01             	sub    eax,0x1
c000c771:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c776:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c77b:	85 c0                	test   eax,eax
c000c77d:	75 18                	jne    c000c797 <sendKeyToTerminal(unsigned char)+0xc1>
c000c77f:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c784:	85 c0                	test   eax,eax
c000c786:	74 0f                	je     c000c797 <sendKeyToTerminal(unsigned char)+0xc1>
c000c788:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c792:	e8 0d 89 00 00       	call   c00150a4 <schedule()>
c000c797:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c79c:	83 e8 01             	sub    eax,0x1
c000c79f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c7a4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	75 01                	jne    c000c7ae <sendKeyToTerminal(unsigned char)+0xd8>
c000c7ad:	fb                   	sti    
c000c7ae:	90                   	nop
c000c7af:	c9                   	leave  
c000c7b0:	c3                   	ret    

c000c7b1 <sendKeyboardToken(KeyboardToken)>:
c000c7b1:	55                   	push   ebp
c000c7b2:	89 e5                	mov    ebp,esp
c000c7b4:	83 ec 18             	sub    esp,0x18
c000c7b7:	e8 83 41 00 00       	call   c001093f <Krnl::userIOReceived()>
c000c7bc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c7bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7c2:	0f b7 c0             	movzx  eax,ax
c000c7c5:	83 f2 01             	xor    edx,0x1
c000c7c8:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c7ce:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c7d3:	85 c0                	test   eax,eax
c000c7d5:	74 24                	je     c000c7fb <sendKeyboardToken(KeyboardToken)+0x4a>
c000c7d7:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000c7dd:	83 ec 04             	sub    esp,0x4
c000c7e0:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c7e5:	83 ec 08             	sub    esp,0x8
c000c7e8:	89 e2                	mov    edx,esp
c000c7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ed:	89 02                	mov    DWORD PTR [edx],eax
c000c7ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7f2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c7f6:	ff d1                	call   ecx
c000c7f8:	83 c4 10             	add    esp,0x10
c000c7fb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c7ff:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c802:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c807:	0f b6 d2             	movzx  edx,dl
c000c80a:	0f b6 c0             	movzx  eax,al
c000c80d:	39 c2                	cmp    edx,eax
c000c80f:	74 1c                	je     c000c82d <sendKeyboardToken(KeyboardToken)+0x7c>
c000c811:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c814:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c819:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c81e:	0f b6 c0             	movzx  eax,al
c000c821:	83 ec 0c             	sub    esp,0xc
c000c824:	50                   	push   eax
c000c825:	e8 c2 bc ff ff       	call   c00084ec <setTerminalScrollLock(bool)>
c000c82a:	83 c4 10             	add    esp,0x10
c000c82d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c830:	0f b6 c0             	movzx  eax,al
c000c833:	85 c0                	test   eax,eax
c000c835:	0f 84 da 00 00 00    	je     c000c915 <sendKeyboardToken(KeyboardToken)+0x164>
c000c83b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83e:	0f b7 c0             	movzx  eax,ax
c000c841:	3d 18 03 00 00       	cmp    eax,0x318
c000c846:	75 06                	jne    c000c84e <sendKeyboardToken(KeyboardToken)+0x9d>
c000c848:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c84e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c851:	0f b7 c0             	movzx  eax,ax
c000c854:	3d 19 03 00 00       	cmp    eax,0x319
c000c859:	75 06                	jne    c000c861 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c85b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c864:	0f b7 c0             	movzx  eax,ax
c000c867:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c86c:	75 06                	jne    c000c874 <sendKeyboardToken(KeyboardToken)+0xc3>
c000c86e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c877:	0f b7 c0             	movzx  eax,ax
c000c87a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c87f:	75 06                	jne    c000c887 <sendKeyboardToken(KeyboardToken)+0xd6>
c000c881:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c88a:	0f b7 c0             	movzx  eax,ax
c000c88d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c892:	75 06                	jne    c000c89a <sendKeyboardToken(KeyboardToken)+0xe9>
c000c894:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c89a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c89d:	0f b7 c0             	movzx  eax,ax
c000c8a0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c8a5:	75 06                	jne    c000c8ad <sendKeyboardToken(KeyboardToken)+0xfc>
c000c8a7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c8ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b0:	0f b7 c0             	movzx  eax,ax
c000c8b3:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c8b8:	75 06                	jne    c000c8c0 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c8ba:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c8c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c3:	0f b7 c0             	movzx  eax,ax
c000c8c6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c8cb:	75 06                	jne    c000c8d3 <sendKeyboardToken(KeyboardToken)+0x122>
c000c8cd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c8d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8d6:	0f b7 c0             	movzx  eax,ax
c000c8d9:	3d 20 03 00 00       	cmp    eax,0x320
c000c8de:	75 06                	jne    c000c8e6 <sendKeyboardToken(KeyboardToken)+0x135>
c000c8e0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c8e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8e9:	0f b7 c0             	movzx  eax,ax
c000c8ec:	3d 21 03 00 00       	cmp    eax,0x321
c000c8f1:	75 06                	jne    c000c8f9 <sendKeyboardToken(KeyboardToken)+0x148>
c000c8f3:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c8f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8fc:	0f b7 c0             	movzx  eax,ax
c000c8ff:	3d 22 03 00 00       	cmp    eax,0x322
c000c904:	0f 85 f1 00 00 00    	jne    c000c9fb <sendKeyboardToken(KeyboardToken)+0x24a>
c000c90a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c910:	e9 e6 00 00 00       	jmp    c000c9fb <sendKeyboardToken(KeyboardToken)+0x24a>
c000c915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c918:	0f b7 c0             	movzx  eax,ax
c000c91b:	3d 18 03 00 00       	cmp    eax,0x318
c000c920:	75 0a                	jne    c000c92c <sendKeyboardToken(KeyboardToken)+0x17b>
c000c922:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c928:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c92c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c92f:	0f b7 c0             	movzx  eax,ax
c000c932:	3d 19 03 00 00       	cmp    eax,0x319
c000c937:	75 0a                	jne    c000c943 <sendKeyboardToken(KeyboardToken)+0x192>
c000c939:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c93f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c946:	0f b7 c0             	movzx  eax,ax
c000c949:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c94e:	75 0a                	jne    c000c95a <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c950:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c956:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c95a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c95d:	0f b7 c0             	movzx  eax,ax
c000c960:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c965:	75 0a                	jne    c000c971 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c967:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c96d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c974:	0f b7 c0             	movzx  eax,ax
c000c977:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c97c:	75 0a                	jne    c000c988 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c97e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c984:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c98b:	0f b7 c0             	movzx  eax,ax
c000c98e:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c993:	75 0a                	jne    c000c99f <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c995:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c99b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c99f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a2:	0f b7 c0             	movzx  eax,ax
c000c9a5:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c9aa:	75 0a                	jne    c000c9b6 <sendKeyboardToken(KeyboardToken)+0x205>
c000c9ac:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c9b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9b9:	0f b7 c0             	movzx  eax,ax
c000c9bc:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c9c1:	75 0a                	jne    c000c9cd <sendKeyboardToken(KeyboardToken)+0x21c>
c000c9c3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c9c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9d0:	0f b7 c0             	movzx  eax,ax
c000c9d3:	3d 20 03 00 00       	cmp    eax,0x320
c000c9d8:	75 0a                	jne    c000c9e4 <sendKeyboardToken(KeyboardToken)+0x233>
c000c9da:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c9e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e7:	0f b7 c0             	movzx  eax,ax
c000c9ea:	3d 21 03 00 00       	cmp    eax,0x321
c000c9ef:	75 0a                	jne    c000c9fb <sendKeyboardToken(KeyboardToken)+0x24a>
c000c9f1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c9f7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9fe:	0f b7 c0             	movzx  eax,ax
c000ca01:	3d 00 02 00 00       	cmp    eax,0x200
c000ca06:	75 2f                	jne    c000ca37 <sendKeyboardToken(KeyboardToken)+0x286>
c000ca08:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca0d:	83 f0 01             	xor    eax,0x1
c000ca10:	0f b6 c0             	movzx  eax,al
c000ca13:	85 c0                	test   eax,eax
c000ca15:	74 20                	je     c000ca37 <sendKeyboardToken(KeyboardToken)+0x286>
c000ca17:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca1c:	6a 01                	push   0x1
c000ca1e:	6a 00                	push   0x0
c000ca20:	68 fa c5 00 c0       	push   0xc000c5fa
c000ca25:	50                   	push   eax
c000ca26:	e8 29 84 00 00       	call   c0014e54 <Process::createThread(void (*)(void*), void*, int)>
c000ca2b:	83 c4 10             	add    esp,0x10
c000ca2e:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca35:	eb 3a                	jmp    c000ca71 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca3a:	0f b7 c0             	movzx  eax,ax
c000ca3d:	3d 01 02 00 00       	cmp    eax,0x201
c000ca42:	75 2d                	jne    c000ca71 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca44:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca49:	83 f0 01             	xor    eax,0x1
c000ca4c:	0f b6 c0             	movzx  eax,al
c000ca4f:	85 c0                	test   eax,eax
c000ca51:	74 1e                	je     c000ca71 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca53:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca58:	6a 01                	push   0x1
c000ca5a:	6a 00                	push   0x0
c000ca5c:	68 68 c6 00 c0       	push   0xc000c668
c000ca61:	50                   	push   eax
c000ca62:	e8 ed 83 00 00       	call   c0014e54 <Process::createThread(void (*)(void*), void*, int)>
c000ca67:	83 c4 10             	add    esp,0x10
c000ca6a:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca74:	0f b7 c0             	movzx  eax,ax
c000ca77:	3d 25 03 00 00       	cmp    eax,0x325
c000ca7c:	75 06                	jne    c000ca84 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca7e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca87:	0f b7 c0             	movzx  eax,ax
c000ca8a:	3d 24 03 00 00       	cmp    eax,0x324
c000ca8f:	75 06                	jne    c000ca97 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ca91:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca9a:	0f b7 c0             	movzx  eax,ax
c000ca9d:	3d 23 03 00 00       	cmp    eax,0x323
c000caa2:	75 06                	jne    c000caaa <sendKeyboardToken(KeyboardToken)+0x2f9>
c000caa4:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000caaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caad:	0f b7 c0             	movzx  eax,ax
c000cab0:	3d 26 03 00 00       	cmp    eax,0x326
c000cab5:	75 06                	jne    c000cabd <sendKeyboardToken(KeyboardToken)+0x30c>
c000cab7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cabd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac0:	0f b7 c0             	movzx  eax,ax
c000cac3:	3d 27 03 00 00       	cmp    eax,0x327
c000cac8:	75 06                	jne    c000cad0 <sendKeyboardToken(KeyboardToken)+0x31f>
c000caca:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad3:	0f b7 c0             	movzx  eax,ax
c000cad6:	3d 22 03 00 00       	cmp    eax,0x322
c000cadb:	75 06                	jne    c000cae3 <sendKeyboardToken(KeyboardToken)+0x332>
c000cadd:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cae3:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cae7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000caea:	83 f0 01             	xor    eax,0x1
c000caed:	0f b6 c0             	movzx  eax,al
c000caf0:	85 c0                	test   eax,eax
c000caf2:	74 7c                	je     c000cb70 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000caf4:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000caf9:	0f b6 c0             	movzx  eax,al
c000cafc:	85 c0                	test   eax,eax
c000cafe:	74 43                	je     c000cb43 <sendKeyboardToken(KeyboardToken)+0x392>
c000cb00:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb04:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cb08:	85 c0                	test   eax,eax
c000cb0a:	74 2b                	je     c000cb37 <sendKeyboardToken(KeyboardToken)+0x386>
c000cb0c:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cb12:	89 d0                	mov    eax,edx
c000cb14:	c1 e0 02             	shl    eax,0x2
c000cb17:	01 d0                	add    eax,edx
c000cb19:	01 c0                	add    eax,eax
c000cb1b:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb23:	0f b7 c0             	movzx  eax,ax
c000cb26:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb29:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb2e:	01 d0                	add    eax,edx
c000cb30:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb35:	eb 71                	jmp    c000cba8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb37:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb41:	eb 65                	jmp    c000cba8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb43:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb48:	85 c0                	test   eax,eax
c000cb4a:	74 18                	je     c000cb64 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb4c:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb51:	0f b6 c0             	movzx  eax,al
c000cb54:	83 ec 0c             	sub    esp,0xc
c000cb57:	50                   	push   eax
c000cb58:	e8 79 fb ff ff       	call   c000c6d6 <sendKeyToTerminal(unsigned char)>
c000cb5d:	83 c4 10             	add    esp,0x10
c000cb60:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb64:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb6e:	eb 38                	jmp    c000cba8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb73:	0f b7 c0             	movzx  eax,ax
c000cb76:	3d 01 01 00 00       	cmp    eax,0x101
c000cb7b:	75 2b                	jne    c000cba8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb7d:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb82:	85 c0                	test   eax,eax
c000cb84:	74 18                	je     c000cb9e <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb86:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb8b:	0f b6 c0             	movzx  eax,al
c000cb8e:	83 ec 0c             	sub    esp,0xc
c000cb91:	50                   	push   eax
c000cb92:	e8 3f fb ff ff       	call   c000c6d6 <sendKeyToTerminal(unsigned char)>
c000cb97:	83 c4 10             	add    esp,0x10
c000cb9a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb9e:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cba8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbab:	83 f0 01             	xor    eax,0x1
c000cbae:	0f b6 c0             	movzx  eax,al
c000cbb1:	85 c0                	test   eax,eax
c000cbb3:	74 5a                	je     c000cc0f <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbb5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbb8:	83 f0 01             	xor    eax,0x1
c000cbbb:	0f b6 c0             	movzx  eax,al
c000cbbe:	85 c0                	test   eax,eax
c000cbc0:	74 4d                	je     c000cc0f <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbc2:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbc7:	83 f0 01             	xor    eax,0x1
c000cbca:	0f b6 c0             	movzx  eax,al
c000cbcd:	85 c0                	test   eax,eax
c000cbcf:	74 3e                	je     c000cc0f <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd4:	0f b7 c0             	movzx  eax,ax
c000cbd7:	83 f8 1f             	cmp    eax,0x1f
c000cbda:	76 0b                	jbe    c000cbe7 <sendKeyboardToken(KeyboardToken)+0x436>
c000cbdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbdf:	0f b7 c0             	movzx  eax,ax
c000cbe2:	83 f8 7e             	cmp    eax,0x7e
c000cbe5:	76 16                	jbe    c000cbfd <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbea:	0f b7 c0             	movzx  eax,ax
c000cbed:	83 f8 0a             	cmp    eax,0xa
c000cbf0:	74 0b                	je     c000cbfd <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf5:	0f b7 c0             	movzx  eax,ax
c000cbf8:	83 f8 08             	cmp    eax,0x8
c000cbfb:	75 12                	jne    c000cc0f <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc00:	0f b6 c0             	movzx  eax,al
c000cc03:	83 ec 0c             	sub    esp,0xc
c000cc06:	50                   	push   eax
c000cc07:	e8 ca fa ff ff       	call   c000c6d6 <sendKeyToTerminal(unsigned char)>
c000cc0c:	83 c4 10             	add    esp,0x10
c000cc0f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cc12:	83 f0 01             	xor    eax,0x1
c000cc15:	0f b6 c0             	movzx  eax,al
c000cc18:	85 c0                	test   eax,eax
c000cc1a:	74 5d                	je     c000cc79 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc1c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc1f:	83 f0 01             	xor    eax,0x1
c000cc22:	0f b6 c0             	movzx  eax,al
c000cc25:	85 c0                	test   eax,eax
c000cc27:	74 50                	je     c000cc79 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc29:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cc2e:	0f b6 c0             	movzx  eax,al
c000cc31:	85 c0                	test   eax,eax
c000cc33:	74 44                	je     c000cc79 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc38:	0f b7 c0             	movzx  eax,ax
c000cc3b:	83 f8 3f             	cmp    eax,0x3f
c000cc3e:	76 39                	jbe    c000cc79 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc43:	0f b7 c0             	movzx  eax,ax
c000cc46:	83 f8 7f             	cmp    eax,0x7f
c000cc49:	77 2e                	ja     c000cc79 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc4e:	88 c2                	mov    dl,al
c000cc50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc53:	0f b7 c0             	movzx  eax,ax
c000cc56:	83 f8 5f             	cmp    eax,0x5f
c000cc59:	76 04                	jbe    c000cc5f <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc5b:	b0 20                	mov    al,0x20
c000cc5d:	eb 02                	jmp    c000cc61 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc5f:	b0 00                	mov    al,0x0
c000cc61:	89 d1                	mov    ecx,edx
c000cc63:	29 c1                	sub    ecx,eax
c000cc65:	89 c8                	mov    eax,ecx
c000cc67:	83 e8 40             	sub    eax,0x40
c000cc6a:	0f b6 c0             	movzx  eax,al
c000cc6d:	83 ec 0c             	sub    esp,0xc
c000cc70:	50                   	push   eax
c000cc71:	e8 60 fa ff ff       	call   c000c6d6 <sendKeyToTerminal(unsigned char)>
c000cc76:	83 c4 10             	add    esp,0x10
c000cc79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc7c:	0f b7 c0             	movzx  eax,ax
c000cc7f:	3d 00 03 00 00       	cmp    eax,0x300
c000cc84:	75 12                	jne    c000cc98 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc86:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc89:	83 f0 01             	xor    eax,0x1
c000cc8c:	0f b6 c0             	movzx  eax,al
c000cc8f:	85 c0                	test   eax,eax
c000cc91:	74 05                	je     c000cc98 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc93:	e8 55 b8 ff ff       	call   c00084ed <doTerminalCycle()>
c000cc98:	90                   	nop
c000cc99:	c9                   	leave  
c000cc9a:	c3                   	ret    

c000cc9b <clearInternalKeybuffer(VgaText*)>:
c000cc9b:	55                   	push   ebp
c000cc9c:	89 e5                	mov    ebp,esp
c000cc9e:	83 ec 08             	sub    esp,0x8
c000cca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cca4:	05 02 01 00 00       	add    eax,0x102
c000cca9:	83 ec 0c             	sub    esp,0xc
c000ccac:	50                   	push   eax
c000ccad:	e8 be 38 ff ff       	call   c0000570 <strlen>
c000ccb2:	83 c4 10             	add    esp,0x10
c000ccb5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccb8:	81 c2 02 01 00 00    	add    edx,0x102
c000ccbe:	83 ec 04             	sub    esp,0x4
c000ccc1:	50                   	push   eax
c000ccc2:	6a 00                	push   0x0
c000ccc4:	52                   	push   edx
c000ccc5:	e8 26 38 ff ff       	call   c00004f0 <memset>
c000ccca:	83 c4 10             	add    esp,0x10
c000cccd:	90                   	nop
c000ccce:	c9                   	leave  
c000cccf:	c3                   	ret    

c000ccd0 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ccd0:	55                   	push   ebp
c000ccd1:	89 e5                	mov    ebp,esp
c000ccd3:	83 ec 18             	sub    esp,0x18
c000ccd6:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ccdb:	85 c0                	test   eax,eax
c000ccdd:	74 2a                	je     c000cd09 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ccdf:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cce5:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000cceb:	83 ec 04             	sub    esp,0x4
c000ccee:	68 e0 6f 02 c0       	push   0xc0026fe0
c000ccf3:	83 ec 08             	sub    esp,0x8
c000ccf6:	89 e2                	mov    edx,esp
c000ccf8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ccfb:	89 02                	mov    DWORD PTR [edx],eax
c000ccfd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd00:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cd04:	ff d1                	call   ecx
c000cd06:	83 c4 10             	add    esp,0x10
c000cd09:	fb                   	sti    
c000cd0a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd11:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd15:	0f 84 0d 01 00 00    	je     c000ce28 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cd1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd1e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd24:	0f be c0             	movsx  eax,al
c000cd27:	85 c0                	test   eax,eax
c000cd29:	75 2c                	jne    c000cd57 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cd2b:	fa                   	cli    
c000cd2c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd31:	83 c0 01             	add    eax,0x1
c000cd34:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd39:	e8 66 83 00 00       	call   c00150a4 <schedule()>
c000cd3e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd43:	83 e8 01             	sub    eax,0x1
c000cd46:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd4b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd50:	85 c0                	test   eax,eax
c000cd52:	75 c7                	jne    c000cd1b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd54:	fb                   	sti    
c000cd55:	eb c4                	jmp    c000cd1b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd5a:	8d 50 01             	lea    edx,[eax+0x1]
c000cd5d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd60:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd63:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd69:	88 10                	mov    BYTE PTR [eax],dl
c000cd6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd74:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd77:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd7b:	83 f8 03             	cmp    eax,0x3
c000cd7e:	75 1e                	jne    c000cd9e <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd80:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd85:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd8a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd90:	83 ec 08             	sub    esp,0x8
c000cd93:	6a 02                	push   0x2
c000cd95:	50                   	push   eax
c000cd96:	e8 f0 3f 00 00       	call   c0010d8b <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd9b:	83 c4 10             	add    esp,0x10
c000cd9e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cda2:	83 f8 1c             	cmp    eax,0x1c
c000cda5:	75 1e                	jne    c000cdc5 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cda7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cdac:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cdb1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdb7:	83 ec 08             	sub    esp,0x8
c000cdba:	6a 09                	push   0x9
c000cdbc:	50                   	push   eax
c000cdbd:	e8 c9 3f 00 00       	call   c0010d8b <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdc2:	83 c4 10             	add    esp,0x10
c000cdc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc8:	05 02 01 00 00       	add    eax,0x102
c000cdcd:	83 ec 0c             	sub    esp,0xc
c000cdd0:	50                   	push   eax
c000cdd1:	e8 9a 37 ff ff       	call   c0000570 <strlen>
c000cdd6:	83 c4 10             	add    esp,0x10
c000cdd9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cddc:	81 c2 02 01 00 00    	add    edx,0x102
c000cde2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cde5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cde8:	81 c2 02 01 00 00    	add    edx,0x102
c000cdee:	83 ec 04             	sub    esp,0x4
c000cdf1:	50                   	push   eax
c000cdf2:	51                   	push   ecx
c000cdf3:	52                   	push   edx
c000cdf4:	e8 d7 35 ff ff       	call   c00003d0 <memmove>
c000cdf9:	83 c4 10             	add    esp,0x10
c000cdfc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000ce00:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000ce04:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce08:	83 f8 0a             	cmp    eax,0xa
c000ce0b:	74 16                	je     c000ce23 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce0d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce11:	83 f8 03             	cmp    eax,0x3
c000ce14:	74 0d                	je     c000ce23 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce16:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce1a:	83 f8 1c             	cmp    eax,0x1c
c000ce1d:	0f 85 ee fe ff ff    	jne    c000cd11 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ce23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce26:	eb 03                	jmp    c000ce2b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000ce28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce2b:	c9                   	leave  
c000ce2c:	c3                   	ret    
c000ce2d:	90                   	nop

c000ce2e <Keyboard::Keyboard(char const*)>:
c000ce2e:	83 ec 0c             	sub    esp,0xc
c000ce31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce35:	83 ec 08             	sub    esp,0x8
c000ce38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3c:	50                   	push   eax
c000ce3d:	e8 4c f1 ff ff       	call   c000bf8e <Device::Device(char const*)>
c000ce42:	83 c4 10             	add    esp,0x10
c000ce45:	ba fc 05 02 c0       	mov    edx,0xc00205fc
c000ce4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4e:	89 10                	mov    DWORD PTR [eax],edx
c000ce50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce54:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce5e:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce65:	90                   	nop
c000ce66:	83 c4 0c             	add    esp,0xc
c000ce69:	c3                   	ret    

c000ce6a <Keyboard::~Keyboard()>:
c000ce6a:	83 ec 0c             	sub    esp,0xc
c000ce6d:	ba fc 05 02 c0       	mov    edx,0xc00205fc
c000ce72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce76:	89 10                	mov    DWORD PTR [eax],edx
c000ce78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce7c:	83 ec 0c             	sub    esp,0xc
c000ce7f:	50                   	push   eax
c000ce80:	e8 73 ee ff ff       	call   c000bcf8 <Device::~Device()>
c000ce85:	83 c4 10             	add    esp,0x10
c000ce88:	90                   	nop
c000ce89:	83 c4 0c             	add    esp,0xc
c000ce8c:	c3                   	ret    
c000ce8d:	90                   	nop

c000ce8e <Keyboard::~Keyboard()>:
c000ce8e:	83 ec 0c             	sub    esp,0xc
c000ce91:	83 ec 0c             	sub    esp,0xc
c000ce94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce98:	e8 cd ff ff ff       	call   c000ce6a <Keyboard::~Keyboard()>
c000ce9d:	83 c4 10             	add    esp,0x10
c000cea0:	83 ec 08             	sub    esp,0x8
c000cea3:	68 5c 01 00 00       	push   0x15c
c000cea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceac:	e8 e4 d9 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000ceb1:	83 c4 10             	add    esp,0x10
c000ceb4:	83 c4 0c             	add    esp,0xc
c000ceb7:	c3                   	ret    

c000ceb8 <LogicalDisk::close(int, int, void*)>:
c000ceb8:	83 c8 ff             	or     eax,0xffffffff
c000cebb:	c3                   	ret    

c000cebc <LogicalDisk::~LogicalDisk()>:
c000cebc:	83 ec 0c             	sub    esp,0xc
c000cebf:	ba 74 06 02 c0       	mov    edx,0xc0020674
c000cec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cec8:	89 10                	mov    DWORD PTR [eax],edx
c000ceca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cece:	83 ec 0c             	sub    esp,0xc
c000ced1:	50                   	push   eax
c000ced2:	e8 21 ee ff ff       	call   c000bcf8 <Device::~Device()>
c000ced7:	83 c4 10             	add    esp,0x10
c000ceda:	90                   	nop
c000cedb:	83 c4 0c             	add    esp,0xc
c000cede:	c3                   	ret    
c000cedf:	90                   	nop

c000cee0 <LogicalDisk::~LogicalDisk()>:
c000cee0:	83 ec 0c             	sub    esp,0xc
c000cee3:	83 ec 0c             	sub    esp,0xc
c000cee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceea:	e8 cd ff ff ff       	call   c000cebc <LogicalDisk::~LogicalDisk()>
c000ceef:	83 c4 10             	add    esp,0x10
c000cef2:	83 ec 08             	sub    esp,0x8
c000cef5:	68 78 01 00 00       	push   0x178
c000cefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefe:	e8 92 d9 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000cf03:	83 c4 10             	add    esp,0x10
c000cf06:	83 c4 0c             	add    esp,0xc
c000cf09:	c3                   	ret    

c000cf0a <LogicalDisk::open(int, int, void*)>:
c000cf0a:	83 ec 18             	sub    esp,0x18
c000cf0d:	68 28 06 02 c0       	push   0xc0020628
c000cf12:	e8 d8 39 00 00       	call   c00108ef <KePanic(char const*)>
c000cf17:	83 c8 ff             	or     eax,0xffffffff
c000cf1a:	83 c4 1c             	add    esp,0x1c
c000cf1d:	c3                   	ret    

c000cf1e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf1e:	53                   	push   ebx
c000cf1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf2b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf31:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf37:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf3d:	77 10                	ja     c000cf4f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf3f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf45:	89 d3                	mov    ebx,edx
c000cf47:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf4d:	72 05                	jb     c000cf54 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf4f:	83 c8 ff             	or     eax,0xffffffff
c000cf52:	89 c2                	mov    edx,eax
c000cf54:	5b                   	pop    ebx
c000cf55:	c3                   	ret    

c000cf56 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf56:	56                   	push   esi
c000cf57:	83 c8 ff             	or     eax,0xffffffff
c000cf5a:	53                   	push   ebx
c000cf5b:	89 c2                	mov    edx,eax
c000cf5d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf61:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf69:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf6f:	77 27                	ja     c000cf98 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf71:	89 d8                	mov    eax,ebx
c000cf73:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf79:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf7f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf84:	89 c2                	mov    edx,eax
c000cf86:	73 10                	jae    c000cf98 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf88:	89 c8                	mov    eax,ecx
c000cf8a:	89 da                	mov    edx,ebx
c000cf8c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf92:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf98:	5b                   	pop    ebx
c000cf99:	5e                   	pop    esi
c000cf9a:	c3                   	ret    
c000cf9b:	90                   	nop

c000cf9c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf9c:	83 ec 1c             	sub    esp,0x1c
c000cf9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfa3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cfaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cfb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfc2:	83 ec 08             	sub    esp,0x8
c000cfc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfc9:	50                   	push   eax
c000cfca:	e8 bf ef ff ff       	call   c000bf8e <Device::Device(char const*)>
c000cfcf:	83 c4 10             	add    esp,0x10
c000cfd2:	ba 74 06 02 c0       	mov    edx,0xc0020674
c000cfd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfdb:	89 10                	mov    DWORD PTR [eax],edx
c000cfdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfe1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfec:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cff7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d002:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d00c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d014:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d018:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d01e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d024:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d02b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d02f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d035:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d03f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d043:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d04d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d057:	90                   	nop
c000d058:	83 c4 1c             	add    esp,0x1c
c000d05b:	c3                   	ret    

c000d05c <LogicalDisk::assignDriveLetter()>:
c000d05c:	55                   	push   ebp
c000d05d:	57                   	push   edi
c000d05e:	56                   	push   esi
c000d05f:	53                   	push   ebx
c000d060:	83 ec 14             	sub    esp,0x14
c000d063:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d067:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d06d:	b0 41                	mov    al,0x41
c000d06f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d075:	84 d2                	test   dl,dl
c000d077:	75 02                	jne    c000d07b <LogicalDisk::assignDriveLetter()+0x1f>
c000d079:	b0 43                	mov    al,0x43
c000d07b:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d081:	0f b6 ca             	movzx  ecx,dl
c000d084:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d088:	0f be e8             	movsx  ebp,al
c000d08b:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d091:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d095:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d099:	3c 43                	cmp    al,0x43
c000d09b:	75 10                	jne    c000d0ad <LogicalDisk::assignDriveLetter()+0x51>
c000d09d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d0a4:	75 5a                	jne    c000d100 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0a6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d0ab:	75 53                	jne    c000d100 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0ad:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d0b0:	ba 01 00 00 00       	mov    edx,0x1
c000d0b5:	89 34 24             	mov    DWORD PTR [esp],esi
c000d0b8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d0bb:	d3 e2                	shl    edx,cl
c000d0bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0c1:	89 d7                	mov    edi,edx
c000d0c3:	89 d6                	mov    esi,edx
c000d0c5:	c1 ff 1f             	sar    edi,0x1f
c000d0c8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d0cc:	21 f9                	and    ecx,edi
c000d0ce:	09 d1                	or     ecx,edx
c000d0d0:	75 2e                	jne    c000d100 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0d2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0da:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d0e0:	09 f2                	or     edx,esi
c000d0e2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0e5:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d0eb:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d0f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0f6:	09 fa                	or     edx,edi
c000d0f8:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d0fe:	eb 0d                	jmp    c000d10d <LogicalDisk::assignDriveLetter()+0xb1>
c000d100:	8d 50 01             	lea    edx,[eax+0x1]
c000d103:	45                   	inc    ebp
c000d104:	88 d0                	mov    al,dl
c000d106:	80 fa 5b             	cmp    dl,0x5b
c000d109:	75 8e                	jne    c000d099 <LogicalDisk::assignDriveLetter()+0x3d>
c000d10b:	31 c0                	xor    eax,eax
c000d10d:	83 c4 14             	add    esp,0x14
c000d110:	5b                   	pop    ebx
c000d111:	5e                   	pop    esi
c000d112:	5f                   	pop    edi
c000d113:	5d                   	pop    ebp
c000d114:	c3                   	ret    
c000d115:	90                   	nop

c000d116 <LogicalDisk::mount()>:
c000d116:	56                   	push   esi
c000d117:	53                   	push   ebx
c000d118:	53                   	push   ebx
c000d119:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d11d:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d123:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d12d:	85 db                	test   ebx,ebx
c000d12f:	74 27                	je     c000d158 <LogicalDisk::mount()+0x42>
c000d131:	51                   	push   ecx
c000d132:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d139:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d13b:	83 e8 41             	sub    eax,0x41
c000d13e:	50                   	push   eax
c000d13f:	56                   	push   esi
c000d140:	53                   	push   ebx
c000d141:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d144:	83 c4 10             	add    esp,0x10
c000d147:	84 c0                	test   al,al
c000d149:	74 08                	je     c000d153 <LogicalDisk::mount()+0x3d>
c000d14b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d151:	eb 07                	jmp    c000d15a <LogicalDisk::mount()+0x44>
c000d153:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d156:	eb d5                	jmp    c000d12d <LogicalDisk::mount()+0x17>
c000d158:	31 c0                	xor    eax,eax
c000d15a:	5a                   	pop    edx
c000d15b:	5b                   	pop    ebx
c000d15c:	5e                   	pop    esi
c000d15d:	c3                   	ret    

c000d15e <LogicalDisk::unmount()>:
c000d15e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d162:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d16c:	c3                   	ret    
c000d16d:	90                   	nop

c000d16e <LogicalDisk::eject()>:
c000d16e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d172:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d178:	8b 10                	mov    edx,DWORD PTR [eax]
c000d17a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d17e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d181:	90                   	nop

c000d182 <LogicalDisk::unassignDriveLetter()>:
c000d182:	57                   	push   edi
c000d183:	56                   	push   esi
c000d184:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d188:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d18f:	85 c9                	test   ecx,ecx
c000d191:	75 0f                	jne    c000d1a2 <LogicalDisk::unassignDriveLetter()+0x20>
c000d193:	c7 44 24 0c 4c 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc002064c
c000d19b:	5e                   	pop    esi
c000d19c:	5f                   	pop    edi
c000d19d:	e9 4d 37 00 00       	jmp    c00108ef <KePanic(char const*)>
c000d1a2:	83 e9 41             	sub    ecx,0x41
c000d1a5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d1ac:	b8 01 00 00 00       	mov    eax,0x1
c000d1b1:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d1bc:	d3 e0                	shl    eax,cl
c000d1be:	89 c7                	mov    edi,eax
c000d1c0:	f7 d0                	not    eax
c000d1c2:	c1 ff 1f             	sar    edi,0x1f
c000d1c5:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d1cb:	89 fe                	mov    esi,edi
c000d1cd:	f7 d6                	not    esi
c000d1cf:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d1d5:	5e                   	pop    esi
c000d1d6:	5f                   	pop    edi
c000d1d7:	c3                   	ret    

c000d1d8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d1d8:	57                   	push   edi
c000d1d9:	56                   	push   esi
c000d1da:	53                   	push   ebx
c000d1db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1e3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1eb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1f1:	77 41                	ja     c000d234 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d1f3:	99                   	cdq    
c000d1f4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1fa:	01 c8                	add    eax,ecx
c000d1fc:	11 da                	adc    edx,ebx
c000d1fe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d204:	19 d7                	sbb    edi,edx
c000d206:	72 33                	jb     c000d23b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d208:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d20e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d214:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d218:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d21c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d222:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d228:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d22c:	5b                   	pop    ebx
c000d22d:	5e                   	pop    esi
c000d22e:	5f                   	pop    edi
c000d22f:	e9 c6 0a 00 00       	jmp    c000dcfa <VCache::read(unsigned long long, int, void*)>
c000d234:	b8 05 00 00 00       	mov    eax,0x5
c000d239:	eb 05                	jmp    c000d240 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d23b:	b8 07 00 00 00       	mov    eax,0x7
c000d240:	5b                   	pop    ebx
c000d241:	5e                   	pop    esi
c000d242:	5f                   	pop    edi
c000d243:	c3                   	ret    

c000d244 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d244:	57                   	push   edi
c000d245:	56                   	push   esi
c000d246:	53                   	push   ebx
c000d247:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d24b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d24f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d257:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d25d:	77 41                	ja     c000d2a0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d25f:	99                   	cdq    
c000d260:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d266:	01 c8                	add    eax,ecx
c000d268:	11 da                	adc    edx,ebx
c000d26a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d270:	19 d7                	sbb    edi,edx
c000d272:	72 33                	jb     c000d2a7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d274:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d27a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d280:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d284:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d288:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d28e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d294:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d298:	5b                   	pop    ebx
c000d299:	5e                   	pop    esi
c000d29a:	5f                   	pop    edi
c000d29b:	e9 6c 09 00 00       	jmp    c000dc0c <VCache::write(unsigned long long, int, void*)>
c000d2a0:	b8 05 00 00 00       	mov    eax,0x5
c000d2a5:	eb 05                	jmp    c000d2ac <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d2a7:	b8 07 00 00 00       	mov    eax,0x7
c000d2ac:	5b                   	pop    ebx
c000d2ad:	5e                   	pop    esi
c000d2ae:	5f                   	pop    edi
c000d2af:	c3                   	ret    

c000d2b0 <Mouse::Mouse(char const*)>:
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b7:	83 ec 08             	sub    esp,0x8
c000d2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2be:	50                   	push   eax
c000d2bf:	e8 ca ec ff ff       	call   c000bf8e <Device::Device(char const*)>
c000d2c4:	83 c4 10             	add    esp,0x10
c000d2c7:	ba a0 06 02 c0       	mov    edx,0xc00206a0
c000d2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d0:	89 10                	mov    DWORD PTR [eax],edx
c000d2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d2e0:	90                   	nop
c000d2e1:	83 c4 0c             	add    esp,0xc
c000d2e4:	c3                   	ret    
c000d2e5:	90                   	nop
c000d2e6:	66 90                	xchg   ax,ax

c000d2e8 <Mouse::~Mouse()>:
c000d2e8:	83 ec 0c             	sub    esp,0xc
c000d2eb:	ba a0 06 02 c0       	mov    edx,0xc00206a0
c000d2f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f4:	89 10                	mov    DWORD PTR [eax],edx
c000d2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fa:	83 ec 0c             	sub    esp,0xc
c000d2fd:	50                   	push   eax
c000d2fe:	e8 f5 e9 ff ff       	call   c000bcf8 <Device::~Device()>
c000d303:	83 c4 10             	add    esp,0x10
c000d306:	90                   	nop
c000d307:	83 c4 0c             	add    esp,0xc
c000d30a:	c3                   	ret    
c000d30b:	90                   	nop

c000d30c <Mouse::~Mouse()>:
c000d30c:	83 ec 0c             	sub    esp,0xc
c000d30f:	83 ec 0c             	sub    esp,0xc
c000d312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d316:	e8 cd ff ff ff       	call   c000d2e8 <Mouse::~Mouse()>
c000d31b:	83 c4 10             	add    esp,0x10
c000d31e:	83 ec 08             	sub    esp,0x8
c000d321:	68 58 01 00 00       	push   0x158
c000d326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32a:	e8 66 d5 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000d32f:	83 c4 10             	add    esp,0x10
c000d332:	83 c4 0c             	add    esp,0xc
c000d335:	c3                   	ret    

c000d336 <NIC::getMAC()>:
c000d336:	31 c0                	xor    eax,eax
c000d338:	31 d2                	xor    edx,edx
c000d33a:	c3                   	ret    
c000d33b:	90                   	nop

c000d33c <NIC::write(int, unsigned char*, int*)>:
c000d33c:	b8 01 00 00 00       	mov    eax,0x1
c000d341:	c3                   	ret    

c000d342 <NIC::NIC(char const*)>:
c000d342:	83 ec 0c             	sub    esp,0xc
c000d345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d349:	83 ec 08             	sub    esp,0x8
c000d34c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d350:	50                   	push   eax
c000d351:	e8 38 ec ff ff       	call   c000bf8e <Device::Device(char const*)>
c000d356:	83 c4 10             	add    esp,0x10
c000d359:	ba cc 06 02 c0       	mov    edx,0xc00206cc
c000d35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d362:	89 10                	mov    DWORD PTR [eax],edx
c000d364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d368:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d372:	90                   	nop
c000d373:	83 c4 0c             	add    esp,0xc
c000d376:	c3                   	ret    
c000d377:	90                   	nop

c000d378 <NIC::~NIC()>:
c000d378:	83 ec 0c             	sub    esp,0xc
c000d37b:	ba cc 06 02 c0       	mov    edx,0xc00206cc
c000d380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d384:	89 10                	mov    DWORD PTR [eax],edx
c000d386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38a:	83 ec 0c             	sub    esp,0xc
c000d38d:	50                   	push   eax
c000d38e:	e8 65 e9 ff ff       	call   c000bcf8 <Device::~Device()>
c000d393:	83 c4 10             	add    esp,0x10
c000d396:	90                   	nop
c000d397:	83 c4 0c             	add    esp,0xc
c000d39a:	c3                   	ret    
c000d39b:	90                   	nop

c000d39c <NIC::~NIC()>:
c000d39c:	83 ec 0c             	sub    esp,0xc
c000d39f:	83 ec 0c             	sub    esp,0xc
c000d3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a6:	e8 cd ff ff ff       	call   c000d378 <NIC::~NIC()>
c000d3ab:	83 c4 10             	add    esp,0x10
c000d3ae:	83 ec 08             	sub    esp,0x8
c000d3b1:	68 58 01 00 00       	push   0x158
c000d3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ba:	e8 d6 d4 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000d3bf:	83 c4 10             	add    esp,0x10
c000d3c2:	83 c4 0c             	add    esp,0xc
c000d3c5:	c3                   	ret    

c000d3c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3c6:	55                   	push   ebp
c000d3c7:	57                   	push   edi
c000d3c8:	56                   	push   esi
c000d3c9:	53                   	push   ebx
c000d3ca:	81 ec 28 01 00 00    	sub    esp,0x128
c000d3d0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d3d7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d3de:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d3e5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d3ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3f0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3f4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3fb:	e8 8a ec ff ff       	call   c000c08a <Device::getName()>
c000d400:	5a                   	pop    edx
c000d401:	59                   	pop    ecx
c000d402:	50                   	push   eax
c000d403:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d407:	55                   	push   ebp
c000d408:	e8 33 32 ff ff       	call   c0000640 <strcpy>
c000d40d:	5b                   	pop    ebx
c000d40e:	58                   	pop    eax
c000d40f:	68 f8 06 02 c0       	push   0xc00206f8
c000d414:	55                   	push   ebp
c000d415:	e8 26 34 ff ff       	call   c0000840 <strcat>
c000d41a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d421:	e8 88 a6 ff ff       	call   c0007aae <malloc>
c000d426:	83 c4 0c             	add    esp,0xc
c000d429:	89 c3                	mov    ebx,eax
c000d42b:	57                   	push   edi
c000d42c:	56                   	push   esi
c000d42d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d431:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d435:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d43c:	55                   	push   ebp
c000d43d:	50                   	push   eax
c000d43e:	e8 59 fb ff ff       	call   c000cf9c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d443:	83 c4 14             	add    esp,0x14
c000d446:	53                   	push   ebx
c000d447:	e8 10 fc ff ff       	call   c000d05c <LogicalDisk::assignDriveLetter()>
c000d44c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d44f:	e8 c2 fc ff ff       	call   c000d116 <LogicalDisk::mount()>
c000d454:	58                   	pop    eax
c000d455:	5a                   	pop    edx
c000d456:	53                   	push   ebx
c000d457:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d45e:	e8 93 e9 ff ff       	call   c000bdf6 <Device::addChild(Device*)>
c000d463:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d469:	5b                   	pop    ebx
c000d46a:	5e                   	pop    esi
c000d46b:	5f                   	pop    edi
c000d46c:	5d                   	pop    ebp
c000d46d:	c3                   	ret    

c000d46e <createPartitionsForDisk(PhysicalDisk*)>:
c000d46e:	55                   	push   ebp
c000d46f:	57                   	push   edi
c000d470:	56                   	push   esi
c000d471:	53                   	push   ebx
c000d472:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d478:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d47f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d485:	3d 00 02 00 00       	cmp    eax,0x200
c000d48a:	74 27                	je     c000d4b3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d48c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d492:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d498:	83 ec 10             	sub    esp,0x10
c000d49b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d49f:	99                   	cdq    
c000d4a0:	c1 e6 0a             	shl    esi,0xa
c000d4a3:	52                   	push   edx
c000d4a4:	89 fd                	mov    ebp,edi
c000d4a6:	50                   	push   eax
c000d4a7:	55                   	push   ebp
c000d4a8:	56                   	push   esi
c000d4a9:	e8 92 11 01 00       	call   c001e640 <__udivdi3>
c000d4ae:	e9 b9 00 00 00       	jmp    c000d56c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4b3:	83 ec 0c             	sub    esp,0xc
c000d4b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4b8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d4bc:	56                   	push   esi
c000d4bd:	6a 01                	push   0x1
c000d4bf:	6a 00                	push   0x0
c000d4c1:	6a 00                	push   0x0
c000d4c3:	53                   	push   ebx
c000d4c4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d4c7:	83 c4 20             	add    esp,0x20
c000d4ca:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d4d2:	75 0a                	jne    c000d4de <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d4d4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d4dc:	74 2c                	je     c000d50a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d4de:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4e4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4ea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4f0:	83 ec 10             	sub    esp,0x10
c000d4f3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4f7:	89 f7                	mov    edi,esi
c000d4f9:	c1 e0 0a             	shl    eax,0xa
c000d4fc:	c1 ff 1f             	sar    edi,0x1f
c000d4ff:	57                   	push   edi
c000d500:	56                   	push   esi
c000d501:	52                   	push   edx
c000d502:	50                   	push   eax
c000d503:	e8 38 11 01 00       	call   c001e640 <__udivdi3>
c000d508:	eb 62                	jmp    c000d56c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d50a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d511:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d518:	89 cf                	mov    edi,ecx
c000d51a:	83 e2 7f             	and    edx,0x7f
c000d51d:	83 e7 7f             	and    edi,0x7f
c000d520:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d527:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d52a:	83 e0 7f             	and    eax,0x7f
c000d52d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d530:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d537:	83 e0 7f             	and    eax,0x7f
c000d53a:	01 d0                	add    eax,edx
c000d53c:	89 c5                	mov    ebp,eax
c000d53e:	84 c0                	test   al,al
c000d540:	74 41                	je     c000d583 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d542:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d548:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d54e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d554:	83 ec 10             	sub    esp,0x10
c000d557:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d55b:	89 f7                	mov    edi,esi
c000d55d:	c1 e0 0a             	shl    eax,0xa
c000d560:	c1 ff 1f             	sar    edi,0x1f
c000d563:	57                   	push   edi
c000d564:	56                   	push   esi
c000d565:	52                   	push   edx
c000d566:	50                   	push   eax
c000d567:	e8 d4 10 01 00       	call   c001e640 <__udivdi3>
c000d56c:	83 c4 14             	add    esp,0x14
c000d56f:	52                   	push   edx
c000d570:	50                   	push   eax
c000d571:	6a 00                	push   0x0
c000d573:	6a 00                	push   0x0
c000d575:	53                   	push   ebx
c000d576:	e8 4b fe ff ff       	call   c000d3c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d57b:	83 c4 20             	add    esp,0x20
c000d57e:	e9 73 01 00 00       	jmp    c000d6f6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d583:	89 f0                	mov    eax,esi
c000d585:	31 c9                	xor    ecx,ecx
c000d587:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d58e:	75 02                	jne    c000d592 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d590:	89 cd                	mov    ebp,ecx
c000d592:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d599:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d5a0:	c1 e2 08             	shl    edx,0x8
c000d5a3:	c1 e6 10             	shl    esi,0x10
c000d5a6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d5ae:	09 f2                	or     edx,esi
c000d5b0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d5b8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000d5bf:	83 c0 10             	add    eax,0x10
c000d5c2:	09 f2                	or     edx,esi
c000d5c4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d5cb:	c1 e6 18             	shl    esi,0x18
c000d5ce:	09 f2                	or     edx,esi
c000d5d0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d5d7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d5db:	c1 e6 10             	shl    esi,0x10
c000d5de:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d5e5:	c1 e2 08             	shl    edx,0x8
c000d5e8:	09 f2                	or     edx,esi
c000d5ea:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d5f1:	09 f2                	or     edx,esi
c000d5f3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d5fa:	c1 e6 18             	shl    esi,0x18
c000d5fd:	09 f2                	or     edx,esi
c000d5ff:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d603:	41                   	inc    ecx
c000d604:	83 f9 04             	cmp    ecx,0x4
c000d607:	0f 85 7a ff ff ff    	jne    c000d587 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d60d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d611:	83 f0 01             	xor    eax,0x1
c000d614:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d618:	75 4f                	jne    c000d669 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d61a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d61e:	83 f0 01             	xor    eax,0x1
c000d621:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d625:	75 42                	jne    c000d669 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d627:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d62f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d637:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d63d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d643:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d649:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d64d:	89 f7                	mov    edi,esi
c000d64f:	c1 e0 0a             	shl    eax,0xa
c000d652:	c1 ff 1f             	sar    edi,0x1f
c000d655:	57                   	push   edi
c000d656:	56                   	push   esi
c000d657:	52                   	push   edx
c000d658:	50                   	push   eax
c000d659:	e8 e2 0f 01 00       	call   c001e640 <__udivdi3>
c000d65e:	83 c4 10             	add    esp,0x10
c000d661:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d665:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d669:	89 e8                	mov    eax,ebp
c000d66b:	0f b6 e8             	movzx  ebp,al
c000d66e:	85 ed                	test   ebp,ebp
c000d670:	74 50                	je     c000d6c2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d672:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d676:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d67a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d67e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d682:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d686:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d68e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d692:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d696:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d69a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d69e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d6a2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d6a6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6aa:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6b2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d6b6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d6ba:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d6be:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d6c2:	31 ed                	xor    ebp,ebp
c000d6c4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6c8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6cc:	89 f8                	mov    eax,edi
c000d6ce:	09 f0                	or     eax,esi
c000d6d0:	74 1e                	je     c000d6f0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6d2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6d6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6da:	89 d1                	mov    ecx,edx
c000d6dc:	09 c1                	or     ecx,eax
c000d6de:	74 10                	je     c000d6f0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6e0:	83 ec 0c             	sub    esp,0xc
c000d6e3:	57                   	push   edi
c000d6e4:	56                   	push   esi
c000d6e5:	52                   	push   edx
c000d6e6:	50                   	push   eax
c000d6e7:	53                   	push   ebx
c000d6e8:	e8 d9 fc ff ff       	call   c000d3c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6ed:	83 c4 20             	add    esp,0x20
c000d6f0:	45                   	inc    ebp
c000d6f1:	83 fd 04             	cmp    ebp,0x4
c000d6f4:	75 ce                	jne    c000d6c4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d6f6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d6fc:	5b                   	pop    ebx
c000d6fd:	5e                   	pop    esi
c000d6fe:	5f                   	pop    edi
c000d6ff:	5d                   	pop    ebp
c000d700:	c3                   	ret    
c000d701:	66 90                	xchg   ax,ax
c000d703:	90                   	nop

c000d704 <Serial::Serial(char const*)>:
c000d704:	83 ec 0c             	sub    esp,0xc
c000d707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70b:	83 ec 08             	sub    esp,0x8
c000d70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d712:	50                   	push   eax
c000d713:	e8 76 e8 ff ff       	call   c000bf8e <Device::Device(char const*)>
c000d718:	83 c4 10             	add    esp,0x10
c000d71b:	ba 0c 07 02 c0       	mov    edx,0xc002070c
c000d720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d724:	89 10                	mov    DWORD PTR [eax],edx
c000d726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d72a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d734:	90                   	nop
c000d735:	83 c4 0c             	add    esp,0xc
c000d738:	c3                   	ret    
c000d739:	90                   	nop
c000d73a:	66 90                	xchg   ax,ax

c000d73c <Serial::~Serial()>:
c000d73c:	83 ec 0c             	sub    esp,0xc
c000d73f:	ba 0c 07 02 c0       	mov    edx,0xc002070c
c000d744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d748:	89 10                	mov    DWORD PTR [eax],edx
c000d74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74e:	83 ec 0c             	sub    esp,0xc
c000d751:	50                   	push   eax
c000d752:	e8 a1 e5 ff ff       	call   c000bcf8 <Device::~Device()>
c000d757:	83 c4 10             	add    esp,0x10
c000d75a:	90                   	nop
c000d75b:	83 c4 0c             	add    esp,0xc
c000d75e:	c3                   	ret    
c000d75f:	90                   	nop

c000d760 <Serial::~Serial()>:
c000d760:	83 ec 0c             	sub    esp,0xc
c000d763:	83 ec 0c             	sub    esp,0xc
c000d766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76a:	e8 cd ff ff ff       	call   c000d73c <Serial::~Serial()>
c000d76f:	83 c4 10             	add    esp,0x10
c000d772:	83 ec 08             	sub    esp,0x8
c000d775:	68 58 01 00 00       	push   0x158
c000d77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77e:	e8 12 d1 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	83 c4 0c             	add    esp,0xc
c000d789:	c3                   	ret    
c000d78a:	66 90                	xchg   ax,ax

c000d78c <Timer::Timer(char const*)>:
c000d78c:	83 ec 0c             	sub    esp,0xc
c000d78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d793:	83 ec 08             	sub    esp,0x8
c000d796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79a:	50                   	push   eax
c000d79b:	e8 ee e7 ff ff       	call   c000bf8e <Device::Device(char const*)>
c000d7a0:	83 c4 10             	add    esp,0x10
c000d7a3:	ba 50 07 02 c0       	mov    edx,0xc0020750
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	89 10                	mov    DWORD PTR [eax],edx
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d7bc:	90                   	nop
c000d7bd:	83 c4 0c             	add    esp,0xc
c000d7c0:	c3                   	ret    
c000d7c1:	90                   	nop
c000d7c2:	66 90                	xchg   ax,ax

c000d7c4 <Timer::~Timer()>:
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	ba 50 07 02 c0       	mov    edx,0xc0020750
c000d7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d0:	89 10                	mov    DWORD PTR [eax],edx
c000d7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d6:	83 ec 0c             	sub    esp,0xc
c000d7d9:	50                   	push   eax
c000d7da:	e8 19 e5 ff ff       	call   c000bcf8 <Device::~Device()>
c000d7df:	83 c4 10             	add    esp,0x10
c000d7e2:	90                   	nop
c000d7e3:	83 c4 0c             	add    esp,0xc
c000d7e6:	c3                   	ret    
c000d7e7:	90                   	nop

c000d7e8 <Timer::~Timer()>:
c000d7e8:	83 ec 0c             	sub    esp,0xc
c000d7eb:	83 ec 0c             	sub    esp,0xc
c000d7ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7f2:	e8 cd ff ff ff       	call   c000d7c4 <Timer::~Timer()>
c000d7f7:	83 c4 10             	add    esp,0x10
c000d7fa:	83 ec 08             	sub    esp,0x8
c000d7fd:	68 5c 01 00 00       	push   0x15c
c000d802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d806:	e8 8a d0 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000d80b:	83 c4 10             	add    esp,0x10
c000d80e:	83 c4 0c             	add    esp,0xc
c000d811:	c3                   	ret    

c000d812 <Timer::read()>:
c000d812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d816:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d81c:	c3                   	ret    

c000d81d <setupTimer(int)>:
c000d81d:	53                   	push   ebx
c000d81e:	83 ec 14             	sub    esp,0x14
c000d821:	68 5c 01 00 00       	push   0x15c
c000d826:	e8 83 a2 ff ff       	call   c0007aae <malloc>
c000d82b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d82e:	89 c3                	mov    ebx,eax
c000d830:	e8 6b 06 01 00       	call   c001dea0 <PIT::PIT()>
c000d835:	58                   	pop    eax
c000d836:	5a                   	pop    edx
c000d837:	53                   	push   ebx
c000d838:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d83e:	e8 b3 e5 ff ff       	call   c000bdf6 <Device::addChild(Device*)>
c000d843:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d845:	6a 00                	push   0x0
c000d847:	6a 00                	push   0x0
c000d849:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d84d:	53                   	push   ebx
c000d84e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d851:	89 d8                	mov    eax,ebx
c000d853:	83 c4 28             	add    esp,0x28
c000d856:	5b                   	pop    ebx
c000d857:	c3                   	ret    

c000d858 <timerHandler(unsigned int)>:
c000d858:	56                   	push   esi
c000d859:	53                   	push   ebx
c000d85a:	51                   	push   ecx
c000d85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d85f:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d865:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d86c:	0f 84 4a 01 00 00    	je     c000d9bc <timerHandler(unsigned int)+0x164>
c000d872:	fa                   	cli    
c000d873:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d879:	83 ec 0c             	sub    esp,0xc
c000d87c:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d882:	68 78 81 02 c0       	push   0xc0028178
c000d887:	e8 84 13 01 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d88c:	83 c4 10             	add    esp,0x10
c000d88f:	84 c0                	test   al,al
c000d891:	0f 85 a1 00 00 00    	jne    c000d938 <timerHandler(unsigned int)+0xe0>
c000d897:	83 ec 0c             	sub    esp,0xc
c000d89a:	68 78 81 02 c0       	push   0xc0028178
c000d89f:	e8 88 13 01 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8a4:	83 c4 10             	add    esp,0x10
c000d8a7:	89 c6                	mov    esi,eax
c000d8a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8ac:	83 ec 0c             	sub    esp,0xc
c000d8af:	68 78 81 02 c0       	push   0xc0028178
c000d8b4:	e8 73 13 01 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8b9:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d8c0:	89 c3                	mov    ebx,eax
c000d8c2:	e8 6d 13 01 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d8ca:	83 c4 10             	add    esp,0x10
c000d8cd:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d8d3:	77 23                	ja     c000d8f8 <timerHandler(unsigned int)+0xa0>
c000d8d5:	83 ec 0c             	sub    esp,0xc
c000d8d8:	53                   	push   ebx
c000d8d9:	e8 de 7c 00 00       	call   c00155bc <unblockTask(ThreadControlBlock*)>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	39 de                	cmp    esi,ebx
c000d8e3:	75 27                	jne    c000d90c <timerHandler(unsigned int)+0xb4>
c000d8e5:	83 ec 0c             	sub    esp,0xc
c000d8e8:	68 78 81 02 c0       	push   0xc0028178
c000d8ed:	e8 3a 13 01 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8f2:	89 c6                	mov    esi,eax
c000d8f4:	eb 12                	jmp    c000d908 <timerHandler(unsigned int)+0xb0>
c000d8f6:	66 90                	xchg   ax,ax
c000d8f8:	52                   	push   edx
c000d8f9:	52                   	push   edx
c000d8fa:	53                   	push   ebx
c000d8fb:	68 78 81 02 c0       	push   0xc0028178
c000d900:	e8 eb 13 01 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d905:	8d 76 00             	lea    esi,[esi+0x0]
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	90                   	nop
c000d90c:	83 ec 0c             	sub    esp,0xc
c000d90f:	68 78 81 02 c0       	push   0xc0028178
c000d914:	e8 f7 12 01 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d919:	83 c4 10             	add    esp,0x10
c000d91c:	84 c0                	test   al,al
c000d91e:	75 18                	jne    c000d938 <timerHandler(unsigned int)+0xe0>
c000d920:	83 ec 0c             	sub    esp,0xc
c000d923:	68 78 81 02 c0       	push   0xc0028178
c000d928:	e8 ff 12 01 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d92d:	83 c4 10             	add    esp,0x10
c000d930:	39 f0                	cmp    eax,esi
c000d932:	0f 85 74 ff ff ff    	jne    c000d8ac <timerHandler(unsigned int)+0x54>
c000d938:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d93d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d941:	74 41                	je     c000d984 <timerHandler(unsigned int)+0x12c>
c000d943:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d94a:	74 38                	je     c000d984 <timerHandler(unsigned int)+0x12c>
c000d94c:	fa                   	cli    
c000d94d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d953:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d958:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d95e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d961:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d967:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d96a:	72 08                	jb     c000d974 <timerHandler(unsigned int)+0x11c>
c000d96c:	e8 33 77 00 00       	call   c00150a4 <schedule()>
c000d971:	8d 76 00             	lea    esi,[esi+0x0]
c000d974:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d979:	48                   	dec    eax
c000d97a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d97f:	75 03                	jne    c000d984 <timerHandler(unsigned int)+0x12c>
c000d981:	fb                   	sti    
c000d982:	66 90                	xchg   ax,ax
c000d984:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d989:	48                   	dec    eax
c000d98a:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d98f:	75 1b                	jne    c000d9ac <timerHandler(unsigned int)+0x154>
c000d991:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d998:	74 12                	je     c000d9ac <timerHandler(unsigned int)+0x154>
c000d99a:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d9a4:	e8 fb 76 00 00       	call   c00150a4 <schedule()>
c000d9a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9b1:	48                   	dec    eax
c000d9b2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9b7:	75 03                	jne    c000d9bc <timerHandler(unsigned int)+0x164>
c000d9b9:	fb                   	sti    
c000d9ba:	66 90                	xchg   ax,ax
c000d9bc:	58                   	pop    eax
c000d9bd:	5b                   	pop    ebx
c000d9be:	5e                   	pop    esi
c000d9bf:	c3                   	ret    

c000d9c0 <VCache::VCache(PhysicalDisk*)>:
c000d9c0:	53                   	push   ebx
c000d9c1:	83 ec 18             	sub    esp,0x18
c000d9c4:	ba 80 07 02 c0       	mov    edx,0xc0020780
c000d9c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cd:	89 10                	mov    DWORD PTR [eax],edx
c000d9cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d9da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9de:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d9f0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d9f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da02:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da18:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da20:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da27:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da32:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da42:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da51:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da59:	83 ec 0c             	sub    esp,0xc
c000da5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da60:	e8 49 a0 ff ff       	call   c0007aae <malloc>
c000da65:	83 c4 10             	add    esp,0x10
c000da68:	89 c3                	mov    ebx,eax
c000da6a:	83 ec 0c             	sub    esp,0xc
c000da6d:	53                   	push   ebx
c000da6e:	e8 cd 73 00 00       	call   c0014e40 <Mutex::Mutex()>
c000da73:	83 c4 10             	add    esp,0x10
c000da76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da7a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da81:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da85:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da97:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000daa4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daa8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000daae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dab4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dab8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dabb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dabe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dac6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dad0:	05 00 02 00 00       	add    eax,0x200
c000dad5:	c1 e0 03             	shl    eax,0x3
c000dad8:	83 ec 0c             	sub    esp,0xc
c000dadb:	50                   	push   eax
c000dadc:	e8 cd 9f ff ff       	call   c0007aae <malloc>
c000dae1:	83 c4 10             	add    esp,0x10
c000dae4:	89 c2                	mov    edx,eax
c000dae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000daed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000daf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dafc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db04:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db0a:	89 d0                	mov    eax,edx
c000db0c:	c1 e0 02             	shl    eax,0x2
c000db0f:	01 d0                	add    eax,edx
c000db11:	c1 e0 04             	shl    eax,0x4
c000db14:	83 ec 0c             	sub    esp,0xc
c000db17:	50                   	push   eax
c000db18:	e8 91 9f ff ff       	call   c0007aae <malloc>
c000db1d:	83 c4 10             	add    esp,0x10
c000db20:	89 c2                	mov    edx,eax
c000db22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db26:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db29:	90                   	nop
c000db2a:	83 c4 18             	add    esp,0x18
c000db2d:	5b                   	pop    ebx
c000db2e:	c3                   	ret    
c000db2f:	90                   	nop

c000db30 <VCache::invalidateReadBuffer()>:
c000db30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db34:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db3a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db3e:	c3                   	ret    
c000db3f:	90                   	nop

c000db40 <VCache::writeWriteBuffer()>:
c000db40:	53                   	push   ebx
c000db41:	83 ec 08             	sub    esp,0x8
c000db44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db48:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db4c:	74 1e                	je     c000db6c <VCache::writeWriteBuffer()+0x2c>
c000db4e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db51:	83 ec 0c             	sub    esp,0xc
c000db54:	8b 10                	mov    edx,DWORD PTR [eax]
c000db56:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db59:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db5c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db5f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db62:	50                   	push   eax
c000db63:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db66:	83 c4 20             	add    esp,0x20
c000db69:	8d 76 00             	lea    esi,[esi+0x0]
c000db6c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db73:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db7a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db7e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db85:	83 c4 08             	add    esp,0x8
c000db88:	5b                   	pop    ebx
c000db89:	c3                   	ret    
c000db8a:	66 90                	xchg   ax,ax

c000db8c <VCache::~VCache()>:
c000db8c:	83 ec 0c             	sub    esp,0xc
c000db8f:	ba 80 07 02 c0       	mov    edx,0xc0020780
c000db94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db98:	89 10                	mov    DWORD PTR [eax],edx
c000db9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db9e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dba1:	0f b6 c0             	movzx  eax,al
c000dba4:	85 c0                	test   eax,eax
c000dba6:	74 10                	je     c000dbb8 <VCache::~VCache()+0x2c>
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbaf:	e8 8c ff ff ff       	call   c000db40 <VCache::writeWriteBuffer()>
c000dbb4:	83 c4 10             	add    esp,0x10
c000dbb7:	90                   	nop
c000dbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbbc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dbbf:	83 ec 0c             	sub    esp,0xc
c000dbc2:	50                   	push   eax
c000dbc3:	e8 f6 9e ff ff       	call   c0007abe <free>
c000dbc8:	83 c4 10             	add    esp,0x10
c000dbcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbcf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dbd2:	83 ec 0c             	sub    esp,0xc
c000dbd5:	50                   	push   eax
c000dbd6:	e8 e3 9e ff ff       	call   c0007abe <free>
c000dbdb:	83 c4 10             	add    esp,0x10
c000dbde:	90                   	nop
c000dbdf:	83 c4 0c             	add    esp,0xc
c000dbe2:	c3                   	ret    
c000dbe3:	90                   	nop

c000dbe4 <VCache::~VCache()>:
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	83 ec 0c             	sub    esp,0xc
c000dbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbee:	e8 99 ff ff ff       	call   c000db8c <VCache::~VCache()>
c000dbf3:	83 c4 10             	add    esp,0x10
c000dbf6:	83 ec 08             	sub    esp,0x8
c000dbf9:	6a 44                	push   0x44
c000dbfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbff:	e8 91 cc ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000dc04:	83 c4 10             	add    esp,0x10
c000dc07:	83 c4 0c             	add    esp,0xc
c000dc0a:	c3                   	ret    
c000dc0b:	90                   	nop

c000dc0c <VCache::write(unsigned long long, int, void*)>:
c000dc0c:	55                   	push   ebp
c000dc0d:	57                   	push   edi
c000dc0e:	56                   	push   esi
c000dc0f:	53                   	push   ebx
c000dc10:	83 ec 1c             	sub    esp,0x1c
c000dc13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc1b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc23:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dc27:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc2b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc2f:	74 07                	je     c000dc38 <VCache::write(unsigned long long, int, void*)+0x2c>
c000dc31:	53                   	push   ebx
c000dc32:	e8 f9 fe ff ff       	call   c000db30 <VCache::invalidateReadBuffer()>
c000dc37:	58                   	pop    eax
c000dc38:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc3c:	74 62                	je     c000dca0 <VCache::write(unsigned long long, int, void*)+0x94>
c000dc3e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc45:	99                   	cdq    
c000dc46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc4a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc4d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc50:	31 c1                	xor    ecx,eax
c000dc52:	89 d0                	mov    eax,edx
c000dc54:	89 ca                	mov    edx,ecx
c000dc56:	31 e8                	xor    eax,ebp
c000dc58:	09 c2                	or     edx,eax
c000dc5a:	75 38                	jne    c000dc94 <VCache::write(unsigned long long, int, void*)+0x88>
c000dc5c:	83 ff 01             	cmp    edi,0x1
c000dc5f:	75 33                	jne    c000dc94 <VCache::write(unsigned long long, int, void*)+0x88>
c000dc61:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc68:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dc6e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc71:	0f af c8             	imul   ecx,eax
c000dc74:	01 cf                	add    edi,ecx
c000dc76:	89 c1                	mov    ecx,eax
c000dc78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc7a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc7d:	40                   	inc    eax
c000dc7e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc81:	83 f8 50             	cmp    eax,0x50
c000dc84:	75 6a                	jne    c000dcf0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc86:	83 ec 0c             	sub    esp,0xc
c000dc89:	53                   	push   ebx
c000dc8a:	e8 b1 fe ff ff       	call   c000db40 <VCache::writeWriteBuffer()>
c000dc8f:	83 c4 10             	add    esp,0x10
c000dc92:	eb 5c                	jmp    c000dcf0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc94:	83 ec 0c             	sub    esp,0xc
c000dc97:	53                   	push   ebx
c000dc98:	e8 a3 fe ff ff       	call   c000db40 <VCache::writeWriteBuffer()>
c000dc9d:	83 c4 10             	add    esp,0x10
c000dca0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dca3:	83 ff 4f             	cmp    edi,0x4f
c000dca6:	7f 20                	jg     c000dcc8 <VCache::write(unsigned long long, int, void*)+0xbc>
c000dca8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dcab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcaf:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dcb2:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dcb5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dcb9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dcbc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcc4:	eb 2a                	jmp    c000dcf0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dcc6:	66 90                	xchg   ax,ax
c000dcc8:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dcce:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dcd2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dcd6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dcda:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcde:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dce2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dce5:	83 c4 1c             	add    esp,0x1c
c000dce8:	5b                   	pop    ebx
c000dce9:	5e                   	pop    esi
c000dcea:	5f                   	pop    edi
c000dceb:	5d                   	pop    ebp
c000dcec:	ff e0                	jmp    eax
c000dcee:	66 90                	xchg   ax,ax
c000dcf0:	83 c4 1c             	add    esp,0x1c
c000dcf3:	31 c0                	xor    eax,eax
c000dcf5:	5b                   	pop    ebx
c000dcf6:	5e                   	pop    esi
c000dcf7:	5f                   	pop    edi
c000dcf8:	5d                   	pop    ebp
c000dcf9:	c3                   	ret    

c000dcfa <VCache::read(unsigned long long, int, void*)>:
c000dcfa:	55                   	push   ebp
c000dcfb:	57                   	push   edi
c000dcfc:	56                   	push   esi
c000dcfd:	53                   	push   ebx
c000dcfe:	83 ec 1c             	sub    esp,0x1c
c000dd01:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dd05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd09:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dd0d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd11:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd19:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dd1d:	74 0d                	je     c000dd2c <VCache::read(unsigned long long, int, void*)+0x32>
c000dd1f:	83 ec 0c             	sub    esp,0xc
c000dd22:	57                   	push   edi
c000dd23:	e8 18 fe ff ff       	call   c000db40 <VCache::writeWriteBuffer()>
c000dd28:	83 c4 10             	add    esp,0x10
c000dd2b:	90                   	nop
c000dd2c:	83 fd 01             	cmp    ebp,0x1
c000dd2f:	0f 85 93 00 00 00    	jne    c000ddc8 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd35:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd38:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd3b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd42:	0f 85 80 00 00 00    	jne    c000ddc8 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd48:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000dd4b:	89 e9                	mov    ecx,ebp
c000dd4d:	f7 d9                	neg    ecx
c000dd4f:	89 c8                	mov    eax,ecx
c000dd51:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd55:	c1 f8 1f             	sar    eax,0x1f
c000dd58:	21 d9                	and    ecx,ebx
c000dd5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd5e:	89 c8                	mov    eax,ecx
c000dd60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd64:	21 f1                	and    ecx,esi
c000dd66:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd6a:	89 ca                	mov    edx,ecx
c000dd6c:	74 2e                	je     c000dd9c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd6e:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dd71:	75 29                	jne    c000dd9c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd73:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd76:	75 24                	jne    c000dd9c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd78:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd7b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd81:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd84:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd87:	21 f3                	and    ebx,esi
c000dd89:	0f af d9             	imul   ebx,ecx
c000dd8c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd8f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd93:	89 de                	mov    esi,ebx
c000dd95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd97:	31 c0                	xor    eax,eax
c000dd99:	eb 61                	jmp    c000ddfc <VCache::read(unsigned long long, int, void*)+0x102>
c000dd9b:	90                   	nop
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dda3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dda7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000ddaa:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000ddad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ddaf:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000ddb2:	55                   	push   ebp
c000ddb3:	52                   	push   edx
c000ddb4:	50                   	push   eax
c000ddb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddb9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ddbc:	83 c4 20             	add    esp,0x20
c000ddbf:	85 c0                	test   eax,eax
c000ddc1:	75 39                	jne    c000ddfc <VCache::read(unsigned long long, int, void*)+0x102>
c000ddc3:	eb b3                	jmp    c000dd78 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ddc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddc8:	83 ec 0c             	sub    esp,0xc
c000ddcb:	57                   	push   edi
c000ddcc:	e8 5f fd ff ff       	call   c000db30 <VCache::invalidateReadBuffer()>
c000ddd1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddd4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddd8:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddda:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ddde:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000dde2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000dde6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ddea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddee:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ddf1:	83 c4 2c             	add    esp,0x2c
c000ddf4:	5b                   	pop    ebx
c000ddf5:	5e                   	pop    esi
c000ddf6:	5f                   	pop    edi
c000ddf7:	5d                   	pop    ebp
c000ddf8:	ff e0                	jmp    eax
c000ddfa:	66 90                	xchg   ax,ax
c000ddfc:	83 c4 1c             	add    esp,0x1c
c000ddff:	5b                   	pop    ebx
c000de00:	5e                   	pop    esi
c000de01:	5f                   	pop    edi
c000de02:	5d                   	pop    ebp
c000de03:	c3                   	ret    

c000de04 <Video::putrect(int, int, int, int, unsigned int)>:
c000de04:	55                   	push   ebp
c000de05:	57                   	push   edi
c000de06:	56                   	push   esi
c000de07:	53                   	push   ebx
c000de08:	83 ec 1c             	sub    esp,0x1c
c000de0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de13:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de17:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de23:	01 df                	add    edi,ebx
c000de25:	39 fb                	cmp    ebx,edi
c000de27:	7d 1f                	jge    c000de48 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de29:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de2d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de31:	7d 12                	jge    c000de45 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de33:	8b 16                	mov    edx,DWORD PTR [esi]
c000de35:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de39:	53                   	push   ebx
c000de3a:	55                   	push   ebp
c000de3b:	45                   	inc    ebp
c000de3c:	56                   	push   esi
c000de3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	eb e8                	jmp    c000de2d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de45:	43                   	inc    ebx
c000de46:	eb dd                	jmp    c000de25 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de48:	83 c4 1c             	add    esp,0x1c
c000de4b:	5b                   	pop    ebx
c000de4c:	5e                   	pop    esi
c000de4d:	5f                   	pop    edi
c000de4e:	5d                   	pop    ebp
c000de4f:	c3                   	ret    

c000de50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de50:	55                   	push   ebp
c000de51:	57                   	push   edi
c000de52:	31 ff                	xor    edi,edi
c000de54:	56                   	push   esi
c000de55:	53                   	push   ebx
c000de56:	83 ec 1c             	sub    esp,0x1c
c000de59:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de5d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de61:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de68:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de71:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de79:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de7c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de80:	01 f9                	add    ecx,edi
c000de82:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de86:	7d 2f                	jge    c000deb7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de88:	31 f6                	xor    esi,esi
c000de8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de8e:	01 f2                	add    edx,esi
c000de90:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de94:	7d 1a                	jge    c000deb0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de99:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de9c:	46                   	inc    esi
c000de9d:	51                   	push   ecx
c000de9e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dea2:	52                   	push   edx
c000dea3:	55                   	push   ebp
c000dea4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dea7:	83 c4 10             	add    esp,0x10
c000deaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000deae:	eb da                	jmp    c000de8a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000deb0:	47                   	inc    edi
c000deb1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000deb5:	eb c5                	jmp    c000de7c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000deb7:	83 c4 1c             	add    esp,0x1c
c000deba:	5b                   	pop    ebx
c000debb:	5e                   	pop    esi
c000debc:	5f                   	pop    edi
c000debd:	5d                   	pop    ebp
c000debe:	c3                   	ret    
c000debf:	90                   	nop

c000dec0 <Video::blit(unsigned int*, int, int, int, int)>:
c000dec0:	55                   	push   ebp
c000dec1:	57                   	push   edi
c000dec2:	56                   	push   esi
c000dec3:	53                   	push   ebx
c000dec4:	83 ec 1c             	sub    esp,0x1c
c000dec7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000decb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000decf:	85 c0                	test   eax,eax
c000ded1:	79 02                	jns    c000ded5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ded3:	31 c0                	xor    eax,eax
c000ded5:	c1 e0 02             	shl    eax,0x2
c000ded8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000dedc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dee4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000dee8:	39 d8                	cmp    eax,ebx
c000deea:	7e 49                	jle    c000df35 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000deec:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000def2:	7c 41                	jl     c000df35 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000def4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000def8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000defc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df00:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df04:	39 f9                	cmp    ecx,edi
c000df06:	7e 22                	jle    c000df2a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df08:	83 c5 04             	add    ebp,0x4
c000df0b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df11:	7c 14                	jl     c000df27 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df13:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df15:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df18:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df20:	56                   	push   esi
c000df21:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	47                   	inc    edi
c000df28:	eb d2                	jmp    c000defc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df2e:	43                   	inc    ebx
c000df2f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df33:	eb ab                	jmp    c000dee0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df35:	83 c4 1c             	add    esp,0x1c
c000df38:	5b                   	pop    ebx
c000df39:	5e                   	pop    esi
c000df3a:	5f                   	pop    edi
c000df3b:	5d                   	pop    ebp
c000df3c:	c3                   	ret    
c000df3d:	90                   	nop

c000df3e <Video::clearScreen(unsigned int)>:
c000df3e:	57                   	push   edi
c000df3f:	56                   	push   esi
c000df40:	53                   	push   ebx
c000df41:	31 db                	xor    ebx,ebx
c000df43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df47:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df4d:	7e 1f                	jle    c000df6e <Video::clearScreen(unsigned int)+0x30>
c000df4f:	31 ff                	xor    edi,edi
c000df51:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df57:	7e 12                	jle    c000df6b <Video::clearScreen(unsigned int)+0x2d>
c000df59:	8b 06                	mov    eax,DWORD PTR [esi]
c000df5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df5f:	53                   	push   ebx
c000df60:	57                   	push   edi
c000df61:	47                   	inc    edi
c000df62:	56                   	push   esi
c000df63:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	eb e6                	jmp    c000df51 <Video::clearScreen(unsigned int)+0x13>
c000df6b:	43                   	inc    ebx
c000df6c:	eb d9                	jmp    c000df47 <Video::clearScreen(unsigned int)+0x9>
c000df6e:	5b                   	pop    ebx
c000df6f:	5e                   	pop    esi
c000df70:	5f                   	pop    edi
c000df71:	c3                   	ret    

c000df72 <Video::putpixel(int, int, unsigned int)>:
c000df72:	c7 44 24 04 88 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020788
c000df7a:	e9 70 29 00 00       	jmp    c00108ef <KePanic(char const*)>
c000df7f:	90                   	nop

c000df80 <Video::readPixelApprox(int, int)>:
c000df80:	83 ec 18             	sub    esp,0x18
c000df83:	68 a9 07 02 c0       	push   0xc00207a9
c000df88:	e8 62 29 00 00       	call   c00108ef <KePanic(char const*)>
c000df8d:	31 c0                	xor    eax,eax
c000df8f:	83 c4 1c             	add    esp,0x1c
c000df92:	c3                   	ret    
c000df93:	90                   	nop

c000df94 <Video::Video(char const*)>:
c000df94:	83 ec 0c             	sub    esp,0xc
c000df97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9b:	83 ec 08             	sub    esp,0x8
c000df9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa2:	50                   	push   eax
c000dfa3:	e8 e6 df ff ff       	call   c000bf8e <Device::Device(char const*)>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	ba 24 08 02 c0       	mov    edx,0xc0020824
c000dfb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb4:	89 10                	mov    DWORD PTR [eax],edx
c000dfb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfba:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfc4:	90                   	nop
c000dfc5:	83 c4 0c             	add    esp,0xc
c000dfc8:	c3                   	ret    
c000dfc9:	90                   	nop

c000dfca <Video::~Video()>:
c000dfca:	83 ec 0c             	sub    esp,0xc
c000dfcd:	ba 24 08 02 c0       	mov    edx,0xc0020824
c000dfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd6:	89 10                	mov    DWORD PTR [eax],edx
c000dfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdc:	83 ec 0c             	sub    esp,0xc
c000dfdf:	50                   	push   eax
c000dfe0:	e8 13 dd ff ff       	call   c000bcf8 <Device::~Device()>
c000dfe5:	83 c4 10             	add    esp,0x10
c000dfe8:	90                   	nop
c000dfe9:	83 c4 0c             	add    esp,0xc
c000dfec:	c3                   	ret    
c000dfed:	90                   	nop

c000dfee <Video::~Video()>:
c000dfee:	83 ec 0c             	sub    esp,0xc
c000dff1:	83 ec 0c             	sub    esp,0xc
c000dff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff8:	e8 cd ff ff ff       	call   c000dfca <Video::~Video()>
c000dffd:	83 c4 10             	add    esp,0x10
c000e000:	83 ec 08             	sub    esp,0x8
c000e003:	68 64 01 00 00       	push   0x164
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	e8 84 c8 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c000e011:	83 c4 10             	add    esp,0x10
c000e014:	83 c4 0c             	add    esp,0xc
c000e017:	c3                   	ret    

c000e018 <Video::isMonochrome()>:
c000e018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e01c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e022:	c3                   	ret    
c000e023:	90                   	nop

c000e024 <Video::getWidth()>:
c000e024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e028:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e02e:	c3                   	ret    
c000e02f:	90                   	nop

c000e030 <Video::getHeight()>:
c000e030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e034:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e03a:	c3                   	ret    
c000e03b:	90                   	nop

c000e03c <Video::drawCursor(int, int, unsigned int*, int)>:
c000e03c:	55                   	push   ebp
c000e03d:	57                   	push   edi
c000e03e:	56                   	push   esi
c000e03f:	53                   	push   ebx
c000e040:	83 ec 2c             	sub    esp,0x2c
c000e043:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e047:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e04b:	83 f8 01             	cmp    eax,0x1
c000e04e:	19 c9                	sbb    ecx,ecx
c000e050:	31 db                	xor    ebx,ebx
c000e052:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e056:	89 cd                	mov    ebp,ecx
c000e058:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e060:	f7 d5                	not    ebp
c000e062:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e068:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e06c:	01 d8                	add    eax,ebx
c000e06e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e072:	56                   	push   esi
c000e073:	e8 b8 ff ff ff       	call   c000e030 <Video::getHeight()>
c000e078:	59                   	pop    ecx
c000e079:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e07d:	7e 70                	jle    c000e0ef <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e07f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e083:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e087:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e08a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e08e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e092:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	89 f8                	mov    eax,edi
c000e09f:	83 c0 20             	add    eax,0x20
c000e0a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0a6:	56                   	push   esi
c000e0a7:	e8 78 ff ff ff       	call   c000e024 <Video::getWidth()>
c000e0ac:	5a                   	pop    edx
c000e0ad:	39 c7                	cmp    edi,eax
c000e0af:	7d 34                	jge    c000e0e5 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e0b1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0b6:	74 05                	je     c000e0bd <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e0b8:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0ba:	55                   	push   ebp
c000e0bb:	eb 0d                	jmp    c000e0ca <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0bd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0c2:	74 12                	je     c000e0d6 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0c4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0ce:	57                   	push   edi
c000e0cf:	56                   	push   esi
c000e0d0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0d3:	83 c4 10             	add    esp,0x10
c000e0d6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0da:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0de:	47                   	inc    edi
c000e0df:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e0e3:	75 c1                	jne    c000e0a6 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e0e5:	43                   	inc    ebx
c000e0e6:	83 fb 20             	cmp    ebx,0x20
c000e0e9:	0f 85 79 ff ff ff    	jne    c000e068 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e0ef:	83 c4 2c             	add    esp,0x2c
c000e0f2:	5b                   	pop    ebx
c000e0f3:	5e                   	pop    esi
c000e0f4:	5f                   	pop    edi
c000e0f5:	5d                   	pop    ebp
c000e0f6:	c3                   	ret    
c000e0f7:	90                   	nop

c000e0f8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0f8:	55                   	push   ebp
c000e0f9:	57                   	push   edi
c000e0fa:	56                   	push   esi
c000e0fb:	53                   	push   ebx
c000e0fc:	83 ec 28             	sub    esp,0x28
c000e0ff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e103:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e107:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e10b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e10f:	c1 e6 08             	shl    esi,0x8
c000e112:	01 c6                	add    esi,eax
c000e114:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e118:	c1 e0 08             	shl    eax,0x8
c000e11b:	01 d0                	add    eax,edx
c000e11d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e121:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e125:	0f af c6             	imul   eax,esi
c000e128:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e12f:	50                   	push   eax
c000e130:	e8 79 99 ff ff       	call   c0007aae <malloc>
c000e135:	83 c4 10             	add    esp,0x10
c000e138:	89 c7                	mov    edi,eax
c000e13a:	85 c0                	test   eax,eax
c000e13c:	75 10                	jne    c000e14e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e13e:	83 ec 0c             	sub    esp,0xc
c000e141:	68 d4 07 02 c0       	push   0xc00207d4
c000e146:	e8 a4 27 00 00       	call   c00108ef <KePanic(char const*)>
c000e14b:	83 c4 10             	add    esp,0x10
c000e14e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e152:	ba 12 00 00 00       	mov    edx,0x12
c000e157:	85 c0                	test   eax,eax
c000e159:	74 11                	je     c000e16c <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e15b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e15f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e163:	c1 fa 03             	sar    edx,0x3
c000e166:	0f af d1             	imul   edx,ecx
c000e169:	83 c2 12             	add    edx,0x12
c000e16c:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e170:	74 04                	je     c000e176 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e172:	85 f6                	test   esi,esi
c000e174:	75 12                	jne    c000e188 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e176:	83 ec 0c             	sub    esp,0xc
c000e179:	68 e4 07 02 c0       	push   0xc00207e4
c000e17e:	e8 3f c8 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000e183:	e9 b8 00 00 00       	jmp    c000e240 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e188:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e18c:	83 f9 02             	cmp    ecx,0x2
c000e18f:	0f 85 96 00 00 00    	jne    c000e22b <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e195:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e19a:	75 0e                	jne    c000e1aa <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e19c:	85 c0                	test   eax,eax
c000e19e:	75 0a                	jne    c000e1aa <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1a0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1a3:	83 e8 18             	sub    eax,0x18
c000e1a6:	a8 f7                	test   al,0xf7
c000e1a8:	74 0a                	je     c000e1b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e1aa:	83 ec 0c             	sub    esp,0xc
c000e1ad:	68 f9 07 02 c0       	push   0xc00207f9
c000e1b2:	eb 7f                	jmp    c000e233 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e1b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1bc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1c4:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e1c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1d0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1d4:	75 0c                	jne    c000e1e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e1d6:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e1db:	c1 e0 18             	shl    eax,0x18
c000e1de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1e2:	45                   	inc    ebp
c000e1e3:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1e8:	c1 e1 10             	shl    ecx,0x10
c000e1eb:	89 c8                	mov    eax,ecx
c000e1ed:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1f2:	c1 e1 08             	shl    ecx,0x8
c000e1f5:	09 c1                	or     ecx,eax
c000e1f7:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e1fb:	09 c1                	or     ecx,eax
c000e1fd:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e201:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e205:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e209:	c1 f8 03             	sar    eax,0x3
c000e20c:	01 c2                	add    edx,eax
c000e20e:	89 e8                	mov    eax,ebp
c000e210:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e214:	39 c6                	cmp    esi,eax
c000e216:	7f b0                	jg     c000e1c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e218:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e21c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e220:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e223:	7e 22                	jle    c000e247 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e225:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e229:	eb 99                	jmp    c000e1c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e22b:	50                   	push   eax
c000e22c:	50                   	push   eax
c000e22d:	51                   	push   ecx
c000e22e:	68 07 08 02 c0       	push   0xc0020807
c000e233:	e8 8a c7 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c000e238:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e23b:	e8 7e 98 ff ff       	call   c0007abe <free>
c000e240:	83 c4 10             	add    esp,0x10
c000e243:	31 ff                	xor    edi,edi
c000e245:	eb 0f                	jmp    c000e256 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e247:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e24b:	89 30                	mov    DWORD PTR [eax],esi
c000e24d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e251:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e254:	89 30                	mov    DWORD PTR [eax],esi
c000e256:	83 c4 1c             	add    esp,0x1c
c000e259:	89 f8                	mov    eax,edi
c000e25b:	5b                   	pop    ebx
c000e25c:	5e                   	pop    esi
c000e25d:	5f                   	pop    edi
c000e25e:	5d                   	pop    ebp
c000e25f:	c3                   	ret    

c000e260 <Video::putTGA(int, int, unsigned char*, int)>:
c000e260:	55                   	push   ebp
c000e261:	57                   	push   edi
c000e262:	56                   	push   esi
c000e263:	53                   	push   ebx
c000e264:	83 ec 28             	sub    esp,0x28
c000e267:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e26b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e26f:	50                   	push   eax
c000e270:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e274:	50                   	push   eax
c000e275:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e279:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e27d:	56                   	push   esi
c000e27e:	e8 75 fe ff ff       	call   c000e0f8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e283:	83 c4 20             	add    esp,0x20
c000e286:	85 c0                	test   eax,eax
c000e288:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e28c:	74 35                	je     c000e2c3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e28e:	89 c7                	mov    edi,eax
c000e290:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e294:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e298:	39 d8                	cmp    eax,ebx
c000e29a:	7e 27                	jle    c000e2c3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e29c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2a4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2a8:	39 e8                	cmp    eax,ebp
c000e2aa:	7e 14                	jle    c000e2c0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2ac:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2ae:	83 c7 04             	add    edi,0x4
c000e2b1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e2b4:	53                   	push   ebx
c000e2b5:	55                   	push   ebp
c000e2b6:	45                   	inc    ebp
c000e2b7:	56                   	push   esi
c000e2b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	eb e0                	jmp    c000e2a0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2c0:	43                   	inc    ebx
c000e2c1:	eb cd                	jmp    c000e290 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2c3:	83 c4 1c             	add    esp,0x1c
c000e2c6:	5b                   	pop    ebx
c000e2c7:	5e                   	pop    esi
c000e2c8:	5f                   	pop    edi
c000e2c9:	5d                   	pop    ebp
c000e2ca:	c3                   	ret    
c000e2cb:	90                   	nop

c000e2cc <ACPI::close(int, int, void*)>:
c000e2cc:	83 ec 1c             	sub    esp,0x1c
c000e2cf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2d7:	74 0b                	je     c000e2e4 <ACPI::close(int, int, void*)+0x18>
c000e2d9:	b8 00 00 00 00       	mov    eax,0x0
c000e2de:	e9 99 00 00 00       	jmp    c000e37c <ACPI::close(int, int, void*)+0xb0>
c000e2e3:	90                   	nop
c000e2e4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2e9:	75 29                	jne    c000e314 <ACPI::close(int, int, void*)+0x48>
c000e2eb:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2f0:	85 c0                	test   eax,eax
c000e2f2:	74 08                	je     c000e2fc <ACPI::close(int, int, void*)+0x30>
c000e2f4:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2f9:	ff d0                	call   eax
c000e2fb:	90                   	nop
c000e2fc:	83 ec 0c             	sub    esp,0xc
c000e2ff:	68 68 08 02 c0       	push   0xc0020868
c000e304:	e8 e6 25 00 00       	call   c00108ef <KePanic(char const*)>
c000e309:	83 c4 10             	add    esp,0x10
c000e30c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e311:	eb 69                	jmp    c000e37c <ACPI::close(int, int, void*)+0xb0>
c000e313:	90                   	nop
c000e314:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e319:	75 59                	jne    c000e374 <ACPI::close(int, int, void*)+0xa8>
c000e31b:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e320:	85 c0                	test   eax,eax
c000e322:	74 08                	je     c000e32c <ACPI::close(int, int, void*)+0x60>
c000e324:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e329:	ff d0                	call   eax
c000e32b:	90                   	nop
c000e32c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e331:	8d 76 00             	lea    esi,[esi+0x0]
c000e334:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e339:	83 e0 02             	and    eax,0x2
c000e33c:	74 1e                	je     c000e35c <ACPI::close(int, int, void*)+0x90>
c000e33e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e345:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e349:	89 c2                	mov    edx,eax
c000e34b:	ec                   	in     al,dx
c000e34c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e350:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e354:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e358:	eb da                	jmp    c000e334 <ACPI::close(int, int, void*)+0x68>
c000e35a:	66 90                	xchg   ax,ax
c000e35c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e363:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e368:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e36c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e370:	ee                   	out    dx,al
c000e371:	8d 76 00             	lea    esi,[esi+0x0]
c000e374:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e379:	8d 76 00             	lea    esi,[esi+0x0]
c000e37c:	83 c4 1c             	add    esp,0x1c
c000e37f:	c3                   	ret    

c000e380 <findRSDP()>:
c000e380:	83 ec 1c             	sub    esp,0x1c
c000e383:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e388:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e38e:	83 e0 04             	and    eax,0x4
c000e391:	0f b6 c0             	movzx  eax,al
c000e394:	85 c0                	test   eax,eax
c000e396:	75 08                	jne    c000e3a0 <findRSDP()+0x20>
c000e398:	b8 00 00 00 00       	mov    eax,0x0
c000e39d:	eb 75                	jmp    c000e414 <findRSDP()+0x94>
c000e39f:	90                   	nop
c000e3a0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e3a5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3aa:	7f 1c                	jg     c000e3c8 <findRSDP()+0x48>
c000e3ac:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3b1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3b7:	83 e2 fb             	and    edx,0xfffffffb
c000e3ba:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3c0:	b8 00 00 00 00       	mov    eax,0x0
c000e3c5:	eb 4d                	jmp    c000e414 <findRSDP()+0x94>
c000e3c7:	90                   	nop
c000e3c8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3d0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3d8:	77 32                	ja     c000e40c <findRSDP()+0x8c>
c000e3da:	83 ec 04             	sub    esp,0x4
c000e3dd:	6a 08                	push   0x8
c000e3df:	68 03 09 02 c0       	push   0xc0020903
c000e3e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3e8:	e8 93 1f ff ff       	call   c0000380 <memcmp>
c000e3ed:	83 c4 10             	add    esp,0x10
c000e3f0:	85 c0                	test   eax,eax
c000e3f2:	0f 94 c0             	sete   al
c000e3f5:	0f b6 c0             	movzx  eax,al
c000e3f8:	85 c0                	test   eax,eax
c000e3fa:	74 08                	je     c000e404 <findRSDP()+0x84>
c000e3fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e400:	eb 12                	jmp    c000e414 <findRSDP()+0x94>
c000e402:	66 90                	xchg   ax,ax
c000e404:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e409:	eb c5                	jmp    c000e3d0 <findRSDP()+0x50>
c000e40b:	90                   	nop
c000e40c:	b8 00 00 00 00       	mov    eax,0x0
c000e411:	8d 76 00             	lea    esi,[esi+0x0]
c000e414:	83 c4 1c             	add    esp,0x1c
c000e417:	c3                   	ret    

c000e418 <loadACPITables(unsigned char*)>:
c000e418:	57                   	push   edi
c000e419:	56                   	push   esi
c000e41a:	53                   	push   ebx
c000e41b:	83 ec 60             	sub    esp,0x60
c000e41e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e423:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e429:	83 e0 04             	and    eax,0x4
c000e42c:	0f b6 c0             	movzx  eax,al
c000e42f:	85 c0                	test   eax,eax
c000e431:	0f 84 41 02 00 00    	je     c000e678 <loadACPITables(unsigned char*)+0x260>
c000e437:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e43c:	0f b6 c0             	movzx  eax,al
c000e43f:	85 c0                	test   eax,eax
c000e441:	74 79                	je     c000e4bc <loadACPITables(unsigned char*)+0xa4>
c000e443:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e447:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e44b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e44f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e452:	83 e8 24             	sub    eax,0x24
c000e455:	c1 e8 03             	shr    eax,0x3
c000e458:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e45c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e464:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e468:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e46c:	0f 8d ba 00 00 00    	jge    c000e52c <loadACPITables(unsigned char*)+0x114>
c000e472:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e476:	83 c0 24             	add    eax,0x24
c000e479:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e47d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e481:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e485:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e489:	c1 e0 03             	shl    eax,0x3
c000e48c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e490:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e494:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e497:	8b 00                	mov    eax,DWORD PTR [eax]
c000e499:	89 c1                	mov    ecx,eax
c000e49b:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4a0:	8d 50 01             	lea    edx,[eax+0x1]
c000e4a3:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4a9:	89 ca                	mov    edx,ecx
c000e4ab:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4b2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e4b7:	eb ab                	jmp    c000e464 <loadACPITables(unsigned char*)+0x4c>
c000e4b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4bc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4c0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4cb:	83 e8 24             	sub    eax,0x24
c000e4ce:	c1 e8 02             	shr    eax,0x2
c000e4d1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4d5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4e4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4e8:	7d 42                	jge    c000e52c <loadACPITables(unsigned char*)+0x114>
c000e4ea:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4ee:	83 c0 24             	add    eax,0x24
c000e4f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4f9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e4fd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e501:	c1 e0 02             	shl    eax,0x2
c000e504:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e508:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e50c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e50e:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e513:	8d 50 01             	lea    edx,[eax+0x1]
c000e516:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e51c:	89 ca                	mov    edx,ecx
c000e51e:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e525:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e52a:	eb b4                	jmp    c000e4e0 <loadACPITables(unsigned char*)+0xc8>
c000e52c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e534:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e539:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e53d:	0f 8d 39 01 00 00    	jge    c000e67c <loadACPITables(unsigned char*)+0x264>
c000e543:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e547:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e54e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e556:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e55a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e55e:	25 ff 0f 00 00       	and    eax,0xfff
c000e563:	89 c6                	mov    esi,eax
c000e565:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e56b:	83 ec 0c             	sub    esp,0xc
c000e56e:	6a 01                	push   0x1
c000e570:	e8 a8 b0 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e575:	83 c4 10             	add    esp,0x10
c000e578:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e57c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e582:	83 ec 0c             	sub    esp,0xc
c000e585:	6a 01                	push   0x1
c000e587:	6a 01                	push   0x1
c000e589:	50                   	push   eax
c000e58a:	52                   	push   edx
c000e58b:	53                   	push   ebx
c000e58c:	e8 87 ba ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e591:	83 c4 20             	add    esp,0x20
c000e594:	09 f0                	or     eax,esi
c000e596:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e59a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e59e:	c1 e0 03             	shl    eax,0x3
c000e5a1:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e5a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5b2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5ce:	89 c6                	mov    esi,eax
c000e5d0:	89 d7                	mov    edi,edx
c000e5d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5d4:	89 c8                	mov    eax,ecx
c000e5d6:	89 fa                	mov    edx,edi
c000e5d8:	89 f3                	mov    ebx,esi
c000e5da:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5f5:	05 00 10 00 00       	add    eax,0x1000
c000e5fa:	c1 e8 0c             	shr    eax,0xc
c000e5fd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e605:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e609:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e60d:	25 ff 0f 00 00       	and    eax,0xfff
c000e612:	89 c6                	mov    esi,eax
c000e614:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e61a:	83 ec 0c             	sub    esp,0xc
c000e61d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e621:	e8 f7 af ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e626:	83 c4 10             	add    esp,0x10
c000e629:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e62d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e633:	83 ec 0c             	sub    esp,0xc
c000e636:	6a 01                	push   0x1
c000e638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e63c:	50                   	push   eax
c000e63d:	52                   	push   edx
c000e63e:	53                   	push   ebx
c000e63f:	e8 d4 b9 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e644:	83 c4 20             	add    esp,0x20
c000e647:	09 f0                	or     eax,esi
c000e649:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e64d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e651:	83 ec 0c             	sub    esp,0xc
c000e654:	50                   	push   eax
c000e655:	e8 df b2 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000e65a:	83 c4 10             	add    esp,0x10
c000e65d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e661:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e665:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e66c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e671:	e9 be fe ff ff       	jmp    c000e534 <loadACPITables(unsigned char*)+0x11c>
c000e676:	66 90                	xchg   ax,ax
c000e678:	90                   	nop
c000e679:	8d 76 00             	lea    esi,[esi+0x0]
c000e67c:	83 c4 60             	add    esp,0x60
c000e67f:	5b                   	pop    ebx
c000e680:	5e                   	pop    esi
c000e681:	5f                   	pop    edi
c000e682:	c3                   	ret    
c000e683:	90                   	nop

c000e684 <findRSDT(unsigned char*)>:
c000e684:	57                   	push   edi
c000e685:	56                   	push   esi
c000e686:	53                   	push   ebx
c000e687:	83 ec 50             	sub    esp,0x50
c000e68a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e68f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e695:	83 e0 04             	and    eax,0x4
c000e698:	0f b6 c0             	movzx  eax,al
c000e69b:	85 c0                	test   eax,eax
c000e69d:	75 0d                	jne    c000e6ac <findRSDT(unsigned char*)+0x28>
c000e69f:	b8 00 00 00 00       	mov    eax,0x0
c000e6a4:	e9 2b 01 00 00       	jmp    c000e7d4 <findRSDT(unsigned char*)+0x150>
c000e6a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6ac:	89 e0                	mov    eax,esp
c000e6ae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6b6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6ba:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6c2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6d2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6d6:	89 c6                	mov    esi,eax
c000e6d8:	89 d7                	mov    edi,edx
c000e6da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6dc:	89 c8                	mov    eax,ecx
c000e6de:	89 fa                	mov    edx,edi
c000e6e0:	89 f3                	mov    ebx,esi
c000e6e2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6e6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6ee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6f2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6f6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e6fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e706:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e70e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e712:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e716:	25 ff 0f 00 00       	and    eax,0xfff
c000e71b:	89 c6                	mov    esi,eax
c000e71d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e723:	83 ec 0c             	sub    esp,0xc
c000e726:	6a 02                	push   0x2
c000e728:	e8 f0 ae ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e72d:	83 c4 10             	add    esp,0x10
c000e730:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e734:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	6a 01                	push   0x1
c000e73f:	6a 02                	push   0x2
c000e741:	50                   	push   eax
c000e742:	52                   	push   edx
c000e743:	53                   	push   ebx
c000e744:	e8 cf b8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e749:	83 c4 20             	add    esp,0x20
c000e74c:	09 f0                	or     eax,esi
c000e74e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e752:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e756:	25 ff 0f 00 00       	and    eax,0xfff
c000e75b:	89 c6                	mov    esi,eax
c000e75d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e763:	83 ec 0c             	sub    esp,0xc
c000e766:	6a 02                	push   0x2
c000e768:	e8 b0 ae ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e774:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e77a:	83 ec 0c             	sub    esp,0xc
c000e77d:	6a 01                	push   0x1
c000e77f:	6a 02                	push   0x2
c000e781:	50                   	push   eax
c000e782:	52                   	push   edx
c000e783:	53                   	push   ebx
c000e784:	e8 8f b8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e789:	83 c4 20             	add    esp,0x20
c000e78c:	09 f0                	or     eax,esi
c000e78e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e792:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e797:	85 c0                	test   eax,eax
c000e799:	75 11                	jne    c000e7ac <findRSDT(unsigned char*)+0x128>
c000e79b:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e7a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7aa:	eb 24                	jmp    c000e7d0 <findRSDT(unsigned char*)+0x14c>
c000e7ac:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7b1:	83 f8 02             	cmp    eax,0x2
c000e7b4:	75 12                	jne    c000e7c8 <findRSDT(unsigned char*)+0x144>
c000e7b6:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7bd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7c1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7c5:	eb 09                	jmp    c000e7d0 <findRSDT(unsigned char*)+0x14c>
c000e7c7:	90                   	nop
c000e7c8:	b8 00 00 00 00       	mov    eax,0x0
c000e7cd:	eb 05                	jmp    c000e7d4 <findRSDT(unsigned char*)+0x150>
c000e7cf:	90                   	nop
c000e7d0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7d4:	83 c4 50             	add    esp,0x50
c000e7d7:	5b                   	pop    ebx
c000e7d8:	5e                   	pop    esi
c000e7d9:	5f                   	pop    edi
c000e7da:	c3                   	ret    
c000e7db:	90                   	nop

c000e7dc <findDataTable(unsigned char*, char*)>:
c000e7dc:	83 ec 1c             	sub    esp,0x1c
c000e7df:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7e4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7ea:	83 e0 04             	and    eax,0x4
c000e7ed:	0f b6 c0             	movzx  eax,al
c000e7f0:	85 c0                	test   eax,eax
c000e7f2:	75 08                	jne    c000e7fc <findDataTable(unsigned char*, char*)+0x20>
c000e7f4:	b8 00 00 00 00       	mov    eax,0x0
c000e7f9:	eb 5d                	jmp    c000e858 <findDataTable(unsigned char*, char*)+0x7c>
c000e7fb:	90                   	nop
c000e7fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e804:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e809:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e80d:	7d 41                	jge    c000e850 <findDataTable(unsigned char*, char*)+0x74>
c000e80f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e813:	c1 e0 03             	shl    eax,0x3
c000e816:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e81b:	83 ec 04             	sub    esp,0x4
c000e81e:	6a 04                	push   0x4
c000e820:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e824:	50                   	push   eax
c000e825:	e8 56 1b ff ff       	call   c0000380 <memcmp>
c000e82a:	83 c4 10             	add    esp,0x10
c000e82d:	85 c0                	test   eax,eax
c000e82f:	0f 94 c0             	sete   al
c000e832:	0f b6 c0             	movzx  eax,al
c000e835:	85 c0                	test   eax,eax
c000e837:	74 0f                	je     c000e848 <findDataTable(unsigned char*, char*)+0x6c>
c000e839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e83d:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e844:	eb 12                	jmp    c000e858 <findDataTable(unsigned char*, char*)+0x7c>
c000e846:	66 90                	xchg   ax,ax
c000e848:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e84d:	eb b5                	jmp    c000e804 <findDataTable(unsigned char*, char*)+0x28>
c000e84f:	90                   	nop
c000e850:	b8 00 00 00 00       	mov    eax,0x0
c000e855:	8d 76 00             	lea    esi,[esi+0x0]
c000e858:	83 c4 1c             	add    esp,0x1c
c000e85b:	c3                   	ret    

c000e85c <scanMADT()>:
c000e85c:	53                   	push   ebx
c000e85d:	83 ec 38             	sub    esp,0x38
c000e860:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e865:	25 00 04 00 00       	and    eax,0x400
c000e86a:	74 14                	je     c000e880 <scanMADT()+0x24>
c000e86c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e871:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e877:	83 e2 fb             	and    edx,0xfffffffb
c000e87a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e880:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e885:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e88b:	83 e0 04             	and    eax,0x4
c000e88e:	0f b6 c0             	movzx  eax,al
c000e891:	85 c0                	test   eax,eax
c000e893:	0f 84 6b 04 00 00    	je     c000ed04 <scanMADT()+0x4a8>
c000e899:	e8 e2 fa ff ff       	call   c000e380 <findRSDP()>
c000e89e:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e8a3:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8a8:	85 c0                	test   eax,eax
c000e8aa:	75 1c                	jne    c000e8c8 <scanMADT()+0x6c>
c000e8ac:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8b1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8b7:	83 e2 fb             	and    edx,0xfffffffb
c000e8ba:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8c0:	e9 47 04 00 00       	jmp    c000ed0c <scanMADT()+0x4b0>
c000e8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8c8:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8cd:	83 ec 0c             	sub    esp,0xc
c000e8d0:	50                   	push   eax
c000e8d1:	e8 ae fd ff ff       	call   c000e684 <findRSDT(unsigned char*)>
c000e8d6:	83 c4 10             	add    esp,0x10
c000e8d9:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e8de:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8e3:	85 c0                	test   eax,eax
c000e8e5:	75 19                	jne    c000e900 <scanMADT()+0xa4>
c000e8e7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8ec:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8f2:	83 e2 fb             	and    edx,0xfffffffb
c000e8f5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8fb:	e9 0c 04 00 00       	jmp    c000ed0c <scanMADT()+0x4b0>
c000e900:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e905:	83 ec 0c             	sub    esp,0xc
c000e908:	50                   	push   eax
c000e909:	e8 0a fb ff ff       	call   c000e418 <loadACPITables(unsigned char*)>
c000e90e:	83 c4 10             	add    esp,0x10
c000e911:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e916:	83 ec 08             	sub    esp,0x8
c000e919:	68 0c 09 02 c0       	push   0xc002090c
c000e91e:	50                   	push   eax
c000e91f:	e8 b8 fe ff ff       	call   c000e7dc <findDataTable(unsigned char*, char*)>
c000e924:	83 c4 10             	add    esp,0x10
c000e927:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e92b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e930:	75 1a                	jne    c000e94c <scanMADT()+0xf0>
c000e932:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e937:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e93d:	83 e2 fe             	and    edx,0xfffffffe
c000e940:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e946:	e9 c1 03 00 00       	jmp    c000ed0c <scanMADT()+0x4b0>
c000e94b:	90                   	nop
c000e94c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e954:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e958:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e95b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e95f:	0f 87 a7 03 00 00    	ja     c000ed0c <scanMADT()+0x4b0>
c000e965:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e96d:	0f 87 99 03 00 00    	ja     c000ed0c <scanMADT()+0x4b0>
c000e973:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e977:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e97b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e97f:	8d 50 01             	lea    edx,[eax+0x1]
c000e982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e986:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e98a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e98e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e992:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e996:	8d 50 01             	lea    edx,[eax+0x1]
c000e999:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e99d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9a5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9a9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e9ae:	83 f8 02             	cmp    eax,0x2
c000e9b1:	0f 86 51 03 00 00    	jbe    c000ed08 <scanMADT()+0x4ac>
c000e9b7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9bc:	85 c0                	test   eax,eax
c000e9be:	75 58                	jne    c000ea18 <scanMADT()+0x1bc>
c000e9c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e9c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9cb:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9d1:	0f b6 d2             	movzx  edx,dl
c000e9d4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9d8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9dc:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e9e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9e6:	8d 50 01             	lea    edx,[eax+0x1]
c000e9e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9ed:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9f3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e9f6:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e9fc:	0f b6 d2             	movzx  edx,dl
c000e9ff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea03:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea07:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ea0d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea12:	e9 d9 02 00 00       	jmp    c000ecf0 <scanMADT()+0x494>
c000ea17:	90                   	nop
c000ea18:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea1d:	83 f8 01             	cmp    eax,0x1
c000ea20:	0f 85 1a 01 00 00    	jne    c000eb40 <scanMADT()+0x2e4>
c000ea26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea2a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea31:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea37:	0f b6 d2             	movzx  edx,dl
c000ea3a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea3e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea42:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea48:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea55:	01 d0                	add    eax,edx
c000ea57:	83 c0 2c             	add    eax,0x2c
c000ea5a:	8a 00                	mov    al,BYTE PTR [eax]
c000ea5c:	0f b6 d0             	movzx  edx,al
c000ea5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea63:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea6a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea6e:	0f b6 c0             	movzx  eax,al
c000ea71:	c1 e0 08             	shl    eax,0x8
c000ea74:	89 d1                	mov    ecx,edx
c000ea76:	09 c1                	or     ecx,eax
c000ea78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea7c:	8d 50 02             	lea    edx,[eax+0x2]
c000ea7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea83:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea87:	0f b6 c0             	movzx  eax,al
c000ea8a:	c1 e0 10             	shl    eax,0x10
c000ea8d:	09 c1                	or     ecx,eax
c000ea8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea93:	8d 50 03             	lea    edx,[eax+0x3]
c000ea96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea9a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea9e:	0f b6 c0             	movzx  eax,al
c000eaa1:	c1 e0 18             	shl    eax,0x18
c000eaa4:	09 c1                	or     ecx,eax
c000eaa6:	89 ca                	mov    edx,ecx
c000eaa8:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eaad:	0f b6 c0             	movzx  eax,al
c000eab0:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000eab7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eabc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eac0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eac4:	01 d0                	add    eax,edx
c000eac6:	83 c0 2c             	add    eax,0x2c
c000eac9:	8a 00                	mov    al,BYTE PTR [eax]
c000eacb:	0f b6 d0             	movzx  edx,al
c000eace:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead2:	8d 48 01             	lea    ecx,[eax+0x1]
c000ead5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ead9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eadd:	0f b6 c0             	movzx  eax,al
c000eae0:	c1 e0 08             	shl    eax,0x8
c000eae3:	89 d1                	mov    ecx,edx
c000eae5:	09 c1                	or     ecx,eax
c000eae7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaeb:	8d 50 02             	lea    edx,[eax+0x2]
c000eaee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaf2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaf6:	0f b6 c0             	movzx  eax,al
c000eaf9:	c1 e0 10             	shl    eax,0x10
c000eafc:	09 c1                	or     ecx,eax
c000eafe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb02:	8d 50 03             	lea    edx,[eax+0x3]
c000eb05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb09:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb0d:	0f b6 c0             	movzx  eax,al
c000eb10:	c1 e0 18             	shl    eax,0x18
c000eb13:	09 c1                	or     ecx,eax
c000eb15:	89 ca                	mov    edx,ecx
c000eb17:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb1c:	0f b6 c0             	movzx  eax,al
c000eb1f:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb26:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb2b:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb30:	83 c0 01             	add    eax,0x1
c000eb33:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb38:	e9 b3 01 00 00       	jmp    c000ecf0 <scanMADT()+0x494>
c000eb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb40:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb45:	83 f8 02             	cmp    eax,0x2
c000eb48:	0f 85 ea 00 00 00    	jne    c000ec38 <scanMADT()+0x3dc>
c000eb4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb52:	8d 50 01             	lea    edx,[eax+0x1]
c000eb55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb5d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb61:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb69:	8d 50 01             	lea    edx,[eax+0x1]
c000eb6c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb74:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb78:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb84:	01 d0                	add    eax,edx
c000eb86:	83 c0 2c             	add    eax,0x2c
c000eb89:	8a 00                	mov    al,BYTE PTR [eax]
c000eb8b:	0f b6 d0             	movzx  edx,al
c000eb8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb92:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb99:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb9d:	0f b6 c0             	movzx  eax,al
c000eba0:	c1 e0 08             	shl    eax,0x8
c000eba3:	89 d1                	mov    ecx,edx
c000eba5:	09 c1                	or     ecx,eax
c000eba7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebab:	8d 50 02             	lea    edx,[eax+0x2]
c000ebae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebb2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebb6:	0f b6 c0             	movzx  eax,al
c000ebb9:	c1 e0 10             	shl    eax,0x10
c000ebbc:	09 c1                	or     ecx,eax
c000ebbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc2:	8d 50 03             	lea    edx,[eax+0x3]
c000ebc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebc9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebcd:	0f b6 c0             	movzx  eax,al
c000ebd0:	c1 e0 18             	shl    eax,0x18
c000ebd3:	09 c8                	or     eax,ecx
c000ebd5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebd9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebde:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebe2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebe6:	01 d0                	add    eax,edx
c000ebe8:	83 c0 2c             	add    eax,0x2c
c000ebeb:	8a 00                	mov    al,BYTE PTR [eax]
c000ebed:	0f b6 c0             	movzx  eax,al
c000ebf0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ebf4:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ebf7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebfb:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ebff:	0f b6 d2             	movzx  edx,dl
c000ec02:	c1 e2 08             	shl    edx,0x8
c000ec05:	09 d0                	or     eax,edx
c000ec07:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec0c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec11:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec1a:	88 90 80 1f 02 c0    	mov    BYTE PTR [eax-0x3ffde080],dl
c000ec20:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000ec25:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec2a:	66 89 84 12 60 77 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd88a0],ax
c000ec32:	e9 b9 00 00 00       	jmp    c000ecf0 <scanMADT()+0x494>
c000ec37:	90                   	nop
c000ec38:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec3d:	83 f8 04             	cmp    eax,0x4
c000ec40:	0f 85 9a 00 00 00    	jne    c000ece0 <scanMADT()+0x484>
c000ec46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec4a:	8d 50 01             	lea    edx,[eax+0x1]
c000ec4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec55:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec59:	0f b6 c0             	movzx  eax,al
c000ec5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec60:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec68:	01 d0                	add    eax,edx
c000ec6a:	83 c0 2c             	add    eax,0x2c
c000ec6d:	8a 00                	mov    al,BYTE PTR [eax]
c000ec6f:	0f b6 d0             	movzx  edx,al
c000ec72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec76:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec7d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec81:	0f b6 c0             	movzx  eax,al
c000ec84:	c1 e0 08             	shl    eax,0x8
c000ec87:	09 d0                	or     eax,edx
c000ec89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec8d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec96:	8d 50 01             	lea    edx,[eax+0x1]
c000ec99:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eca1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eca5:	0f b6 c0             	movzx  eax,al
c000eca8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecb0:	c1 e0 08             	shl    eax,0x8
c000ecb3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ecb7:	89 c1                	mov    ecx,eax
c000ecb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecbd:	c1 e0 18             	shl    eax,0x18
c000ecc0:	89 c3                	mov    ebx,eax
c000ecc2:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ecc7:	8d 50 01             	lea    edx,[eax+0x1]
c000ecca:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ecd0:	09 d9                	or     ecx,ebx
c000ecd2:	89 ca                	mov    edx,ecx
c000ecd4:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ecdb:	eb 13                	jmp    c000ecf0 <scanMADT()+0x494>
c000ecdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ece0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ece5:	83 f8 05             	cmp    eax,0x5
c000ece8:	75 06                	jne    c000ecf0 <scanMADT()+0x494>
c000ecea:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ecef:	90                   	nop
c000ecf0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ecf5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ecf9:	01 d0                	add    eax,edx
c000ecfb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ecff:	e9 50 fc ff ff       	jmp    c000e954 <scanMADT()+0xf8>
c000ed04:	90                   	nop
c000ed05:	eb 05                	jmp    c000ed0c <scanMADT()+0x4b0>
c000ed07:	90                   	nop
c000ed08:	90                   	nop
c000ed09:	8d 76 00             	lea    esi,[esi+0x0]
c000ed0c:	83 c4 38             	add    esp,0x38
c000ed0f:	5b                   	pop    ebx
c000ed10:	c3                   	ret    
c000ed11:	90                   	nop
c000ed12:	66 90                	xchg   ax,ax

c000ed14 <ACPI::ACPI()>:
c000ed14:	83 ec 0c             	sub    esp,0xc
c000ed17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed1b:	83 ec 08             	sub    esp,0x8
c000ed1e:	68 11 09 02 c0       	push   0xc0020911
c000ed23:	50                   	push   eax
c000ed24:	e8 65 d2 ff ff       	call   c000bf8e <Device::Device(char const*)>
c000ed29:	83 c4 10             	add    esp,0x10
c000ed2c:	ba 80 0a 02 c0       	mov    edx,0xc0020a80
c000ed31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed35:	89 10                	mov    DWORD PTR [eax],edx
c000ed37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed3b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed46:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed54:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed5e:	e8 f9 fa ff ff       	call   c000e85c <scanMADT()>
c000ed63:	90                   	nop
c000ed64:	83 c4 0c             	add    esp,0xc
c000ed67:	c3                   	ret    

c000ed68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed68:	83 ec 2c             	sub    esp,0x2c
c000ed6b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed73:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed77:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ed7b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed80:	88 d0                	mov    al,dl
c000ed82:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed86:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed8b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed93:	90                   	nop
c000ed94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed98:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed9e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000eda2:	0f 8d b0 00 00 00    	jge    c000ee58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000eda8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edb0:	83 c2 2a             	add    edx,0x2a
c000edb3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000edb7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000edbc:	0f b7 c0             	movzx  eax,ax
c000edbf:	39 c2                	cmp    edx,eax
c000edc1:	0f 85 85 00 00 00    	jne    c000ee4c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edcf:	83 c2 2a             	add    edx,0x2a
c000edd2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edd6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000eddb:	0f b6 c0             	movzx  eax,al
c000edde:	39 c2                	cmp    edx,eax
c000ede0:	75 6a                	jne    c000ee4c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ede2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ede7:	85 c0                	test   eax,eax
c000ede9:	74 3d                	je     c000ee28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000edeb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edf3:	83 c2 2a             	add    edx,0x2a
c000edf6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000edfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee01:	39 c2                	cmp    edx,eax
c000ee03:	74 13                	je     c000ee18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ee05:	83 ec 0c             	sub    esp,0xc
c000ee08:	68 8c 08 02 c0       	push   0xc002088c
c000ee0d:	e8 dd 1a 00 00       	call   c00108ef <KePanic(char const*)>
c000ee12:	83 c4 10             	add    esp,0x10
c000ee15:	8d 76 00             	lea    esi,[esi+0x0]
c000ee18:	83 ec 0c             	sub    esp,0xc
c000ee1b:	68 16 09 02 c0       	push   0xc0020916
c000ee20:	e8 ca 1a 00 00       	call   c00108ef <KePanic(char const*)>
c000ee25:	83 c4 10             	add    esp,0x10
c000ee28:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee2c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee34:	83 c2 2a             	add    edx,0x2a
c000ee37:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee3b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee3d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee40:	89 01                	mov    DWORD PTR [ecx],eax
c000ee42:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee45:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee4a:	66 90                	xchg   ax,ax
c000ee4c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee51:	e9 3e ff ff ff       	jmp    c000ed94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee56:	66 90                	xchg   ax,ax
c000ee58:	90                   	nop
c000ee59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee5d:	83 c4 2c             	add    esp,0x2c
c000ee60:	c2 04 00             	ret    0x4
c000ee63:	90                   	nop

c000ee64 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee64:	83 ec 1c             	sub    esp,0x1c
c000ee67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee6b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee6f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee73:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee78:	88 c8                	mov    al,cl
c000ee7a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee7e:	88 d0                	mov    al,dl
c000ee80:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee88:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee92:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee95:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ee99:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ee9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eea7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eeab:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000eeae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eeb2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000eeb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eebb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eec1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eec5:	83 c0 01             	add    eax,0x1
c000eec8:	88 c1                	mov    cl,al
c000eeca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eece:	83 c2 2a             	add    edx,0x2a
c000eed1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eedf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eee6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eeea:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eeee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eef8:	8d 50 01             	lea    edx,[eax+0x1]
c000eefb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeff:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef09:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef0f:	3d 00 02 00 00       	cmp    eax,0x200
c000ef14:	75 12                	jne    c000ef28 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ef16:	83 ec 0c             	sub    esp,0xc
c000ef19:	68 25 09 02 c0       	push   0xc0020925
c000ef1e:	e8 cc 19 00 00       	call   c00108ef <KePanic(char const*)>
c000ef23:	83 c4 10             	add    esp,0x10
c000ef26:	66 90                	xchg   ax,ax
c000ef28:	90                   	nop
c000ef29:	83 c4 1c             	add    esp,0x1c
c000ef2c:	c3                   	ret    
c000ef2d:	90                   	nop
c000ef2e:	66 90                	xchg   ax,ax

c000ef30 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef30:	b8 00 00 00 00       	mov    eax,0x0
c000ef35:	c3                   	ret    
c000ef36:	66 90                	xchg   ax,ax

c000ef38 <ACPI::detectPCI()>:
c000ef38:	53                   	push   ebx
c000ef39:	83 ec 28             	sub    esp,0x28
c000ef3c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef41:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef46:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef4b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef51:	83 e0 04             	and    eax,0x4
c000ef54:	0f b6 c0             	movzx  eax,al
c000ef57:	85 c0                	test   eax,eax
c000ef59:	74 2d                	je     c000ef88 <ACPI::detectPCI()+0x50>
c000ef5b:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef60:	83 ec 08             	sub    esp,0x8
c000ef63:	68 42 09 02 c0       	push   0xc0020942
c000ef68:	50                   	push   eax
c000ef69:	e8 6e f8 ff ff       	call   c000e7dc <findDataTable(unsigned char*, char*)>
c000ef6e:	83 c4 10             	add    esp,0x10
c000ef71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef75:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef7a:	74 0c                	je     c000ef88 <ACPI::detectPCI()+0x50>
c000ef7c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef81:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef86:	66 90                	xchg   ax,ax
c000ef88:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef94:	8a 00                	mov    al,BYTE PTR [eax]
c000ef96:	0f b6 c0             	movzx  eax,al
c000ef99:	83 f8 01             	cmp    eax,0x1
c000ef9c:	75 0e                	jne    c000efac <ACPI::detectPCI()+0x74>
c000ef9e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efa3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efa8:	eb 2e                	jmp    c000efd8 <ACPI::detectPCI()+0xa0>
c000efaa:	66 90                	xchg   ax,ax
c000efac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efb0:	8a 00                	mov    al,BYTE PTR [eax]
c000efb2:	0f b6 c0             	movzx  eax,al
c000efb5:	83 f8 02             	cmp    eax,0x2
c000efb8:	75 1e                	jne    c000efd8 <ACPI::detectPCI()+0xa0>
c000efba:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efbf:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efc4:	85 c0                	test   eax,eax
c000efc6:	74 10                	je     c000efd8 <ACPI::detectPCI()+0xa0>
c000efc8:	83 ec 0c             	sub    esp,0xc
c000efcb:	68 bc 08 02 c0       	push   0xc00208bc
c000efd0:	e8 1a 19 00 00       	call   c00108ef <KePanic(char const*)>
c000efd5:	83 c4 10             	add    esp,0x10
c000efd8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000efdc:	83 f0 01             	xor    eax,0x1
c000efdf:	0f b6 c0             	movzx  eax,al
c000efe2:	85 c0                	test   eax,eax
c000efe4:	74 46                	je     c000f02c <ACPI::detectPCI()+0xf4>
c000efe6:	e8 45 11 ff ff       	call   c0000130 <manualPCIProbe>
c000efeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eff4:	75 0e                	jne    c000f004 <ACPI::detectPCI()+0xcc>
c000eff6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000effb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f000:	eb 2a                	jmp    c000f02c <ACPI::detectPCI()+0xf4>
c000f002:	66 90                	xchg   ax,ax
c000f004:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f009:	75 21                	jne    c000f02c <ACPI::detectPCI()+0xf4>
c000f00b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f010:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f015:	85 c0                	test   eax,eax
c000f017:	74 13                	je     c000f02c <ACPI::detectPCI()+0xf4>
c000f019:	83 ec 0c             	sub    esp,0xc
c000f01c:	68 bc 08 02 c0       	push   0xc00208bc
c000f021:	e8 c9 18 00 00       	call   c00108ef <KePanic(char const*)>
c000f026:	83 c4 10             	add    esp,0x10
c000f029:	8d 76 00             	lea    esi,[esi+0x0]
c000f02c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f031:	85 c0                	test   eax,eax
c000f033:	0f 84 87 00 00 00    	je     c000f0c0 <ACPI::detectPCI()+0x188>
c000f039:	83 ec 0c             	sub    esp,0xc
c000f03c:	68 47 09 02 c0       	push   0xc0020947
c000f041:	e8 2c 12 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c000f046:	83 c4 10             	add    esp,0x10
c000f049:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f051:	83 ec 0c             	sub    esp,0xc
c000f054:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f058:	e8 51 8a ff ff       	call   c0007aae <malloc>
c000f05d:	83 c4 10             	add    esp,0x10
c000f060:	89 c3                	mov    ebx,eax
c000f062:	83 ec 0c             	sub    esp,0xc
c000f065:	53                   	push   ebx
c000f066:	e8 31 b0 00 00       	call   c001a09c <PCI::PCI()>
c000f06b:	83 c4 10             	add    esp,0x10
c000f06e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f076:	83 ec 08             	sub    esp,0x8
c000f079:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f07d:	50                   	push   eax
c000f07e:	e8 73 cd ff ff       	call   c000bdf6 <Device::addChild(Device*)>
c000f083:	83 c4 10             	add    esp,0x10
c000f086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f08a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f08c:	83 c0 08             	add    eax,0x8
c000f08f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f091:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f096:	85 d2                	test   edx,edx
c000f098:	74 0a                	je     c000f0a4 <ACPI::detectPCI()+0x16c>
c000f09a:	ba 01 00 00 00       	mov    edx,0x1
c000f09f:	eb 0b                	jmp    c000f0ac <ACPI::detectPCI()+0x174>
c000f0a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0a4:	ba 02 00 00 00       	mov    edx,0x2
c000f0a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0ac:	6a 00                	push   0x0
c000f0ae:	6a 00                	push   0x0
c000f0b0:	52                   	push   edx
c000f0b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0b5:	ff d0                	call   eax
c000f0b7:	83 c4 10             	add    esp,0x10
c000f0ba:	e9 91 00 00 00       	jmp    c000f150 <ACPI::detectPCI()+0x218>
c000f0bf:	90                   	nop
c000f0c0:	83 ec 0c             	sub    esp,0xc
c000f0c3:	68 5f 09 02 c0       	push   0xc002095f
c000f0c8:	e8 a5 11 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c000f0cd:	83 c4 10             	add    esp,0x10
c000f0d0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0d7:	83 ec 0c             	sub    esp,0xc
c000f0da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0de:	e8 cb 89 ff ff       	call   c0007aae <malloc>
c000f0e3:	83 c4 10             	add    esp,0x10
c000f0e6:	89 c3                	mov    ebx,eax
c000f0e8:	83 ec 0c             	sub    esp,0xc
c000f0eb:	53                   	push   ebx
c000f0ec:	e8 45 bb 00 00       	call   c001ac36 <IDE::IDE()>
c000f0f1:	83 c4 10             	add    esp,0x10
c000f0f4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0fc:	83 ec 08             	sub    esp,0x8
c000f0ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f103:	50                   	push   eax
c000f104:	e8 ed cc ff ff       	call   c000bdf6 <Device::addChild(Device*)>
c000f109:	83 c4 10             	add    esp,0x10
c000f10c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f110:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f11a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f11e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f127:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f12b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f138:	8b 00                	mov    eax,DWORD PTR [eax]
c000f13a:	83 c0 08             	add    eax,0x8
c000f13d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f13f:	6a 00                	push   0x0
c000f141:	6a 00                	push   0x0
c000f143:	6a 00                	push   0x0
c000f145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f149:	ff d0                	call   eax
c000f14b:	83 c4 10             	add    esp,0x10
c000f14e:	66 90                	xchg   ax,ax
c000f150:	90                   	nop
c000f151:	83 c4 28             	add    esp,0x28
c000f154:	5b                   	pop    ebx
c000f155:	c3                   	ret    
c000f156:	66 90                	xchg   ax,ax

c000f158 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f158:	83 ec 1c             	sub    esp,0x1c
c000f15b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f15f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f162:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f166:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f16b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f170:	83 ec 08             	sub    esp,0x8
c000f173:	52                   	push   edx
c000f174:	50                   	push   eax
c000f175:	e8 f6 7f ff ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c000f17a:	83 c4 10             	add    esp,0x10
c000f17d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f181:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f186:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f18b:	83 ec 04             	sub    esp,0x4
c000f18e:	6a 01                	push   0x1
c000f190:	52                   	push   edx
c000f191:	50                   	push   eax
c000f192:	e8 f3 80 ff ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c000f197:	83 c4 10             	add    esp,0x10
c000f19a:	90                   	nop
c000f19b:	83 c4 1c             	add    esp,0x1c
c000f19e:	c3                   	ret    
c000f19f:	90                   	nop

c000f1a0 <ACPI::sleep()>:
c000f1a0:	83 ec 0c             	sub    esp,0xc
c000f1a3:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1a8:	85 c0                	test   eax,eax
c000f1aa:	74 08                	je     c000f1b4 <ACPI::sleep()+0x14>
c000f1ac:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1b1:	ff d0                	call   eax
c000f1b3:	90                   	nop
c000f1b4:	90                   	nop
c000f1b5:	83 c4 0c             	add    esp,0xc
c000f1b8:	c3                   	ret    
c000f1b9:	90                   	nop
c000f1ba:	66 90                	xchg   ax,ax

c000f1bc <ACPI::open(int, int, void*)>:
c000f1bc:	57                   	push   edi
c000f1bd:	56                   	push   esi
c000f1be:	53                   	push   ebx
c000f1bf:	81 ec 70 01 00 00    	sub    esp,0x170
c000f1c5:	83 ec 0c             	sub    esp,0xc
c000f1c8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f1cf:	e8 64 fd ff ff       	call   c000ef38 <ACPI::detectPCI()>
c000f1d4:	83 c4 10             	add    esp,0x10
c000f1d7:	83 ec 0c             	sub    esp,0xc
c000f1da:	68 e4 08 02 c0       	push   0xc00208e4
c000f1df:	e8 8e 10 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c000f1e4:	83 c4 10             	add    esp,0x10
c000f1e7:	b8 4c 05 00 00       	mov    eax,0x54c
c000f1ec:	8a 00                	mov    al,BYTE PTR [eax]
c000f1ee:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000f1f5:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f1fd:	83 f8 01             	cmp    eax,0x1
c000f200:	75 12                	jne    c000f214 <ACPI::open(int, int, void*)+0x58>
c000f202:	83 ec 0c             	sub    esp,0xc
c000f205:	68 74 09 02 c0       	push   0xc0020974
c000f20a:	e8 bd 49 00 00       	call   c0013bcc <Thr::loadKernelSymbolTable(char const*)>
c000f20f:	83 c4 10             	add    esp,0x10
c000f212:	eb 34                	jmp    c000f248 <ACPI::open(int, int, void*)+0x8c>
c000f214:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f21c:	3d bb 00 00 00       	cmp    eax,0xbb
c000f221:	75 15                	jne    c000f238 <ACPI::open(int, int, void*)+0x7c>
c000f223:	83 ec 0c             	sub    esp,0xc
c000f226:	68 92 09 02 c0       	push   0xc0020992
c000f22b:	e8 9c 49 00 00       	call   c0013bcc <Thr::loadKernelSymbolTable(char const*)>
c000f230:	83 c4 10             	add    esp,0x10
c000f233:	eb 13                	jmp    c000f248 <ACPI::open(int, int, void*)+0x8c>
c000f235:	8d 76 00             	lea    esi,[esi+0x0]
c000f238:	83 ec 0c             	sub    esp,0xc
c000f23b:	68 b0 09 02 c0       	push   0xc00209b0
c000f240:	e8 aa 16 00 00       	call   c00108ef <KePanic(char const*)>
c000f245:	83 c4 10             	add    esp,0x10
c000f248:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f250:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f25b:	83 ec 0c             	sub    esp,0xc
c000f25e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f265:	e8 44 88 ff ff       	call   c0007aae <malloc>
c000f26a:	83 c4 10             	add    esp,0x10
c000f26d:	89 c3                	mov    ebx,eax
c000f26f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f274:	83 ec 04             	sub    esp,0x4
c000f277:	50                   	push   eax
c000f278:	68 ca 09 02 c0       	push   0xc00209ca
c000f27d:	53                   	push   ebx
c000f27e:	e8 c1 bc ff ff       	call   c000af44 <File::File(char const*, Process*)>
c000f283:	83 c4 10             	add    esp,0x10
c000f286:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f28d:	83 ec 08             	sub    esp,0x8
c000f290:	6a 01                	push   0x1
c000f292:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f299:	e8 62 bd ff ff       	call   c000b000 <File::open(FileOpenMode)>
c000f29e:	83 c4 10             	add    esp,0x10
c000f2a1:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f2a8:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f2b0:	75 16                	jne    c000f2c8 <ACPI::open(int, int, void*)+0x10c>
c000f2b2:	83 ec 0c             	sub    esp,0xc
c000f2b5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2bc:	e8 9d bd ff ff       	call   c000b05e <File::close()>
c000f2c1:	83 c4 10             	add    esp,0x10
c000f2c4:	eb 0a                	jmp    c000f2d0 <ACPI::open(int, int, void*)+0x114>
c000f2c6:	66 90                	xchg   ax,ax
c000f2c8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f2d0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f2d8:	74 1e                	je     c000f2f8 <ACPI::open(int, int, void*)+0x13c>
c000f2da:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f2e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2e3:	83 c0 08             	add    eax,0x8
c000f2e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2e8:	83 ec 0c             	sub    esp,0xc
c000f2eb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2f2:	ff d0                	call   eax
c000f2f4:	83 c4 10             	add    esp,0x10
c000f2f7:	90                   	nop
c000f2f8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f2ff:	83 f0 01             	xor    eax,0x1
c000f302:	0f b6 c0             	movzx  eax,al
c000f305:	85 c0                	test   eax,eax
c000f307:	74 43                	je     c000f34c <ACPI::open(int, int, void*)+0x190>
c000f309:	83 ec 0c             	sub    esp,0xc
c000f30c:	68 e8 09 02 c0       	push   0xc00209e8
c000f311:	e8 5c 0f 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c000f316:	83 c4 10             	add    esp,0x10
c000f319:	83 ec 04             	sub    esp,0x4
c000f31c:	6a 0c                	push   0xc
c000f31e:	68 03 0a 02 c0       	push   0xc0020a03
c000f323:	68 14 0a 02 c0       	push   0xc0020a14
c000f328:	e8 4b 3c 00 00       	call   c0012f78 <Reg::readIntWithDefault(char*, char*, int)>
c000f32d:	83 c4 10             	add    esp,0x10
c000f330:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f337:	83 ec 0c             	sub    esp,0xc
c000f33a:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f341:	e8 06 a5 ff ff       	call   c000984c <Virt::setupPageSwapping(int)>
c000f346:	83 c4 10             	add    esp,0x10
c000f349:	8d 76 00             	lea    esi,[esi+0x0]
c000f34c:	83 ec 0c             	sub    esp,0xc
c000f34f:	68 35 fa 01 c0       	push   0xc001fa35
c000f354:	e8 19 0f 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c000f359:	83 c4 10             	add    esp,0x10
c000f35c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f363:	83 ec 08             	sub    esp,0x8
c000f366:	6a 13                	push   0x13
c000f368:	50                   	push   eax
c000f369:	e8 a0 cd ff ff       	call   c000c10e <getDevicesOfType(DeviceType)>
c000f36e:	83 c4 0c             	add    esp,0xc
c000f371:	8d 76 00             	lea    esi,[esi+0x0]
c000f374:	83 ec 0c             	sub    esp,0xc
c000f377:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f37e:	50                   	push   eax
c000f37f:	e8 9c fa 00 00       	call   c001ee20 <LinkedList<Device>::isEmpty()>
c000f384:	83 c4 10             	add    esp,0x10
c000f387:	83 f0 01             	xor    eax,0x1
c000f38a:	0f b6 c0             	movzx  eax,al
c000f38d:	85 c0                	test   eax,eax
c000f38f:	0f 84 47 01 00 00    	je     c000f4dc <ACPI::open(int, int, void*)+0x320>
c000f395:	83 ec 0c             	sub    esp,0xc
c000f398:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f39f:	50                   	push   eax
c000f3a0:	e8 97 fa 00 00       	call   c001ee3c <LinkedList<Device>::getFirstElement()>
c000f3a5:	83 c4 10             	add    esp,0x10
c000f3a8:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f3af:	83 ec 0c             	sub    esp,0xc
c000f3b2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3b9:	50                   	push   eax
c000f3ba:	e8 85 fa 00 00       	call   c001ee44 <LinkedList<Device>::removeFirst()>
c000f3bf:	83 c4 10             	add    esp,0x10
c000f3c2:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f3c9:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f3d0:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f3d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3db:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f3e1:	ba 09 00 00 00       	mov    edx,0x9
c000f3e6:	fc                   	cld    
c000f3e7:	89 c7                	mov    edi,eax
c000f3e9:	89 de                	mov    esi,ebx
c000f3eb:	89 d1                	mov    ecx,edx
c000f3ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f3ef:	83 ec 08             	sub    esp,0x8
c000f3f2:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f3f6:	50                   	push   eax
c000f3f7:	83 ec 24             	sub    esp,0x24
c000f3fa:	89 e0                	mov    eax,esp
c000f3fc:	89 c3                	mov    ebx,eax
c000f3fe:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f402:	ba 09 00 00 00       	mov    edx,0x9
c000f407:	89 df                	mov    edi,ebx
c000f409:	89 c6                	mov    esi,eax
c000f40b:	89 d1                	mov    ecx,edx
c000f40d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f40f:	e8 72 b1 00 00       	call   c001a586 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f414:	83 c4 30             	add    esp,0x30
c000f417:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f41e:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f426:	0f 84 48 ff ff ff    	je     c000f374 <ACPI::open(int, int, void*)+0x1b8>
c000f42c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f437:	83 ec 0c             	sub    esp,0xc
c000f43a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f441:	e8 68 86 ff ff       	call   c0007aae <malloc>
c000f446:	83 c4 10             	add    esp,0x10
c000f449:	89 c3                	mov    ebx,eax
c000f44b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f450:	83 ec 04             	sub    esp,0x4
c000f453:	50                   	push   eax
c000f454:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f45b:	53                   	push   ebx
c000f45c:	e8 e3 ba ff ff       	call   c000af44 <File::File(char const*, Process*)>
c000f461:	83 c4 10             	add    esp,0x10
c000f464:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f46b:	83 ec 0c             	sub    esp,0xc
c000f46e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f475:	e8 f4 bd ff ff       	call   c000b26e <File::exists()>
c000f47a:	83 c4 10             	add    esp,0x10
c000f47d:	0f b6 c0             	movzx  eax,al
c000f480:	85 c0                	test   eax,eax
c000f482:	74 28                	je     c000f4ac <ACPI::open(int, int, void*)+0x2f0>
c000f484:	83 ec 08             	sub    esp,0x8
c000f487:	6a 01                	push   0x1
c000f489:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f490:	e8 b1 51 00 00       	call   c0014646 <Thr::loadDLL(char const*, bool)>
c000f495:	83 c4 10             	add    esp,0x10
c000f498:	83 ec 08             	sub    esp,0x8
c000f49b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f4a2:	50                   	push   eax
c000f4a3:	e8 cf 53 00 00       	call   c0014877 <Thr::executeDLL(unsigned long, void*)>
c000f4a8:	83 c4 10             	add    esp,0x10
c000f4ab:	90                   	nop
c000f4ac:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f4b4:	0f 84 ba fe ff ff    	je     c000f374 <ACPI::open(int, int, void*)+0x1b8>
c000f4ba:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f4c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c3:	83 c0 08             	add    eax,0x8
c000f4c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c8:	83 ec 0c             	sub    esp,0xc
c000f4cb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f4d2:	ff d0                	call   eax
c000f4d4:	83 c4 10             	add    esp,0x10
c000f4d7:	e9 98 fe ff ff       	jmp    c000f374 <ACPI::open(int, int, void*)+0x1b8>
c000f4dc:	83 ec 0c             	sub    esp,0xc
c000f4df:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f4e6:	50                   	push   eax
c000f4e7:	e8 30 f9 00 00       	call   c001ee1c <LinkedList<Device>::~LinkedList()>
c000f4ec:	83 c4 10             	add    esp,0x10
c000f4ef:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f4f5:	83 ec 08             	sub    esp,0x8
c000f4f8:	6a 01                	push   0x1
c000f4fa:	68 1b 0a 02 c0       	push   0xc0020a1b
c000f4ff:	e8 42 51 00 00       	call   c0014646 <Thr::loadDLL(char const*, bool)>
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	83 ec 08             	sub    esp,0x8
c000f50a:	53                   	push   ebx
c000f50b:	50                   	push   eax
c000f50c:	e8 66 53 00 00       	call   c0014877 <Thr::executeDLL(unsigned long, void*)>
c000f511:	83 c4 10             	add    esp,0x10
c000f514:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f519:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f51f:	83 e0 04             	and    eax,0x4
c000f522:	0f b6 c0             	movzx  eax,al
c000f525:	85 c0                	test   eax,eax
c000f527:	0f 84 1b 01 00 00    	je     c000f648 <ACPI::open(int, int, void*)+0x48c>
c000f52d:	83 ec 0c             	sub    esp,0xc
c000f530:	68 38 0a 02 c0       	push   0xc0020a38
c000f535:	e8 38 0d 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c000f53a:	83 c4 10             	add    esp,0x10
c000f53d:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f548:	83 ec 0c             	sub    esp,0xc
c000f54b:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f552:	e8 57 85 ff ff       	call   c0007aae <malloc>
c000f557:	83 c4 10             	add    esp,0x10
c000f55a:	89 c3                	mov    ebx,eax
c000f55c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f561:	83 ec 04             	sub    esp,0x4
c000f564:	50                   	push   eax
c000f565:	68 55 0a 02 c0       	push   0xc0020a55
c000f56a:	53                   	push   ebx
c000f56b:	e8 d4 b9 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c000f570:	83 c4 10             	add    esp,0x10
c000f573:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f57a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f582:	74 20                	je     c000f5a4 <ACPI::open(int, int, void*)+0x3e8>
c000f584:	83 ec 0c             	sub    esp,0xc
c000f587:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f58e:	e8 db bc ff ff       	call   c000b26e <File::exists()>
c000f593:	83 c4 10             	add    esp,0x10
c000f596:	0f b6 c0             	movzx  eax,al
c000f599:	85 c0                	test   eax,eax
c000f59b:	74 07                	je     c000f5a4 <ACPI::open(int, int, void*)+0x3e8>
c000f59d:	b0 01                	mov    al,0x1
c000f59f:	eb 07                	jmp    c000f5a8 <ACPI::open(int, int, void*)+0x3ec>
c000f5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5a4:	b0 00                	mov    al,0x0
c000f5a6:	66 90                	xchg   ax,ax
c000f5a8:	0f b6 c0             	movzx  eax,al
c000f5ab:	85 c0                	test   eax,eax
c000f5ad:	74 25                	je     c000f5d4 <ACPI::open(int, int, void*)+0x418>
c000f5af:	83 ec 08             	sub    esp,0x8
c000f5b2:	6a 01                	push   0x1
c000f5b4:	68 55 0a 02 c0       	push   0xc0020a55
c000f5b9:	e8 88 50 00 00       	call   c0014646 <Thr::loadDLL(char const*, bool)>
c000f5be:	83 c4 10             	add    esp,0x10
c000f5c1:	83 ec 08             	sub    esp,0x8
c000f5c4:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f5cb:	50                   	push   eax
c000f5cc:	e8 a6 52 00 00       	call   c0014877 <Thr::executeDLL(unsigned long, void*)>
c000f5d1:	83 c4 10             	add    esp,0x10
c000f5d4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5dc:	74 2a                	je     c000f608 <ACPI::open(int, int, void*)+0x44c>
c000f5de:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5e6:	74 20                	je     c000f608 <ACPI::open(int, int, void*)+0x44c>
c000f5e8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f5ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f1:	83 c0 08             	add    eax,0x8
c000f5f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f6:	83 ec 0c             	sub    esp,0xc
c000f5f9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f600:	ff d0                	call   eax
c000f602:	83 c4 10             	add    esp,0x10
c000f605:	8d 76 00             	lea    esi,[esi+0x0]
c000f608:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f60d:	83 ec 08             	sub    esp,0x8
c000f610:	68 72 0a 02 c0       	push   0xc0020a72
c000f615:	50                   	push   eax
c000f616:	e8 c1 f1 ff ff       	call   c000e7dc <findDataTable(unsigned char*, char*)>
c000f61b:	83 c4 10             	add    esp,0x10
c000f61e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f625:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f62d:	74 19                	je     c000f648 <ACPI::open(int, int, void*)+0x48c>
c000f62f:	83 ec 08             	sub    esp,0x8
c000f632:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f639:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f640:	e8 13 fb ff ff       	call   c000f158 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f645:	83 c4 10             	add    esp,0x10
c000f648:	b8 00 00 00 00       	mov    eax,0x0
c000f64d:	81 c4 70 01 00 00    	add    esp,0x170
c000f653:	5b                   	pop    ebx
c000f654:	5e                   	pop    esi
c000f655:	5f                   	pop    edi
c000f656:	c3                   	ret    
c000f657:	90                   	nop

c000f658 <CPU::close(int, int, void*)>:
c000f658:	31 c0                	xor    eax,eax
c000f65a:	c3                   	ret    
c000f65b:	90                   	nop

c000f65c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f65c:	60                   	pusha  
c000f65d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f661:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f665:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f669:	9c                   	pushf  
c000f66a:	fa                   	cli    
c000f66b:	0f 09                	wbinvd 
c000f66d:	0f 30                	wrmsr  
c000f66f:	9d                   	popf   
c000f670:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f674:	89 02                	mov    DWORD PTR [edx],eax
c000f676:	61                   	popa   
c000f677:	c3                   	ret    

c000f678 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f678:	60                   	pusha  
c000f679:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f67d:	9c                   	pushf  
c000f67e:	fa                   	cli    
c000f67f:	0f 09                	wbinvd 
c000f681:	31 c0                	xor    eax,eax
c000f683:	31 d2                	xor    edx,edx
c000f685:	0f 32                	rdmsr  
c000f687:	9d                   	popf   
c000f688:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f68c:	89 02                	mov    DWORD PTR [edx],eax
c000f68e:	61                   	popa   
c000f68f:	c3                   	ret    

c000f690 <CPU::AMD_K6_writeback(int, int, int)>:
c000f690:	56                   	push   esi
c000f691:	53                   	push   ebx
c000f692:	83 ec 10             	sub    esp,0x10
c000f695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f699:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f69e:	75 5d                	jne    c000f6fd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6a0:	83 f8 08             	cmp    eax,0x8
c000f6a3:	75 09                	jne    c000f6ae <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f6a5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f6aa:	7e 13                	jle    c000f6bf <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f6ac:	eb 30                	jmp    c000f6de <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f6ae:	83 f8 06             	cmp    eax,0x6
c000f6b1:	7c 4a                	jl     c000f6fd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6b3:	83 f8 07             	cmp    eax,0x7
c000f6b6:	7e 07                	jle    c000f6bf <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f6b8:	83 f8 09             	cmp    eax,0x9
c000f6bb:	74 21                	je     c000f6de <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f6bd:	eb 3e                	jmp    c000f6fd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6bf:	89 e6                	mov    esi,esp
c000f6c1:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f6c7:	56                   	push   esi
c000f6c8:	c1 eb 15             	shr    ebx,0x15
c000f6cb:	68 82 00 00 c0       	push   0xc0000082
c000f6d0:	83 e3 7e             	and    ebx,0x7e
c000f6d3:	e8 a0 ff ff ff       	call   c000f678 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6d8:	56                   	push   esi
c000f6d9:	6a 00                	push   0x0
c000f6db:	53                   	push   ebx
c000f6dc:	eb 12                	jmp    c000f6f0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f6de:	89 e3                	mov    ebx,esp
c000f6e0:	53                   	push   ebx
c000f6e1:	68 82 00 00 c0       	push   0xc0000082
c000f6e6:	e8 8d ff ff ff       	call   c000f678 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6eb:	53                   	push   ebx
c000f6ec:	6a 00                	push   0x0
c000f6ee:	6a 00                	push   0x0
c000f6f0:	68 82 00 00 c0       	push   0xc0000082
c000f6f5:	e8 62 ff ff ff       	call   c000f65c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f6fa:	83 c4 18             	add    esp,0x18
c000f6fd:	83 c4 10             	add    esp,0x10
c000f700:	5b                   	pop    ebx
c000f701:	5e                   	pop    esi
c000f702:	c3                   	ret    
c000f703:	90                   	nop

c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f704:	55                   	push   ebp
c000f705:	57                   	push   edi
c000f706:	56                   	push   esi
c000f707:	53                   	push   ebx
c000f708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f70c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f710:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f714:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f718:	39 05 90 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f90,eax
c000f71e:	75 23                	jne    c000f743 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f720:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f725:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f729:	89 06                	mov    DWORD PTR [esi],eax
c000f72b:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f730:	89 07                	mov    DWORD PTR [edi],eax
c000f732:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f73a:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f73f:	89 02                	mov    DWORD PTR [edx],eax
c000f741:	eb 3f                	jmp    c000f782 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f743:	31 c9                	xor    ecx,ecx
c000f745:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f749:	0f a2                	cpuid  
c000f74b:	89 06                	mov    DWORD PTR [esi],eax
c000f74d:	89 1f                	mov    DWORD PTR [edi],ebx
c000f74f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f753:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f756:	89 10                	mov    DWORD PTR [eax],edx
c000f758:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f75c:	a3 90 1f 02 c0       	mov    ds:0xc0021f90,eax
c000f761:	8b 06                	mov    eax,DWORD PTR [esi]
c000f763:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f768:	8b 07                	mov    eax,DWORD PTR [edi]
c000f76a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f76f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f772:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f777:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f77b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f77d:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f782:	5b                   	pop    ebx
c000f783:	5e                   	pop    esi
c000f784:	5f                   	pop    edi
c000f785:	5d                   	pop    ebp
c000f786:	c3                   	ret    
c000f787:	90                   	nop

c000f788 <CPU::cpuidCheckEDX(unsigned int)>:
c000f788:	83 ec 10             	sub    esp,0x10
c000f78b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f78f:	50                   	push   eax
c000f790:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f794:	50                   	push   eax
c000f795:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f799:	50                   	push   eax
c000f79a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79e:	50                   	push   eax
c000f79f:	6a 01                	push   0x1
c000f7a1:	e8 5e ff ff ff       	call   c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7aa:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f7ae:	0f 95 c0             	setne  al
c000f7b1:	83 c4 24             	add    esp,0x24
c000f7b4:	c3                   	ret    
c000f7b5:	90                   	nop

c000f7b6 <CPU::cpuidCheckECX(unsigned int)>:
c000f7b6:	83 ec 10             	sub    esp,0x10
c000f7b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7bd:	50                   	push   eax
c000f7be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c2:	50                   	push   eax
c000f7c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c7:	50                   	push   eax
c000f7c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7cc:	50                   	push   eax
c000f7cd:	6a 01                	push   0x1
c000f7cf:	e8 30 ff ff ff       	call   c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7d8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7dc:	0f 95 c0             	setne  al
c000f7df:	83 c4 24             	add    esp,0x24
c000f7e2:	c3                   	ret    
c000f7e3:	90                   	nop

c000f7e4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f7e4:	83 ec 10             	sub    esp,0x10
c000f7e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7eb:	50                   	push   eax
c000f7ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f0:	50                   	push   eax
c000f7f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f5:	50                   	push   eax
c000f7f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7fa:	50                   	push   eax
c000f7fb:	6a 07                	push   0x7
c000f7fd:	e8 02 ff ff ff       	call   c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f802:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f806:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f80a:	0f 95 c0             	setne  al
c000f80d:	83 c4 24             	add    esp,0x24
c000f810:	c3                   	ret    
c000f811:	90                   	nop

c000f812 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f812:	83 ec 10             	sub    esp,0x10
c000f815:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f819:	50                   	push   eax
c000f81a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f81e:	50                   	push   eax
c000f81f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f823:	50                   	push   eax
c000f824:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f828:	50                   	push   eax
c000f829:	6a 07                	push   0x7
c000f82b:	e8 d4 fe ff ff       	call   c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f830:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f834:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f838:	0f 95 c0             	setne  al
c000f83b:	83 c4 24             	add    esp,0x24
c000f83e:	c3                   	ret    
c000f83f:	90                   	nop

c000f840 <CPU::CPU()>:
c000f840:	83 ec 0c             	sub    esp,0xc
c000f843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f847:	83 ec 08             	sub    esp,0x8
c000f84a:	68 95 0b 02 c0       	push   0xc0020b95
c000f84f:	50                   	push   eax
c000f850:	e8 39 c7 ff ff       	call   c000bf8e <Device::Device(char const*)>
c000f855:	83 c4 10             	add    esp,0x10
c000f858:	ba 1c 0c 02 c0       	mov    edx,0xc0020c1c
c000f85d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f861:	89 10                	mov    DWORD PTR [eax],edx
c000f863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f867:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f875:	05 78 01 00 00       	add    eax,0x178
c000f87a:	83 ec 0c             	sub    esp,0xc
c000f87d:	50                   	push   eax
c000f87e:	e8 d1 7a ff ff       	call   c0007354 <GDT::GDT()>
c000f883:	83 c4 10             	add    esp,0x10
c000f886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f88a:	05 7c 09 00 00       	add    eax,0x97c
c000f88f:	83 ec 0c             	sub    esp,0xc
c000f892:	50                   	push   eax
c000f893:	e8 0c 7d ff ff       	call   c00075a4 <IDT::IDT()>
c000f898:	83 c4 10             	add    esp,0x10
c000f89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f89f:	05 7c 11 00 00       	add    eax,0x117c
c000f8a4:	83 ec 0c             	sub    esp,0xc
c000f8a7:	50                   	push   eax
c000f8a8:	e8 a7 96 ff ff       	call   c0008f54 <TSS::TSS()>
c000f8ad:	83 c4 10             	add    esp,0x10
c000f8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b4:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8bf:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f8c9:	90                   	nop
c000f8ca:	83 c4 0c             	add    esp,0xc
c000f8cd:	c3                   	ret    

c000f8ce <CPU::displayFeatures()>:
c000f8ce:	c3                   	ret    
c000f8cf:	90                   	nop

c000f8d0 <CPU::detectFeatures()>:
c000f8d0:	55                   	push   ebp
c000f8d1:	57                   	push   edi
c000f8d2:	56                   	push   esi
c000f8d3:	53                   	push   ebx
c000f8d4:	83 ec 30             	sub    esp,0x30
c000f8d7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f8db:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f8e5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f8ec:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f8f2:	6a 0d                	push   0xd
c000f8f4:	6a 00                	push   0x0
c000f8f6:	55                   	push   ebp
c000f8f7:	e8 f4 0b ff ff       	call   c00004f0 <memset>
c000f8fc:	83 c4 10             	add    esp,0x10
c000f8ff:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f904:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f90b:	0f 84 db 05 00 00    	je     c000feec <CPU::detectFeatures()+0x61c>
c000f911:	83 ec 0c             	sub    esp,0xc
c000f914:	89 ef                	mov    edi,ebp
c000f916:	6a 10                	push   0x10
c000f918:	e8 6b fe ff ff       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c000f91d:	83 e0 01             	and    eax,0x1
c000f920:	8d 14 00             	lea    edx,[eax+eax*1]
c000f923:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f929:	83 e0 fd             	and    eax,0xfffffffd
c000f92c:	09 d0                	or     eax,edx
c000f92e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f934:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f93b:	e8 48 fe ff ff       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c000f940:	83 e0 01             	and    eax,0x1
c000f943:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f94a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f950:	83 e0 fb             	and    eax,0xfffffffb
c000f953:	09 d0                	or     eax,edx
c000f955:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f95b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f962:	e8 21 fe ff ff       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c000f967:	83 e0 01             	and    eax,0x1
c000f96a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f971:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f977:	83 e0 f7             	and    eax,0xfffffff7
c000f97a:	09 d0                	or     eax,edx
c000f97c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f982:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f989:	e8 fa fd ff ff       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c000f98e:	83 e0 01             	and    eax,0x1
c000f991:	c1 e0 04             	shl    eax,0x4
c000f994:	89 c2                	mov    edx,eax
c000f996:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f99c:	83 e0 ef             	and    eax,0xffffffef
c000f99f:	09 d0                	or     eax,edx
c000f9a1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9a7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f9ae:	e8 d5 fd ff ff       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c000f9b3:	83 e0 01             	and    eax,0x1
c000f9b6:	c1 e0 05             	shl    eax,0x5
c000f9b9:	89 c2                	mov    edx,eax
c000f9bb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9c1:	83 e0 df             	and    eax,0xffffffdf
c000f9c4:	09 d0                	or     eax,edx
c000f9c6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9cc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f9d3:	e8 b0 fd ff ff       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c000f9d8:	83 e0 01             	and    eax,0x1
c000f9db:	8d 14 00             	lea    edx,[eax+eax*1]
c000f9de:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f9e4:	83 e0 fd             	and    eax,0xfffffffd
c000f9e7:	09 d0                	or     eax,edx
c000f9e9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f9ef:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f9f6:	e8 8d fd ff ff       	call   c000f788 <CPU::cpuidCheckEDX(unsigned int)>
c000f9fb:	83 e0 01             	and    eax,0x1
c000f9fe:	c1 e0 06             	shl    eax,0x6
c000fa01:	89 c2                	mov    edx,eax
c000fa03:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa09:	83 e0 bf             	and    eax,0xffffffbf
c000fa0c:	09 d0                	or     eax,edx
c000fa0e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa14:	58                   	pop    eax
c000fa15:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa19:	50                   	push   eax
c000fa1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa1e:	50                   	push   eax
c000fa1f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fa23:	56                   	push   esi
c000fa24:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa28:	50                   	push   eax
c000fa29:	6a 00                	push   0x0
c000fa2b:	e8 d4 fc ff ff       	call   c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa30:	b8 04 00 00 00       	mov    eax,0x4
c000fa35:	89 c1                	mov    ecx,eax
c000fa37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa39:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fa3f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fa43:	89 c1                	mov    ecx,eax
c000fa45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa47:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fa4d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fa51:	89 c1                	mov    ecx,eax
c000fa53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa55:	83 c4 18             	add    esp,0x18
c000fa58:	68 a4 0a 02 c0       	push   0xc0020aa4
c000fa5d:	55                   	push   ebp
c000fa5e:	e8 ed 0c ff ff       	call   c0000750 <strcmp>
c000fa63:	83 c4 10             	add    esp,0x10
c000fa66:	85 c0                	test   eax,eax
c000fa68:	75 0f                	jne    c000fa79 <CPU::detectFeatures()+0x1a9>
c000fa6a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fa74:	e9 22 02 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fa79:	50                   	push   eax
c000fa7a:	50                   	push   eax
c000fa7b:	68 b1 0a 02 c0       	push   0xc0020ab1
c000fa80:	55                   	push   ebp
c000fa81:	e8 ca 0c ff ff       	call   c0000750 <strcmp>
c000fa86:	83 c4 10             	add    esp,0x10
c000fa89:	85 c0                	test   eax,eax
c000fa8b:	74 dd                	je     c000fa6a <CPU::detectFeatures()+0x19a>
c000fa8d:	50                   	push   eax
c000fa8e:	50                   	push   eax
c000fa8f:	68 be 0a 02 c0       	push   0xc0020abe
c000fa94:	55                   	push   ebp
c000fa95:	e8 b6 0c ff ff       	call   c0000750 <strcmp>
c000fa9a:	83 c4 10             	add    esp,0x10
c000fa9d:	85 c0                	test   eax,eax
c000fa9f:	74 2a                	je     c000facb <CPU::detectFeatures()+0x1fb>
c000faa1:	50                   	push   eax
c000faa2:	50                   	push   eax
c000faa3:	68 cb 0a 02 c0       	push   0xc0020acb
c000faa8:	55                   	push   ebp
c000faa9:	e8 a2 0c ff ff       	call   c0000750 <strcmp>
c000faae:	83 c4 10             	add    esp,0x10
c000fab1:	85 c0                	test   eax,eax
c000fab3:	74 16                	je     c000facb <CPU::detectFeatures()+0x1fb>
c000fab5:	50                   	push   eax
c000fab6:	50                   	push   eax
c000fab7:	68 d8 0a 02 c0       	push   0xc0020ad8
c000fabc:	55                   	push   ebp
c000fabd:	e8 8e 0c ff ff       	call   c0000750 <strcmp>
c000fac2:	83 c4 10             	add    esp,0x10
c000fac5:	85 c0                	test   eax,eax
c000fac7:	74 48                	je     c000fb11 <CPU::detectFeatures()+0x241>
c000fac9:	eb 0f                	jmp    c000fada <CPU::detectFeatures()+0x20a>
c000facb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fad5:	e9 c1 01 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fada:	50                   	push   eax
c000fadb:	50                   	push   eax
c000fadc:	68 e5 0a 02 c0       	push   0xc0020ae5
c000fae1:	55                   	push   ebp
c000fae2:	e8 69 0c ff ff       	call   c0000750 <strcmp>
c000fae7:	83 c4 10             	add    esp,0x10
c000faea:	85 c0                	test   eax,eax
c000faec:	74 23                	je     c000fb11 <CPU::detectFeatures()+0x241>
c000faee:	57                   	push   edi
c000faef:	57                   	push   edi
c000faf0:	68 f2 0a 02 c0       	push   0xc0020af2
c000faf5:	55                   	push   ebp
c000faf6:	e8 55 0c ff ff       	call   c0000750 <strcmp>
c000fafb:	83 c4 10             	add    esp,0x10
c000fafe:	85 c0                	test   eax,eax
c000fb00:	75 1e                	jne    c000fb20 <CPU::detectFeatures()+0x250>
c000fb02:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fb0c:	e9 8a 01 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fb11:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fb1b:	e9 7b 01 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fb20:	56                   	push   esi
c000fb21:	56                   	push   esi
c000fb22:	68 ff 0a 02 c0       	push   0xc0020aff
c000fb27:	55                   	push   ebp
c000fb28:	e8 23 0c ff ff       	call   c0000750 <strcmp>
c000fb2d:	83 c4 10             	add    esp,0x10
c000fb30:	85 c0                	test   eax,eax
c000fb32:	75 0f                	jne    c000fb43 <CPU::detectFeatures()+0x273>
c000fb34:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fb3e:	e9 58 01 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fb43:	51                   	push   ecx
c000fb44:	51                   	push   ecx
c000fb45:	68 be 0a 02 c0       	push   0xc0020abe
c000fb4a:	55                   	push   ebp
c000fb4b:	e8 00 0c ff ff       	call   c0000750 <strcmp>
c000fb50:	83 c4 10             	add    esp,0x10
c000fb53:	85 c0                	test   eax,eax
c000fb55:	75 0f                	jne    c000fb66 <CPU::detectFeatures()+0x296>
c000fb57:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fb61:	e9 35 01 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fb66:	52                   	push   edx
c000fb67:	52                   	push   edx
c000fb68:	68 0c 0b 02 c0       	push   0xc0020b0c
c000fb6d:	55                   	push   ebp
c000fb6e:	e8 dd 0b ff ff       	call   c0000750 <strcmp>
c000fb73:	83 c4 10             	add    esp,0x10
c000fb76:	85 c0                	test   eax,eax
c000fb78:	75 0f                	jne    c000fb89 <CPU::detectFeatures()+0x2b9>
c000fb7a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fb84:	e9 12 01 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fb89:	50                   	push   eax
c000fb8a:	50                   	push   eax
c000fb8b:	68 19 0b 02 c0       	push   0xc0020b19
c000fb90:	55                   	push   ebp
c000fb91:	e8 ba 0b ff ff       	call   c0000750 <strcmp>
c000fb96:	83 c4 10             	add    esp,0x10
c000fb99:	85 c0                	test   eax,eax
c000fb9b:	75 0f                	jne    c000fbac <CPU::detectFeatures()+0x2dc>
c000fb9d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fba7:	e9 ef 00 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fbac:	50                   	push   eax
c000fbad:	50                   	push   eax
c000fbae:	68 26 0b 02 c0       	push   0xc0020b26
c000fbb3:	55                   	push   ebp
c000fbb4:	e8 97 0b ff ff       	call   c0000750 <strcmp>
c000fbb9:	83 c4 10             	add    esp,0x10
c000fbbc:	85 c0                	test   eax,eax
c000fbbe:	75 0f                	jne    c000fbcf <CPU::detectFeatures()+0x2ff>
c000fbc0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fbca:	e9 cc 00 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fbcf:	50                   	push   eax
c000fbd0:	50                   	push   eax
c000fbd1:	68 33 0b 02 c0       	push   0xc0020b33
c000fbd6:	55                   	push   ebp
c000fbd7:	e8 74 0b ff ff       	call   c0000750 <strcmp>
c000fbdc:	83 c4 10             	add    esp,0x10
c000fbdf:	85 c0                	test   eax,eax
c000fbe1:	75 0f                	jne    c000fbf2 <CPU::detectFeatures()+0x322>
c000fbe3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fbed:	e9 a9 00 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fbf2:	50                   	push   eax
c000fbf3:	50                   	push   eax
c000fbf4:	68 40 0b 02 c0       	push   0xc0020b40
c000fbf9:	55                   	push   ebp
c000fbfa:	e8 51 0b ff ff       	call   c0000750 <strcmp>
c000fbff:	83 c4 10             	add    esp,0x10
c000fc02:	85 c0                	test   eax,eax
c000fc04:	75 0f                	jne    c000fc15 <CPU::detectFeatures()+0x345>
c000fc06:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fc10:	e9 86 00 00 00       	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fc15:	50                   	push   eax
c000fc16:	50                   	push   eax
c000fc17:	68 4d 0b 02 c0       	push   0xc0020b4d
c000fc1c:	55                   	push   ebp
c000fc1d:	e8 2e 0b ff ff       	call   c0000750 <strcmp>
c000fc22:	83 c4 10             	add    esp,0x10
c000fc25:	85 c0                	test   eax,eax
c000fc27:	75 0c                	jne    c000fc35 <CPU::detectFeatures()+0x365>
c000fc29:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fc33:	eb 66                	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fc35:	50                   	push   eax
c000fc36:	50                   	push   eax
c000fc37:	68 5a 0b 02 c0       	push   0xc0020b5a
c000fc3c:	55                   	push   ebp
c000fc3d:	e8 0e 0b ff ff       	call   c0000750 <strcmp>
c000fc42:	83 c4 10             	add    esp,0x10
c000fc45:	85 c0                	test   eax,eax
c000fc47:	75 0c                	jne    c000fc55 <CPU::detectFeatures()+0x385>
c000fc49:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fc53:	eb 46                	jmp    c000fc9b <CPU::detectFeatures()+0x3cb>
c000fc55:	57                   	push   edi
c000fc56:	57                   	push   edi
c000fc57:	68 67 0b 02 c0       	push   0xc0020b67
c000fc5c:	55                   	push   ebp
c000fc5d:	e8 ee 0a ff ff       	call   c0000750 <strcmp>
c000fc62:	83 c4 10             	add    esp,0x10
c000fc65:	85 c0                	test   eax,eax
c000fc67:	74 e0                	je     c000fc49 <CPU::detectFeatures()+0x379>
c000fc69:	56                   	push   esi
c000fc6a:	56                   	push   esi
c000fc6b:	68 74 0b 02 c0       	push   0xc0020b74
c000fc70:	55                   	push   ebp
c000fc71:	e8 da 0a ff ff       	call   c0000750 <strcmp>
c000fc76:	83 c4 10             	add    esp,0x10
c000fc79:	85 c0                	test   eax,eax
c000fc7b:	74 cc                	je     c000fc49 <CPU::detectFeatures()+0x379>
c000fc7d:	51                   	push   ecx
c000fc7e:	51                   	push   ecx
c000fc7f:	68 81 0b 02 c0       	push   0xc0020b81
c000fc84:	55                   	push   ebp
c000fc85:	e8 c6 0a ff ff       	call   c0000750 <strcmp>
c000fc8a:	83 c4 10             	add    esp,0x10
c000fc8d:	85 c0                	test   eax,eax
c000fc8f:	74 b8                	je     c000fc49 <CPU::detectFeatures()+0x379>
c000fc91:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc9b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fca0:	0f 86 be 00 00 00    	jbe    c000fd64 <CPU::detectFeatures()+0x494>
c000fca6:	83 ec 0c             	sub    esp,0xc
c000fca9:	68 80 00 00 00       	push   0x80
c000fcae:	e8 31 fb ff ff       	call   c000f7e4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fcb3:	83 e0 01             	and    eax,0x1
c000fcb6:	c1 e0 06             	shl    eax,0x6
c000fcb9:	89 c2                	mov    edx,eax
c000fcbb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fcc1:	83 e0 bf             	and    eax,0xffffffbf
c000fcc4:	09 d0                	or     eax,edx
c000fcc6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fccc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fcd3:	e8 0c fb ff ff       	call   c000f7e4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fcd8:	83 e0 01             	and    eax,0x1
c000fcdb:	c1 e0 04             	shl    eax,0x4
c000fcde:	89 c2                	mov    edx,eax
c000fce0:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fce6:	83 e0 ef             	and    eax,0xffffffef
c000fce9:	09 d0                	or     eax,edx
c000fceb:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcf1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fcf8:	e8 e7 fa ff ff       	call   c000f7e4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fcfd:	89 c2                	mov    edx,eax
c000fcff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fd05:	c1 e2 07             	shl    edx,0x7
c000fd08:	83 e0 7f             	and    eax,0x7f
c000fd0b:	09 d0                	or     eax,edx
c000fd0d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fd13:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fd1a:	e8 f3 fa ff ff       	call   c000f812 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd1f:	83 e0 01             	and    eax,0x1
c000fd22:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fd29:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd2f:	83 e0 f7             	and    eax,0xfffffff7
c000fd32:	09 d0                	or     eax,edx
c000fd34:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd3a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fd41:	e8 cc fa ff ff       	call   c000f812 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd46:	83 c4 10             	add    esp,0x10
c000fd49:	83 e0 01             	and    eax,0x1
c000fd4c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd53:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fd59:	83 e0 fb             	and    eax,0xfffffffb
c000fd5c:	09 d0                	or     eax,edx
c000fd5e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fd64:	83 ec 0c             	sub    esp,0xc
c000fd67:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd6b:	50                   	push   eax
c000fd6c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd70:	50                   	push   eax
c000fd71:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fd75:	57                   	push   edi
c000fd76:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fd7a:	56                   	push   esi
c000fd7b:	6a 01                	push   0x1
c000fd7d:	e8 82 f9 ff ff       	call   c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd86:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fd8c:	89 c1                	mov    ecx,eax
c000fd8e:	83 e2 f0             	and    edx,0xfffffff0
c000fd91:	83 e1 0f             	and    ecx,0xf
c000fd94:	09 ca                	or     edx,ecx
c000fd96:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd9c:	89 c2                	mov    edx,eax
c000fd9e:	c1 ea 04             	shr    edx,0x4
c000fda1:	83 e2 0f             	and    edx,0xf
c000fda4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fda8:	89 d1                	mov    ecx,edx
c000fdaa:	83 c4 20             	add    esp,0x20
c000fdad:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fdb3:	c1 e1 06             	shl    ecx,0x6
c000fdb6:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fdbc:	09 ca                	or     edx,ecx
c000fdbe:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fdc5:	89 c2                	mov    edx,eax
c000fdc7:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fdcd:	c1 ea 08             	shr    edx,0x8
c000fdd0:	83 e1 3f             	and    ecx,0x3f
c000fdd3:	83 e2 0f             	and    edx,0xf
c000fdd6:	89 d5                	mov    ebp,edx
c000fdd8:	83 e5 03             	and    ebp,0x3
c000fddb:	c1 e5 06             	shl    ebp,0x6
c000fdde:	09 e9                	or     ecx,ebp
c000fde0:	89 d5                	mov    ebp,edx
c000fde2:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fde8:	c1 ed 02             	shr    ebp,0x2
c000fdeb:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fdf1:	83 e1 c0             	and    ecx,0xffffffc0
c000fdf4:	09 e9                	or     ecx,ebp
c000fdf6:	89 c5                	mov    ebp,eax
c000fdf8:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fdfe:	c1 ed 08             	shr    ebp,0x8
c000fe01:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fe07:	83 e5 30             	and    ebp,0x30
c000fe0a:	83 e1 cf             	and    ecx,0xffffffcf
c000fe0d:	09 e9                	or     ecx,ebp
c000fe0f:	83 fa 06             	cmp    edx,0x6
c000fe12:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fe18:	74 05                	je     c000fe1f <CPU::detectFeatures()+0x54f>
c000fe1a:	83 fa 0f             	cmp    edx,0xf
c000fe1d:	75 64                	jne    c000fe83 <CPU::detectFeatures()+0x5b3>
c000fe1f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fe25:	89 c1                	mov    ecx,eax
c000fe27:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fe2d:	c1 e9 10             	shr    ecx,0x10
c000fe30:	c1 e1 04             	shl    ecx,0x4
c000fe33:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fe37:	0f b6 c9             	movzx  ecx,cl
c000fe3a:	c1 e1 06             	shl    ecx,0x6
c000fe3d:	09 e9                	or     ecx,ebp
c000fe3f:	83 fa 0f             	cmp    edx,0xf
c000fe42:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fe49:	75 38                	jne    c000fe83 <CPU::detectFeatures()+0x5b3>
c000fe4b:	c1 e8 14             	shr    eax,0x14
c000fe4e:	83 c0 0f             	add    eax,0xf
c000fe51:	0f b6 c0             	movzx  eax,al
c000fe54:	89 c2                	mov    edx,eax
c000fe56:	c1 e8 02             	shr    eax,0x2
c000fe59:	83 e2 03             	and    edx,0x3
c000fe5c:	89 d1                	mov    ecx,edx
c000fe5e:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fe64:	c1 e1 06             	shl    ecx,0x6
c000fe67:	83 e2 3f             	and    edx,0x3f
c000fe6a:	09 ca                	or     edx,ecx
c000fe6c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fe72:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fe78:	83 e2 c0             	and    edx,0xffffffc0
c000fe7b:	09 d0                	or     eax,edx
c000fe7d:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fe83:	83 ec 0c             	sub    esp,0xc
c000fe86:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe8c:	83 c8 07             	or     eax,0x7
c000fe8f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe95:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe99:	50                   	push   eax
c000fe9a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe9e:	55                   	push   ebp
c000fe9f:	57                   	push   edi
c000fea0:	56                   	push   esi
c000fea1:	68 00 00 00 80       	push   0x80000000
c000fea6:	e8 59 f8 ff ff       	call   c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000feab:	83 c4 20             	add    esp,0x20
c000feae:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000feb6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000feba:	76 1e                	jbe    c000feda <CPU::detectFeatures()+0x60a>
c000febc:	83 ec 0c             	sub    esp,0xc
c000febf:	50                   	push   eax
c000fec0:	55                   	push   ebp
c000fec1:	57                   	push   edi
c000fec2:	56                   	push   esi
c000fec3:	68 01 00 00 80       	push   0x80000001
c000fec8:	e8 37 f8 ff ff       	call   c000f704 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fecd:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fed7:	83 c4 20             	add    esp,0x20
c000feda:	52                   	push   edx
c000fedb:	52                   	push   edx
c000fedc:	68 8d 0b 02 c0       	push   0xc0020b8d
c000fee1:	53                   	push   ebx
c000fee2:	e8 99 c0 ff ff       	call   c000bf80 <Device::setName(char const*)>
c000fee7:	83 c4 10             	add    esp,0x10
c000feea:	eb 69                	jmp    c000ff55 <CPU::detectFeatures()+0x685>
c000feec:	50                   	push   eax
c000feed:	50                   	push   eax
c000feee:	68 f2 0a 02 c0       	push   0xc0020af2
c000fef3:	55                   	push   ebp
c000fef4:	e8 47 07 ff ff       	call   c0000640 <strcpy>
c000fef9:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ff03:	e8 bb 02 ff ff       	call   c00001c3 <is486>
c000ff08:	83 c4 10             	add    esp,0x10
c000ff0b:	85 c0                	test   eax,eax
c000ff0d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff13:	74 1f                	je     c000ff34 <CPU::detectFeatures()+0x664>
c000ff15:	83 c8 07             	or     eax,0x7
c000ff18:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff1e:	0f 20 c0             	mov    eax,cr0
c000ff21:	83 e0 14             	and    eax,0x14
c000ff24:	83 f8 04             	cmp    eax,0x4
c000ff27:	75 10                	jne    c000ff39 <CPU::detectFeatures()+0x669>
c000ff29:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff2f:	83 e0 fd             	and    eax,0xfffffffd
c000ff32:	eb 1b                	jmp    c000ff4f <CPU::detectFeatures()+0x67f>
c000ff34:	83 e0 f8             	and    eax,0xfffffff8
c000ff37:	eb df                	jmp    c000ff18 <CPU::detectFeatures()+0x648>
c000ff39:	e8 60 02 ff ff       	call   c000019e <hasLegacyFPU>
c000ff3e:	83 e0 01             	and    eax,0x1
c000ff41:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff44:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff4a:	83 e0 fd             	and    eax,0xfffffffd
c000ff4d:	09 d0                	or     eax,edx
c000ff4f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff55:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ff5c:	74 17                	je     c000ff75 <CPU::detectFeatures()+0x6a5>
c000ff5e:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000ff64:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000ff6a:	83 c8 10             	or     eax,0x10
c000ff6d:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000ff73:	eb 20                	jmp    c000ff95 <CPU::detectFeatures()+0x6c5>
c000ff75:	e8 24 02 ff ff       	call   c000019e <hasLegacyFPU>
c000ff7a:	83 e0 01             	and    eax,0x1
c000ff7d:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff80:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff86:	83 e0 fd             	and    eax,0xfffffffd
c000ff89:	09 d0                	or     eax,edx
c000ff8b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff91:	a8 02                	test   al,0x2
c000ff93:	75 c9                	jne    c000ff5e <CPU::detectFeatures()+0x68e>
c000ff95:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff9c:	83 c4 2c             	add    esp,0x2c
c000ff9f:	5b                   	pop    ebx
c000ffa0:	5e                   	pop    esi
c000ffa1:	5f                   	pop    edi
c000ffa2:	5d                   	pop    ebp
c000ffa3:	c3                   	ret    

c000ffa4 <CPU::setupSMEP()>:
c000ffa4:	0f 20 e0             	mov    eax,cr4
c000ffa7:	0d 00 00 10 00       	or     eax,0x100000
c000ffac:	0f 22 e0             	mov    cr4,eax
c000ffaf:	c3                   	ret    

c000ffb0 <CPU::setupUMIP()>:
c000ffb0:	0f 20 e0             	mov    eax,cr4
c000ffb3:	80 cc 08             	or     ah,0x8
c000ffb6:	0f 22 e0             	mov    cr4,eax
c000ffb9:	c3                   	ret    

c000ffba <CPU::setupTSC()>:
c000ffba:	0f 20 e0             	mov    eax,cr4
c000ffbd:	83 c8 04             	or     eax,0x4
c000ffc0:	0f 22 e0             	mov    cr4,eax
c000ffc3:	c3                   	ret    

c000ffc4 <CPU::setupLargePages()>:
c000ffc4:	0f 20 e0             	mov    eax,cr4
c000ffc7:	83 c8 10             	or     eax,0x10
c000ffca:	0f 22 e0             	mov    cr4,eax
c000ffcd:	c3                   	ret    

c000ffce <CPU::setupPAT()>:
c000ffce:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ffd3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ffda:	74 2c                	je     c0010008 <CPU::setupPAT()+0x3a>
c000ffdc:	53                   	push   ebx
c000ffdd:	83 ec 10             	sub    esp,0x10
c000ffe0:	68 77 02 00 00       	push   0x277
c000ffe5:	50                   	push   eax
c000ffe6:	e8 cd 70 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c000ffeb:	83 e2 f8             	and    edx,0xfffffff8
c000ffee:	83 ca 01             	or     edx,0x1
c000fff1:	52                   	push   edx
c000fff2:	50                   	push   eax
c000fff3:	68 77 02 00 00       	push   0x277
c000fff8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000fffe:	e8 e1 70 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0010003:	83 c4 28             	add    esp,0x28
c0010006:	5b                   	pop    ebx
c0010007:	c3                   	ret    
c0010008:	c3                   	ret    
c0010009:	90                   	nop

c001000a <CPU::setupMTRR()>:
c001000a:	c3                   	ret    
c001000b:	90                   	nop

c001000c <CPU::setupGlobalPages()>:
c001000c:	0f 20 e0             	mov    eax,cr4
c001000f:	0c 80                	or     al,0x80
c0010011:	0f 22 e0             	mov    cr4,eax
c0010014:	c3                   	ret    
c0010015:	90                   	nop

c0010016 <CPU::allowUsermodeDataAccess()>:
c0010016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001001a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010021:	74 03                	je     c0010026 <CPU::allowUsermodeDataAccess()+0x10>
c0010023:	0f 01 cb             	stac   
c0010026:	c3                   	ret    
c0010027:	90                   	nop

c0010028 <CPU::prohibitUsermodeDataAccess()>:
c0010028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001002c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010033:	74 03                	je     c0010038 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010035:	0f 01 ca             	clac   
c0010038:	c3                   	ret    
c0010039:	90                   	nop

c001003a <CPU::setupSMAP()>:
c001003a:	0f 20 e0             	mov    eax,cr4
c001003d:	0d 00 00 20 00       	or     eax,0x200000
c0010042:	0f 22 e0             	mov    cr4,eax
c0010045:	eb e1                	jmp    c0010028 <CPU::prohibitUsermodeDataAccess()>
c0010047:	90                   	nop

c0010048 <CPU::setupFeatures()>:
c0010048:	53                   	push   ebx
c0010049:	83 ec 08             	sub    esp,0x8
c001004c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010050:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010057:	74 18                	je     c0010071 <CPU::setupFeatures()+0x29>
c0010059:	83 ec 0c             	sub    esp,0xc
c001005c:	68 99 0b 02 c0       	push   0xc0020b99
c0010061:	e8 5c a9 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0010066:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010069:	e8 42 ff ff ff       	call   c000ffb0 <CPU::setupUMIP()>
c001006e:	83 c4 10             	add    esp,0x10
c0010071:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010078:	74 18                	je     c0010092 <CPU::setupFeatures()+0x4a>
c001007a:	83 ec 0c             	sub    esp,0xc
c001007d:	68 a3 0b 02 c0       	push   0xc0020ba3
c0010082:	e8 3b a9 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0010087:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001008a:	e8 2b ff ff ff       	call   c000ffba <CPU::setupTSC()>
c001008f:	83 c4 10             	add    esp,0x10
c0010092:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010099:	74 18                	je     c00100b3 <CPU::setupFeatures()+0x6b>
c001009b:	83 ec 0c             	sub    esp,0xc
c001009e:	68 ac 0b 02 c0       	push   0xc0020bac
c00100a3:	e8 1a a9 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00100a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100ab:	e8 14 ff ff ff       	call   c000ffc4 <CPU::setupLargePages()>
c00100b0:	83 c4 10             	add    esp,0x10
c00100b3:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00100ba:	74 18                	je     c00100d4 <CPU::setupFeatures()+0x8c>
c00100bc:	83 ec 0c             	sub    esp,0xc
c00100bf:	68 b5 0b 02 c0       	push   0xc0020bb5
c00100c4:	e8 f9 a8 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00100c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100cc:	e8 3b ff ff ff       	call   c001000c <CPU::setupGlobalPages()>
c00100d1:	83 c4 10             	add    esp,0x10
c00100d4:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00100db:	74 18                	je     c00100f5 <CPU::setupFeatures()+0xad>
c00100dd:	83 ec 0c             	sub    esp,0xc
c00100e0:	68 c7 0b 02 c0       	push   0xc0020bc7
c00100e5:	e8 d8 a8 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00100ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100ed:	e8 dc fe ff ff       	call   c000ffce <CPU::setupPAT()>
c00100f2:	83 c4 10             	add    esp,0x10
c00100f5:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00100fc:	74 11                	je     c001010f <CPU::setupFeatures()+0xc7>
c00100fe:	c7 44 24 10 d0 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bd0
c0010106:	83 c4 08             	add    esp,0x8
c0010109:	5b                   	pop    ebx
c001010a:	e9 b3 a8 ff ff       	jmp    c000a9c2 <Dbg::kprintf(char const*, ...)>
c001010f:	83 c4 08             	add    esp,0x8
c0010112:	5b                   	pop    ebx
c0010113:	c3                   	ret    

c0010114 <CPU::open(int, int, void*)>:
c0010114:	57                   	push   edi
c0010115:	56                   	push   esi
c0010116:	53                   	push   ebx
c0010117:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001011b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001011f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010125:	83 ec 0c             	sub    esp,0xc
c0010128:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001012e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0010134:	50                   	push   eax
c0010135:	e8 7c 72 ff ff       	call   c00073b6 <GDT::setup()>
c001013a:	83 c4 0c             	add    esp,0xc
c001013d:	6a 00                	push   0x0
c001013f:	68 ef be ad de       	push   0xdeadbeef
c0010144:	57                   	push   edi
c0010145:	e8 4e 8e ff ff       	call   c0008f98 <TSS::setup(unsigned long, unsigned long)>
c001014a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001014d:	e8 26 8e ff ff       	call   c0008f78 <TSS::flush()>
c0010152:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010158:	89 04 24             	mov    DWORD PTR [esp],eax
c001015b:	e8 ba 74 ff ff       	call   c000761a <IDT::setup()>
c0010160:	b8 00 04 00 00       	mov    eax,0x400
c0010165:	0f 23 f8             	mov    db7,eax
c0010168:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010172:	e8 3c 7c ff ff       	call   c0007db3 <Phys::allocatePage()>
c0010177:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001017d:	89 30                	mov    DWORD PTR [eax],esi
c001017f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010185:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010188:	58                   	pop    eax
c0010189:	5a                   	pop    edx
c001018a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010190:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010194:	e8 61 9e ff ff       	call   c0009ffa <VAS::setCPUSpecific(unsigned long)>
c0010199:	c7 04 24 da 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bda
c00101a0:	e8 cd 00 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c00101a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101a8:	e8 23 f7 ff ff       	call   c000f8d0 <CPU::detectFeatures()>
c00101ad:	c7 04 24 fd 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bfd
c00101b4:	e8 b9 00 00 00       	call   c0010272 <KeSetBootMessage(char const*)>
c00101b9:	e8 4b 6f 00 00       	call   c0017109 <HalInitialise()>
c00101be:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c00101c3:	83 e0 10             	and    eax,0x10
c00101c6:	83 f8 01             	cmp    eax,0x1
c00101c9:	19 c0                	sbb    eax,eax
c00101cb:	83 e0 46             	and    eax,0x46
c00101ce:	83 c0 1e             	add    eax,0x1e
c00101d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00101d4:	e8 44 d6 ff ff       	call   c000d81d <setupTimer(int)>
c00101d9:	83 c4 10             	add    esp,0x10
c00101dc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00101e2:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c00101e9:	74 0c                	je     c00101f7 <CPU::open(int, int, void*)+0xe3>
c00101eb:	83 ec 0c             	sub    esp,0xc
c00101ee:	53                   	push   ebx
c00101ef:	e8 54 fe ff ff       	call   c0010048 <CPU::setupFeatures()>
c00101f4:	83 c4 10             	add    esp,0x10
c00101f7:	5b                   	pop    ebx
c00101f8:	31 c0                	xor    eax,eax
c00101fa:	5e                   	pop    esi
c00101fb:	5f                   	pop    edi
c00101fc:	c3                   	ret    

c00101fd <KeDisplaySplashScreen()>:
c00101fd:	55                   	push   ebp
c00101fe:	bd 05 00 00 00       	mov    ebp,0x5
c0010203:	57                   	push   edi
c0010204:	bf a0 1f 02 c0       	mov    edi,0xc0021fa0
c0010209:	56                   	push   esi
c001020a:	be 0a 00 00 00       	mov    esi,0xa
c001020f:	53                   	push   ebx
c0010210:	31 db                	xor    ebx,ebx
c0010212:	83 ec 0c             	sub    esp,0xc
c0010215:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010218:	89 d0                	mov    eax,edx
c001021a:	85 d2                	test   edx,edx
c001021c:	74 4c                	je     c001026a <KeDisplaySplashScreen()+0x6d>
c001021e:	80 bb d6 1f 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde02a],0xdb
c0010225:	75 13                	jne    c001023a <KeDisplaySplashScreen()+0x3d>
c0010227:	0f b6 8b d5 1f 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde02b]
c001022e:	83 e1 fe             	and    ecx,0xfffffffe
c0010231:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010237:	75 01                	jne    c001023a <KeDisplaySplashScreen()+0x3d>
c0010239:	46                   	inc    esi
c001023a:	83 fa 0d             	cmp    edx,0xd
c001023d:	74 28                	je     c0010267 <KeDisplaySplashScreen()+0x6a>
c001023f:	83 fa 0a             	cmp    edx,0xa
c0010242:	75 0a                	jne    c001024e <KeDisplaySplashScreen()+0x51>
c0010244:	45                   	inc    ebp
c0010245:	be 0a 00 00 00       	mov    esi,0xa
c001024a:	31 db                	xor    ebx,ebx
c001024c:	eb 19                	jmp    c0010267 <KeDisplaySplashScreen()+0x6a>
c001024e:	83 ec 0c             	sub    esp,0xc
c0010251:	8d 14 33             	lea    edx,[ebx+esi*1]
c0010254:	55                   	push   ebp
c0010255:	0f be c0             	movsx  eax,al
c0010258:	52                   	push   edx
c0010259:	43                   	inc    ebx
c001025a:	6a 00                	push   0x0
c001025c:	6a 0e                	push   0xe
c001025e:	50                   	push   eax
c001025f:	e8 24 7b 00 00       	call   c0017d88 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010264:	83 c4 20             	add    esp,0x20
c0010267:	47                   	inc    edi
c0010268:	eb ab                	jmp    c0010215 <KeDisplaySplashScreen()+0x18>
c001026a:	83 c4 0c             	add    esp,0xc
c001026d:	5b                   	pop    ebx
c001026e:	5e                   	pop    esi
c001026f:	5f                   	pop    edi
c0010270:	5d                   	pop    ebp
c0010271:	c3                   	ret    

c0010272 <KeSetBootMessage(char const*)>:
c0010272:	57                   	push   edi
c0010273:	56                   	push   esi
c0010274:	53                   	push   ebx
c0010275:	81 ec a4 00 00 00    	sub    esp,0xa4
c001027b:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010282:	68 9e 00 00 00       	push   0x9e
c0010287:	6a 00                	push   0x0
c0010289:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001028d:	56                   	push   esi
c001028e:	e8 5d 02 ff ff       	call   c00004f0 <memset>
c0010293:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010296:	e8 d5 02 ff ff       	call   c0000570 <strlen>
c001029b:	ba 50 00 00 00       	mov    edx,0x50
c00102a0:	83 c4 10             	add    esp,0x10
c00102a3:	29 c2                	sub    edx,eax
c00102a5:	31 c9                	xor    ecx,ecx
c00102a7:	83 e2 fe             	and    edx,0xfffffffe
c00102aa:	01 f2                	add    edx,esi
c00102ac:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00102b1:	84 c0                	test   al,al
c00102b3:	74 0a                	je     c00102bf <KeSetBootMessage(char const*)+0x4d>
c00102b5:	80 cc 0f             	or     ah,0xf
c00102b8:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00102bc:	41                   	inc    ecx
c00102bd:	eb ed                	jmp    c00102ac <KeSetBootMessage(char const*)+0x3a>
c00102bf:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00102c4:	b9 9e 00 00 00       	mov    ecx,0x9e
c00102c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102cb:	81 c4 a0 00 00 00    	add    esp,0xa0
c00102d1:	5b                   	pop    ebx
c00102d2:	5e                   	pop    esi
c00102d3:	5f                   	pop    edi
c00102d4:	c3                   	ret    
c00102d5:	90                   	nop

c00102d6 <EnvVarContainer::getEnv(char const*)>:
c00102d6:	57                   	push   edi
c00102d7:	56                   	push   esi
c00102d8:	53                   	push   ebx
c00102d9:	31 db                	xor    ebx,ebx
c00102db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102df:	39 1e                	cmp    DWORD PTR [esi],ebx
c00102e1:	7e 2b                	jle    c001030e <EnvVarContainer::getEnv(char const*)+0x38>
c00102e3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00102ea:	50                   	push   eax
c00102eb:	50                   	push   eax
c00102ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00102ef:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00102f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00102f6:	e8 55 04 ff ff       	call   c0000750 <strcmp>
c00102fb:	83 c4 10             	add    esp,0x10
c00102fe:	85 c0                	test   eax,eax
c0010300:	75 09                	jne    c001030b <EnvVarContainer::getEnv(char const*)+0x35>
c0010302:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010305:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010309:	eb 05                	jmp    c0010310 <EnvVarContainer::getEnv(char const*)+0x3a>
c001030b:	43                   	inc    ebx
c001030c:	eb d1                	jmp    c00102df <EnvVarContainer::getEnv(char const*)+0x9>
c001030e:	31 c0                	xor    eax,eax
c0010310:	5b                   	pop    ebx
c0010311:	5e                   	pop    esi
c0010312:	5f                   	pop    edi
c0010313:	c3                   	ret    

c0010314 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010314:	55                   	push   ebp
c0010315:	57                   	push   edi
c0010316:	56                   	push   esi
c0010317:	53                   	push   ebx
c0010318:	83 ec 28             	sub    esp,0x28
c001031b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001031f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010323:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010327:	56                   	push   esi
c0010328:	e8 43 02 ff ff       	call   c0000570 <strlen>
c001032d:	40                   	inc    eax
c001032e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010331:	e8 78 77 ff ff       	call   c0007aae <malloc>
c0010336:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010339:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001033d:	e8 2e 02 ff ff       	call   c0000570 <strlen>
c0010342:	40                   	inc    eax
c0010343:	89 04 24             	mov    DWORD PTR [esp],eax
c0010346:	e8 63 77 ff ff       	call   c0007aae <malloc>
c001034b:	89 34 24             	mov    DWORD PTR [esp],esi
c001034e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010352:	e8 19 02 ff ff       	call   c0000570 <strlen>
c0010357:	83 c4 0c             	add    esp,0xc
c001035a:	40                   	inc    eax
c001035b:	50                   	push   eax
c001035c:	6a 00                	push   0x0
c001035e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010362:	e8 89 01 ff ff       	call   c00004f0 <memset>
c0010367:	89 34 24             	mov    DWORD PTR [esp],esi
c001036a:	e8 01 02 ff ff       	call   c0000570 <strlen>
c001036f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010373:	8d 48 01             	lea    ecx,[eax+0x1]
c0010376:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010378:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001037b:	89 de                	mov    esi,ebx
c001037d:	e8 ee 01 ff ff       	call   c0000570 <strlen>
c0010382:	83 c4 0c             	add    esp,0xc
c0010385:	40                   	inc    eax
c0010386:	50                   	push   eax
c0010387:	6a 00                	push   0x0
c0010389:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001038d:	e8 5e 01 ff ff       	call   c00004f0 <memset>
c0010392:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010395:	e8 d6 01 ff ff       	call   c0000570 <strlen>
c001039a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001039e:	8d 48 01             	lea    ecx,[eax+0x1]
c00103a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103a6:	40                   	inc    eax
c00103a7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103aa:	c1 e0 03             	shl    eax,0x3
c00103ad:	5a                   	pop    edx
c00103ae:	59                   	pop    ecx
c00103af:	50                   	push   eax
c00103b0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00103b3:	e8 e2 76 ff ff       	call   c0007a9a <realloc>
c00103b8:	8d 74 24 18          	lea    esi,[esp+0x18]
c00103bc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103bf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00103c2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00103c6:	b9 08 00 00 00       	mov    ecx,0x8
c00103cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103cd:	83 c4 2c             	add    esp,0x2c
c00103d0:	5b                   	pop    ebx
c00103d1:	5e                   	pop    esi
c00103d2:	5f                   	pop    edi
c00103d3:	5d                   	pop    ebp
c00103d4:	c3                   	ret    
c00103d5:	90                   	nop

c00103d6 <EnvVarContainer::deleteEnv(char const*)>:
c00103d6:	c3                   	ret    
c00103d7:	90                   	nop

c00103d8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00103d8:	55                   	push   ebp
c00103d9:	57                   	push   edi
c00103da:	56                   	push   esi
c00103db:	53                   	push   ebx
c00103dc:	81 ec 38 01 00 00    	sub    esp,0x138
c00103e2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00103e9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00103f0:	68 14 01 00 00       	push   0x114
c00103f5:	e8 b4 76 ff ff       	call   c0007aae <malloc>
c00103fa:	83 c4 0c             	add    esp,0xc
c00103fd:	89 c3                	mov    ebx,eax
c00103ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010402:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010409:	50                   	push   eax
c001040a:	e8 35 ab ff ff       	call   c000af44 <File::File(char const*, Process*)>
c001040f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010412:	e8 57 ae ff ff       	call   c000b26e <File::exists()>
c0010417:	83 c4 10             	add    esp,0x10
c001041a:	84 c0                	test   al,al
c001041c:	75 31                	jne    c001044f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001041e:	50                   	push   eax
c001041f:	50                   	push   eax
c0010420:	6a 12                	push   0x12
c0010422:	53                   	push   ebx
c0010423:	e8 d8 ab ff ff       	call   c000b000 <File::open(FileOpenMode)>
c0010428:	8b 03                	mov    eax,DWORD PTR [ebx]
c001042a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001042d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010430:	e8 3b 01 ff ff       	call   c0000570 <strlen>
c0010435:	5a                   	pop    edx
c0010436:	31 d2                	xor    edx,edx
c0010438:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001043c:	51                   	push   ecx
c001043d:	56                   	push   esi
c001043e:	52                   	push   edx
c001043f:	50                   	push   eax
c0010440:	53                   	push   ebx
c0010441:	ff d7                	call   edi
c0010443:	83 c4 14             	add    esp,0x14
c0010446:	53                   	push   ebx
c0010447:	e8 12 ac ff ff       	call   c000b05e <File::close()>
c001044c:	83 c4 10             	add    esp,0x10
c001044f:	56                   	push   esi
c0010450:	31 f6                	xor    esi,esi
c0010452:	68 00 01 00 00       	push   0x100
c0010457:	6a 00                	push   0x0
c0010459:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001045d:	50                   	push   eax
c001045e:	e8 8d 00 ff ff       	call   c00004f0 <memset>
c0010463:	5f                   	pop    edi
c0010464:	58                   	pop    eax
c0010465:	6a 01                	push   0x1
c0010467:	53                   	push   ebx
c0010468:	e8 93 ab ff ff       	call   c000b000 <File::open(FileOpenMode)>
c001046d:	83 c4 10             	add    esp,0x10
c0010470:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010478:	83 ec 0c             	sub    esp,0xc
c001047b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001047d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010481:	51                   	push   ecx
c0010482:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010486:	52                   	push   edx
c0010487:	6a 00                	push   0x0
c0010489:	6a 01                	push   0x1
c001048b:	53                   	push   ebx
c001048c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001048f:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c0010494:	83 c4 20             	add    esp,0x20
c0010497:	89 d0                	mov    eax,edx
c0010499:	83 fa 0d             	cmp    edx,0xd
c001049c:	0f 84 0a 01 00 00    	je     c00105ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104a2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00104a7:	0f 84 f0 00 00 00    	je     c001059d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00104ad:	83 fa 0a             	cmp    edx,0xa
c00104b0:	74 13                	je     c00104c5 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00104b2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104b7:	74 0c                	je     c00104c5 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00104b9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00104bf:	0f 8e d8 00 00 00    	jle    c001059d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00104c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00104c9:	83 ec 0c             	sub    esp,0xc
c00104cc:	8d 78 01             	lea    edi,[eax+0x1]
c00104cf:	57                   	push   edi
c00104d0:	e8 d9 75 ff ff       	call   c0007aae <malloc>
c00104d5:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00104d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00104dd:	8d 56 04             	lea    edx,[esi+0x4]
c00104e0:	89 14 24             	mov    DWORD PTR [esp],edx
c00104e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00104e7:	e8 c2 75 ff ff       	call   c0007aae <malloc>
c00104ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00104f0:	83 c4 0c             	add    esp,0xc
c00104f3:	57                   	push   edi
c00104f4:	6a 00                	push   0x0
c00104f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00104fa:	e8 f1 ff fe ff       	call   c00004f0 <memset>
c00104ff:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010503:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010507:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001050b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001050d:	83 c4 0c             	add    esp,0xc
c0010510:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010514:	52                   	push   edx
c0010515:	6a 00                	push   0x0
c0010517:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001051b:	e8 d0 ff fe ff       	call   c00004f0 <memset>
c0010520:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010524:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010528:	89 34 24             	mov    DWORD PTR [esp],esi
c001052b:	e8 40 00 ff ff       	call   c0000570 <strlen>
c0010530:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010534:	89 c1                	mov    ecx,eax
c0010536:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010538:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001053b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001053e:	40                   	inc    eax
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010545:	85 d2                	test   edx,edx
c0010547:	75 0c                	jne    c0010555 <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c0010549:	83 ec 0c             	sub    esp,0xc
c001054c:	6a 08                	push   0x8
c001054e:	e8 5b 75 ff ff       	call   c0007aae <malloc>
c0010553:	eb 0c                	jmp    c0010561 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c0010555:	c1 e0 03             	shl    eax,0x3
c0010558:	51                   	push   ecx
c0010559:	51                   	push   ecx
c001055a:	50                   	push   eax
c001055b:	52                   	push   edx
c001055c:	e8 39 75 ff ff       	call   c0007a9a <realloc>
c0010561:	83 c4 10             	add    esp,0x10
c0010564:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010567:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001056a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001056d:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010571:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010575:	b9 08 00 00 00       	mov    ecx,0x8
c001057a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001057c:	31 f6                	xor    esi,esi
c001057e:	50                   	push   eax
c001057f:	68 00 01 00 00       	push   0x100
c0010584:	6a 00                	push   0x0
c0010586:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001058a:	50                   	push   eax
c001058b:	e8 60 ff fe ff       	call   c00004f0 <memset>
c0010590:	83 c4 10             	add    esp,0x10
c0010593:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001059b:	eb 0f                	jmp    c00105ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c001059d:	3c 3d                	cmp    al,0x3d
c001059f:	74 07                	je     c00105a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00105a1:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00105a5:	46                   	inc    esi
c00105a6:	eb 04                	jmp    c00105ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00105a8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00105ac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00105b1:	0f 85 c1 fe ff ff    	jne    c0010478 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00105b7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00105bd:	5b                   	pop    ebx
c00105be:	5e                   	pop    esi
c00105bf:	5f                   	pop    edi
c00105c0:	5d                   	pop    ebp
c00105c1:	c3                   	ret    

c00105c2 <EnvVarContainer::__loadSystem()>:
c00105c2:	83 ec 10             	sub    esp,0x10
c00105c5:	68 00 21 02 c0       	push   0xc0022100
c00105ca:	68 40 0c 02 c0       	push   0xc0020c40
c00105cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105d3:	e8 00 fe ff ff       	call   c00103d8 <EnvVarContainer::loadFrom(char const*, char const*)>
c00105d8:	83 c4 1c             	add    esp,0x1c
c00105db:	c3                   	ret    

c00105dc <EnvVarContainer::__loadUser()>:
c00105dc:	c3                   	ret    
c00105dd:	90                   	nop

c00105de <EnvVarContainer::EnvVarContainer(Process*)>:
c00105de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105f0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00105f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105fe:	90                   	nop
c00105ff:	c3                   	ret    

c0010600 <EnvVarContainer::~EnvVarContainer()>:
c0010600:	83 ec 0c             	sub    esp,0xc
c0010603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010607:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001060a:	85 c0                	test   eax,eax
c001060c:	74 1d                	je     c001062b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001060e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010612:	8b 00                	mov    eax,DWORD PTR [eax]
c0010614:	85 c0                	test   eax,eax
c0010616:	74 13                	je     c001062b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001061f:	83 ec 0c             	sub    esp,0xc
c0010622:	50                   	push   eax
c0010623:	e8 96 74 ff ff       	call   c0007abe <free>
c0010628:	83 c4 10             	add    esp,0x10
c001062b:	90                   	nop
c001062c:	83 c4 0c             	add    esp,0xc
c001062f:	c3                   	ret    

c0010630 <Krnl::getEnv(Process*, char const*)>:
c0010630:	53                   	push   ebx
c0010631:	83 ec 08             	sub    esp,0x8
c0010634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010638:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001063c:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010642:	74 04                	je     c0010648 <Krnl::getEnv(Process*, char const*)+0x18>
c0010644:	85 c0                	test   eax,eax
c0010646:	75 0b                	jne    c0010653 <Krnl::getEnv(Process*, char const*)+0x23>
c0010648:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001064d:	85 c0                	test   eax,eax
c001064f:	75 19                	jne    c001066a <Krnl::getEnv(Process*, char const*)+0x3a>
c0010651:	eb 27                	jmp    c001067a <Krnl::getEnv(Process*, char const*)+0x4a>
c0010653:	52                   	push   edx
c0010654:	52                   	push   edx
c0010655:	53                   	push   ebx
c0010656:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001065c:	e8 75 fc ff ff       	call   c00102d6 <EnvVarContainer::getEnv(char const*)>
c0010661:	83 c4 10             	add    esp,0x10
c0010664:	85 c0                	test   eax,eax
c0010666:	75 28                	jne    c0010690 <Krnl::getEnv(Process*, char const*)+0x60>
c0010668:	eb de                	jmp    c0010648 <Krnl::getEnv(Process*, char const*)+0x18>
c001066a:	52                   	push   edx
c001066b:	52                   	push   edx
c001066c:	53                   	push   ebx
c001066d:	50                   	push   eax
c001066e:	e8 63 fc ff ff       	call   c00102d6 <EnvVarContainer::getEnv(char const*)>
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	85 c0                	test   eax,eax
c0010678:	75 16                	jne    c0010690 <Krnl::getEnv(Process*, char const*)+0x60>
c001067a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001067e:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010683:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010687:	83 c4 08             	add    esp,0x8
c001068a:	5b                   	pop    ebx
c001068b:	e9 46 fc ff ff       	jmp    c00102d6 <EnvVarContainer::getEnv(char const*)>
c0010690:	83 c4 08             	add    esp,0x8
c0010693:	5b                   	pop    ebx
c0010694:	c3                   	ret    

c0010695 <Krnl::setEnvSystem(char const*, char const*)>:
c0010695:	83 ec 10             	sub    esp,0x10
c0010698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001069c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106a0:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00106a6:	e8 69 fc ff ff       	call   c0010314 <EnvVarContainer::setEnv(char const*, char const*)>
c00106ab:	83 c4 1c             	add    esp,0x1c
c00106ae:	c3                   	ret    

c00106af <Krnl::setEnvUser(char const*, char const*)>:
c00106af:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00106b4:	85 c0                	test   eax,eax
c00106b6:	74 15                	je     c00106cd <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00106b8:	83 ec 10             	sub    esp,0x10
c00106bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106c3:	50                   	push   eax
c00106c4:	e8 4b fc ff ff       	call   c0010314 <EnvVarContainer::setEnv(char const*, char const*)>
c00106c9:	83 c4 1c             	add    esp,0x1c
c00106cc:	c3                   	ret    
c00106cd:	c3                   	ret    

c00106ce <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00106ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00106d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00106dc:	e9 33 fc ff ff       	jmp    c0010314 <EnvVarContainer::setEnv(char const*, char const*)>

c00106e1 <Krnl::deleteEnvSystem(char const*)>:
c00106e1:	c3                   	ret    

c00106e2 <Krnl::deleteEnvUser(char const*)>:
c00106e2:	c3                   	ret    

c00106e3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00106e3:	c3                   	ret    

c00106e4 <Krnl::newProcessEnv(Process*)>:
c00106e4:	83 ec 28             	sub    esp,0x28
c00106e7:	6a 0c                	push   0xc
c00106e9:	e8 c0 73 ff ff       	call   c0007aae <malloc>
c00106ee:	5a                   	pop    edx
c00106ef:	59                   	pop    ecx
c00106f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00106f4:	50                   	push   eax
c00106f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00106f9:	e8 e0 fe ff ff       	call   c00105de <EnvVarContainer::EnvVarContainer(Process*)>
c00106fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010702:	83 c4 2c             	add    esp,0x2c
c0010705:	c3                   	ret    

c0010706 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010706:	57                   	push   edi
c0010707:	56                   	push   esi
c0010708:	53                   	push   ebx
c0010709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070d:	83 ec 0c             	sub    esp,0xc
c0010710:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010716:	6a 0c                	push   0xc
c0010718:	e8 91 73 ff ff       	call   c0007aae <malloc>
c001071d:	89 c3                	mov    ebx,eax
c001071f:	58                   	pop    eax
c0010720:	5a                   	pop    edx
c0010721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010725:	53                   	push   ebx
c0010726:	e8 b3 fe ff ff       	call   c00105de <EnvVarContainer::EnvVarContainer(Process*)>
c001072b:	8b 07                	mov    eax,DWORD PTR [edi]
c001072d:	89 03                	mov    DWORD PTR [ebx],eax
c001072f:	c1 e0 03             	shl    eax,0x3
c0010732:	89 04 24             	mov    DWORD PTR [esp],eax
c0010735:	e8 74 73 ff ff       	call   c0007aae <malloc>
c001073a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001073d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001073f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010742:	c1 e1 03             	shl    ecx,0x3
c0010745:	89 c7                	mov    edi,eax
c0010747:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010749:	83 c4 10             	add    esp,0x10
c001074c:	89 d8                	mov    eax,ebx
c001074e:	5b                   	pop    ebx
c001074f:	5e                   	pop    esi
c0010750:	5f                   	pop    edi
c0010751:	c3                   	ret    

c0010752 <Krnl::loadSystemEnv()>:
c0010752:	53                   	push   ebx
c0010753:	83 ec 14             	sub    esp,0x14
c0010756:	6a 0c                	push   0xc
c0010758:	e8 51 73 ff ff       	call   c0007aae <malloc>
c001075d:	89 c3                	mov    ebx,eax
c001075f:	58                   	pop    eax
c0010760:	5a                   	pop    edx
c0010761:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010767:	53                   	push   ebx
c0010768:	e8 71 fe ff ff       	call   c00105de <EnvVarContainer::EnvVarContainer(Process*)>
c001076d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010770:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c0010776:	e8 47 fe ff ff       	call   c00105c2 <EnvVarContainer::__loadSystem()>
c001077b:	83 c4 18             	add    esp,0x18
c001077e:	5b                   	pop    ebx
c001077f:	c3                   	ret    

c0010780 <Krnl::loadUserEnv()>:
c0010780:	53                   	push   ebx
c0010781:	83 ec 14             	sub    esp,0x14
c0010784:	6a 0c                	push   0xc
c0010786:	e8 23 73 ff ff       	call   c0007aae <malloc>
c001078b:	89 c3                	mov    ebx,eax
c001078d:	58                   	pop    eax
c001078e:	5a                   	pop    edx
c001078f:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010795:	53                   	push   ebx
c0010796:	e8 43 fe ff ff       	call   c00105de <EnvVarContainer::EnvVarContainer(Process*)>
c001079b:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00107a1:	83 c4 18             	add    esp,0x18
c00107a4:	5b                   	pop    ebx
c00107a5:	c3                   	ret    

c00107a6 <Krnl::flushEnv()>:
c00107a6:	c3                   	ret    

c00107a7 <Krnl::getProcessTotalEnvCount(Process*)>:
c00107a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ab:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00107b1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00107b7:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00107bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00107be:	03 01                	add    eax,DWORD PTR [ecx]
c00107c0:	85 d2                	test   edx,edx
c00107c2:	74 02                	je     c00107c6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00107c4:	03 02                	add    eax,DWORD PTR [edx]
c00107c6:	c3                   	ret    

c00107c7 <Krnl::getProcessEnvPair(Process*, int)>:
c00107c7:	57                   	push   edi
c00107c8:	56                   	push   esi
c00107c9:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c00107cf:	53                   	push   ebx
c00107d0:	85 f6                	test   esi,esi
c00107d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107da:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00107e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00107e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00107e6:	75 16                	jne    c00107fe <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00107e8:	39 c2                	cmp    edx,eax
c00107ea:	7c 16                	jl     c0010802 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00107ec:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c00107f2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00107f4:	01 c6                	add    esi,eax
c00107f6:	39 d6                	cmp    esi,edx
c00107f8:	7e 3c                	jle    c0010836 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00107fa:	29 c2                	sub    edx,eax
c00107fc:	eb 04                	jmp    c0010802 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00107fe:	39 c2                	cmp    edx,eax
c0010800:	7d 05                	jge    c0010807 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010802:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010805:	eb 20                	jmp    c0010827 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010807:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010809:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001080c:	39 d1                	cmp    ecx,edx
c001080e:	7e 04                	jle    c0010814 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010810:	29 c2                	sub    edx,eax
c0010812:	eb 10                	jmp    c0010824 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010814:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c001081a:	03 0e                	add    ecx,DWORD PTR [esi]
c001081c:	39 d1                	cmp    ecx,edx
c001081e:	7e 16                	jle    c0010836 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010820:	29 c2                	sub    edx,eax
c0010822:	29 fa                	sub    edx,edi
c0010824:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010827:	8d 14 d0             	lea    edx,[eax+edx*8]
c001082a:	8b 02                	mov    eax,DWORD PTR [edx]
c001082c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001082f:	89 03                	mov    DWORD PTR [ebx],eax
c0010831:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010834:	eb 1d                	jmp    c0010853 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010836:	83 ec 0c             	sub    esp,0xc
c0010839:	68 62 0c 02 c0       	push   0xc0020c62
c001083e:	e8 ac 00 00 00       	call   c00108ef <KePanic(char const*)>
c0010843:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010849:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010850:	83 c4 10             	add    esp,0x10
c0010853:	89 d8                	mov    eax,ebx
c0010855:	5b                   	pop    ebx
c0010856:	5e                   	pop    esi
c0010857:	5f                   	pop    edi
c0010858:	c2 04 00             	ret    0x4

c001085b <CPU::current()>:
c001085b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010860:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010866:	c3                   	ret    

c0010867 <operator new(unsigned long)>:
c0010867:	e9 42 72 ff ff       	jmp    c0007aae <malloc>

c001086c <operator delete(void*)>:
c001086c:	e9 5d 72 ff ff       	jmp    c0007ace <rfree>

c0010871 <disableIRQs()>:
c0010871:	fa                   	cli    
c0010872:	c3                   	ret    

c0010873 <enableIRQs()>:
c0010873:	fb                   	sti    
c0010874:	c3                   	ret    

c0010875 <lockScheduler()>:
c0010875:	fa                   	cli    
c0010876:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001087c:	c3                   	ret    

c001087d <unlockScheduler()>:
c001087d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010882:	48                   	dec    eax
c0010883:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010888:	75 01                	jne    c001088b <unlockScheduler()+0xe>
c001088a:	fb                   	sti    
c001088b:	c3                   	ret    

c001088c <lockStuff()>:
c001088c:	fa                   	cli    
c001088d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010893:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0010899:	c3                   	ret    

c001089a <unlockStuff()>:
c001089a:	83 ec 0c             	sub    esp,0xc
c001089d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00108a2:	48                   	dec    eax
c00108a3:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00108a8:	75 18                	jne    c00108c2 <unlockStuff()+0x28>
c00108aa:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00108b1:	74 0f                	je     c00108c2 <unlockStuff()+0x28>
c00108b3:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00108bd:	e8 e2 47 00 00       	call   c00150a4 <schedule()>
c00108c2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00108c7:	48                   	dec    eax
c00108c8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00108cd:	75 01                	jne    c00108d0 <unlockStuff()+0x36>
c00108cf:	fb                   	sti    
c00108d0:	83 c4 0c             	add    esp,0xc
c00108d3:	c3                   	ret    

c00108d4 <Virt::getAKernelVAS()>:
c00108d4:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00108d9:	c3                   	ret    

c00108da <__not_memcpy>:
c00108da:	57                   	push   edi
c00108db:	56                   	push   esi
c00108dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00108e8:	89 c7                	mov    edi,eax
c00108ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108ec:	5e                   	pop    esi
c00108ed:	5f                   	pop    edi
c00108ee:	c3                   	ret    

c00108ef <KePanic(char const*)>:
c00108ef:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c00108f6:	e9 e7 66 00 00       	jmp    c0016fe2 <HalPanic(char const*)>

c00108fb <Krnl::powerThread(void*)>:
c00108fb:	83 ec 0c             	sub    esp,0xc
c00108fe:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010903:	48                   	dec    eax
c0010904:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010909:	75 01                	jne    c001090c <Krnl::powerThread(void*)+0x11>
c001090b:	fb                   	sti    
c001090c:	83 ec 0c             	sub    esp,0xc
c001090f:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010916:	6a 0a                	push   0xa
c0010918:	e8 cb 4a 00 00       	call   c00153e8 <sleep(unsigned int)>
c001091d:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010924:	83 c4 10             	add    esp,0x10
c0010927:	eb e3                	jmp    c001090c <Krnl::powerThread(void*)+0x11>

c0010929 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010929:	57                   	push   edi
c001092a:	b9 09 00 00 00       	mov    ecx,0x9
c001092f:	56                   	push   esi
c0010930:	bf 60 79 02 c0       	mov    edi,0xc0027960
c0010935:	fc                   	cld    
c0010936:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001093a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001093c:	5e                   	pop    esi
c001093d:	5f                   	pop    edi
c001093e:	c3                   	ret    

c001093f <Krnl::userIOReceived()>:
c001093f:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010949:	c3                   	ret    

c001094a <Krnl::handlePowerButton()>:
c001094a:	83 ec 0c             	sub    esp,0xc
c001094d:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010952:	83 f8 02             	cmp    eax,0x2
c0010955:	75 10                	jne    c0010967 <Krnl::handlePowerButton()+0x1d>
c0010957:	83 ec 0c             	sub    esp,0xc
c001095a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010960:	e8 bb 67 ff ff       	call   c0007120 <Computer::shutdown()>
c0010965:	eb 11                	jmp    c0010978 <Krnl::handlePowerButton()+0x2e>
c0010967:	48                   	dec    eax
c0010968:	75 11                	jne    c001097b <Krnl::handlePowerButton()+0x31>
c001096a:	83 ec 0c             	sub    esp,0xc
c001096d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010973:	e8 d8 67 ff ff       	call   c0007150 <Computer::sleep()>
c0010978:	83 c4 10             	add    esp,0x10
c001097b:	83 c4 0c             	add    esp,0xc
c001097e:	c3                   	ret    

c001097f <Krnl::handleSleepButton()>:
c001097f:	83 ec 0c             	sub    esp,0xc
c0010982:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0010987:	83 f8 02             	cmp    eax,0x2
c001098a:	75 10                	jne    c001099c <Krnl::handleSleepButton()+0x1d>
c001098c:	83 ec 0c             	sub    esp,0xc
c001098f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010995:	e8 86 67 ff ff       	call   c0007120 <Computer::shutdown()>
c001099a:	eb 11                	jmp    c00109ad <Krnl::handleSleepButton()+0x2e>
c001099c:	48                   	dec    eax
c001099d:	75 11                	jne    c00109b0 <Krnl::handleSleepButton()+0x31>
c001099f:	83 ec 0c             	sub    esp,0xc
c00109a2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00109a8:	e8 a3 67 ff ff       	call   c0007150 <Computer::sleep()>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 c4 0c             	add    esp,0xc
c00109b3:	c3                   	ret    

c00109b4 <Krnl::setupPowerManager()>:
c00109b4:	83 ec 0c             	sub    esp,0xc
c00109b7:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00109c1:	68 f0 00 00 00       	push   0xf0
c00109c6:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c00109cd:	6a 00                	push   0x0
c00109cf:	68 fb 08 01 c0       	push   0xc00108fb
c00109d4:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00109da:	e8 75 44 00 00       	call   c0014e54 <Process::createThread(void (*)(void*), void*, int)>
c00109df:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c00109e9:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c00109f3:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c00109fd:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010a07:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010a11:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010a1b:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010a25:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010a2f:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010a39:	83 c4 1c             	add    esp,0x1c
c0010a3c:	c3                   	ret    

c0010a3d <KeRand()>:
c0010a3d:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010a47:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010a51:	53                   	push   ebx
c0010a52:	01 c1                	add    ecx,eax
c0010a54:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010a59:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010a5f:	01 ca                	add    edx,ecx
c0010a61:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010a66:	83 d2 00             	adc    edx,0x0
c0010a69:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010a6e:	0f b7 da             	movzx  ebx,dx
c0010a71:	89 da                	mov    edx,ebx
c0010a73:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c0010a79:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010a7d:	5b                   	pop    ebx
c0010a7e:	c3                   	ret    

c0010a7f <KeSeedRand(unsigned int)>:
c0010a7f:	53                   	push   ebx
c0010a80:	83 ec 08             	sub    esp,0x8
c0010a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a87:	e8 6d 68 00 00       	call   c00172f9 <HalGetRand()>
c0010a8c:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010a96:	31 d8                	xor    eax,ebx
c0010a98:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010a9d:	e8 9b ff ff ff       	call   c0010a3d <KeRand()>
c0010aa2:	83 c4 08             	add    esp,0x8
c0010aa5:	5b                   	pop    ebx
c0010aa6:	eb 95                	jmp    c0010a3d <KeRand()>

c0010aa8 <KeInitRand()>:
c0010aa8:	83 ec 0c             	sub    esp,0xc
c0010aab:	e8 3e 66 00 00       	call   c00170ee <HalQueryPerformanceCounter()>
c0010ab0:	0f 20 da             	mov    edx,cr3
c0010ab3:	0f 22 da             	mov    cr3,edx
c0010ab6:	0f 20 da             	mov    edx,cr3
c0010ab9:	0f 22 da             	mov    cr3,edx
c0010abc:	0f 20 da             	mov    edx,cr3
c0010abf:	0f 22 da             	mov    cr3,edx
c0010ac2:	0f 20 da             	mov    edx,cr3
c0010ac5:	0f 22 da             	mov    cr3,edx
c0010ac8:	83 ec 0c             	sub    esp,0xc
c0010acb:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010ad0:	50                   	push   eax
c0010ad1:	e8 a9 ff ff ff       	call   c0010a7f <KeSeedRand(unsigned int)>
c0010ad6:	83 c4 1c             	add    esp,0x1c
c0010ad9:	c3                   	ret    
c0010ada:	66 90                	xchg   ax,ax

c0010adc <KeResolveCompatibilitySymbol(char*)>:
c0010adc:	83 ec 0c             	sub    esp,0xc
c0010adf:	83 ec 08             	sub    esp,0x8
c0010ae2:	68 7c 0c 02 c0       	push   0xc0020c7c
c0010ae7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aeb:	e8 60 fc fe ff       	call   c0000750 <strcmp>
c0010af0:	83 c4 10             	add    esp,0x10
c0010af3:	85 c0                	test   eax,eax
c0010af5:	0f 94 c0             	sete   al
c0010af8:	0f b6 c0             	movzx  eax,al
c0010afb:	85 c0                	test   eax,eax
c0010afd:	74 0d                	je     c0010b0c <KeResolveCompatibilitySymbol(char*)+0x30>
c0010aff:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010b04:	e9 8b 01 00 00       	jmp    c0010c94 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b09:	8d 76 00             	lea    esi,[esi+0x0]
c0010b0c:	83 ec 08             	sub    esp,0x8
c0010b0f:	68 85 0c 02 c0       	push   0xc0020c85
c0010b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b18:	e8 33 fc fe ff       	call   c0000750 <strcmp>
c0010b1d:	83 c4 10             	add    esp,0x10
c0010b20:	85 c0                	test   eax,eax
c0010b22:	0f 94 c0             	sete   al
c0010b25:	0f b6 c0             	movzx  eax,al
c0010b28:	85 c0                	test   eax,eax
c0010b2a:	74 0c                	je     c0010b38 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010b2c:	b8 40 e6 01 c0       	mov    eax,0xc001e640
c0010b31:	e9 5e 01 00 00       	jmp    c0010c94 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b36:	66 90                	xchg   ax,ax
c0010b38:	83 ec 08             	sub    esp,0x8
c0010b3b:	68 8f 0c 02 c0       	push   0xc0020c8f
c0010b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b44:	e8 07 fc fe ff       	call   c0000750 <strcmp>
c0010b49:	83 c4 10             	add    esp,0x10
c0010b4c:	85 c0                	test   eax,eax
c0010b4e:	0f 94 c0             	sete   al
c0010b51:	0f b6 c0             	movzx  eax,al
c0010b54:	85 c0                	test   eax,eax
c0010b56:	74 0c                	je     c0010b64 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010b58:	b8 74 e3 01 c0       	mov    eax,0xc001e374
c0010b5d:	e9 32 01 00 00       	jmp    c0010c94 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b62:	66 90                	xchg   ax,ax
c0010b64:	83 ec 08             	sub    esp,0x8
c0010b67:	68 98 0c 02 c0       	push   0xc0020c98
c0010b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b70:	e8 db fb fe ff       	call   c0000750 <strcmp>
c0010b75:	83 c4 10             	add    esp,0x10
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	0f 94 c0             	sete   al
c0010b7d:	0f b6 c0             	movzx  eax,al
c0010b80:	85 c0                	test   eax,eax
c0010b82:	74 0c                	je     c0010b90 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010b84:	b8 ef 08 01 c0       	mov    eax,0xc00108ef
c0010b89:	e9 06 01 00 00       	jmp    c0010c94 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b8e:	66 90                	xchg   ax,ax
c0010b90:	83 ec 08             	sub    esp,0x8
c0010b93:	68 ab 0c 02 c0       	push   0xc0020cab
c0010b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b9c:	e8 af fb fe ff       	call   c0000750 <strcmp>
c0010ba1:	83 c4 10             	add    esp,0x10
c0010ba4:	85 c0                	test   eax,eax
c0010ba6:	0f 94 c0             	sete   al
c0010ba9:	0f b6 c0             	movzx  eax,al
c0010bac:	85 c0                	test   eax,eax
c0010bae:	74 0c                	je     c0010bbc <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010bb0:	b8 72 02 01 c0       	mov    eax,0xc0010272
c0010bb5:	e9 da 00 00 00       	jmp    c0010c94 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bba:	66 90                	xchg   ax,ax
c0010bbc:	83 ec 08             	sub    esp,0x8
c0010bbf:	68 c8 0c 02 c0       	push   0xc0020cc8
c0010bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc8:	e8 83 fb fe ff       	call   c0000750 <strcmp>
c0010bcd:	83 c4 10             	add    esp,0x10
c0010bd0:	85 c0                	test   eax,eax
c0010bd2:	0f 94 c0             	sete   al
c0010bd5:	0f b6 c0             	movzx  eax,al
c0010bd8:	85 c0                	test   eax,eax
c0010bda:	74 0c                	je     c0010be8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010bdc:	b8 40 e7 01 c0       	mov    eax,0xc001e740
c0010be1:	e9 ae 00 00 00       	jmp    c0010c94 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010be6:	66 90                	xchg   ax,ax
c0010be8:	83 ec 08             	sub    esp,0x8
c0010beb:	68 d2 0c 02 c0       	push   0xc0020cd2
c0010bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf4:	e8 57 fb fe ff       	call   c0000750 <strcmp>
c0010bf9:	83 c4 10             	add    esp,0x10
c0010bfc:	85 c0                	test   eax,eax
c0010bfe:	0f 94 c0             	sete   al
c0010c01:	0f b6 c0             	movzx  eax,al
c0010c04:	85 c0                	test   eax,eax
c0010c06:	74 0c                	je     c0010c14 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010c08:	b8 c0 e4 01 c0       	mov    eax,0xc001e4c0
c0010c0d:	e9 82 00 00 00       	jmp    c0010c94 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c12:	66 90                	xchg   ax,ax
c0010c14:	83 ec 08             	sub    esp,0x8
c0010c17:	68 db 0c 02 c0       	push   0xc0020cdb
c0010c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c20:	e8 2b fb fe ff       	call   c0000750 <strcmp>
c0010c25:	83 c4 10             	add    esp,0x10
c0010c28:	85 c0                	test   eax,eax
c0010c2a:	0f 94 c0             	sete   al
c0010c2d:	0f b6 c0             	movzx  eax,al
c0010c30:	85 c0                	test   eax,eax
c0010c32:	74 08                	je     c0010c3c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010c34:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010c39:	eb 59                	jmp    c0010c94 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c3b:	90                   	nop
c0010c3c:	83 ec 08             	sub    esp,0x8
c0010c3f:	68 f3 0c 02 c0       	push   0xc0020cf3
c0010c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c48:	e8 03 fb fe ff       	call   c0000750 <strcmp>
c0010c4d:	83 c4 10             	add    esp,0x10
c0010c50:	85 c0                	test   eax,eax
c0010c52:	0f 94 c0             	sete   al
c0010c55:	0f b6 c0             	movzx  eax,al
c0010c58:	85 c0                	test   eax,eax
c0010c5a:	74 08                	je     c0010c64 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010c5c:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010c61:	eb 31                	jmp    c0010c94 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c63:	90                   	nop
c0010c64:	83 ec 08             	sub    esp,0x8
c0010c67:	68 00 0d 02 c0       	push   0xc0020d00
c0010c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c70:	e8 db fa fe ff       	call   c0000750 <strcmp>
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	85 c0                	test   eax,eax
c0010c7a:	0f 94 c0             	sete   al
c0010c7d:	0f b6 c0             	movzx  eax,al
c0010c80:	85 c0                	test   eax,eax
c0010c82:	74 08                	je     c0010c8c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010c84:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010c89:	eb 09                	jmp    c0010c94 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c8b:	90                   	nop
c0010c8c:	b8 00 00 00 00       	mov    eax,0x0
c0010c91:	8d 76 00             	lea    esi,[esi+0x0]
c0010c94:	83 c4 0c             	add    esp,0xc
c0010c97:	c3                   	ret    

c0010c98 <KiSigKill(int)>:
c0010c98:	83 ec 0c             	sub    esp,0xc
c0010c9b:	6a 00                	push   0x0
c0010c9d:	6a 00                	push   0x0
c0010c9f:	6a ff                	push   0xffffffff
c0010ca1:	6a 01                	push   0x1
c0010ca3:	e8 aa 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ca8:	83 c4 1c             	add    esp,0x1c
c0010cab:	c3                   	ret    

c0010cac <KiDefaultSignalHandlerIgnore(int)>:
c0010cac:	c3                   	ret    

c0010cad <KiDefaultSignalHandlerPause(int)>:
c0010cad:	57                   	push   edi
c0010cae:	b9 07 00 00 00       	mov    ecx,0x7
c0010cb3:	56                   	push   esi
c0010cb4:	be 49 0d 02 c0       	mov    esi,0xc0020d49
c0010cb9:	83 ec 24             	sub    esp,0x24
c0010cbc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010cc0:	fc                   	cld    
c0010cc1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010cc3:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010cc7:	50                   	push   eax
c0010cc8:	6a 00                	push   0x0
c0010cca:	6a 00                	push   0x0
c0010ccc:	6a 27                	push   0x27
c0010cce:	e8 7f 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010cd3:	83 c4 34             	add    esp,0x34
c0010cd6:	5e                   	pop    esi
c0010cd7:	5f                   	pop    edi
c0010cd8:	c3                   	ret    

c0010cd9 <KiDefaultSignalHandlerResume(int)>:
c0010cd9:	57                   	push   edi
c0010cda:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010cdf:	56                   	push   esi
c0010ce0:	be 65 0d 02 c0       	mov    esi,0xc0020d65
c0010ce5:	83 ec 24             	sub    esp,0x24
c0010ce8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010cec:	fc                   	cld    
c0010ced:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cef:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010cf3:	50                   	push   eax
c0010cf4:	6a 00                	push   0x0
c0010cf6:	6a 00                	push   0x0
c0010cf8:	6a 27                	push   0x27
c0010cfa:	e8 53 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010cff:	83 c4 34             	add    esp,0x34
c0010d02:	5e                   	pop    esi
c0010d03:	5f                   	pop    edi
c0010d04:	c3                   	ret    

c0010d05 <KeDeinitSignals(SigHandlerBlock*)>:
c0010d05:	e9 b4 6d ff ff       	jmp    c0007abe <free>

c0010d0a <KeInitSignals()>:
c0010d0a:	53                   	push   ebx
c0010d0b:	83 ec 14             	sub    esp,0x14
c0010d0e:	68 c8 00 00 00       	push   0xc8
c0010d13:	e8 96 6d ff ff       	call   c0007aae <malloc>
c0010d18:	83 c4 0c             	add    esp,0xc
c0010d1b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010d25:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010d2f:	89 c3                	mov    ebx,eax
c0010d31:	6a 20                	push   0x20
c0010d33:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010d39:	6a 00                	push   0x0
c0010d3b:	50                   	push   eax
c0010d3c:	e8 af f7 fe ff       	call   c00004f0 <memset>
c0010d41:	83 c4 0c             	add    esp,0xc
c0010d44:	6a 44                	push   0x44
c0010d46:	6a 00                	push   0x0
c0010d48:	53                   	push   ebx
c0010d49:	e8 a2 f7 fe ff       	call   c00004f0 <memset>
c0010d4e:	89 d8                	mov    eax,ebx
c0010d50:	83 c4 18             	add    esp,0x18
c0010d53:	5b                   	pop    ebx
c0010d54:	c3                   	ret    

c0010d55 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010d55:	53                   	push   ebx
c0010d56:	b8 01 00 00 00       	mov    eax,0x1
c0010d5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d63:	83 f9 10             	cmp    ecx,0x10
c0010d66:	7f 21                	jg     c0010d89 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010d68:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d6f:	89 03                	mov    DWORD PTR [ebx],eax
c0010d71:	b8 01 00 00 00       	mov    eax,0x1
c0010d76:	d3 e0                	shl    eax,cl
c0010d78:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010d7c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010d7f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010d87:	31 c0                	xor    eax,eax
c0010d89:	5b                   	pop    ebx
c0010d8a:	c3                   	ret    

c0010d8b <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010d8b:	55                   	push   ebp
c0010d8c:	57                   	push   edi
c0010d8d:	bf 08 00 00 00       	mov    edi,0x8
c0010d92:	56                   	push   esi
c0010d93:	53                   	push   ebx
c0010d94:	83 ec 18             	sub    esp,0x18
c0010d97:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d9b:	68 82 0d 02 c0       	push   0xc0020d82
c0010da0:	e8 1d 9c ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0010da5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010dac:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	31 c9                	xor    ecx,ecx
c0010db7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010dbb:	99                   	cdq    
c0010dbc:	f7 ff                	idiv   edi
c0010dbe:	8d 42 24             	lea    eax,[edx+0x24]
c0010dc1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010dc5:	85 f6                	test   esi,esi
c0010dc7:	75 1a                	jne    c0010de3 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010dc9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010dcd:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010dd1:	50                   	push   eax
c0010dd2:	50                   	push   eax
c0010dd3:	52                   	push   edx
c0010dd4:	68 93 0d 02 c0       	push   0xc0020d93
c0010dd9:	e8 e4 9b ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0010dde:	83 c4 10             	add    esp,0x10
c0010de1:	eb 1b                	jmp    c0010dfe <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010de3:	41                   	inc    ecx
c0010de4:	83 f9 08             	cmp    ecx,0x8
c0010de7:	75 ce                	jne    c0010db7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010de9:	83 ec 0c             	sub    esp,0xc
c0010dec:	be 01 00 00 00       	mov    esi,0x1
c0010df1:	68 b4 0d 02 c0       	push   0xc0020db4
c0010df6:	e8 c7 9b ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	83 c4 0c             	add    esp,0xc
c0010e01:	89 f0                	mov    eax,esi
c0010e03:	5b                   	pop    ebx
c0010e04:	5e                   	pop    esi
c0010e05:	5f                   	pop    edi
c0010e06:	5d                   	pop    ebp
c0010e07:	c3                   	ret    

c0010e08 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010e08:	55                   	push   ebp
c0010e09:	57                   	push   edi
c0010e0a:	56                   	push   esi
c0010e0b:	53                   	push   ebx
c0010e0c:	51                   	push   ecx
c0010e0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e11:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010e18:	0f 84 af 00 00 00    	je     c0010ecd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e1e:	31 c9                	xor    ecx,ecx
c0010e20:	bf 08 00 00 00       	mov    edi,0x8
c0010e25:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010e2b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010e2e:	99                   	cdq    
c0010e2f:	f7 ff                	idiv   edi
c0010e31:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010e38:	85 ed                	test   ebp,ebp
c0010e3a:	0f 84 9e 00 00 00    	je     c0010ede <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010e40:	89 e9                	mov    ecx,ebp
c0010e42:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010e48:	bf 01 00 00 00       	mov    edi,0x1
c0010e4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e50:	d3 e7                	shl    edi,cl
c0010e52:	31 c9                	xor    ecx,ecx
c0010e54:	b8 01 00 00 00       	mov    eax,0x1
c0010e59:	d3 e0                	shl    eax,cl
c0010e5b:	85 04 24             	test   DWORD PTR [esp],eax
c0010e5e:	74 06                	je     c0010e66 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010e60:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010e64:	75 67                	jne    c0010ecd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e66:	41                   	inc    ecx
c0010e67:	83 f9 11             	cmp    ecx,0x11
c0010e6a:	75 e8                	jne    c0010e54 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010e6c:	46                   	inc    esi
c0010e6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010e70:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e76:	09 f8                	or     eax,edi
c0010e78:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010e83:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010e89:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010e90:	31 c0                	xor    eax,eax
c0010e92:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010e9a:	74 09                	je     c0010ea5 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010e9c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010ea3:	eb 06                	jmp    c0010eab <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010ea5:	40                   	inc    eax
c0010ea6:	83 f8 08             	cmp    eax,0x8
c0010ea9:	75 e7                	jne    c0010e92 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010eab:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010eae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010eb2:	83 fd 09             	cmp    ebp,0x9
c0010eb5:	89 2a                	mov    DWORD PTR [edx],ebp
c0010eb7:	75 07                	jne    c0010ec0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010eb9:	b8 98 0c 01 c0       	mov    eax,0xc0010c98
c0010ebe:	eb 31                	jmp    c0010ef1 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010ec0:	83 f8 01             	cmp    eax,0x1
c0010ec3:	75 0c                	jne    c0010ed1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010ec5:	f7 d7                	not    edi
c0010ec7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010ecd:	31 c0                	xor    eax,eax
c0010ecf:	eb 20                	jmp    c0010ef1 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010ed1:	85 c0                	test   eax,eax
c0010ed3:	75 1c                	jne    c0010ef1 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010ed5:	8b 04 ad 60 21 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffddea0]
c0010edc:	eb 13                	jmp    c0010ef1 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010ede:	46                   	inc    esi
c0010edf:	41                   	inc    ecx
c0010ee0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010ee6:	83 f9 08             	cmp    ecx,0x8
c0010ee9:	0f 85 36 ff ff ff    	jne    c0010e25 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010eef:	eb dc                	jmp    c0010ecd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010ef1:	5a                   	pop    edx
c0010ef2:	5b                   	pop    ebx
c0010ef3:	5e                   	pop    esi
c0010ef4:	5f                   	pop    edi
c0010ef5:	5d                   	pop    ebp
c0010ef6:	c3                   	ret    

c0010ef7 <KiCheckSignalZ>:
c0010ef7:	83 ec 10             	sub    esp,0x10
c0010efa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010efe:	50                   	push   eax
c0010eff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f07:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010f0d:	e8 f6 fe ff ff       	call   c0010e08 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010f12:	5a                   	pop    edx
c0010f13:	31 d2                	xor    edx,edx
c0010f15:	59                   	pop    ecx
c0010f16:	85 c0                	test   eax,eax
c0010f18:	74 19                	je     c0010f33 <KiCheckSignalZ+0x3c>
c0010f1a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010f20:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010f23:	89 02                	mov    DWORD PTR [edx],eax
c0010f25:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f30:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010f33:	89 d0                	mov    eax,edx
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	c3                   	ret    

c0010f39 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010f39:	56                   	push   esi
c0010f3a:	53                   	push   ebx
c0010f3b:	bb 01 00 00 00       	mov    ebx,0x1
c0010f40:	52                   	push   edx
c0010f41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010f45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f49:	d3 e3                	shl    ebx,cl
c0010f4b:	83 f9 10             	cmp    ecx,0x10
c0010f4e:	7f 08                	jg     c0010f58 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010f50:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010f56:	75 10                	jne    c0010f68 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010f58:	83 ec 0c             	sub    esp,0xc
c0010f5b:	68 c5 0d 02 c0       	push   0xc0020dc5
c0010f60:	e8 8a f9 ff ff       	call   c00108ef <KePanic(char const*)>
c0010f65:	83 c4 10             	add    esp,0x10
c0010f68:	f7 d3                	not    ebx
c0010f6a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010f70:	58                   	pop    eax
c0010f71:	5b                   	pop    ebx
c0010f72:	5e                   	pop    esi
c0010f73:	c3                   	ret    

c0010f74 <KiFinishSignalZ>:
c0010f74:	53                   	push   ebx
c0010f75:	83 ec 10             	sub    esp,0x10
c0010f78:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010f7c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010f7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f87:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010f8d:	e8 a7 ff ff ff       	call   c0010f39 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010f92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f98:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010f9f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010fa6:	83 c4 18             	add    esp,0x18
c0010fa9:	5b                   	pop    ebx
c0010faa:	c3                   	ret    

c0010fab <SysSeekDir(regs*)>:
c0010fab:	31 c0                	xor    eax,eax
c0010fad:	31 d2                	xor    edx,edx
c0010faf:	c3                   	ret    

c0010fb0 <SysTellDir(regs*)>:
c0010fb0:	31 c0                	xor    eax,eax
c0010fb2:	31 d2                	xor    edx,edx
c0010fb4:	c3                   	ret    

c0010fb5 <SysVerify(regs*)>:
c0010fb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fb9:	31 d2                	xor    edx,edx
c0010fbb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fbe:	c3                   	ret    

c0010fbf <SysGetArgc(regs*)>:
c0010fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fc7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010fcd:	89 c2                	mov    edx,eax
c0010fcf:	c1 fa 1f             	sar    edx,0x1f
c0010fd2:	c3                   	ret    

c0010fd3 <SysTTYName(regs*)>:
c0010fd3:	b8 01 00 00 00       	mov    eax,0x1
c0010fd8:	31 d2                	xor    edx,edx
c0010fda:	c3                   	ret    

c0010fdb <SysFormatDisk(regs*)>:
c0010fdb:	56                   	push   esi
c0010fdc:	53                   	push   ebx
c0010fdd:	83 ec 04             	sub    esp,0x4
c0010fe0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fe4:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010fea:	eb 28                	jmp    c0011014 <SysFormatDisk(regs*)+0x39>
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010ff2:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010ff5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ff7:	51                   	push   ecx
c0010ff8:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010ffb:	51                   	push   ecx
c0010ffc:	50                   	push   eax
c0010ffd:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0011004:	50                   	push   eax
c0011005:	53                   	push   ebx
c0011006:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0011009:	83 c4 20             	add    esp,0x20
c001100c:	83 f8 08             	cmp    eax,0x8
c001100f:	75 14                	jne    c0011025 <SysFormatDisk(regs*)+0x4a>
c0011011:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011014:	85 db                	test   ebx,ebx
c0011016:	75 d4                	jne    c0010fec <SysFormatDisk(regs*)+0x11>
c0011018:	83 c4 04             	add    esp,0x4
c001101b:	b8 03 00 00 00       	mov    eax,0x3
c0011020:	31 d2                	xor    edx,edx
c0011022:	5b                   	pop    ebx
c0011023:	5e                   	pop    esi
c0011024:	c3                   	ret    
c0011025:	85 c0                	test   eax,eax
c0011027:	74 1f                	je     c0011048 <SysFormatDisk(regs*)+0x6d>
c0011029:	83 f8 09             	cmp    eax,0x9
c001102c:	74 0d                	je     c001103b <SysFormatDisk(regs*)+0x60>
c001102e:	83 c4 04             	add    esp,0x4
c0011031:	b8 02 00 00 00       	mov    eax,0x2
c0011036:	31 d2                	xor    edx,edx
c0011038:	5b                   	pop    ebx
c0011039:	5e                   	pop    esi
c001103a:	c3                   	ret    
c001103b:	83 c4 04             	add    esp,0x4
c001103e:	b8 01 00 00 00       	mov    eax,0x1
c0011043:	31 d2                	xor    edx,edx
c0011045:	5b                   	pop    ebx
c0011046:	5e                   	pop    esi
c0011047:	c3                   	ret    
c0011048:	83 c4 04             	add    esp,0x4
c001104b:	31 c0                	xor    eax,eax
c001104d:	31 d2                	xor    edx,edx
c001104f:	5b                   	pop    ebx
c0011050:	5e                   	pop    esi
c0011051:	c3                   	ret    

c0011052 <SysSetDiskVolumeLabel(regs*)>:
c0011052:	56                   	push   esi
c0011053:	53                   	push   ebx
c0011054:	83 ec 04             	sub    esp,0x4
c0011057:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001105b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001105e:	83 f8 19             	cmp    eax,0x19
c0011061:	77 33                	ja     c0011096 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011063:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001106a:	85 c9                	test   ecx,ecx
c001106c:	74 28                	je     c0011096 <SysSetDiskVolumeLabel(regs*)+0x44>
c001106e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011071:	85 db                	test   ebx,ebx
c0011073:	74 21                	je     c0011096 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011075:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c001107b:	85 d2                	test   edx,edx
c001107d:	74 17                	je     c0011096 <SysSetDiskVolumeLabel(regs*)+0x44>
c001107f:	8b 32                	mov    esi,DWORD PTR [edx]
c0011081:	53                   	push   ebx
c0011082:	50                   	push   eax
c0011083:	51                   	push   ecx
c0011084:	52                   	push   edx
c0011085:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0011088:	83 c4 10             	add    esp,0x10
c001108b:	89 c2                	mov    edx,eax
c001108d:	83 c4 04             	add    esp,0x4
c0011090:	c1 fa 1f             	sar    edx,0x1f
c0011093:	5b                   	pop    ebx
c0011094:	5e                   	pop    esi
c0011095:	c3                   	ret    
c0011096:	83 c4 04             	add    esp,0x4
c0011099:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001109e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110a3:	5b                   	pop    ebx
c00110a4:	5e                   	pop    esi
c00110a5:	c3                   	ret    

c00110a6 <SysGetDiskVolumeLabel(regs*)>:
c00110a6:	57                   	push   edi
c00110a7:	56                   	push   esi
c00110a8:	53                   	push   ebx
c00110a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ad:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00110b0:	83 fa 19             	cmp    edx,0x19
c00110b3:	77 3c                	ja     c00110f1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110b5:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c00110bc:	85 c9                	test   ecx,ecx
c00110be:	74 31                	je     c00110f1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110c0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110c3:	85 db                	test   ebx,ebx
c00110c5:	74 2a                	je     c00110f1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110c7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00110ca:	85 f6                	test   esi,esi
c00110cc:	74 23                	je     c00110f1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110ce:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00110d4:	85 c0                	test   eax,eax
c00110d6:	74 19                	je     c00110f1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110d8:	83 ec 0c             	sub    esp,0xc
c00110db:	8b 38                	mov    edi,DWORD PTR [eax]
c00110dd:	56                   	push   esi
c00110de:	53                   	push   ebx
c00110df:	52                   	push   edx
c00110e0:	51                   	push   ecx
c00110e1:	50                   	push   eax
c00110e2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00110e5:	83 c4 20             	add    esp,0x20
c00110e8:	89 c2                	mov    edx,eax
c00110ea:	5b                   	pop    ebx
c00110eb:	c1 fa 1f             	sar    edx,0x1f
c00110ee:	5e                   	pop    esi
c00110ef:	5f                   	pop    edi
c00110f0:	c3                   	ret    
c00110f1:	5b                   	pop    ebx
c00110f2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00110f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110fc:	5e                   	pop    esi
c00110fd:	5f                   	pop    edi
c00110fe:	c3                   	ret    

c00110ff <SysShutdown(regs*)>:
c00110ff:	83 ec 0c             	sub    esp,0xc
c0011102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011106:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011109:	85 c0                	test   eax,eax
c001110b:	74 18                	je     c0011125 <SysShutdown(regs*)+0x26>
c001110d:	83 f8 01             	cmp    eax,0x1
c0011110:	74 38                	je     c001114a <SysShutdown(regs*)+0x4b>
c0011112:	83 f8 02             	cmp    eax,0x2
c0011115:	74 24                	je     c001113b <SysShutdown(regs*)+0x3c>
c0011117:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001111c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011121:	83 c4 0c             	add    esp,0xc
c0011124:	c3                   	ret    
c0011125:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001112a:	8b 10                	mov    edx,DWORD PTR [eax]
c001112c:	6a 00                	push   0x0
c001112e:	6a 00                	push   0x0
c0011130:	6a 00                	push   0x0
c0011132:	50                   	push   eax
c0011133:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011136:	83 c4 10             	add    esp,0x10
c0011139:	eb dc                	jmp    c0011117 <SysShutdown(regs*)+0x18>
c001113b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011140:	8b 10                	mov    edx,DWORD PTR [eax]
c0011142:	6a 00                	push   0x0
c0011144:	6a 00                	push   0x0
c0011146:	6a 01                	push   0x1
c0011148:	eb e8                	jmp    c0011132 <SysShutdown(regs*)+0x33>
c001114a:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c001114f:	85 c0                	test   eax,eax
c0011151:	74 02                	je     c0011155 <SysShutdown(regs*)+0x56>
c0011153:	ff d0                	call   eax
c0011155:	31 c0                	xor    eax,eax
c0011157:	31 d2                	xor    edx,edx
c0011159:	83 c4 0c             	add    esp,0xc
c001115c:	c3                   	ret    

c001115d <SysRealpath(regs*)>:
c001115d:	83 ec 0c             	sub    esp,0xc
c0011160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011164:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011167:	85 d2                	test   edx,edx
c0011169:	74 07                	je     c0011172 <SysRealpath(regs*)+0x15>
c001116b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001116e:	85 c0                	test   eax,eax
c0011170:	75 0b                	jne    c001117d <SysRealpath(regs*)+0x20>
c0011172:	b8 01 00 00 00       	mov    eax,0x1
c0011177:	31 d2                	xor    edx,edx
c0011179:	83 c4 0c             	add    esp,0xc
c001117c:	c3                   	ret    
c001117d:	83 ec 04             	sub    esp,0x4
c0011180:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011186:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011189:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001118f:	51                   	push   ecx
c0011190:	52                   	push   edx
c0011191:	50                   	push   eax
c0011192:	e8 f7 9b ff ff       	call   c000ad8e <Fs::standardiseFiles(char*, char const*, char const*)>
c0011197:	83 c4 10             	add    esp,0x10
c001119a:	31 c0                	xor    eax,eax
c001119c:	31 d2                	xor    edx,edx
c001119e:	83 c4 0c             	add    esp,0xc
c00111a1:	c3                   	ret    

c00111a2 <SysReadDir(regs*)>:
c00111a2:	53                   	push   ebx
c00111a3:	83 ec 18             	sub    esp,0x18
c00111a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111aa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111ad:	83 f8 02             	cmp    eax,0x2
c00111b0:	76 61                	jbe    c0011213 <SysReadDir(regs*)+0x71>
c00111b2:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00111b9:	77 49                	ja     c0011204 <SysReadDir(regs*)+0x62>
c00111bb:	83 ec 0c             	sub    esp,0xc
c00111be:	50                   	push   eax
c00111bf:	e8 ff 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00111c4:	83 c4 10             	add    esp,0x10
c00111c7:	85 c0                	test   eax,eax
c00111c9:	74 39                	je     c0011204 <SysReadDir(regs*)+0x62>
c00111cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111d3:	83 ec 0c             	sub    esp,0xc
c00111d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00111d8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00111dc:	51                   	push   ecx
c00111dd:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00111e0:	51                   	push   ecx
c00111e1:	6a 00                	push   0x0
c00111e3:	68 10 01 00 00       	push   0x110
c00111e8:	50                   	push   eax
c00111e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00111ec:	83 c4 20             	add    esp,0x20
c00111ef:	85 c0                	test   eax,eax
c00111f1:	74 29                	je     c001121c <SysReadDir(regs*)+0x7a>
c00111f3:	83 f8 07             	cmp    eax,0x7
c00111f6:	74 1b                	je     c0011213 <SysReadDir(regs*)+0x71>
c00111f8:	b8 02 00 00 00       	mov    eax,0x2
c00111fd:	31 d2                	xor    edx,edx
c00111ff:	83 c4 18             	add    esp,0x18
c0011202:	5b                   	pop    ebx
c0011203:	c3                   	ret    
c0011204:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011209:	ba ff ff ff ff       	mov    edx,0xffffffff
c001120e:	83 c4 18             	add    esp,0x18
c0011211:	5b                   	pop    ebx
c0011212:	c3                   	ret    
c0011213:	b8 01 00 00 00       	mov    eax,0x1
c0011218:	31 d2                	xor    edx,edx
c001121a:	eb e3                	jmp    c00111ff <SysReadDir(regs*)+0x5d>
c001121c:	31 c0                	xor    eax,eax
c001121e:	31 d2                	xor    edx,edx
c0011220:	eb dd                	jmp    c00111ff <SysReadDir(regs*)+0x5d>

c0011222 <SysIsATTY(regs*)>:
c0011222:	83 ec 0c             	sub    esp,0xc
c0011225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011229:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001122c:	83 f8 02             	cmp    eax,0x2
c001122f:	76 07                	jbe    c0011238 <SysIsATTY(regs*)+0x16>
c0011231:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011236:	75 26                	jne    c001125e <SysIsATTY(regs*)+0x3c>
c0011238:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001123d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011240:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011246:	85 c0                	test   eax,eax
c0011248:	74 24                	je     c001126e <SysIsATTY(regs*)+0x4c>
c001124a:	83 ec 0c             	sub    esp,0xc
c001124d:	8b 10                	mov    edx,DWORD PTR [eax]
c001124f:	50                   	push   eax
c0011250:	ff 12                	call   DWORD PTR [edx]
c0011252:	31 d2                	xor    edx,edx
c0011254:	0f b6 c0             	movzx  eax,al
c0011257:	83 c4 10             	add    esp,0x10
c001125a:	83 c4 0c             	add    esp,0xc
c001125d:	c3                   	ret    
c001125e:	83 ec 0c             	sub    esp,0xc
c0011261:	50                   	push   eax
c0011262:	e8 5c 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0011267:	83 c4 10             	add    esp,0x10
c001126a:	85 c0                	test   eax,eax
c001126c:	75 dc                	jne    c001124a <SysIsATTY(regs*)+0x28>
c001126e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011273:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011278:	83 c4 0c             	add    esp,0xc
c001127b:	c3                   	ret    

c001127c <SysSeek(regs*)>:
c001127c:	53                   	push   ebx
c001127d:	83 ec 08             	sub    esp,0x8
c0011280:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011284:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011287:	8d 50 fd             	lea    edx,[eax-0x3]
c001128a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011290:	77 32                	ja     c00112c4 <SysSeek(regs*)+0x48>
c0011292:	83 ec 0c             	sub    esp,0xc
c0011295:	50                   	push   eax
c0011296:	e8 28 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001129b:	83 c4 0c             	add    esp,0xc
c001129e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00112a1:	31 db                	xor    ebx,ebx
c00112a3:	53                   	push   ebx
c00112a4:	51                   	push   ecx
c00112a5:	50                   	push   eax
c00112a6:	e8 13 9e ff ff       	call   c000b0be <File::seek(unsigned long long)>
c00112ab:	83 c4 10             	add    esp,0x10
c00112ae:	85 c0                	test   eax,eax
c00112b0:	0f 95 c0             	setne  al
c00112b3:	31 d2                	xor    edx,edx
c00112b5:	0f b6 c0             	movzx  eax,al
c00112b8:	f7 d8                	neg    eax
c00112ba:	83 d2 00             	adc    edx,0x0
c00112bd:	83 c4 08             	add    esp,0x8
c00112c0:	f7 da                	neg    edx
c00112c2:	5b                   	pop    ebx
c00112c3:	c3                   	ret    
c00112c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112ce:	83 c4 08             	add    esp,0x8
c00112d1:	5b                   	pop    ebx
c00112d2:	c3                   	ret    

c00112d3 <SysTell(regs*)>:
c00112d3:	53                   	push   ebx
c00112d4:	83 ec 08             	sub    esp,0x8
c00112d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112de:	83 f8 02             	cmp    eax,0x2
c00112e1:	76 4e                	jbe    c0011331 <SysTell(regs*)+0x5e>
c00112e3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112e8:	76 19                	jbe    c0011303 <SysTell(regs*)+0x30>
c00112ea:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112ed:	31 d2                	xor    edx,edx
c00112ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112fc:	31 c0                	xor    eax,eax
c00112fe:	83 c4 08             	add    esp,0x8
c0011301:	5b                   	pop    ebx
c0011302:	c3                   	ret    
c0011303:	83 ec 0c             	sub    esp,0xc
c0011306:	50                   	push   eax
c0011307:	e8 b7 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001130c:	5a                   	pop    edx
c001130d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011310:	59                   	pop    ecx
c0011311:	53                   	push   ebx
c0011312:	50                   	push   eax
c0011313:	e8 fc 9d ff ff       	call   c000b114 <File::tell(unsigned long long*)>
c0011318:	83 c4 10             	add    esp,0x10
c001131b:	85 c0                	test   eax,eax
c001131d:	0f 95 c0             	setne  al
c0011320:	31 d2                	xor    edx,edx
c0011322:	0f b6 c0             	movzx  eax,al
c0011325:	f7 d8                	neg    eax
c0011327:	83 d2 00             	adc    edx,0x0
c001132a:	83 c4 08             	add    esp,0x8
c001132d:	f7 da                	neg    edx
c001132f:	5b                   	pop    ebx
c0011330:	c3                   	ret    
c0011331:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011336:	ba ff ff ff ff       	mov    edx,0xffffffff
c001133b:	83 c4 08             	add    esp,0x8
c001133e:	5b                   	pop    ebx
c001133f:	c3                   	ret    

c0011340 <SysSize(regs*)>:
c0011340:	53                   	push   ebx
c0011341:	83 ec 18             	sub    esp,0x18
c0011344:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011348:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001134b:	83 f8 02             	cmp    eax,0x2
c001134e:	76 54                	jbe    c00113a4 <SysSize(regs*)+0x64>
c0011350:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011355:	76 19                	jbe    c0011370 <SysSize(regs*)+0x30>
c0011357:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001135a:	31 d2                	xor    edx,edx
c001135c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011362:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011369:	31 c0                	xor    eax,eax
c001136b:	83 c4 18             	add    esp,0x18
c001136e:	5b                   	pop    ebx
c001136f:	c3                   	ret    
c0011370:	83 ec 0c             	sub    esp,0xc
c0011373:	50                   	push   eax
c0011374:	e8 4a 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0011379:	83 c4 0c             	add    esp,0xc
c001137c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011380:	52                   	push   edx
c0011381:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011384:	52                   	push   edx
c0011385:	50                   	push   eax
c0011386:	e8 21 9f ff ff       	call   c000b2ac <File::stat(unsigned long long*, bool*)>
c001138b:	83 c4 10             	add    esp,0x10
c001138e:	85 c0                	test   eax,eax
c0011390:	0f 95 c0             	setne  al
c0011393:	31 d2                	xor    edx,edx
c0011395:	0f b6 c0             	movzx  eax,al
c0011398:	f7 d8                	neg    eax
c001139a:	83 d2 00             	adc    edx,0x0
c001139d:	83 c4 18             	add    esp,0x18
c00113a0:	f7 da                	neg    edx
c00113a2:	5b                   	pop    ebx
c00113a3:	c3                   	ret    
c00113a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113ae:	83 c4 18             	add    esp,0x18
c00113b1:	5b                   	pop    ebx
c00113b2:	c3                   	ret    

c00113b3 <SysSizeFromFilename(regs*)>:
c00113b3:	57                   	push   edi
c00113b4:	56                   	push   esi
c00113b5:	53                   	push   ebx
c00113b6:	83 ec 20             	sub    esp,0x20
c00113b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113bd:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00113c0:	83 fb 02             	cmp    ebx,0x2
c00113c3:	0f 86 8a 00 00 00    	jbe    c0011453 <SysSizeFromFilename(regs*)+0xa0>
c00113c9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00113cf:	76 1b                	jbe    c00113ec <SysSizeFromFilename(regs*)+0x39>
c00113d1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00113d4:	31 d2                	xor    edx,edx
c00113d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00113dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113e3:	83 c4 20             	add    esp,0x20
c00113e6:	31 c0                	xor    eax,eax
c00113e8:	5b                   	pop    ebx
c00113e9:	5e                   	pop    esi
c00113ea:	5f                   	pop    edi
c00113eb:	c3                   	ret    
c00113ec:	83 ec 0c             	sub    esp,0xc
c00113ef:	68 14 01 00 00       	push   0x114
c00113f4:	e8 b5 66 ff ff       	call   c0007aae <malloc>
c00113f9:	83 c4 0c             	add    esp,0xc
c00113fc:	89 c7                	mov    edi,eax
c00113fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011403:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011406:	50                   	push   eax
c0011407:	53                   	push   ebx
c0011408:	57                   	push   edi
c0011409:	e8 36 9b ff ff       	call   c000af44 <File::File(char const*, Process*)>
c001140e:	83 c4 0c             	add    esp,0xc
c0011411:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011415:	50                   	push   eax
c0011416:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011419:	52                   	push   edx
c001141a:	57                   	push   edi
c001141b:	e8 8c 9e ff ff       	call   c000b2ac <File::stat(unsigned long long*, bool*)>
c0011420:	83 c4 10             	add    esp,0x10
c0011423:	85 ff                	test   edi,edi
c0011425:	74 14                	je     c001143b <SysSizeFromFilename(regs*)+0x88>
c0011427:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001142b:	8b 17                	mov    edx,DWORD PTR [edi]
c001142d:	83 ec 0c             	sub    esp,0xc
c0011430:	57                   	push   edi
c0011431:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011434:	83 c4 10             	add    esp,0x10
c0011437:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001143b:	85 c0                	test   eax,eax
c001143d:	0f 95 c0             	setne  al
c0011440:	31 d2                	xor    edx,edx
c0011442:	0f b6 c0             	movzx  eax,al
c0011445:	f7 d8                	neg    eax
c0011447:	83 d2 00             	adc    edx,0x0
c001144a:	83 c4 20             	add    esp,0x20
c001144d:	f7 da                	neg    edx
c001144f:	5b                   	pop    ebx
c0011450:	5e                   	pop    esi
c0011451:	5f                   	pop    edi
c0011452:	c3                   	ret    
c0011453:	83 c4 20             	add    esp,0x20
c0011456:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001145b:	5b                   	pop    ebx
c001145c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011461:	5e                   	pop    esi
c0011462:	5f                   	pop    edi
c0011463:	c3                   	ret    

c0011464 <SysClose(regs*)>:
c0011464:	53                   	push   ebx
c0011465:	83 ec 08             	sub    esp,0x8
c0011468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001146c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001146f:	83 f8 02             	cmp    eax,0x2
c0011472:	76 41                	jbe    c00114b5 <SysClose(regs*)+0x51>
c0011474:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001147a:	83 fa 01             	cmp    edx,0x1
c001147d:	76 2d                	jbe    c00114ac <SysClose(regs*)+0x48>
c001147f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011484:	77 2f                	ja     c00114b5 <SysClose(regs*)+0x51>
c0011486:	83 ec 0c             	sub    esp,0xc
c0011489:	50                   	push   eax
c001148a:	e8 34 80 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001148f:	89 c3                	mov    ebx,eax
c0011491:	89 04 24             	mov    DWORD PTR [esp],eax
c0011494:	e8 c5 9b ff ff       	call   c000b05e <File::close()>
c0011499:	83 c4 10             	add    esp,0x10
c001149c:	85 db                	test   ebx,ebx
c001149e:	74 0c                	je     c00114ac <SysClose(regs*)+0x48>
c00114a0:	83 ec 0c             	sub    esp,0xc
c00114a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114a5:	53                   	push   ebx
c00114a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114a9:	83 c4 10             	add    esp,0x10
c00114ac:	31 c0                	xor    eax,eax
c00114ae:	31 d2                	xor    edx,edx
c00114b0:	83 c4 08             	add    esp,0x8
c00114b3:	5b                   	pop    ebx
c00114b4:	c3                   	ret    
c00114b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114bf:	83 c4 08             	add    esp,0x8
c00114c2:	5b                   	pop    ebx
c00114c3:	c3                   	ret    

c00114c4 <SysOpenDir(regs*)>:
c00114c4:	56                   	push   esi
c00114c5:	53                   	push   ebx
c00114c6:	83 ec 04             	sub    esp,0x4
c00114c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114cd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00114d0:	85 c9                	test   ecx,ecx
c00114d2:	74 5d                	je     c0011531 <SysOpenDir(regs*)+0x6d>
c00114d4:	83 ec 0c             	sub    esp,0xc
c00114d7:	68 14 01 00 00       	push   0x114
c00114dc:	e8 cd 65 ff ff       	call   c0007aae <malloc>
c00114e1:	83 c4 0c             	add    esp,0xc
c00114e4:	89 c6                	mov    esi,eax
c00114e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114ee:	50                   	push   eax
c00114ef:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00114f2:	52                   	push   edx
c00114f3:	56                   	push   esi
c00114f4:	e8 71 9f ff ff       	call   c000b46a <Directory::Directory(char const*, Process*)>
c00114f9:	83 c4 10             	add    esp,0x10
c00114fc:	85 f6                	test   esi,esi
c00114fe:	74 31                	je     c0011531 <SysOpenDir(regs*)+0x6d>
c0011500:	83 ec 0c             	sub    esp,0xc
c0011503:	56                   	push   esi
c0011504:	e8 1d a0 ff ff       	call   c000b526 <Directory::open()>
c0011509:	83 c4 10             	add    esp,0x10
c001150c:	85 c0                	test   eax,eax
c001150e:	75 21                	jne    c0011531 <SysOpenDir(regs*)+0x6d>
c0011510:	83 ec 0c             	sub    esp,0xc
c0011513:	56                   	push   esi
c0011514:	e8 ad 7c ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011519:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	89 02                	mov    DWORD PTR [edx],eax
c0011521:	c1 f8 1f             	sar    eax,0x1f
c0011524:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011527:	83 c4 04             	add    esp,0x4
c001152a:	31 c0                	xor    eax,eax
c001152c:	31 d2                	xor    edx,edx
c001152e:	5b                   	pop    ebx
c001152f:	5e                   	pop    esi
c0011530:	c3                   	ret    
c0011531:	83 c4 04             	add    esp,0x4
c0011534:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011539:	ba ff ff ff ff       	mov    edx,0xffffffff
c001153e:	5b                   	pop    ebx
c001153f:	5e                   	pop    esi
c0011540:	c3                   	ret    

c0011541 <SysMakeDir(regs*)>:
c0011541:	56                   	push   esi
c0011542:	53                   	push   ebx
c0011543:	83 ec 10             	sub    esp,0x10
c0011546:	68 14 01 00 00       	push   0x114
c001154b:	e8 5e 65 ff ff       	call   c0007aae <malloc>
c0011550:	83 c4 0c             	add    esp,0xc
c0011553:	89 c3                	mov    ebx,eax
c0011555:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001155a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001155d:	50                   	push   eax
c001155e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011562:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011565:	52                   	push   edx
c0011566:	53                   	push   ebx
c0011567:	e8 fe 9e ff ff       	call   c000b46a <Directory::Directory(char const*, Process*)>
c001156c:	83 c4 10             	add    esp,0x10
c001156f:	85 db                	test   ebx,ebx
c0011571:	74 2c                	je     c001159f <SysMakeDir(regs*)+0x5e>
c0011573:	83 ec 0c             	sub    esp,0xc
c0011576:	53                   	push   ebx
c0011577:	e8 8a a1 ff ff       	call   c000b706 <Directory::create()>
c001157c:	89 c6                	mov    esi,eax
c001157e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011580:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011583:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011586:	83 c4 10             	add    esp,0x10
c0011589:	31 c0                	xor    eax,eax
c001158b:	85 f6                	test   esi,esi
c001158d:	0f 95 c0             	setne  al
c0011590:	31 d2                	xor    edx,edx
c0011592:	f7 d8                	neg    eax
c0011594:	83 d2 00             	adc    edx,0x0
c0011597:	83 c4 04             	add    esp,0x4
c001159a:	f7 da                	neg    edx
c001159c:	5b                   	pop    ebx
c001159d:	5e                   	pop    esi
c001159e:	c3                   	ret    
c001159f:	83 c4 04             	add    esp,0x4
c00115a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115ac:	5b                   	pop    ebx
c00115ad:	5e                   	pop    esi
c00115ae:	c3                   	ret    

c00115af <SysCloseDir(regs*)>:
c00115af:	53                   	push   ebx
c00115b0:	83 ec 08             	sub    esp,0x8
c00115b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00115ba:	8d 50 fd             	lea    edx,[eax-0x3]
c00115bd:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115c3:	77 2f                	ja     c00115f4 <SysCloseDir(regs*)+0x45>
c00115c5:	83 ec 0c             	sub    esp,0xc
c00115c8:	50                   	push   eax
c00115c9:	e8 f5 7e ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00115ce:	89 c3                	mov    ebx,eax
c00115d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00115d3:	e8 aa 9f ff ff       	call   c000b582 <Directory::close()>
c00115d8:	83 c4 10             	add    esp,0x10
c00115db:	85 db                	test   ebx,ebx
c00115dd:	74 0c                	je     c00115eb <SysCloseDir(regs*)+0x3c>
c00115df:	83 ec 0c             	sub    esp,0xc
c00115e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115e4:	53                   	push   ebx
c00115e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115e8:	83 c4 10             	add    esp,0x10
c00115eb:	31 c0                	xor    eax,eax
c00115ed:	31 d2                	xor    edx,edx
c00115ef:	83 c4 08             	add    esp,0x8
c00115f2:	5b                   	pop    ebx
c00115f3:	c3                   	ret    
c00115f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115fe:	83 c4 08             	add    esp,0x8
c0011601:	5b                   	pop    ebx
c0011602:	c3                   	ret    

c0011603 <SysWait(regs*)>:
c0011603:	83 ec 10             	sub    esp,0x10
c0011606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001160a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001160d:	52                   	push   edx
c001160e:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011611:	51                   	push   ecx
c0011612:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011615:	50                   	push   eax
c0011616:	e8 d5 3c 00 00       	call   c00152f0 <waitTask(int, int*, int)>
c001161b:	83 c4 1c             	add    esp,0x1c
c001161e:	89 c2                	mov    edx,eax
c0011620:	c1 fa 1f             	sar    edx,0x1f
c0011623:	c3                   	ret    

c0011624 <SysNotImpl(regs*)>:
c0011624:	83 ec 18             	sub    esp,0x18
c0011627:	68 d6 0d 02 c0       	push   0xc0020dd6
c001162c:	e8 be f2 ff ff       	call   c00108ef <KePanic(char const*)>
c0011631:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011636:	ba ff ff ff ff       	mov    edx,0xffffffff
c001163b:	83 c4 1c             	add    esp,0x1c
c001163e:	c3                   	ret    

c001163f <SysPanic(regs*)>:
c001163f:	83 ec 18             	sub    esp,0x18
c0011642:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011646:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011649:	50                   	push   eax
c001164a:	e8 a0 f2 ff ff       	call   c00108ef <KePanic(char const*)>
c001164f:	b8 01 00 00 00       	mov    eax,0x1
c0011654:	31 d2                	xor    edx,edx
c0011656:	83 c4 1c             	add    esp,0x1c
c0011659:	c3                   	ret    

c001165a <SysRmdir(regs*)>:
c001165a:	56                   	push   esi
c001165b:	53                   	push   ebx
c001165c:	83 ec 20             	sub    esp,0x20
c001165f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011663:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011666:	68 14 01 00 00       	push   0x114
c001166b:	e8 3e 64 ff ff       	call   c0007aae <malloc>
c0011670:	83 c4 0c             	add    esp,0xc
c0011673:	89 c3                	mov    ebx,eax
c0011675:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001167a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001167d:	50                   	push   eax
c001167e:	56                   	push   esi
c001167f:	53                   	push   ebx
c0011680:	e8 bf 98 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c0011685:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011688:	e8 eb 9a ff ff       	call   c000b178 <File::unlink()>
c001168d:	83 c4 10             	add    esp,0x10
c0011690:	85 db                	test   ebx,ebx
c0011692:	74 14                	je     c00116a8 <SysRmdir(regs*)+0x4e>
c0011694:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011698:	8b 13                	mov    edx,DWORD PTR [ebx]
c001169a:	83 ec 0c             	sub    esp,0xc
c001169d:	53                   	push   ebx
c001169e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116a8:	85 c0                	test   eax,eax
c00116aa:	0f 95 c0             	setne  al
c00116ad:	31 d2                	xor    edx,edx
c00116af:	0f b6 c0             	movzx  eax,al
c00116b2:	f7 d8                	neg    eax
c00116b4:	83 d2 00             	adc    edx,0x0
c00116b7:	83 c4 14             	add    esp,0x14
c00116ba:	f7 da                	neg    edx
c00116bc:	5b                   	pop    ebx
c00116bd:	5e                   	pop    esi
c00116be:	c3                   	ret    

c00116bf <SysUnlink(regs*)>:
c00116bf:	56                   	push   esi
c00116c0:	53                   	push   ebx
c00116c1:	83 ec 20             	sub    esp,0x20
c00116c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00116c8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00116cb:	68 14 01 00 00       	push   0x114
c00116d0:	e8 d9 63 ff ff       	call   c0007aae <malloc>
c00116d5:	83 c4 0c             	add    esp,0xc
c00116d8:	89 c3                	mov    ebx,eax
c00116da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116e2:	50                   	push   eax
c00116e3:	56                   	push   esi
c00116e4:	53                   	push   ebx
c00116e5:	e8 5a 98 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c00116ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116ed:	e8 86 9a ff ff       	call   c000b178 <File::unlink()>
c00116f2:	83 c4 10             	add    esp,0x10
c00116f5:	85 db                	test   ebx,ebx
c00116f7:	74 14                	je     c001170d <SysUnlink(regs*)+0x4e>
c00116f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116fd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00116ff:	83 ec 0c             	sub    esp,0xc
c0011702:	53                   	push   ebx
c0011703:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011706:	83 c4 10             	add    esp,0x10
c0011709:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001170d:	85 c0                	test   eax,eax
c001170f:	0f 95 c0             	setne  al
c0011712:	31 d2                	xor    edx,edx
c0011714:	0f b6 c0             	movzx  eax,al
c0011717:	f7 d8                	neg    eax
c0011719:	83 d2 00             	adc    edx,0x0
c001171c:	83 c4 14             	add    esp,0x14
c001171f:	f7 da                	neg    edx
c0011721:	5b                   	pop    ebx
c0011722:	5e                   	pop    esi
c0011723:	c3                   	ret    

c0011724 <SysGetArgv(regs*)>:
c0011724:	83 ec 0c             	sub    esp,0xc
c0011727:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001172b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001172e:	85 c0                	test   eax,eax
c0011730:	78 2c                	js     c001175e <SysGetArgv(regs*)+0x3a>
c0011732:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011738:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001173b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011741:	7d 1b                	jge    c001175e <SysGetArgv(regs*)+0x3a>
c0011743:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001174a:	85 c0                	test   eax,eax
c001174c:	74 18                	je     c0011766 <SysGetArgv(regs*)+0x42>
c001174e:	83 ec 08             	sub    esp,0x8
c0011751:	50                   	push   eax
c0011752:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011755:	50                   	push   eax
c0011756:	e8 e5 ee fe ff       	call   c0000640 <strcpy>
c001175b:	83 c4 10             	add    esp,0x10
c001175e:	31 c0                	xor    eax,eax
c0011760:	31 d2                	xor    edx,edx
c0011762:	83 c4 0c             	add    esp,0xc
c0011765:	c3                   	ret    
c0011766:	b8 01 00 00 00       	mov    eax,0x1
c001176b:	31 d2                	xor    edx,edx
c001176d:	83 c4 0c             	add    esp,0xc
c0011770:	c3                   	ret    

c0011771 <SysUSleep(regs*)>:
c0011771:	83 ec 1c             	sub    esp,0x1c
c0011774:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011778:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001177b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001177e:	6a 00                	push   0x0
c0011780:	6a 64                	push   0x64
c0011782:	52                   	push   edx
c0011783:	50                   	push   eax
c0011784:	e8 b7 ce 00 00       	call   c001e640 <__udivdi3>
c0011789:	83 c4 14             	add    esp,0x14
c001178c:	50                   	push   eax
c001178d:	e8 42 3c 00 00       	call   c00153d4 <milliTenthSleep(unsigned int)>
c0011792:	31 c0                	xor    eax,eax
c0011794:	31 d2                	xor    edx,edx
c0011796:	83 c4 1c             	add    esp,0x1c
c0011799:	c3                   	ret    

c001179a <SysSpawn(regs*)>:
c001179a:	56                   	push   esi
c001179b:	53                   	push   ebx
c001179c:	83 ec 04             	sub    esp,0x4
c001179f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117a3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00117a6:	85 f6                	test   esi,esi
c00117a8:	75 0a                	jne    c00117b4 <SysSpawn(regs*)+0x1a>
c00117aa:	83 c4 04             	add    esp,0x4
c00117ad:	31 c0                	xor    eax,eax
c00117af:	31 d2                	xor    edx,edx
c00117b1:	5b                   	pop    ebx
c00117b2:	5e                   	pop    esi
c00117b3:	c3                   	ret    
c00117b4:	83 ec 0c             	sub    esp,0xc
c00117b7:	68 24 07 00 00       	push   0x724
c00117bc:	e8 ed 62 ff ff       	call   c0007aae <malloc>
c00117c1:	83 c4 10             	add    esp,0x10
c00117c4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117c7:	89 c6                	mov    esi,eax
c00117c9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117cc:	85 c9                	test   ecx,ecx
c00117ce:	75 39                	jne    c0011809 <SysSpawn(regs*)+0x6f>
c00117d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117d8:	52                   	push   edx
c00117d9:	50                   	push   eax
c00117da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00117dd:	50                   	push   eax
c00117de:	56                   	push   esi
c00117df:	e8 40 32 00 00       	call   c0014a24 <Process::Process(char const*, Process*, char**)>
c00117e4:	83 c4 10             	add    esp,0x10
c00117e7:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00117ee:	75 ba                	jne    c00117aa <SysSpawn(regs*)+0x10>
c00117f0:	83 ec 0c             	sub    esp,0xc
c00117f3:	56                   	push   esi
c00117f4:	e8 67 37 00 00       	call   c0014f60 <Process::createUserThread()>
c00117f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00117fb:	83 c4 10             	add    esp,0x10
c00117fe:	89 c2                	mov    edx,eax
c0011800:	83 c4 04             	add    esp,0x4
c0011803:	c1 fa 1f             	sar    edx,0x1f
c0011806:	5b                   	pop    ebx
c0011807:	5e                   	pop    esi
c0011808:	c3                   	ret    
c0011809:	31 c0                	xor    eax,eax
c001180b:	eb cb                	jmp    c00117d8 <SysSpawn(regs*)+0x3e>

c001180d <SysGetEnv(regs*)>:
c001180d:	57                   	push   edi
c001180e:	56                   	push   esi
c001180f:	53                   	push   ebx
c0011810:	83 ec 1c             	sub    esp,0x1c
c0011813:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011817:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001181c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001181f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011822:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011825:	51                   	push   ecx
c0011826:	e8 7c ef ff ff       	call   c00107a7 <Krnl::getProcessTotalEnvCount(Process*)>
c001182b:	83 c4 10             	add    esp,0x10
c001182e:	39 c7                	cmp    edi,eax
c0011830:	7c 14                	jl     c0011846 <SysGetEnv(regs*)+0x39>
c0011832:	85 f6                	test   esi,esi
c0011834:	75 0b                	jne    c0011841 <SysGetEnv(regs*)+0x34>
c0011836:	83 c4 10             	add    esp,0x10
c0011839:	31 c0                	xor    eax,eax
c001183b:	5b                   	pop    ebx
c001183c:	31 d2                	xor    edx,edx
c001183e:	5e                   	pop    esi
c001183f:	5f                   	pop    edi
c0011840:	c3                   	ret    
c0011841:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011844:	eb f0                	jmp    c0011836 <SysGetEnv(regs*)+0x29>
c0011846:	8d 44 24 08          	lea    eax,[esp+0x8]
c001184a:	83 ec 04             	sub    esp,0x4
c001184d:	57                   	push   edi
c001184e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011854:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011857:	57                   	push   edi
c0011858:	50                   	push   eax
c0011859:	e8 69 ef ff ff       	call   c00107c7 <Krnl::getProcessEnvPair(Process*, int)>
c001185e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011861:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011865:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011869:	83 c4 0c             	add    esp,0xc
c001186c:	85 d2                	test   edx,edx
c001186e:	75 23                	jne    c0011893 <SysGetEnv(regs*)+0x86>
c0011870:	83 ec 0c             	sub    esp,0xc
c0011873:	50                   	push   eax
c0011874:	e8 f7 ec fe ff       	call   c0000570 <strlen>
c0011879:	89 3c 24             	mov    DWORD PTR [esp],edi
c001187c:	89 c3                	mov    ebx,eax
c001187e:	e8 ed ec fe ff       	call   c0000570 <strlen>
c0011883:	83 c4 10             	add    esp,0x10
c0011886:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	31 d2                	xor    edx,edx
c001188f:	5b                   	pop    ebx
c0011890:	5e                   	pop    esi
c0011891:	5f                   	pop    edi
c0011892:	c3                   	ret    
c0011893:	83 ec 08             	sub    esp,0x8
c0011896:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011899:	50                   	push   eax
c001189a:	56                   	push   esi
c001189b:	e8 a0 ed fe ff       	call   c0000640 <strcpy>
c00118a0:	58                   	pop    eax
c00118a1:	5a                   	pop    edx
c00118a2:	68 f0 0d 02 c0       	push   0xc0020df0
c00118a7:	56                   	push   esi
c00118a8:	e8 93 ef fe ff       	call   c0000840 <strcat>
c00118ad:	59                   	pop    ecx
c00118ae:	5b                   	pop    ebx
c00118af:	57                   	push   edi
c00118b0:	56                   	push   esi
c00118b1:	e8 8a ef fe ff       	call   c0000840 <strcat>
c00118b6:	83 c4 10             	add    esp,0x10
c00118b9:	e9 78 ff ff ff       	jmp    c0011836 <SysGetEnv(regs*)+0x29>

c00118be <SysSetFatAttrib(regs*)>:
c00118be:	57                   	push   edi
c00118bf:	56                   	push   esi
c00118c0:	53                   	push   ebx
c00118c1:	83 ec 1c             	sub    esp,0x1c
c00118c4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00118c8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00118cb:	68 14 01 00 00       	push   0x114
c00118d0:	e8 d9 61 ff ff       	call   c0007aae <malloc>
c00118d5:	83 c4 0c             	add    esp,0xc
c00118d8:	89 c3                	mov    ebx,eax
c00118da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118e2:	50                   	push   eax
c00118e3:	57                   	push   edi
c00118e4:	53                   	push   ebx
c00118e5:	e8 5a 96 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c00118ea:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00118ed:	83 c4 0c             	add    esp,0xc
c00118f0:	0f b6 d4             	movzx  edx,ah
c00118f3:	0f b6 c0             	movzx  eax,al
c00118f6:	52                   	push   edx
c00118f7:	50                   	push   eax
c00118f8:	53                   	push   ebx
c00118f9:	e8 14 99 ff ff       	call   c000b212 <File::chfatattr(unsigned char, unsigned char)>
c00118fe:	83 c4 10             	add    esp,0x10
c0011901:	85 db                	test   ebx,ebx
c0011903:	74 14                	je     c0011919 <SysSetFatAttrib(regs*)+0x5b>
c0011905:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011909:	8b 13                	mov    edx,DWORD PTR [ebx]
c001190b:	83 ec 0c             	sub    esp,0xc
c001190e:	53                   	push   ebx
c001190f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011912:	83 c4 10             	add    esp,0x10
c0011915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011919:	85 c0                	test   eax,eax
c001191b:	0f 95 c0             	setne  al
c001191e:	31 d2                	xor    edx,edx
c0011920:	0f b6 c0             	movzx  eax,al
c0011923:	f7 d8                	neg    eax
c0011925:	83 d2 00             	adc    edx,0x0
c0011928:	83 c4 10             	add    esp,0x10
c001192b:	f7 da                	neg    edx
c001192d:	5b                   	pop    ebx
c001192e:	5e                   	pop    esi
c001192f:	5f                   	pop    edi
c0011930:	c3                   	ret    

c0011931 <SysPipe(regs*)>:
c0011931:	57                   	push   edi
c0011932:	56                   	push   esi
c0011933:	53                   	push   ebx
c0011934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011938:	83 ec 0c             	sub    esp,0xc
c001193b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001193e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011941:	6a 20                	push   0x20
c0011943:	e8 66 61 ff ff       	call   c0007aae <malloc>
c0011948:	89 c3                	mov    ebx,eax
c001194a:	58                   	pop    eax
c001194b:	5a                   	pop    edx
c001194c:	68 00 50 00 00       	push   0x5000
c0011951:	53                   	push   ebx
c0011952:	e8 bb 6a ff ff       	call   c0008412 <Pipe::Pipe(int)>
c0011957:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001195a:	e8 67 78 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c001195f:	89 07                	mov    DWORD PTR [edi],eax
c0011961:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011964:	e8 5d 78 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011969:	83 c4 10             	add    esp,0x10
c001196c:	89 06                	mov    DWORD PTR [esi],eax
c001196e:	31 d2                	xor    edx,edx
c0011970:	5b                   	pop    ebx
c0011971:	31 c0                	xor    eax,eax
c0011973:	5e                   	pop    esi
c0011974:	5f                   	pop    edi
c0011975:	c3                   	ret    

c0011976 <SysGetUnixTime(regs*)>:
c0011976:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001197b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011985:	e9 c0 9f ff ff       	jmp    c000b94a <Clock::timeInSecondsLocal()>

c001198a <string_ends_with(char const*, char const*)>:
c001198a:	57                   	push   edi
c001198b:	56                   	push   esi
c001198c:	53                   	push   ebx
c001198d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011991:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011995:	83 ec 0c             	sub    esp,0xc
c0011998:	53                   	push   ebx
c0011999:	e8 d2 eb fe ff       	call   c0000570 <strlen>
c001199e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119a1:	89 c6                	mov    esi,eax
c00119a3:	e8 c8 eb fe ff       	call   c0000570 <strlen>
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	39 c6                	cmp    esi,eax
c00119ad:	7d 06                	jge    c00119b5 <string_ends_with(char const*, char const*)+0x2b>
c00119af:	5b                   	pop    ebx
c00119b0:	31 c0                	xor    eax,eax
c00119b2:	5e                   	pop    esi
c00119b3:	5f                   	pop    edi
c00119b4:	c3                   	ret    
c00119b5:	83 ec 08             	sub    esp,0x8
c00119b8:	29 c6                	sub    esi,eax
c00119ba:	57                   	push   edi
c00119bb:	01 f3                	add    ebx,esi
c00119bd:	53                   	push   ebx
c00119be:	e8 8d ed fe ff       	call   c0000750 <strcmp>
c00119c3:	83 c4 10             	add    esp,0x10
c00119c6:	85 c0                	test   eax,eax
c00119c8:	5b                   	pop    ebx
c00119c9:	0f 94 c0             	sete   al
c00119cc:	5e                   	pop    esi
c00119cd:	0f b6 c0             	movzx  eax,al
c00119d0:	5f                   	pop    edi
c00119d1:	c3                   	ret    

c00119d2 <SysOpen(regs*)>:
c00119d2:	56                   	push   esi
c00119d3:	53                   	push   ebx
c00119d4:	81 ec 04 01 00 00    	sub    esp,0x104
c00119da:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00119e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119e4:	85 c0                	test   eax,eax
c00119e6:	0f 84 bd 01 00 00    	je     c0011ba9 <SysOpen(regs*)+0x1d7>
c00119ec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119ef:	85 c0                	test   eax,eax
c00119f1:	0f 84 b2 01 00 00    	je     c0011ba9 <SysOpen(regs*)+0x1d7>
c00119f7:	83 ec 04             	sub    esp,0x4
c00119fa:	68 f2 0d 02 c0       	push   0xc0020df2
c00119ff:	50                   	push   eax
c0011a00:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011a04:	56                   	push   esi
c0011a05:	e8 84 93 ff ff       	call   c000ad8e <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0011a0d:	e8 5e eb fe ff       	call   c0000570 <strlen>
c0011a12:	83 c4 10             	add    esp,0x10
c0011a15:	83 e8 01             	sub    eax,0x1
c0011a18:	74 21                	je     c0011a3b <SysOpen(regs*)+0x69>
c0011a1a:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011a1e:	eb 12                	jmp    c0011a32 <SysOpen(regs*)+0x60>
c0011a20:	83 fa 3a             	cmp    edx,0x3a
c0011a23:	74 12                	je     c0011a37 <SysOpen(regs*)+0x65>
c0011a25:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011a29:	83 e8 01             	sub    eax,0x1
c0011a2c:	74 0d                	je     c0011a3b <SysOpen(regs*)+0x69>
c0011a2e:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011a32:	83 fa 2e             	cmp    edx,0x2e
c0011a35:	75 e9                	jne    c0011a20 <SysOpen(regs*)+0x4e>
c0011a37:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011a3b:	83 ec 08             	sub    esp,0x8
c0011a3e:	68 f6 0d 02 c0       	push   0xc0020df6
c0011a43:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a46:	50                   	push   eax
c0011a47:	e8 3e ff ff ff       	call   c001198a <string_ends_with(char const*, char const*)>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	85 c0                	test   eax,eax
c0011a51:	74 1d                	je     c0011a70 <SysOpen(regs*)+0x9e>
c0011a53:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a56:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011a5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a63:	81 c4 04 01 00 00    	add    esp,0x104
c0011a69:	31 c0                	xor    eax,eax
c0011a6b:	31 d2                	xor    edx,edx
c0011a6d:	5b                   	pop    ebx
c0011a6e:	5e                   	pop    esi
c0011a6f:	c3                   	ret    
c0011a70:	83 ec 08             	sub    esp,0x8
c0011a73:	68 fb 0d 02 c0       	push   0xc0020dfb
c0011a78:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a7b:	50                   	push   eax
c0011a7c:	e8 09 ff ff ff       	call   c001198a <string_ends_with(char const*, char const*)>
c0011a81:	83 c4 10             	add    esp,0x10
c0011a84:	85 c0                	test   eax,eax
c0011a86:	75 cb                	jne    c0011a53 <SysOpen(regs*)+0x81>
c0011a88:	83 ec 08             	sub    esp,0x8
c0011a8b:	68 f7 0d 02 c0       	push   0xc0020df7
c0011a90:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a93:	50                   	push   eax
c0011a94:	e8 b7 ec fe ff       	call   c0000750 <strcmp>
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	85 c0                	test   eax,eax
c0011a9e:	74 b3                	je     c0011a53 <SysOpen(regs*)+0x81>
c0011aa0:	83 ec 08             	sub    esp,0x8
c0011aa3:	68 f6 0d 02 c0       	push   0xc0020df6
c0011aa8:	56                   	push   esi
c0011aa9:	e8 dc fe ff ff       	call   c001198a <string_ends_with(char const*, char const*)>
c0011aae:	83 c4 10             	add    esp,0x10
c0011ab1:	85 c0                	test   eax,eax
c0011ab3:	75 9e                	jne    c0011a53 <SysOpen(regs*)+0x81>
c0011ab5:	83 ec 08             	sub    esp,0x8
c0011ab8:	68 00 0e 02 c0       	push   0xc0020e00
c0011abd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ac0:	50                   	push   eax
c0011ac1:	e8 c4 fe ff ff       	call   c001198a <string_ends_with(char const*, char const*)>
c0011ac6:	83 c4 10             	add    esp,0x10
c0011ac9:	85 c0                	test   eax,eax
c0011acb:	0f 85 eb 00 00 00    	jne    c0011bbc <SysOpen(regs*)+0x1ea>
c0011ad1:	83 ec 08             	sub    esp,0x8
c0011ad4:	68 05 0e 02 c0       	push   0xc0020e05
c0011ad9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011adc:	50                   	push   eax
c0011add:	e8 a8 fe ff ff       	call   c001198a <string_ends_with(char const*, char const*)>
c0011ae2:	83 c4 10             	add    esp,0x10
c0011ae5:	85 c0                	test   eax,eax
c0011ae7:	0f 85 cf 00 00 00    	jne    c0011bbc <SysOpen(regs*)+0x1ea>
c0011aed:	83 ec 08             	sub    esp,0x8
c0011af0:	68 01 0e 02 c0       	push   0xc0020e01
c0011af5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011af8:	51                   	push   ecx
c0011af9:	e8 52 ec fe ff       	call   c0000750 <strcmp>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	85 c0                	test   eax,eax
c0011b03:	0f 84 b3 00 00 00    	je     c0011bbc <SysOpen(regs*)+0x1ea>
c0011b09:	83 ec 08             	sub    esp,0x8
c0011b0c:	68 00 0e 02 c0       	push   0xc0020e00
c0011b11:	56                   	push   esi
c0011b12:	e8 73 fe ff ff       	call   c001198a <string_ends_with(char const*, char const*)>
c0011b17:	83 c4 10             	add    esp,0x10
c0011b1a:	85 c0                	test   eax,eax
c0011b1c:	0f 85 9a 00 00 00    	jne    c0011bbc <SysOpen(regs*)+0x1ea>
c0011b22:	83 ec 0c             	sub    esp,0xc
c0011b25:	68 14 01 00 00       	push   0x114
c0011b2a:	e8 7f 5f ff ff       	call   c0007aae <malloc>
c0011b2f:	83 c4 0c             	add    esp,0xc
c0011b32:	89 c6                	mov    esi,eax
c0011b34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b3c:	50                   	push   eax
c0011b3d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011b40:	52                   	push   edx
c0011b41:	56                   	push   esi
c0011b42:	e8 fd 93 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c0011b47:	83 c4 10             	add    esp,0x10
c0011b4a:	85 f6                	test   esi,esi
c0011b4c:	74 5b                	je     c0011ba9 <SysOpen(regs*)+0x1d7>
c0011b4e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b51:	0f b6 c2             	movzx  eax,dl
c0011b54:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011b57:	89 d0                	mov    eax,edx
c0011b59:	83 e0 01             	and    eax,0x1
c0011b5c:	f6 c2 02             	test   dl,0x2
c0011b5f:	74 03                	je     c0011b64 <SysOpen(regs*)+0x192>
c0011b61:	83 c8 02             	or     eax,0x2
c0011b64:	f6 c2 04             	test   dl,0x4
c0011b67:	74 03                	je     c0011b6c <SysOpen(regs*)+0x19a>
c0011b69:	83 c8 04             	or     eax,0x4
c0011b6c:	f6 c2 08             	test   dl,0x8
c0011b6f:	74 03                	je     c0011b74 <SysOpen(regs*)+0x1a2>
c0011b71:	83 c8 0a             	or     eax,0xa
c0011b74:	80 e2 10             	and    dl,0x10
c0011b77:	74 03                	je     c0011b7c <SysOpen(regs*)+0x1aa>
c0011b79:	83 c8 12             	or     eax,0x12
c0011b7c:	83 ec 08             	sub    esp,0x8
c0011b7f:	50                   	push   eax
c0011b80:	56                   	push   esi
c0011b81:	e8 7a 94 ff ff       	call   c000b000 <File::open(FileOpenMode)>
c0011b86:	83 c4 10             	add    esp,0x10
c0011b89:	85 c0                	test   eax,eax
c0011b8b:	75 1c                	jne    c0011ba9 <SysOpen(regs*)+0x1d7>
c0011b8d:	83 ec 0c             	sub    esp,0xc
c0011b90:	56                   	push   esi
c0011b91:	e8 30 76 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011b96:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b99:	83 c4 10             	add    esp,0x10
c0011b9c:	89 02                	mov    DWORD PTR [edx],eax
c0011b9e:	c1 f8 1f             	sar    eax,0x1f
c0011ba1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ba4:	e9 ba fe ff ff       	jmp    c0011a63 <SysOpen(regs*)+0x91>
c0011ba9:	81 c4 04 01 00 00    	add    esp,0x104
c0011baf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bb4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bb9:	5b                   	pop    ebx
c0011bba:	5e                   	pop    esi
c0011bbb:	c3                   	ret    
c0011bbc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bbf:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011bc5:	e9 92 fe ff ff       	jmp    c0011a5c <SysOpen(regs*)+0x8a>

c0011bca <KeSystemCall(regs*, void*)>:
c0011bca:	53                   	push   ebx
c0011bcb:	83 ec 08             	sub    esp,0x8
c0011bce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bd2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011bd5:	83 f8 3b             	cmp    eax,0x3b
c0011bd8:	77 16                	ja     c0011bf0 <KeSystemCall(regs*, void*)+0x26>
c0011bda:	8b 14 85 c0 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdde40]
c0011be1:	85 d2                	test   edx,edx
c0011be3:	74 0b                	je     c0011bf0 <KeSystemCall(regs*, void*)+0x26>
c0011be5:	83 ec 0c             	sub    esp,0xc
c0011be8:	53                   	push   ebx
c0011be9:	ff d2                	call   edx
c0011beb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011bee:	eb 0d                	jmp    c0011bfd <KeSystemCall(regs*, void*)+0x33>
c0011bf0:	52                   	push   edx
c0011bf1:	52                   	push   edx
c0011bf2:	50                   	push   eax
c0011bf3:	68 0a 0e 02 c0       	push   0xc0020e0a
c0011bf8:	e8 c5 8d ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0011bfd:	83 c4 10             	add    esp,0x10
c0011c00:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011c05:	31 d2                	xor    edx,edx
c0011c07:	83 c4 08             	add    esp,0x8
c0011c0a:	5b                   	pop    ebx
c0011c0b:	c3                   	ret    

c0011c0c <KeSwitchEndian16(unsigned short)>:
c0011c0c:	83 ec 04             	sub    esp,0x4
c0011c0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c13:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011c17:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c1b:	c1 f8 08             	sar    eax,0x8
c0011c1e:	89 c2                	mov    edx,eax
c0011c20:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c24:	c1 e0 08             	shl    eax,0x8
c0011c27:	09 d0                	or     eax,edx
c0011c29:	83 c4 04             	add    esp,0x4
c0011c2c:	c3                   	ret    
c0011c2d:	8d 76 00             	lea    esi,[esi+0x0]

c0011c30 <KeSwitchEndian32(unsigned int)>:
c0011c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c34:	c1 e8 18             	shr    eax,0x18
c0011c37:	89 c2                	mov    edx,eax
c0011c39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c3d:	c1 e0 08             	shl    eax,0x8
c0011c40:	25 00 00 ff 00       	and    eax,0xff0000
c0011c45:	09 c2                	or     edx,eax
c0011c47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c4b:	c1 e8 08             	shr    eax,0x8
c0011c4e:	25 00 ff 00 00       	and    eax,0xff00
c0011c53:	09 c2                	or     edx,eax
c0011c55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c59:	c1 e0 18             	shl    eax,0x18
c0011c5c:	09 d0                	or     eax,edx
c0011c5e:	c3                   	ret    
c0011c5f:	90                   	nop

c0011c60 <EthernetCRC32(unsigned char*, int)>:
c0011c60:	83 ec 10             	sub    esp,0x10
c0011c63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011c68:	75 0a                	jne    c0011c74 <EthernetCRC32(unsigned char*, int)+0x14>
c0011c6a:	b8 00 00 00 00       	mov    eax,0x0
c0011c6f:	e9 8c 00 00 00       	jmp    c0011d00 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c74:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011c79:	7f 09                	jg     c0011c84 <EthernetCRC32(unsigned char*, int)+0x24>
c0011c7b:	b8 00 00 00 00       	mov    eax,0x0
c0011c80:	eb 7e                	jmp    c0011d00 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c82:	66 90                	xchg   ax,ax
c0011c84:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011c8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011c94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c98:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011c9c:	7d 5a                	jge    c0011cf8 <EthernetCRC32(unsigned char*, int)+0x98>
c0011c9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ca2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ca6:	01 d0                	add    eax,edx
c0011ca8:	8a 00                	mov    al,BYTE PTR [eax]
c0011caa:	0f b6 c0             	movzx  eax,al
c0011cad:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011cb1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0011cbc:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011cc1:	7f 2d                	jg     c0011cf0 <EthernetCRC32(unsigned char*, int)+0x90>
c0011cc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc7:	83 e0 01             	and    eax,0x1
c0011cca:	74 10                	je     c0011cdc <EthernetCRC32(unsigned char*, int)+0x7c>
c0011ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd0:	d1 e8                	shr    eax,1
c0011cd2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011cd7:	eb 0b                	jmp    c0011ce4 <EthernetCRC32(unsigned char*, int)+0x84>
c0011cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0011cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ce0:	d1 e8                	shr    eax,1
c0011ce2:	66 90                	xchg   ax,ax
c0011ce4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ce8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011ced:	eb cd                	jmp    c0011cbc <EthernetCRC32(unsigned char*, int)+0x5c>
c0011cef:	90                   	nop
c0011cf0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011cf5:	eb 9d                	jmp    c0011c94 <EthernetCRC32(unsigned char*, int)+0x34>
c0011cf7:	90                   	nop
c0011cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cfc:	f7 d0                	not    eax
c0011cfe:	66 90                	xchg   ax,ax
c0011d00:	83 c4 10             	add    esp,0x10
c0011d03:	c3                   	ret    

c0011d04 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011d04:	83 ec 2c             	sub    esp,0x2c
c0011d07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d0b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011d10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d1f:	0f b7 c0             	movzx  eax,ax
c0011d22:	3d 06 08 00 00       	cmp    eax,0x806
c0011d27:	75 13                	jne    c0011d3c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011d29:	83 ec 0c             	sub    esp,0xc
c0011d2c:	68 1e 0e 02 c0       	push   0xc0020e1e
c0011d31:	e8 8c 8c ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0011d36:	83 c4 10             	add    esp,0x10
c0011d39:	eb 25                	jmp    c0011d60 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011d3b:	90                   	nop
c0011d3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d43:	0f b7 c0             	movzx  eax,ax
c0011d46:	3d 00 08 00 00       	cmp    eax,0x800
c0011d4b:	75 13                	jne    c0011d60 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011d4d:	83 ec 0c             	sub    esp,0xc
c0011d50:	68 34 0e 02 c0       	push   0xc0020e34
c0011d55:	e8 68 8c ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0011d60:	90                   	nop
c0011d61:	83 c4 2c             	add    esp,0x2c
c0011d64:	c3                   	ret    

c0011d65 <CmOpen(char const*)>:
c0011d65:	57                   	push   edi
c0011d66:	56                   	push   esi
c0011d67:	53                   	push   ebx
c0011d68:	83 ec 1c             	sub    esp,0x1c
c0011d6b:	6a 30                	push   0x30
c0011d6d:	e8 3c 5d ff ff       	call   c0007aae <malloc>
c0011d72:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011d79:	89 c3                	mov    ebx,eax
c0011d7b:	e8 2e 5d ff ff       	call   c0007aae <malloc>
c0011d80:	83 c4 0c             	add    esp,0xc
c0011d83:	89 c6                	mov    esi,eax
c0011d85:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011d8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011d8f:	50                   	push   eax
c0011d90:	e8 af 91 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c0011d95:	83 c4 0c             	add    esp,0xc
c0011d98:	89 33                	mov    DWORD PTR [ebx],esi
c0011d9a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011d9e:	50                   	push   eax
c0011d9f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011da3:	50                   	push   eax
c0011da4:	56                   	push   esi
c0011da5:	e8 02 95 ff ff       	call   c000b2ac <File::stat(unsigned long long*, bool*)>
c0011daa:	5a                   	pop    edx
c0011dab:	59                   	pop    ecx
c0011dac:	6a 01                	push   0x1
c0011dae:	ff 33                	push   DWORD PTR [ebx]
c0011db0:	e8 4b 92 ff ff       	call   c000b000 <File::open(FileOpenMode)>
c0011db5:	5e                   	pop    esi
c0011db6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011dba:	e8 ef 5c ff ff       	call   c0007aae <malloc>
c0011dbf:	5a                   	pop    edx
c0011dc0:	89 c7                	mov    edi,eax
c0011dc2:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011dc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dc8:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dca:	56                   	push   esi
c0011dcb:	57                   	push   edi
c0011dcc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dd4:	50                   	push   eax
c0011dd5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011dd8:	83 c4 14             	add    esp,0x14
c0011ddb:	ff 33                	push   DWORD PTR [ebx]
c0011ddd:	e8 7c 92 ff ff       	call   c000b05e <File::close()>
c0011de2:	59                   	pop    ecx
c0011de3:	58                   	pop    eax
c0011de4:	6a 13                	push   0x13
c0011de6:	ff 33                	push   DWORD PTR [ebx]
c0011de8:	e8 13 92 ff ff       	call   c000b000 <File::open(FileOpenMode)>
c0011ded:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011def:	8b 10                	mov    edx,DWORD PTR [eax]
c0011df1:	89 34 24             	mov    DWORD PTR [esp],esi
c0011df4:	57                   	push   edi
c0011df5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011df9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dfd:	50                   	push   eax
c0011dfe:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011e01:	83 c4 14             	add    esp,0x14
c0011e04:	57                   	push   edi
c0011e05:	e8 b4 5c ff ff       	call   c0007abe <free>
c0011e0a:	83 c4 10             	add    esp,0x10
c0011e0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011e10:	75 10                	jne    c0011e22 <CmOpen(char const*)+0xbd>
c0011e12:	83 ec 0c             	sub    esp,0xc
c0011e15:	68 49 0e 02 c0       	push   0xc0020e49
c0011e1a:	e8 d0 ea ff ff       	call   c00108ef <KePanic(char const*)>
c0011e1f:	83 c4 10             	add    esp,0x10
c0011e22:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011e25:	50                   	push   eax
c0011e26:	6a 00                	push   0x0
c0011e28:	6a 00                	push   0x0
c0011e2a:	ff 33                	push   DWORD PTR [ebx]
c0011e2c:	e8 8d 92 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0011e31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e33:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e35:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e38:	57                   	push   edi
c0011e39:	6a 00                	push   0x0
c0011e3b:	6a 2b                	push   0x2b
c0011e3d:	50                   	push   eax
c0011e3e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e41:	83 c4 1c             	add    esp,0x1c
c0011e44:	6a 00                	push   0x0
c0011e46:	6a 00                	push   0x0
c0011e48:	ff 33                	push   DWORD PTR [ebx]
c0011e4a:	e8 6f 92 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0011e4f:	83 c4 0c             	add    esp,0xc
c0011e52:	6a 08                	push   0x8
c0011e54:	68 5a 0e 02 c0       	push   0xc0020e5a
c0011e59:	57                   	push   edi
c0011e5a:	e8 21 e5 fe ff       	call   c0000380 <memcmp>
c0011e5f:	83 c4 10             	add    esp,0x10
c0011e62:	85 c0                	test   eax,eax
c0011e64:	74 10                	je     c0011e76 <CmOpen(char const*)+0x111>
c0011e66:	83 ec 0c             	sub    esp,0xc
c0011e69:	68 63 0e 02 c0       	push   0xc0020e63
c0011e6e:	e8 7c ea ff ff       	call   c00108ef <KePanic(char const*)>
c0011e73:	83 c4 10             	add    esp,0x10
c0011e76:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011e7a:	89 d8                	mov    eax,ebx
c0011e7c:	83 c4 10             	add    esp,0x10
c0011e7f:	5b                   	pop    ebx
c0011e80:	5e                   	pop    esi
c0011e81:	5f                   	pop    edi
c0011e82:	c3                   	ret    

c0011e83 <CmClose(Reghive_Tag*)>:
c0011e83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e87:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011e8b:	74 0b                	je     c0011e98 <CmClose(Reghive_Tag*)+0x15>
c0011e8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e93:	e9 c6 91 ff ff       	jmp    c000b05e <File::close()>
c0011e98:	c3                   	ret    

c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011e99:	53                   	push   ebx
c0011e9a:	83 ec 18             	sub    esp,0x18
c0011e9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ea1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011ea5:	74 29                	je     c0011ed0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011ea7:	50                   	push   eax
c0011ea8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011ead:	99                   	cdq    
c0011eae:	52                   	push   edx
c0011eaf:	50                   	push   eax
c0011eb0:	ff 33                	push   DWORD PTR [ebx]
c0011eb2:	e8 07 92 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0011eb7:	5a                   	pop    edx
c0011eb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eba:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ebe:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ec0:	51                   	push   ecx
c0011ec1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011ec5:	6a 00                	push   0x0
c0011ec7:	6a 2b                	push   0x2b
c0011ec9:	50                   	push   eax
c0011eca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ecd:	83 c4 20             	add    esp,0x20
c0011ed0:	83 c4 18             	add    esp,0x18
c0011ed3:	5b                   	pop    ebx
c0011ed4:	c3                   	ret    

c0011ed5 <CmGetString(Reghive_Tag*, int, char*)>:
c0011ed5:	55                   	push   ebp
c0011ed6:	57                   	push   edi
c0011ed7:	56                   	push   esi
c0011ed8:	53                   	push   ebx
c0011ed9:	31 db                	xor    ebx,ebx
c0011edb:	83 ec 70             	sub    esp,0x70
c0011ede:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011ee5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011ee9:	50                   	push   eax
c0011eea:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011ef1:	55                   	push   ebp
c0011ef2:	e8 a2 ff ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ef7:	83 c4 10             	add    esp,0x10
c0011efa:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011eff:	c1 e0 08             	shl    eax,0x8
c0011f02:	89 c2                	mov    edx,eax
c0011f04:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011f09:	09 d0                	or     eax,edx
c0011f0b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011f10:	c1 e0 08             	shl    eax,0x8
c0011f13:	09 d0                	or     eax,edx
c0011f15:	74 25                	je     c0011f3c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011f17:	6b fb 0d             	imul   edi,ebx,0xd
c0011f1a:	52                   	push   edx
c0011f1b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011f1f:	52                   	push   edx
c0011f20:	50                   	push   eax
c0011f21:	55                   	push   ebp
c0011f22:	e8 72 ff ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f27:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011f2b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011f32:	b9 27 00 00 00       	mov    ecx,0x27
c0011f37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f39:	83 c4 10             	add    esp,0x10
c0011f3c:	83 c3 03             	add    ebx,0x3
c0011f3f:	83 fb 15             	cmp    ebx,0x15
c0011f42:	75 b6                	jne    c0011efa <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011f44:	83 c4 6c             	add    esp,0x6c
c0011f47:	5b                   	pop    ebx
c0011f48:	5e                   	pop    esi
c0011f49:	5f                   	pop    edi
c0011f4a:	5d                   	pop    ebp
c0011f4b:	c3                   	ret    

c0011f4c <CmEnterDirectory(Reghive_Tag*, int)>:
c0011f4c:	83 ec 40             	sub    esp,0x40
c0011f4f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f53:	50                   	push   eax
c0011f54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f5c:	e8 38 ff ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f61:	83 c4 10             	add    esp,0x10
c0011f64:	83 c8 ff             	or     eax,0xffffffff
c0011f67:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011f6c:	75 19                	jne    c0011f87 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011f6e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011f73:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011f78:	c1 e0 08             	shl    eax,0x8
c0011f7b:	09 c2                	or     edx,eax
c0011f7d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011f82:	c1 e0 10             	shl    eax,0x10
c0011f85:	09 d0                	or     eax,edx
c0011f87:	83 c4 3c             	add    esp,0x3c
c0011f8a:	c3                   	ret    

c0011f8b <CmGetNext(Reghive_Tag*, int)>:
c0011f8b:	83 ec 40             	sub    esp,0x40
c0011f8e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f92:	50                   	push   eax
c0011f93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f9b:	e8 f9 fe ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011fa0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011fa5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011faa:	c1 e0 08             	shl    eax,0x8
c0011fad:	09 c2                	or     edx,eax
c0011faf:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011fb4:	83 c4 4c             	add    esp,0x4c
c0011fb7:	c1 e0 10             	shl    eax,0x10
c0011fba:	09 d0                	or     eax,edx
c0011fbc:	c3                   	ret    

c0011fbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011fbd:	53                   	push   ebx
c0011fbe:	83 ec 18             	sub    esp,0x18
c0011fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fc5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fc9:	74 29                	je     c0011ff4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011fcb:	50                   	push   eax
c0011fcc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011fd1:	99                   	cdq    
c0011fd2:	52                   	push   edx
c0011fd3:	50                   	push   eax
c0011fd4:	ff 33                	push   DWORD PTR [ebx]
c0011fd6:	e8 e3 90 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0011fdb:	5a                   	pop    edx
c0011fdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fde:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011fe2:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fe4:	51                   	push   ecx
c0011fe5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011fe9:	6a 00                	push   0x0
c0011feb:	6a 2b                	push   0x2b
c0011fed:	50                   	push   eax
c0011fee:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011ff1:	83 c4 20             	add    esp,0x20
c0011ff4:	83 c4 18             	add    esp,0x18
c0011ff7:	5b                   	pop    ebx
c0011ff8:	c3                   	ret    

c0011ff9 <CmFreeExtent(Reghive_Tag*, int)>:
c0011ff9:	53                   	push   ebx
c0011ffa:	83 ec 3c             	sub    esp,0x3c
c0011ffd:	6a 2b                	push   0x2b
c0011fff:	6a 00                	push   0x0
c0012001:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012005:	53                   	push   ebx
c0012006:	e8 e5 e4 fe ff       	call   c00004f0 <memset>
c001200b:	83 c4 0c             	add    esp,0xc
c001200e:	53                   	push   ebx
c001200f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012013:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012017:	e8 a1 ff ff ff       	call   c0011fbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001201c:	83 c4 48             	add    esp,0x48
c001201f:	5b                   	pop    ebx
c0012020:	c3                   	ret    

c0012021 <CmUpdateHeader(Reghive_Tag*)>:
c0012021:	83 ec 0c             	sub    esp,0xc
c0012024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012028:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001202c:	74 10                	je     c001203e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001202e:	52                   	push   edx
c001202f:	8d 50 05             	lea    edx,[eax+0x5]
c0012032:	52                   	push   edx
c0012033:	6a 00                	push   0x0
c0012035:	50                   	push   eax
c0012036:	e8 82 ff ff ff       	call   c0011fbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001203b:	83 c4 10             	add    esp,0x10
c001203e:	83 c4 0c             	add    esp,0xc
c0012041:	c3                   	ret    

c0012042 <CmExpand(Reghive_Tag*, int)>:
c0012042:	57                   	push   edi
c0012043:	56                   	push   esi
c0012044:	83 ce ff             	or     esi,0xffffffff
c0012047:	53                   	push   ebx
c0012048:	83 ec 30             	sub    esp,0x30
c001204b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001204f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012053:	74 5f                	je     c00120b4 <CmExpand(Reghive_Tag*, int)+0x72>
c0012055:	31 d2                	xor    edx,edx
c0012057:	31 f6                	xor    esi,esi
c0012059:	50                   	push   eax
c001205a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001205e:	52                   	push   edx
c001205f:	50                   	push   eax
c0012060:	ff 33                	push   DWORD PTR [ebx]
c0012062:	e8 57 90 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0012067:	83 c4 0c             	add    esp,0xc
c001206a:	6a 2b                	push   0x2b
c001206c:	6a 00                	push   0x0
c001206e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012072:	57                   	push   edi
c0012073:	e8 78 e4 fe ff       	call   c00004f0 <memset>
c0012078:	83 c4 10             	add    esp,0x10
c001207b:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001207f:	7d 1b                	jge    c001209c <CmExpand(Reghive_Tag*, int)+0x5a>
c0012081:	83 ec 0c             	sub    esp,0xc
c0012084:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012086:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001208a:	8b 10                	mov    edx,DWORD PTR [eax]
c001208c:	46                   	inc    esi
c001208d:	51                   	push   ecx
c001208e:	57                   	push   edi
c001208f:	6a 00                	push   0x0
c0012091:	6a 2b                	push   0x2b
c0012093:	50                   	push   eax
c0012094:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012097:	83 c4 20             	add    esp,0x20
c001209a:	eb df                	jmp    c001207b <CmExpand(Reghive_Tag*, int)+0x39>
c001209c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00120a0:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00120a3:	83 ec 0c             	sub    esp,0xc
c00120a6:	01 f2                	add    edx,esi
c00120a8:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00120ab:	53                   	push   ebx
c00120ac:	e8 70 ff ff ff       	call   c0012021 <CmUpdateHeader(Reghive_Tag*)>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	83 c4 30             	add    esp,0x30
c00120b7:	89 f0                	mov    eax,esi
c00120b9:	5b                   	pop    ebx
c00120ba:	5e                   	pop    esi
c00120bb:	5f                   	pop    edi
c00120bc:	c3                   	ret    

c00120bd <CmFindUnusedExtent(Reghive_Tag*)>:
c00120bd:	55                   	push   ebp
c00120be:	57                   	push   edi
c00120bf:	56                   	push   esi
c00120c0:	53                   	push   ebx
c00120c1:	83 cb ff             	or     ebx,0xffffffff
c00120c4:	83 ec 1c             	sub    esp,0x1c
c00120c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00120cb:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00120cf:	74 68                	je     c0012139 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00120d1:	be 2b 00 00 00       	mov    esi,0x2b
c00120d6:	51                   	push   ecx
c00120d7:	31 ff                	xor    edi,edi
c00120d9:	6a 00                	push   0x0
c00120db:	31 db                	xor    ebx,ebx
c00120dd:	6a 00                	push   0x0
c00120df:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00120e2:	e8 d7 8f ff ff       	call   c000b0be <File::seek(unsigned long long)>
c00120e7:	83 c4 10             	add    esp,0x10
c00120ea:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00120ed:	76 3b                	jbe    c001212a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00120ef:	83 ec 0c             	sub    esp,0xc
c00120f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120f5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00120f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00120fb:	51                   	push   ecx
c00120fc:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012100:	51                   	push   ecx
c0012101:	6a 00                	push   0x0
c0012103:	6a 01                	push   0x1
c0012105:	50                   	push   eax
c0012106:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012109:	83 c4 20             	add    esp,0x20
c001210c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012111:	74 26                	je     c0012139 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012113:	43                   	inc    ebx
c0012114:	52                   	push   edx
c0012115:	57                   	push   edi
c0012116:	56                   	push   esi
c0012117:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001211a:	e8 9f 8f ff ff       	call   c000b0be <File::seek(unsigned long long)>
c001211f:	83 c6 2b             	add    esi,0x2b
c0012122:	83 d7 00             	adc    edi,0x0
c0012125:	83 c4 10             	add    esp,0x10
c0012128:	eb c0                	jmp    c00120ea <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001212a:	50                   	push   eax
c001212b:	50                   	push   eax
c001212c:	6a 40                	push   0x40
c001212e:	55                   	push   ebp
c001212f:	e8 0e ff ff ff       	call   c0012042 <CmExpand(Reghive_Tag*, int)>
c0012134:	83 c4 10             	add    esp,0x10
c0012137:	89 c3                	mov    ebx,eax
c0012139:	83 c4 1c             	add    esp,0x1c
c001213c:	89 d8                	mov    eax,ebx
c001213e:	5b                   	pop    ebx
c001213f:	5e                   	pop    esi
c0012140:	5f                   	pop    edi
c0012141:	5d                   	pop    ebp
c0012142:	c3                   	ret    

c0012143 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012143:	55                   	push   ebp
c0012144:	57                   	push   edi
c0012145:	56                   	push   esi
c0012146:	53                   	push   ebx
c0012147:	81 ec 88 00 00 00    	sub    esp,0x88
c001214d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012154:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001215b:	e8 5d ff ff ff       	call   c00120bd <CmFindUnusedExtent(Reghive_Tag*)>
c0012160:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012164:	83 c4 0c             	add    esp,0xc
c0012167:	6a 2b                	push   0x2b
c0012169:	6a 00                	push   0x0
c001216b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001216f:	55                   	push   ebp
c0012170:	e8 7b e3 fe ff       	call   c00004f0 <memset>
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	85 db                	test   ebx,ebx
c001217a:	74 12                	je     c001218e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c001217c:	51                   	push   ecx
c001217d:	55                   	push   ebp
c001217e:	53                   	push   ebx
c001217f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012186:	e8 0e fd ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001218b:	83 c4 10             	add    esp,0x10
c001218e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012192:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012199:	b9 2b 00 00 00       	mov    ecx,0x2b
c001219e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121a0:	85 db                	test   ebx,ebx
c00121a2:	74 49                	je     c00121ed <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00121a4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00121a9:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00121ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121b2:	c1 e0 08             	shl    eax,0x8
c00121b5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00121bb:	09 c8                	or     eax,ecx
c00121bd:	74 11                	je     c00121d0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00121bf:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00121c3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00121c7:	c1 e8 10             	shr    eax,0x10
c00121ca:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00121ce:	eb 0f                	jmp    c00121df <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00121d0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00121d5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00121da:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00121df:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00121e3:	c1 ea 08             	shr    edx,0x8
c00121e6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00121eb:	eb 0f                	jmp    c00121fc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00121ed:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00121f2:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00121f7:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00121fc:	52                   	push   edx
c00121fd:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012201:	50                   	push   eax
c0012202:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012206:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001220d:	e8 ab fd ff ff       	call   c0011fbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	85 db                	test   ebx,ebx
c0012217:	74 12                	je     c001222b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012219:	50                   	push   eax
c001221a:	55                   	push   ebp
c001221b:	53                   	push   ebx
c001221c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012223:	e8 95 fd ff ff       	call   c0011fbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012228:	83 c4 10             	add    esp,0x10
c001222b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001222f:	83 c4 7c             	add    esp,0x7c
c0012232:	5b                   	pop    ebx
c0012233:	5e                   	pop    esi
c0012234:	5f                   	pop    edi
c0012235:	5d                   	pop    ebp
c0012236:	c3                   	ret    

c0012237 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012237:	55                   	push   ebp
c0012238:	57                   	push   edi
c0012239:	56                   	push   esi
c001223a:	53                   	push   ebx
c001223b:	bb 27 00 00 00       	mov    ebx,0x27
c0012240:	81 ec 88 00 00 00    	sub    esp,0x88
c0012246:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001224d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012254:	e8 17 e3 fe ff       	call   c0000570 <strlen>
c0012259:	8d 48 26             	lea    ecx,[eax+0x26]
c001225c:	89 c8                	mov    eax,ecx
c001225e:	99                   	cdq    
c001225f:	f7 fb                	idiv   ebx
c0012261:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012265:	83 c4 10             	add    esp,0x10
c0012268:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001226e:	7e 10                	jle    c0012280 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012270:	83 ec 0c             	sub    esp,0xc
c0012273:	68 74 0e 02 c0       	push   0xc0020e74
c0012278:	e8 72 e6 ff ff       	call   c00108ef <KePanic(char const*)>
c001227d:	83 c4 10             	add    esp,0x10
c0012280:	31 ff                	xor    edi,edi
c0012282:	50                   	push   eax
c0012283:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012287:	53                   	push   ebx
c0012288:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001228f:	56                   	push   esi
c0012290:	e8 04 fc ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012295:	83 c4 10             	add    esp,0x10
c0012298:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c001229c:	89 d0                	mov    eax,edx
c001229e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00122a2:	c1 e0 08             	shl    eax,0x8
c00122a5:	09 c2                	or     edx,eax
c00122a7:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00122ab:	c1 e2 08             	shl    edx,0x8
c00122ae:	09 c2                	or     edx,eax
c00122b0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00122b4:	7e 76                	jle    c001232c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00122b6:	85 d2                	test   edx,edx
c00122b8:	75 25                	jne    c00122df <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00122ba:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00122bf:	8d 44 24 45          	lea    eax,[esp+0x45]
c00122c3:	50                   	push   eax
c00122c4:	6a 00                	push   0x0
c00122c6:	6a 00                	push   0x0
c00122c8:	56                   	push   esi
c00122c9:	e8 75 fe ff ff       	call   c0012143 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00122ce:	83 c4 10             	add    esp,0x10
c00122d1:	89 c2                	mov    edx,eax
c00122d3:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00122d6:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00122d9:	c1 f8 10             	sar    eax,0x10
c00122dc:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00122df:	55                   	push   ebp
c00122e0:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00122e4:	55                   	push   ebp
c00122e5:	52                   	push   edx
c00122e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00122ea:	56                   	push   esi
c00122eb:	e8 a9 fb ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00122f0:	83 c4 0c             	add    esp,0xc
c00122f3:	6a 27                	push   0x27
c00122f5:	6a 00                	push   0x0
c00122f7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00122fb:	51                   	push   ecx
c00122fc:	e8 ef e1 fe ff       	call   c00004f0 <memset>
c0012301:	83 c4 0c             	add    esp,0xc
c0012304:	6b c7 27             	imul   eax,edi,0x27
c0012307:	6a 27                	push   0x27
c0012309:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012310:	50                   	push   eax
c0012311:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012315:	51                   	push   ecx
c0012316:	e8 65 e3 fe ff       	call   c0000680 <strncpy>
c001231b:	83 c4 0c             	add    esp,0xc
c001231e:	55                   	push   ebp
c001231f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012323:	52                   	push   edx
c0012324:	56                   	push   esi
c0012325:	e8 93 fc ff ff       	call   c0011fbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001232a:	eb 19                	jmp    c0012345 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001232c:	85 d2                	test   edx,edx
c001232e:	74 18                	je     c0012348 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012330:	51                   	push   ecx
c0012331:	51                   	push   ecx
c0012332:	52                   	push   edx
c0012333:	56                   	push   esi
c0012334:	e8 c0 fc ff ff       	call   c0011ff9 <CmFreeExtent(Reghive_Tag*, int)>
c0012339:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001233d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012341:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012345:	83 c4 10             	add    esp,0x10
c0012348:	47                   	inc    edi
c0012349:	83 c3 03             	add    ebx,0x3
c001234c:	83 ff 07             	cmp    edi,0x7
c001234f:	0f 85 43 ff ff ff    	jne    c0012298 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012355:	50                   	push   eax
c0012356:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001235a:	50                   	push   eax
c001235b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012362:	56                   	push   esi
c0012363:	e8 55 fc ff ff       	call   c0011fbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012368:	81 c4 8c 00 00 00    	add    esp,0x8c
c001236e:	5b                   	pop    ebx
c001236f:	5e                   	pop    esi
c0012370:	5f                   	pop    edi
c0012371:	5d                   	pop    ebp
c0012372:	c3                   	ret    

c0012373 <CmGetMatch(char*, char*, bool, bool*)>:
c0012373:	56                   	push   esi
c0012374:	53                   	push   ebx
c0012375:	50                   	push   eax
c0012376:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001237a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001237f:	74 25                	je     c00123a6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012381:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012384:	31 db                	xor    ebx,ebx
c0012386:	50                   	push   eax
c0012387:	50                   	push   eax
c0012388:	8d 04 9d c0 22 02 c0 	lea    eax,[ebx*4-0x3ffddd40]
c001238f:	50                   	push   eax
c0012390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012394:	e8 b7 e3 fe ff       	call   c0000750 <strcmp>
c0012399:	83 c4 10             	add    esp,0x10
c001239c:	85 c0                	test   eax,eax
c001239e:	74 2e                	je     c00123ce <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123a0:	43                   	inc    ebx
c00123a1:	83 fb 3f             	cmp    ebx,0x3f
c00123a4:	75 e0                	jne    c0012386 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00123a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123a9:	31 db                	xor    ebx,ebx
c00123ab:	8d 04 9d c0 22 02 c0 	lea    eax,[ebx*4-0x3ffddd40]
c00123b2:	51                   	push   ecx
c00123b3:	51                   	push   ecx
c00123b4:	50                   	push   eax
c00123b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123b9:	e8 92 e3 fe ff       	call   c0000750 <strcmp>
c00123be:	83 c4 10             	add    esp,0x10
c00123c1:	85 c0                	test   eax,eax
c00123c3:	74 09                	je     c00123ce <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123c5:	43                   	inc    ebx
c00123c6:	83 fb 3f             	cmp    ebx,0x3f
c00123c9:	75 e0                	jne    c00123ab <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00123cb:	83 cb ff             	or     ebx,0xffffffff
c00123ce:	89 d8                	mov    eax,ebx
c00123d0:	5a                   	pop    edx
c00123d1:	5b                   	pop    ebx
c00123d2:	5e                   	pop    esi
c00123d3:	c3                   	ret    

c00123d4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00123d4:	55                   	push   ebp
c00123d5:	31 c0                	xor    eax,eax
c00123d7:	57                   	push   edi
c00123d8:	56                   	push   esi
c00123d9:	53                   	push   ebx
c00123da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00123de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00123e2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123e4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00123e8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00123eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00123ef:	83 fd 1f             	cmp    ebp,0x1f
c00123f2:	7f 0b                	jg     c00123ff <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00123f4:	0f b6 c2             	movzx  eax,dl
c00123f7:	d3 e0                	shl    eax,cl
c00123f9:	09 07                	or     DWORD PTR [edi],eax
c00123fb:	b0 01                	mov    al,0x1
c00123fd:	01 33                	add    DWORD PTR [ebx],esi
c00123ff:	5b                   	pop    ebx
c0012400:	5e                   	pop    esi
c0012401:	5f                   	pop    edi
c0012402:	5d                   	pop    ebp
c0012403:	c3                   	ret    

c0012404 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012404:	57                   	push   edi
c0012405:	56                   	push   esi
c0012406:	53                   	push   ebx
c0012407:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001240b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001240f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012413:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012417:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012419:	7c 17                	jl     c0012432 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001241b:	8b 17                	mov    edx,DWORD PTR [edi]
c001241d:	b8 01 00 00 00       	mov    eax,0x1
c0012422:	d3 e0                	shl    eax,cl
c0012424:	48                   	dec    eax
c0012425:	21 d0                	and    eax,edx
c0012427:	d3 ea                	shr    edx,cl
c0012429:	89 17                	mov    DWORD PTR [edi],edx
c001242b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001242d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012430:	eb 05                	jmp    c0012437 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012432:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012435:	31 c0                	xor    eax,eax
c0012437:	5b                   	pop    ebx
c0012438:	5e                   	pop    esi
c0012439:	5f                   	pop    edi
c001243a:	c3                   	ret    

c001243b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001243b:	83 ec 40             	sub    esp,0x40
c001243e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012442:	50                   	push   eax
c0012443:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012447:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001244b:	e8 49 fa ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012450:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012454:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012458:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001245c:	89 10                	mov    DWORD PTR [eax],edx
c001245e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012461:	83 c4 4c             	add    esp,0x4c
c0012464:	c3                   	ret    

c0012465 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012465:	55                   	push   ebp
c0012466:	57                   	push   edi
c0012467:	56                   	push   esi
c0012468:	53                   	push   ebx
c0012469:	83 ec 40             	sub    esp,0x40
c001246c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012470:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012474:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012478:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001247c:	53                   	push   ebx
c001247d:	56                   	push   esi
c001247e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012482:	e8 12 fa ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012487:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001248b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001248f:	83 c4 0c             	add    esp,0xc
c0012492:	53                   	push   ebx
c0012493:	56                   	push   esi
c0012494:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012498:	e8 20 fb ff ff       	call   c0011fbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001249d:	83 c4 4c             	add    esp,0x4c
c00124a0:	5b                   	pop    ebx
c00124a1:	5e                   	pop    esi
c00124a2:	5f                   	pop    edi
c00124a3:	5d                   	pop    ebp
c00124a4:	c3                   	ret    

c00124a5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00124a5:	55                   	push   ebp
c00124a6:	57                   	push   edi
c00124a7:	56                   	push   esi
c00124a8:	31 f6                	xor    esi,esi
c00124aa:	53                   	push   ebx
c00124ab:	31 db                	xor    ebx,ebx
c00124ad:	83 ec 40             	sub    esp,0x40
c00124b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00124b8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124c0:	6a 12                	push   0x12
c00124c2:	68 ee 00 00 00       	push   0xee
c00124c7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124cb:	e8 20 e0 fe ff       	call   c00004f0 <memset>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00124d7:	6a 08                	push   0x8
c00124d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00124dd:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00124e1:	50                   	push   eax
c00124e2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00124e6:	55                   	push   ebp
c00124e7:	57                   	push   edi
c00124e8:	e8 e7 fe ff ff       	call   c00123d4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00124f4:	50                   	push   eax
c00124f5:	6a 06                	push   0x6
c00124f7:	55                   	push   ebp
c00124f8:	57                   	push   edi
c00124f9:	e8 06 ff ff ff       	call   c0012404 <CmGetShift(unsigned int*, int*, int, bool*)>
c00124fe:	83 c4 10             	add    esp,0x10
c0012501:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012506:	74 07                	je     c001250f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012508:	46                   	inc    esi
c0012509:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001250d:	eb e1                	jmp    c00124f0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001250f:	43                   	inc    ebx
c0012510:	83 fb 12             	cmp    ebx,0x12
c0012513:	75 c2                	jne    c00124d7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012515:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012519:	31 db                	xor    ebx,ebx
c001251b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001251e:	50                   	push   eax
c001251f:	50                   	push   eax
c0012520:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012525:	43                   	inc    ebx
c0012526:	8d 04 85 c0 22 02 c0 	lea    eax,[eax*4-0x3ffddd40]
c001252d:	50                   	push   eax
c001252e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012532:	e8 09 e3 fe ff       	call   c0000840 <strcat>
c0012537:	83 c4 10             	add    esp,0x10
c001253a:	83 fb 18             	cmp    ebx,0x18
c001253d:	75 df                	jne    c001251e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001253f:	83 c4 3c             	add    esp,0x3c
c0012542:	31 c0                	xor    eax,eax
c0012544:	5b                   	pop    ebx
c0012545:	5e                   	pop    esi
c0012546:	5f                   	pop    edi
c0012547:	5d                   	pop    ebp
c0012548:	c3                   	ret    

c0012549 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012549:	83 ec 40             	sub    esp,0x40
c001254c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012550:	50                   	push   eax
c0012551:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012555:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012559:	e8 3b f9 ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001255e:	58                   	pop    eax
c001255f:	5a                   	pop    edx
c0012560:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012564:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012568:	50                   	push   eax
c0012569:	e8 37 ff ff ff       	call   c00124a5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001256e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012573:	83 c4 4c             	add    esp,0x4c
c0012576:	c3                   	ret    

c0012577 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012577:	55                   	push   ebp
c0012578:	57                   	push   edi
c0012579:	56                   	push   esi
c001257a:	53                   	push   ebx
c001257b:	31 db                	xor    ebx,ebx
c001257d:	83 ec 70             	sub    esp,0x70
c0012580:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012587:	6a 30                	push   0x30
c0012589:	6a 00                	push   0x0
c001258b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001258f:	56                   	push   esi
c0012590:	e8 5b df fe ff       	call   c00004f0 <memset>
c0012595:	83 c4 10             	add    esp,0x10
c0012598:	83 ec 0c             	sub    esp,0xc
c001259b:	57                   	push   edi
c001259c:	e8 cf df fe ff       	call   c0000570 <strlen>
c00125a1:	83 c4 10             	add    esp,0x10
c00125a4:	39 d8                	cmp    eax,ebx
c00125a6:	76 16                	jbe    c00125be <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00125a8:	83 ec 0c             	sub    esp,0xc
c00125ab:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00125af:	50                   	push   eax
c00125b0:	e8 7b e3 fe ff       	call   c0000930 <toupper>
c00125b5:	83 c4 10             	add    esp,0x10
c00125b8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00125bb:	43                   	inc    ebx
c00125bc:	eb da                	jmp    c0012598 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00125be:	31 f6                	xor    esi,esi
c00125c0:	52                   	push   edx
c00125c1:	31 ff                	xor    edi,edi
c00125c3:	6a 18                	push   0x18
c00125c5:	6a 3f                	push   0x3f
c00125c7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125cb:	50                   	push   eax
c00125cc:	e8 1f df fe ff       	call   c00004f0 <memset>
c00125d1:	83 c4 10             	add    esp,0x10
c00125d4:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00125d8:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00125dc:	84 c0                	test   al,al
c00125de:	0f 84 b0 00 00 00    	je     c0012694 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00125e4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00125e8:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00125ed:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00125f1:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00125f6:	8d 6e 01             	lea    ebp,[esi+0x1]
c00125f9:	83 ec 0c             	sub    esp,0xc
c00125fc:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012600:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012604:	53                   	push   ebx
c0012605:	e8 66 df fe ff       	call   c0000570 <strlen>
c001260a:	83 c4 10             	add    esp,0x10
c001260d:	85 c0                	test   eax,eax
c001260f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012613:	74 0b                	je     c0012620 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012615:	50                   	push   eax
c0012616:	6a 01                	push   0x1
c0012618:	53                   	push   ebx
c0012619:	8d 44 24 20          	lea    eax,[esp+0x20]
c001261d:	50                   	push   eax
c001261e:	eb 0a                	jmp    c001262a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012620:	50                   	push   eax
c0012621:	6a 00                	push   0x0
c0012623:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012627:	50                   	push   eax
c0012628:	6a 00                	push   0x0
c001262a:	e8 44 fd ff ff       	call   c0012373 <CmGetMatch(char*, char*, bool, bool*)>
c001262f:	83 c4 10             	add    esp,0x10
c0012632:	83 f8 ff             	cmp    eax,0xffffffff
c0012635:	75 1a                	jne    c0012651 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012637:	83 ec 0c             	sub    esp,0xc
c001263a:	68 89 0e 02 c0       	push   0xc0020e89
c001263f:	e8 ab e2 ff ff       	call   c00108ef <KePanic(char const*)>
c0012644:	83 c4 10             	add    esp,0x10
c0012647:	b8 02 00 00 00       	mov    eax,0x2
c001264c:	e9 bc 00 00 00       	jmp    c001270d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012651:	83 ff 18             	cmp    edi,0x18
c0012654:	75 1a                	jne    c0012670 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012656:	83 ec 0c             	sub    esp,0xc
c0012659:	68 9e 0e 02 c0       	push   0xc0020e9e
c001265e:	e8 8c e2 ff ff       	call   c00108ef <KePanic(char const*)>
c0012663:	83 c4 10             	add    esp,0x10
c0012666:	b8 01 00 00 00       	mov    eax,0x1
c001266b:	e9 9d 00 00 00       	jmp    c001270d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012670:	47                   	inc    edi
c0012671:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012676:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001267a:	74 02                	je     c001267e <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001267c:	89 ee                	mov    esi,ebp
c001267e:	83 ec 0c             	sub    esp,0xc
c0012681:	53                   	push   ebx
c0012682:	e8 e9 de fe ff       	call   c0000570 <strlen>
c0012687:	83 c4 10             	add    esp,0x10
c001268a:	85 c0                	test   eax,eax
c001268c:	74 06                	je     c0012694 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001268e:	46                   	inc    esi
c001268f:	e9 40 ff ff ff       	jmp    c00125d4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012694:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001269c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126a4:	31 f6                	xor    esi,esi
c00126a6:	50                   	push   eax
c00126a7:	31 ff                	xor    edi,edi
c00126a9:	6a 12                	push   0x12
c00126ab:	68 ee 00 00 00       	push   0xee
c00126b0:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00126b7:	e8 34 de fe ff       	call   c00004f0 <memset>
c00126bc:	83 c4 10             	add    esp,0x10
c00126bf:	83 fe 17             	cmp    esi,0x17
c00126c2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00126c6:	7e 26                	jle    c00126ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00126c8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00126cc:	50                   	push   eax
c00126cd:	6a 08                	push   0x8
c00126cf:	55                   	push   ebp
c00126d0:	53                   	push   ebx
c00126d1:	e8 2e fd ff ff       	call   c0012404 <CmGetShift(unsigned int*, int*, int, bool*)>
c00126d6:	83 c4 10             	add    esp,0x10
c00126d9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00126de:	74 26                	je     c0012706 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00126e0:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00126e7:	4e                   	dec    esi
c00126e8:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00126eb:	47                   	inc    edi
c00126ec:	eb 1c                	jmp    c001270a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00126ee:	6a 06                	push   0x6
c00126f0:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00126f5:	50                   	push   eax
c00126f6:	55                   	push   ebp
c00126f7:	53                   	push   ebx
c00126f8:	e8 d7 fc ff ff       	call   c00123d4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00126fd:	83 c4 10             	add    esp,0x10
c0012700:	84 c0                	test   al,al
c0012702:	75 06                	jne    c001270a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012704:	eb c2                	jmp    c00126c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0012706:	31 c0                	xor    eax,eax
c0012708:	eb 03                	jmp    c001270d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001270a:	46                   	inc    esi
c001270b:	eb b2                	jmp    c00126bf <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001270d:	83 c4 6c             	add    esp,0x6c
c0012710:	5b                   	pop    ebx
c0012711:	5e                   	pop    esi
c0012712:	5f                   	pop    edi
c0012713:	5d                   	pop    ebp
c0012714:	c3                   	ret    

c0012715 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012715:	53                   	push   ebx
c0012716:	83 ec 3c             	sub    esp,0x3c
c0012719:	6a 2b                	push   0x2b
c001271b:	6a 00                	push   0x0
c001271d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012721:	53                   	push   ebx
c0012722:	e8 c9 dd fe ff       	call   c00004f0 <memset>
c0012727:	58                   	pop    eax
c0012728:	5a                   	pop    edx
c0012729:	8d 44 24 11          	lea    eax,[esp+0x11]
c001272d:	50                   	push   eax
c001272e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012732:	e8 40 fe ff ff       	call   c0012577 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012737:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001273c:	83 c4 0c             	add    esp,0xc
c001273f:	6a 15                	push   0x15
c0012741:	6a 00                	push   0x0
c0012743:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012747:	50                   	push   eax
c0012748:	e8 a3 dd fe ff       	call   c00004f0 <memset>
c001274d:	53                   	push   ebx
c001274e:	6a 00                	push   0x0
c0012750:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012754:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012758:	e8 e6 f9 ff ff       	call   c0012143 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001275d:	83 c4 58             	add    esp,0x58
c0012760:	5b                   	pop    ebx
c0012761:	c3                   	ret    

c0012762 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012762:	56                   	push   esi
c0012763:	53                   	push   ebx
c0012764:	83 ec 48             	sub    esp,0x48
c0012767:	6a 12                	push   0x12
c0012769:	68 ff 00 00 00       	push   0xff
c001276e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012772:	56                   	push   esi
c0012773:	e8 78 dd fe ff       	call   c00004f0 <memset>
c0012778:	5a                   	pop    edx
c0012779:	59                   	pop    ecx
c001277a:	56                   	push   esi
c001277b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001277f:	e8 f3 fd ff ff       	call   c0012577 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012784:	83 c4 10             	add    esp,0x10
c0012787:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001278b:	85 db                	test   ebx,ebx
c001278d:	74 42                	je     c00127d1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001278f:	50                   	push   eax
c0012790:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012794:	50                   	push   eax
c0012795:	53                   	push   ebx
c0012796:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001279a:	e8 fa f6 ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001279f:	83 c4 0c             	add    esp,0xc
c00127a2:	6a 12                	push   0x12
c00127a4:	8d 44 24 21          	lea    eax,[esp+0x21]
c00127a8:	50                   	push   eax
c00127a9:	56                   	push   esi
c00127aa:	e8 d1 db fe ff       	call   c0000380 <memcmp>
c00127af:	83 c4 10             	add    esp,0x10
c00127b2:	85 c0                	test   eax,eax
c00127b4:	74 1e                	je     c00127d4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00127b6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00127bb:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00127c0:	c1 e3 08             	shl    ebx,0x8
c00127c3:	09 d8                	or     eax,ebx
c00127c5:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00127ca:	c1 e3 10             	shl    ebx,0x10
c00127cd:	09 c3                	or     ebx,eax
c00127cf:	eb ba                	jmp    c001278b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00127d1:	83 cb ff             	or     ebx,0xffffffff
c00127d4:	89 d8                	mov    eax,ebx
c00127d6:	83 c4 44             	add    esp,0x44
c00127d9:	5b                   	pop    ebx
c00127da:	5e                   	pop    esi
c00127db:	c3                   	ret    

c00127dc <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00127dc:	57                   	push   edi
c00127dd:	56                   	push   esi
c00127de:	53                   	push   ebx
c00127df:	83 ec 34             	sub    esp,0x34
c00127e2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00127e6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00127ea:	6a 2b                	push   0x2b
c00127ec:	6a 00                	push   0x0
c00127ee:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00127f2:	53                   	push   ebx
c00127f3:	e8 f8 dc fe ff       	call   c00004f0 <memset>
c00127f8:	58                   	pop    eax
c00127f9:	5a                   	pop    edx
c00127fa:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127fe:	50                   	push   eax
c00127ff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012803:	e8 6f fd ff ff       	call   c0012577 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012808:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001280c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012810:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012814:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012818:	53                   	push   ebx
c0012819:	6a 00                	push   0x0
c001281b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001281f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012823:	e8 1b f9 ff ff       	call   c0012143 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012828:	83 c4 50             	add    esp,0x50
c001282b:	5b                   	pop    ebx
c001282c:	5e                   	pop    esi
c001282d:	5f                   	pop    edi
c001282e:	c3                   	ret    

c001282f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001282f:	55                   	push   ebp
c0012830:	57                   	push   edi
c0012831:	56                   	push   esi
c0012832:	53                   	push   ebx
c0012833:	83 ec 40             	sub    esp,0x40
c0012836:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001283a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001283e:	6a 2b                	push   0x2b
c0012840:	6a 00                	push   0x0
c0012842:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012846:	56                   	push   esi
c0012847:	e8 a4 dc fe ff       	call   c00004f0 <memset>
c001284c:	5f                   	pop    edi
c001284d:	89 ef                	mov    edi,ebp
c001284f:	58                   	pop    eax
c0012850:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012854:	50                   	push   eax
c0012855:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012859:	e8 19 fd ff ff       	call   c0012577 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001285e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012863:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012868:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001286d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012872:	83 c4 10             	add    esp,0x10
c0012875:	85 ed                	test   ebp,ebp
c0012877:	74 14                	je     c001288d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012879:	51                   	push   ecx
c001287a:	51                   	push   ecx
c001287b:	57                   	push   edi
c001287c:	53                   	push   ebx
c001287d:	e8 09 f7 ff ff       	call   c0011f8b <CmGetNext(Reghive_Tag*, int)>
c0012882:	83 c4 10             	add    esp,0x10
c0012885:	85 c0                	test   eax,eax
c0012887:	74 04                	je     c001288d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012889:	89 c7                	mov    edi,eax
c001288b:	eb e8                	jmp    c0012875 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001288d:	56                   	push   esi
c001288e:	6a 00                	push   0x0
c0012890:	57                   	push   edi
c0012891:	53                   	push   ebx
c0012892:	e8 ac f8 ff ff       	call   c0012143 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012897:	83 c4 0c             	add    esp,0xc
c001289a:	89 c7                	mov    edi,eax
c001289c:	56                   	push   esi
c001289d:	50                   	push   eax
c001289e:	53                   	push   ebx
c001289f:	e8 f5 f5 ff ff       	call   c0011e99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128a4:	58                   	pop    eax
c00128a5:	5a                   	pop    edx
c00128a6:	6a 6c                	push   0x6c
c00128a8:	6a 00                	push   0x0
c00128aa:	6a 00                	push   0x0
c00128ac:	68 af 0e 02 c0       	push   0xc0020eaf
c00128b1:	57                   	push   edi
c00128b2:	53                   	push   ebx
c00128b3:	e8 24 ff ff ff       	call   c00127dc <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00128b8:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00128bc:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00128c0:	c1 e8 10             	shr    eax,0x10
c00128c3:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00128c7:	83 c4 1c             	add    esp,0x1c
c00128ca:	56                   	push   esi
c00128cb:	57                   	push   edi
c00128cc:	53                   	push   ebx
c00128cd:	e8 eb f6 ff ff       	call   c0011fbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00128d2:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00128d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00128dc:	c1 e0 08             	shl    eax,0x8
c00128df:	09 c2                	or     edx,eax
c00128e1:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00128e6:	83 c4 4c             	add    esp,0x4c
c00128e9:	c1 e0 10             	shl    eax,0x10
c00128ec:	5b                   	pop    ebx
c00128ed:	09 d0                	or     eax,edx
c00128ef:	5e                   	pop    esi
c00128f0:	5f                   	pop    edi
c00128f1:	5d                   	pop    ebp
c00128f2:	c3                   	ret    

c00128f3 <zStrtok(char*, char const*)>:
c00128f3:	55                   	push   ebp
c00128f4:	57                   	push   edi
c00128f5:	56                   	push   esi
c00128f6:	53                   	push   ebx
c00128f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00128ff:	85 db                	test   ebx,ebx
c0012901:	74 2f                	je     c0012932 <zStrtok(char*, char const*)+0x3f>
c0012903:	85 c0                	test   eax,eax
c0012905:	75 09                	jne    c0012910 <zStrtok(char*, char const*)+0x1d>
c0012907:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001290c:	85 c0                	test   eax,eax
c001290e:	74 50                	je     c0012960 <zStrtok(char*, char const*)+0x6d>
c0012910:	31 c9                	xor    ecx,ecx
c0012912:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012916:	74 03                	je     c001291b <zStrtok(char*, char const*)+0x28>
c0012918:	41                   	inc    ecx
c0012919:	eb f7                	jmp    c0012912 <zStrtok(char*, char const*)+0x1f>
c001291b:	31 d2                	xor    edx,edx
c001291d:	39 ca                	cmp    edx,ecx
c001291f:	74 15                	je     c0012936 <zStrtok(char*, char const*)+0x43>
c0012921:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012925:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012928:	8d 3c 10             	lea    edi,[eax+edx*1]
c001292b:	39 ee                	cmp    esi,ebp
c001292d:	74 13                	je     c0012942 <zStrtok(char*, char const*)+0x4f>
c001292f:	42                   	inc    edx
c0012930:	eb eb                	jmp    c001291d <zStrtok(char*, char const*)+0x2a>
c0012932:	31 c0                	xor    eax,eax
c0012934:	eb 2a                	jmp    c0012960 <zStrtok(char*, char const*)+0x6d>
c0012936:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012940:	eb 1e                	jmp    c0012960 <zStrtok(char*, char const*)+0x6d>
c0012942:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012945:	39 ce                	cmp    esi,ecx
c0012947:	75 0a                	jne    c0012953 <zStrtok(char*, char const*)+0x60>
c0012949:	40                   	inc    eax
c001294a:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c001294f:	89 d8                	mov    eax,ebx
c0012951:	eb 0d                	jmp    c0012960 <zStrtok(char*, char const*)+0x6d>
c0012953:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012957:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001295a:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012960:	5b                   	pop    ebx
c0012961:	5e                   	pop    esi
c0012962:	5f                   	pop    edi
c0012963:	5d                   	pop    ebp
c0012964:	c3                   	ret    

c0012965 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012965:	57                   	push   edi
c0012966:	56                   	push   esi
c0012967:	53                   	push   ebx
c0012968:	81 ec 08 01 00 00    	sub    esp,0x108
c001296e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012975:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001297c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012980:	53                   	push   ebx
c0012981:	e8 ba dc fe ff       	call   c0000640 <strcpy>
c0012986:	59                   	pop    ecx
c0012987:	5e                   	pop    esi
c0012988:	68 13 12 02 c0       	push   0xc0021213
c001298d:	53                   	push   ebx
c001298e:	bb 01 00 00 00       	mov    ebx,0x1
c0012993:	e8 5b ff ff ff       	call   c00128f3 <zStrtok(char*, char const*)>
c0012998:	83 c4 10             	add    esp,0x10
c001299b:	85 c0                	test   eax,eax
c001299d:	74 3b                	je     c00129da <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001299f:	52                   	push   edx
c00129a0:	50                   	push   eax
c00129a1:	6a 01                	push   0x1
c00129a3:	57                   	push   edi
c00129a4:	e8 b9 fd ff ff       	call   c0012762 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00129a9:	59                   	pop    ecx
c00129aa:	89 c3                	mov    ebx,eax
c00129ac:	5e                   	pop    esi
c00129ad:	68 13 12 02 c0       	push   0xc0021213
c00129b2:	6a 00                	push   0x0
c00129b4:	e8 3a ff ff ff       	call   c00128f3 <zStrtok(char*, char const*)>
c00129b9:	83 c4 10             	add    esp,0x10
c00129bc:	89 c6                	mov    esi,eax
c00129be:	85 c0                	test   eax,eax
c00129c0:	74 18                	je     c00129da <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129c2:	52                   	push   edx
c00129c3:	52                   	push   edx
c00129c4:	53                   	push   ebx
c00129c5:	57                   	push   edi
c00129c6:	e8 81 f5 ff ff       	call   c0011f4c <CmEnterDirectory(Reghive_Tag*, int)>
c00129cb:	83 c4 10             	add    esp,0x10
c00129ce:	89 c3                	mov    ebx,eax
c00129d0:	83 f8 ff             	cmp    eax,0xffffffff
c00129d3:	74 05                	je     c00129da <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129d5:	50                   	push   eax
c00129d6:	56                   	push   esi
c00129d7:	53                   	push   ebx
c00129d8:	eb c9                	jmp    c00129a3 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00129da:	81 c4 00 01 00 00    	add    esp,0x100
c00129e0:	89 d8                	mov    eax,ebx
c00129e2:	5b                   	pop    ebx
c00129e3:	5e                   	pop    esi
c00129e4:	5f                   	pop    edi
c00129e5:	c3                   	ret    

c00129e6 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00129e6:	55                   	push   ebp
c00129e7:	57                   	push   edi
c00129e8:	56                   	push   esi
c00129e9:	53                   	push   ebx
c00129ea:	83 ec 5c             	sub    esp,0x5c
c00129ed:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00129f1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00129f5:	85 db                	test   ebx,ebx
c00129f7:	0f 8e 84 00 00 00    	jle    c0012a81 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00129fd:	31 ed                	xor    ebp,ebp
c00129ff:	57                   	push   edi
c0012a00:	6a 32                	push   0x32
c0012a02:	6a 00                	push   0x0
c0012a04:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012a08:	57                   	push   edi
c0012a09:	e8 e2 da fe ff       	call   c00004f0 <memset>
c0012a0e:	83 c4 0c             	add    esp,0xc
c0012a11:	57                   	push   edi
c0012a12:	53                   	push   ebx
c0012a13:	56                   	push   esi
c0012a14:	e8 30 fb ff ff       	call   c0012549 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012a19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a1d:	83 c4 10             	add    esp,0x10
c0012a20:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012a24:	7d 13                	jge    c0012a39 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012a26:	83 ec 0c             	sub    esp,0xc
c0012a29:	45                   	inc    ebp
c0012a2a:	68 84 15 02 c0       	push   0xc0021584
c0012a2f:	e8 8e 7f ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0012a34:	83 c4 10             	add    esp,0x10
c0012a37:	eb e7                	jmp    c0012a20 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012a39:	51                   	push   ecx
c0012a3a:	57                   	push   edi
c0012a3b:	53                   	push   ebx
c0012a3c:	68 b5 0e 02 c0       	push   0xc0020eb5
c0012a41:	e8 7c 7f ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0012a46:	83 c4 10             	add    esp,0x10
c0012a49:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012a4e:	75 1e                	jne    c0012a6e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012a50:	52                   	push   edx
c0012a51:	52                   	push   edx
c0012a52:	53                   	push   ebx
c0012a53:	56                   	push   esi
c0012a54:	e8 f3 f4 ff ff       	call   c0011f4c <CmEnterDirectory(Reghive_Tag*, int)>
c0012a59:	83 c4 0c             	add    esp,0xc
c0012a5c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012a60:	8d 51 04             	lea    edx,[ecx+0x4]
c0012a63:	52                   	push   edx
c0012a64:	50                   	push   eax
c0012a65:	56                   	push   esi
c0012a66:	e8 7b ff ff ff       	call   c00129e6 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	50                   	push   eax
c0012a6f:	50                   	push   eax
c0012a70:	53                   	push   ebx
c0012a71:	56                   	push   esi
c0012a72:	e8 14 f5 ff ff       	call   c0011f8b <CmGetNext(Reghive_Tag*, int)>
c0012a77:	83 c4 10             	add    esp,0x10
c0012a7a:	89 c3                	mov    ebx,eax
c0012a7c:	e9 74 ff ff ff       	jmp    c00129f5 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012a81:	83 c4 5c             	add    esp,0x5c
c0012a84:	5b                   	pop    ebx
c0012a85:	5e                   	pop    esi
c0012a86:	5f                   	pop    edi
c0012a87:	5d                   	pop    ebp
c0012a88:	c3                   	ret    

c0012a89 <CmSplitFinalSlashInPlace(char*)>:
c0012a89:	53                   	push   ebx
c0012a8a:	83 ec 14             	sub    esp,0x14
c0012a8d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012a91:	53                   	push   ebx
c0012a92:	e8 d9 da fe ff       	call   c0000570 <strlen>
c0012a97:	83 c4 10             	add    esp,0x10
c0012a9a:	48                   	dec    eax
c0012a9b:	85 c0                	test   eax,eax
c0012a9d:	74 15                	je     c0012ab4 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012a9f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012aa2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012aa6:	75 09                	jne    c0012ab1 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012aa8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012aab:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012aaf:	eb 05                	jmp    c0012ab6 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012ab1:	48                   	dec    eax
c0012ab2:	eb e7                	jmp    c0012a9b <CmSplitFinalSlashInPlace(char*)+0x12>
c0012ab4:	31 c0                	xor    eax,eax
c0012ab6:	83 c4 08             	add    esp,0x8
c0012ab9:	5b                   	pop    ebx
c0012aba:	c3                   	ret    

c0012abb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012abb:	55                   	push   ebp
c0012abc:	57                   	push   edi
c0012abd:	56                   	push   esi
c0012abe:	53                   	push   ebx
c0012abf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012ac5:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012acc:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012ace:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ad1:	80 fa 40             	cmp    dl,0x40
c0012ad4:	75 1c                	jne    c0012af2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0012ad6:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0012ad9:	85 c9                	test   ecx,ecx
c0012adb:	0f 84 09 01 00 00    	je     c0012bea <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012ae1:	8d 43 01             	lea    eax,[ebx+0x1]
c0012ae4:	83 f9 3a             	cmp    ecx,0x3a
c0012ae7:	74 04                	je     c0012aed <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0012ae9:	89 c3                	mov    ebx,eax
c0012aeb:	eb e9                	jmp    c0012ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012aed:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012af0:	89 c3                	mov    ebx,eax
c0012af2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012af6:	50                   	push   eax
c0012af7:	6a 40                	push   0x40
c0012af9:	6a 00                	push   0x0
c0012afb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012aff:	50                   	push   eax
c0012b00:	e8 eb d9 fe ff       	call   c00004f0 <memset>
c0012b05:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012b0c:	31 c0                	xor    eax,eax
c0012b0e:	83 c4 10             	add    esp,0x10
c0012b11:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012b16:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012b19:	89 d1                	mov    ecx,edx
c0012b1b:	85 d2                	test   edx,edx
c0012b1d:	0f 84 c7 00 00 00    	je     c0012bea <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b23:	3d c7 00 00 00       	cmp    eax,0xc7
c0012b28:	0f 8f bc 00 00 00    	jg     c0012bea <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b2e:	83 fa 0a             	cmp    edx,0xa
c0012b31:	0f 85 a4 00 00 00    	jne    c0012bdb <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0012b37:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012b3c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012b41:	89 c8                	mov    eax,ecx
c0012b43:	a8 df                	test   al,0xdf
c0012b45:	0f 94 c2             	sete   dl
c0012b48:	83 f9 23             	cmp    ecx,0x23
c0012b4b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b50:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0012b54:	80 e2 01             	and    dl,0x1
c0012b57:	75 4a                	jne    c0012ba3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b59:	83 e8 09             	sub    eax,0x9
c0012b5c:	3c 01                	cmp    al,0x1
c0012b5e:	76 43                	jbe    c0012ba3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b60:	83 f9 5b             	cmp    ecx,0x5b
c0012b63:	75 42                	jne    c0012ba7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012b65:	83 fe 40             	cmp    esi,0x40
c0012b68:	75 39                	jne    c0012ba3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b6a:	83 ec 0c             	sub    esp,0xc
c0012b6d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012b71:	52                   	push   edx
c0012b72:	e8 f9 d9 fe ff       	call   c0000570 <strlen>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	83 f8 3f             	cmp    eax,0x3f
c0012b7d:	77 6b                	ja     c0012bea <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b7f:	50                   	push   eax
c0012b80:	50                   	push   eax
c0012b81:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012b85:	52                   	push   edx
c0012b86:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012b8a:	52                   	push   edx
c0012b8b:	e8 b0 da fe ff       	call   c0000640 <strcpy>
c0012b90:	58                   	pop    eax
c0012b91:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012b95:	52                   	push   edx
c0012b96:	e8 d5 d9 fe ff       	call   c0000570 <strlen>
c0012b9b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012ba0:	83 c4 10             	add    esp,0x10
c0012ba3:	31 d2                	xor    edx,edx
c0012ba5:	eb 3b                	jmp    c0012be2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0012ba7:	83 fe 40             	cmp    esi,0x40
c0012baa:	74 06                	je     c0012bb2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0012bac:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012bb0:	eb 20                	jmp    c0012bd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012bb2:	50                   	push   eax
c0012bb3:	50                   	push   eax
c0012bb4:	55                   	push   ebp
c0012bb5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012bb9:	50                   	push   eax
c0012bba:	e8 91 db fe ff       	call   c0000750 <strcmp>
c0012bbf:	83 c4 10             	add    esp,0x10
c0012bc2:	85 c0                	test   eax,eax
c0012bc4:	75 dd                	jne    c0012ba3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012bc6:	eb e4                	jmp    c0012bac <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012bc8:	8d 50 01             	lea    edx,[eax+0x1]
c0012bcb:	83 f9 3d             	cmp    ecx,0x3d
c0012bce:	74 1e                	je     c0012bee <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0012bd0:	89 d0                	mov    eax,edx
c0012bd2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012bd5:	85 c9                	test   ecx,ecx
c0012bd7:	75 ef                	jne    c0012bc8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0012bd9:	eb 0f                	jmp    c0012bea <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012bdb:	8d 50 01             	lea    edx,[eax+0x1]
c0012bde:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012be2:	47                   	inc    edi
c0012be3:	89 d0                	mov    eax,edx
c0012be5:	e9 2c ff ff ff       	jmp    c0012b16 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0012bea:	31 c0                	xor    eax,eax
c0012bec:	eb 33                	jmp    c0012c21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0012bee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012bf5:	50                   	push   eax
c0012bf6:	50                   	push   eax
c0012bf7:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012bfb:	50                   	push   eax
c0012bfc:	53                   	push   ebx
c0012bfd:	e8 4e db fe ff       	call   c0000750 <strcmp>
c0012c02:	83 c4 10             	add    esp,0x10
c0012c05:	85 c0                	test   eax,eax
c0012c07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c0b:	75 96                	jne    c0012ba3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012c0d:	51                   	push   ecx
c0012c0e:	51                   	push   ecx
c0012c0f:	52                   	push   edx
c0012c10:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012c17:	e8 24 da fe ff       	call   c0000640 <strcpy>
c0012c1c:	83 c4 10             	add    esp,0x10
c0012c1f:	b0 01                	mov    al,0x1
c0012c21:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012c27:	5b                   	pop    ebx
c0012c28:	5e                   	pop    esi
c0012c29:	5f                   	pop    edi
c0012c2a:	5d                   	pop    ebp
c0012c2b:	c3                   	ret    

c0012c2c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012c2c:	57                   	push   edi
c0012c2d:	56                   	push   esi
c0012c2e:	53                   	push   ebx
c0012c2f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012c35:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012c3c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012c43:	53                   	push   ebx
c0012c44:	e8 27 d9 fe ff       	call   c0000570 <strlen>
c0012c49:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c4c:	89 c7                	mov    edi,eax
c0012c4e:	e8 1d d9 fe ff       	call   c0000570 <strlen>
c0012c53:	83 c4 10             	add    esp,0x10
c0012c56:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012c5a:	3d ff 00 00 00       	cmp    eax,0xff
c0012c5f:	0f 87 d3 00 00 00    	ja     c0012d38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c65:	57                   	push   edi
c0012c66:	57                   	push   edi
c0012c67:	56                   	push   esi
c0012c68:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012c6c:	56                   	push   esi
c0012c6d:	e8 ce d9 fe ff       	call   c0000640 <strcpy>
c0012c72:	58                   	pop    eax
c0012c73:	5a                   	pop    edx
c0012c74:	68 13 12 02 c0       	push   0xc0021213
c0012c79:	56                   	push   esi
c0012c7a:	e8 c1 db fe ff       	call   c0000840 <strcat>
c0012c7f:	59                   	pop    ecx
c0012c80:	5f                   	pop    edi
c0012c81:	53                   	push   ebx
c0012c82:	56                   	push   esi
c0012c83:	e8 b8 db fe ff       	call   c0000840 <strcat>
c0012c88:	58                   	pop    eax
c0012c89:	5a                   	pop    edx
c0012c8a:	68 bf 0e 02 c0       	push   0xc0020ebf
c0012c8f:	56                   	push   esi
c0012c90:	e8 ab db fe ff       	call   c0000840 <strcat>
c0012c95:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c9c:	e8 0d 4e ff ff       	call   c0007aae <malloc>
c0012ca1:	83 c4 0c             	add    esp,0xc
c0012ca4:	89 c3                	mov    ebx,eax
c0012ca6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012cac:	56                   	push   esi
c0012cad:	50                   	push   eax
c0012cae:	e8 91 82 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c0012cb3:	83 c4 10             	add    esp,0x10
c0012cb6:	85 db                	test   ebx,ebx
c0012cb8:	74 7e                	je     c0012d38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012cba:	51                   	push   ecx
c0012cbb:	51                   	push   ecx
c0012cbc:	6a 01                	push   0x1
c0012cbe:	53                   	push   ebx
c0012cbf:	e8 3c 83 ff ff       	call   c000b000 <File::open(FileOpenMode)>
c0012cc4:	83 c4 10             	add    esp,0x10
c0012cc7:	85 c0                	test   eax,eax
c0012cc9:	74 08                	je     c0012cd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012ccb:	83 ec 0c             	sub    esp,0xc
c0012cce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cd0:	53                   	push   ebx
c0012cd1:	eb 5f                	jmp    c0012d32 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012cd3:	52                   	push   edx
c0012cd4:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012cd8:	50                   	push   eax
c0012cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012cdd:	50                   	push   eax
c0012cde:	53                   	push   ebx
c0012cdf:	e8 c8 85 ff ff       	call   c000b2ac <File::stat(unsigned long long*, bool*)>
c0012ce4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ce8:	83 c4 10             	add    esp,0x10
c0012ceb:	89 c1                	mov    ecx,eax
c0012ced:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012cf1:	74 31                	je     c0012d24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012cf3:	83 ec 0c             	sub    esp,0xc
c0012cf6:	50                   	push   eax
c0012cf7:	e8 b2 4d ff ff       	call   c0007aae <malloc>
c0012cfc:	89 c6                	mov    esi,eax
c0012cfe:	58                   	pop    eax
c0012cff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d01:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012d05:	52                   	push   edx
c0012d06:	56                   	push   esi
c0012d07:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d0b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d0f:	53                   	push   ebx
c0012d10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012d13:	83 c4 20             	add    esp,0x20
c0012d16:	85 c0                	test   eax,eax
c0012d18:	75 0a                	jne    c0012d24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012d1e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012d22:	74 18                	je     c0012d3c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012d24:	83 ec 0c             	sub    esp,0xc
c0012d27:	53                   	push   ebx
c0012d28:	e8 31 83 ff ff       	call   c000b05e <File::close()>
c0012d2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d35:	83 c4 10             	add    esp,0x10
c0012d38:	31 c0                	xor    eax,eax
c0012d3a:	eb 3b                	jmp    c0012d77 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	53                   	push   ebx
c0012d40:	e8 19 83 ff ff       	call   c000b05e <File::close()>
c0012d45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d4d:	83 c4 0c             	add    esp,0xc
c0012d50:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d57:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d5e:	56                   	push   esi
c0012d5f:	e8 57 fd ff ff       	call   c0012abb <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012d64:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d67:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012d6b:	e8 4e 4d ff ff       	call   c0007abe <free>
c0012d70:	83 c4 10             	add    esp,0x10
c0012d73:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012d77:	81 c4 20 01 00 00    	add    esp,0x120
c0012d7d:	5b                   	pop    ebx
c0012d7e:	5e                   	pop    esi
c0012d7f:	5f                   	pop    edi
c0012d80:	c3                   	ret    

c0012d81 <Reg::getLine(char*, char*, char*)>:
c0012d81:	57                   	push   edi
c0012d82:	56                   	push   esi
c0012d83:	53                   	push   ebx
c0012d84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d8c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012d90:	57                   	push   edi
c0012d91:	56                   	push   esi
c0012d92:	53                   	push   ebx
c0012d93:	68 c4 0e 02 c0       	push   0xc0020ec4
c0012d98:	e8 8f fe ff ff       	call   c0012c2c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d9d:	83 c4 10             	add    esp,0x10
c0012da0:	84 c0                	test   al,al
c0012da2:	75 10                	jne    c0012db4 <Reg::getLine(char*, char*, char*)+0x33>
c0012da4:	57                   	push   edi
c0012da5:	56                   	push   esi
c0012da6:	53                   	push   ebx
c0012da7:	68 e9 0e 02 c0       	push   0xc0020ee9
c0012dac:	e8 7b fe ff ff       	call   c0012c2c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012db1:	83 c4 10             	add    esp,0x10
c0012db4:	5b                   	pop    ebx
c0012db5:	5e                   	pop    esi
c0012db6:	5f                   	pop    edi
c0012db7:	c3                   	ret    

c0012db8 <Reg::readInt(char*, char*, int*)>:
c0012db8:	55                   	push   ebp
c0012db9:	57                   	push   edi
c0012dba:	56                   	push   esi
c0012dbb:	53                   	push   ebx
c0012dbc:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012dc2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012dc6:	55                   	push   ebp
c0012dc7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012dce:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012dd5:	e8 a7 ff ff ff       	call   c0012d81 <Reg::getLine(char*, char*, char*)>
c0012dda:	83 c4 10             	add    esp,0x10
c0012ddd:	84 c0                	test   al,al
c0012ddf:	0f 84 b6 00 00 00    	je     c0012e9b <Reg::readInt(char*, char*, int*)+0xe3>
c0012de5:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012dea:	83 fa 2b             	cmp    edx,0x2b
c0012ded:	74 0c                	je     c0012dfb <Reg::readInt(char*, char*, int*)+0x43>
c0012def:	83 fa 2d             	cmp    edx,0x2d
c0012df2:	75 0e                	jne    c0012e02 <Reg::readInt(char*, char*, int*)+0x4a>
c0012df4:	ba 01 00 00 00       	mov    edx,0x1
c0012df9:	eb 0b                	jmp    c0012e06 <Reg::readInt(char*, char*, int*)+0x4e>
c0012dfb:	ba 01 00 00 00       	mov    edx,0x1
c0012e00:	eb 02                	jmp    c0012e04 <Reg::readInt(char*, char*, int*)+0x4c>
c0012e02:	31 d2                	xor    edx,edx
c0012e04:	31 c0                	xor    eax,eax
c0012e06:	be 0a 00 00 00       	mov    esi,0xa
c0012e0b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012e10:	75 21                	jne    c0012e33 <Reg::readInt(char*, char*, int*)+0x7b>
c0012e12:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012e17:	83 f9 78             	cmp    ecx,0x78
c0012e1a:	75 0a                	jne    c0012e26 <Reg::readInt(char*, char*, int*)+0x6e>
c0012e1c:	83 c2 02             	add    edx,0x2
c0012e1f:	be 10 00 00 00       	mov    esi,0x10
c0012e24:	eb 0d                	jmp    c0012e33 <Reg::readInt(char*, char*, int*)+0x7b>
c0012e26:	83 f9 62             	cmp    ecx,0x62
c0012e29:	75 08                	jne    c0012e33 <Reg::readInt(char*, char*, int*)+0x7b>
c0012e2b:	83 c2 02             	add    edx,0x2
c0012e2e:	be 02 00 00 00       	mov    esi,0x2
c0012e33:	01 d5                	add    ebp,edx
c0012e35:	31 d2                	xor    edx,edx
c0012e37:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012e3b:	83 f9 0d             	cmp    ecx,0xd
c0012e3e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012e42:	0f 94 c3             	sete   bl
c0012e45:	85 c9                	test   ecx,ecx
c0012e47:	89 df                	mov    edi,ebx
c0012e49:	0f 94 c3             	sete   bl
c0012e4c:	09 df                	or     edi,ebx
c0012e4e:	89 fb                	mov    ebx,edi
c0012e50:	83 e7 01             	and    edi,0x1
c0012e53:	75 35                	jne    c0012e8a <Reg::readInt(char*, char*, int*)+0xd2>
c0012e55:	0f af d6             	imul   edx,esi
c0012e58:	83 fe 10             	cmp    esi,0x10
c0012e5b:	75 26                	jne    c0012e83 <Reg::readInt(char*, char*, int*)+0xcb>
c0012e5d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012e61:	83 ef 41             	sub    edi,0x41
c0012e64:	89 fb                	mov    ebx,edi
c0012e66:	80 fb 05             	cmp    bl,0x5
c0012e69:	77 06                	ja     c0012e71 <Reg::readInt(char*, char*, int*)+0xb9>
c0012e6b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012e6f:	eb 16                	jmp    c0012e87 <Reg::readInt(char*, char*, int*)+0xcf>
c0012e71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012e75:	83 eb 61             	sub    ebx,0x61
c0012e78:	80 fb 05             	cmp    bl,0x5
c0012e7b:	77 06                	ja     c0012e83 <Reg::readInt(char*, char*, int*)+0xcb>
c0012e7d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012e81:	eb 04                	jmp    c0012e87 <Reg::readInt(char*, char*, int*)+0xcf>
c0012e83:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012e87:	45                   	inc    ebp
c0012e88:	eb ad                	jmp    c0012e37 <Reg::readInt(char*, char*, int*)+0x7f>
c0012e8a:	84 c0                	test   al,al
c0012e8c:	74 02                	je     c0012e90 <Reg::readInt(char*, char*, int*)+0xd8>
c0012e8e:	f7 da                	neg    edx
c0012e90:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012e97:	89 10                	mov    DWORD PTR [eax],edx
c0012e99:	88 d8                	mov    al,bl
c0012e9b:	81 c4 ec 00 00 00    	add    esp,0xec
c0012ea1:	5b                   	pop    ebx
c0012ea2:	5e                   	pop    esi
c0012ea3:	5f                   	pop    edi
c0012ea4:	5d                   	pop    ebp
c0012ea5:	c3                   	ret    

c0012ea6 <Reg::readString(char*, char*, char*, int)>:
c0012ea6:	57                   	push   edi
c0012ea7:	56                   	push   esi
c0012ea8:	53                   	push   ebx
c0012ea9:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012eaf:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012eb6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012eba:	57                   	push   edi
c0012ebb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012ec2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012ec9:	e8 b3 fe ff ff       	call   c0012d81 <Reg::getLine(char*, char*, char*)>
c0012ece:	83 c4 10             	add    esp,0x10
c0012ed1:	89 c6                	mov    esi,eax
c0012ed3:	84 c0                	test   al,al
c0012ed5:	74 44                	je     c0012f1b <Reg::readString(char*, char*, char*, int)+0x75>
c0012ed7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012ede:	31 c0                	xor    eax,eax
c0012ee0:	4a                   	dec    edx
c0012ee1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012ee4:	84 c9                	test   cl,cl
c0012ee6:	74 0f                	je     c0012ef7 <Reg::readString(char*, char*, char*, int)+0x51>
c0012ee8:	39 c2                	cmp    edx,eax
c0012eea:	7e 0b                	jle    c0012ef7 <Reg::readString(char*, char*, char*, int)+0x51>
c0012eec:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012eef:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012ef4:	40                   	inc    eax
c0012ef5:	eb ea                	jmp    c0012ee1 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012ef7:	83 ec 0c             	sub    esp,0xc
c0012efa:	53                   	push   ebx
c0012efb:	e8 70 d6 fe ff       	call   c0000570 <strlen>
c0012f00:	83 c4 10             	add    esp,0x10
c0012f03:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012f08:	75 11                	jne    c0012f1b <Reg::readString(char*, char*, char*, int)+0x75>
c0012f0a:	83 ec 0c             	sub    esp,0xc
c0012f0d:	53                   	push   ebx
c0012f0e:	e8 5d d6 fe ff       	call   c0000570 <strlen>
c0012f13:	83 c4 10             	add    esp,0x10
c0012f16:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012f1b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012f21:	89 f0                	mov    eax,esi
c0012f23:	5b                   	pop    ebx
c0012f24:	5e                   	pop    esi
c0012f25:	5f                   	pop    edi
c0012f26:	c3                   	ret    

c0012f27 <Reg::readBool(char*, char*, bool*)>:
c0012f27:	83 ec 20             	sub    esp,0x20
c0012f2a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f2e:	50                   	push   eax
c0012f2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f37:	e8 7c fe ff ff       	call   c0012db8 <Reg::readInt(char*, char*, int*)>
c0012f3c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f41:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012f45:	0f 95 02             	setne  BYTE PTR [edx]
c0012f48:	83 c4 2c             	add    esp,0x2c
c0012f4b:	c3                   	ret    

c0012f4c <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012f4c:	53                   	push   ebx
c0012f4d:	83 ec 1c             	sub    esp,0x1c
c0012f50:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012f54:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012f58:	50                   	push   eax
c0012f59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f61:	e8 c1 ff ff ff       	call   c0012f27 <Reg::readBool(char*, char*, bool*)>
c0012f66:	83 c4 10             	add    esp,0x10
c0012f69:	84 c0                	test   al,al
c0012f6b:	74 04                	je     c0012f71 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012f6d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012f71:	88 d8                	mov    al,bl
c0012f73:	83 c4 18             	add    esp,0x18
c0012f76:	5b                   	pop    ebx
c0012f77:	c3                   	ret    

c0012f78 <Reg::readIntWithDefault(char*, char*, int)>:
c0012f78:	53                   	push   ebx
c0012f79:	83 ec 1c             	sub    esp,0x1c
c0012f7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012f80:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f84:	50                   	push   eax
c0012f85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f8d:	e8 26 fe ff ff       	call   c0012db8 <Reg::readInt(char*, char*, int*)>
c0012f92:	83 c4 10             	add    esp,0x10
c0012f95:	84 c0                	test   al,al
c0012f97:	74 04                	je     c0012f9d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012f99:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f9d:	89 d8                	mov    eax,ebx
c0012f9f:	83 c4 18             	add    esp,0x18
c0012fa2:	5b                   	pop    ebx
c0012fa3:	c3                   	ret    

c0012fa4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012fa4:	57                   	push   edi
c0012fa5:	56                   	push   esi
c0012fa6:	56                   	push   esi
c0012fa7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012fab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012faf:	56                   	push   esi
c0012fb0:	57                   	push   edi
c0012fb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb9:	e8 e8 fe ff ff       	call   c0012ea6 <Reg::readString(char*, char*, char*, int)>
c0012fbe:	83 c4 10             	add    esp,0x10
c0012fc1:	84 c0                	test   al,al
c0012fc3:	75 1a                	jne    c0012fdf <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012fc5:	51                   	push   ecx
c0012fc6:	56                   	push   esi
c0012fc7:	6a 00                	push   0x0
c0012fc9:	57                   	push   edi
c0012fca:	e8 21 d5 fe ff       	call   c00004f0 <memset>
c0012fcf:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012fd2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012fd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fd8:	83 c4 10             	add    esp,0x10
c0012fdb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012fdf:	89 f8                	mov    eax,edi
c0012fe1:	5a                   	pop    edx
c0012fe2:	5e                   	pop    esi
c0012fe3:	5f                   	pop    edi
c0012fe4:	c3                   	ret    

c0012fe5 <SysEject(regs*)>:
c0012fe5:	83 ec 0c             	sub    esp,0xc
c0012fe8:	83 ca ff             	or     edx,0xffffffff
c0012feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fef:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012ff2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012ff7:	83 e9 41             	sub    ecx,0x41
c0012ffa:	83 f9 19             	cmp    ecx,0x19
c0012ffd:	77 18                	ja     c0013017 <SysEject(regs*)+0x32>
c0012fff:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0013006:	85 c9                	test   ecx,ecx
c0013008:	74 0d                	je     c0013017 <SysEject(regs*)+0x32>
c001300a:	83 ec 0c             	sub    esp,0xc
c001300d:	51                   	push   ecx
c001300e:	e8 5b a1 ff ff       	call   c000d16e <LogicalDisk::eject()>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	99                   	cdq    
c0013017:	83 c4 0c             	add    esp,0xc
c001301a:	c3                   	ret    

c001301b <SysExit(regs*)>:
c001301b:	83 ec 18             	sub    esp,0x18
c001301e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013022:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013025:	e8 1a 2a 00 00       	call   c0015a44 <terminateTask(int)>
c001302a:	83 c8 ff             	or     eax,0xffffffff
c001302d:	83 c4 1c             	add    esp,0x1c
c0013030:	89 c2                	mov    edx,eax
c0013032:	c3                   	ret    

c0013033 <SysGetCwd(regs*)>:
c0013033:	83 ec 10             	sub    esp,0x10
c0013036:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001303a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001303d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013040:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013045:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013048:	e8 ed 7c ff ff       	call   c000ad3a <Fs::getcwd(Process*, char*, int)>
c001304d:	83 c4 1c             	add    esp,0x1c
c0013050:	99                   	cdq    
c0013051:	c3                   	ret    

c0013052 <SysGetPID(regs*)>:
c0013052:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013057:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001305a:	8b 00                	mov    eax,DWORD PTR [eax]
c001305c:	99                   	cdq    
c001305d:	c3                   	ret    

c001305e <SysGetRAMData(regs*)>:
c001305e:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0013064:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c001306e:	99                   	cdq    
c001306f:	f7 f9                	idiv   ecx
c0013071:	c1 e0 18             	shl    eax,0x18
c0013074:	09 c8                	or     eax,ecx
c0013076:	99                   	cdq    
c0013077:	c3                   	ret    

c0013078 <SysGetVGAPtr(regs*)>:
c0013078:	55                   	push   ebp
c0013079:	57                   	push   edi
c001307a:	56                   	push   esi
c001307b:	53                   	push   ebx
c001307c:	83 ec 18             	sub    esp,0x18
c001307f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013083:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013086:	e8 85 24 00 00       	call   c0015510 <Thr::processFromPID(int)>
c001308b:	83 c4 10             	add    esp,0x10
c001308e:	89 c1                	mov    ecx,eax
c0013090:	b8 01 00 00 00       	mov    eax,0x1
c0013095:	85 c9                	test   ecx,ecx
c0013097:	74 57                	je     c00130f0 <SysGetVGAPtr(regs*)+0x78>
c0013099:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001309f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00130a3:	74 0c                	je     c00130b1 <SysGetVGAPtr(regs*)+0x39>
c00130a5:	83 ec 0c             	sub    esp,0xc
c00130a8:	55                   	push   ebp
c00130a9:	e8 95 56 ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c00130ae:	83 c4 10             	add    esp,0x10
c00130b1:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00130b4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00130b7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00130bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130be:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00130c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130c4:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00130ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130cd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00130d0:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00130d6:	50                   	push   eax
c00130d7:	50                   	push   eax
c00130d8:	68 04 0f 02 c0       	push   0xc0020f04
c00130dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130e0:	05 a8 0f 00 00       	add    eax,0xfa8
c00130e5:	50                   	push   eax
c00130e6:	e8 55 d5 fe ff       	call   c0000640 <strcpy>
c00130eb:	83 c4 10             	add    esp,0x10
c00130ee:	31 c0                	xor    eax,eax
c00130f0:	83 c4 0c             	add    esp,0xc
c00130f3:	31 d2                	xor    edx,edx
c00130f5:	5b                   	pop    ebx
c00130f6:	5e                   	pop    esi
c00130f7:	5f                   	pop    edi
c00130f8:	5d                   	pop    ebp
c00130f9:	c3                   	ret    
c00130fa:	66 90                	xchg   ax,ax

c00130fc <SysKill(regs*)>:
c00130fc:	53                   	push   ebx
c00130fd:	83 ec 08             	sub    esp,0x8
c0013100:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013104:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013108:	75 16                	jne    c0013120 <SysKill(regs*)+0x24>
c001310a:	83 ec 0c             	sub    esp,0xc
c001310d:	68 0e 0f 02 c0       	push   0xc0020f0e
c0013112:	e8 d8 d7 ff ff       	call   c00108ef <KePanic(char const*)>
c0013117:	83 c4 10             	add    esp,0x10
c001311a:	e9 89 00 00 00       	jmp    c00131a8 <SysKill(regs*)+0xac>
c001311f:	90                   	nop
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	68 84 81 02 c0       	push   0xc0028184
c0013128:	e8 ff ba 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001312d:	8d 76 00             	lea    esi,[esi+0x0]
c0013130:	83 c4 10             	add    esp,0x10
c0013133:	85 c0                	test   eax,eax
c0013135:	74 19                	je     c0013150 <SysKill(regs*)+0x54>
c0013137:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001313a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001313d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001313f:	74 33                	je     c0013174 <SysKill(regs*)+0x78>
c0013141:	52                   	push   edx
c0013142:	52                   	push   edx
c0013143:	50                   	push   eax
c0013144:	68 84 81 02 c0       	push   0xc0028184
c0013149:	e8 fe bd 00 00       	call   c001ef4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001314e:	eb e0                	jmp    c0013130 <SysKill(regs*)+0x34>
c0013150:	83 ec 0c             	sub    esp,0xc
c0013153:	68 78 81 02 c0       	push   0xc0028178
c0013158:	e8 cf ba 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001315d:	8d 76 00             	lea    esi,[esi+0x0]
c0013160:	83 c4 10             	add    esp,0x10
c0013163:	85 c0                	test   eax,eax
c0013165:	74 41                	je     c00131a8 <SysKill(regs*)+0xac>
c0013167:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001316a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001316d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001316f:	75 27                	jne    c0013198 <SysKill(regs*)+0x9c>
c0013171:	8d 76 00             	lea    esi,[esi+0x0]
c0013174:	51                   	push   ecx
c0013175:	51                   	push   ecx
c0013176:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001317e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013181:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013187:	e8 ff db ff ff       	call   c0010d8b <KeRaiseSignal(SigHandlerBlock*, int)>
c001318c:	83 c4 10             	add    esp,0x10
c001318f:	31 c0                	xor    eax,eax
c0013191:	31 d2                	xor    edx,edx
c0013193:	eb 1b                	jmp    c00131b0 <SysKill(regs*)+0xb4>
c0013195:	8d 76 00             	lea    esi,[esi+0x0]
c0013198:	52                   	push   edx
c0013199:	52                   	push   edx
c001319a:	50                   	push   eax
c001319b:	68 78 81 02 c0       	push   0xc0028178
c00131a0:	e8 a7 bd 00 00       	call   c001ef4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00131a5:	eb b9                	jmp    c0013160 <SysKill(regs*)+0x64>
c00131a7:	90                   	nop
c00131a8:	83 c8 ff             	or     eax,0xffffffff
c00131ab:	89 c2                	mov    edx,eax
c00131ad:	8d 76 00             	lea    esi,[esi+0x0]
c00131b0:	83 c4 08             	add    esp,0x8
c00131b3:	5b                   	pop    ebx
c00131b4:	c3                   	ret    

c00131b5 <SysLoadDLL(regs*)>:
c00131b5:	56                   	push   esi
c00131b6:	53                   	push   ebx
c00131b7:	31 d2                	xor    edx,edx
c00131b9:	51                   	push   ecx
c00131ba:	b8 01 00 00 00       	mov    eax,0x1
c00131bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131c3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00131c7:	0f 84 8c 00 00 00    	je     c0013259 <SysLoadDLL(regs*)+0xa4>
c00131cd:	83 ec 0c             	sub    esp,0xc
c00131d0:	68 14 01 00 00       	push   0x114
c00131d5:	e8 d4 48 ff ff       	call   c0007aae <malloc>
c00131da:	83 c4 0c             	add    esp,0xc
c00131dd:	89 c3                	mov    ebx,eax
c00131df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131e4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00131e7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00131ea:	53                   	push   ebx
c00131eb:	e8 54 7d ff ff       	call   c000af44 <File::File(char const*, Process*)>
c00131f0:	83 c4 10             	add    esp,0x10
c00131f3:	31 d2                	xor    edx,edx
c00131f5:	b8 02 00 00 00       	mov    eax,0x2
c00131fa:	85 db                	test   ebx,ebx
c00131fc:	74 5b                	je     c0013259 <SysLoadDLL(regs*)+0xa4>
c00131fe:	83 ec 0c             	sub    esp,0xc
c0013201:	53                   	push   ebx
c0013202:	e8 67 80 ff ff       	call   c000b26e <File::exists()>
c0013207:	83 c4 10             	add    esp,0x10
c001320a:	84 c0                	test   al,al
c001320c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001320e:	75 11                	jne    c0013221 <SysLoadDLL(regs*)+0x6c>
c0013210:	83 ec 0c             	sub    esp,0xc
c0013213:	53                   	push   ebx
c0013214:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013217:	83 c4 10             	add    esp,0x10
c001321a:	b8 03 00 00 00       	mov    eax,0x3
c001321f:	eb 36                	jmp    c0013257 <SysLoadDLL(regs*)+0xa2>
c0013221:	83 ec 0c             	sub    esp,0xc
c0013224:	53                   	push   ebx
c0013225:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013228:	58                   	pop    eax
c0013229:	5a                   	pop    edx
c001322a:	6a 00                	push   0x0
c001322c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001322f:	e8 12 14 00 00       	call   c0014646 <Thr::loadDLL(char const*, bool)>
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	89 c1                	mov    ecx,eax
c0013239:	31 d2                	xor    edx,edx
c001323b:	b8 04 00 00 00       	mov    eax,0x4
c0013240:	85 c9                	test   ecx,ecx
c0013242:	74 15                	je     c0013259 <SysLoadDLL(regs*)+0xa4>
c0013244:	53                   	push   ebx
c0013245:	53                   	push   ebx
c0013246:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001324c:	51                   	push   ecx
c001324d:	e8 25 16 00 00       	call   c0014877 <Thr::executeDLL(unsigned long, void*)>
c0013252:	83 c4 10             	add    esp,0x10
c0013255:	31 c0                	xor    eax,eax
c0013257:	31 d2                	xor    edx,edx
c0013259:	59                   	pop    ecx
c001325a:	5b                   	pop    ebx
c001325b:	5e                   	pop    esi
c001325c:	c3                   	ret    

c001325d <SysRead(regs*)>:
c001325d:	57                   	push   edi
c001325e:	56                   	push   esi
c001325f:	53                   	push   ebx
c0013260:	83 ec 10             	sub    esp,0x10
c0013263:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013267:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001326a:	83 f8 02             	cmp    eax,0x2
c001326d:	77 10                	ja     c001327f <SysRead(regs*)+0x22>
c001326f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013274:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013277:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001327d:	eb 0e                	jmp    c001328d <SysRead(regs*)+0x30>
c001327f:	83 ec 0c             	sub    esp,0xc
c0013282:	50                   	push   eax
c0013283:	e8 3b 62 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0013288:	83 c4 10             	add    esp,0x10
c001328b:	89 c1                	mov    ecx,eax
c001328d:	83 c8 ff             	or     eax,0xffffffff
c0013290:	85 c9                	test   ecx,ecx
c0013292:	89 c2                	mov    edx,eax
c0013294:	74 28                	je     c00132be <SysRead(regs*)+0x61>
c0013296:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001329e:	31 ff                	xor    edi,edi
c00132a0:	83 ec 0c             	sub    esp,0xc
c00132a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132a5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132a9:	52                   	push   edx
c00132aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132ad:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00132b0:	57                   	push   edi
c00132b1:	56                   	push   esi
c00132b2:	51                   	push   ecx
c00132b3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00132ba:	83 c4 20             	add    esp,0x20
c00132bd:	99                   	cdq    
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	5b                   	pop    ebx
c00132c2:	5e                   	pop    esi
c00132c3:	5f                   	pop    edi
c00132c4:	c3                   	ret    

c00132c5 <SysRegisterSignal(regs*)>:
c00132c5:	83 ec 18             	sub    esp,0x18
c00132c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132cc:	6a 00                	push   0x0
c00132ce:	6a 00                	push   0x0
c00132d0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00132d3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132de:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00132e4:	e8 6c da ff ff       	call   c0010d55 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00132e9:	83 c4 2c             	add    esp,0x2c
c00132ec:	99                   	cdq    
c00132ed:	c3                   	ret    

c00132ee <SysRegistryGetTypeFromPath(regs*)>:
c00132ee:	57                   	push   edi
c00132ef:	56                   	push   esi
c00132f0:	53                   	push   ebx
c00132f1:	81 ec 38 01 00 00    	sub    esp,0x138
c00132f7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00132fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013301:	68 2f 0f 02 c0       	push   0xc0020f2f
c0013306:	e8 b7 76 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001330b:	5a                   	pop    edx
c001330c:	59                   	pop    ecx
c001330d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013310:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013313:	e8 4d f6 ff ff       	call   c0012965 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013318:	5f                   	pop    edi
c0013319:	89 c6                	mov    esi,eax
c001331b:	5a                   	pop    edx
c001331c:	50                   	push   eax
c001331d:	68 4f 0f 02 c0       	push   0xc0020f4f
c0013322:	e8 9b 76 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0013327:	83 c4 10             	add    esp,0x10
c001332a:	85 f6                	test   esi,esi
c001332c:	74 28                	je     c0013356 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001332e:	50                   	push   eax
c001332f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013333:	57                   	push   edi
c0013334:	56                   	push   esi
c0013335:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013338:	e8 0c f2 ff ff       	call   c0012549 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001333d:	83 c4 0c             	add    esp,0xc
c0013340:	89 c3                	mov    ebx,eax
c0013342:	57                   	push   edi
c0013343:	50                   	push   eax
c0013344:	68 57 0f 02 c0       	push   0xc0020f57
c0013349:	e8 74 76 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001334e:	89 d8                	mov    eax,ebx
c0013350:	83 c4 10             	add    esp,0x10
c0013353:	99                   	cdq    
c0013354:	eb 05                	jmp    c001335b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013356:	83 c8 ff             	or     eax,0xffffffff
c0013359:	89 c2                	mov    edx,eax
c001335b:	81 c4 30 01 00 00    	add    esp,0x130
c0013361:	5b                   	pop    ebx
c0013362:	5e                   	pop    esi
c0013363:	5f                   	pop    edi
c0013364:	c3                   	ret    

c0013365 <SysRegistryReadExtent(regs*)>:
c0013365:	83 ec 1c             	sub    esp,0x1c
c0013368:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001336c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001336f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013372:	85 c0                	test   eax,eax
c0013374:	79 1f                	jns    c0013395 <SysRegistryReadExtent(regs*)+0x30>
c0013376:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001337b:	52                   	push   edx
c001337c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013380:	52                   	push   edx
c0013381:	50                   	push   eax
c0013382:	51                   	push   ecx
c0013383:	e8 b3 f0 ff ff       	call   c001243b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013388:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001338c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013390:	83 c4 10             	add    esp,0x10
c0013393:	eb 14                	jmp    c00133a9 <SysRegistryReadExtent(regs*)+0x44>
c0013395:	83 ec 04             	sub    esp,0x4
c0013398:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001339b:	50                   	push   eax
c001339c:	51                   	push   ecx
c001339d:	e8 33 eb ff ff       	call   c0011ed5 <CmGetString(Reghive_Tag*, int, char*)>
c00133a2:	83 c4 10             	add    esp,0x10
c00133a5:	31 c0                	xor    eax,eax
c00133a7:	31 d2                	xor    edx,edx
c00133a9:	83 c4 1c             	add    esp,0x1c
c00133ac:	c3                   	ret    

c00133ad <SysRegistryPathToExtentLookup(regs*)>:
c00133ad:	53                   	push   ebx
c00133ae:	83 ec 10             	sub    esp,0x10
c00133b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133b8:	68 6d 0f 02 c0       	push   0xc0020f6d
c00133bd:	e8 00 76 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00133c2:	58                   	pop    eax
c00133c3:	5a                   	pop    edx
c00133c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133ca:	e8 96 f5 ff ff       	call   c0012965 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00133cf:	83 c4 18             	add    esp,0x18
c00133d2:	99                   	cdq    
c00133d3:	5b                   	pop    ebx
c00133d4:	c3                   	ret    

c00133d5 <SysRegistryEnterDirectory(regs*)>:
c00133d5:	53                   	push   ebx
c00133d6:	83 ec 10             	sub    esp,0x10
c00133d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133dd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133e0:	68 90 0f 02 c0       	push   0xc0020f90
c00133e5:	e8 d8 75 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00133ea:	58                   	pop    eax
c00133eb:	5a                   	pop    edx
c00133ec:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133ef:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133f2:	e8 55 eb ff ff       	call   c0011f4c <CmEnterDirectory(Reghive_Tag*, int)>
c00133f7:	83 c4 18             	add    esp,0x18
c00133fa:	99                   	cdq    
c00133fb:	5b                   	pop    ebx
c00133fc:	c3                   	ret    

c00133fd <SysRegistryGetNext(regs*)>:
c00133fd:	53                   	push   ebx
c00133fe:	83 ec 10             	sub    esp,0x10
c0013401:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013405:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013408:	68 ae 0f 02 c0       	push   0xc0020fae
c001340d:	e8 b0 75 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0013412:	58                   	pop    eax
c0013413:	5a                   	pop    edx
c0013414:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013417:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001341a:	e8 6c eb ff ff       	call   c0011f8b <CmGetNext(Reghive_Tag*, int)>
c001341f:	83 c4 18             	add    esp,0x18
c0013422:	99                   	cdq    
c0013423:	5b                   	pop    ebx
c0013424:	c3                   	ret    

c0013425 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013425:	57                   	push   edi
c0013426:	56                   	push   esi
c0013427:	53                   	push   ebx
c0013428:	81 ec 34 01 00 00    	sub    esp,0x134
c001342e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013435:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013439:	57                   	push   edi
c001343a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001343d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013440:	e8 04 f1 ff ff       	call   c0012549 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013445:	89 c3                	mov    ebx,eax
c0013447:	58                   	pop    eax
c0013448:	5a                   	pop    edx
c0013449:	57                   	push   edi
c001344a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001344d:	e8 ee d1 fe ff       	call   c0000640 <strcpy>
c0013452:	89 d8                	mov    eax,ebx
c0013454:	81 c4 40 01 00 00    	add    esp,0x140
c001345a:	99                   	cdq    
c001345b:	5b                   	pop    ebx
c001345c:	5e                   	pop    esi
c001345d:	5f                   	pop    edi
c001345e:	c3                   	ret    

c001345f <SysRegistryOpen(regs*)>:
c001345f:	83 ec 18             	sub    esp,0x18
c0013462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013466:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013469:	e8 f7 e8 ff ff       	call   c0011d65 <CmOpen(char const*)>
c001346e:	83 c4 1c             	add    esp,0x1c
c0013471:	99                   	cdq    
c0013472:	c3                   	ret    

c0013473 <SysRegistryClose(regs*)>:
c0013473:	83 ec 18             	sub    esp,0x18
c0013476:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001347a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001347d:	e8 01 ea ff ff       	call   c0011e83 <CmClose(Reghive_Tag*)>
c0013482:	31 c0                	xor    eax,eax
c0013484:	31 d2                	xor    edx,edx
c0013486:	83 c4 1c             	add    esp,0x1c
c0013489:	c3                   	ret    

c001348a <SysSbrk(regs*)>:
c001348a:	56                   	push   esi
c001348b:	53                   	push   ebx
c001348c:	50                   	push   eax
c001348d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013492:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013496:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013499:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001349c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00134a2:	85 db                	test   ebx,ebx
c00134a4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00134a7:	74 02                	je     c00134ab <SysSbrk(regs*)+0x21>
c00134a9:	79 06                	jns    c00134b1 <SysSbrk(regs*)+0x27>
c00134ab:	89 f0                	mov    eax,esi
c00134ad:	31 d2                	xor    edx,edx
c00134af:	eb 2a                	jmp    c00134db <SysSbrk(regs*)+0x51>
c00134b1:	83 c8 ff             	or     eax,0xffffffff
c00134b4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00134ba:	89 c2                	mov    edx,eax
c00134bc:	77 1d                	ja     c00134db <SysSbrk(regs*)+0x51>
c00134be:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00134c4:	50                   	push   eax
c00134c5:	c1 ea 0c             	shr    edx,0xc
c00134c8:	68 07 0c 00 00       	push   0xc07
c00134cd:	52                   	push   edx
c00134ce:	51                   	push   ecx
c00134cf:	e8 36 69 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c00134d4:	89 f0                	mov    eax,esi
c00134d6:	31 d2                	xor    edx,edx
c00134d8:	83 c4 10             	add    esp,0x10
c00134db:	59                   	pop    ecx
c00134dc:	5b                   	pop    ebx
c00134dd:	5e                   	pop    esi
c00134de:	c3                   	ret    

c00134df <SysSetCwd(regs*)>:
c00134df:	83 ec 14             	sub    esp,0x14
c00134e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134e6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134ee:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00134f1:	e8 17 7e ff ff       	call   c000b30d <Fs::setcwd(Process*, char*)>
c00134f6:	83 c4 1c             	add    esp,0x1c
c00134f9:	99                   	cdq    
c00134fa:	c3                   	ret    

c00134fb <SysSetTime(regs*)>:
c00134fb:	55                   	push   ebp
c00134fc:	31 c9                	xor    ecx,ecx
c00134fe:	57                   	push   edi
c00134ff:	bd 0c 00 00 00       	mov    ebp,0xc
c0013504:	56                   	push   esi
c0013505:	53                   	push   ebx
c0013506:	31 db                	xor    ebx,ebx
c0013508:	83 ec 10             	sub    esp,0x10
c001350b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001350f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013512:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013515:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013518:	89 c2                	mov    edx,eax
c001351a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013520:	83 e2 1f             	and    edx,0x1f
c0013523:	c1 e7 10             	shl    edi,0x10
c0013526:	42                   	inc    edx
c0013527:	c1 e8 05             	shr    eax,0x5
c001352a:	88 d1                	mov    cl,dl
c001352c:	31 d2                	xor    edx,edx
c001352e:	f7 f5                	div    ebp
c0013530:	89 dd                	mov    ebp,ebx
c0013532:	88 d5                	mov    ch,dl
c0013534:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001353a:	0f b7 c1             	movzx  eax,cx
c001353d:	31 d2                	xor    edx,edx
c001353f:	09 f8                	or     eax,edi
c0013541:	bf 3c 00 00 00       	mov    edi,0x3c
c0013546:	89 c1                	mov    ecx,eax
c0013548:	89 f0                	mov    eax,esi
c001354a:	f7 f7                	div    edi
c001354c:	c1 e2 10             	shl    edx,0x10
c001354f:	09 d5                	or     ebp,edx
c0013551:	31 d2                	xor    edx,edx
c0013553:	89 eb                	mov    ebx,ebp
c0013555:	f7 f7                	div    edi
c0013557:	bf 10 0e 00 00       	mov    edi,0xe10
c001355c:	88 d7                	mov    bh,dl
c001355e:	89 f0                	mov    eax,esi
c0013560:	31 d2                	xor    edx,edx
c0013562:	f7 f7                	div    edi
c0013564:	bf 18 00 00 00       	mov    edi,0x18
c0013569:	31 d2                	xor    edx,edx
c001356b:	f7 f7                	div    edi
c001356d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0013572:	88 d3                	mov    bl,dl
c0013574:	53                   	push   ebx
c0013575:	51                   	push   ecx
c0013576:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001357c:	e8 89 85 ff ff       	call   c000bb0a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013581:	83 c4 1c             	add    esp,0x1c
c0013584:	83 f0 01             	xor    eax,0x1
c0013587:	5b                   	pop    ebx
c0013588:	0f b6 c0             	movzx  eax,al
c001358b:	5e                   	pop    esi
c001358c:	31 d2                	xor    edx,edx
c001358e:	5f                   	pop    edi
c001358f:	5d                   	pop    ebp
c0013590:	c3                   	ret    

c0013591 <SysTimezone(regs*)>:
c0013591:	53                   	push   ebx
c0013592:	83 ec 08             	sub    esp,0x8
c0013595:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013599:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001359d:	75 17                	jne    c00135b6 <SysTimezone(regs*)+0x25>
c001359f:	83 ec 0c             	sub    esp,0xc
c00135a2:	68 c5 0f 02 c0       	push   0xc0020fc5
c00135a7:	e8 16 74 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00135ac:	83 c8 ff             	or     eax,0xffffffff
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	89 c2                	mov    edx,eax
c00135b4:	eb 20                	jmp    c00135d6 <SysTimezone(regs*)+0x45>
c00135b6:	83 ec 0c             	sub    esp,0xc
c00135b9:	68 da 0f 02 c0       	push   0xc0020fda
c00135be:	e8 ff 73 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00135c3:	58                   	pop    eax
c00135c4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135c7:	e8 a8 82 ff ff       	call   c000b874 <User::loadClockSettings(int)>
c00135cc:	83 c4 10             	add    esp,0x10
c00135cf:	b8 01 00 00 00       	mov    eax,0x1
c00135d4:	31 d2                	xor    edx,edx
c00135d6:	83 c4 08             	add    esp,0x8
c00135d9:	5b                   	pop    ebx
c00135da:	c3                   	ret    

c00135db <SysWrite(regs*)>:
c00135db:	57                   	push   edi
c00135dc:	56                   	push   esi
c00135dd:	53                   	push   ebx
c00135de:	83 ec 10             	sub    esp,0x10
c00135e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00135e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00135e8:	83 f8 02             	cmp    eax,0x2
c00135eb:	77 10                	ja     c00135fd <SysWrite(regs*)+0x22>
c00135ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135f5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00135fb:	eb 0e                	jmp    c001360b <SysWrite(regs*)+0x30>
c00135fd:	83 ec 0c             	sub    esp,0xc
c0013600:	50                   	push   eax
c0013601:	e8 bd 5e ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0013606:	83 c4 10             	add    esp,0x10
c0013609:	89 c1                	mov    ecx,eax
c001360b:	83 c8 ff             	or     eax,0xffffffff
c001360e:	85 c9                	test   ecx,ecx
c0013610:	89 c2                	mov    edx,eax
c0013612:	74 28                	je     c001363c <SysWrite(regs*)+0x61>
c0013614:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001361c:	31 ff                	xor    edi,edi
c001361e:	83 ec 0c             	sub    esp,0xc
c0013621:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013623:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013627:	52                   	push   edx
c0013628:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001362b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001362e:	57                   	push   edi
c001362f:	56                   	push   esi
c0013630:	51                   	push   ecx
c0013631:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013638:	83 c4 20             	add    esp,0x20
c001363b:	99                   	cdq    
c001363c:	83 c4 10             	add    esp,0x10
c001363f:	5b                   	pop    ebx
c0013640:	5e                   	pop    esi
c0013641:	5f                   	pop    edi
c0013642:	c3                   	ret    

c0013643 <SysWsbe(regs*)>:
c0013643:	57                   	push   edi
c0013644:	b9 0b 00 00 00       	mov    ecx,0xb
c0013649:	56                   	push   esi
c001364a:	be 19 10 02 c0       	mov    esi,0xc0021019
c001364f:	53                   	push   ebx
c0013650:	83 ec 30             	sub    esp,0x30
c0013653:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013657:	fc                   	cld    
c0013658:	83 ec 0c             	sub    esp,0xc
c001365b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001365d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013661:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013666:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013669:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001366f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013671:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013674:	57                   	push   edi
c0013675:	e8 f6 ce fe ff       	call   c0000570 <strlen>
c001367a:	5a                   	pop    edx
c001367b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001367f:	52                   	push   edx
c0013680:	31 d2                	xor    edx,edx
c0013682:	57                   	push   edi
c0013683:	52                   	push   edx
c0013684:	50                   	push   eax
c0013685:	56                   	push   esi
c0013686:	ff d3                	call   ebx
c0013688:	83 c4 14             	add    esp,0x14
c001368b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001368f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013692:	e8 ad 23 00 00       	call   c0015a44 <terminateTask(int)>
c0013697:	83 c4 40             	add    esp,0x40
c001369a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001369f:	5b                   	pop    ebx
c00136a0:	31 d2                	xor    edx,edx
c00136a2:	5e                   	pop    esi
c00136a3:	5f                   	pop    edi
c00136a4:	c3                   	ret    

c00136a5 <SysYield(regs*)>:
c00136a5:	83 ec 0c             	sub    esp,0xc
c00136a8:	fa                   	cli    
c00136a9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00136af:	e8 f0 19 00 00       	call   c00150a4 <schedule()>
c00136b4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00136b9:	48                   	dec    eax
c00136ba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00136bf:	75 01                	jne    c00136c2 <SysYield(regs*)+0x1d>
c00136c1:	fb                   	sti    
c00136c2:	31 c0                	xor    eax,eax
c00136c4:	31 d2                	xor    edx,edx
c00136c6:	83 c4 0c             	add    esp,0xc
c00136c9:	c3                   	ret    

c00136ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00136ca:	55                   	push   ebp
c00136cb:	57                   	push   edi
c00136cc:	56                   	push   esi
c00136cd:	53                   	push   ebx
c00136ce:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00136d4:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00136dc:	0f 95 c0             	setne  al
c00136df:	31 d2                	xor    edx,edx
c00136e1:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00136e9:	0f 94 c2             	sete   dl
c00136ec:	85 c2                	test   edx,eax
c00136ee:	74 34                	je     c0013724 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00136f0:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00136fb:	74 27                	je     c0013724 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00136fd:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013704:	05 00 10 00 00       	add    eax,0x1000
c0013709:	89 c1                	mov    ecx,eax
c001370b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013710:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013716:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001371d:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013724:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001372b:	83 ec 0c             	sub    esp,0xc
c001372e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013734:	6a 01                	push   0x1
c0013736:	e8 e2 5e ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001373b:	83 c4 10             	add    esp,0x10
c001373e:	89 c3                	mov    ebx,eax
c0013740:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013746:	0f 86 25 01 00 00    	jbe    c0013871 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001374c:	c1 ee 0c             	shr    esi,0xc
c001374f:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013756:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001375a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013762:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013769:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001376d:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013774:	29 ef                	sub    edi,ebp
c0013776:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001377a:	0f 83 f8 00 00 00    	jae    c0013878 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0013780:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013786:	76 05                	jbe    c001378d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013788:	bf 00 10 00 00       	mov    edi,0x1000
c001378d:	83 ec 0c             	sub    esp,0xc
c0013790:	31 d2                	xor    edx,edx
c0013792:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013799:	8b 08                	mov    ecx,DWORD PTR [eax]
c001379b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001379f:	50                   	push   eax
c00137a0:	8d 74 24 30          	lea    esi,[esp+0x30]
c00137a4:	56                   	push   esi
c00137a5:	52                   	push   edx
c00137a6:	57                   	push   edi
c00137a7:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00137ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00137b1:	83 c4 20             	add    esp,0x20
c00137b4:	85 c0                	test   eax,eax
c00137b6:	75 06                	jne    c00137be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00137b8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00137bc:	74 13                	je     c00137d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00137be:	83 ec 0c             	sub    esp,0xc
c00137c1:	53                   	push   ebx
c00137c2:	e8 72 61 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c00137c7:	83 c4 10             	add    esp,0x10
c00137ca:	31 c0                	xor    eax,eax
c00137cc:	e9 7c 01 00 00       	jmp    c001394d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00137d1:	fa                   	cli    
c00137d2:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00137d8:	e8 d6 45 ff ff       	call   c0007db3 <Phys::allocatePage()>
c00137dd:	6a 07                	push   0x7
c00137df:	89 c7                	mov    edi,eax
c00137e1:	53                   	push   ebx
c00137e2:	50                   	push   eax
c00137e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137eb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137f1:	e8 0e 65 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c00137f6:	83 c4 0c             	add    esp,0xc
c00137f9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013800:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013806:	6a 00                	push   0x0
c0013808:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001380d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013810:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013816:	e8 4f 63 ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c001381b:	58                   	pop    eax
c001381c:	5a                   	pop    edx
c001381d:	68 07 0c 00 00       	push   0xc07
c0013822:	55                   	push   ebp
c0013823:	57                   	push   edi
c0013824:	89 df                	mov    edi,ebx
c0013826:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001382d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013833:	6a 00                	push   0x0
c0013835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001383a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001383d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013843:	e8 a6 68 ff ff       	call   c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013848:	b9 00 10 00 00       	mov    ecx,0x1000
c001384d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001384f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013854:	83 c4 20             	add    esp,0x20
c0013857:	48                   	dec    eax
c0013858:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001385d:	85 c0                	test   eax,eax
c001385f:	75 01                	jne    c0013862 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0013861:	fb                   	sti    
c0013862:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013868:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001386c:	e9 f1 fe ff ff       	jmp    c0013762 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013871:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013878:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001387f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013885:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001388b:	0f 86 ae 00 00 00    	jbe    c001393f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013891:	fa                   	cli    
c0013892:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013898:	c1 ee 0c             	shr    esi,0xc
c001389b:	51                   	push   ecx
c001389c:	31 ff                	xor    edi,edi
c001389e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00138a5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138ab:	6a 00                	push   0x0
c00138ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138b5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138bb:	e8 aa 62 ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c00138c0:	83 c4 10             	add    esp,0x10
c00138c3:	e8 eb 44 ff ff       	call   c0007db3 <Phys::allocatePage()>
c00138c8:	47                   	inc    edi
c00138c9:	6a 07                	push   0x7
c00138cb:	53                   	push   ebx
c00138cc:	50                   	push   eax
c00138cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00138d7:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00138da:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00138e0:	e8 1f 64 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c00138e5:	58                   	pop    eax
c00138e6:	5a                   	pop    edx
c00138e7:	68 07 0c 00 00       	push   0xc07
c00138ec:	55                   	push   ebp
c00138ed:	81 c5 00 10 00 00    	add    ebp,0x1000
c00138f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138f7:	50                   	push   eax
c00138f8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00138ff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013905:	6a 00                	push   0x0
c0013907:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001390c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001390f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013915:	e8 d4 67 ff ff       	call   c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001391a:	83 c4 1c             	add    esp,0x1c
c001391d:	68 00 10 00 00       	push   0x1000
c0013922:	6a 00                	push   0x0
c0013924:	53                   	push   ebx
c0013925:	e8 c6 cb fe ff       	call   c00004f0 <memset>
c001392a:	83 c4 10             	add    esp,0x10
c001392d:	39 fe                	cmp    esi,edi
c001392f:	77 92                	ja     c00138c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0013931:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013936:	48                   	dec    eax
c0013937:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001393c:	75 01                	jne    c001393f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001393e:	fb                   	sti    
c001393f:	83 ec 0c             	sub    esp,0xc
c0013942:	53                   	push   ebx
c0013943:	e8 f1 5f ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0013948:	83 c4 10             	add    esp,0x10
c001394b:	b0 01                	mov    al,0x1
c001394d:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013953:	5b                   	pop    ebx
c0013954:	5e                   	pop    esi
c0013955:	5f                   	pop    edi
c0013956:	5d                   	pop    ebp
c0013957:	c3                   	ret    

c0013958 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013958:	55                   	push   ebp
c0013959:	57                   	push   edi
c001395a:	56                   	push   esi
c001395b:	53                   	push   ebx
c001395c:	83 ec 48             	sub    esp,0x48
c001395f:	68 14 01 00 00       	push   0x114
c0013964:	e8 45 41 ff ff       	call   c0007aae <malloc>
c0013969:	83 c4 0c             	add    esp,0xc
c001396c:	89 c6                	mov    esi,eax
c001396e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013972:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013976:	50                   	push   eax
c0013977:	e8 c8 75 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c001397c:	58                   	pop    eax
c001397d:	5a                   	pop    edx
c001397e:	6a 01                	push   0x1
c0013980:	56                   	push   esi
c0013981:	e8 7a 76 ff ff       	call   c000b000 <File::open(FileOpenMode)>
c0013986:	83 c4 10             	add    esp,0x10
c0013989:	85 c0                	test   eax,eax
c001398b:	0f 85 43 01 00 00    	jne    c0013ad4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013991:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013999:	83 ec 0c             	sub    esp,0xc
c001399c:	6a 34                	push   0x34
c001399e:	e8 0b 41 ff ff       	call   c0007aae <malloc>
c00139a3:	89 c3                	mov    ebx,eax
c00139a5:	58                   	pop    eax
c00139a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00139a8:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00139ac:	57                   	push   edi
c00139ad:	53                   	push   ebx
c00139ae:	6a 00                	push   0x0
c00139b0:	6a 34                	push   0x34
c00139b2:	56                   	push   esi
c00139b3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139b6:	83 c4 20             	add    esp,0x20
c00139b9:	85 c0                	test   eax,eax
c00139bb:	0f 85 13 01 00 00    	jne    c0013ad4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139c1:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00139c7:	0f 85 07 01 00 00    	jne    c0013ad4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139d0:	85 c0                	test   eax,eax
c00139d2:	0f 84 fc 00 00 00    	je     c0013ad4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139d8:	31 d2                	xor    edx,edx
c00139da:	55                   	push   ebp
c00139db:	52                   	push   edx
c00139dc:	50                   	push   eax
c00139dd:	56                   	push   esi
c00139de:	e8 db 76 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c00139e3:	83 c4 10             	add    esp,0x10
c00139e6:	85 c0                	test   eax,eax
c00139e8:	0f 85 e6 00 00 00    	jne    c0013ad4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139ee:	83 ec 0c             	sub    esp,0xc
c00139f1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00139f4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00139f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00139fc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a00:	0f af c2             	imul   eax,edx
c0013a03:	50                   	push   eax
c0013a04:	e8 a5 40 ff ff       	call   c0007aae <malloc>
c0013a09:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013a0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a16:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a1a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a1e:	0f af c2             	imul   eax,edx
c0013a21:	99                   	cdq    
c0013a22:	52                   	push   edx
c0013a23:	50                   	push   eax
c0013a24:	56                   	push   esi
c0013a25:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a28:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013a2b:	83 c4 20             	add    esp,0x20
c0013a2e:	85 c0                	test   eax,eax
c0013a30:	0f 84 9e 00 00 00    	je     c0013ad4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a36:	31 d2                	xor    edx,edx
c0013a38:	51                   	push   ecx
c0013a39:	52                   	push   edx
c0013a3a:	50                   	push   eax
c0013a3b:	56                   	push   esi
c0013a3c:	e8 7d 76 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0013a41:	83 c4 10             	add    esp,0x10
c0013a44:	85 c0                	test   eax,eax
c0013a46:	0f 85 88 00 00 00    	jne    c0013ad4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a4c:	83 ec 0c             	sub    esp,0xc
c0013a4f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a53:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a57:	31 ed                	xor    ebp,ebp
c0013a59:	0f af c2             	imul   eax,edx
c0013a5c:	50                   	push   eax
c0013a5d:	e8 4c 40 ff ff       	call   c0007aae <malloc>
c0013a62:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013a64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a68:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a6f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a73:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a77:	0f af c2             	imul   eax,edx
c0013a7a:	99                   	cdq    
c0013a7b:	52                   	push   edx
c0013a7c:	50                   	push   eax
c0013a7d:	56                   	push   esi
c0013a7e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a81:	83 c4 20             	add    esp,0x20
c0013a84:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a8c:	0f b7 fd             	movzx  edi,bp
c0013a8f:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013a93:	73 7d                	jae    c0013b12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013a95:	c1 e7 05             	shl    edi,0x5
c0013a98:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013a9c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013a9f:	75 6b                	jne    c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013aa1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013aa4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013aa8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013aab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013aaf:	52                   	push   edx
c0013ab0:	31 d2                	xor    edx,edx
c0013ab2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013ab5:	52                   	push   edx
c0013ab6:	50                   	push   eax
c0013ab7:	56                   	push   esi
c0013ab8:	e8 01 76 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0013abd:	83 c4 10             	add    esp,0x10
c0013ac0:	85 c0                	test   eax,eax
c0013ac2:	74 17                	je     c0013adb <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013ac4:	83 ec 0c             	sub    esp,0xc
c0013ac7:	68 45 10 02 c0       	push   0xc0021045
c0013acc:	e8 f1 6e ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0013ad1:	83 c4 10             	add    esp,0x10
c0013ad4:	31 c0                	xor    eax,eax
c0013ad6:	e9 87 00 00 00       	jmp    c0013b62 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013adb:	83 ec 0c             	sub    esp,0xc
c0013ade:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013ae1:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013ae4:	50                   	push   eax
c0013ae5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013ae9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013aed:	56                   	push   esi
c0013aee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013af2:	e8 d3 fb ff ff       	call   c00136ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013af7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013afb:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013aff:	83 c4 20             	add    esp,0x20
c0013b02:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013b06:	73 04                	jae    c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b0c:	45                   	inc    ebp
c0013b0d:	e9 7a ff ff ff       	jmp    c0013a8c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013b12:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013b16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b1e:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013b24:	83 ec 0c             	sub    esp,0xc
c0013b27:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013b2d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b32:	05 00 10 00 00       	add    eax,0x1000
c0013b37:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b3e:	e8 7b 3f ff ff       	call   c0007abe <free>
c0013b43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b46:	e8 73 3f ff ff       	call   c0007abe <free>
c0013b4b:	58                   	pop    eax
c0013b4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b50:	e8 69 3f ff ff       	call   c0007abe <free>
c0013b55:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b58:	e8 01 75 ff ff       	call   c000b05e <File::close()>
c0013b5d:	83 c4 10             	add    esp,0x10
c0013b60:	b0 01                	mov    al,0x1
c0013b62:	83 c4 3c             	add    esp,0x3c
c0013b65:	5b                   	pop    ebx
c0013b66:	5e                   	pop    esi
c0013b67:	5f                   	pop    edi
c0013b68:	5d                   	pop    ebp
c0013b69:	c3                   	ret    

c0013b6a <Thr::runtimeReferenceHelper()>:
c0013b6a:	83 ec 18             	sub    esp,0x18
c0013b6d:	68 4d 10 02 c0       	push   0xc002104d
c0013b72:	e8 4b 6e ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0013b77:	fa                   	cli    
c0013b78:	83 c4 10             	add    esp,0x10
c0013b7b:	eb fe                	jmp    c0013b7b <Thr::runtimeReferenceHelper()+0x11>

c0013b7d <Thr::getAddressOfKernelSymbol(char const*)>:
c0013b7d:	57                   	push   edi
c0013b7e:	56                   	push   esi
c0013b7f:	53                   	push   ebx
c0013b80:	31 db                	xor    ebx,ebx
c0013b82:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013b88:	7e 3c                	jle    c0013bc6 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013b8a:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b91:	31 ff                	xor    edi,edi
c0013b93:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b9a:	7e 27                	jle    c0013bc3 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b9c:	50                   	push   eax
c0013b9d:	50                   	push   eax
c0013b9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ba2:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ba4:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013bab:	50                   	push   eax
c0013bac:	e8 9f cb fe ff       	call   c0000750 <strcmp>
c0013bb1:	83 c4 10             	add    esp,0x10
c0013bb4:	85 c0                	test   eax,eax
c0013bb6:	75 05                	jne    c0013bbd <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013bb8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013bbb:	eb 0b                	jmp    c0013bc8 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013bbd:	83 c6 10             	add    esi,0x10
c0013bc0:	47                   	inc    edi
c0013bc1:	eb d0                	jmp    c0013b93 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013bc3:	43                   	inc    ebx
c0013bc4:	eb bc                	jmp    c0013b82 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013bc6:	31 c0                	xor    eax,eax
c0013bc8:	5b                   	pop    ebx
c0013bc9:	5e                   	pop    esi
c0013bca:	5f                   	pop    edi
c0013bcb:	c3                   	ret    

c0013bcc <Thr::loadKernelSymbolTable(char const*)>:
c0013bcc:	55                   	push   ebp
c0013bcd:	57                   	push   edi
c0013bce:	56                   	push   esi
c0013bcf:	53                   	push   ebx
c0013bd0:	83 ec 68             	sub    esp,0x68
c0013bd3:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013bd9:	68 14 01 00 00       	push   0x114
c0013bde:	e8 cb 3e ff ff       	call   c0007aae <malloc>
c0013be3:	83 c4 0c             	add    esp,0xc
c0013be6:	89 c3                	mov    ebx,eax
c0013be8:	56                   	push   esi
c0013be9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013bed:	50                   	push   eax
c0013bee:	e8 51 73 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c0013bf3:	5e                   	pop    esi
c0013bf4:	5f                   	pop    edi
c0013bf5:	6a 01                	push   0x1
c0013bf7:	53                   	push   ebx
c0013bf8:	e8 03 74 ff ff       	call   c000b000 <File::open(FileOpenMode)>
c0013bfd:	83 c4 10             	add    esp,0x10
c0013c00:	85 c0                	test   eax,eax
c0013c02:	74 0a                	je     c0013c0e <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013c04:	83 ec 0c             	sub    esp,0xc
c0013c07:	68 6f 10 02 c0       	push   0xc002106f
c0013c0c:	eb 34                	jmp    c0013c42 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013c0e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013c16:	83 ec 0c             	sub    esp,0xc
c0013c19:	6a 34                	push   0x34
c0013c1b:	e8 8e 3e ff ff       	call   c0007aae <malloc>
c0013c20:	59                   	pop    ecx
c0013c21:	89 c7                	mov    edi,eax
c0013c23:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013c27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c29:	56                   	push   esi
c0013c2a:	57                   	push   edi
c0013c2b:	6a 00                	push   0x0
c0013c2d:	6a 34                	push   0x34
c0013c2f:	53                   	push   ebx
c0013c30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c33:	83 c4 20             	add    esp,0x20
c0013c36:	85 c0                	test   eax,eax
c0013c38:	74 17                	je     c0013c51 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013c3a:	83 ec 0c             	sub    esp,0xc
c0013c3d:	68 86 10 02 c0       	push   0xc0021086
c0013c42:	e8 a8 cc ff ff       	call   c00108ef <KePanic(char const*)>
c0013c47:	83 c4 10             	add    esp,0x10
c0013c4a:	31 c0                	xor    eax,eax
c0013c4c:	e9 31 02 00 00       	jmp    c0013e82 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013c51:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013c57:	75 e1                	jne    c0013c3a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c59:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013c5c:	85 c0                	test   eax,eax
c0013c5e:	74 da                	je     c0013c3a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c60:	52                   	push   edx
c0013c61:	31 d2                	xor    edx,edx
c0013c63:	52                   	push   edx
c0013c64:	50                   	push   eax
c0013c65:	53                   	push   ebx
c0013c66:	e8 53 74 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0013c6b:	83 c4 10             	add    esp,0x10
c0013c6e:	85 c0                	test   eax,eax
c0013c70:	75 c8                	jne    c0013c3a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c79:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c7d:	31 ed                	xor    ebp,ebp
c0013c7f:	0f af c2             	imul   eax,edx
c0013c82:	50                   	push   eax
c0013c83:	e8 26 3e ff ff       	call   c0007aae <malloc>
c0013c88:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013c8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c95:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c99:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c9d:	0f af c2             	imul   eax,edx
c0013ca0:	99                   	cdq    
c0013ca1:	52                   	push   edx
c0013ca2:	50                   	push   eax
c0013ca3:	53                   	push   ebx
c0013ca4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ca7:	83 c4 20             	add    esp,0x20
c0013caa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013cb2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013cba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013cc2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013cca:	0f b7 f5             	movzx  esi,bp
c0013ccd:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013cd1:	0f 83 a7 00 00 00    	jae    c0013d7e <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013cd7:	6b f6 28             	imul   esi,esi,0x28
c0013cda:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013cde:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013ce1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ce5:	50                   	push   eax
c0013ce6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013cea:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013cee:	8b 16                	mov    edx,DWORD PTR [esi]
c0013cf0:	6b c0 28             	imul   eax,eax,0x28
c0013cf3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013cf7:	89 d0                	mov    eax,edx
c0013cf9:	31 d2                	xor    edx,edx
c0013cfb:	52                   	push   edx
c0013cfc:	50                   	push   eax
c0013cfd:	53                   	push   ebx
c0013cfe:	e8 bb 73 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0013d03:	83 c4 0c             	add    esp,0xc
c0013d06:	6a 20                	push   0x20
c0013d08:	6a 00                	push   0x0
c0013d0a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d0e:	52                   	push   edx
c0013d0f:	e8 dc c7 fe ff       	call   c00004f0 <memset>
c0013d14:	58                   	pop    eax
c0013d15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d17:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013d1b:	51                   	push   ecx
c0013d1c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013d20:	52                   	push   edx
c0013d21:	6a 00                	push   0x0
c0013d23:	6a 1f                	push   0x1f
c0013d25:	53                   	push   ebx
c0013d26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d29:	83 c4 18             	add    esp,0x18
c0013d2c:	68 9d 10 02 c0       	push   0xc002109d
c0013d31:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d35:	52                   	push   edx
c0013d36:	e8 15 ca fe ff       	call   c0000750 <strcmp>
c0013d3b:	83 c4 10             	add    esp,0x10
c0013d3e:	85 c0                	test   eax,eax
c0013d40:	75 0f                	jne    c0013d51 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013d42:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d51:	50                   	push   eax
c0013d52:	50                   	push   eax
c0013d53:	68 a5 10 02 c0       	push   0xc00210a5
c0013d58:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013d5c:	50                   	push   eax
c0013d5d:	e8 ee c9 fe ff       	call   c0000750 <strcmp>
c0013d62:	83 c4 10             	add    esp,0x10
c0013d65:	85 c0                	test   eax,eax
c0013d67:	75 0f                	jne    c0013d78 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013d69:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d78:	45                   	inc    ebp
c0013d79:	e9 4c ff ff ff       	jmp    c0013cca <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013d7e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013d83:	75 10                	jne    c0013d95 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013d85:	83 ec 0c             	sub    esp,0xc
c0013d88:	68 ad 10 02 c0       	push   0xc00210ad
c0013d8d:	e8 5d cb ff ff       	call   c00108ef <KePanic(char const*)>
c0013d92:	83 c4 10             	add    esp,0x10
c0013d95:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d9a:	75 10                	jne    c0013dac <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013d9c:	83 ec 0c             	sub    esp,0xc
c0013d9f:	68 ad 10 02 c0       	push   0xc00210ad
c0013da4:	e8 46 cb ff ff       	call   c00108ef <KePanic(char const*)>
c0013da9:	83 c4 10             	add    esp,0x10
c0013dac:	31 d2                	xor    edx,edx
c0013dae:	50                   	push   eax
c0013daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db3:	52                   	push   edx
c0013db4:	50                   	push   eax
c0013db5:	53                   	push   ebx
c0013db6:	e8 03 73 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0013dbb:	5a                   	pop    edx
c0013dbc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013dc0:	e8 e9 3c ff ff       	call   c0007aae <malloc>
c0013dc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dc9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dcd:	31 c9                	xor    ecx,ecx
c0013dcf:	5e                   	pop    esi
c0013dd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dd2:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013dd6:	55                   	push   ebp
c0013dd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ddb:	51                   	push   ecx
c0013ddc:	52                   	push   edx
c0013ddd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013de1:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013de5:	53                   	push   ebx
c0013de6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013de9:	83 c4 14             	add    esp,0x14
c0013dec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013df0:	e8 b9 3c ff ff       	call   c0007aae <malloc>
c0013df5:	89 c6                	mov    esi,eax
c0013df7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013dfc:	56                   	push   esi
c0013dfd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e01:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013e05:	51                   	push   ecx
c0013e06:	52                   	push   edx
c0013e07:	53                   	push   ebx
c0013e08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e0f:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013e15:	83 c4 1c             	add    esp,0x1c
c0013e18:	c1 e8 04             	shr    eax,0x4
c0013e1b:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013e22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e26:	31 d2                	xor    edx,edx
c0013e28:	52                   	push   edx
c0013e29:	50                   	push   eax
c0013e2a:	53                   	push   ebx
c0013e2b:	e8 8e 72 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0013e30:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013e32:	31 d2                	xor    edx,edx
c0013e34:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e37:	56                   	push   esi
c0013e38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e3c:	52                   	push   edx
c0013e3d:	50                   	push   eax
c0013e3e:	53                   	push   ebx
c0013e3f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e42:	83 c4 14             	add    esp,0x14
c0013e45:	53                   	push   ebx
c0013e46:	e8 13 72 ff ff       	call   c000b05e <File::close()>
c0013e4b:	5d                   	pop    ebp
c0013e4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e50:	e8 69 3c ff ff       	call   c0007abe <free>
c0013e55:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e58:	e8 61 3c ff ff       	call   c0007abe <free>
c0013e5d:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013e62:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013e66:	8d 50 01             	lea    edx,[eax+0x1]
c0013e69:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013e70:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013e77:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013e7d:	83 c4 10             	add    esp,0x10
c0013e80:	b0 01                	mov    al,0x1
c0013e82:	83 c4 5c             	add    esp,0x5c
c0013e85:	5b                   	pop    ebx
c0013e86:	5e                   	pop    esi
c0013e87:	5f                   	pop    edi
c0013e88:	5d                   	pop    ebp
c0013e89:	c3                   	ret    

c0013e8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013e8a:	55                   	push   ebp
c0013e8b:	57                   	push   edi
c0013e8c:	56                   	push   esi
c0013e8d:	53                   	push   ebx
c0013e8e:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e94:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e9b:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013ea1:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0013ea5:	68 14 01 00 00       	push   0x114
c0013eaa:	e8 ff 3b ff ff       	call   c0007aae <malloc>
c0013eaf:	83 c4 0c             	add    esp,0xc
c0013eb2:	89 c5                	mov    ebp,eax
c0013eb4:	53                   	push   ebx
c0013eb5:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013ebc:	50                   	push   eax
c0013ebd:	e8 82 70 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c0013ec2:	5e                   	pop    esi
c0013ec3:	5f                   	pop    edi
c0013ec4:	6a 01                	push   0x1
c0013ec6:	55                   	push   ebp
c0013ec7:	e8 34 71 ff ff       	call   c000b000 <File::open(FileOpenMode)>
c0013ecc:	83 c4 10             	add    esp,0x10
c0013ecf:	85 c0                	test   eax,eax
c0013ed1:	0f 85 aa 06 00 00    	jne    c0014581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013ed7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013edf:	83 ec 0c             	sub    esp,0xc
c0013ee2:	6a 34                	push   0x34
c0013ee4:	e8 c5 3b ff ff       	call   c0007aae <malloc>
c0013ee9:	5b                   	pop    ebx
c0013eea:	89 c7                	mov    edi,eax
c0013eec:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013ef0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ef3:	53                   	push   ebx
c0013ef4:	57                   	push   edi
c0013ef5:	6a 00                	push   0x0
c0013ef7:	6a 34                	push   0x34
c0013ef9:	55                   	push   ebp
c0013efa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013efd:	83 c4 20             	add    esp,0x20
c0013f00:	85 c0                	test   eax,eax
c0013f02:	0f 85 79 06 00 00    	jne    c0014581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f08:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013f0e:	0f 85 6d 06 00 00    	jne    c0014581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f14:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013f17:	85 c0                	test   eax,eax
c0013f19:	0f 84 62 06 00 00    	je     c0014581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f1f:	31 d2                	xor    edx,edx
c0013f21:	51                   	push   ecx
c0013f22:	52                   	push   edx
c0013f23:	50                   	push   eax
c0013f24:	55                   	push   ebp
c0013f25:	e8 94 71 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0013f2a:	83 c4 10             	add    esp,0x10
c0013f2d:	85 c0                	test   eax,eax
c0013f2f:	0f 85 4c 06 00 00    	jne    c0014581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f35:	83 ec 0c             	sub    esp,0xc
c0013f38:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013f3b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013f43:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f47:	0f af c2             	imul   eax,edx
c0013f4a:	50                   	push   eax
c0013f4b:	e8 5e 3b ff ff       	call   c0007aae <malloc>
c0013f50:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f5e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f62:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f66:	0f af c2             	imul   eax,edx
c0013f69:	99                   	cdq    
c0013f6a:	52                   	push   edx
c0013f6b:	50                   	push   eax
c0013f6c:	55                   	push   ebp
c0013f6d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f70:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013f73:	83 c4 20             	add    esp,0x20
c0013f76:	85 c0                	test   eax,eax
c0013f78:	0f 84 03 06 00 00    	je     c0014581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f7e:	52                   	push   edx
c0013f7f:	31 d2                	xor    edx,edx
c0013f81:	52                   	push   edx
c0013f82:	50                   	push   eax
c0013f83:	55                   	push   ebp
c0013f84:	e8 35 71 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0013f89:	83 c4 10             	add    esp,0x10
c0013f8c:	85 c0                	test   eax,eax
c0013f8e:	0f 85 ed 05 00 00    	jne    c0014581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f94:	83 ec 0c             	sub    esp,0xc
c0013f97:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013f9b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013f9f:	31 f6                	xor    esi,esi
c0013fa1:	0f af c2             	imul   eax,edx
c0013fa4:	50                   	push   eax
c0013fa5:	e8 04 3b ff ff       	call   c0007aae <malloc>
c0013faa:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013fad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013fb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fb4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013fb8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013fbc:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013fc0:	0f af c2             	imul   eax,edx
c0013fc3:	99                   	cdq    
c0013fc4:	52                   	push   edx
c0013fc5:	50                   	push   eax
c0013fc6:	55                   	push   ebp
c0013fc7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fca:	83 c4 20             	add    esp,0x20
c0013fcd:	0f b7 de             	movzx  ebx,si
c0013fd0:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0013fd4:	0f 83 87 00 00 00    	jae    c0014061 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0013fda:	c1 e3 05             	shl    ebx,0x5
c0013fdd:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013fe1:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013fe4:	75 75                	jne    c001405b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0013fe6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013fe9:	31 d2                	xor    edx,edx
c0013feb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff6:	50                   	push   eax
c0013ff7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013ffa:	52                   	push   edx
c0013ffb:	50                   	push   eax
c0013ffc:	55                   	push   ebp
c0013ffd:	e8 bc 70 ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0014002:	83 c4 10             	add    esp,0x10
c0014005:	85 c0                	test   eax,eax
c0014007:	0f 85 74 05 00 00    	jne    c0014581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001400d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014014:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014017:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001401b:	31 d2                	xor    edx,edx
c001401d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014021:	83 ec 0c             	sub    esp,0xc
c0014024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014028:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001402f:	50                   	push   eax
c0014030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014038:	52                   	push   edx
c0014039:	50                   	push   eax
c001403a:	55                   	push   ebp
c001403b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001403e:	83 c4 1c             	add    esp,0x1c
c0014041:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014044:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014047:	50                   	push   eax
c0014048:	6a 00                	push   0x0
c001404a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001404e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014052:	50                   	push   eax
c0014053:	e8 98 c4 fe ff       	call   c00004f0 <memset>
c0014058:	83 c4 10             	add    esp,0x10
c001405b:	46                   	inc    esi
c001405c:	e9 6c ff ff ff       	jmp    c0013fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014061:	53                   	push   ebx
c0014062:	31 db                	xor    ebx,ebx
c0014064:	68 00 01 00 00       	push   0x100
c0014069:	6a 00                	push   0x0
c001406b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001406f:	50                   	push   eax
c0014070:	e8 7b c4 fe ff       	call   c00004f0 <memset>
c0014075:	83 c4 0c             	add    esp,0xc
c0014078:	68 00 01 00 00       	push   0x100
c001407d:	6a 00                	push   0x0
c001407f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014086:	50                   	push   eax
c0014087:	e8 64 c4 fe ff       	call   c00004f0 <memset>
c001408c:	83 c4 10             	add    esp,0x10
c001408f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014097:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001409f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00140a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00140af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00140b7:	0f b7 f3             	movzx  esi,bx
c00140ba:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00140be:	0f 83 2d 01 00 00    	jae    c00141f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00140c4:	6b f6 28             	imul   esi,esi,0x28
c00140c7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00140cb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00140ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140d2:	52                   	push   edx
c00140d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140d7:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00140db:	8b 06                	mov    eax,DWORD PTR [esi]
c00140dd:	6b d2 28             	imul   edx,edx,0x28
c00140e0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00140e4:	31 d2                	xor    edx,edx
c00140e6:	52                   	push   edx
c00140e7:	50                   	push   eax
c00140e8:	55                   	push   ebp
c00140e9:	e8 d0 6f ff ff       	call   c000b0be <File::seek(unsigned long long)>
c00140ee:	83 c4 0c             	add    esp,0xc
c00140f1:	6a 20                	push   0x20
c00140f3:	6a 00                	push   0x0
c00140f5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00140fc:	51                   	push   ecx
c00140fd:	e8 ee c3 fe ff       	call   c00004f0 <memset>
c0014102:	59                   	pop    ecx
c0014103:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014106:	8d 54 24 58          	lea    edx,[esp+0x58]
c001410a:	52                   	push   edx
c001410b:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014112:	51                   	push   ecx
c0014113:	6a 00                	push   0x0
c0014115:	6a 1f                	push   0x1f
c0014117:	55                   	push   ebp
c0014118:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001411b:	83 c4 1c             	add    esp,0x1c
c001411e:	6a 09                	push   0x9
c0014120:	68 c7 10 02 c0       	push   0xc00210c7
c0014125:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001412c:	51                   	push   ecx
c001412d:	e8 4e c2 fe ff       	call   c0000380 <memcmp>
c0014132:	83 c4 10             	add    esp,0x10
c0014135:	85 c0                	test   eax,eax
c0014137:	75 21                	jne    c001415a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014139:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001413d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014141:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014145:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014149:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001414c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014153:	89 d0                	mov    eax,edx
c0014155:	40                   	inc    eax
c0014156:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001415a:	50                   	push   eax
c001415b:	6a 09                	push   0x9
c001415d:	68 d1 10 02 c0       	push   0xc00210d1
c0014162:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014169:	50                   	push   eax
c001416a:	e8 11 c2 fe ff       	call   c0000380 <memcmp>
c001416f:	83 c4 10             	add    esp,0x10
c0014172:	85 c0                	test   eax,eax
c0014174:	75 21                	jne    c0014197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001417a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001417e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014182:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014186:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014189:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014190:	89 d0                	mov    eax,edx
c0014192:	40                   	inc    eax
c0014193:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014197:	50                   	push   eax
c0014198:	50                   	push   eax
c0014199:	68 9d 10 02 c0       	push   0xc002109d
c001419e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141a5:	50                   	push   eax
c00141a6:	e8 a5 c5 fe ff       	call   c0000750 <strcmp>
c00141ab:	83 c4 10             	add    esp,0x10
c00141ae:	85 c0                	test   eax,eax
c00141b0:	75 0f                	jne    c00141c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00141b2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00141b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141c1:	50                   	push   eax
c00141c2:	50                   	push   eax
c00141c3:	68 a5 10 02 c0       	push   0xc00210a5
c00141c8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141cf:	50                   	push   eax
c00141d0:	e8 7b c5 fe ff       	call   c0000750 <strcmp>
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	85 c0                	test   eax,eax
c00141da:	75 0f                	jne    c00141eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00141dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00141df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00141e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00141eb:	43                   	inc    ebx
c00141ec:	e9 c6 fe ff ff       	jmp    c00140b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00141f1:	31 d2                	xor    edx,edx
c00141f3:	50                   	push   eax
c00141f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f8:	52                   	push   edx
c00141f9:	50                   	push   eax
c00141fa:	55                   	push   ebp
c00141fb:	e8 be 6e ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0014200:	58                   	pop    eax
c0014201:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014205:	e8 a4 38 ff ff       	call   c0007aae <malloc>
c001420a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001420d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014211:	31 d2                	xor    edx,edx
c0014213:	58                   	pop    eax
c0014214:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014218:	53                   	push   ebx
c0014219:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001421d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014221:	52                   	push   edx
c0014222:	50                   	push   eax
c0014223:	55                   	push   ebp
c0014224:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014227:	83 c4 14             	add    esp,0x14
c001422a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001422e:	e8 7b 38 ff ff       	call   c0007aae <malloc>
c0014233:	31 d2                	xor    edx,edx
c0014235:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014239:	83 c4 0c             	add    esp,0xc
c001423c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014240:	52                   	push   edx
c0014241:	50                   	push   eax
c0014242:	55                   	push   ebp
c0014243:	e8 76 6e ff ff       	call   c000b0be <File::seek(unsigned long long)>
c0014248:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001424b:	31 d2                	xor    edx,edx
c001424d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014250:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014258:	52                   	push   edx
c0014259:	50                   	push   eax
c001425a:	55                   	push   ebp
c001425b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001425e:	83 c4 20             	add    esp,0x20
c0014261:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014266:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001426e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014272:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014276:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001427a:	0f 84 05 03 00 00    	je     c0014585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014280:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014287:	31 d2                	xor    edx,edx
c0014289:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001428d:	c1 e8 03             	shr    eax,0x3
c0014290:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014294:	51                   	push   ecx
c0014295:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014299:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001429d:	52                   	push   edx
c001429e:	50                   	push   eax
c001429f:	55                   	push   ebp
c00142a0:	e8 19 6e ff ff       	call   c000b0be <File::seek(unsigned long long)>
c00142a5:	5b                   	pop    ebx
c00142a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142aa:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00142b1:	e8 f8 37 ff ff       	call   c0007aae <malloc>
c00142b6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142bd:	31 d2                	xor    edx,edx
c00142bf:	5e                   	pop    esi
c00142c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00142c4:	50                   	push   eax
c00142c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142cd:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00142d4:	52                   	push   edx
c00142d5:	50                   	push   eax
c00142d6:	55                   	push   ebp
c00142d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142da:	83 c4 20             	add    esp,0x20
c00142dd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00142e5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00142e9:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00142ed:	0f 8d 76 02 00 00    	jge    c0014569 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00142f3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00142f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142fb:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014300:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014307:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001430b:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c001430f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014313:	c1 e8 08             	shr    eax,0x8
c0014316:	89 c6                	mov    esi,eax
c0014318:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001431c:	c1 e6 04             	shl    esi,0x4
c001431f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014323:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014326:	85 db                	test   ebx,ebx
c0014328:	0f 85 b3 00 00 00    	jne    c00143e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001432e:	83 ec 0c             	sub    esp,0xc
c0014331:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014335:	03 06                	add    eax,DWORD PTR [esi]
c0014337:	50                   	push   eax
c0014338:	e8 40 f8 ff ff       	call   c0013b7d <Thr::getAddressOfKernelSymbol(char const*)>
c001433d:	83 c4 10             	add    esp,0x10
c0014340:	89 c3                	mov    ebx,eax
c0014342:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014347:	85 c0                	test   eax,eax
c0014349:	0f 85 92 00 00 00    	jne    c00143e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001434f:	83 ec 0c             	sub    esp,0xc
c0014352:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014356:	03 06                	add    eax,DWORD PTR [esi]
c0014358:	50                   	push   eax
c0014359:	e8 7e c7 ff ff       	call   c0010adc <KeResolveCompatibilitySymbol(char*)>
c001435e:	83 c4 10             	add    esp,0x10
c0014361:	89 c3                	mov    ebx,eax
c0014363:	85 c0                	test   eax,eax
c0014365:	75 7a                	jne    c00143e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014367:	51                   	push   ecx
c0014368:	51                   	push   ecx
c0014369:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001436d:	03 06                	add    eax,DWORD PTR [esi]
c001436f:	50                   	push   eax
c0014370:	68 db 10 02 c0       	push   0xc00210db
c0014375:	e8 48 66 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001437a:	58                   	pop    eax
c001437b:	5a                   	pop    edx
c001437c:	68 f5 10 02 c0       	push   0xc00210f5
c0014381:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014388:	50                   	push   eax
c0014389:	e8 b2 c2 fe ff       	call   c0000640 <strcpy>
c001438e:	59                   	pop    ecx
c001438f:	58                   	pop    eax
c0014390:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014394:	03 06                	add    eax,DWORD PTR [esi]
c0014396:	50                   	push   eax
c0014397:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001439e:	50                   	push   eax
c001439f:	e8 9c c4 fe ff       	call   c0000840 <strcat>
c00143a4:	58                   	pop    eax
c00143a5:	5a                   	pop    edx
c00143a6:	68 8b 11 02 c0       	push   0xc002118b
c00143ab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143b2:	50                   	push   eax
c00143b3:	e8 88 c4 fe ff       	call   c0000840 <strcat>
c00143b8:	83 c4 10             	add    esp,0x10
c00143bb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00143c0:	0f 84 5d 01 00 00    	je     c0014523 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00143c6:	83 ec 0c             	sub    esp,0xc
c00143c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143d0:	50                   	push   eax
c00143d1:	e8 19 c5 ff ff       	call   c00108ef <KePanic(char const*)>
c00143d6:	83 c4 10             	add    esp,0x10
c00143d9:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00143dd:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00143e1:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00143e6:	83 f8 01             	cmp    eax,0x1
c00143e9:	0f 85 8f 00 00 00    	jne    c001447e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00143ef:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00143f6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00143fa:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00143fe:	01 ce                	add    esi,ecx
c0014400:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014408:	0f 94 c0             	sete   al
c001440b:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014413:	0f 94 c2             	sete   dl
c0014416:	09 c2                	or     edx,eax
c0014418:	8b 06                	mov    eax,DWORD PTR [esi]
c001441a:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001441f:	0f b6 d2             	movzx  edx,dl
c0014422:	74 41                	je     c0014465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014424:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014427:	85 d2                	test   edx,edx
c0014429:	75 15                	jne    c0014440 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001442b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001442f:	66 83 f8 0c          	cmp    ax,0xc
c0014433:	76 05                	jbe    c001443a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014435:	b8 0c 00 00 00       	mov    eax,0xc
c001443a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001443e:	76 37                	jbe    c0014477 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014440:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014444:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014449:	0f 84 d4 00 00 00    	je     c0014523 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001444f:	83 ec 0c             	sub    esp,0xc
c0014452:	68 0c 11 02 c0       	push   0xc002110c
c0014457:	e8 93 c4 ff ff       	call   c00108ef <KePanic(char const*)>
c001445c:	83 c4 10             	add    esp,0x10
c001445f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014463:	eb 12                	jmp    c0014477 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014465:	01 c1                	add    ecx,eax
c0014467:	85 d2                	test   edx,edx
c0014469:	75 0c                	jne    c0014477 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001446b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001446f:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014473:	77 02                	ja     c0014477 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014475:	01 d9                	add    ecx,ebx
c0014477:	89 0e                	mov    DWORD PTR [esi],ecx
c0014479:	e9 e2 00 00 00       	jmp    c0014560 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001447e:	83 f8 02             	cmp    eax,0x2
c0014481:	75 77                	jne    c00144fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014483:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001448a:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c001448e:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014492:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001449a:	74 21                	je     c00144bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001449c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00144a4:	74 17                	je     c00144bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00144a6:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00144aa:	b8 0a 00 00 00       	mov    eax,0xa
c00144af:	83 fa 0e             	cmp    edx,0xe
c00144b2:	77 03                	ja     c00144b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00144b4:	8d 42 fc             	lea    eax,[edx-0x4]
c00144b7:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144bb:	76 17                	jbe    c00144d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00144bd:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00144c2:	74 5f                	je     c0014523 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00144c4:	83 ec 0c             	sub    esp,0xc
c00144c7:	68 28 11 02 c0       	push   0xc0021128
c00144cc:	e8 1e c4 ff ff       	call   c00108ef <KePanic(char const*)>
c00144d1:	83 c4 10             	add    esp,0x10
c00144d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00144d6:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00144db:	74 13                	je     c00144f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00144dd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00144e1:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00144e8:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00144ec:	01 d0                	add    eax,edx
c00144ee:	eb 04                	jmp    c00144f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00144f0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00144f4:	01 c3                	add    ebx,eax
c00144f6:	89 1e                	mov    DWORD PTR [esi],ebx
c00144f8:	eb 66                	jmp    c0014560 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00144fa:	52                   	push   edx
c00144fb:	52                   	push   edx
c00144fc:	50                   	push   eax
c00144fd:	68 44 11 02 c0       	push   0xc0021144
c0014502:	e8 bb 64 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0014507:	83 c4 10             	add    esp,0x10
c001450a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001450f:	74 12                	je     c0014523 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014511:	83 ec 0c             	sub    esp,0xc
c0014514:	68 4f 11 02 c0       	push   0xc002114f
c0014519:	e8 d1 c3 ff ff       	call   c00108ef <KePanic(char const*)>
c001451e:	83 c4 10             	add    esp,0x10
c0014521:	eb 3d                	jmp    c0014560 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014523:	83 ec 0c             	sub    esp,0xc
c0014526:	55                   	push   ebp
c0014527:	e8 32 6b ff ff       	call   c000b05e <File::close()>
c001452c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001452f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014532:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014535:	59                   	pop    ecx
c0014536:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001453a:	e8 7f 35 ff ff       	call   c0007abe <free>
c001453f:	5b                   	pop    ebx
c0014540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014544:	e8 75 35 ff ff       	call   c0007abe <free>
c0014549:	89 3c 24             	mov    DWORD PTR [esp],edi
c001454c:	e8 6d 35 ff ff       	call   c0007abe <free>
c0014551:	5e                   	pop    esi
c0014552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014556:	e8 63 35 ff ff       	call   c0007abe <free>
c001455b:	83 c4 10             	add    esp,0x10
c001455e:	eb 21                	jmp    c0014581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014560:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014564:	e9 7c fd ff ff       	jmp    c00142e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014569:	83 ec 0c             	sub    esp,0xc
c001456c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014570:	e8 49 35 ff ff       	call   c0007abe <free>
c0014575:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014579:	83 c4 10             	add    esp,0x10
c001457c:	e9 f1 fc ff ff       	jmp    c0014272 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014581:	31 c0                	xor    eax,eax
c0014583:	eb 33                	jmp    c00145b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0014585:	83 ec 0c             	sub    esp,0xc
c0014588:	55                   	push   ebp
c0014589:	e8 d0 6a ff ff       	call   c000b05e <File::close()>
c001458e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014591:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014594:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014597:	58                   	pop    eax
c0014598:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001459c:	e8 1d 35 ff ff       	call   c0007abe <free>
c00145a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145a4:	e8 15 35 ff ff       	call   c0007abe <free>
c00145a9:	5a                   	pop    edx
c00145aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145ae:	e8 0b 35 ff ff       	call   c0007abe <free>
c00145b3:	83 c4 10             	add    esp,0x10
c00145b6:	b0 01                	mov    al,0x1
c00145b8:	81 c4 5c 03 00 00    	add    esp,0x35c
c00145be:	5b                   	pop    ebx
c00145bf:	5e                   	pop    esi
c00145c0:	5f                   	pop    edi
c00145c1:	5d                   	pop    ebp
c00145c2:	c3                   	ret    

c00145c3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00145c3:	56                   	push   esi
c00145c4:	31 d2                	xor    edx,edx
c00145c6:	53                   	push   ebx
c00145c7:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00145cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145d1:	39 d3                	cmp    ebx,edx
c00145d3:	7e 1b                	jle    c00145f0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00145d5:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c00145dc:	39 c8                	cmp    eax,ecx
c00145de:	77 0d                	ja     c00145ed <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00145e0:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c00145e7:	01 c6                	add    esi,eax
c00145e9:	39 ce                	cmp    esi,ecx
c00145eb:	77 05                	ja     c00145f2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00145ed:	42                   	inc    edx
c00145ee:	eb e1                	jmp    c00145d1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00145f0:	31 c0                	xor    eax,eax
c00145f2:	5b                   	pop    ebx
c00145f3:	5e                   	pop    esi
c00145f4:	c3                   	ret    

c00145f5 <Thr::getDriverNameFromAddress(unsigned long)>:
c00145f5:	53                   	push   ebx
c00145f6:	31 c0                	xor    eax,eax
c00145f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00145fc:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014602:	39 c3                	cmp    ebx,eax
c0014604:	7e 22                	jle    c0014628 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014606:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c001460d:	39 ca                	cmp    edx,ecx
c001460f:	77 14                	ja     c0014625 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014611:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c0014618:	39 ca                	cmp    edx,ecx
c001461a:	76 09                	jbe    c0014625 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001461c:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c0014623:	eb 05                	jmp    c001462a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014625:	40                   	inc    eax
c0014626:	eb da                	jmp    c0014602 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014628:	31 c0                	xor    eax,eax
c001462a:	5b                   	pop    ebx
c001462b:	c3                   	ret    

c001462c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001462c:	53                   	push   ebx
c001462d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014631:	53                   	push   ebx
c0014632:	e8 8c ff ff ff       	call   c00145c3 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014637:	5a                   	pop    edx
c0014638:	31 d2                	xor    edx,edx
c001463a:	85 c0                	test   eax,eax
c001463c:	74 04                	je     c0014642 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001463e:	89 da                	mov    edx,ebx
c0014640:	29 c2                	sub    edx,eax
c0014642:	89 d0                	mov    eax,edx
c0014644:	5b                   	pop    ebx
c0014645:	c3                   	ret    

c0014646 <Thr::loadDLL(char const*, bool)>:
c0014646:	55                   	push   ebp
c0014647:	57                   	push   edi
c0014648:	56                   	push   esi
c0014649:	53                   	push   ebx
c001464a:	81 ec 34 01 00 00    	sub    esp,0x134
c0014650:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014657:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001465e:	56                   	push   esi
c001465f:	68 67 11 02 c0       	push   0xc0021167
c0014664:	e8 59 63 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0014669:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014670:	e8 39 34 ff ff       	call   c0007aae <malloc>
c0014675:	83 c4 0c             	add    esp,0xc
c0014678:	89 c3                	mov    ebx,eax
c001467a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014680:	56                   	push   esi
c0014681:	50                   	push   eax
c0014682:	e8 bd 68 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c0014687:	83 c4 10             	add    esp,0x10
c001468a:	85 db                	test   ebx,ebx
c001468c:	75 3c                	jne    c00146ca <Thr::loadDLL(char const*, bool)+0x84>
c001468e:	89 f8                	mov    eax,edi
c0014690:	84 c0                	test   al,al
c0014692:	0f 84 d2 01 00 00    	je     c001486a <Thr::loadDLL(char const*, bool)+0x224>
c0014698:	55                   	push   ebp
c0014699:	55                   	push   ebp
c001469a:	68 78 11 02 c0       	push   0xc0021178
c001469f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00146a3:	55                   	push   ebp
c00146a4:	e8 97 bf fe ff       	call   c0000640 <strcpy>
c00146a9:	58                   	pop    eax
c00146aa:	5a                   	pop    edx
c00146ab:	56                   	push   esi
c00146ac:	55                   	push   ebp
c00146ad:	e8 8e c1 fe ff       	call   c0000840 <strcat>
c00146b2:	59                   	pop    ecx
c00146b3:	58                   	pop    eax
c00146b4:	68 8b 11 02 c0       	push   0xc002118b
c00146b9:	55                   	push   ebp
c00146ba:	e8 81 c1 fe ff       	call   c0000840 <strcat>
c00146bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00146c2:	e8 28 c2 ff ff       	call   c00108ef <KePanic(char const*)>
c00146c7:	83 c4 10             	add    esp,0x10
c00146ca:	51                   	push   ecx
c00146cb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00146cf:	50                   	push   eax
c00146d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00146d4:	50                   	push   eax
c00146d5:	53                   	push   ebx
c00146d6:	e8 d1 6b ff ff       	call   c000b2ac <File::stat(unsigned long long*, bool*)>
c00146db:	83 c4 10             	add    esp,0x10
c00146de:	85 db                	test   ebx,ebx
c00146e0:	74 0c                	je     c00146ee <Thr::loadDLL(char const*, bool)+0xa8>
c00146e2:	83 ec 0c             	sub    esp,0xc
c00146e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146e7:	53                   	push   ebx
c00146e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00146f3:	75 0a                	jne    c00146ff <Thr::loadDLL(char const*, bool)+0xb9>
c00146f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146f9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00146fd:	75 3c                	jne    c001473b <Thr::loadDLL(char const*, bool)+0xf5>
c00146ff:	89 f8                	mov    eax,edi
c0014701:	84 c0                	test   al,al
c0014703:	0f 84 49 01 00 00    	je     c0014852 <Thr::loadDLL(char const*, bool)+0x20c>
c0014709:	51                   	push   ecx
c001470a:	51                   	push   ecx
c001470b:	68 78 11 02 c0       	push   0xc0021178
c0014710:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014714:	53                   	push   ebx
c0014715:	e8 26 bf fe ff       	call   c0000640 <strcpy>
c001471a:	5d                   	pop    ebp
c001471b:	58                   	pop    eax
c001471c:	56                   	push   esi
c001471d:	53                   	push   ebx
c001471e:	e8 1d c1 fe ff       	call   c0000840 <strcat>
c0014723:	58                   	pop    eax
c0014724:	5a                   	pop    edx
c0014725:	68 8b 11 02 c0       	push   0xc002118b
c001472a:	53                   	push   ebx
c001472b:	e8 10 c1 fe ff       	call   c0000840 <strcat>
c0014730:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014733:	e8 b7 c1 ff ff       	call   c00108ef <KePanic(char const*)>
c0014738:	83 c4 10             	add    esp,0x10
c001473b:	52                   	push   edx
c001473c:	6a 03                	push   0x3
c001473e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014742:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014746:	05 ff 0f 00 00       	add    eax,0xfff
c001474b:	83 d2 00             	adc    edx,0x0
c001474e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014752:	50                   	push   eax
c0014753:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014759:	e8 ac 56 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c001475e:	59                   	pop    ecx
c001475f:	89 c3                	mov    ebx,eax
c0014761:	5d                   	pop    ebp
c0014762:	50                   	push   eax
c0014763:	68 d2 fc 01 c0       	push   0xc001fcd2
c0014768:	e8 55 62 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001476d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014770:	e8 fb bd fe ff       	call   c0000570 <strlen>
c0014775:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c001477b:	40                   	inc    eax
c001477c:	89 04 24             	mov    DWORD PTR [esp],eax
c001477f:	e8 2a 33 ff ff       	call   c0007aae <malloc>
c0014784:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c001478b:	58                   	pop    eax
c001478c:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014791:	5a                   	pop    edx
c0014792:	56                   	push   esi
c0014793:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c001479a:	e8 a1 be fe ff       	call   c0000640 <strcpy>
c001479f:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00147a4:	8d 50 01             	lea    edx,[eax+0x1]
c00147a7:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c00147ae:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c00147b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00147b8:	83 c4 0c             	add    esp,0xc
c00147bb:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c00147c2:	6a 01                	push   0x1
c00147c4:	53                   	push   ebx
c00147c5:	56                   	push   esi
c00147c6:	e8 bf f6 ff ff       	call   c0013e8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00147cb:	83 c4 10             	add    esp,0x10
c00147ce:	0f b6 c0             	movzx  eax,al
c00147d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147d5:	85 c0                	test   eax,eax
c00147d7:	0f 85 89 00 00 00    	jne    c0014866 <Thr::loadDLL(char const*, bool)+0x220>
c00147dd:	89 f8                	mov    eax,edi
c00147df:	84 c0                	test   al,al
c00147e1:	74 73                	je     c0014856 <Thr::loadDLL(char const*, bool)+0x210>
c00147e3:	83 ec 0c             	sub    esp,0xc
c00147e6:	68 8d 11 02 c0       	push   0xc002118d
c00147eb:	e8 ff c0 ff ff       	call   c00108ef <KePanic(char const*)>
c00147f0:	83 c4 10             	add    esp,0x10
c00147f3:	eb 61                	jmp    c0014856 <Thr::loadDLL(char const*, bool)+0x210>
c00147f5:	50                   	push   eax
c00147f6:	50                   	push   eax
c00147f7:	89 e8                	mov    eax,ebp
c00147f9:	c1 e0 0c             	shl    eax,0xc
c00147fc:	01 d8                	add    eax,ebx
c00147fe:	50                   	push   eax
c00147ff:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014805:	e8 10 51 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c001480a:	83 c4 10             	add    esp,0x10
c001480d:	8b 00                	mov    eax,DWORD PTR [eax]
c001480f:	a8 60                	test   al,0x60
c0014811:	75 11                	jne    c0014824 <Thr::loadDLL(char const*, bool)+0x1de>
c0014813:	83 ec 0c             	sub    esp,0xc
c0014816:	25 00 f0 ff ff       	and    eax,0xfffff000
c001481b:	50                   	push   eax
c001481c:	e8 29 35 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0014821:	83 c4 10             	add    esp,0x10
c0014824:	45                   	inc    ebp
c0014825:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014829:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001482d:	05 ff 0f 00 00       	add    eax,0xfff
c0014832:	bf 00 00 00 00       	mov    edi,0x0
c0014837:	83 d2 00             	adc    edx,0x0
c001483a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001483e:	c1 ea 0c             	shr    edx,0xc
c0014841:	39 c5                	cmp    ebp,eax
c0014843:	89 d1                	mov    ecx,edx
c0014845:	89 f8                	mov    eax,edi
c0014847:	19 c8                	sbb    eax,ecx
c0014849:	72 aa                	jb     c00147f5 <Thr::loadDLL(char const*, bool)+0x1af>
c001484b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014850:	75 18                	jne    c001486a <Thr::loadDLL(char const*, bool)+0x224>
c0014852:	31 db                	xor    ebx,ebx
c0014854:	eb 14                	jmp    c001486a <Thr::loadDLL(char const*, bool)+0x224>
c0014856:	83 ec 0c             	sub    esp,0xc
c0014859:	68 ac 11 02 c0       	push   0xc00211ac
c001485e:	e8 8c c0 ff ff       	call   c00108ef <KePanic(char const*)>
c0014863:	83 c4 10             	add    esp,0x10
c0014866:	31 ed                	xor    ebp,ebp
c0014868:	eb bb                	jmp    c0014825 <Thr::loadDLL(char const*, bool)+0x1df>
c001486a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014870:	89 d8                	mov    eax,ebx
c0014872:	5b                   	pop    ebx
c0014873:	5e                   	pop    esi
c0014874:	5f                   	pop    edi
c0014875:	5d                   	pop    ebp
c0014876:	c3                   	ret    

c0014877 <Thr::executeDLL(unsigned long, void*)>:
c0014877:	56                   	push   esi
c0014878:	53                   	push   ebx
c0014879:	52                   	push   edx
c001487a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001487e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014882:	85 db                	test   ebx,ebx
c0014884:	75 10                	jne    c0014896 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014886:	83 ec 0c             	sub    esp,0xc
c0014889:	68 c8 11 02 c0       	push   0xc00211c8
c001488e:	e8 5c c0 ff ff       	call   c00108ef <KePanic(char const*)>
c0014893:	83 c4 10             	add    esp,0x10
c0014896:	50                   	push   eax
c0014897:	50                   	push   eax
c0014898:	53                   	push   ebx
c0014899:	68 f2 11 02 c0       	push   0xc00211f2
c001489e:	e8 1f 61 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00148a3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00148a7:	89 d8                	mov    eax,ebx
c00148a9:	83 c4 14             	add    esp,0x14
c00148ac:	5b                   	pop    ebx
c00148ad:	5e                   	pop    esi
c00148ae:	ff e0                	jmp    eax

c00148b0 <userModeEntryPoint(void*)>:
c00148b0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00148b5:	83 e8 01             	sub    eax,0x1
c00148b8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00148bd:	75 01                	jne    c00148c0 <userModeEntryPoint(void*)+0x10>
c00148bf:	fb                   	sti    
c00148c0:	fb                   	sti    
c00148c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148c9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00148cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00148d3:	e9 67 b9 fe ff       	jmp    c000023f <goToUsermode>

c00148d8 <changeTSS>:
c00148d8:	83 ec 14             	sub    esp,0x14
c00148db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148e0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00148e3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00148e8:	c1 e2 15             	shl    edx,0x15
c00148eb:	29 d0                	sub    eax,edx
c00148ed:	50                   	push   eax
c00148ee:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00148f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00148f9:	05 7c 11 00 00       	add    eax,0x117c
c00148fe:	50                   	push   eax
c00148ff:	e8 60 46 ff ff       	call   c0008f64 <TSS::setESP(unsigned long)>
c0014904:	83 c4 1c             	add    esp,0x1c
c0014907:	c3                   	ret    

c0014908 <switchToThread(ThreadControlBlock*)>:
c0014908:	57                   	push   edi
c0014909:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001490f:	56                   	push   esi
c0014910:	85 c9                	test   ecx,ecx
c0014912:	53                   	push   ebx
c0014913:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014917:	0f 85 8b 00 00 00    	jne    c00149a8 <switchToThread(ThreadControlBlock*)+0xa0>
c001491d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014921:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014927:	74 7b                	je     c00149a4 <switchToThread(ThreadControlBlock*)+0x9c>
c0014929:	b8 00 04 00 00       	mov    eax,0x400
c001492e:	29 d0                	sub    eax,edx
c0014930:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014933:	d1 f8                	sar    eax,1
c0014935:	01 d0                	add    eax,edx
c0014937:	90                   	nop
c0014938:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001493b:	e8 ae 27 00 00       	call   c00170ee <HalQueryPerformanceCounter()>
c0014940:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c0014945:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c001494b:	89 c6                	mov    esi,eax
c001494d:	89 d7                	mov    edi,edx
c001494f:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0014955:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c001495a:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014960:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014966:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c001496c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014972:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014978:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001497b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001497e:	01 c6                	add    esi,eax
c0014980:	11 d7                	adc    edi,edx
c0014982:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014985:	83 ec 0c             	sub    esp,0xc
c0014988:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001498b:	53                   	push   ebx
c001498c:	e8 e6 b8 fe ff       	call   c0000277 <switchToThreadASM>
c0014991:	0f 20 c0             	mov    eax,cr0
c0014994:	83 c8 08             	or     eax,0x8
c0014997:	0f 22 c0             	mov    cr0,eax
c001499a:	83 c4 10             	add    esp,0x10
c001499d:	5b                   	pop    ebx
c001499e:	5e                   	pop    esi
c001499f:	5f                   	pop    edi
c00149a0:	c3                   	ret    
c00149a1:	8d 76 00             	lea    esi,[esi+0x0]
c00149a4:	31 c0                	xor    eax,eax
c00149a6:	eb 90                	jmp    c0014938 <switchToThread(ThreadControlBlock*)+0x30>
c00149a8:	5b                   	pop    ebx
c00149a9:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00149b3:	5e                   	pop    esi
c00149b4:	5f                   	pop    edi
c00149b5:	c3                   	ret    
c00149b6:	66 90                	xchg   ax,ax

c00149b8 <Process::addArgs(char**)>:
c00149b8:	57                   	push   edi
c00149b9:	56                   	push   esi
c00149ba:	53                   	push   ebx
c00149bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00149c3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00149cd:	85 ff                	test   edi,edi
c00149cf:	74 4f                	je     c0014a20 <Process::addArgs(char**)+0x68>
c00149d1:	8b 07                	mov    eax,DWORD PTR [edi]
c00149d3:	85 c0                	test   eax,eax
c00149d5:	74 49                	je     c0014a20 <Process::addArgs(char**)+0x68>
c00149d7:	31 db                	xor    ebx,ebx
c00149d9:	8d 76 00             	lea    esi,[esi+0x0]
c00149dc:	83 ec 0c             	sub    esp,0xc
c00149df:	50                   	push   eax
c00149e0:	e8 8b bb fe ff       	call   c0000570 <strlen>
c00149e5:	83 c0 01             	add    eax,0x1
c00149e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00149eb:	e8 be 30 ff ff       	call   c0007aae <malloc>
c00149f0:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00149f7:	5a                   	pop    edx
c00149f8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00149fb:	59                   	pop    ecx
c00149fc:	83 c3 01             	add    ebx,0x1
c00149ff:	52                   	push   edx
c0014a00:	50                   	push   eax
c0014a01:	e8 3a bc fe ff       	call   c0000640 <strcpy>
c0014a06:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014a0c:	83 c4 10             	add    esp,0x10
c0014a0f:	83 c1 01             	add    ecx,0x1
c0014a12:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014a18:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014a1b:	85 c0                	test   eax,eax
c0014a1d:	75 bd                	jne    c00149dc <Process::addArgs(char**)+0x24>
c0014a1f:	90                   	nop
c0014a20:	5b                   	pop    ebx
c0014a21:	5e                   	pop    esi
c0014a22:	5f                   	pop    edi
c0014a23:	c3                   	ret    

c0014a24 <Process::Process(char const*, Process*, char**)>:
c0014a24:	56                   	push   esi
c0014a25:	53                   	push   ebx
c0014a26:	83 ec 14             	sub    esp,0x14
c0014a29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a2d:	05 0c 02 00 00       	add    eax,0x20c
c0014a32:	bb 07 00 00 00       	mov    ebx,0x7
c0014a37:	89 c6                	mov    esi,eax
c0014a39:	8d 76 00             	lea    esi,[esi+0x0]
c0014a3c:	85 db                	test   ebx,ebx
c0014a3e:	78 14                	js     c0014a54 <Process::Process(char const*, Process*, char**)+0x30>
c0014a40:	83 ec 0c             	sub    esp,0xc
c0014a43:	56                   	push   esi
c0014a44:	e8 0f a5 00 00       	call   c001ef58 <ThreadControlBlock::ThreadControlBlock()>
c0014a49:	83 c4 10             	add    esp,0x10
c0014a4c:	83 c6 5f             	add    esi,0x5f
c0014a4f:	83 eb 01             	sub    ebx,0x1
c0014a52:	eb e8                	jmp    c0014a3c <Process::Process(char const*, Process*, char**)+0x18>
c0014a54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a58:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a63:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014a6a:	83 ec 0c             	sub    esp,0xc
c0014a6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a71:	e8 6e bc ff ff       	call   c00106e4 <Krnl::newProcessEnv(Process*)>
c0014a76:	83 c4 10             	add    esp,0x10
c0014a79:	89 c2                	mov    edx,eax
c0014a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a7f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014a85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a89:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a92:	a1 c0 23 02 c0       	mov    eax,ds:0xc00223c0
c0014a97:	8d 50 01             	lea    edx,[eax+0x1]
c0014a9a:	89 15 c0 23 02 c0    	mov    DWORD PTR ds:0xc00223c0,edx
c0014aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014aa4:	89 02                	mov    DWORD PTR [edx],eax
c0014aa6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014aae:	83 ec 0c             	sub    esp,0xc
c0014ab1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ab5:	e8 f4 2f ff ff       	call   c0007aae <malloc>
c0014aba:	83 c4 10             	add    esp,0x10
c0014abd:	89 c3                	mov    ebx,eax
c0014abf:	83 ec 08             	sub    esp,0x8
c0014ac2:	6a 00                	push   0x0
c0014ac4:	53                   	push   ebx
c0014ac5:	e8 1a 57 ff ff       	call   c000a1e4 <VAS::VAS(bool)>
c0014aca:	83 c4 10             	add    esp,0x10
c0014acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014adb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ae9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014aed:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014af3:	e8 12 c2 ff ff       	call   c0010d0a <KeInitSignals()>
c0014af8:	89 c2                	mov    edx,eax
c0014afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014afe:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b08:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b0e:	85 c0                	test   eax,eax
c0014b10:	74 42                	je     c0014b54 <Process::Process(char const*, Process*, char**)+0x130>
c0014b12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b16:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b1c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014b22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b26:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014b2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b30:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b36:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b40:	05 0c 01 00 00       	add    eax,0x10c
c0014b45:	83 ec 08             	sub    esp,0x8
c0014b48:	52                   	push   edx
c0014b49:	50                   	push   eax
c0014b4a:	e8 f1 ba fe ff       	call   c0000640 <strcpy>
c0014b4f:	83 c4 10             	add    esp,0x10
c0014b52:	eb 64                	jmp    c0014bb8 <Process::Process(char const*, Process*, char**)+0x194>
c0014b54:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014b5c:	83 ec 0c             	sub    esp,0xc
c0014b5f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b63:	e8 46 2f ff ff       	call   c0007aae <malloc>
c0014b68:	83 c4 10             	add    esp,0x10
c0014b6b:	89 c3                	mov    ebx,eax
c0014b6d:	83 ec 08             	sub    esp,0x8
c0014b70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b74:	53                   	push   ebx
c0014b75:	e8 d6 40 ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0014b7a:	83 c4 10             	add    esp,0x10
c0014b7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b81:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b8b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b91:	83 ec 0c             	sub    esp,0xc
c0014b94:	50                   	push   eax
c0014b95:	e8 54 39 ff ff       	call   c00084ee <addToTerminalCycle(VgaText*)>
c0014b9a:	83 c4 10             	add    esp,0x10
c0014b9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ba1:	05 0c 01 00 00       	add    eax,0x10c
c0014ba6:	83 ec 08             	sub    esp,0x8
c0014ba9:	68 11 12 02 c0       	push   0xc0021211
c0014bae:	50                   	push   eax
c0014baf:	e8 8c ba fe ff       	call   c0000640 <strcpy>
c0014bb4:	83 c4 10             	add    esp,0x10
c0014bb7:	90                   	nop
c0014bb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bbc:	83 c0 0c             	add    eax,0xc
c0014bbf:	83 ec 08             	sub    esp,0x8
c0014bc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bc6:	50                   	push   eax
c0014bc7:	e8 74 ba fe ff       	call   c0000640 <strcpy>
c0014bcc:	83 c4 10             	add    esp,0x10
c0014bcf:	83 ec 08             	sub    esp,0x8
c0014bd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014bd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bda:	e8 d9 fd ff ff       	call   c00149b8 <Process::addArgs(char**)>
c0014bdf:	83 c4 10             	add    esp,0x10
c0014be2:	83 ec 08             	sub    esp,0x8
c0014be5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014be9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bed:	e8 66 ed ff ff       	call   c0013958 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014bf2:	83 c4 10             	add    esp,0x10
c0014bf5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014bf9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014bfd:	83 f0 01             	xor    eax,0x1
c0014c00:	88 c2                	mov    dl,al
c0014c02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c06:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014c0c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014c11:	83 ec 04             	sub    esp,0x4
c0014c14:	50                   	push   eax
c0014c15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c19:	68 68 12 02 c0       	push   0xc0021268
c0014c1e:	e8 9f 5d ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0014c23:	83 c4 10             	add    esp,0x10
c0014c26:	90                   	nop
c0014c27:	83 c4 14             	add    esp,0x14
c0014c2a:	5b                   	pop    ebx
c0014c2b:	5e                   	pop    esi
c0014c2c:	c3                   	ret    
c0014c2d:	90                   	nop
c0014c2e:	66 90                	xchg   ax,ax

c0014c30 <Process::Process(bool, char const*, Process*, char**)>:
c0014c30:	56                   	push   esi
c0014c31:	53                   	push   ebx
c0014c32:	83 ec 24             	sub    esp,0x24
c0014c35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c39:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014c3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c41:	05 0c 02 00 00       	add    eax,0x20c
c0014c46:	bb 07 00 00 00       	mov    ebx,0x7
c0014c4b:	89 c6                	mov    esi,eax
c0014c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c50:	85 db                	test   ebx,ebx
c0014c52:	78 14                	js     c0014c68 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014c54:	83 ec 0c             	sub    esp,0xc
c0014c57:	56                   	push   esi
c0014c58:	e8 fb a2 00 00       	call   c001ef58 <ThreadControlBlock::ThreadControlBlock()>
c0014c5d:	83 c4 10             	add    esp,0x10
c0014c60:	83 c6 5f             	add    esi,0x5f
c0014c63:	83 eb 01             	sub    ebx,0x1
c0014c66:	eb e8                	jmp    c0014c50 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c6c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c77:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014c7e:	83 ec 0c             	sub    esp,0xc
c0014c81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014c85:	e8 5a ba ff ff       	call   c00106e4 <Krnl::newProcessEnv(Process*)>
c0014c8a:	83 c4 10             	add    esp,0x10
c0014c8d:	89 c2                	mov    edx,eax
c0014c8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c93:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c9d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014ca6:	a1 c0 23 02 c0       	mov    eax,ds:0xc00223c0
c0014cab:	8d 50 01             	lea    edx,[eax+0x1]
c0014cae:	89 15 c0 23 02 c0    	mov    DWORD PTR ds:0xc00223c0,edx
c0014cb4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014cb8:	89 02                	mov    DWORD PTR [edx],eax
c0014cba:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014cc2:	83 ec 0c             	sub    esp,0xc
c0014cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014cc9:	e8 e0 2d ff ff       	call   c0007aae <malloc>
c0014cce:	83 c4 10             	add    esp,0x10
c0014cd1:	89 c3                	mov    ebx,eax
c0014cd3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014cd8:	83 ec 08             	sub    esp,0x8
c0014cdb:	50                   	push   eax
c0014cdc:	53                   	push   ebx
c0014cdd:	e8 02 55 ff ff       	call   c000a1e4 <VAS::VAS(bool)>
c0014ce2:	83 c4 10             	add    esp,0x10
c0014ce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014cef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cf3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014cfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d01:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d05:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014d0b:	e8 fa bf ff ff       	call   c0010d0a <KeInitSignals()>
c0014d10:	89 c2                	mov    edx,eax
c0014d12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d16:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014d1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d20:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d26:	85 c0                	test   eax,eax
c0014d28:	74 42                	je     c0014d6c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014d2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d2e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d34:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014d3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d3e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014d44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d48:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d4e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014d54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d58:	05 0c 01 00 00       	add    eax,0x10c
c0014d5d:	83 ec 08             	sub    esp,0x8
c0014d60:	52                   	push   edx
c0014d61:	50                   	push   eax
c0014d62:	e8 d9 b8 fe ff       	call   c0000640 <strcpy>
c0014d67:	83 c4 10             	add    esp,0x10
c0014d6a:	eb 64                	jmp    c0014dd0 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014d6c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014d74:	83 ec 0c             	sub    esp,0xc
c0014d77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d7b:	e8 2e 2d ff ff       	call   c0007aae <malloc>
c0014d80:	83 c4 10             	add    esp,0x10
c0014d83:	89 c3                	mov    ebx,eax
c0014d85:	83 ec 08             	sub    esp,0x8
c0014d88:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d8c:	53                   	push   ebx
c0014d8d:	e8 be 3e ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0014d92:	83 c4 10             	add    esp,0x10
c0014d95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d99:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014da3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014da9:	83 ec 0c             	sub    esp,0xc
c0014dac:	50                   	push   eax
c0014dad:	e8 3c 37 ff ff       	call   c00084ee <addToTerminalCycle(VgaText*)>
c0014db2:	83 c4 10             	add    esp,0x10
c0014db5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014db9:	05 0c 01 00 00       	add    eax,0x10c
c0014dbe:	83 ec 08             	sub    esp,0x8
c0014dc1:	68 11 12 02 c0       	push   0xc0021211
c0014dc6:	50                   	push   eax
c0014dc7:	e8 74 b8 fe ff       	call   c0000640 <strcpy>
c0014dcc:	83 c4 10             	add    esp,0x10
c0014dcf:	90                   	nop
c0014dd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dd4:	83 c0 0c             	add    eax,0xc
c0014dd7:	83 ec 08             	sub    esp,0x8
c0014dda:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014dde:	50                   	push   eax
c0014ddf:	e8 5c b8 fe ff       	call   c0000640 <strcpy>
c0014de4:	83 c4 10             	add    esp,0x10
c0014de7:	83 ec 08             	sub    esp,0x8
c0014dea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014dee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014df2:	e8 c1 fb ff ff       	call   c00149b8 <Process::addArgs(char**)>
c0014df7:	83 c4 10             	add    esp,0x10
c0014dfa:	90                   	nop
c0014dfb:	83 c4 24             	add    esp,0x24
c0014dfe:	5b                   	pop    ebx
c0014dff:	5e                   	pop    esi
c0014e00:	c3                   	ret    
c0014e01:	8d 76 00             	lea    esi,[esi+0x0]

c0014e04 <taskStartupFunction>:
c0014e04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e09:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014e0c:	c3                   	ret    
c0014e0d:	90                   	nop
c0014e0e:	66 90                	xchg   ax,ax

c0014e10 <Semaphore::Semaphore(int)>:
c0014e10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e18:	89 10                	mov    DWORD PTR [eax],edx
c0014e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e1e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014e25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e29:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014e30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e34:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014e3b:	90                   	nop
c0014e3c:	c3                   	ret    
c0014e3d:	90                   	nop
c0014e3e:	66 90                	xchg   ax,ax

c0014e40 <Mutex::Mutex()>:
c0014e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e44:	6a 01                	push   0x1
c0014e46:	50                   	push   eax
c0014e47:	e8 c4 ff ff ff       	call   c0014e10 <Semaphore::Semaphore(int)>
c0014e4c:	83 c4 08             	add    esp,0x8
c0014e4f:	90                   	nop
c0014e50:	c3                   	ret    
c0014e51:	90                   	nop
c0014e52:	66 90                	xchg   ax,ax

c0014e54 <Process::createThread(void (*)(void*), void*, int)>:
c0014e54:	57                   	push   edi
c0014e55:	31 c9                	xor    ecx,ecx
c0014e57:	56                   	push   esi
c0014e58:	53                   	push   ebx
c0014e59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e5d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014e64:	89 f2                	mov    edx,esi
c0014e66:	66 90                	xchg   ax,ax
c0014e68:	0f b7 c2             	movzx  eax,dx
c0014e6b:	80 e2 01             	and    dl,0x1
c0014e6e:	74 14                	je     c0014e84 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014e70:	d1 f8                	sar    eax,1
c0014e72:	83 c1 01             	add    ecx,0x1
c0014e75:	89 c2                	mov    edx,eax
c0014e77:	83 f9 10             	cmp    ecx,0x10
c0014e7a:	75 ec                	jne    c0014e68 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014e7c:	31 db                	xor    ebx,ebx
c0014e7e:	89 d8                	mov    eax,ebx
c0014e80:	5b                   	pop    ebx
c0014e81:	5e                   	pop    esi
c0014e82:	5f                   	pop    edi
c0014e83:	c3                   	ret    
c0014e84:	b8 01 00 00 00       	mov    eax,0x1
c0014e89:	d3 e0                	shl    eax,cl
c0014e8b:	09 c6                	or     esi,eax
c0014e8d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014e90:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014e97:	01 c0                	add    eax,eax
c0014e99:	01 c8                	add    eax,ecx
c0014e9b:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e9e:	01 d8                	add    eax,ebx
c0014ea0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014ea7:	75 0b                	jne    c0014eb4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014ea9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014eb3:	90                   	nop
c0014eb4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014eba:	83 ec 0c             	sub    esp,0xc
c0014ebd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014ec0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014ec3:	01 c0                	add    eax,eax
c0014ec5:	01 c8                	add    eax,ecx
c0014ec7:	8d 3c 80             	lea    edi,[eax+eax*4]
c0014eca:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0014ecd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014ed3:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0014ed9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014edd:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014ee3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014ee9:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014eef:	89 ca                	mov    edx,ecx
c0014ef1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014ef8:	f7 da                	neg    edx
c0014efa:	c1 e2 15             	shl    edx,0x15
c0014efd:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014f03:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014f09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014f0d:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014f17:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014f1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014f21:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014f27:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014f31:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014f3b:	68 00 01 00 00       	push   0x100
c0014f40:	e8 69 2b ff ff       	call   c0007aae <malloc>
c0014f45:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014f48:	58                   	pop    eax
c0014f49:	5a                   	pop    edx
c0014f4a:	53                   	push   ebx
c0014f4b:	68 84 81 02 c0       	push   0xc0028184
c0014f50:	e8 9b 9d 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f55:	83 c4 10             	add    esp,0x10
c0014f58:	89 d8                	mov    eax,ebx
c0014f5a:	5b                   	pop    ebx
c0014f5b:	5e                   	pop    esi
c0014f5c:	5f                   	pop    edi
c0014f5d:	c3                   	ret    
c0014f5e:	66 90                	xchg   ax,ax

c0014f60 <Process::createUserThread()>:
c0014f60:	83 ec 0c             	sub    esp,0xc
c0014f63:	68 80 00 00 00       	push   0x80
c0014f68:	6a 00                	push   0x0
c0014f6a:	68 b0 48 01 c0       	push   0xc00148b0
c0014f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f73:	50                   	push   eax
c0014f74:	e8 db fe ff ff       	call   c0014e54 <Process::createThread(void (*)(void*), void*, int)>
c0014f79:	83 c4 1c             	add    esp,0x1c
c0014f7c:	c3                   	ret    
c0014f7d:	8d 76 00             	lea    esi,[esi+0x0]

c0014f80 <setupMultitasking(void (*)())>:
c0014f80:	56                   	push   esi
c0014f81:	53                   	push   ebx
c0014f82:	83 ec 04             	sub    esp,0x4
c0014f85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f89:	eb 11                	jmp    c0014f9c <setupMultitasking(void (*)())+0x1c>
c0014f8b:	90                   	nop
c0014f8c:	83 ec 0c             	sub    esp,0xc
c0014f8f:	68 84 81 02 c0       	push   0xc0028184
c0014f94:	e8 9b 9c 00 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f99:	83 c4 10             	add    esp,0x10
c0014f9c:	83 ec 0c             	sub    esp,0xc
c0014f9f:	68 84 81 02 c0       	push   0xc0028184
c0014fa4:	e8 67 9c 00 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014fa9:	83 c4 10             	add    esp,0x10
c0014fac:	84 c0                	test   al,al
c0014fae:	74 dc                	je     c0014f8c <setupMultitasking(void (*)())+0xc>
c0014fb0:	83 ec 0c             	sub    esp,0xc
c0014fb3:	68 24 07 00 00       	push   0x724
c0014fb8:	e8 f1 2a ff ff       	call   c0007aae <malloc>
c0014fbd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014fc4:	89 c3                	mov    ebx,eax
c0014fc6:	6a 00                	push   0x0
c0014fc8:	68 15 12 02 c0       	push   0xc0021215
c0014fcd:	6a 01                	push   0x1
c0014fcf:	50                   	push   eax
c0014fd0:	e8 5b fc ff ff       	call   c0014c30 <Process::Process(bool, char const*, Process*, char**)>
c0014fd5:	83 c4 14             	add    esp,0x14
c0014fd8:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014fde:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014fe4:	50                   	push   eax
c0014fe5:	e8 59 37 ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c0014fea:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014ff1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014ffb:	83 c8 01             	or     eax,0x1
c0014ffe:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015005:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001500b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001500e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015018:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001501e:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015024:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001502e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015038:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015042:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015048:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015052:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015058:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015062:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015069:	e8 40 2a ff ff       	call   c0007aae <malloc>
c001506e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015074:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001507a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015080:	5a                   	pop    edx
c0015081:	59                   	pop    ecx
c0015082:	68 11 12 02 c0       	push   0xc0021211
c0015087:	50                   	push   eax
c0015088:	e8 b3 b5 fe ff       	call   c0000640 <strcpy>
c001508d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015094:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015098:	83 c4 14             	add    esp,0x14
c001509b:	5b                   	pop    ebx
c001509c:	5e                   	pop    esi
c001509d:	e9 c7 b1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00150a2:	66 90                	xchg   ax,ax

c00150a4 <schedule()>:
c00150a4:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c00150aa:	85 d2                	test   edx,edx
c00150ac:	74 0e                	je     c00150bc <schedule()+0x18>
c00150ae:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00150b8:	c3                   	ret    
c00150b9:	8d 76 00             	lea    esi,[esi+0x0]
c00150bc:	53                   	push   ebx
c00150bd:	83 ec 14             	sub    esp,0x14
c00150c0:	68 84 81 02 c0       	push   0xc0028184
c00150c5:	e8 46 9b 00 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00150ca:	83 c4 10             	add    esp,0x10
c00150cd:	84 c0                	test   al,al
c00150cf:	75 3f                	jne    c0015110 <schedule()+0x6c>
c00150d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00150d9:	83 fa 01             	cmp    edx,0x1
c00150dc:	74 3a                	je     c0015118 <schedule()+0x74>
c00150de:	66 90                	xchg   ax,ax
c00150e0:	83 ec 0c             	sub    esp,0xc
c00150e3:	68 84 81 02 c0       	push   0xc0028184
c00150e8:	e8 3f 9b 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00150ed:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00150f4:	89 c3                	mov    ebx,eax
c00150f6:	e8 39 9b 00 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00150fb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015102:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015105:	e8 fe f7 ff ff       	call   c0014908 <switchToThread(ThreadControlBlock*)>
c001510a:	83 c4 10             	add    esp,0x10
c001510d:	8d 76 00             	lea    esi,[esi+0x0]
c0015110:	83 c4 08             	add    esp,0x8
c0015113:	5b                   	pop    ebx
c0015114:	c3                   	ret    
c0015115:	8d 76 00             	lea    esi,[esi+0x0]
c0015118:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001511f:	83 ec 08             	sub    esp,0x8
c0015122:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015127:	50                   	push   eax
c0015128:	68 84 81 02 c0       	push   0xc0028184
c001512d:	e8 be 9b 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015132:	83 c4 10             	add    esp,0x10
c0015135:	eb a9                	jmp    c00150e0 <schedule()+0x3c>
c0015137:	90                   	nop

c0015138 <Semaphore::tryAcquire()>:
c0015138:	53                   	push   ebx
c0015139:	83 ec 08             	sub    esp,0x8
c001513c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015140:	fa                   	cli    
c0015141:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015146:	8d 50 01             	lea    edx,[eax+0x1]
c0015149:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001514f:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015155:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015158:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c001515e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015161:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015163:	7c 33                	jl     c0015198 <Semaphore::tryAcquire()+0x60>
c0015165:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c001516b:	85 d2                	test   edx,edx
c001516d:	75 0d                	jne    c001517c <Semaphore::tryAcquire()+0x44>
c001516f:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015175:	85 d2                	test   edx,edx
c0015177:	75 6f                	jne    c00151e8 <Semaphore::tryAcquire()+0xb0>
c0015179:	8d 76 00             	lea    esi,[esi+0x0]
c001517c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015181:	85 c0                	test   eax,eax
c0015183:	74 0b                	je     c0015190 <Semaphore::tryAcquire()+0x58>
c0015185:	8d 76 00             	lea    esi,[esi+0x0]
c0015188:	31 c0                	xor    eax,eax
c001518a:	83 c4 08             	add    esp,0x8
c001518d:	5b                   	pop    ebx
c001518e:	c3                   	ret    
c001518f:	90                   	nop
c0015190:	fb                   	sti    
c0015191:	83 c4 08             	add    esp,0x8
c0015194:	5b                   	pop    ebx
c0015195:	c3                   	ret    
c0015196:	66 90                	xchg   ax,ax
c0015198:	83 c3 01             	add    ebx,0x1
c001519b:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c00151a1:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00151a4:	85 d2                	test   edx,edx
c00151a6:	75 24                	jne    c00151cc <Semaphore::tryAcquire()+0x94>
c00151a8:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c00151ae:	85 c9                	test   ecx,ecx
c00151b0:	74 1a                	je     c00151cc <Semaphore::tryAcquire()+0x94>
c00151b2:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00151bc:	e8 e3 fe ff ff       	call   c00150a4 <schedule()>
c00151c1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151c6:	83 e8 01             	sub    eax,0x1
c00151c9:	8d 76 00             	lea    esi,[esi+0x0]
c00151cc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151d1:	85 c0                	test   eax,eax
c00151d3:	75 0b                	jne    c00151e0 <Semaphore::tryAcquire()+0xa8>
c00151d5:	fb                   	sti    
c00151d6:	b0 01                	mov    al,0x1
c00151d8:	83 c4 08             	add    esp,0x8
c00151db:	5b                   	pop    ebx
c00151dc:	c3                   	ret    
c00151dd:	8d 76 00             	lea    esi,[esi+0x0]
c00151e0:	b0 01                	mov    al,0x1
c00151e2:	83 c4 08             	add    esp,0x8
c00151e5:	5b                   	pop    ebx
c00151e6:	c3                   	ret    
c00151e7:	90                   	nop
c00151e8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00151f2:	e8 ad fe ff ff       	call   c00150a4 <schedule()>
c00151f7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151fc:	83 e8 01             	sub    eax,0x1
c00151ff:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015204:	85 c0                	test   eax,eax
c0015206:	75 80                	jne    c0015188 <Semaphore::tryAcquire()+0x50>
c0015208:	eb 86                	jmp    c0015190 <Semaphore::tryAcquire()+0x58>
c001520a:	66 90                	xchg   ax,ax

c001520c <Semaphore::assertLocked(char const*)>:
c001520c:	83 ec 0c             	sub    esp,0xc
c001520f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015213:	fa                   	cli    
c0015214:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001521a:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001521f:	83 c1 01             	add    ecx,0x1
c0015222:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015228:	8d 48 01             	lea    ecx,[eax+0x1]
c001522b:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015231:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015233:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015236:	7c 28                	jl     c0015260 <Semaphore::assertLocked(char const*)+0x54>
c0015238:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001523d:	85 c0                	test   eax,eax
c001523f:	75 0b                	jne    c001524c <Semaphore::assertLocked(char const*)+0x40>
c0015241:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015246:	85 c0                	test   eax,eax
c0015248:	75 32                	jne    c001527c <Semaphore::assertLocked(char const*)+0x70>
c001524a:	66 90                	xchg   ax,ax
c001524c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015251:	83 e8 01             	sub    eax,0x1
c0015254:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015259:	75 01                	jne    c001525c <Semaphore::assertLocked(char const*)+0x50>
c001525b:	fb                   	sti    
c001525c:	83 c4 0c             	add    esp,0xc
c001525f:	c3                   	ret    
c0015260:	83 ec 0c             	sub    esp,0xc
c0015263:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015267:	52                   	push   edx
c0015268:	e8 82 b6 ff ff       	call   c00108ef <KePanic(char const*)>
c001526d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015272:	83 c4 10             	add    esp,0x10
c0015275:	83 e8 01             	sub    eax,0x1
c0015278:	eb be                	jmp    c0015238 <Semaphore::assertLocked(char const*)+0x2c>
c001527a:	66 90                	xchg   ax,ax
c001527c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015286:	e8 19 fe ff ff       	call   c00150a4 <schedule()>
c001528b:	eb bf                	jmp    c001524c <Semaphore::assertLocked(char const*)+0x40>
c001528d:	8d 76 00             	lea    esi,[esi+0x0]

c0015290 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015290:	83 ec 0c             	sub    esp,0xc
c0015293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015298:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001529c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001529f:	e8 00 fe ff ff       	call   c00150a4 <schedule()>
c00152a4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152a9:	83 e8 01             	sub    eax,0x1
c00152ac:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152b1:	75 01                	jne    c00152b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00152b3:	fb                   	sti    
c00152b4:	83 c4 0c             	add    esp,0xc
c00152b7:	c3                   	ret    

c00152b8 <blockTask(TaskState)>:
c00152b8:	83 ec 0c             	sub    esp,0xc
c00152bb:	fa                   	cli    
c00152bc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152c5:	83 c0 01             	add    eax,0x1
c00152c8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152d2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00152d5:	e8 ca fd ff ff       	call   c00150a4 <schedule()>
c00152da:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152df:	83 e8 01             	sub    eax,0x1
c00152e2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152e7:	75 03                	jne    c00152ec <blockTask(TaskState)+0x34>
c00152e9:	fb                   	sti    
c00152ea:	66 90                	xchg   ax,ax
c00152ec:	83 c4 0c             	add    esp,0xc
c00152ef:	c3                   	ret    

c00152f0 <waitTask(int, int*, int)>:
c00152f0:	83 ec 18             	sub    esp,0x18
c00152f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00152fc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00152ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015303:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015308:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001530b:	6a 07                	push   0x7
c001530d:	e8 a6 ff ff ff       	call   c00152b8 <blockTask(TaskState)>
c0015312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015317:	83 c4 10             	add    esp,0x10
c001531a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001531d:	85 d2                	test   edx,edx
c001531f:	74 0b                	je     c001532c <waitTask(int, int*, int)+0x3c>
c0015321:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015324:	89 02                	mov    DWORD PTR [edx],eax
c0015326:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001532b:	90                   	nop
c001532c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001532f:	83 c4 0c             	add    esp,0xc
c0015332:	c3                   	ret    
c0015333:	90                   	nop

c0015334 <milliTenthSleepUntil(unsigned int)>:
c0015334:	83 ec 0c             	sub    esp,0xc
c0015337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001533b:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c0015341:	76 05                	jbe    c0015348 <milliTenthSleepUntil(unsigned int)+0x14>
c0015343:	90                   	nop
c0015344:	83 c4 0c             	add    esp,0xc
c0015347:	c3                   	ret    
c0015348:	fa                   	cli    
c0015349:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001534f:	83 ec 08             	sub    esp,0x8
c0015352:	83 c2 01             	add    edx,0x1
c0015355:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001535b:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015361:	83 c1 01             	add    ecx,0x1
c0015364:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001536a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015370:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015373:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015378:	50                   	push   eax
c0015379:	68 78 81 02 c0       	push   0xc0028178
c001537e:	e8 6d 99 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015383:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001538a:	e8 29 ff ff ff       	call   c00152b8 <blockTask(TaskState)>
c001538f:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015394:	83 c4 10             	add    esp,0x10
c0015397:	83 e8 01             	sub    eax,0x1
c001539a:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001539f:	85 c0                	test   eax,eax
c00153a1:	75 09                	jne    c00153ac <milliTenthSleepUntil(unsigned int)+0x78>
c00153a3:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153a8:	85 c0                	test   eax,eax
c00153aa:	75 14                	jne    c00153c0 <milliTenthSleepUntil(unsigned int)+0x8c>
c00153ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153b1:	83 e8 01             	sub    eax,0x1
c00153b4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153b9:	75 89                	jne    c0015344 <milliTenthSleepUntil(unsigned int)+0x10>
c00153bb:	fb                   	sti    
c00153bc:	83 c4 0c             	add    esp,0xc
c00153bf:	c3                   	ret    
c00153c0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00153ca:	e8 d5 fc ff ff       	call   c00150a4 <schedule()>
c00153cf:	eb db                	jmp    c00153ac <milliTenthSleepUntil(unsigned int)+0x78>
c00153d1:	8d 76 00             	lea    esi,[esi+0x0]

c00153d4 <milliTenthSleep(unsigned int)>:
c00153d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00153d8:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c00153dd:	01 c2                	add    edx,eax
c00153df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00153e3:	e9 4c ff ff ff       	jmp    c0015334 <milliTenthSleepUntil(unsigned int)>

c00153e8 <sleep(unsigned int)>:
c00153e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153ec:	8d 04 80             	lea    eax,[eax+eax*4]
c00153ef:	8d 04 80             	lea    eax,[eax+eax*4]
c00153f2:	8d 04 80             	lea    eax,[eax+eax*4]
c00153f5:	8d 04 80             	lea    eax,[eax+eax*4]
c00153f8:	c1 e0 04             	shl    eax,0x4
c00153fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153ff:	eb d3                	jmp    c00153d4 <milliTenthSleep(unsigned int)>
c0015401:	90                   	nop
c0015402:	66 90                	xchg   ax,ax

c0015404 <Semaphore::acquire()>:
c0015404:	83 ec 0c             	sub    esp,0xc
c0015407:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001540b:	fa                   	cli    
c001540c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015411:	83 c0 01             	add    eax,0x1
c0015414:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015419:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001541e:	8d 48 01             	lea    ecx,[eax+0x1]
c0015421:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015427:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001542a:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001542c:	7d 2e                	jge    c001545c <Semaphore::acquire()+0x58>
c001542e:	83 c1 01             	add    ecx,0x1
c0015431:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015434:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015439:	85 c0                	test   eax,eax
c001543b:	75 0b                	jne    c0015448 <Semaphore::acquire()+0x44>
c001543d:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015442:	85 c0                	test   eax,eax
c0015444:	75 66                	jne    c00154ac <Semaphore::acquire()+0xa8>
c0015446:	66 90                	xchg   ax,ax
c0015448:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001544d:	83 e8 01             	sub    eax,0x1
c0015450:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015455:	75 01                	jne    c0015458 <Semaphore::acquire()+0x54>
c0015457:	fb                   	sti    
c0015458:	83 c4 0c             	add    esp,0xc
c001545b:	c3                   	ret    
c001545c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015461:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015468:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001546b:	85 c9                	test   ecx,ecx
c001546d:	74 51                	je     c00154c0 <Semaphore::acquire()+0xbc>
c001546f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015472:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015478:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001547b:	90                   	nop
c001547c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015481:	83 ec 0c             	sub    esp,0xc
c0015484:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015487:	68 94 12 02 c0       	push   0xc0021294
c001548c:	e8 31 55 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0015491:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015498:	e8 1b fe ff ff       	call   c00152b8 <blockTask(TaskState)>
c001549d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00154a2:	83 c4 10             	add    esp,0x10
c00154a5:	83 e8 01             	sub    eax,0x1
c00154a8:	eb 8a                	jmp    c0015434 <Semaphore::acquire()+0x30>
c00154aa:	66 90                	xchg   ax,ax
c00154ac:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00154b6:	e8 e9 fb ff ff       	call   c00150a4 <schedule()>
c00154bb:	eb 8b                	jmp    c0015448 <Semaphore::acquire()+0x44>
c00154bd:	8d 76 00             	lea    esi,[esi+0x0]
c00154c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00154c8:	eb b2                	jmp    c001547c <Semaphore::acquire()+0x78>
c00154ca:	66 90                	xchg   ax,ax

c00154cc <taskReturned>:
c00154cc:	83 ec 18             	sub    esp,0x18
c00154cf:	68 b4 12 02 c0       	push   0xc00212b4
c00154d4:	e8 16 b4 ff ff       	call   c00108ef <KePanic(char const*)>
c00154d9:	83 c4 10             	add    esp,0x10
c00154dc:	83 ec 0c             	sub    esp,0xc
c00154df:	6a 02                	push   0x2
c00154e1:	e8 d2 fd ff ff       	call   c00152b8 <blockTask(TaskState)>
c00154e6:	fa                   	cli    
c00154e7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154ec:	83 c0 01             	add    eax,0x1
c00154ef:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154f4:	e8 ab fb ff ff       	call   c00150a4 <schedule()>
c00154f9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154fe:	83 c4 10             	add    esp,0x10
c0015501:	83 e8 01             	sub    eax,0x1
c0015504:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015509:	85 c0                	test   eax,eax
c001550b:	75 cf                	jne    c00154dc <taskReturned+0x10>
c001550d:	fb                   	sti    
c001550e:	eb cc                	jmp    c00154dc <taskReturned+0x10>

c0015510 <Thr::processFromPID(int)>:
c0015510:	57                   	push   edi
c0015511:	56                   	push   esi
c0015512:	53                   	push   ebx
c0015513:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015517:	fa                   	cli    
c0015518:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001551e:	83 ec 0c             	sub    esp,0xc
c0015521:	83 c1 01             	add    ecx,0x1
c0015524:	68 84 81 02 c0       	push   0xc0028184
c0015529:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c001552f:	e8 f8 96 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015534:	83 c4 10             	add    esp,0x10
c0015537:	89 c7                	mov    edi,eax
c0015539:	eb 15                	jmp    c0015550 <Thr::processFromPID(int)+0x40>
c001553b:	90                   	nop
c001553c:	83 ec 0c             	sub    esp,0xc
c001553f:	68 84 81 02 c0       	push   0xc0028184
c0015544:	e8 e3 96 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015549:	83 c4 10             	add    esp,0x10
c001554c:	39 f8                	cmp    eax,edi
c001554e:	74 50                	je     c00155a0 <Thr::processFromPID(int)+0x90>
c0015550:	83 ec 0c             	sub    esp,0xc
c0015553:	68 84 81 02 c0       	push   0xc0028184
c0015558:	e8 cf 96 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001555d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015564:	89 c3                	mov    ebx,eax
c0015566:	e8 c9 96 00 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001556b:	58                   	pop    eax
c001556c:	5a                   	pop    edx
c001556d:	53                   	push   ebx
c001556e:	68 84 81 02 c0       	push   0xc0028184
c0015573:	e8 78 97 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015578:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001557b:	83 c4 10             	add    esp,0x10
c001557e:	39 30                	cmp    DWORD PTR [eax],esi
c0015580:	75 ba                	jne    c001553c <Thr::processFromPID(int)+0x2c>
c0015582:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015587:	83 e8 01             	sub    eax,0x1
c001558a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001558f:	74 0b                	je     c001559c <Thr::processFromPID(int)+0x8c>
c0015591:	8d 76 00             	lea    esi,[esi+0x0]
c0015594:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015597:	5b                   	pop    ebx
c0015598:	5e                   	pop    esi
c0015599:	5f                   	pop    edi
c001559a:	c3                   	ret    
c001559b:	90                   	nop
c001559c:	fb                   	sti    
c001559d:	eb f5                	jmp    c0015594 <Thr::processFromPID(int)+0x84>
c001559f:	90                   	nop
c00155a0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155a5:	83 e8 01             	sub    eax,0x1
c00155a8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155ad:	75 05                	jne    c00155b4 <Thr::processFromPID(int)+0xa4>
c00155af:	fb                   	sti    
c00155b0:	5b                   	pop    ebx
c00155b1:	5e                   	pop    esi
c00155b2:	5f                   	pop    edi
c00155b3:	c3                   	ret    
c00155b4:	5b                   	pop    ebx
c00155b5:	31 c0                	xor    eax,eax
c00155b7:	5e                   	pop    esi
c00155b8:	5f                   	pop    edi
c00155b9:	c3                   	ret    
c00155ba:	66 90                	xchg   ax,ax

c00155bc <unblockTask(ThreadControlBlock*)>:
c00155bc:	53                   	push   ebx
c00155bd:	83 ec 08             	sub    esp,0x8
c00155c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155c4:	fa                   	cli    
c00155c5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155ca:	83 c0 01             	add    eax,0x1
c00155cd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155d2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00155d5:	85 c0                	test   eax,eax
c00155d7:	74 67                	je     c0015640 <unblockTask(ThreadControlBlock*)+0x84>
c00155d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00155dc:	83 f8 01             	cmp    eax,0x1
c00155df:	74 37                	je     c0015618 <unblockTask(ThreadControlBlock*)+0x5c>
c00155e1:	83 ec 0c             	sub    esp,0xc
c00155e4:	68 84 81 02 c0       	push   0xc0028184
c00155e9:	e8 3e 96 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00155ee:	83 c4 10             	add    esp,0x10
c00155f1:	85 c0                	test   eax,eax
c00155f3:	75 1b                	jne    c0015610 <unblockTask(ThreadControlBlock*)+0x54>
c00155f5:	eb 5d                	jmp    c0015654 <unblockTask(ThreadControlBlock*)+0x98>
c00155f7:	90                   	nop
c00155f8:	83 ec 08             	sub    esp,0x8
c00155fb:	50                   	push   eax
c00155fc:	68 84 81 02 c0       	push   0xc0028184
c0015601:	e8 46 99 00 00       	call   c001ef4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015606:	83 c4 10             	add    esp,0x10
c0015609:	85 c0                	test   eax,eax
c001560b:	74 47                	je     c0015654 <unblockTask(ThreadControlBlock*)+0x98>
c001560d:	8d 76 00             	lea    esi,[esi+0x0]
c0015610:	39 c3                	cmp    ebx,eax
c0015612:	75 e4                	jne    c00155f8 <unblockTask(ThreadControlBlock*)+0x3c>
c0015614:	eb 12                	jmp    c0015628 <unblockTask(ThreadControlBlock*)+0x6c>
c0015616:	66 90                	xchg   ax,ax
c0015618:	83 ec 0c             	sub    esp,0xc
c001561b:	68 33 12 02 c0       	push   0xc0021233
c0015620:	e8 9d 53 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001562d:	83 e8 01             	sub    eax,0x1
c0015630:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015635:	75 01                	jne    c0015638 <unblockTask(ThreadControlBlock*)+0x7c>
c0015637:	fb                   	sti    
c0015638:	83 c4 08             	add    esp,0x8
c001563b:	5b                   	pop    ebx
c001563c:	c3                   	ret    
c001563d:	8d 76 00             	lea    esi,[esi+0x0]
c0015640:	83 ec 0c             	sub    esp,0xc
c0015643:	68 1c 12 02 c0       	push   0xc002121c
c0015648:	e8 75 53 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001564d:	83 c4 10             	add    esp,0x10
c0015650:	eb d6                	jmp    c0015628 <unblockTask(ThreadControlBlock*)+0x6c>
c0015652:	66 90                	xchg   ax,ax
c0015654:	83 ec 08             	sub    esp,0x8
c0015657:	53                   	push   ebx
c0015658:	68 84 81 02 c0       	push   0xc0028184
c001565d:	e8 8e 96 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015662:	83 c4 10             	add    esp,0x10
c0015665:	eb c1                	jmp    c0015628 <unblockTask(ThreadControlBlock*)+0x6c>
c0015667:	90                   	nop

c0015668 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015668:	55                   	push   ebp
c0015669:	57                   	push   edi
c001566a:	56                   	push   esi
c001566b:	53                   	push   ebx
c001566c:	83 ec 1c             	sub    esp,0x1c
c001566f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015673:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015676:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001567c:	85 ed                	test   ebp,ebp
c001567e:	7e 28                	jle    c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015680:	31 f6                	xor    esi,esi
c0015682:	66 90                	xchg   ax,ax
c0015684:	83 ec 0c             	sub    esp,0xc
c0015687:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001568e:	83 c6 01             	add    esi,0x1
c0015691:	57                   	push   edi
c0015692:	e8 27 24 ff ff       	call   c0007abe <free>
c0015697:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001569a:	83 c4 10             	add    esp,0x10
c001569d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00156a3:	7f df                	jg     c0015684 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00156a5:	8d 76 00             	lea    esi,[esi+0x0]
c00156a8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156b2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156b7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00156ba:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00156bd:	d3 c0                	rol    eax,cl
c00156bf:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00156c6:	21 c8                	and    eax,ecx
c00156c8:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00156cf:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156d2:	89 f7                	mov    edi,esi
c00156d4:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00156dc:	0f 85 72 01 00 00    	jne    c0015854 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00156e2:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00156e8:	85 ed                	test   ebp,ebp
c00156ea:	74 1c                	je     c0015708 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00156ec:	83 ec 0c             	sub    esp,0xc
c00156ef:	55                   	push   ebp
c00156f0:	e8 0b af ff ff       	call   c0010600 <EnvVarContainer::~EnvVarContainer()>
c00156f5:	59                   	pop    ecx
c00156f6:	5e                   	pop    esi
c00156f7:	6a 0c                	push   0xc
c00156f9:	55                   	push   ebp
c00156fa:	e8 96 51 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c00156ff:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015702:	83 c4 10             	add    esp,0x10
c0015705:	89 f7                	mov    edi,esi
c0015707:	90                   	nop
c0015708:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001570e:	85 c0                	test   eax,eax
c0015710:	0f 84 b2 00 00 00    	je     c00157c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015716:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015719:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001571d:	31 c9                	xor    ecx,ecx
c001571f:	eb 17                	jmp    c0015738 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015721:	8d 76 00             	lea    esi,[esi+0x0]
c0015724:	83 c1 01             	add    ecx,0x1
c0015727:	83 f9 10             	cmp    ecx,0x10
c001572a:	0f 84 98 00 00 00    	je     c00157c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015730:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015736:	66 90                	xchg   ax,ax
c0015738:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001573f:	d3 fa                	sar    edx,cl
c0015741:	80 e2 01             	and    dl,0x1
c0015744:	74 de                	je     c0015724 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015746:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015749:	01 d2                	add    edx,edx
c001574b:	01 ca                	add    edx,ecx
c001574d:	8d 14 92             	lea    edx,[edx+edx*4]
c0015750:	01 d0                	add    eax,edx
c0015752:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015758:	83 fd 07             	cmp    ebp,0x7
c001575b:	75 c7                	jne    c0015724 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001575d:	05 40 02 00 00       	add    eax,0x240
c0015762:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015765:	83 fd ff             	cmp    ebp,0xffffffff
c0015768:	0f 8c ee 00 00 00    	jl     c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001576e:	0f 84 ac 01 00 00    	je     c0015920 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015774:	85 ed                	test   ebp,ebp
c0015776:	0f 84 90 01 00 00    	je     c001590c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001577c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001577e:	75 a4                	jne    c0015724 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015780:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015786:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001578a:	01 d0                	add    eax,edx
c001578c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015790:	83 ec 0c             	sub    esp,0xc
c0015793:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015799:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001579c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157a2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00157a9:	50                   	push   eax
c00157aa:	e8 0d fe ff ff       	call   c00155bc <unblockTask(ThreadControlBlock*)>
c00157af:	83 c4 10             	add    esp,0x10
c00157b2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157b9:	89 f7                	mov    edi,esi
c00157bb:	83 c1 01             	add    ecx,0x1
c00157be:	83 f9 10             	cmp    ecx,0x10
c00157c1:	0f 85 69 ff ff ff    	jne    c0015730 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00157c7:	90                   	nop
c00157c8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00157ce:	85 c0                	test   eax,eax
c00157d0:	74 62                	je     c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00157d2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00157d8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00157de:	74 54                	je     c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00157e0:	83 ec 0c             	sub    esp,0xc
c00157e3:	68 84 81 02 c0       	push   0xc0028184
c00157e8:	e8 3f 94 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157ed:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157f4:	89 c7                	mov    edi,eax
c00157f6:	e8 15 94 00 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00157fb:	83 c4 10             	add    esp,0x10
c00157fe:	84 c0                	test   al,al
c0015800:	0f 84 ce 00 00 00    	je     c00158d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015806:	66 90                	xchg   ax,ax
c0015808:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001580b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015811:	85 d2                	test   edx,edx
c0015813:	74 0f                	je     c0015824 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015815:	83 ec 0c             	sub    esp,0xc
c0015818:	8b 02                	mov    eax,DWORD PTR [edx]
c001581a:	52                   	push   edx
c001581b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001581e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015821:	83 c4 10             	add    esp,0x10
c0015824:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001582e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015831:	8d 76 00             	lea    esi,[esi+0x0]
c0015834:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001583a:	85 db                	test   ebx,ebx
c001583c:	74 16                	je     c0015854 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001583e:	83 ec 0c             	sub    esp,0xc
c0015841:	53                   	push   ebx
c0015842:	e8 4f 43 ff ff       	call   c0009b96 <VAS::~VAS()>
c0015847:	58                   	pop    eax
c0015848:	5a                   	pop    edx
c0015849:	6a 14                	push   0x14
c001584b:	53                   	push   ebx
c001584c:	e8 44 50 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c0015851:	83 c4 10             	add    esp,0x10
c0015854:	83 c4 1c             	add    esp,0x1c
c0015857:	5b                   	pop    ebx
c0015858:	5e                   	pop    esi
c0015859:	5f                   	pop    edi
c001585a:	5d                   	pop    ebp
c001585b:	c3                   	ret    
c001585c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015860:	83 ec 0c             	sub    esp,0xc
c0015863:	68 e8 12 02 c0       	push   0xc00212e8
c0015868:	e8 82 b0 ff ff       	call   c00108ef <KePanic(char const*)>
c001586d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015870:	83 c4 10             	add    esp,0x10
c0015873:	89 f7                	mov    edi,esi
c0015875:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015879:	e9 a6 fe ff ff       	jmp    c0015724 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001587e:	66 90                	xchg   ax,ax
c0015880:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015886:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c001588c:	75 1e                	jne    c00158ac <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001588e:	83 ec 0c             	sub    esp,0xc
c0015891:	68 50 13 02 c0       	push   0xc0021350
c0015896:	e8 27 51 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001589b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00158a2:	e8 11 fa ff ff       	call   c00152b8 <blockTask(TaskState)>
c00158a7:	83 c4 10             	add    esp,0x10
c00158aa:	66 90                	xchg   ax,ax
c00158ac:	83 ec 08             	sub    esp,0x8
c00158af:	56                   	push   esi
c00158b0:	68 84 81 02 c0       	push   0xc0028184
c00158b5:	e8 36 94 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158ba:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00158c1:	e8 66 93 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158c6:	83 c4 10             	add    esp,0x10
c00158c9:	39 f8                	cmp    eax,edi
c00158cb:	0f 84 37 ff ff ff    	je     c0015808 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00158d1:	8d 76 00             	lea    esi,[esi+0x0]
c00158d4:	83 ec 0c             	sub    esp,0xc
c00158d7:	68 84 81 02 c0       	push   0xc0028184
c00158dc:	e8 4b 93 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158e1:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00158e8:	89 c6                	mov    esi,eax
c00158ea:	e8 45 93 00 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00158ef:	83 c4 10             	add    esp,0x10
c00158f2:	39 f3                	cmp    ebx,esi
c00158f4:	74 b6                	je     c00158ac <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00158f6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00158f9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158fc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015902:	75 a8                	jne    c00158ac <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015904:	e9 77 ff ff ff       	jmp    c0015880 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015909:	8d 76 00             	lea    esi,[esi+0x0]
c001590c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015910:	83 ec 0c             	sub    esp,0xc
c0015913:	68 1c 13 02 c0       	push   0xc002131c
c0015918:	e9 4b ff ff ff       	jmp    c0015868 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c001591d:	8d 76 00             	lea    esi,[esi+0x0]
c0015920:	8b 36                	mov    esi,DWORD PTR [esi]
c0015922:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015926:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015929:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001592c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015932:	01 d7                	add    edi,edx
c0015934:	89 f8                	mov    eax,edi
c0015936:	e9 51 fe ff ff       	jmp    c001578c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001593b:	90                   	nop

c001593c <cleanerTaskFunction(void*)>:
c001593c:	53                   	push   ebx
c001593d:	83 ec 08             	sub    esp,0x8
c0015940:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015945:	83 e8 01             	sub    eax,0x1
c0015948:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001594d:	75 01                	jne    c0015950 <cleanerTaskFunction(void*)+0x14>
c001594f:	fb                   	sti    
c0015950:	fa                   	cli    
c0015951:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015956:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c001595d:	8d 50 01             	lea    edx,[eax+0x1]
c0015960:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015966:	0f 84 c4 00 00 00    	je     c0015a30 <cleanerTaskFunction(void*)+0xf4>
c001596c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015971:	85 c0                	test   eax,eax
c0015973:	75 03                	jne    c0015978 <cleanerTaskFunction(void*)+0x3c>
c0015975:	fb                   	sti    
c0015976:	66 90                	xchg   ax,ax
c0015978:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c001597f:	fa                   	cli    
c0015980:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015986:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001598c:	83 c2 01             	add    edx,0x1
c001598f:	83 c1 01             	add    ecx,0x1
c0015992:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015998:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001599e:	fa                   	cli    
c001599f:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c00159a5:	83 c3 01             	add    ebx,0x1
c00159a8:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c00159ae:	eb 28                	jmp    c00159d8 <cleanerTaskFunction(void*)+0x9c>
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	68 6c 81 02 c0       	push   0xc002816c
c00159b8:	e8 6f 92 00 00       	call   c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159bd:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00159c4:	89 c3                	mov    ebx,eax
c00159c6:	e8 69 92 00 00       	call   c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00159ce:	e8 95 fc ff ff       	call   c0015668 <cleanupTerminatedTask(ThreadControlBlock*)>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	66 90                	xchg   ax,ax
c00159d8:	83 ec 0c             	sub    esp,0xc
c00159db:	68 6c 81 02 c0       	push   0xc002816c
c00159e0:	e8 2b 92 00 00       	call   c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159e5:	83 c4 10             	add    esp,0x10
c00159e8:	84 c0                	test   al,al
c00159ea:	74 c4                	je     c00159b0 <cleanerTaskFunction(void*)+0x74>
c00159ec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159f1:	83 e8 01             	sub    eax,0x1
c00159f4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159f9:	75 01                	jne    c00159fc <cleanerTaskFunction(void*)+0xc0>
c00159fb:	fb                   	sti    
c00159fc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a01:	83 e8 01             	sub    eax,0x1
c0015a04:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a09:	0f 85 31 ff ff ff    	jne    c0015940 <cleanerTaskFunction(void*)+0x4>
c0015a0f:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015a14:	85 c0                	test   eax,eax
c0015a16:	0f 84 24 ff ff ff    	je     c0015940 <cleanerTaskFunction(void*)+0x4>
c0015a1c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a26:	e8 79 f6 ff ff       	call   c00150a4 <schedule()>
c0015a2b:	e9 10 ff ff ff       	jmp    c0015940 <cleanerTaskFunction(void*)+0x4>
c0015a30:	83 ec 0c             	sub    esp,0xc
c0015a33:	6a 02                	push   0x2
c0015a35:	e8 56 f8 ff ff       	call   c0015290 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015a3a:	83 c4 10             	add    esp,0x10
c0015a3d:	e9 36 ff ff ff       	jmp    c0015978 <cleanerTaskFunction(void*)+0x3c>
c0015a42:	66 90                	xchg   ax,ax

c0015a44 <terminateTask(int)>:
c0015a44:	83 ec 14             	sub    esp,0x14
c0015a47:	fa                   	cli    
c0015a48:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015a4e:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015a54:	83 c2 01             	add    edx,0x1
c0015a57:	83 c1 01             	add    ecx,0x1
c0015a5a:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015a60:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a66:	fa                   	cli    
c0015a67:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015a70:	83 c0 01             	add    eax,0x1
c0015a73:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a7d:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015a80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a85:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015a88:	50                   	push   eax
c0015a89:	68 6c 81 02 c0       	push   0xc002816c
c0015a8e:	e8 5d 92 00 00       	call   c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a98:	83 c4 10             	add    esp,0x10
c0015a9b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015aa2:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015aa7:	85 c0                	test   eax,eax
c0015aa9:	74 65                	je     c0015b10 <terminateTask(int)+0xcc>
c0015aab:	83 ec 0c             	sub    esp,0xc
c0015aae:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015ab5:	50                   	push   eax
c0015ab6:	e8 01 fb ff ff       	call   c00155bc <unblockTask(ThreadControlBlock*)>
c0015abb:	83 c4 10             	add    esp,0x10
c0015abe:	66 90                	xchg   ax,ax
c0015ac0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ac5:	83 e8 01             	sub    eax,0x1
c0015ac8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015acd:	75 01                	jne    c0015ad0 <terminateTask(int)+0x8c>
c0015acf:	fb                   	sti    
c0015ad0:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ad5:	83 e8 01             	sub    eax,0x1
c0015ad8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015add:	75 09                	jne    c0015ae8 <terminateTask(int)+0xa4>
c0015adf:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015ae6:	75 3c                	jne    c0015b24 <terminateTask(int)+0xe0>
c0015ae8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015aed:	83 e8 01             	sub    eax,0x1
c0015af0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015af5:	75 01                	jne    c0015af8 <terminateTask(int)+0xb4>
c0015af7:	fb                   	sti    
c0015af8:	fa                   	cli    
c0015af9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015afe:	83 c0 01             	add    eax,0x1
c0015b01:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b06:	66 90                	xchg   ax,ax
c0015b08:	e8 97 f5 ff ff       	call   c00150a4 <schedule()>
c0015b0d:	eb d9                	jmp    c0015ae8 <terminateTask(int)+0xa4>
c0015b0f:	90                   	nop
c0015b10:	83 ec 0c             	sub    esp,0xc
c0015b13:	68 4a 12 02 c0       	push   0xc002124a
c0015b18:	e8 a5 4e ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0015b1d:	83 c4 10             	add    esp,0x10
c0015b20:	eb 9e                	jmp    c0015ac0 <terminateTask(int)+0x7c>
c0015b22:	66 90                	xchg   ax,ax
c0015b24:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b2e:	eb d8                	jmp    c0015b08 <terminateTask(int)+0xc4>

c0015b30 <Thr::terminateFromIRQ(int)>:
c0015b30:	83 ec 18             	sub    esp,0x18
c0015b33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b37:	50                   	push   eax
c0015b38:	e8 07 ff ff ff       	call   c0015a44 <terminateTask(int)>
c0015b3d:	90                   	nop
c0015b3e:	66 90                	xchg   ax,ax

c0015b40 <Semaphore::release()>:
c0015b40:	83 ec 0c             	sub    esp,0xc
c0015b43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b47:	fa                   	cli    
c0015b48:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b4d:	83 c0 01             	add    eax,0x1
c0015b50:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b55:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0015b5d:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015b63:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015b66:	85 c9                	test   ecx,ecx
c0015b68:	74 42                	je     c0015bac <Semaphore::release()+0x6c>
c0015b6a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015b6d:	83 ec 0c             	sub    esp,0xc
c0015b70:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b73:	51                   	push   ecx
c0015b74:	e8 43 fa ff ff       	call   c00155bc <unblockTask(ThreadControlBlock*)>
c0015b79:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b7e:	83 c4 10             	add    esp,0x10
c0015b81:	83 e8 01             	sub    eax,0x1
c0015b84:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b89:	85 c0                	test   eax,eax
c0015b8b:	75 0b                	jne    c0015b98 <Semaphore::release()+0x58>
c0015b8d:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015b92:	85 c0                	test   eax,eax
c0015b94:	75 22                	jne    c0015bb8 <Semaphore::release()+0x78>
c0015b96:	66 90                	xchg   ax,ax
c0015b98:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b9d:	83 e8 01             	sub    eax,0x1
c0015ba0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ba5:	75 01                	jne    c0015ba8 <Semaphore::release()+0x68>
c0015ba7:	fb                   	sti    
c0015ba8:	83 c4 0c             	add    esp,0xc
c0015bab:	c3                   	ret    
c0015bac:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015baf:	83 e9 01             	sub    ecx,0x1
c0015bb2:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015bb5:	eb cd                	jmp    c0015b84 <Semaphore::release()+0x44>
c0015bb7:	90                   	nop
c0015bb8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015bc2:	e8 dd f4 ff ff       	call   c00150a4 <schedule()>
c0015bc7:	eb cf                	jmp    c0015b98 <Semaphore::release()+0x58>
c0015bc9:	8d 76 00             	lea    esi,[esi+0x0]

c0015bcc <__static_initialization_and_destruction_0(int, int)>:
c0015bcc:	83 ec 0c             	sub    esp,0xc
c0015bcf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015bd4:	0f 85 8e 00 00 00    	jne    c0015c68 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015bda:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015be2:	0f 85 80 00 00 00    	jne    c0015c68 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015be8:	83 ec 0c             	sub    esp,0xc
c0015beb:	68 84 81 02 c0       	push   0xc0028184
c0015bf0:	e8 af 93 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bf5:	83 c4 10             	add    esp,0x10
c0015bf8:	83 ec 04             	sub    esp,0x4
c0015bfb:	68 e4 1e 02 c0       	push   0xc0021ee4
c0015c00:	68 84 81 02 c0       	push   0xc0028184
c0015c05:	68 54 ef 01 c0       	push   0xc001ef54
c0015c0a:	e8 36 4c ff ff       	call   c000a845 <__cxa_atexit>
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	83 ec 0c             	sub    esp,0xc
c0015c15:	68 78 81 02 c0       	push   0xc0028178
c0015c1a:	e8 85 93 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c1f:	83 c4 10             	add    esp,0x10
c0015c22:	83 ec 04             	sub    esp,0x4
c0015c25:	68 e4 1e 02 c0       	push   0xc0021ee4
c0015c2a:	68 78 81 02 c0       	push   0xc0028178
c0015c2f:	68 54 ef 01 c0       	push   0xc001ef54
c0015c34:	e8 0c 4c ff ff       	call   c000a845 <__cxa_atexit>
c0015c39:	83 c4 10             	add    esp,0x10
c0015c3c:	83 ec 0c             	sub    esp,0xc
c0015c3f:	68 6c 81 02 c0       	push   0xc002816c
c0015c44:	e8 5b 93 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c49:	83 c4 10             	add    esp,0x10
c0015c4c:	83 ec 04             	sub    esp,0x4
c0015c4f:	68 e4 1e 02 c0       	push   0xc0021ee4
c0015c54:	68 6c 81 02 c0       	push   0xc002816c
c0015c59:	68 54 ef 01 c0       	push   0xc001ef54
c0015c5e:	e8 e2 4b ff ff       	call   c000a845 <__cxa_atexit>
c0015c63:	83 c4 10             	add    esp,0x10
c0015c66:	66 90                	xchg   ax,ax
c0015c68:	90                   	nop
c0015c69:	83 c4 0c             	add    esp,0xc
c0015c6c:	c3                   	ret    
c0015c6d:	8d 76 00             	lea    esi,[esi+0x0]

c0015c70 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015c70:	83 ec 0c             	sub    esp,0xc
c0015c73:	83 ec 08             	sub    esp,0x8
c0015c76:	68 ff ff 00 00       	push   0xffff
c0015c7b:	6a 01                	push   0x1
c0015c7d:	e8 4a ff ff ff       	call   c0015bcc <__static_initialization_and_destruction_0(int, int)>
c0015c82:	83 c4 10             	add    esp,0x10
c0015c85:	83 c4 0c             	add    esp,0xc
c0015c88:	c3                   	ret    

c0015c89 <Vm::inbv(unsigned short)>:
c0015c89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c8d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c92:	75 06                	jne    c0015c9a <Vm::inbv(unsigned short)+0x11>
c0015c94:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c99:	c3                   	ret    
c0015c9a:	ec                   	in     al,dx
c0015c9b:	c3                   	ret    

c0015c9c <Vm::outbv(unsigned short, unsigned char)>:
c0015c9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ca4:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015ca9:	75 25                	jne    c0015cd0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015cab:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015cb1:	8d 51 01             	lea    edx,[ecx+0x1]
c0015cb4:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015cba:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015cc0:	83 fa 20             	cmp    edx,0x20
c0015cc3:	75 0c                	jne    c0015cd1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015cc5:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015ccf:	c3                   	ret    
c0015cd0:	ee                   	out    dx,al
c0015cd1:	c3                   	ret    

c0015cd2 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015cd2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015cd7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015cdc:	c1 e0 04             	shl    eax,0x4
c0015cdf:	01 d0                	add    eax,edx
c0015ce1:	c3                   	ret    

c0015ce2 <Vm::getSegment(unsigned int)>:
c0015ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ce6:	c1 e8 10             	shr    eax,0x10
c0015ce9:	c3                   	ret    

c0015cea <Vm::getOffset(unsigned int)>:
c0015cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cee:	c3                   	ret    

c0015cef <Vm::mainloop2()>:
c0015cef:	83 ec 18             	sub    esp,0x18
c0015cf2:	fa                   	cli    
c0015cf3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015cf9:	6a 02                	push   0x2
c0015cfb:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015d02:	e8 89 f5 ff ff       	call   c0015290 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d0c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015d10:	52                   	push   edx
c0015d11:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015d15:	52                   	push   edx
c0015d16:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015d1a:	52                   	push   edx
c0015d1b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015d1f:	50                   	push   eax
c0015d20:	e8 ea a4 fe ff       	call   c000020f <goToVM86>
c0015d25:	83 c4 2c             	add    esp,0x2c
c0015d28:	c3                   	ret    

c0015d29 <Vm::mainVm8086Loop(void*)>:
c0015d29:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d2e:	48                   	dec    eax
c0015d2f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d34:	75 01                	jne    c0015d37 <Vm::mainVm8086Loop(void*)+0xe>
c0015d36:	fb                   	sti    
c0015d37:	eb b6                	jmp    c0015cef <Vm::mainloop2()>

c0015d39 <Vm::mainloop3(unsigned long)>:
c0015d39:	83 ec 18             	sub    esp,0x18
c0015d3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d40:	fa                   	cli    
c0015d41:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d47:	6a 02                	push   0x2
c0015d49:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015d50:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015d55:	e8 36 f5 ff ff       	call   c0015290 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d5a:	83 c4 1c             	add    esp,0x1c
c0015d5d:	eb 90                	jmp    c0015cef <Vm::mainloop2()>

c0015d5f <Vm::initialise8086()>:
c0015d5f:	83 ec 0c             	sub    esp,0xc
c0015d62:	68 80 00 00 00       	push   0x80
c0015d67:	6a 00                	push   0x0
c0015d69:	68 29 5d 01 c0       	push   0xc0015d29
c0015d6e:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015d74:	e8 db f0 ff ff       	call   c0014e54 <Process::createThread(void (*)(void*), void*, int)>
c0015d79:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015d80:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015d85:	68 00 01 00 00       	push   0x100
c0015d8a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015d8f:	6a 00                	push   0x0
c0015d91:	6a 00                	push   0x0
c0015d93:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d99:	e8 7a 42 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d9e:	83 c4 2c             	add    esp,0x2c
c0015da1:	c3                   	ret    

c0015da2 <Vm::finish8086()>:
c0015da2:	53                   	push   ebx
c0015da3:	83 ec 08             	sub    esp,0x8
c0015da6:	fa                   	cli    
c0015da7:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015dad:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015db4:	75 15                	jne    c0015dcb <Vm::finish8086()+0x29>
c0015db6:	e8 e9 f2 ff ff       	call   c00150a4 <schedule()>
c0015dbb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dc0:	48                   	dec    eax
c0015dc1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dc6:	75 de                	jne    c0015da6 <Vm::finish8086()+0x4>
c0015dc8:	fb                   	sti    
c0015dc9:	eb db                	jmp    c0015da6 <Vm::finish8086()+0x4>
c0015dcb:	83 ec 0c             	sub    esp,0xc
c0015dce:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015dd4:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015dda:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015de1:	e8 d6 f7 ff ff       	call   c00155bc <unblockTask(ThreadControlBlock*)>
c0015de6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015deb:	83 c4 10             	add    esp,0x10
c0015dee:	8d 50 ff             	lea    edx,[eax-0x1]
c0015df1:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015df7:	85 d2                	test   edx,edx
c0015df9:	75 01                	jne    c0015dfc <Vm::finish8086()+0x5a>
c0015dfb:	fb                   	sti    
c0015dfc:	89 d8                	mov    eax,ebx
c0015dfe:	83 c4 08             	add    esp,0x8
c0015e01:	5b                   	pop    ebx
c0015e02:	c3                   	ret    

c0015e03 <Vm::getOutput8086(unsigned char*)>:
c0015e03:	57                   	push   edi
c0015e04:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015e0a:	56                   	push   esi
c0015e0b:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015e10:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015e14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e16:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015e1b:	5e                   	pop    esi
c0015e1c:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e26:	5f                   	pop    edi
c0015e27:	c3                   	ret    

c0015e28 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e28:	55                   	push   ebp
c0015e29:	57                   	push   edi
c0015e2a:	56                   	push   esi
c0015e2b:	53                   	push   ebx
c0015e2c:	83 ec 0c             	sub    esp,0xc
c0015e2f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015e33:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015e37:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015e3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015e3f:	fa                   	cli    
c0015e40:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e46:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015e4d:	75 15                	jne    c0015e64 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015e4f:	e8 50 f2 ff ff       	call   c00150a4 <schedule()>
c0015e54:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e59:	48                   	dec    eax
c0015e5a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e5f:	75 de                	jne    c0015e3f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e61:	fb                   	sti    
c0015e62:	eb db                	jmp    c0015e3f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e64:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e69:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e73:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015e77:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e7b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015e7f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015e83:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e87:	0f b7 ff             	movzx  edi,di
c0015e8a:	0f b7 f6             	movzx  esi,si
c0015e8d:	50                   	push   eax
c0015e8e:	6a 20                	push   0x20
c0015e90:	6a 00                	push   0x0
c0015e92:	68 e0 81 02 c0       	push   0xc00281e0
c0015e97:	e8 54 a6 fe ff       	call   c00004f0 <memset>
c0015e9c:	5a                   	pop    edx
c0015e9d:	59                   	pop    ecx
c0015e9e:	57                   	push   edi
c0015e9f:	56                   	push   esi
c0015ea0:	e8 2d fe ff ff       	call   c0015cd2 <Vm::realToLinear(unsigned short, unsigned short)>
c0015ea5:	83 c4 10             	add    esp,0x10
c0015ea8:	89 c7                	mov    edi,eax
c0015eaa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015eae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015eb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015eb4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015eb9:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015ec0:	48                   	dec    eax
c0015ec1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ec6:	75 01                	jne    c0015ec9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015ec8:	fb                   	sti    
c0015ec9:	83 ec 0c             	sub    esp,0xc
c0015ecc:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015ed2:	e8 e5 f6 ff ff       	call   c00155bc <unblockTask(ThreadControlBlock*)>
c0015ed7:	83 c4 1c             	add    esp,0x1c
c0015eda:	b0 01                	mov    al,0x1
c0015edc:	5b                   	pop    ebx
c0015edd:	5e                   	pop    esi
c0015ede:	5f                   	pop    edi
c0015edf:	5d                   	pop    ebp
c0015ee0:	c3                   	ret    

c0015ee1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015ee1:	55                   	push   ebp
c0015ee2:	57                   	push   edi
c0015ee3:	56                   	push   esi
c0015ee4:	53                   	push   ebx
c0015ee5:	83 ec 2c             	sub    esp,0x2c
c0015ee8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015eec:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015ef0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015ef4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015ef8:	fa                   	cli    
c0015ef9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015eff:	0f b6 35 c5 81 02 c0 	movzx  esi,BYTE PTR ds:0xc00281c5
c0015f06:	89 f0                	mov    eax,esi
c0015f08:	84 c0                	test   al,al
c0015f0a:	75 1d                	jne    c0015f29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015f0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015f10:	e8 8f f1 ff ff       	call   c00150a4 <schedule()>
c0015f15:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f1e:	48                   	dec    eax
c0015f1f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f24:	75 d2                	jne    c0015ef8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015f26:	fb                   	sti    
c0015f27:	eb cf                	jmp    c0015ef8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015f29:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015f2e:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015f38:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015f3c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015f40:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015f44:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015f48:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015f4c:	50                   	push   eax
c0015f4d:	6a 20                	push   0x20
c0015f4f:	6a 00                	push   0x0
c0015f51:	68 e0 81 02 c0       	push   0xc00281e0
c0015f56:	e8 95 a5 fe ff       	call   c00004f0 <memset>
c0015f5b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f62:	e8 47 1b ff ff       	call   c0007aae <malloc>
c0015f67:	83 c4 0c             	add    esp,0xc
c0015f6a:	89 c3                	mov    ebx,eax
c0015f6c:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015f72:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015f76:	50                   	push   eax
c0015f77:	e8 c8 4f ff ff       	call   c000af44 <File::File(char const*, Process*)>
c0015f7c:	83 c4 10             	add    esp,0x10
c0015f7f:	85 db                	test   ebx,ebx
c0015f81:	75 0a                	jne    c0015f8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015f83:	83 ec 0c             	sub    esp,0xc
c0015f86:	68 78 13 02 c0       	push   0xc0021378
c0015f8b:	eb 2b                	jmp    c0015fb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd7>
c0015f8d:	50                   	push   eax
c0015f8e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015f92:	50                   	push   eax
c0015f93:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f97:	50                   	push   eax
c0015f98:	53                   	push   ebx
c0015f99:	e8 0e 53 ff ff       	call   c000b2ac <File::stat(unsigned long long*, bool*)>
c0015f9e:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015fa2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fa6:	83 c4 10             	add    esp,0x10
c0015fa9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015fae:	74 27                	je     c0015fd7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf6>
c0015fb0:	83 ec 0c             	sub    esp,0xc
c0015fb3:	68 8c 13 02 c0       	push   0xc002138c
c0015fb8:	e8 32 a9 ff ff       	call   c00108ef <KePanic(char const*)>
c0015fbd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fc2:	83 c4 10             	add    esp,0x10
c0015fc5:	48                   	dec    eax
c0015fc6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fcb:	85 c0                	test   eax,eax
c0015fcd:	75 01                	jne    c0015fd0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015fcf:	fb                   	sti    
c0015fd0:	31 f6                	xor    esi,esi
c0015fd2:	e9 8f 00 00 00       	jmp    c0016066 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0015fd7:	51                   	push   ecx
c0015fd8:	51                   	push   ecx
c0015fd9:	6a 01                	push   0x1
c0015fdb:	53                   	push   ebx
c0015fdc:	e8 1f 50 ff ff       	call   c000b000 <File::open(FileOpenMode)>
c0015fe1:	83 c4 10             	add    esp,0x10
c0015fe4:	85 c0                	test   eax,eax
c0015fe6:	74 26                	je     c001600e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12d>
c0015fe8:	83 ec 0c             	sub    esp,0xc
c0015feb:	68 a5 13 02 c0       	push   0xc00213a5
c0015ff0:	e8 fa a8 ff ff       	call   c00108ef <KePanic(char const*)>
c0015ff5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ffa:	83 c4 10             	add    esp,0x10
c0015ffd:	48                   	dec    eax
c0015ffe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016003:	85 c0                	test   eax,eax
c0016005:	75 c9                	jne    c0015fd0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0016007:	fb                   	sti    
c0016008:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001600c:	eb 58                	jmp    c0016066 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c001600e:	0f b7 ed             	movzx  ebp,bp
c0016011:	50                   	push   eax
c0016012:	0f b7 ff             	movzx  edi,di
c0016015:	50                   	push   eax
c0016016:	55                   	push   ebp
c0016017:	57                   	push   edi
c0016018:	e8 b5 fc ff ff       	call   c0015cd2 <Vm::realToLinear(unsigned short, unsigned short)>
c001601d:	5a                   	pop    edx
c001601e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016020:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016024:	51                   	push   ecx
c0016025:	50                   	push   eax
c0016026:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001602a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001602e:	53                   	push   ebx
c001602f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016032:	83 c4 14             	add    esp,0x14
c0016035:	53                   	push   ebx
c0016036:	e8 23 50 ff ff       	call   c000b05e <File::close()>
c001603b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016040:	83 c4 10             	add    esp,0x10
c0016043:	48                   	dec    eax
c0016044:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c001604b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016050:	85 c0                	test   eax,eax
c0016052:	75 01                	jne    c0016055 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x174>
c0016054:	fb                   	sti    
c0016055:	83 ec 0c             	sub    esp,0xc
c0016058:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c001605e:	e8 59 f5 ff ff       	call   c00155bc <unblockTask(ThreadControlBlock*)>
c0016063:	83 c4 10             	add    esp,0x10
c0016066:	83 c4 2c             	add    esp,0x2c
c0016069:	89 f0                	mov    eax,esi
c001606b:	5b                   	pop    ebx
c001606c:	5e                   	pop    esi
c001606d:	5f                   	pop    edi
c001606e:	5d                   	pop    ebp
c001606f:	c3                   	ret    

c0016070 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016070:	57                   	push   edi
c0016071:	56                   	push   esi
c0016072:	53                   	push   ebx
c0016073:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001607b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001607f:	83 e8 06             	sub    eax,0x6
c0016082:	0f b7 c0             	movzx  eax,ax
c0016085:	50                   	push   eax
c0016086:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001608b:	50                   	push   eax
c001608c:	e8 41 fc ff ff       	call   c0015cd2 <Vm::realToLinear(unsigned short, unsigned short)>
c0016091:	5a                   	pop    edx
c0016092:	5e                   	pop    esi
c0016093:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0016096:	8d 56 fa             	lea    edx,[esi-0x6]
c0016099:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c001609c:	81 e2 ff ff 00 00    	and    edx,0xffff
c00160a2:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00160a5:	8d 56 02             	lea    edx,[esi+0x2]
c00160a8:	66 89 10             	mov    WORD PTR [eax],dx
c00160ab:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00160ae:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00160b2:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00160b5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00160b9:	89 d6                	mov    esi,edx
c00160bb:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00160c1:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c00160c7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00160cb:	74 05                	je     c00160d2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c00160cd:	80 ce 02             	or     dh,0x2
c00160d0:	89 d6                	mov    esi,edx
c00160d2:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00160d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160db:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00160df:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00160e7:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00160ea:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00160f2:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00160f5:	5b                   	pop    ebx
c00160f6:	5e                   	pop    esi
c00160f7:	5f                   	pop    edi
c00160f8:	c3                   	ret    

c00160f9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00160f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160fe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016103:	c1 e0 04             	shl    eax,0x4
c0016106:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016109:	c3                   	ret    

c001610a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001610a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001610f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016114:	c1 e0 04             	shl    eax,0x4
c0016117:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001611b:	c3                   	ret    

c001611c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001611c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016121:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016126:	c1 e0 04             	shl    eax,0x4
c0016129:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001612c:	c3                   	ret    

c001612d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001612d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016132:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016137:	c1 e0 04             	shl    eax,0x4
c001613a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001613e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016141:	c3                   	ret    

c0016142 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016142:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016147:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001614c:	c1 e0 04             	shl    eax,0x4
c001614f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016153:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016157:	c3                   	ret    

c0016158 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016158:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001615d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016162:	c1 e0 04             	shl    eax,0x4
c0016165:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016169:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001616c:	c3                   	ret    

c001616d <Vm::faultHandler(regs*)>:
c001616d:	55                   	push   ebp
c001616e:	57                   	push   edi
c001616f:	56                   	push   esi
c0016170:	53                   	push   ebx
c0016171:	83 ec 2c             	sub    esp,0x2c
c0016174:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016178:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001617b:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001617f:	0f b7 f8             	movzx  edi,ax
c0016182:	52                   	push   edx
c0016183:	0f b7 c0             	movzx  eax,ax
c0016186:	50                   	push   eax
c0016187:	e8 46 fb ff ff       	call   c0015cd2 <Vm::realToLinear(unsigned short, unsigned short)>
c001618c:	5a                   	pop    edx
c001618d:	59                   	pop    ecx
c001618e:	89 c1                	mov    ecx,eax
c0016190:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016193:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016197:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001619c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00161a0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00161a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161a7:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00161ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00161b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00161b8:	e8 15 fb ff ff       	call   c0015cd2 <Vm::realToLinear(unsigned short, unsigned short)>
c00161bd:	5e                   	pop    esi
c00161be:	be 06 00 00 00       	mov    esi,0x6
c00161c3:	5d                   	pop    ebp
c00161c4:	31 ed                	xor    ebp,ebp
c00161c6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00161cb:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00161ce:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00161d4:	0f 84 54 02 00 00    	je     c001642e <Vm::faultHandler(regs*)+0x2c1>
c00161da:	0f 87 94 00 00 00    	ja     c0016274 <Vm::faultHandler(regs*)+0x107>
c00161e0:	83 fa 66             	cmp    edx,0x66
c00161e3:	0f 84 c2 01 00 00    	je     c00163ab <Vm::faultHandler(regs*)+0x23e>
c00161e9:	77 47                	ja     c0016232 <Vm::faultHandler(regs*)+0xc5>
c00161eb:	83 fa 36             	cmp    edx,0x36
c00161ee:	0f 84 aa 01 00 00    	je     c001639e <Vm::faultHandler(regs*)+0x231>
c00161f4:	77 1a                	ja     c0016210 <Vm::faultHandler(regs*)+0xa3>
c00161f6:	83 fa 26             	cmp    edx,0x26
c00161f9:	0f 84 78 01 00 00    	je     c0016377 <Vm::faultHandler(regs*)+0x20a>
c00161ff:	83 fa 2e             	cmp    edx,0x2e
c0016202:	0f 85 01 06 00 00    	jne    c0016809 <Vm::faultHandler(regs*)+0x69c>
c0016208:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001620b:	31 f6                	xor    esi,esi
c001620d:	41                   	inc    ecx
c001620e:	eb bb                	jmp    c00161cb <Vm::faultHandler(regs*)+0x5e>
c0016210:	83 fa 64             	cmp    edx,0x64
c0016213:	0f 84 6b 01 00 00    	je     c0016384 <Vm::faultHandler(regs*)+0x217>
c0016219:	0f 87 72 01 00 00    	ja     c0016391 <Vm::faultHandler(regs*)+0x224>
c001621f:	83 fa 3e             	cmp    edx,0x3e
c0016222:	0f 85 e1 05 00 00    	jne    c0016809 <Vm::faultHandler(regs*)+0x69c>
c0016228:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001622b:	be 01 00 00 00       	mov    esi,0x1
c0016230:	eb db                	jmp    c001620d <Vm::faultHandler(regs*)+0xa0>
c0016232:	83 fa 6d             	cmp    edx,0x6d
c0016235:	0f 84 14 03 00 00    	je     c001654f <Vm::faultHandler(regs*)+0x3e2>
c001623b:	77 17                	ja     c0016254 <Vm::faultHandler(regs*)+0xe7>
c001623d:	83 fa 67             	cmp    edx,0x67
c0016240:	0f 84 72 01 00 00    	je     c00163b8 <Vm::faultHandler(regs*)+0x24b>
c0016246:	83 fa 6c             	cmp    edx,0x6c
c0016249:	0f 84 91 02 00 00    	je     c00164e0 <Vm::faultHandler(regs*)+0x373>
c001624f:	e9 b5 05 00 00       	jmp    c0016809 <Vm::faultHandler(regs*)+0x69c>
c0016254:	83 fa 6f             	cmp    edx,0x6f
c0016257:	0f 84 1d 04 00 00    	je     c001667a <Vm::faultHandler(regs*)+0x50d>
c001625d:	0f 82 7f 03 00 00    	jb     c00165e2 <Vm::faultHandler(regs*)+0x475>
c0016263:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016269:	0f 84 56 01 00 00    	je     c00163c5 <Vm::faultHandler(regs*)+0x258>
c001626f:	e9 95 05 00 00       	jmp    c0016809 <Vm::faultHandler(regs*)+0x69c>
c0016274:	81 fa ec 00 00 00    	cmp    edx,0xec
c001627a:	0f 84 31 05 00 00    	je     c00167b1 <Vm::faultHandler(regs*)+0x644>
c0016280:	0f 87 89 00 00 00    	ja     c001630f <Vm::faultHandler(regs*)+0x1a2>
c0016286:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001628c:	0f 84 b0 04 00 00    	je     c0016742 <Vm::faultHandler(regs*)+0x5d5>
c0016292:	77 58                	ja     c00162ec <Vm::faultHandler(regs*)+0x17f>
c0016294:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001629a:	0f 84 ee 01 00 00    	je     c001648e <Vm::faultHandler(regs*)+0x321>
c00162a0:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00162a6:	0f 85 5d 05 00 00    	jne    c0016809 <Vm::faultHandler(regs*)+0x69c>
c00162ac:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00162af:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00162b2:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00162b6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00162b9:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00162bd:	81 ca 00 02 02 00    	or     edx,0x20200
c00162c3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00162c6:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c00162ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00162d0:	c1 e8 09             	shr    eax,0x9
c00162d3:	83 e0 01             	and    eax,0x1
c00162d6:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00162d9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00162dc:	83 c0 06             	add    eax,0x6
c00162df:	25 ff ff 00 00       	and    eax,0xffff
c00162e4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00162e7:	e9 19 05 00 00       	jmp    c0016805 <Vm::faultHandler(regs*)+0x698>
c00162ec:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00162f2:	0f 84 8f 04 00 00    	je     c0016787 <Vm::faultHandler(regs*)+0x61a>
c00162f8:	0f 82 60 04 00 00    	jb     c001675e <Vm::faultHandler(regs*)+0x5f1>
c00162fe:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016304:	0f 84 94 04 00 00    	je     c001679e <Vm::faultHandler(regs*)+0x631>
c001630a:	e9 fa 04 00 00       	jmp    c0016809 <Vm::faultHandler(regs*)+0x69c>
c001630f:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016315:	0f 84 d7 04 00 00    	je     c00167f2 <Vm::faultHandler(regs*)+0x685>
c001631b:	77 2e                	ja     c001634b <Vm::faultHandler(regs*)+0x1de>
c001631d:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016323:	0f 84 a4 04 00 00    	je     c00167cd <Vm::faultHandler(regs*)+0x660>
c0016329:	81 fa ee 00 00 00    	cmp    edx,0xee
c001632f:	0f 85 d4 04 00 00    	jne    c0016809 <Vm::faultHandler(regs*)+0x69c>
c0016335:	50                   	push   eax
c0016336:	50                   	push   eax
c0016337:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001633b:	50                   	push   eax
c001633c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016340:	50                   	push   eax
c0016341:	e8 56 f9 ff ff       	call   c0015c9c <Vm::outbv(unsigned short, unsigned char)>
c0016346:	e9 9f 04 00 00       	jmp    c00167ea <Vm::faultHandler(regs*)+0x67d>
c001634b:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016351:	0f 84 6d 01 00 00    	je     c00164c4 <Vm::faultHandler(regs*)+0x357>
c0016357:	81 fa fb 00 00 00    	cmp    edx,0xfb
c001635d:	0f 84 6f 01 00 00    	je     c00164d2 <Vm::faultHandler(regs*)+0x365>
c0016363:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016369:	0f 85 9a 04 00 00    	jne    c0016809 <Vm::faultHandler(regs*)+0x69c>
c001636f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016372:	e9 96 fe ff ff       	jmp    c001620d <Vm::faultHandler(regs*)+0xa0>
c0016377:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001637a:	be 02 00 00 00       	mov    esi,0x2
c001637f:	e9 89 fe ff ff       	jmp    c001620d <Vm::faultHandler(regs*)+0xa0>
c0016384:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016387:	be 03 00 00 00       	mov    esi,0x3
c001638c:	e9 7c fe ff ff       	jmp    c001620d <Vm::faultHandler(regs*)+0xa0>
c0016391:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016394:	be 04 00 00 00       	mov    esi,0x4
c0016399:	e9 6f fe ff ff       	jmp    c001620d <Vm::faultHandler(regs*)+0xa0>
c001639e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163a1:	be 05 00 00 00       	mov    esi,0x5
c00163a6:	e9 62 fe ff ff       	jmp    c001620d <Vm::faultHandler(regs*)+0xa0>
c00163ab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163ae:	bd 01 00 00 00       	mov    ebp,0x1
c00163b3:	e9 55 fe ff ff       	jmp    c001620d <Vm::faultHandler(regs*)+0xa0>
c00163b8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163bb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00163c0:	e9 48 fe ff ff       	jmp    c001620d <Vm::faultHandler(regs*)+0xa0>
c00163c5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00163c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00163cc:	83 e5 01             	and    ebp,0x1
c00163cf:	74 30                	je     c0016401 <Vm::faultHandler(regs*)+0x294>
c00163d1:	83 e9 04             	sub    ecx,0x4
c00163d4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00163da:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00163e0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00163e3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00163e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00163ec:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00163f0:	0f 84 0c 04 00 00    	je     c0016802 <Vm::faultHandler(regs*)+0x695>
c00163f6:	80 ce 02             	or     dh,0x2
c00163f9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00163fc:	e9 01 04 00 00       	jmp    c0016802 <Vm::faultHandler(regs*)+0x695>
c0016401:	83 e9 02             	sub    ecx,0x2
c0016404:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001640a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001640d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016411:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016417:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001641b:	74 05                	je     c0016422 <Vm::faultHandler(regs*)+0x2b5>
c001641d:	80 ce 02             	or     dh,0x2
c0016420:	eb 03                	jmp    c0016425 <Vm::faultHandler(regs*)+0x2b8>
c0016422:	80 e6 fd             	and    dh,0xfd
c0016425:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016429:	e9 d4 03 00 00       	jmp    c0016802 <Vm::faultHandler(regs*)+0x695>
c001642e:	83 e5 01             	and    ebp,0x1
c0016431:	74 2a                	je     c001645d <Vm::faultHandler(regs*)+0x2f0>
c0016433:	8b 10                	mov    edx,DWORD PTR [eax]
c0016435:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001643b:	81 ca 00 02 02 00    	or     edx,0x20200
c0016441:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016444:	8b 00                	mov    eax,DWORD PTR [eax]
c0016446:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001644c:	c1 e8 09             	shr    eax,0x9
c001644f:	83 e0 01             	and    eax,0x1
c0016452:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016455:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016458:	83 c0 04             	add    eax,0x4
c001645b:	eb 24                	jmp    c0016481 <Vm::faultHandler(regs*)+0x314>
c001645d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016460:	81 ca 00 02 02 00    	or     edx,0x20200
c0016466:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016469:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001646c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016472:	c1 e8 09             	shr    eax,0x9
c0016475:	83 e0 01             	and    eax,0x1
c0016478:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001647b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001647e:	83 c0 02             	add    eax,0x2
c0016481:	25 ff ff 00 00       	and    eax,0xffff
c0016486:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016489:	e9 74 03 00 00       	jmp    c0016802 <Vm::faultHandler(regs*)+0x695>
c001648e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016492:	3d ee 00 00 00       	cmp    eax,0xee
c0016497:	75 10                	jne    c00164a9 <Vm::faultHandler(regs*)+0x33c>
c0016499:	83 ec 0c             	sub    esp,0xc
c001649c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001649f:	e8 95 f8 ff ff       	call   c0015d39 <Vm::mainloop3(unsigned long)>
c00164a4:	e9 44 03 00 00       	jmp    c00167ed <Vm::faultHandler(regs*)+0x680>
c00164a9:	83 ec 0c             	sub    esp,0xc
c00164ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00164b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164b4:	51                   	push   ecx
c00164b5:	50                   	push   eax
c00164b6:	53                   	push   ebx
c00164b7:	e8 b4 fb ff ff       	call   c0016070 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00164bc:	83 c4 20             	add    esp,0x20
c00164bf:	e9 41 03 00 00       	jmp    c0016805 <Vm::faultHandler(regs*)+0x698>
c00164c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164c9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00164cd:	e9 30 03 00 00       	jmp    c0016802 <Vm::faultHandler(regs*)+0x695>
c00164d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164d7:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00164db:	e9 22 03 00 00       	jmp    c0016802 <Vm::faultHandler(regs*)+0x695>
c00164e0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00164e3:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00164e8:	74 2b                	je     c0016515 <Vm::faultHandler(regs*)+0x3a8>
c00164ea:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00164f1:	76 22                	jbe    c0016515 <Vm::faultHandler(regs*)+0x3a8>
c00164f3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164f7:	50                   	push   eax
c00164f8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164fc:	50                   	push   eax
c00164fd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016501:	50                   	push   eax
c0016502:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016506:	50                   	push   eax
c0016507:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001650b:	50                   	push   eax
c001650c:	6a 6c                	push   0x6c
c001650e:	6a 6c                	push   0x6c
c0016510:	e9 bd 01 00 00       	jmp    c00166d2 <Vm::faultHandler(regs*)+0x565>
c0016515:	83 ec 0c             	sub    esp,0xc
c0016518:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001651c:	0f b7 f6             	movzx  esi,si
c001651f:	50                   	push   eax
c0016520:	e8 64 f7 ff ff       	call   c0015c89 <Vm::inbv(unsigned short)>
c0016525:	83 c4 0c             	add    esp,0xc
c0016528:	0f b6 c0             	movzx  eax,al
c001652b:	50                   	push   eax
c001652c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016530:	50                   	push   eax
c0016531:	56                   	push   esi
c0016532:	e8 f6 fb ff ff       	call   c001612d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016537:	83 c4 10             	add    esp,0x10
c001653a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001653d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016541:	74 03                	je     c0016546 <Vm::faultHandler(regs*)+0x3d9>
c0016543:	48                   	dec    eax
c0016544:	eb 01                	jmp    c0016547 <Vm::faultHandler(regs*)+0x3da>
c0016546:	40                   	inc    eax
c0016547:	0f b7 c0             	movzx  eax,ax
c001654a:	e9 8b 00 00 00       	jmp    c00165da <Vm::faultHandler(regs*)+0x46d>
c001654f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016552:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016555:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001655a:	74 29                	je     c0016585 <Vm::faultHandler(regs*)+0x418>
c001655c:	3d ff ff 00 00       	cmp    eax,0xffff
c0016561:	76 22                	jbe    c0016585 <Vm::faultHandler(regs*)+0x418>
c0016563:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016567:	50                   	push   eax
c0016568:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001656c:	50                   	push   eax
c001656d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016571:	50                   	push   eax
c0016572:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016576:	50                   	push   eax
c0016577:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001657b:	50                   	push   eax
c001657c:	6a 6d                	push   0x6d
c001657e:	6a 6d                	push   0x6d
c0016580:	e9 4d 01 00 00       	jmp    c00166d2 <Vm::faultHandler(regs*)+0x565>
c0016585:	0f b7 c8             	movzx  ecx,ax
c0016588:	0f b7 f6             	movzx  esi,si
c001658b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001658e:	83 e5 01             	and    ebp,0x1
c0016591:	74 20                	je     c00165b3 <Vm::faultHandler(regs*)+0x446>
c0016593:	ed                   	in     eax,dx
c0016594:	55                   	push   ebp
c0016595:	50                   	push   eax
c0016596:	51                   	push   ecx
c0016597:	56                   	push   esi
c0016598:	e8 bb fb ff ff       	call   c0016158 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001659d:	83 c4 10             	add    esp,0x10
c00165a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00165a3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165a7:	74 05                	je     c00165ae <Vm::faultHandler(regs*)+0x441>
c00165a9:	83 e8 04             	sub    eax,0x4
c00165ac:	eb 27                	jmp    c00165d5 <Vm::faultHandler(regs*)+0x468>
c00165ae:	83 c0 04             	add    eax,0x4
c00165b1:	eb 22                	jmp    c00165d5 <Vm::faultHandler(regs*)+0x468>
c00165b3:	66 ed                	in     ax,dx
c00165b5:	0f b7 c0             	movzx  eax,ax
c00165b8:	57                   	push   edi
c00165b9:	50                   	push   eax
c00165ba:	51                   	push   ecx
c00165bb:	56                   	push   esi
c00165bc:	e8 81 fb ff ff       	call   c0016142 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00165c1:	83 c4 10             	add    esp,0x10
c00165c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00165c7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165cb:	74 05                	je     c00165d2 <Vm::faultHandler(regs*)+0x465>
c00165cd:	83 e8 02             	sub    eax,0x2
c00165d0:	eb 03                	jmp    c00165d5 <Vm::faultHandler(regs*)+0x468>
c00165d2:	83 c0 02             	add    eax,0x2
c00165d5:	25 ff ff 00 00       	and    eax,0xffff
c00165da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00165dd:	e9 20 02 00 00       	jmp    c0016802 <Vm::faultHandler(regs*)+0x695>
c00165e2:	8d 46 ff             	lea    eax,[esi-0x1]
c00165e5:	0f b6 f0             	movzx  esi,al
c00165e8:	83 fe 05             	cmp    esi,0x5
c00165eb:	77 23                	ja     c0016610 <Vm::faultHandler(regs*)+0x4a3>
c00165ed:	ff 24 b5 18 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdebe8]
c00165f4:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00165f9:	eb 15                	jmp    c0016610 <Vm::faultHandler(regs*)+0x4a3>
c00165fb:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00165ff:	eb 0f                	jmp    c0016610 <Vm::faultHandler(regs*)+0x4a3>
c0016601:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016605:	eb 09                	jmp    c0016610 <Vm::faultHandler(regs*)+0x4a3>
c0016607:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001660b:	eb 03                	jmp    c0016610 <Vm::faultHandler(regs*)+0x4a3>
c001660d:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016610:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016613:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016618:	74 29                	je     c0016643 <Vm::faultHandler(regs*)+0x4d6>
c001661a:	3d ff ff 00 00       	cmp    eax,0xffff
c001661f:	76 22                	jbe    c0016643 <Vm::faultHandler(regs*)+0x4d6>
c0016621:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016625:	50                   	push   eax
c0016626:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001662a:	50                   	push   eax
c001662b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001662f:	50                   	push   eax
c0016630:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016634:	50                   	push   eax
c0016635:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016639:	50                   	push   eax
c001663a:	6a 6e                	push   0x6e
c001663c:	6a 6e                	push   0x6e
c001663e:	e9 8f 00 00 00       	jmp    c00166d2 <Vm::faultHandler(regs*)+0x565>
c0016643:	0f b7 c0             	movzx  eax,ax
c0016646:	52                   	push   edx
c0016647:	52                   	push   edx
c0016648:	50                   	push   eax
c0016649:	57                   	push   edi
c001664a:	e8 aa fa ff ff       	call   c00160f9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001664f:	59                   	pop    ecx
c0016650:	0f b6 c0             	movzx  eax,al
c0016653:	5e                   	pop    esi
c0016654:	50                   	push   eax
c0016655:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016659:	50                   	push   eax
c001665a:	e8 3d f6 ff ff       	call   c0015c9c <Vm::outbv(unsigned short, unsigned char)>
c001665f:	83 c4 10             	add    esp,0x10
c0016662:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016665:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016669:	74 03                	je     c001666e <Vm::faultHandler(regs*)+0x501>
c001666b:	48                   	dec    eax
c001666c:	eb 01                	jmp    c001666f <Vm::faultHandler(regs*)+0x502>
c001666e:	40                   	inc    eax
c001666f:	0f b7 c0             	movzx  eax,ax
c0016672:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016675:	e9 88 01 00 00       	jmp    c0016802 <Vm::faultHandler(regs*)+0x695>
c001667a:	8d 46 ff             	lea    eax,[esi-0x1]
c001667d:	0f b6 f0             	movzx  esi,al
c0016680:	83 fe 05             	cmp    esi,0x5
c0016683:	77 1e                	ja     c00166a3 <Vm::faultHandler(regs*)+0x536>
c0016685:	ff 24 b5 30 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdebd0]
c001668c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016690:	eb 11                	jmp    c00166a3 <Vm::faultHandler(regs*)+0x536>
c0016692:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016695:	eb 0c                	jmp    c00166a3 <Vm::faultHandler(regs*)+0x536>
c0016697:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001669a:	eb 07                	jmp    c00166a3 <Vm::faultHandler(regs*)+0x536>
c001669c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001669f:	eb 02                	jmp    c00166a3 <Vm::faultHandler(regs*)+0x536>
c00166a1:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00166a3:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00166a6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00166ab:	74 37                	je     c00166e4 <Vm::faultHandler(regs*)+0x577>
c00166ad:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00166b3:	76 2f                	jbe    c00166e4 <Vm::faultHandler(regs*)+0x577>
c00166b5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00166b9:	50                   	push   eax
c00166ba:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00166be:	50                   	push   eax
c00166bf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00166c3:	50                   	push   eax
c00166c4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00166c8:	50                   	push   eax
c00166c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166cd:	50                   	push   eax
c00166ce:	6a 6f                	push   0x6f
c00166d0:	6a 6f                	push   0x6f
c00166d2:	68 be 13 02 c0       	push   0xc00213be
c00166d7:	e8 e6 42 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00166dc:	83 c4 20             	add    esp,0x20
c00166df:	e9 83 01 00 00       	jmp    c0016867 <Vm::faultHandler(regs*)+0x6fa>
c00166e4:	0f b7 d7             	movzx  edx,di
c00166e7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00166ea:	0f b7 c6             	movzx  eax,si
c00166ed:	81 e1 00 04 00 00    	and    ecx,0x400
c00166f3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00166f6:	83 e5 01             	and    ebp,0x1
c00166f9:	74 1d                	je     c0016718 <Vm::faultHandler(regs*)+0x5ab>
c00166fb:	55                   	push   ebp
c00166fc:	55                   	push   ebp
c00166fd:	50                   	push   eax
c00166fe:	52                   	push   edx
c00166ff:	e8 18 fa ff ff       	call   c001611c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016704:	83 c4 10             	add    esp,0x10
c0016707:	89 fa                	mov    edx,edi
c0016709:	ef                   	out    dx,eax
c001670a:	85 c9                	test   ecx,ecx
c001670c:	74 05                	je     c0016713 <Vm::faultHandler(regs*)+0x5a6>
c001670e:	83 ee 04             	sub    esi,0x4
c0016711:	eb 21                	jmp    c0016734 <Vm::faultHandler(regs*)+0x5c7>
c0016713:	83 c6 04             	add    esi,0x4
c0016716:	eb 1c                	jmp    c0016734 <Vm::faultHandler(regs*)+0x5c7>
c0016718:	55                   	push   ebp
c0016719:	55                   	push   ebp
c001671a:	50                   	push   eax
c001671b:	52                   	push   edx
c001671c:	e8 e9 f9 ff ff       	call   c001610a <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016721:	83 c4 10             	add    esp,0x10
c0016724:	89 fa                	mov    edx,edi
c0016726:	66 ef                	out    dx,ax
c0016728:	85 c9                	test   ecx,ecx
c001672a:	74 05                	je     c0016731 <Vm::faultHandler(regs*)+0x5c4>
c001672c:	83 ee 02             	sub    esi,0x2
c001672f:	eb 03                	jmp    c0016734 <Vm::faultHandler(regs*)+0x5c7>
c0016731:	83 c6 02             	add    esi,0x2
c0016734:	81 e6 ff ff 00 00    	and    esi,0xffff
c001673a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001673d:	e9 c0 00 00 00       	jmp    c0016802 <Vm::faultHandler(regs*)+0x695>
c0016742:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016749:	83 ec 0c             	sub    esp,0xc
c001674c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016750:	50                   	push   eax
c0016751:	e8 33 f5 ff ff       	call   c0015c89 <Vm::inbv(unsigned short)>
c0016756:	0f b6 c0             	movzx  eax,al
c0016759:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001675c:	eb 3a                	jmp    c0016798 <Vm::faultHandler(regs*)+0x62b>
c001675e:	83 e5 01             	and    ebp,0x1
c0016761:	74 07                	je     c001676a <Vm::faultHandler(regs*)+0x5fd>
c0016763:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016767:	ed                   	in     eax,dx
c0016768:	eb 14                	jmp    c001677e <Vm::faultHandler(regs*)+0x611>
c001676a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001676d:	66 31 f6             	xor    si,si
c0016770:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016773:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016777:	66 ed                	in     ax,dx
c0016779:	0f b7 c0             	movzx  eax,ax
c001677c:	09 f0                	or     eax,esi
c001677e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016781:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016785:	eb 7e                	jmp    c0016805 <Vm::faultHandler(regs*)+0x698>
c0016787:	52                   	push   edx
c0016788:	52                   	push   edx
c0016789:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001678d:	50                   	push   eax
c001678e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016792:	50                   	push   eax
c0016793:	e8 04 f5 ff ff       	call   c0015c9c <Vm::outbv(unsigned short, unsigned char)>
c0016798:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001679c:	eb 4f                	jmp    c00167ed <Vm::faultHandler(regs*)+0x680>
c001679e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00167a1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00167a5:	83 e5 01             	and    ebp,0x1
c00167a8:	74 03                	je     c00167ad <Vm::faultHandler(regs*)+0x640>
c00167aa:	ef                   	out    dx,eax
c00167ab:	eb d4                	jmp    c0016781 <Vm::faultHandler(regs*)+0x614>
c00167ad:	66 ef                	out    dx,ax
c00167af:	eb d0                	jmp    c0016781 <Vm::faultHandler(regs*)+0x614>
c00167b1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00167b8:	83 ec 0c             	sub    esp,0xc
c00167bb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167bf:	50                   	push   eax
c00167c0:	e8 c4 f4 ff ff       	call   c0015c89 <Vm::inbv(unsigned short)>
c00167c5:	0f b6 c0             	movzx  eax,al
c00167c8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00167cb:	eb 1d                	jmp    c00167ea <Vm::faultHandler(regs*)+0x67d>
c00167cd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00167d0:	83 e5 01             	and    ebp,0x1
c00167d3:	74 03                	je     c00167d8 <Vm::faultHandler(regs*)+0x66b>
c00167d5:	ed                   	in     eax,dx
c00167d6:	eb 0d                	jmp    c00167e5 <Vm::faultHandler(regs*)+0x678>
c00167d8:	66 ed                	in     ax,dx
c00167da:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00167dd:	0f b7 c0             	movzx  eax,ax
c00167e0:	66 31 d2             	xor    dx,dx
c00167e3:	09 d0                	or     eax,edx
c00167e5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00167e8:	eb 18                	jmp    c0016802 <Vm::faultHandler(regs*)+0x695>
c00167ea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167ed:	83 c4 10             	add    esp,0x10
c00167f0:	eb 13                	jmp    c0016805 <Vm::faultHandler(regs*)+0x698>
c00167f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00167f5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00167f8:	83 e5 01             	and    ebp,0x1
c00167fb:	74 03                	je     c0016800 <Vm::faultHandler(regs*)+0x693>
c00167fd:	ef                   	out    dx,eax
c00167fe:	eb 02                	jmp    c0016802 <Vm::faultHandler(regs*)+0x695>
c0016800:	66 ef                	out    dx,ax
c0016802:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016805:	b0 01                	mov    al,0x1
c0016807:	eb 60                	jmp    c0016869 <Vm::faultHandler(regs*)+0x6fc>
c0016809:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001680d:	50                   	push   eax
c001680e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016812:	50                   	push   eax
c0016813:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016817:	50                   	push   eax
c0016818:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001681c:	50                   	push   eax
c001681d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016821:	50                   	push   eax
c0016822:	52                   	push   edx
c0016823:	52                   	push   edx
c0016824:	68 eb 13 02 c0       	push   0xc00213eb
c0016829:	e8 94 41 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001682e:	83 c4 20             	add    esp,0x20
c0016831:	83 ec 0c             	sub    esp,0xc
c0016834:	6a 60                	push   0x60
c0016836:	e8 4e f4 ff ff       	call   c0015c89 <Vm::inbv(unsigned short)>
c001683b:	83 c4 10             	add    esp,0x10
c001683e:	0f b6 d0             	movzx  edx,al
c0016841:	83 fa 1c             	cmp    edx,0x1c
c0016844:	74 05                	je     c001684b <Vm::faultHandler(regs*)+0x6de>
c0016846:	83 fa 5a             	cmp    edx,0x5a
c0016849:	75 e6                	jne    c0016831 <Vm::faultHandler(regs*)+0x6c4>
c001684b:	0f b6 c0             	movzx  eax,al
c001684e:	83 f8 1c             	cmp    eax,0x1c
c0016851:	74 05                	je     c0016858 <Vm::faultHandler(regs*)+0x6eb>
c0016853:	83 f8 5a             	cmp    eax,0x5a
c0016856:	75 0f                	jne    c0016867 <Vm::faultHandler(regs*)+0x6fa>
c0016858:	83 ec 0c             	sub    esp,0xc
c001685b:	6a 60                	push   0x60
c001685d:	e8 27 f4 ff ff       	call   c0015c89 <Vm::inbv(unsigned short)>
c0016862:	83 c4 10             	add    esp,0x10
c0016865:	eb e4                	jmp    c001684b <Vm::faultHandler(regs*)+0x6de>
c0016867:	31 c0                	xor    eax,eax
c0016869:	83 c4 2c             	add    esp,0x2c
c001686c:	5b                   	pop    ebx
c001686d:	5e                   	pop    esi
c001686e:	5f                   	pop    edi
c001686f:	5d                   	pop    ebp
c0016870:	c3                   	ret    

c0016871 <noCopro(unsigned long)>:
c0016871:	c3                   	ret    

c0016872 <nmiHandler(regs*, void*)>:
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001687a:	83 ec 0c             	sub    esp,0xc
c001687d:	50                   	push   eax
c001687e:	e8 2b 0a ff ff       	call   c00072ae <Computer::handleNMI()>
c0016883:	83 c4 10             	add    esp,0x10
c0016886:	90                   	nop
c0016887:	83 c4 0c             	add    esp,0xc
c001688a:	c3                   	ret    

c001688b <doubleFault(regs*, void*)>:
c001688b:	55                   	push   ebp
c001688c:	89 e5                	mov    ebp,esp
c001688e:	83 ec 08             	sub    esp,0x8
c0016891:	83 ec 0c             	sub    esp,0xc
c0016894:	68 48 14 02 c0       	push   0xc0021448
c0016899:	e8 51 a0 ff ff       	call   c00108ef <KePanic(char const*)>
c001689e:	83 c4 10             	add    esp,0x10
c00168a1:	90                   	nop
c00168a2:	c9                   	leave  
c00168a3:	c3                   	ret    

c00168a4 <displayDebugInfo(regs*)>:
c00168a4:	83 ec 1c             	sub    esp,0x1c
c00168a7:	0f 20 c0             	mov    eax,cr0
c00168aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168ae:	0f 20 d0             	mov    eax,cr2
c00168b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00168b5:	0f 20 d8             	mov    eax,cr3
c00168b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00168bc:	0f 20 e0             	mov    eax,cr4
c00168bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00168c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00168c9:	83 ec 08             	sub    esp,0x8
c00168cc:	50                   	push   eax
c00168cd:	68 64 14 02 c0       	push   0xc0021464
c00168d2:	e8 eb 40 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00168d7:	83 c4 10             	add    esp,0x10
c00168da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168de:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00168e1:	83 ec 08             	sub    esp,0x8
c00168e4:	50                   	push   eax
c00168e5:	68 55 14 02 c0       	push   0xc0021455
c00168ea:	e8 d3 40 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00168ef:	83 c4 10             	add    esp,0x10
c00168f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00168f9:	83 ec 08             	sub    esp,0x8
c00168fc:	50                   	push   eax
c00168fd:	68 60 14 02 c0       	push   0xc0021460
c0016902:	e8 bb 40 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001690e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016911:	83 ec 08             	sub    esp,0x8
c0016914:	50                   	push   eax
c0016915:	68 6f 14 02 c0       	push   0xc002146f
c001691a:	e8 a3 40 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016926:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016929:	83 ec 08             	sub    esp,0x8
c001692c:	50                   	push   eax
c001692d:	68 7a 14 02 c0       	push   0xc002147a
c0016932:	e8 8b 40 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	83 ec 08             	sub    esp,0x8
c001693d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016941:	68 85 14 02 c0       	push   0xc0021485
c0016946:	e8 77 40 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	83 ec 08             	sub    esp,0x8
c0016951:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016955:	68 90 14 02 c0       	push   0xc0021490
c001695a:	e8 63 40 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001695f:	83 c4 10             	add    esp,0x10
c0016962:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016967:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001696d:	83 ec 0c             	sub    esp,0xc
c0016970:	50                   	push   eax
c0016971:	e8 cd 1d ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001697e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016984:	83 ec 08             	sub    esp,0x8
c0016987:	68 9b 14 02 c0       	push   0xc002149b
c001698c:	50                   	push   eax
c001698d:	e8 fe 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016992:	83 c4 10             	add    esp,0x10
c0016995:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001699a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169a4:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00169a7:	83 ec 08             	sub    esp,0x8
c00169aa:	52                   	push   edx
c00169ab:	50                   	push   eax
c00169ac:	e8 99 20 ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169bf:	83 ec 08             	sub    esp,0x8
c00169c2:	68 a9 14 02 c0       	push   0xc00214a9
c00169c7:	50                   	push   eax
c00169c8:	e8 c3 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00169cd:	83 c4 10             	add    esp,0x10
c00169d0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169db:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00169e0:	8b 12                	mov    edx,DWORD PTR [edx]
c00169e2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00169e5:	83 c2 0c             	add    edx,0xc
c00169e8:	83 ec 08             	sub    esp,0x8
c00169eb:	52                   	push   edx
c00169ec:	50                   	push   eax
c00169ed:	e8 9e 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00169f2:	83 c4 10             	add    esp,0x10
c00169f5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169fa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a00:	83 ec 08             	sub    esp,0x8
c0016a03:	68 b2 14 02 c0       	push   0xc00214b2
c0016a08:	50                   	push   eax
c0016a09:	e8 82 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a20:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016a23:	83 ec 08             	sub    esp,0x8
c0016a26:	52                   	push   edx
c0016a27:	50                   	push   eax
c0016a28:	e8 1d 20 ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016a2d:	83 c4 10             	add    esp,0x10
c0016a30:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a3b:	83 ec 08             	sub    esp,0x8
c0016a3e:	68 ba 14 02 c0       	push   0xc00214ba
c0016a43:	50                   	push   eax
c0016a44:	e8 47 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a49:	83 c4 10             	add    esp,0x10
c0016a4c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a5b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016a5e:	83 ec 08             	sub    esp,0x8
c0016a61:	52                   	push   edx
c0016a62:	50                   	push   eax
c0016a63:	e8 e2 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016a68:	83 c4 10             	add    esp,0x10
c0016a6b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a70:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a76:	83 ec 08             	sub    esp,0x8
c0016a79:	68 c2 14 02 c0       	push   0xc00214c2
c0016a7e:	50                   	push   eax
c0016a7f:	e8 0c 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a84:	83 c4 10             	add    esp,0x10
c0016a87:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a92:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a96:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016a99:	83 ec 08             	sub    esp,0x8
c0016a9c:	52                   	push   edx
c0016a9d:	50                   	push   eax
c0016a9e:	e8 a7 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ab1:	83 ec 08             	sub    esp,0x8
c0016ab4:	68 ca 14 02 c0       	push   0xc00214ca
c0016ab9:	50                   	push   eax
c0016aba:	e8 d1 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016abf:	83 c4 10             	add    esp,0x10
c0016ac2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ac7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016acd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ad1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016ad4:	83 ec 08             	sub    esp,0x8
c0016ad7:	52                   	push   edx
c0016ad8:	50                   	push   eax
c0016ad9:	e8 6c 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ae6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aec:	83 ec 08             	sub    esp,0x8
c0016aef:	68 d2 14 02 c0       	push   0xc00214d2
c0016af4:	50                   	push   eax
c0016af5:	e8 96 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016afa:	83 c4 10             	add    esp,0x10
c0016afd:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b02:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b0c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016b0f:	83 ec 08             	sub    esp,0x8
c0016b12:	52                   	push   edx
c0016b13:	50                   	push   eax
c0016b14:	e8 31 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b19:	83 c4 10             	add    esp,0x10
c0016b1c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b27:	83 ec 08             	sub    esp,0x8
c0016b2a:	68 da 14 02 c0       	push   0xc00214da
c0016b2f:	50                   	push   eax
c0016b30:	e8 5b 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b35:	83 c4 10             	add    esp,0x10
c0016b38:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b3d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b47:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016b4a:	83 ec 08             	sub    esp,0x8
c0016b4d:	52                   	push   edx
c0016b4e:	50                   	push   eax
c0016b4f:	e8 f6 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b54:	83 c4 10             	add    esp,0x10
c0016b57:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b62:	83 ec 08             	sub    esp,0x8
c0016b65:	68 e2 14 02 c0       	push   0xc00214e2
c0016b6a:	50                   	push   eax
c0016b6b:	e8 20 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b70:	83 c4 10             	add    esp,0x10
c0016b73:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b7e:	83 ec 08             	sub    esp,0x8
c0016b81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b85:	50                   	push   eax
c0016b86:	e8 bf 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b8b:	83 c4 10             	add    esp,0x10
c0016b8e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b99:	83 ec 08             	sub    esp,0x8
c0016b9c:	68 eb 14 02 c0       	push   0xc00214eb
c0016ba1:	50                   	push   eax
c0016ba2:	e8 e9 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016ba7:	83 c4 10             	add    esp,0x10
c0016baa:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016baf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bb5:	83 ec 08             	sub    esp,0x8
c0016bb8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016bbc:	50                   	push   eax
c0016bbd:	e8 88 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016bc2:	83 c4 10             	add    esp,0x10
c0016bc5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016bca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bd0:	83 ec 08             	sub    esp,0x8
c0016bd3:	68 f3 14 02 c0       	push   0xc00214f3
c0016bd8:	50                   	push   eax
c0016bd9:	e8 b2 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016bde:	83 c4 10             	add    esp,0x10
c0016be1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016be6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bec:	83 ec 08             	sub    esp,0x8
c0016bef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016bf3:	50                   	push   eax
c0016bf4:	e8 51 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016bf9:	83 c4 10             	add    esp,0x10
c0016bfc:	fa                   	cli    
c0016bfd:	f4                   	hlt    
c0016bfe:	eb fe                	jmp    c0016bfe <displayDebugInfo(regs*)+0x35a>

c0016c00 <HalSystemIdle()>:
c0016c00:	56                   	push   esi
c0016c01:	53                   	push   ebx
c0016c02:	83 ec 14             	sub    esp,0x14
c0016c05:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c10:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016c16:	83 e0 04             	and    eax,0x4
c0016c19:	0f b6 c0             	movzx  eax,al
c0016c1c:	85 c0                	test   eax,eax
c0016c1e:	0f 95 c0             	setne  al
c0016c21:	0f b6 c0             	movzx  eax,al
c0016c24:	85 c0                	test   eax,eax
c0016c26:	74 4c                	je     c0016c74 <HalSystemIdle()+0x74>
c0016c28:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c2d:	83 ec 08             	sub    esp,0x8
c0016c30:	68 e1 00 00 00       	push   0xe1
c0016c35:	50                   	push   eax
c0016c36:	e8 7d 04 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0016c3b:	83 c4 10             	add    esp,0x10
c0016c3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c46:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c4f:	83 e2 02             	and    edx,0x2
c0016c52:	89 d3                	mov    ebx,edx
c0016c54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c58:	83 e2 00             	and    edx,0x0
c0016c5b:	89 d6                	mov    esi,edx
c0016c5d:	56                   	push   esi
c0016c5e:	53                   	push   ebx
c0016c5f:	68 e1 00 00 00       	push   0xe1
c0016c64:	50                   	push   eax
c0016c65:	e8 7a 04 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016c6a:	83 c4 10             	add    esp,0x10
c0016c6d:	e8 22 95 fe ff       	call   c0000194 <doTPAUSE>
c0016c72:	eb 01                	jmp    c0016c75 <HalSystemIdle()+0x75>
c0016c74:	f4                   	hlt    
c0016c75:	90                   	nop
c0016c76:	83 c4 14             	add    esp,0x14
c0016c79:	5b                   	pop    ebx
c0016c7a:	5e                   	pop    esi
c0016c7b:	c3                   	ret    

c0016c7c <displayProgramFault(char const*)>:
c0016c7c:	83 ec 0c             	sub    esp,0xc
c0016c7f:	83 ec 0c             	sub    esp,0xc
c0016c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c86:	e8 37 3d ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0016c8b:	83 c4 10             	add    esp,0x10
c0016c8e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c9e:	85 c0                	test   eax,eax
c0016ca0:	74 21                	je     c0016cc3 <displayProgramFault(char const*)+0x47>
c0016ca2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ca9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cb2:	6a 04                	push   0x4
c0016cb4:	6a 0f                	push   0xf
c0016cb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016cba:	50                   	push   eax
c0016cbb:	e8 42 1e ff ff       	call   c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016cc0:	83 c4 10             	add    esp,0x10
c0016cc3:	90                   	nop
c0016cc4:	83 c4 0c             	add    esp,0xc
c0016cc7:	c3                   	ret    

c0016cc8 <gpFault(regs*, void*)>:
c0016cc8:	83 ec 1c             	sub    esp,0x1c
c0016ccb:	c7 05 14 82 02 c0 6d 61 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc001616d
c0016cd5:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016cda:	85 c0                	test   eax,eax
c0016cdc:	74 1e                	je     c0016cfc <gpFault(regs*, void*)+0x34>
c0016cde:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016ce3:	83 ec 0c             	sub    esp,0xc
c0016ce6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cea:	ff d0                	call   eax
c0016cec:	83 c4 10             	add    esp,0x10
c0016cef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016cf3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016cf8:	85 c0                	test   eax,eax
c0016cfa:	75 2e                	jne    c0016d2a <gpFault(regs*, void*)+0x62>
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	68 fb 14 02 c0       	push   0xc00214fb
c0016d04:	e8 73 ff ff ff       	call   c0016c7c <displayProgramFault(char const*)>
c0016d09:	83 c4 10             	add    esp,0x10
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d13:	e8 8c fb ff ff       	call   c00168a4 <displayDebugInfo(regs*)>
c0016d18:	83 c4 10             	add    esp,0x10
c0016d1b:	83 ec 0c             	sub    esp,0xc
c0016d1e:	6a 00                	push   0x0
c0016d20:	e8 0b ee ff ff       	call   c0015b30 <Thr::terminateFromIRQ(int)>
c0016d25:	83 c4 10             	add    esp,0x10
c0016d28:	eb 01                	jmp    c0016d2b <gpFault(regs*, void*)+0x63>
c0016d2a:	90                   	nop
c0016d2b:	83 c4 1c             	add    esp,0x1c
c0016d2e:	c3                   	ret    

c0016d2f <pgFault(regs*, void*)>:
c0016d2f:	83 ec 1c             	sub    esp,0x1c
c0016d32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d36:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016d39:	0f 20 d0             	mov    eax,cr2
c0016d3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d44:	83 ec 04             	sub    esp,0x4
c0016d47:	52                   	push   edx
c0016d48:	50                   	push   eax
c0016d49:	68 d8 15 02 c0       	push   0xc00215d8
c0016d4e:	e8 6f 3c ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0016d53:	83 c4 10             	add    esp,0x10
c0016d56:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d60:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016d66:	0f 20 d2             	mov    edx,cr2
c0016d69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016d6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d71:	83 ec 08             	sub    esp,0x8
c0016d74:	52                   	push   edx
c0016d75:	50                   	push   eax
c0016d76:	e8 c7 37 ff ff       	call   c000a542 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	0f b6 c0             	movzx  eax,al
c0016d81:	85 c0                	test   eax,eax
c0016d83:	75 2e                	jne    c0016db3 <pgFault(regs*, void*)+0x84>
c0016d85:	83 ec 0c             	sub    esp,0xc
c0016d88:	68 14 15 02 c0       	push   0xc0021514
c0016d8d:	e8 ea fe ff ff       	call   c0016c7c <displayProgramFault(char const*)>
c0016d92:	83 c4 10             	add    esp,0x10
c0016d95:	83 ec 0c             	sub    esp,0xc
c0016d98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d9c:	e8 03 fb ff ff       	call   c00168a4 <displayDebugInfo(regs*)>
c0016da1:	83 c4 10             	add    esp,0x10
c0016da4:	83 ec 0c             	sub    esp,0xc
c0016da7:	6a 00                	push   0x0
c0016da9:	e8 82 ed ff ff       	call   c0015b30 <Thr::terminateFromIRQ(int)>
c0016dae:	83 c4 10             	add    esp,0x10
c0016db1:	eb 01                	jmp    c0016db4 <pgFault(regs*, void*)+0x85>
c0016db3:	90                   	nop
c0016db4:	83 c4 1c             	add    esp,0x1c
c0016db7:	c3                   	ret    

c0016db8 <otherISRHandler(regs*, void*)>:
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	83 ec 0c             	sub    esp,0xc
c0016dbe:	68 00 16 02 c0       	push   0xc0021600
c0016dc3:	e8 b4 fe ff ff       	call   c0016c7c <displayProgramFault(char const*)>
c0016dc8:	83 c4 10             	add    esp,0x10
c0016dcb:	83 ec 0c             	sub    esp,0xc
c0016dce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dd2:	e8 cd fa ff ff       	call   c00168a4 <displayDebugInfo(regs*)>
c0016dd7:	83 c4 10             	add    esp,0x10
c0016dda:	83 ec 0c             	sub    esp,0xc
c0016ddd:	6a 00                	push   0x0
c0016ddf:	e8 4c ed ff ff       	call   c0015b30 <Thr::terminateFromIRQ(int)>
c0016de4:	83 c4 10             	add    esp,0x10
c0016de7:	90                   	nop
c0016de8:	83 c4 0c             	add    esp,0xc
c0016deb:	c3                   	ret    

c0016dec <opcodeFault(regs*, void*)>:
c0016dec:	55                   	push   ebp
c0016ded:	89 e5                	mov    ebp,esp
c0016def:	83 ec 08             	sub    esp,0x8
c0016df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016df5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016df8:	83 ec 08             	sub    esp,0x8
c0016dfb:	50                   	push   eax
c0016dfc:	68 1f 15 02 c0       	push   0xc002151f
c0016e01:	e8 bc 3b ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0016e06:	83 c4 10             	add    esp,0x10
c0016e09:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016e0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e14:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016e1a:	0f b6 c0             	movzx  eax,al
c0016e1d:	85 c0                	test   eax,eax
c0016e1f:	74 21                	je     c0016e42 <opcodeFault(regs*, void*)+0x56>
c0016e21:	83 ec 0c             	sub    esp,0xc
c0016e24:	68 28 16 02 c0       	push   0xc0021628
c0016e29:	e8 94 3b ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0016e2e:	83 c4 10             	add    esp,0x10
c0016e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e34:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e37:	8d 50 19             	lea    edx,[eax+0x19]
c0016e3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e3d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016e40:	eb 2b                	jmp    c0016e6d <opcodeFault(regs*, void*)+0x81>
c0016e42:	83 ec 0c             	sub    esp,0xc
c0016e45:	68 2d 15 02 c0       	push   0xc002152d
c0016e4a:	e8 2d fe ff ff       	call   c0016c7c <displayProgramFault(char const*)>
c0016e4f:	83 c4 10             	add    esp,0x10
c0016e52:	83 ec 0c             	sub    esp,0xc
c0016e55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016e58:	e8 47 fa ff ff       	call   c00168a4 <displayDebugInfo(regs*)>
c0016e5d:	83 c4 10             	add    esp,0x10
c0016e60:	83 ec 0c             	sub    esp,0xc
c0016e63:	6a 00                	push   0x0
c0016e65:	e8 c6 ec ff ff       	call   c0015b30 <Thr::terminateFromIRQ(int)>
c0016e6a:	83 c4 10             	add    esp,0x10
c0016e6d:	c9                   	leave  
c0016e6e:	c3                   	ret    

c0016e6f <i386SaveCoprocessor(void*)>:
c0016e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e73:	83 c0 3f             	add    eax,0x3f
c0016e76:	83 e0 c0             	and    eax,0xffffffc0
c0016e79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e7d:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c0016e83 <i386LoadCoprocessor(void*)>:
c0016e83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e87:	83 c0 3f             	add    eax,0x3f
c0016e8a:	83 e0 c0             	and    eax,0xffffffc0
c0016e8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e91:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016e97 <x87EmulHandler(regs*, void*)>:
c0016e97:	53                   	push   ebx
c0016e98:	83 ec 08             	sub    esp,0x8
c0016e9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016ea4:	74 10                	je     c0016eb6 <x87EmulHandler(regs*, void*)+0x1f>
c0016ea6:	83 ec 0c             	sub    esp,0xc
c0016ea9:	68 3a 15 02 c0       	push   0xc002153a
c0016eae:	e8 3c 9a ff ff       	call   c00108ef <KePanic(char const*)>
c0016eb3:	83 c4 10             	add    esp,0x10
c0016eb6:	0f 20 c0             	mov    eax,cr0
c0016eb9:	a8 08                	test   al,0x8
c0016ebb:	74 59                	je     c0016f16 <x87EmulHandler(regs*, void*)+0x7f>
c0016ebd:	0f 06                	clts   
c0016ebf:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016ec4:	85 c0                	test   eax,eax
c0016ec6:	74 0e                	je     c0016ed6 <x87EmulHandler(regs*, void*)+0x3f>
c0016ec8:	83 ec 0c             	sub    esp,0xc
c0016ecb:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016ece:	e8 9c ff ff ff       	call   c0016e6f <i386SaveCoprocessor(void*)>
c0016ed3:	83 c4 10             	add    esp,0x10
c0016ed6:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016edc:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016ee0:	75 12                	jne    c0016ef4 <x87EmulHandler(regs*, void*)+0x5d>
c0016ee2:	83 ec 0c             	sub    esp,0xc
c0016ee5:	68 40 02 00 00       	push   0x240
c0016eea:	e8 bf 0b ff ff       	call   c0007aae <malloc>
c0016eef:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016ef2:	eb 10                	jmp    c0016f04 <x87EmulHandler(regs*, void*)+0x6d>
c0016ef4:	83 ec 0c             	sub    esp,0xc
c0016ef7:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016efc:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016eff:	e8 7f ff ff ff       	call   c0016e83 <i386LoadCoprocessor(void*)>
c0016f04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f09:	83 c4 10             	add    esp,0x10
c0016f0c:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c0016f11:	83 c4 08             	add    esp,0x8
c0016f14:	5b                   	pop    ebx
c0016f15:	c3                   	ret    
c0016f16:	83 ec 0c             	sub    esp,0xc
c0016f19:	68 4e 15 02 c0       	push   0xc002154e
c0016f1e:	e8 9f 3a ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0016f23:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f2b:	83 c4 18             	add    esp,0x18
c0016f2e:	5b                   	pop    ebx
c0016f2f:	e9 fc eb ff ff       	jmp    c0015b30 <Thr::terminateFromIRQ(int)>

c0016f34 <HalInitialiseCoprocessor()>:
c0016f34:	83 ec 10             	sub    esp,0x10
c0016f37:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0016f41:	6a 00                	push   0x0
c0016f43:	68 97 6e 01 c0       	push   0xc0016e97
c0016f48:	6a 07                	push   0x7
c0016f4a:	e8 db 53 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f4f:	e8 dc 6f 00 00       	call   c001df30 <avxDetect>
c0016f54:	83 c4 10             	add    esp,0x10
c0016f57:	85 c0                	test   eax,eax
c0016f59:	74 1c                	je     c0016f77 <HalInitialiseCoprocessor()+0x43>
c0016f5b:	c7 05 10 82 02 c0 5a df 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001df5a
c0016f65:	c7 05 0c 82 02 c0 6b df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001df6b
c0016f6f:	83 c4 0c             	add    esp,0xc
c0016f72:	e9 05 70 00 00       	jmp    c001df7c <avxInit>
c0016f77:	e8 44 73 00 00       	call   c001e2c0 <absolutelyNoChanceInHell>
c0016f7c:	85 c0                	test   eax,eax
c0016f7e:	74 1c                	je     c0016f9c <HalInitialiseCoprocessor()+0x68>
c0016f80:	c7 05 10 82 02 c0 d8 e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e2d8
c0016f8a:	c7 05 0c 82 02 c0 e0 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2e0
c0016f94:	83 c4 0c             	add    esp,0xc
c0016f97:	e9 4c 73 00 00       	jmp    c001e2e8 <sseInit>
c0016f9c:	e8 65 73 00 00       	call   c001e306 <x87Detect>
c0016fa1:	85 c0                	test   eax,eax
c0016fa3:	74 1c                	je     c0016fc1 <HalInitialiseCoprocessor()+0x8d>
c0016fa5:	c7 05 10 82 02 c0 21 e3 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e321
c0016faf:	c7 05 0c 82 02 c0 28 e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e328
c0016fb9:	83 c4 0c             	add    esp,0xc
c0016fbc:	e9 6e 73 00 00       	jmp    c001e32f <x87Init>
c0016fc1:	c7 05 10 82 02 c0 71 68 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0016871
c0016fcb:	c7 05 0c 82 02 c0 71 68 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc0016871
c0016fd5:	0f 20 c0             	mov    eax,cr0
c0016fd8:	83 c8 04             	or     eax,0x4
c0016fdb:	0f 22 c0             	mov    cr0,eax
c0016fde:	83 c4 0c             	add    esp,0xc
c0016fe1:	c3                   	ret    

c0016fe2 <HalPanic(char const*)>:
c0016fe2:	53                   	push   ebx
c0016fe3:	83 ec 10             	sub    esp,0x10
c0016fe6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016fea:	fa                   	cli    
c0016feb:	53                   	push   ebx
c0016fec:	68 64 15 02 c0       	push   0xc0021564
c0016ff1:	e8 cc 39 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0016ff6:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016ffb:	83 c4 10             	add    esp,0x10
c0016ffe:	85 c0                	test   eax,eax
c0017000:	74 09                	je     c001700b <HalPanic(char const*)+0x29>
c0017002:	83 ec 0c             	sub    esp,0xc
c0017005:	53                   	push   ebx
c0017006:	ff d0                	call   eax
c0017008:	83 c4 10             	add    esp,0x10
c001700b:	50                   	push   eax
c001700c:	6a 01                	push   0x1
c001700e:	6a 0f                	push   0xf
c0017010:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017016:	e8 83 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001701b:	5a                   	pop    edx
c001701c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017022:	e8 67 17 ff ff       	call   c000878e <VgaText::clearScreen()>
c0017027:	59                   	pop    ecx
c0017028:	58                   	pop    eax
c0017029:	68 84 fd 01 c0       	push   0xc001fd84
c001702e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017034:	e8 9d 15 ff ff       	call   c00085d6 <VgaText::setTitle(char*)>
c0017039:	83 c4 0c             	add    esp,0xc
c001703c:	6a 01                	push   0x1
c001703e:	6a 0f                	push   0xf
c0017040:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017046:	e8 53 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001704b:	58                   	pop    eax
c001704c:	5a                   	pop    edx
c001704d:	68 7d 15 02 c0       	push   0xc002157d
c0017052:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017058:	e8 33 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c001705d:	83 c4 0c             	add    esp,0xc
c0017060:	6a 0f                	push   0xf
c0017062:	6a 01                	push   0x1
c0017064:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001706a:	e8 2f 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001706f:	59                   	pop    ecx
c0017070:	58                   	pop    eax
c0017071:	68 86 15 02 c0       	push   0xc0021586
c0017076:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001707c:	e8 0f 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017081:	83 c4 0c             	add    esp,0xc
c0017084:	6a 01                	push   0x1
c0017086:	6a 0f                	push   0xf
c0017088:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001708e:	e8 0b 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017093:	58                   	pop    eax
c0017094:	5a                   	pop    edx
c0017095:	68 ca 15 02 c0       	push   0xc00215ca
c001709a:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170a0:	e8 eb 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170a5:	59                   	pop    ecx
c00170a6:	58                   	pop    eax
c00170a7:	68 93 15 02 c0       	push   0xc0021593
c00170ac:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170b2:	e8 d9 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170b7:	58                   	pop    eax
c00170b8:	5a                   	pop    edx
c00170b9:	68 cd 15 02 c0       	push   0xc00215cd
c00170be:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170c4:	e8 c7 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170c9:	59                   	pop    ecx
c00170ca:	58                   	pop    eax
c00170cb:	53                   	push   ebx
c00170cc:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170d2:	e8 b9 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170d7:	58                   	pop    eax
c00170d8:	5a                   	pop    edx
c00170d9:	68 ca 15 02 c0       	push   0xc00215ca
c00170de:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170e4:	e8 a7 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170e9:	83 c4 10             	add    esp,0x10
c00170ec:	eb fe                	jmp    c00170ec <HalPanic(char const*)+0x10a>

c00170ee <HalQueryPerformanceCounter()>:
c00170ee:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00170f3:	31 d2                	xor    edx,edx
c00170f5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00170fb:	31 c0                	xor    eax,eax
c00170fd:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017104:	74 02                	je     c0017108 <HalQueryPerformanceCounter()+0x1a>
c0017106:	0f 31                	rdtsc  
c0017108:	c3                   	ret    

c0017109 <HalInitialise()>:
c0017109:	53                   	push   ebx
c001710a:	83 ec 08             	sub    esp,0x8
c001710d:	e8 48 54 ff ff       	call   c000c55a <setupINTS()>
c0017112:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017119:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001711e:	75 0f                	jne    c001712f <HalInitialise()+0x26>
c0017120:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017126:	83 e2 fe             	and    edx,0xfffffffe
c0017129:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001712f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017135:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c001713c:	83 e2 fe             	and    edx,0xfffffffe
c001713f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017145:	e8 9e 02 00 00       	call   c00173e8 <picOpen()>
c001714a:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017151:	74 0a                	je     c001715d <HalInitialise()+0x54>
c0017153:	e8 e0 01 00 00       	call   c0017338 <picDisable()>
c0017158:	e8 3d 67 00 00       	call   c001d89a <apicOpen()>
c001715d:	bb 0f 00 00 00       	mov    ebx,0xf
c0017162:	50                   	push   eax
c0017163:	6a 00                	push   0x0
c0017165:	68 b8 6d 01 c0       	push   0xc0016db8
c001716a:	6a 00                	push   0x0
c001716c:	e8 b9 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017171:	83 c4 0c             	add    esp,0xc
c0017174:	6a 00                	push   0x0
c0017176:	68 b8 6d 01 c0       	push   0xc0016db8
c001717b:	6a 01                	push   0x1
c001717d:	e8 a8 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017182:	83 c4 0c             	add    esp,0xc
c0017185:	6a 00                	push   0x0
c0017187:	68 72 68 01 c0       	push   0xc0016872
c001718c:	6a 02                	push   0x2
c001718e:	e8 97 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017193:	83 c4 0c             	add    esp,0xc
c0017196:	6a 00                	push   0x0
c0017198:	68 b8 6d 01 c0       	push   0xc0016db8
c001719d:	6a 03                	push   0x3
c001719f:	e8 86 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171a4:	83 c4 0c             	add    esp,0xc
c00171a7:	6a 00                	push   0x0
c00171a9:	68 b8 6d 01 c0       	push   0xc0016db8
c00171ae:	6a 04                	push   0x4
c00171b0:	e8 75 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171b5:	83 c4 0c             	add    esp,0xc
c00171b8:	6a 00                	push   0x0
c00171ba:	68 b8 6d 01 c0       	push   0xc0016db8
c00171bf:	6a 05                	push   0x5
c00171c1:	e8 64 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171c6:	83 c4 0c             	add    esp,0xc
c00171c9:	6a 00                	push   0x0
c00171cb:	68 ec 6d 01 c0       	push   0xc0016dec
c00171d0:	6a 06                	push   0x6
c00171d2:	e8 53 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171d7:	83 c4 0c             	add    esp,0xc
c00171da:	6a 00                	push   0x0
c00171dc:	68 8b 68 01 c0       	push   0xc001688b
c00171e1:	6a 08                	push   0x8
c00171e3:	e8 42 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171e8:	83 c4 0c             	add    esp,0xc
c00171eb:	6a 00                	push   0x0
c00171ed:	68 b8 6d 01 c0       	push   0xc0016db8
c00171f2:	6a 09                	push   0x9
c00171f4:	e8 31 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171f9:	83 c4 0c             	add    esp,0xc
c00171fc:	6a 00                	push   0x0
c00171fe:	68 b8 6d 01 c0       	push   0xc0016db8
c0017203:	6a 0a                	push   0xa
c0017205:	e8 20 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001720a:	83 c4 0c             	add    esp,0xc
c001720d:	6a 00                	push   0x0
c001720f:	68 b8 6d 01 c0       	push   0xc0016db8
c0017214:	6a 0b                	push   0xb
c0017216:	e8 0f 51 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001721b:	83 c4 0c             	add    esp,0xc
c001721e:	6a 00                	push   0x0
c0017220:	68 c8 6c 01 c0       	push   0xc0016cc8
c0017225:	6a 0d                	push   0xd
c0017227:	e8 fe 50 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001722c:	83 c4 0c             	add    esp,0xc
c001722f:	6a 00                	push   0x0
c0017231:	68 2f 6d 01 c0       	push   0xc0016d2f
c0017236:	6a 0e                	push   0xe
c0017238:	e8 ed 50 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001723d:	83 c4 10             	add    esp,0x10
c0017240:	50                   	push   eax
c0017241:	6a 00                	push   0x0
c0017243:	68 b8 6d 01 c0       	push   0xc0016db8
c0017248:	53                   	push   ebx
c0017249:	43                   	inc    ebx
c001724a:	e8 db 50 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001724f:	83 c4 10             	add    esp,0x10
c0017252:	83 fb 1e             	cmp    ebx,0x1e
c0017255:	75 e9                	jne    c0017240 <HalInitialise()+0x137>
c0017257:	50                   	push   eax
c0017258:	6a 00                	push   0x0
c001725a:	68 ca 1b 01 c0       	push   0xc0011bca
c001725f:	6a 60                	push   0x60
c0017261:	e8 c4 50 ff ff       	call   c000c32a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017266:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001726b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017275:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001727c:	e8 2d 08 ff ff       	call   c0007aae <malloc>
c0017281:	89 04 24             	mov    DWORD PTR [esp],eax
c0017284:	89 c3                	mov    ebx,eax
c0017286:	e8 3b 09 00 00       	call   c0017bc6 <RTC::RTC()>
c001728b:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017295:	5a                   	pop    edx
c0017296:	59                   	pop    ecx
c0017297:	53                   	push   ebx
c0017298:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001729e:	e8 53 4b ff ff       	call   c000bdf6 <Device::addChild(Device*)>
c00172a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00172a5:	6a 00                	push   0x0
c00172a7:	6a 00                	push   0x0
c00172a9:	6a 00                	push   0x0
c00172ab:	53                   	push   ebx
c00172ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00172af:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00172b4:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00172ba:	83 c4 28             	add    esp,0x28
c00172bd:	5b                   	pop    ebx
c00172be:	c3                   	ret    

c00172bf <HalMakeBeep(int)>:
c00172bf:	53                   	push   ebx
c00172c0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00172c4:	85 db                	test   ebx,ebx
c00172c6:	75 07                	jne    c00172cf <HalMakeBeep(int)+0x10>
c00172c8:	e4 61                	in     al,0x61
c00172ca:	83 e0 fc             	and    eax,0xfffffffc
c00172cd:	eb 26                	jmp    c00172f5 <HalMakeBeep(int)+0x36>
c00172cf:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00172d4:	99                   	cdq    
c00172d5:	f7 fb                	idiv   ebx
c00172d7:	89 c1                	mov    ecx,eax
c00172d9:	b0 b6                	mov    al,0xb6
c00172db:	e6 43                	out    0x43,al
c00172dd:	88 c8                	mov    al,cl
c00172df:	e6 42                	out    0x42,al
c00172e1:	89 c8                	mov    eax,ecx
c00172e3:	c1 e8 08             	shr    eax,0x8
c00172e6:	e6 42                	out    0x42,al
c00172e8:	e4 61                	in     al,0x61
c00172ea:	89 c2                	mov    edx,eax
c00172ec:	83 ca 03             	or     edx,0x3
c00172ef:	38 d0                	cmp    al,dl
c00172f1:	74 04                	je     c00172f7 <HalMakeBeep(int)+0x38>
c00172f3:	88 d0                	mov    al,dl
c00172f5:	e6 61                	out    0x61,al
c00172f7:	5b                   	pop    ebx
c00172f8:	c3                   	ret    

c00172f9 <HalGetRand()>:
c00172f9:	31 c0                	xor    eax,eax
c00172fb:	c3                   	ret    

c00172fc <HalEndOfInterrupt(int)>:
c00172fc:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017303:	74 23                	je     c0017328 <HalEndOfInterrupt(int)+0x2c>
c0017305:	83 ec 14             	sub    esp,0x14
c0017308:	6a 1b                	push   0x1b
c001730a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017310:	e8 a3 fd fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0017315:	25 00 f0 ff ff       	and    eax,0xfffff000
c001731a:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017324:	83 c4 1c             	add    esp,0x1c
c0017327:	c3                   	ret    
c0017328:	e9 3f 02 00 00       	jmp    c001756c <picEOI(int)>

c001732d <HalRestart()>:
c001732d:	c3                   	ret    

c001732e <HalShutdown()>:
c001732e:	c3                   	ret    

c001732f <HalSleep()>:
c001732f:	c3                   	ret    

c0017330 <picIoWait()>:
c0017330:	eb 00                	jmp    c0017332 <picIoWait()+0x2>
c0017332:	eb 00                	jmp    c0017334 <picIoWait()+0x4>
c0017334:	90                   	nop
c0017335:	c3                   	ret    
c0017336:	66 90                	xchg   ax,ax

c0017338 <picDisable()>:
c0017338:	83 ec 10             	sub    esp,0x10
c001733b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017342:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017347:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001734b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017350:	ee                   	out    dx,al
c0017351:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017358:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001735d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017361:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017366:	ee                   	out    dx,al
c0017367:	90                   	nop
c0017368:	83 c4 10             	add    esp,0x10
c001736b:	c3                   	ret    

c001736c <picGetIRQReg(int)>:
c001736c:	83 ec 10             	sub    esp,0x10
c001736f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017373:	0f b6 c0             	movzx  eax,al
c0017376:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001737d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017381:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017385:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001738a:	ee                   	out    dx,al
c001738b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001738f:	0f b6 c0             	movzx  eax,al
c0017392:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017399:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001739d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00173a1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00173a6:	ee                   	out    dx,al
c00173a7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00173ae:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00173b3:	89 c2                	mov    edx,eax
c00173b5:	ec                   	in     al,dx
c00173b6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00173ba:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00173be:	0f b6 c0             	movzx  eax,al
c00173c1:	c1 e0 08             	shl    eax,0x8
c00173c4:	89 c1                	mov    ecx,eax
c00173c6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00173cd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00173d2:	89 c2                	mov    edx,eax
c00173d4:	ec                   	in     al,dx
c00173d5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00173d9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00173dd:	0f b6 c0             	movzx  eax,al
c00173e0:	09 c8                	or     eax,ecx
c00173e2:	83 c4 10             	add    esp,0x10
c00173e5:	c3                   	ret    
c00173e6:	66 90                	xchg   ax,ax

c00173e8 <picOpen()>:
c00173e8:	83 ec 50             	sub    esp,0x50
c00173eb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00173f2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00173f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00173fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173ff:	ee                   	out    dx,al
c0017400:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017407:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001740c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017410:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017414:	ee                   	out    dx,al
c0017415:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001741d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017425:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001742c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017430:	89 c2                	mov    edx,eax
c0017432:	ec                   	in     al,dx
c0017433:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017437:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001743b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001743f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017446:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001744a:	89 c2                	mov    edx,eax
c001744c:	ec                   	in     al,dx
c001744d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017451:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017455:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017459:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017460:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017465:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017469:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001746d:	ee                   	out    dx,al
c001746e:	e8 bd fe ff ff       	call   c0017330 <picIoWait()>
c0017473:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001747a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001747f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017483:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017487:	ee                   	out    dx,al
c0017488:	e8 a3 fe ff ff       	call   c0017330 <picIoWait()>
c001748d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017491:	0f b6 c0             	movzx  eax,al
c0017494:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001749b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001749f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00174a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174a7:	ee                   	out    dx,al
c00174a8:	e8 83 fe ff ff       	call   c0017330 <picIoWait()>
c00174ad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174b1:	0f b6 c0             	movzx  eax,al
c00174b4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00174bb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00174bf:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00174c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174c7:	ee                   	out    dx,al
c00174c8:	e8 63 fe ff ff       	call   c0017330 <picIoWait()>
c00174cd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00174d4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00174d9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00174dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00174e1:	ee                   	out    dx,al
c00174e2:	e8 49 fe ff ff       	call   c0017330 <picIoWait()>
c00174e7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00174ee:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00174f3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00174f7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174fb:	ee                   	out    dx,al
c00174fc:	e8 2f fe ff ff       	call   c0017330 <picIoWait()>
c0017501:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017508:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001750d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017511:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017515:	ee                   	out    dx,al
c0017516:	e8 15 fe ff ff       	call   c0017330 <picIoWait()>
c001751b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017522:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017527:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001752b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001752f:	ee                   	out    dx,al
c0017530:	e8 fb fd ff ff       	call   c0017330 <picIoWait()>
c0017535:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001753a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017541:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017545:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017549:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001754d:	ee                   	out    dx,al
c001754e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017553:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001755a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001755e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017562:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017566:	ee                   	out    dx,al
c0017567:	90                   	nop
c0017568:	83 c4 50             	add    esp,0x50
c001756b:	c3                   	ret    

c001756c <picEOI(int)>:
c001756c:	83 ec 10             	sub    esp,0x10
c001756f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017574:	75 1e                	jne    c0017594 <picEOI(int)+0x28>
c0017576:	6a 0b                	push   0xb
c0017578:	e8 ef fd ff ff       	call   c001736c <picGetIRQReg(int)>
c001757d:	83 c4 04             	add    esp,0x4
c0017580:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017585:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001758a:	25 80 00 00 00       	and    eax,0x80
c001758f:	74 73                	je     c0017604 <picEOI(int)+0x98>
c0017591:	8d 76 00             	lea    esi,[esi+0x0]
c0017594:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017599:	75 31                	jne    c00175cc <picEOI(int)+0x60>
c001759b:	6a 0b                	push   0xb
c001759d:	e8 ca fd ff ff       	call   c001736c <picGetIRQReg(int)>
c00175a2:	83 c4 04             	add    esp,0x4
c00175a5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00175aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175ae:	98                   	cwde   
c00175af:	85 c0                	test   eax,eax
c00175b1:	78 19                	js     c00175cc <picEOI(int)+0x60>
c00175b3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00175ba:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00175bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00175c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00175c8:	ee                   	out    dx,al
c00175c9:	eb 3d                	jmp    c0017608 <picEOI(int)+0x9c>
c00175cb:	90                   	nop
c00175cc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00175d1:	7e 19                	jle    c00175ec <picEOI(int)+0x80>
c00175d3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00175da:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00175df:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00175e3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00175e8:	ee                   	out    dx,al
c00175e9:	8d 76 00             	lea    esi,[esi+0x0]
c00175ec:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00175f3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00175f8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00175fc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017601:	ee                   	out    dx,al
c0017602:	eb 04                	jmp    c0017608 <picEOI(int)+0x9c>
c0017604:	90                   	nop
c0017605:	8d 76 00             	lea    esi,[esi+0x0]
c0017608:	83 c4 10             	add    esp,0x10
c001760b:	c3                   	ret    

c001760c <RTC::open(int, int, void*)>:
c001760c:	31 c0                	xor    eax,eax
c001760e:	c3                   	ret    
c001760f:	90                   	nop

c0017610 <RTC::close(int, int, void*)>:
c0017610:	31 c0                	xor    eax,eax
c0017612:	c3                   	ret    
c0017613:	90                   	nop

c0017614 <RTC::timeInSecondsUTC()>:
c0017614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017618:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001761e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017624:	c3                   	ret    
c0017625:	90                   	nop

c0017626 <RTC::timeInDatetimeUTC()>:
c0017626:	53                   	push   ebx
c0017627:	83 ec 14             	sub    esp,0x14
c001762a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001762e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017632:	8b 10                	mov    edx,DWORD PTR [eax]
c0017634:	50                   	push   eax
c0017635:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017638:	83 c4 0c             	add    esp,0xc
c001763b:	52                   	push   edx
c001763c:	50                   	push   eax
c001763d:	53                   	push   ebx
c001763e:	e8 27 45 ff ff       	call   c000bb6a <secondsToDatetime(unsigned long long)>
c0017643:	89 d8                	mov    eax,ebx
c0017645:	83 c4 14             	add    esp,0x14
c0017648:	5b                   	pop    ebx
c0017649:	c2 04 00             	ret    0x4

c001764c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001764c:	56                   	push   esi
c001764d:	53                   	push   ebx
c001764e:	83 ec 14             	sub    esp,0x14
c0017651:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017655:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017657:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001765a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001765e:	52                   	push   edx
c001765f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017663:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017667:	50                   	push   eax
c0017668:	e8 fd 44 ff ff       	call   c000bb6a <secondsToDatetime(unsigned long long)>
c001766d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017671:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017675:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017679:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001767d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017681:	89 f0                	mov    eax,esi
c0017683:	83 c4 20             	add    esp,0x20
c0017686:	5b                   	pop    ebx
c0017687:	5e                   	pop    esi
c0017688:	ff e0                	jmp    eax

c001768a <RTC::~RTC()>:
c001768a:	83 ec 0c             	sub    esp,0xc
c001768d:	ba 68 16 02 c0       	mov    edx,0xc0021668
c0017692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017696:	89 10                	mov    DWORD PTR [eax],edx
c0017698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001769c:	83 ec 0c             	sub    esp,0xc
c001769f:	50                   	push   eax
c00176a0:	e8 57 42 ff ff       	call   c000b8fc <Clock::~Clock()>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	90                   	nop
c00176a9:	83 c4 0c             	add    esp,0xc
c00176ac:	c3                   	ret    
c00176ad:	90                   	nop

c00176ae <RTC::~RTC()>:
c00176ae:	83 ec 0c             	sub    esp,0xc
c00176b1:	83 ec 0c             	sub    esp,0xc
c00176b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176b8:	e8 cd ff ff ff       	call   c001768a <RTC::~RTC()>
c00176bd:	83 c4 10             	add    esp,0x10
c00176c0:	83 ec 08             	sub    esp,0x8
c00176c3:	68 60 01 00 00       	push   0x160
c00176c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176cc:	e8 c4 31 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c00176d1:	83 c4 10             	add    esp,0x10
c00176d4:	83 c4 0c             	add    esp,0xc
c00176d7:	c3                   	ret    

c00176d8 <RTC::get_update_in_progress_flag()>:
c00176d8:	83 ec 14             	sub    esp,0x14
c00176db:	6a 0a                	push   0xa
c00176dd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176e3:	e8 88 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00176e8:	83 c4 1c             	add    esp,0x1c
c00176eb:	0f b6 c0             	movzx  eax,al
c00176ee:	c1 e8 07             	shr    eax,0x7
c00176f1:	c3                   	ret    

c00176f2 <RTC::completeRTCRefresh()>:
c00176f2:	55                   	push   ebp
c00176f3:	57                   	push   edi
c00176f4:	56                   	push   esi
c00176f5:	53                   	push   ebx
c00176f6:	83 ec 3c             	sub    esp,0x3c
c00176f9:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00176ff:	83 ec 0c             	sub    esp,0xc
c0017702:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017706:	e8 cd ff ff ff       	call   c00176d8 <RTC::get_update_in_progress_flag()>
c001770b:	83 c4 10             	add    esp,0x10
c001770e:	84 c0                	test   al,al
c0017710:	74 0e                	je     c0017720 <RTC::completeRTCRefresh()+0x2e>
c0017712:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017718:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001771e:	73 df                	jae    c00176ff <RTC::completeRTCRefresh()+0xd>
c0017720:	51                   	push   ecx
c0017721:	51                   	push   ecx
c0017722:	6a 00                	push   0x0
c0017724:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001772a:	e8 41 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001772f:	5b                   	pop    ebx
c0017730:	89 c7                	mov    edi,eax
c0017732:	5e                   	pop    esi
c0017733:	6a 02                	push   0x2
c0017735:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001773b:	e8 30 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017740:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017744:	5d                   	pop    ebp
c0017745:	58                   	pop    eax
c0017746:	6a 04                	push   0x4
c0017748:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001774e:	e8 1d fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017753:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017757:	58                   	pop    eax
c0017758:	5a                   	pop    edx
c0017759:	6a 07                	push   0x7
c001775b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017761:	e8 0a fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017766:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001776a:	59                   	pop    ecx
c001776b:	5b                   	pop    ebx
c001776c:	6a 08                	push   0x8
c001776e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017774:	e8 f7 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017779:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001777d:	5e                   	pop    esi
c001777e:	5d                   	pop    ebp
c001777f:	6a 09                	push   0x9
c0017781:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017787:	e8 e4 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001778c:	0f b6 c0             	movzx  eax,al
c001778f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017793:	83 c4 10             	add    esp,0x10
c0017796:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c001779c:	83 ec 0c             	sub    esp,0xc
c001779f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00177a3:	e8 30 ff ff ff       	call   c00176d8 <RTC::get_update_in_progress_flag()>
c00177a8:	83 c4 10             	add    esp,0x10
c00177ab:	84 c0                	test   al,al
c00177ad:	74 0e                	je     c00177bd <RTC::completeRTCRefresh()+0xcb>
c00177af:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00177b5:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00177bb:	73 df                	jae    c001779c <RTC::completeRTCRefresh()+0xaa>
c00177bd:	51                   	push   ecx
c00177be:	51                   	push   ecx
c00177bf:	6a 00                	push   0x0
c00177c1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177c7:	e8 a4 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177cc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00177d0:	5b                   	pop    ebx
c00177d1:	5e                   	pop    esi
c00177d2:	6a 02                	push   0x2
c00177d4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177da:	e8 91 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177df:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00177e3:	5d                   	pop    ebp
c00177e4:	58                   	pop    eax
c00177e5:	6a 04                	push   0x4
c00177e7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177ed:	e8 7e f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177f2:	88 c3                	mov    bl,al
c00177f4:	58                   	pop    eax
c00177f5:	5a                   	pop    edx
c00177f6:	6a 07                	push   0x7
c00177f8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177fe:	e8 6d f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017803:	59                   	pop    ecx
c0017804:	89 c6                	mov    esi,eax
c0017806:	5d                   	pop    ebp
c0017807:	6a 08                	push   0x8
c0017809:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001780f:	e8 5c f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017814:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017818:	58                   	pop    eax
c0017819:	5a                   	pop    edx
c001781a:	6a 09                	push   0x9
c001781c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017822:	e8 49 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017827:	89 f9                	mov    ecx,edi
c0017829:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001782d:	0f b6 e8             	movzx  ebp,al
c0017830:	83 c4 10             	add    esp,0x10
c0017833:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017837:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001783c:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0017841:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017845:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017849:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c001784d:	0f 94 c0             	sete   al
c0017850:	0f b6 fb             	movzx  edi,bl
c0017853:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0017857:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001785c:	0f 94 c2             	sete   dl
c001785f:	21 d0                	and    eax,edx
c0017861:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017865:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017869:	0f 94 c2             	sete   dl
c001786c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0017870:	21 c2                	and    edx,eax
c0017872:	89 f0                	mov    eax,esi
c0017874:	0f b6 c0             	movzx  eax,al
c0017877:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001787b:	89 f0                	mov    eax,esi
c001787d:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017881:	0f 94 c0             	sete   al
c0017884:	21 d0                	and    eax,edx
c0017886:	31 d2                	xor    edx,edx
c0017888:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001788c:	0f 94 c2             	sete   dl
c001788f:	85 c2                	test   edx,eax
c0017891:	75 27                	jne    c00178ba <RTC::completeRTCRefresh()+0x1c8>
c0017893:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017897:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001789b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001789f:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00178a3:	89 f0                	mov    eax,esi
c00178a5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00178a9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00178ad:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00178b1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00178b5:	e9 dc fe ff ff       	jmp    c0017796 <RTC::completeRTCRefresh()+0xa4>
c00178ba:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00178be:	75 d3                	jne    c0017893 <RTC::completeRTCRefresh()+0x1a1>
c00178c0:	52                   	push   edx
c00178c1:	52                   	push   edx
c00178c2:	6a 0b                	push   0xb
c00178c4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178ca:	e8 a1 f8 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00178cf:	83 c4 10             	add    esp,0x10
c00178d2:	a8 04                	test   al,0x4
c00178d4:	75 7a                	jne    c0017950 <RTC::completeRTCRefresh()+0x25e>
c00178d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00178da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178de:	83 e1 0f             	and    ecx,0xf
c00178e1:	c1 ea 04             	shr    edx,0x4
c00178e4:	c1 ef 04             	shr    edi,0x4
c00178e7:	6b d2 0a             	imul   edx,edx,0xa
c00178ea:	83 e6 0f             	and    esi,0xf
c00178ed:	01 d1                	add    ecx,edx
c00178ef:	c1 ed 04             	shr    ebp,0x4
c00178f2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00178f6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00178fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00178fe:	c1 ea 04             	shr    edx,0x4
c0017901:	83 e1 0f             	and    ecx,0xf
c0017904:	6b d2 0a             	imul   edx,edx,0xa
c0017907:	6b ed 0a             	imul   ebp,ebp,0xa
c001790a:	01 d1                	add    ecx,edx
c001790c:	89 fa                	mov    edx,edi
c001790e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017912:	83 e2 07             	and    edx,0x7
c0017915:	89 d9                	mov    ecx,ebx
c0017917:	6b d2 0a             	imul   edx,edx,0xa
c001791a:	83 e1 0f             	and    ecx,0xf
c001791d:	83 e3 80             	and    ebx,0xffffff80
c0017920:	01 d1                	add    ecx,edx
c0017922:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017926:	09 cb                	or     ebx,ecx
c0017928:	c1 ea 04             	shr    edx,0x4
c001792b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001792f:	6b d2 0a             	imul   edx,edx,0xa
c0017932:	83 e1 0f             	and    ecx,0xf
c0017935:	01 d6                	add    esi,edx
c0017937:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001793b:	c1 ea 04             	shr    edx,0x4
c001793e:	6b d2 0a             	imul   edx,edx,0xa
c0017941:	01 d1                	add    ecx,edx
c0017943:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017947:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001794b:	83 e2 0f             	and    edx,0xf
c001794e:	01 d5                	add    ebp,edx
c0017950:	a8 02                	test   al,0x2
c0017952:	75 15                	jne    c0017969 <RTC::completeRTCRefresh()+0x277>
c0017954:	f6 c3 80             	test   bl,0x80
c0017957:	74 10                	je     c0017969 <RTC::completeRTCRefresh()+0x277>
c0017959:	83 e3 7f             	and    ebx,0x7f
c001795c:	b9 18 00 00 00       	mov    ecx,0x18
c0017961:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017964:	99                   	cdq    
c0017965:	f7 f9                	idiv   ecx
c0017967:	88 d3                	mov    bl,dl
c0017969:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001796f:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017975:	77 06                	ja     c001797d <RTC::completeRTCRefresh()+0x28b>
c0017977:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001797d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017982:	31 c9                	xor    ecx,ecx
c0017984:	c1 e0 10             	shl    eax,0x10
c0017987:	89 cd                	mov    ebp,ecx
c0017989:	c1 e7 10             	shl    edi,0x10
c001798c:	31 d2                	xor    edx,edx
c001798e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017994:	09 c5                	or     ebp,eax
c0017996:	89 f0                	mov    eax,esi
c0017998:	89 e9                	mov    ecx,ebp
c001799a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001799e:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00179a2:	88 c2                	mov    dl,al
c00179a4:	88 d9                	mov    cl,bl
c00179a6:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00179aa:	0f b7 c2             	movzx  eax,dx
c00179ad:	09 f8                	or     eax,edi
c00179af:	89 c2                	mov    edx,eax
c00179b1:	50                   	push   eax
c00179b2:	50                   	push   eax
c00179b3:	51                   	push   ecx
c00179b4:	52                   	push   edx
c00179b5:	e8 31 40 ff ff       	call   c000b9eb <datetimeToSeconds(datetime_t)>
c00179ba:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00179be:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00179c4:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00179ca:	83 c4 4c             	add    esp,0x4c
c00179cd:	5b                   	pop    ebx
c00179ce:	5e                   	pop    esi
c00179cf:	5f                   	pop    edi
c00179d0:	5d                   	pop    ebp
c00179d1:	c3                   	ret    

c00179d2 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00179d2:	55                   	push   ebp
c00179d3:	57                   	push   edi
c00179d4:	56                   	push   esi
c00179d5:	53                   	push   ebx
c00179d6:	83 ec 30             	sub    esp,0x30
c00179d9:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00179dd:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00179e1:	6a 00                	push   0x0
c00179e3:	6a 00                	push   0x0
c00179e5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179eb:	e8 9a f8 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c00179f0:	83 c4 0c             	add    esp,0xc
c00179f3:	6a 00                	push   0x0
c00179f5:	6a 02                	push   0x2
c00179f7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179fd:	e8 88 f8 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a02:	31 d2                	xor    edx,edx
c0017a04:	89 f9                	mov    ecx,edi
c0017a06:	89 f8                	mov    eax,edi
c0017a08:	c1 e9 10             	shr    ecx,0x10
c0017a0b:	0f b6 c4             	movzx  eax,ah
c0017a0e:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017a12:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017a16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a1a:	b9 64 00 00 00       	mov    ecx,0x64
c0017a1f:	89 f0                	mov    eax,esi
c0017a21:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017a25:	89 f0                	mov    eax,esi
c0017a27:	0f b6 c4             	movzx  eax,ah
c0017a2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a2e:	89 f0                	mov    eax,esi
c0017a30:	c1 e8 10             	shr    eax,0x10
c0017a33:	f7 f1                	div    ecx
c0017a35:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017a39:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017a3d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017a41:	59                   	pop    ecx
c0017a42:	5b                   	pop    ebx
c0017a43:	89 fb                	mov    ebx,edi
c0017a45:	6a 0b                	push   0xb
c0017a47:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a4d:	e8 1e f7 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	89 c5                	mov    ebp,eax
c0017a57:	a8 04                	test   al,0x4
c0017a59:	75 6e                	jne    c0017ac9 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a5f:	31 d2                	xor    edx,edx
c0017a61:	0f b6 c1             	movzx  eax,cl
c0017a64:	b9 0a 00 00 00       	mov    ecx,0xa
c0017a69:	f7 f1                	div    ecx
c0017a6b:	c1 e0 04             	shl    eax,0x4
c0017a6e:	09 d0                	or     eax,edx
c0017a70:	31 d2                	xor    edx,edx
c0017a72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a76:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017a7b:	f7 f1                	div    ecx
c0017a7d:	c1 e0 04             	shl    eax,0x4
c0017a80:	09 d0                	or     eax,edx
c0017a82:	31 d2                	xor    edx,edx
c0017a84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a88:	0f b6 c3             	movzx  eax,bl
c0017a8b:	f7 f1                	div    ecx
c0017a8d:	c1 e0 04             	shl    eax,0x4
c0017a90:	09 d0                	or     eax,edx
c0017a92:	31 d2                	xor    edx,edx
c0017a94:	89 c3                	mov    ebx,eax
c0017a96:	89 f0                	mov    eax,esi
c0017a98:	0f b6 c0             	movzx  eax,al
c0017a9b:	f7 f1                	div    ecx
c0017a9d:	c1 e0 04             	shl    eax,0x4
c0017aa0:	09 d0                	or     eax,edx
c0017aa2:	31 d2                	xor    edx,edx
c0017aa4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aa8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017aad:	f7 f1                	div    ecx
c0017aaf:	c1 e0 04             	shl    eax,0x4
c0017ab2:	09 d0                	or     eax,edx
c0017ab4:	31 d2                	xor    edx,edx
c0017ab6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017aba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017abe:	f7 f1                	div    ecx
c0017ac0:	c1 e0 04             	shl    eax,0x4
c0017ac3:	09 d0                	or     eax,edx
c0017ac5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ac9:	83 e5 02             	and    ebp,0x2
c0017acc:	75 1e                	jne    c0017aec <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017ace:	0f b6 c3             	movzx  eax,bl
c0017ad1:	83 f8 0b             	cmp    eax,0xb
c0017ad4:	76 10                	jbe    c0017ae6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017ad6:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017ad9:	88 d3                	mov    bl,dl
c0017adb:	84 d2                	test   dl,dl
c0017add:	75 02                	jne    c0017ae1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017adf:	b3 0c                	mov    bl,0xc
c0017ae1:	83 cb 80             	or     ebx,0xffffff80
c0017ae4:	eb 06                	jmp    c0017aec <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017ae6:	85 c0                	test   eax,eax
c0017ae8:	75 02                	jne    c0017aec <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017aea:	b3 0c                	mov    bl,0xc
c0017aec:	0f b6 db             	movzx  ebx,bl
c0017aef:	50                   	push   eax
c0017af0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017af5:	52                   	push   edx
c0017af6:	6a 00                	push   0x0
c0017af8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017afe:	e8 87 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b03:	83 c4 0c             	add    esp,0xc
c0017b06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017b0b:	50                   	push   eax
c0017b0c:	6a 02                	push   0x2
c0017b0e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b14:	e8 71 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b19:	83 c4 0c             	add    esp,0xc
c0017b1c:	53                   	push   ebx
c0017b1d:	6a 04                	push   0x4
c0017b1f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b25:	e8 60 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b2a:	83 c4 0c             	add    esp,0xc
c0017b2d:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017b32:	52                   	push   edx
c0017b33:	6a 07                	push   0x7
c0017b35:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b3b:	e8 4a f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b40:	83 c4 0c             	add    esp,0xc
c0017b43:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b48:	50                   	push   eax
c0017b49:	6a 08                	push   0x8
c0017b4b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b51:	e8 34 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b56:	83 c4 0c             	add    esp,0xc
c0017b59:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017b5e:	55                   	push   ebp
c0017b5f:	6a 09                	push   0x9
c0017b61:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b67:	e8 1e f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b6c:	5a                   	pop    edx
c0017b6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017b71:	e8 7c fb ff ff       	call   c00176f2 <RTC::completeRTCRefresh()>
c0017b76:	83 c4 3c             	add    esp,0x3c
c0017b79:	b0 01                	mov    al,0x1
c0017b7b:	5b                   	pop    ebx
c0017b7c:	5e                   	pop    esi
c0017b7d:	5f                   	pop    edi
c0017b7e:	5d                   	pop    ebp
c0017b7f:	c3                   	ret    

c0017b80 <rtcIRQHandler(regs*, void*)>:
c0017b80:	53                   	push   ebx
c0017b81:	83 ec 10             	sub    esp,0x10
c0017b84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017b88:	6a 0c                	push   0xc
c0017b8a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b90:	e8 db f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b95:	83 c4 10             	add    esp,0x10
c0017b98:	a8 80                	test   al,0x80
c0017b9a:	74 24                	je     c0017bc0 <rtcIRQHandler(regs*, void*)+0x40>
c0017b9c:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017ba3:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017baa:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017bb1:	75 0d                	jne    c0017bc0 <rtcIRQHandler(regs*, void*)+0x40>
c0017bb3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017bb7:	83 c4 08             	add    esp,0x8
c0017bba:	5b                   	pop    ebx
c0017bbb:	e9 32 fb ff ff       	jmp    c00176f2 <RTC::completeRTCRefresh()>
c0017bc0:	83 c4 08             	add    esp,0x8
c0017bc3:	5b                   	pop    ebx
c0017bc4:	c3                   	ret    
c0017bc5:	90                   	nop

c0017bc6 <RTC::RTC()>:
c0017bc6:	83 ec 1c             	sub    esp,0x1c
c0017bc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bcd:	83 ec 08             	sub    esp,0x8
c0017bd0:	68 4b 16 02 c0       	push   0xc002164b
c0017bd5:	50                   	push   eax
c0017bd6:	e8 eb 3c ff ff       	call   c000b8c6 <Clock::Clock(char const*)>
c0017bdb:	83 c4 10             	add    esp,0x10
c0017bde:	ba 68 16 02 c0       	mov    edx,0xc0021668
c0017be3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017be7:	89 10                	mov    DWORD PTR [eax],edx
c0017be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bed:	83 ec 0c             	sub    esp,0xc
c0017bf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bf4:	6a 01                	push   0x1
c0017bf6:	68 80 7b 01 c0       	push   0xc0017b80
c0017bfb:	6a 08                	push   0x8
c0017bfd:	50                   	push   eax
c0017bfe:	e8 9f 41 ff ff       	call   c000bda2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017c03:	83 c4 20             	add    esp,0x20
c0017c06:	89 c2                	mov    edx,eax
c0017c08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c0c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017c12:	fa                   	cli    
c0017c13:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c18:	83 c0 01             	add    eax,0x1
c0017c1b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017c20:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017c25:	83 ec 08             	sub    esp,0x8
c0017c28:	6a 0b                	push   0xb
c0017c2a:	50                   	push   eax
c0017c2b:	e8 40 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c30:	83 c4 10             	add    esp,0x10
c0017c33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017c37:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017c3c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017c40:	83 ca 10             	or     edx,0x10
c0017c43:	0f b6 d2             	movzx  edx,dl
c0017c46:	83 ec 04             	sub    esp,0x4
c0017c49:	52                   	push   edx
c0017c4a:	6a 0b                	push   0xb
c0017c4c:	50                   	push   eax
c0017c4d:	e8 38 f6 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017c52:	83 c4 10             	add    esp,0x10
c0017c55:	83 ec 0c             	sub    esp,0xc
c0017c58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c5c:	e8 91 fa ff ff       	call   c00176f2 <RTC::completeRTCRefresh()>
c0017c61:	83 c4 10             	add    esp,0x10
c0017c64:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c69:	83 e8 01             	sub    eax,0x1
c0017c6c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017c71:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c76:	85 c0                	test   eax,eax
c0017c78:	75 01                	jne    c0017c7b <RTC::RTC()+0xb5>
c0017c7a:	fb                   	sti    
c0017c7b:	90                   	nop
c0017c7c:	83 c4 1c             	add    esp,0x1c
c0017c7f:	c3                   	ret    

c0017c80 <HalConsoleScroll(int, int)>:
c0017c80:	83 ec 10             	sub    esp,0x10
c0017c83:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017c8b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017c93:	90                   	nop
c0017c94:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c99:	0f 8f e1 00 00 00    	jg     c0017d80 <HalConsoleScroll(int, int)+0x100>
c0017c9f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017ca7:	90                   	nop
c0017ca8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017cb0:	0f 8f be 00 00 00    	jg     c0017d74 <HalConsoleScroll(int, int)+0xf4>
c0017cb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cba:	89 d0                	mov    eax,edx
c0017cbc:	c1 e0 02             	shl    eax,0x2
c0017cbf:	01 d0                	add    eax,edx
c0017cc1:	c1 e0 05             	shl    eax,0x5
c0017cc4:	89 c2                	mov    edx,eax
c0017cc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cca:	01 d0                	add    eax,edx
c0017ccc:	89 c2                	mov    edx,eax
c0017cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cd2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017cd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cd9:	89 d0                	mov    eax,edx
c0017cdb:	c1 e0 02             	shl    eax,0x2
c0017cde:	01 d0                	add    eax,edx
c0017ce0:	c1 e0 05             	shl    eax,0x5
c0017ce3:	89 c2                	mov    edx,eax
c0017ce5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ce9:	01 d0                	add    eax,edx
c0017ceb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cf5:	01 c2                	add    edx,eax
c0017cf7:	8a 01                	mov    al,BYTE PTR [ecx]
c0017cf9:	88 02                	mov    BYTE PTR [edx],al
c0017cfb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017d00:	75 66                	jne    c0017d68 <HalConsoleScroll(int, int)+0xe8>
c0017d02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d06:	83 e0 01             	and    eax,0x1
c0017d09:	74 39                	je     c0017d44 <HalConsoleScroll(int, int)+0xc4>
c0017d0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d0f:	83 e0 0f             	and    eax,0xf
c0017d12:	88 c2                	mov    dl,al
c0017d14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d18:	c1 e0 04             	shl    eax,0x4
c0017d1b:	09 d0                	or     eax,edx
c0017d1d:	88 c1                	mov    cl,al
c0017d1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d23:	89 d0                	mov    eax,edx
c0017d25:	c1 e0 02             	shl    eax,0x2
c0017d28:	01 d0                	add    eax,edx
c0017d2a:	c1 e0 05             	shl    eax,0x5
c0017d2d:	89 c2                	mov    edx,eax
c0017d2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d33:	01 d0                	add    eax,edx
c0017d35:	89 c2                	mov    edx,eax
c0017d37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d3b:	01 d0                	add    eax,edx
c0017d3d:	88 ca                	mov    dl,cl
c0017d3f:	88 10                	mov    BYTE PTR [eax],dl
c0017d41:	eb 25                	jmp    c0017d68 <HalConsoleScroll(int, int)+0xe8>
c0017d43:	90                   	nop
c0017d44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d48:	89 d0                	mov    eax,edx
c0017d4a:	c1 e0 02             	shl    eax,0x2
c0017d4d:	01 d0                	add    eax,edx
c0017d4f:	c1 e0 05             	shl    eax,0x5
c0017d52:	89 c2                	mov    edx,eax
c0017d54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d58:	01 d0                	add    eax,edx
c0017d5a:	89 c2                	mov    edx,eax
c0017d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d60:	01 d0                	add    eax,edx
c0017d62:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017d65:	8d 76 00             	lea    esi,[esi+0x0]
c0017d68:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017d6d:	e9 36 ff ff ff       	jmp    c0017ca8 <HalConsoleScroll(int, int)+0x28>
c0017d72:	66 90                	xchg   ax,ax
c0017d74:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017d79:	e9 16 ff ff ff       	jmp    c0017c94 <HalConsoleScroll(int, int)+0x14>
c0017d7e:	66 90                	xchg   ax,ax
c0017d80:	90                   	nop
c0017d81:	83 c4 10             	add    esp,0x10
c0017d84:	c3                   	ret    
c0017d85:	8d 76 00             	lea    esi,[esi+0x0]

c0017d88 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017d88:	83 ec 14             	sub    esp,0x14
c0017d8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d8f:	88 04 24             	mov    BYTE PTR [esp],al
c0017d92:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017d95:	0f b6 c0             	movzx  eax,al
c0017d98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d9c:	89 d1                	mov    ecx,edx
c0017d9e:	83 e1 0f             	and    ecx,0xf
c0017da1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017da5:	c1 e2 04             	shl    edx,0x4
c0017da8:	0f b6 d2             	movzx  edx,dl
c0017dab:	09 ca                	or     edx,ecx
c0017dad:	c1 e2 08             	shl    edx,0x8
c0017db0:	09 d0                	or     eax,edx
c0017db2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017db7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017dbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dc3:	89 d0                	mov    eax,edx
c0017dc5:	c1 e0 02             	shl    eax,0x2
c0017dc8:	01 d0                	add    eax,edx
c0017dca:	c1 e0 04             	shl    eax,0x4
c0017dcd:	89 c2                	mov    edx,eax
c0017dcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017dd3:	01 d0                	add    eax,edx
c0017dd5:	01 c0                	add    eax,eax
c0017dd7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017ddb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ddf:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017de4:	66 89 02             	mov    WORD PTR [edx],ax
c0017de7:	90                   	nop
c0017de8:	83 c4 14             	add    esp,0x14
c0017deb:	c3                   	ret    

c0017dec <HalConsoleCursorUpdate(int, int)>:
c0017dec:	83 ec 20             	sub    esp,0x20
c0017def:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017df3:	89 c2                	mov    edx,eax
c0017df5:	c1 e2 02             	shl    edx,0x2
c0017df8:	01 d0                	add    eax,edx
c0017dfa:	c1 e0 04             	shl    eax,0x4
c0017dfd:	89 c2                	mov    edx,eax
c0017dff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e03:	01 d0                	add    eax,edx
c0017e05:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017e0a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017e11:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017e16:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e1e:	ee                   	out    dx,al
c0017e1f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017e24:	0f b6 c0             	movzx  eax,al
c0017e27:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017e2e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017e32:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e3a:	ee                   	out    dx,al
c0017e3b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017e42:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017e47:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017e4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e4f:	ee                   	out    dx,al
c0017e50:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017e55:	c1 e8 08             	shr    eax,0x8
c0017e58:	0f b6 c0             	movzx  eax,al
c0017e5b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017e62:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017e66:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017e6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e6e:	ee                   	out    dx,al
c0017e6f:	90                   	nop
c0017e70:	83 c4 20             	add    esp,0x20
c0017e73:	c3                   	ret    

c0017e74 <FAT::getName()>:
c0017e74:	b8 9c 16 02 c0       	mov    eax,0xc002169c
c0017e79:	c3                   	ret    
c0017e7a:	66 90                	xchg   ax,ax

c0017e7c <FAT::tell(void*, unsigned long long*)>:
c0017e7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e81:	75 09                	jne    c0017e8c <FAT::tell(void*, unsigned long long*)+0x10>
c0017e83:	b8 04 00 00 00       	mov    eax,0x4
c0017e88:	c3                   	ret    
c0017e89:	8d 76 00             	lea    esi,[esi+0x0]
c0017e8c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e91:	75 09                	jne    c0017e9c <FAT::tell(void*, unsigned long long*)+0x20>
c0017e93:	b8 04 00 00 00       	mov    eax,0x4
c0017e98:	c3                   	ret    
c0017e99:	8d 76 00             	lea    esi,[esi+0x0]
c0017e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ea0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017ea3:	ba 00 00 00 00       	mov    edx,0x0
c0017ea8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017eac:	89 01                	mov    DWORD PTR [ecx],eax
c0017eae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017eb1:	b8 00 00 00 00       	mov    eax,0x0
c0017eb6:	c3                   	ret    
c0017eb7:	90                   	nop

c0017eb8 <FAT::stat(void*, unsigned long long*)>:
c0017eb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017ebd:	75 09                	jne    c0017ec8 <FAT::stat(void*, unsigned long long*)+0x10>
c0017ebf:	b8 04 00 00 00       	mov    eax,0x4
c0017ec4:	c3                   	ret    
c0017ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ecd:	75 09                	jne    c0017ed8 <FAT::stat(void*, unsigned long long*)+0x20>
c0017ecf:	b8 04 00 00 00       	mov    eax,0x4
c0017ed4:	c3                   	ret    
c0017ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017edc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017edf:	ba 00 00 00 00       	mov    edx,0x0
c0017ee4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ee8:	89 01                	mov    DWORD PTR [ecx],eax
c0017eea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017eed:	b8 00 00 00 00       	mov    eax,0x0
c0017ef2:	c3                   	ret    
c0017ef3:	90                   	nop

c0017ef4 <FAT::~FAT()>:
c0017ef4:	83 ec 0c             	sub    esp,0xc
c0017ef7:	ba e8 16 02 c0       	mov    edx,0xc00216e8
c0017efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f00:	89 10                	mov    DWORD PTR [eax],edx
c0017f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f06:	83 ec 0c             	sub    esp,0xc
c0017f09:	50                   	push   eax
c0017f0a:	e8 f9 2d ff ff       	call   c000ad08 <Filesystem::~Filesystem()>
c0017f0f:	83 c4 10             	add    esp,0x10
c0017f12:	90                   	nop
c0017f13:	83 c4 0c             	add    esp,0xc
c0017f16:	c3                   	ret    
c0017f17:	90                   	nop

c0017f18 <FAT::~FAT()>:
c0017f18:	83 ec 0c             	sub    esp,0xc
c0017f1b:	83 ec 0c             	sub    esp,0xc
c0017f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f22:	e8 cd ff ff ff       	call   c0017ef4 <FAT::~FAT()>
c0017f27:	83 c4 10             	add    esp,0x10
c0017f2a:	83 ec 08             	sub    esp,0x8
c0017f2d:	6a 08                	push   0x8
c0017f2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f33:	e8 5d 29 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c0017f38:	83 c4 10             	add    esp,0x10
c0017f3b:	83 c4 0c             	add    esp,0xc
c0017f3e:	c3                   	ret    
c0017f3f:	90                   	nop

c0017f40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017f40:	83 ec 1c             	sub    esp,0x1c
c0017f43:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017f4a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017f4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f53:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f5a:	83 f8 ff             	cmp    eax,0xffffffff
c0017f5d:	75 35                	jne    c0017f94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017f5f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f63:	88 c2                	mov    dl,al
c0017f65:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f6a:	01 d0                	add    eax,edx
c0017f6c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f70:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f7a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f81:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f8a:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f91:	eb 19                	jmp    c0017fac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017f93:	90                   	nop
c0017f94:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f98:	88 c2                	mov    dl,al
c0017f9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f9e:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fa5:	01 d0                	add    eax,edx
c0017fa7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017fab:	90                   	nop
c0017fac:	83 ec 04             	sub    esp,0x4
c0017faf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017fb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017fb7:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017fbb:	50                   	push   eax
c0017fbc:	e8 0e d0 fe ff       	call   c0004fcf <f_getlabel>
c0017fc1:	83 c4 10             	add    esp,0x10
c0017fc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017fc8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017fcd:	75 09                	jne    c0017fd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017fcf:	b8 00 00 00 00       	mov    eax,0x0
c0017fd4:	eb 0a                	jmp    c0017fe0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017fd6:	66 90                	xchg   ax,ax
c0017fd8:	b8 01 00 00 00       	mov    eax,0x1
c0017fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0017fe0:	83 c4 1c             	add    esp,0x1c
c0017fe3:	c3                   	ret    

c0017fe4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017fe4:	57                   	push   edi
c0017fe5:	83 ec 58             	sub    esp,0x58
c0017fe8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017ff0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017ff4:	b8 00 00 00 00       	mov    eax,0x0
c0017ff9:	b9 0f 00 00 00       	mov    ecx,0xf
c0017ffe:	fc                   	cld    
c0017fff:	89 d7                	mov    edi,edx
c0018001:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018003:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018007:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001800e:	83 f8 ff             	cmp    eax,0xffffffff
c0018011:	75 35                	jne    c0018048 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018013:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018017:	88 c2                	mov    dl,al
c0018019:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001801e:	01 d0                	add    eax,edx
c0018020:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018024:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001802a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001802e:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018035:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001803a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001803e:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018045:	eb 19                	jmp    c0018060 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018047:	90                   	nop
c0018048:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001804c:	88 c2                	mov    dl,al
c001804e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018052:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018059:	01 d0                	add    eax,edx
c001805b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001805f:	90                   	nop
c0018060:	83 ec 08             	sub    esp,0x8
c0018063:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018067:	8d 44 24 18          	lea    eax,[esp+0x18]
c001806b:	50                   	push   eax
c001806c:	e8 cf 87 fe ff       	call   c0000840 <strcat>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	83 ec 0c             	sub    esp,0xc
c0018077:	8d 44 24 18          	lea    eax,[esp+0x18]
c001807b:	50                   	push   eax
c001807c:	e8 9f d0 fe ff       	call   c0005120 <f_setlabel>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018088:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001808d:	75 09                	jne    c0018098 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001808f:	b8 00 00 00 00       	mov    eax,0x0
c0018094:	eb 0a                	jmp    c00180a0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018096:	66 90                	xchg   ax,ax
c0018098:	b8 01 00 00 00       	mov    eax,0x1
c001809d:	8d 76 00             	lea    esi,[esi+0x0]
c00180a0:	83 c4 58             	add    esp,0x58
c00180a3:	5f                   	pop    edi
c00180a4:	c3                   	ret    
c00180a5:	90                   	nop
c00180a6:	66 90                	xchg   ax,ax

c00180a8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00180a8:	83 ec 2c             	sub    esp,0x2c
c00180ab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00180b3:	83 ec 08             	sub    esp,0x8
c00180b6:	68 c0 16 02 c0       	push   0xc00216c0
c00180bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180bf:	e8 8c 86 fe ff       	call   c0000750 <strcmp>
c00180c4:	83 c4 10             	add    esp,0x10
c00180c7:	85 c0                	test   eax,eax
c00180c9:	0f 94 c0             	sete   al
c00180cc:	0f b6 c0             	movzx  eax,al
c00180cf:	85 c0                	test   eax,eax
c00180d1:	74 0d                	je     c00180e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00180d3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180db:	e9 c0 00 00 00       	jmp    c00181a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180e0:	83 ec 08             	sub    esp,0x8
c00180e3:	68 b2 16 02 c0       	push   0xc00216b2
c00180e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180ec:	e8 5f 86 fe ff       	call   c0000750 <strcmp>
c00180f1:	83 c4 10             	add    esp,0x10
c00180f4:	85 c0                	test   eax,eax
c00180f6:	0f 94 c0             	sete   al
c00180f9:	0f b6 c0             	movzx  eax,al
c00180fc:	85 c0                	test   eax,eax
c00180fe:	74 10                	je     c0018110 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018100:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018108:	e9 93 00 00 00       	jmp    c00181a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001810d:	8d 76 00             	lea    esi,[esi+0x0]
c0018110:	83 ec 08             	sub    esp,0x8
c0018113:	68 b8 16 02 c0       	push   0xc00216b8
c0018118:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001811c:	e8 2f 86 fe ff       	call   c0000750 <strcmp>
c0018121:	83 c4 10             	add    esp,0x10
c0018124:	85 c0                	test   eax,eax
c0018126:	0f 94 c0             	sete   al
c0018129:	0f b6 c0             	movzx  eax,al
c001812c:	85 c0                	test   eax,eax
c001812e:	74 0c                	je     c001813c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018130:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018138:	eb 66                	jmp    c00181a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001813a:	66 90                	xchg   ax,ax
c001813c:	83 ec 08             	sub    esp,0x8
c001813f:	68 3c f4 01 c0       	push   0xc001f43c
c0018144:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018148:	e8 03 86 fe ff       	call   c0000750 <strcmp>
c001814d:	83 c4 10             	add    esp,0x10
c0018150:	85 c0                	test   eax,eax
c0018152:	0f 94 c0             	sete   al
c0018155:	0f b6 c0             	movzx  eax,al
c0018158:	85 c0                	test   eax,eax
c001815a:	74 0c                	je     c0018168 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001815c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018164:	eb 3a                	jmp    c00181a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018166:	66 90                	xchg   ax,ax
c0018168:	83 ec 08             	sub    esp,0x8
c001816b:	68 be 16 02 c0       	push   0xc00216be
c0018170:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018174:	e8 d7 85 fe ff       	call   c0000750 <strcmp>
c0018179:	83 c4 10             	add    esp,0x10
c001817c:	85 c0                	test   eax,eax
c001817e:	0f 94 c0             	sete   al
c0018181:	0f b6 c0             	movzx  eax,al
c0018184:	85 c0                	test   eax,eax
c0018186:	74 0c                	je     c0018194 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018188:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018190:	eb 0e                	jmp    c00181a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018192:	66 90                	xchg   ax,ax
c0018194:	b8 08 00 00 00       	mov    eax,0x8
c0018199:	e9 ea 00 00 00       	jmp    c0018288 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001819e:	66 90                	xchg   ax,ax
c00181a0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00181a7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00181ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00181b0:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00181b7:	83 f8 ff             	cmp    eax,0xffffffff
c00181ba:	75 34                	jne    c00181f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00181bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00181c0:	88 c2                	mov    dl,al
c00181c2:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181c7:	01 d0                	add    eax,edx
c00181c9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00181cd:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00181d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00181d7:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00181de:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00181e7:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00181ee:	eb 18                	jmp    c0018208 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00181f0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00181f4:	88 c2                	mov    dl,al
c00181f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00181fa:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018201:	01 d0                	add    eax,edx
c0018203:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018207:	90                   	nop
c0018208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001820c:	88 04 24             	mov    BYTE PTR [esp],al
c001820f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018213:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018217:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001821f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018224:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001822c:	83 ec 0c             	sub    esp,0xc
c001822f:	68 00 20 00 00       	push   0x2000
c0018234:	e8 75 f8 fe ff       	call   c0007aae <malloc>
c0018239:	83 c4 10             	add    esp,0x10
c001823c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018240:	68 00 20 00 00       	push   0x2000
c0018245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018249:	8d 44 24 08          	lea    eax,[esp+0x8]
c001824d:	50                   	push   eax
c001824e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018252:	50                   	push   eax
c0018253:	e8 c5 d1 fe ff       	call   c000541d <f_mkfs>
c0018258:	83 c4 10             	add    esp,0x10
c001825b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001825f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018264:	75 0a                	jne    c0018270 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018266:	b8 00 00 00 00       	mov    eax,0x0
c001826b:	eb 1b                	jmp    c0018288 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001826d:	8d 76 00             	lea    esi,[esi+0x0]
c0018270:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018275:	75 09                	jne    c0018280 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018277:	b8 09 00 00 00       	mov    eax,0x9
c001827c:	eb 0a                	jmp    c0018288 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001827e:	66 90                	xchg   ax,ax
c0018280:	b8 01 00 00 00       	mov    eax,0x1
c0018285:	8d 76 00             	lea    esi,[esi+0x0]
c0018288:	83 c4 2c             	add    esp,0x2c
c001828b:	c3                   	ret    

c001828c <FAT::tryMount(LogicalDisk*, int)>:
c001828c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018292:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018297:	83 f8 14             	cmp    eax,0x14
c001829a:	75 18                	jne    c00182b4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001829c:	83 ec 0c             	sub    esp,0xc
c001829f:	68 c4 16 02 c0       	push   0xc00216c4
c00182a4:	e8 46 86 ff ff       	call   c00108ef <KePanic(char const*)>
c00182a9:	83 c4 10             	add    esp,0x10
c00182ac:	b0 00                	mov    al,0x0
c00182ae:	e9 ed 01 00 00       	jmp    c00184a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182b3:	90                   	nop
c00182b4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00182bb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00182c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00182c7:	3d 00 02 00 00       	cmp    eax,0x200
c00182cc:	74 0a                	je     c00182d8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00182ce:	b0 00                	mov    al,0x0
c00182d0:	e9 cb 01 00 00       	jmp    c00184a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182d5:	8d 76 00             	lea    esi,[esi+0x0]
c00182d8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00182e0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00182e7:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00182ee:	83 f8 ff             	cmp    eax,0xffffffff
c00182f1:	74 09                	je     c00182fc <FAT::tryMount(LogicalDisk*, int)+0x70>
c00182f3:	b0 01                	mov    al,0x1
c00182f5:	e9 a6 01 00 00       	jmp    c00184a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182fa:	66 90                	xchg   ax,ax
c00182fc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018306:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001830e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018315:	88 c2                	mov    dl,al
c0018317:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001831c:	01 d0                	add    eax,edx
c001831e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018325:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001832b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018332:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018339:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001833e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018345:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001834c:	83 ec 0c             	sub    esp,0xc
c001834f:	68 34 02 00 00       	push   0x234
c0018354:	e8 55 f7 fe ff       	call   c0007aae <malloc>
c0018359:	83 c4 10             	add    esp,0x10
c001835c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018363:	83 ec 04             	sub    esp,0x4
c0018366:	6a 00                	push   0x0
c0018368:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001836f:	50                   	push   eax
c0018370:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018377:	e8 7c b8 fe ff       	call   c0003bf8 <f_mount>
c001837c:	83 c4 10             	add    esp,0x10
c001837f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018386:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001838e:	74 1c                	je     c00183ac <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018390:	83 ec 0c             	sub    esp,0xc
c0018393:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001839a:	e8 2f f7 fe ff       	call   c0007ace <rfree>
c001839f:	83 c4 10             	add    esp,0x10
c00183a2:	b0 00                	mov    al,0x0
c00183a4:	e9 f7 00 00 00       	jmp    c00184a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183a9:	8d 76 00             	lea    esi,[esi+0x0]
c00183ac:	83 ec 04             	sub    esp,0x4
c00183af:	68 00 01 00 00       	push   0x100
c00183b4:	6a 00                	push   0x0
c00183b6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00183bd:	50                   	push   eax
c00183be:	e8 2d 81 fe ff       	call   c00004f0 <memset>
c00183c3:	83 c4 10             	add    esp,0x10
c00183c6:	83 ec 08             	sub    esp,0x8
c00183c9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00183d0:	50                   	push   eax
c00183d1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00183d8:	50                   	push   eax
c00183d9:	e8 62 84 fe ff       	call   c0000840 <strcat>
c00183de:	83 c4 10             	add    esp,0x10
c00183e1:	83 ec 08             	sub    esp,0x8
c00183e4:	68 d2 16 02 c0       	push   0xc00216d2
c00183e9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00183f0:	50                   	push   eax
c00183f1:	e8 4a 84 fe ff       	call   c0000840 <strcat>
c00183f6:	83 c4 10             	add    esp,0x10
c00183f9:	83 ec 04             	sub    esp,0x4
c00183fc:	6a 01                	push   0x1
c00183fe:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018405:	50                   	push   eax
c0018406:	8d 44 24 14          	lea    eax,[esp+0x14]
c001840a:	50                   	push   eax
c001840b:	e8 4a b8 fe ff       	call   c0003c5a <f_open>
c0018410:	83 c4 10             	add    esp,0x10
c0018413:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001841a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018421:	85 c0                	test   eax,eax
c0018423:	74 0b                	je     c0018430 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018425:	78 31                	js     c0018458 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018427:	83 e8 04             	sub    eax,0x4
c001842a:	83 f8 01             	cmp    eax,0x1
c001842d:	77 29                	ja     c0018458 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001842f:	90                   	nop
c0018430:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018438:	83 ec 0c             	sub    esp,0xc
c001843b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001843f:	50                   	push   eax
c0018440:	e8 e4 bf fe ff       	call   c0004429 <f_close>
c0018445:	83 c4 10             	add    esp,0x10
c0018448:	90                   	nop
c0018449:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018451:	85 c0                	test   eax,eax
c0018453:	74 43                	je     c0018498 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018455:	eb 31                	jmp    c0018488 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018457:	90                   	nop
c0018458:	83 ec 0c             	sub    esp,0xc
c001845b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018462:	e8 67 f6 fe ff       	call   c0007ace <rfree>
c0018467:	83 c4 10             	add    esp,0x10
c001846a:	83 ec 04             	sub    esp,0x4
c001846d:	6a 00                	push   0x0
c001846f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018476:	50                   	push   eax
c0018477:	6a 00                	push   0x0
c0018479:	e8 7a b7 fe ff       	call   c0003bf8 <f_mount>
c001847e:	83 c4 10             	add    esp,0x10
c0018481:	b0 00                	mov    al,0x0
c0018483:	eb 1b                	jmp    c00184a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018485:	8d 76 00             	lea    esi,[esi+0x0]
c0018488:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001848d:	83 c0 01             	add    eax,0x1
c0018490:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018495:	8d 76 00             	lea    esi,[esi+0x0]
c0018498:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001849f:	90                   	nop
c00184a0:	81 c4 4c 03 00 00    	add    esp,0x34c
c00184a6:	c3                   	ret    
c00184a7:	90                   	nop

c00184a8 <FAT::allocateSwapfile(char const*, int)>:
c00184a8:	55                   	push   ebp
c00184a9:	57                   	push   edi
c00184aa:	56                   	push   esi
c00184ab:	53                   	push   ebx
c00184ac:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00184b2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00184bd:	83 ec 0c             	sub    esp,0xc
c00184c0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00184c7:	e8 e2 f5 fe ff       	call   c0007aae <malloc>
c00184cc:	83 c4 10             	add    esp,0x10
c00184cf:	89 c7                	mov    edi,eax
c00184d1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00184d6:	83 ec 04             	sub    esp,0x4
c00184d9:	50                   	push   eax
c00184da:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00184e1:	57                   	push   edi
c00184e2:	e8 5d 2a ff ff       	call   c000af44 <File::File(char const*, Process*)>
c00184e7:	83 c4 10             	add    esp,0x10
c00184ea:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00184f1:	83 ec 04             	sub    esp,0x4
c00184f4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00184f8:	50                   	push   eax
c00184f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00184fd:	50                   	push   eax
c00184fe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018505:	e8 a2 2d ff ff       	call   c000b2ac <File::stat(unsigned long long*, bool*)>
c001850a:	83 c4 10             	add    esp,0x10
c001850d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018514:	c1 e0 14             	shl    eax,0x14
c0018517:	89 c7                	mov    edi,eax
c0018519:	89 c5                	mov    ebp,eax
c001851b:	c1 fd 1f             	sar    ebp,0x1f
c001851e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018522:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018526:	89 f9                	mov    ecx,edi
c0018528:	31 c1                	xor    ecx,eax
c001852a:	89 cb                	mov    ebx,ecx
c001852c:	89 e9                	mov    ecx,ebp
c001852e:	31 d1                	xor    ecx,edx
c0018530:	89 ce                	mov    esi,ecx
c0018532:	89 f0                	mov    eax,esi
c0018534:	09 d8                	or     eax,ebx
c0018536:	0f 84 9c 00 00 00    	je     c00185d8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001853c:	83 ec 0c             	sub    esp,0xc
c001853f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018546:	e8 2d 2c ff ff       	call   c000b178 <File::unlink()>
c001854b:	83 c4 10             	add    esp,0x10
c001854e:	83 ec 08             	sub    esp,0x8
c0018551:	6a 12                	push   0x12
c0018553:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001855a:	e8 a1 2a ff ff       	call   c000b000 <File::open(FileOpenMode)>
c001855f:	83 c4 10             	add    esp,0x10
c0018562:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018569:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001856f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018576:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001857d:	c1 e0 14             	shl    eax,0x14
c0018580:	83 ec 04             	sub    esp,0x4
c0018583:	6a 01                	push   0x1
c0018585:	50                   	push   eax
c0018586:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001858d:	e8 1e cd fe ff       	call   c00052b0 <f_expand>
c0018592:	83 c4 10             	add    esp,0x10
c0018595:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001859c:	8b 00                	mov    eax,DWORD PTR [eax]
c001859e:	83 c0 10             	add    eax,0x10
c00185a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00185a3:	83 ec 0c             	sub    esp,0xc
c00185a6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00185aa:	52                   	push   edx
c00185ab:	8d 54 24 30          	lea    edx,[esp+0x30]
c00185af:	52                   	push   edx
c00185b0:	6a 00                	push   0x0
c00185b2:	68 00 04 00 00       	push   0x400
c00185b7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00185be:	ff d0                	call   eax
c00185c0:	83 c4 20             	add    esp,0x20
c00185c3:	83 ec 0c             	sub    esp,0xc
c00185c6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185cd:	e8 8c 2a ff ff       	call   c000b05e <File::close()>
c00185d2:	83 c4 10             	add    esp,0x10
c00185d5:	8d 76 00             	lea    esi,[esi+0x0]
c00185d8:	83 ec 08             	sub    esp,0x8
c00185db:	6a 01                	push   0x1
c00185dd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185e4:	e8 17 2a ff ff       	call   c000b000 <File::open(FileOpenMode)>
c00185e9:	83 c4 10             	add    esp,0x10
c00185ec:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00185f5:	83 c0 0c             	add    eax,0xc
c00185f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00185fa:	83 ec 0c             	sub    esp,0xc
c00185fd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018601:	52                   	push   edx
c0018602:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0018606:	52                   	push   edx
c0018607:	6a 00                	push   0x0
c0018609:	6a 04                	push   0x4
c001860b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018612:	ff d0                	call   eax
c0018614:	83 c4 20             	add    esp,0x20
c0018617:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001861e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018624:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001862b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0018632:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018635:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001863c:	83 ec 0c             	sub    esp,0xc
c001863f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018646:	e8 13 2a ff ff       	call   c000b05e <File::close()>
c001864b:	83 c4 10             	add    esp,0x10
c001864e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0018655:	ba 00 00 00 00       	mov    edx,0x0
c001865a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018660:	5b                   	pop    ebx
c0018661:	5e                   	pop    esi
c0018662:	5f                   	pop    edi
c0018663:	5d                   	pop    ebp
c0018664:	c3                   	ret    
c0018665:	90                   	nop
c0018666:	66 90                	xchg   ax,ax

c0018668 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018668:	57                   	push   edi
c0018669:	56                   	push   esi
c001866a:	53                   	push   ebx
c001866b:	81 ec 50 02 00 00    	sub    esp,0x250
c0018671:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018679:	74 0d                	je     c0018688 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001867b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0018683:	75 0f                	jne    c0018694 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018685:	8d 76 00             	lea    esi,[esi+0x0]
c0018688:	b8 04 00 00 00       	mov    eax,0x4
c001868d:	e9 3a 01 00 00       	jmp    c00187cc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018692:	66 90                	xchg   ax,ax
c0018694:	83 ec 08             	sub    esp,0x8
c0018697:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001869e:	50                   	push   eax
c001869f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00186a6:	e8 4b c0 fe ff       	call   c00046f6 <f_readdir>
c00186ab:	83 c4 10             	add    esp,0x10
c00186ae:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00186b5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00186bc:	83 ec 0c             	sub    esp,0xc
c00186bf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00186c6:	83 c0 16             	add    eax,0x16
c00186c9:	50                   	push   eax
c00186ca:	e8 a1 7e fe ff       	call   c0000570 <strlen>
c00186cf:	83 c4 10             	add    esp,0x10
c00186d2:	ba 00 00 00 00       	mov    edx,0x0
c00186d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00186df:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00186e6:	0f b6 c0             	movzx  eax,al
c00186e9:	83 e0 10             	and    eax,0x10
c00186ec:	74 0a                	je     c00186f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00186ee:	b8 02 00 00 00       	mov    eax,0x2
c00186f3:	eb 0b                	jmp    c0018700 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00186f5:	8d 76 00             	lea    esi,[esi+0x0]
c00186f8:	b8 01 00 00 00       	mov    eax,0x1
c00186fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018700:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018704:	83 ec 08             	sub    esp,0x8
c0018707:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001870e:	83 c0 16             	add    eax,0x16
c0018711:	50                   	push   eax
c0018712:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018716:	83 c0 10             	add    eax,0x10
c0018719:	50                   	push   eax
c001871a:	e8 21 7f fe ff       	call   c0000640 <strcpy>
c001871f:	83 c4 10             	add    esp,0x10
c0018722:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018729:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018730:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018734:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001873b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018742:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018749:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018750:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018757:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001875e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018765:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001876c:	89 c6                	mov    esi,eax
c001876e:	89 d7                	mov    edi,edx
c0018770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018772:	89 c8                	mov    eax,ecx
c0018774:	89 fa                	mov    edx,edi
c0018776:	89 f3                	mov    ebx,esi
c0018778:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001877f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018786:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001878d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018794:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001879a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00187a1:	0f be c0             	movsx  eax,al
c00187a4:	85 c0                	test   eax,eax
c00187a6:	75 08                	jne    c00187b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00187a8:	b8 07 00 00 00       	mov    eax,0x7
c00187ad:	eb 1d                	jmp    c00187cc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00187af:	90                   	nop
c00187b0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00187b7:	85 c0                	test   eax,eax
c00187b9:	75 09                	jne    c00187c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00187bb:	b8 00 00 00 00       	mov    eax,0x0
c00187c0:	eb 0a                	jmp    c00187cc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00187c2:	66 90                	xchg   ax,ax
c00187c4:	b8 01 00 00 00       	mov    eax,0x1
c00187c9:	8d 76 00             	lea    esi,[esi+0x0]
c00187cc:	81 c4 50 02 00 00    	add    esp,0x250
c00187d2:	5b                   	pop    ebx
c00187d3:	5e                   	pop    esi
c00187d4:	5f                   	pop    edi
c00187d5:	c3                   	ret    
c00187d6:	66 90                	xchg   ax,ax

c00187d8 <FAT::read(void*, unsigned long, void*, int*)>:
c00187d8:	83 ec 1c             	sub    esp,0x1c
c00187db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187e0:	74 0a                	je     c00187ec <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00187e2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00187e7:	75 0b                	jne    c00187f4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00187e9:	8d 76 00             	lea    esi,[esi+0x0]
c00187ec:	b8 04 00 00 00       	mov    eax,0x4
c00187f1:	eb 41                	jmp    c0018834 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00187f3:	90                   	nop
c00187f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187f8:	50                   	push   eax
c00187f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018801:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018805:	e8 13 b7 fe ff       	call   c0003f1d <f_read>
c001880a:	83 c4 10             	add    esp,0x10
c001880d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018815:	89 c2                	mov    edx,eax
c0018817:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001881b:	89 10                	mov    DWORD PTR [eax],edx
c001881d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018821:	85 c0                	test   eax,eax
c0018823:	75 07                	jne    c001882c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018825:	b8 00 00 00 00       	mov    eax,0x0
c001882a:	eb 08                	jmp    c0018834 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001882c:	b8 01 00 00 00       	mov    eax,0x1
c0018831:	8d 76 00             	lea    esi,[esi+0x0]
c0018834:	83 c4 1c             	add    esp,0x1c
c0018837:	c3                   	ret    

c0018838 <FAT::write(void*, unsigned long, void*, int*)>:
c0018838:	83 ec 1c             	sub    esp,0x1c
c001883b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018840:	74 0a                	je     c001884c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018842:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018847:	75 0b                	jne    c0018854 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018849:	8d 76 00             	lea    esi,[esi+0x0]
c001884c:	b8 04 00 00 00       	mov    eax,0x4
c0018851:	eb 41                	jmp    c0018894 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018853:	90                   	nop
c0018854:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018858:	50                   	push   eax
c0018859:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001885d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018861:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018865:	e8 b2 b8 fe ff       	call   c000411c <f_write>
c001886a:	83 c4 10             	add    esp,0x10
c001886d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018871:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018875:	89 c2                	mov    edx,eax
c0018877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001887b:	89 10                	mov    DWORD PTR [eax],edx
c001887d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018881:	85 c0                	test   eax,eax
c0018883:	75 07                	jne    c001888c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018885:	b8 00 00 00 00       	mov    eax,0x0
c001888a:	eb 08                	jmp    c0018894 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001888c:	b8 01 00 00 00       	mov    eax,0x1
c0018891:	8d 76 00             	lea    esi,[esi+0x0]
c0018894:	83 c4 1c             	add    esp,0x1c
c0018897:	c3                   	ret    

c0018898 <FAT::close(void*)>:
c0018898:	83 ec 1c             	sub    esp,0x1c
c001889b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00188a0:	75 0a                	jne    c00188ac <FAT::close(void*)+0x14>
c00188a2:	b8 04 00 00 00       	mov    eax,0x4
c00188a7:	eb 3f                	jmp    c00188e8 <FAT::close(void*)+0x50>
c00188a9:	8d 76 00             	lea    esi,[esi+0x0]
c00188ac:	83 ec 0c             	sub    esp,0xc
c00188af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188b3:	e8 71 bb fe ff       	call   c0004429 <f_close>
c00188b8:	83 c4 10             	add    esp,0x10
c00188bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188bf:	83 ec 0c             	sub    esp,0xc
c00188c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188c6:	e8 f3 f1 fe ff       	call   c0007abe <free>
c00188cb:	83 c4 10             	add    esp,0x10
c00188ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188d2:	85 c0                	test   eax,eax
c00188d4:	75 0a                	jne    c00188e0 <FAT::close(void*)+0x48>
c00188d6:	b8 00 00 00 00       	mov    eax,0x0
c00188db:	eb 0b                	jmp    c00188e8 <FAT::close(void*)+0x50>
c00188dd:	8d 76 00             	lea    esi,[esi+0x0]
c00188e0:	b8 01 00 00 00       	mov    eax,0x1
c00188e5:	8d 76 00             	lea    esi,[esi+0x0]
c00188e8:	83 c4 1c             	add    esp,0x1c
c00188eb:	c3                   	ret    

c00188ec <FAT::closeDir(void*)>:
c00188ec:	83 ec 1c             	sub    esp,0x1c
c00188ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00188f4:	75 0a                	jne    c0018900 <FAT::closeDir(void*)+0x14>
c00188f6:	b8 04 00 00 00       	mov    eax,0x4
c00188fb:	eb 3f                	jmp    c001893c <FAT::closeDir(void*)+0x50>
c00188fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018900:	83 ec 0c             	sub    esp,0xc
c0018903:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018907:	e8 c8 bd fe ff       	call   c00046d4 <f_closedir>
c001890c:	83 c4 10             	add    esp,0x10
c001890f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018913:	83 ec 0c             	sub    esp,0xc
c0018916:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001891a:	e8 9f f1 fe ff       	call   c0007abe <free>
c001891f:	83 c4 10             	add    esp,0x10
c0018922:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018926:	85 c0                	test   eax,eax
c0018928:	75 0a                	jne    c0018934 <FAT::closeDir(void*)+0x48>
c001892a:	b8 00 00 00 00       	mov    eax,0x0
c001892f:	eb 0b                	jmp    c001893c <FAT::closeDir(void*)+0x50>
c0018931:	8d 76 00             	lea    esi,[esi+0x0]
c0018934:	b8 01 00 00 00       	mov    eax,0x1
c0018939:	8d 76 00             	lea    esi,[esi+0x0]
c001893c:	83 c4 1c             	add    esp,0x1c
c001893f:	c3                   	ret    

c0018940 <FAT::seek(void*, unsigned long long)>:
c0018940:	83 ec 2c             	sub    esp,0x2c
c0018943:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018947:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001894b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001894f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018953:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018958:	75 0a                	jne    c0018964 <FAT::seek(void*, unsigned long long)+0x24>
c001895a:	b8 04 00 00 00       	mov    eax,0x4
c001895f:	eb 33                	jmp    c0018994 <FAT::seek(void*, unsigned long long)+0x54>
c0018961:	8d 76 00             	lea    esi,[esi+0x0]
c0018964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018968:	83 ec 08             	sub    esp,0x8
c001896b:	50                   	push   eax
c001896c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018970:	e8 e3 ba fe ff       	call   c0004458 <f_lseek>
c0018975:	83 c4 10             	add    esp,0x10
c0018978:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001897c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018980:	85 c0                	test   eax,eax
c0018982:	75 08                	jne    c001898c <FAT::seek(void*, unsigned long long)+0x4c>
c0018984:	b8 00 00 00 00       	mov    eax,0x0
c0018989:	eb 09                	jmp    c0018994 <FAT::seek(void*, unsigned long long)+0x54>
c001898b:	90                   	nop
c001898c:	b8 01 00 00 00       	mov    eax,0x1
c0018991:	8d 76 00             	lea    esi,[esi+0x0]
c0018994:	83 c4 2c             	add    esp,0x2c
c0018997:	c3                   	ret    

c0018998 <fatWrapperReadDisk>:
c0018998:	53                   	push   ebx
c0018999:	83 ec 18             	sub    esp,0x18
c001899c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189a9:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00189b0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00189b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189b8:	ba 00 00 00 00       	mov    edx,0x0
c00189bd:	83 ec 0c             	sub    esp,0xc
c00189c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189c4:	53                   	push   ebx
c00189c5:	52                   	push   edx
c00189c6:	50                   	push   eax
c00189c7:	51                   	push   ecx
c00189c8:	e8 0b 48 ff ff       	call   c000d1d8 <LogicalDisk::read(unsigned long long, int, void*)>
c00189cd:	83 c4 20             	add    esp,0x20
c00189d0:	83 c4 18             	add    esp,0x18
c00189d3:	5b                   	pop    ebx
c00189d4:	c3                   	ret    
c00189d5:	8d 76 00             	lea    esi,[esi+0x0]

c00189d8 <fatWrapperWriteDisk>:
c00189d8:	53                   	push   ebx
c00189d9:	83 ec 18             	sub    esp,0x18
c00189dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189e9:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00189f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00189f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189f8:	ba 00 00 00 00       	mov    edx,0x0
c00189fd:	83 ec 0c             	sub    esp,0xc
c0018a00:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a04:	53                   	push   ebx
c0018a05:	52                   	push   edx
c0018a06:	50                   	push   eax
c0018a07:	51                   	push   ecx
c0018a08:	e8 37 48 ff ff       	call   c000d244 <LogicalDisk::write(unsigned long long, int, void*)>
c0018a0d:	83 c4 20             	add    esp,0x20
c0018a10:	83 c4 18             	add    esp,0x18
c0018a13:	5b                   	pop    ebx
c0018a14:	c3                   	ret    
c0018a15:	8d 76 00             	lea    esi,[esi+0x0]

c0018a18 <fatWrapperIoctl>:
c0018a18:	53                   	push   ebx
c0018a19:	83 ec 28             	sub    esp,0x28
c0018a1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018a24:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018a28:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018a2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a31:	83 f8 02             	cmp    eax,0x2
c0018a34:	75 32                	jne    c0018a68 <fatWrapperIoctl+0x50>
c0018a36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a3e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a43:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a4a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a50:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018a56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a5a:	66 89 02             	mov    WORD PTR [edx],ax
c0018a5d:	b8 00 00 00 00       	mov    eax,0x0
c0018a62:	e9 c5 00 00 00       	jmp    c0018b2c <fatWrapperIoctl+0x114>
c0018a67:	90                   	nop
c0018a68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a6d:	83 f8 01             	cmp    eax,0x1
c0018a70:	75 6a                	jne    c0018adc <fatWrapperIoctl+0xc4>
c0018a72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a7a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a7f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a86:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a8c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018a92:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018a98:	89 c8                	mov    eax,ecx
c0018a9a:	89 da                	mov    edx,ebx
c0018a9c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018aa0:	c1 e0 0a             	shl    eax,0xa
c0018aa3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018aa8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018aaf:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018ab5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018abb:	89 cb                	mov    ebx,ecx
c0018abd:	c1 fb 1f             	sar    ebx,0x1f
c0018ac0:	53                   	push   ebx
c0018ac1:	51                   	push   ecx
c0018ac2:	52                   	push   edx
c0018ac3:	50                   	push   eax
c0018ac4:	e8 77 5b 00 00       	call   c001e640 <__udivdi3>
c0018ac9:	83 c4 10             	add    esp,0x10
c0018acc:	89 c2                	mov    edx,eax
c0018ace:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ad2:	89 10                	mov    DWORD PTR [eax],edx
c0018ad4:	b8 00 00 00 00       	mov    eax,0x0
c0018ad9:	eb 51                	jmp    c0018b2c <fatWrapperIoctl+0x114>
c0018adb:	90                   	nop
c0018adc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ae1:	85 c0                	test   eax,eax
c0018ae3:	75 07                	jne    c0018aec <fatWrapperIoctl+0xd4>
c0018ae5:	b8 00 00 00 00       	mov    eax,0x0
c0018aea:	eb 40                	jmp    c0018b2c <fatWrapperIoctl+0x114>
c0018aec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018af1:	83 f8 03             	cmp    eax,0x3
c0018af4:	75 1a                	jne    c0018b10 <fatWrapperIoctl+0xf8>
c0018af6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018afa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018afe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b02:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018b08:	b8 00 00 00 00       	mov    eax,0x0
c0018b0d:	eb 1d                	jmp    c0018b2c <fatWrapperIoctl+0x114>
c0018b0f:	90                   	nop
c0018b10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b15:	83 f8 04             	cmp    eax,0x4
c0018b18:	75 0a                	jne    c0018b24 <fatWrapperIoctl+0x10c>
c0018b1a:	b8 00 00 00 00       	mov    eax,0x0
c0018b1f:	eb 0b                	jmp    c0018b2c <fatWrapperIoctl+0x114>
c0018b21:	8d 76 00             	lea    esi,[esi+0x0]
c0018b24:	b8 04 00 00 00       	mov    eax,0x4
c0018b29:	8d 76 00             	lea    esi,[esi+0x0]
c0018b2c:	83 c4 28             	add    esp,0x28
c0018b2f:	5b                   	pop    ebx
c0018b30:	c3                   	ret    
c0018b31:	90                   	nop
c0018b32:	66 90                	xchg   ax,ax

c0018b34 <FAT::FAT()>:
c0018b34:	83 ec 1c             	sub    esp,0x1c
c0018b37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b3b:	83 ec 0c             	sub    esp,0xc
c0018b3e:	50                   	push   eax
c0018b3f:	e8 a0 21 ff ff       	call   c000ace4 <Filesystem::Filesystem()>
c0018b44:	83 c4 10             	add    esp,0x10
c0018b47:	ba e8 16 02 c0       	mov    edx,0xc00216e8
c0018b4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b50:	89 10                	mov    DWORD PTR [eax],edx
c0018b52:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018b5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018b64:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018b69:	7f 19                	jg     c0018b84 <FAT::FAT()+0x50>
c0018b6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b6f:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018b7a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018b7f:	eb e3                	jmp    c0018b64 <FAT::FAT()+0x30>
c0018b81:	8d 76 00             	lea    esi,[esi+0x0]
c0018b84:	90                   	nop
c0018b85:	83 c4 1c             	add    esp,0x1c
c0018b88:	c3                   	ret    
c0018b89:	90                   	nop
c0018b8a:	66 90                	xchg   ax,ax

c0018b8c <FAT::fixFilepath(char*)>:
c0018b8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b90:	8a 00                	mov    al,BYTE PTR [eax]
c0018b92:	0f be c0             	movsx  eax,al
c0018b95:	83 f8 40             	cmp    eax,0x40
c0018b98:	7e 2e                	jle    c0018bc8 <FAT::fixFilepath(char*)+0x3c>
c0018b9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b9e:	8a 00                	mov    al,BYTE PTR [eax]
c0018ba0:	83 e8 41             	sub    eax,0x41
c0018ba3:	88 c2                	mov    dl,al
c0018ba5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ba9:	88 10                	mov    BYTE PTR [eax],dl
c0018bab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018baf:	8a 00                	mov    al,BYTE PTR [eax]
c0018bb1:	0f be c0             	movsx  eax,al
c0018bb4:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018bbb:	83 c0 30             	add    eax,0x30
c0018bbe:	88 c2                	mov    dl,al
c0018bc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bc4:	88 10                	mov    BYTE PTR [eax],dl
c0018bc6:	66 90                	xchg   ax,ax
c0018bc8:	90                   	nop
c0018bc9:	c3                   	ret    
c0018bca:	66 90                	xchg   ax,ax

c0018bcc <FAT::open(char const*, void**, FileOpenMode)>:
c0018bcc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018bd2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018bda:	74 0c                	je     c0018be8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018bdc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018be4:	75 0e                	jne    c0018bf4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018be6:	66 90                	xchg   ax,ax
c0018be8:	b8 04 00 00 00       	mov    eax,0x4
c0018bed:	e9 46 01 00 00       	jmp    c0018d38 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018bf2:	66 90                	xchg   ax,ax
c0018bf4:	83 ec 08             	sub    esp,0x8
c0018bf7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018bfe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018c02:	50                   	push   eax
c0018c03:	e8 38 7a fe ff       	call   c0000640 <strcpy>
c0018c08:	83 c4 10             	add    esp,0x10
c0018c0b:	83 ec 08             	sub    esp,0x8
c0018c0e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c12:	50                   	push   eax
c0018c13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c1a:	e8 6d ff ff ff       	call   c0018b8c <FAT::fixFilepath(char*)>
c0018c1f:	83 c4 10             	add    esp,0x10
c0018c22:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018c2a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c31:	83 e0 01             	and    eax,0x1
c0018c34:	74 12                	je     c0018c48 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018c36:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c3d:	83 c8 01             	or     eax,0x1
c0018c40:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c47:	90                   	nop
c0018c48:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c4f:	83 e0 04             	and    eax,0x4
c0018c52:	74 24                	je     c0018c78 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018c54:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c5b:	83 c8 30             	or     eax,0x30
c0018c5e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c65:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c6c:	83 c8 02             	or     eax,0x2
c0018c6f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c76:	66 90                	xchg   ax,ax
c0018c78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c7f:	83 e0 02             	and    eax,0x2
c0018c82:	74 14                	je     c0018c98 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018c84:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c8b:	83 c8 02             	or     eax,0x2
c0018c8e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c95:	8d 76 00             	lea    esi,[esi+0x0]
c0018c98:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c9f:	83 e0 08             	and    eax,0x8
c0018ca2:	74 14                	je     c0018cb8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018ca4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018cab:	83 c8 04             	or     eax,0x4
c0018cae:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cb8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018cbf:	83 e0 10             	and    eax,0x10
c0018cc2:	74 14                	je     c0018cd8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018cc4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018ccb:	83 c8 08             	or     eax,0x8
c0018cce:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cd8:	83 ec 0c             	sub    esp,0xc
c0018cdb:	68 28 02 00 00       	push   0x228
c0018ce0:	e8 c9 ed fe ff       	call   c0007aae <malloc>
c0018ce5:	83 c4 10             	add    esp,0x10
c0018ce8:	89 c2                	mov    edx,eax
c0018cea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018cf1:	89 10                	mov    DWORD PTR [eax],edx
c0018cf3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018cfb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d02:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d04:	83 ec 04             	sub    esp,0x4
c0018d07:	52                   	push   edx
c0018d08:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018d0c:	52                   	push   edx
c0018d0d:	50                   	push   eax
c0018d0e:	e8 47 af fe ff       	call   c0003c5a <f_open>
c0018d13:	83 c4 10             	add    esp,0x10
c0018d16:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018d1d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018d25:	74 09                	je     c0018d30 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018d27:	b8 01 00 00 00       	mov    eax,0x1
c0018d2c:	eb 0a                	jmp    c0018d38 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018d2e:	66 90                	xchg   ax,ax
c0018d30:	b8 00 00 00 00       	mov    eax,0x0
c0018d35:	8d 76 00             	lea    esi,[esi+0x0]
c0018d38:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d3e:	c3                   	ret    
c0018d3f:	90                   	nop

c0018d40 <FAT::openDir(char const*, void**)>:
c0018d40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018d46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018d4e:	74 0c                	je     c0018d5c <FAT::openDir(char const*, void**)+0x1c>
c0018d50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018d58:	75 0e                	jne    c0018d68 <FAT::openDir(char const*, void**)+0x28>
c0018d5a:	66 90                	xchg   ax,ax
c0018d5c:	b8 04 00 00 00       	mov    eax,0x4
c0018d61:	e9 82 00 00 00       	jmp    c0018de8 <FAT::openDir(char const*, void**)+0xa8>
c0018d66:	66 90                	xchg   ax,ax
c0018d68:	83 ec 08             	sub    esp,0x8
c0018d6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d72:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d76:	50                   	push   eax
c0018d77:	e8 c4 78 fe ff       	call   c0000640 <strcpy>
c0018d7c:	83 c4 10             	add    esp,0x10
c0018d7f:	83 ec 08             	sub    esp,0x8
c0018d82:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018d86:	50                   	push   eax
c0018d87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d8e:	e8 f9 fd ff ff       	call   c0018b8c <FAT::fixFilepath(char*)>
c0018d93:	83 c4 10             	add    esp,0x10
c0018d96:	83 ec 0c             	sub    esp,0xc
c0018d99:	6a 30                	push   0x30
c0018d9b:	e8 0e ed fe ff       	call   c0007aae <malloc>
c0018da0:	83 c4 10             	add    esp,0x10
c0018da3:	89 c2                	mov    edx,eax
c0018da5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018dac:	89 10                	mov    DWORD PTR [eax],edx
c0018dae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018db7:	83 ec 08             	sub    esp,0x8
c0018dba:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018dbe:	52                   	push   edx
c0018dbf:	50                   	push   eax
c0018dc0:	e8 44 b8 fe ff       	call   c0004609 <f_opendir>
c0018dc5:	83 c4 10             	add    esp,0x10
c0018dc8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018dcf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018dd7:	74 07                	je     c0018de0 <FAT::openDir(char const*, void**)+0xa0>
c0018dd9:	b8 01 00 00 00       	mov    eax,0x1
c0018dde:	eb 08                	jmp    c0018de8 <FAT::openDir(char const*, void**)+0xa8>
c0018de0:	b8 00 00 00 00       	mov    eax,0x0
c0018de5:	8d 76 00             	lea    esi,[esi+0x0]
c0018de8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018dee:	c3                   	ret    
c0018def:	90                   	nop

c0018df0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018df0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018df6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018dfe:	75 0c                	jne    c0018e0c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018e00:	b8 04 00 00 00       	mov    eax,0x4
c0018e05:	e9 d6 00 00 00       	jmp    c0018ee0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e0a:	66 90                	xchg   ax,ax
c0018e0c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018e14:	75 0a                	jne    c0018e20 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018e16:	b8 04 00 00 00       	mov    eax,0x4
c0018e1b:	e9 c0 00 00 00       	jmp    c0018ee0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e20:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018e28:	75 0a                	jne    c0018e34 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018e2a:	b8 04 00 00 00       	mov    eax,0x4
c0018e2f:	e9 ac 00 00 00       	jmp    c0018ee0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e34:	83 ec 08             	sub    esp,0x8
c0018e37:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e3e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e45:	50                   	push   eax
c0018e46:	e8 f5 77 fe ff       	call   c0000640 <strcpy>
c0018e4b:	83 c4 10             	add    esp,0x10
c0018e4e:	83 ec 08             	sub    esp,0x8
c0018e51:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018e58:	50                   	push   eax
c0018e59:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e60:	e8 27 fd ff ff       	call   c0018b8c <FAT::fixFilepath(char*)>
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	83 ec 08             	sub    esp,0x8
c0018e6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e6f:	50                   	push   eax
c0018e70:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e77:	50                   	push   eax
c0018e78:	e8 0b b9 fe ff       	call   c0004788 <f_stat>
c0018e7d:	83 c4 10             	add    esp,0x10
c0018e80:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018e87:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018e8e:	85 c0                	test   eax,eax
c0018e90:	74 0a                	je     c0018e9c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018e92:	83 f8 04             	cmp    eax,0x4
c0018e95:	74 39                	je     c0018ed0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018e97:	eb 3f                	jmp    c0018ed8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018e99:	8d 76 00             	lea    esi,[esi+0x0]
c0018e9c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ea0:	0f b6 c0             	movzx  eax,al
c0018ea3:	83 e0 10             	and    eax,0x10
c0018ea6:	0f 95 c2             	setne  dl
c0018ea9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018eb0:	88 10                	mov    BYTE PTR [eax],dl
c0018eb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018eb6:	ba 00 00 00 00       	mov    edx,0x0
c0018ebb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018ec2:	89 01                	mov    DWORD PTR [ecx],eax
c0018ec4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ec7:	b8 00 00 00 00       	mov    eax,0x0
c0018ecc:	eb 12                	jmp    c0018ee0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018ece:	66 90                	xchg   ax,ax
c0018ed0:	b8 02 00 00 00       	mov    eax,0x2
c0018ed5:	eb 09                	jmp    c0018ee0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018ed7:	90                   	nop
c0018ed8:	b8 01 00 00 00       	mov    eax,0x1
c0018edd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018ee6:	c3                   	ret    
c0018ee7:	90                   	nop

c0018ee8 <FAT::unlink(char const*)>:
c0018ee8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018eee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018ef6:	75 08                	jne    c0018f00 <FAT::unlink(char const*)+0x18>
c0018ef8:	b8 04 00 00 00       	mov    eax,0x4
c0018efd:	eb 61                	jmp    c0018f60 <FAT::unlink(char const*)+0x78>
c0018eff:	90                   	nop
c0018f00:	83 ec 08             	sub    esp,0x8
c0018f03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f0e:	50                   	push   eax
c0018f0f:	e8 2c 77 fe ff       	call   c0000640 <strcpy>
c0018f14:	83 c4 10             	add    esp,0x10
c0018f17:	83 ec 08             	sub    esp,0x8
c0018f1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f1e:	50                   	push   eax
c0018f1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f26:	e8 61 fc ff ff       	call   c0018b8c <FAT::fixFilepath(char*)>
c0018f2b:	83 c4 10             	add    esp,0x10
c0018f2e:	83 ec 0c             	sub    esp,0xc
c0018f31:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f35:	50                   	push   eax
c0018f36:	e8 bf ba fe ff       	call   c00049fa <f_unlink>
c0018f3b:	83 c4 10             	add    esp,0x10
c0018f3e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018f45:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018f4c:	85 c0                	test   eax,eax
c0018f4e:	75 08                	jne    c0018f58 <FAT::unlink(char const*)+0x70>
c0018f50:	b8 00 00 00 00       	mov    eax,0x0
c0018f55:	eb 09                	jmp    c0018f60 <FAT::unlink(char const*)+0x78>
c0018f57:	90                   	nop
c0018f58:	b8 01 00 00 00       	mov    eax,0x1
c0018f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f60:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018f66:	c3                   	ret    
c0018f67:	90                   	nop

c0018f68 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018f68:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018f6e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018f75:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018f7c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018f80:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018f84:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018f8c:	75 0a                	jne    c0018f98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018f8e:	b8 04 00 00 00       	mov    eax,0x4
c0018f93:	e9 7c 01 00 00       	jmp    c0019114 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0018f98:	83 ec 08             	sub    esp,0x8
c0018f9b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018fa2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018fa6:	50                   	push   eax
c0018fa7:	e8 94 76 fe ff       	call   c0000640 <strcpy>
c0018fac:	83 c4 10             	add    esp,0x10
c0018faf:	83 ec 08             	sub    esp,0x8
c0018fb2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018fb6:	50                   	push   eax
c0018fb7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018fbe:	e8 c9 fb ff ff       	call   c0018b8c <FAT::fixFilepath(char*)>
c0018fc3:	83 c4 10             	add    esp,0x10
c0018fc6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018fce:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018fd6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fdb:	83 e0 01             	and    eax,0x1
c0018fde:	74 14                	je     c0018ff4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0018fe0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fe7:	83 c8 01             	or     eax,0x1
c0018fea:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ff9:	83 e0 02             	and    eax,0x2
c0018ffc:	74 12                	je     c0019010 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0018ffe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019005:	83 c8 20             	or     eax,0x20
c0019008:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001900f:	90                   	nop
c0019010:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019015:	83 e0 04             	and    eax,0x4
c0019018:	74 12                	je     c001902c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001901a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019021:	83 c8 04             	or     eax,0x4
c0019024:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001902b:	90                   	nop
c001902c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019031:	83 e0 08             	and    eax,0x8
c0019034:	74 12                	je     c0019048 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019036:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001903d:	83 c8 02             	or     eax,0x2
c0019040:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019047:	90                   	nop
c0019048:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001904d:	83 e0 01             	and    eax,0x1
c0019050:	74 12                	je     c0019064 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019052:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019059:	83 c8 01             	or     eax,0x1
c001905c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019063:	90                   	nop
c0019064:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019069:	83 e0 02             	and    eax,0x2
c001906c:	74 12                	je     c0019080 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001906e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019075:	83 c8 20             	or     eax,0x20
c0019078:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001907f:	90                   	nop
c0019080:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019085:	83 e0 04             	and    eax,0x4
c0019088:	74 12                	je     c001909c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001908a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019091:	83 c8 04             	or     eax,0x4
c0019094:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001909b:	90                   	nop
c001909c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00190a1:	83 e0 08             	and    eax,0x8
c00190a4:	74 12                	je     c00190b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c00190a6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00190ad:	83 c8 02             	or     eax,0x2
c00190b0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190b7:	90                   	nop
c00190b8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00190bf:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00190c6:	09 d0                	or     eax,edx
c00190c8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190cf:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00190d7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00190df:	83 ec 04             	sub    esp,0x4
c00190e2:	52                   	push   edx
c00190e3:	50                   	push   eax
c00190e4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00190e8:	50                   	push   eax
c00190e9:	e8 81 bd fe ff       	call   c0004e6f <f_chmod>
c00190ee:	83 c4 10             	add    esp,0x10
c00190f1:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00190f8:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00190ff:	85 c0                	test   eax,eax
c0019101:	75 09                	jne    c001910c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019103:	b8 00 00 00 00       	mov    eax,0x0
c0019108:	eb 0a                	jmp    c0019114 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001910a:	66 90                	xchg   ax,ax
c001910c:	b8 01 00 00 00       	mov    eax,0x1
c0019111:	8d 76 00             	lea    esi,[esi+0x0]
c0019114:	81 c4 2c 01 00 00    	add    esp,0x12c
c001911a:	c3                   	ret    
c001911b:	90                   	nop

c001911c <FAT::rename(char const*, char const*)>:
c001911c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019122:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001912a:	74 0c                	je     c0019138 <FAT::rename(char const*, char const*)+0x1c>
c001912c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019134:	75 0e                	jne    c0019144 <FAT::rename(char const*, char const*)+0x28>
c0019136:	66 90                	xchg   ax,ax
c0019138:	b8 04 00 00 00       	mov    eax,0x4
c001913d:	e9 9e 00 00 00       	jmp    c00191e0 <FAT::rename(char const*, char const*)+0xc4>
c0019142:	66 90                	xchg   ax,ax
c0019144:	83 ec 08             	sub    esp,0x8
c0019147:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001914e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019155:	50                   	push   eax
c0019156:	e8 e5 74 fe ff       	call   c0000640 <strcpy>
c001915b:	83 c4 10             	add    esp,0x10
c001915e:	83 ec 08             	sub    esp,0x8
c0019161:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019168:	50                   	push   eax
c0019169:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019170:	e8 17 fa ff ff       	call   c0018b8c <FAT::fixFilepath(char*)>
c0019175:	83 c4 10             	add    esp,0x10
c0019178:	83 ec 08             	sub    esp,0x8
c001917b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019182:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019186:	50                   	push   eax
c0019187:	e8 b4 74 fe ff       	call   c0000640 <strcpy>
c001918c:	83 c4 10             	add    esp,0x10
c001918f:	83 ec 08             	sub    esp,0x8
c0019192:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019196:	50                   	push   eax
c0019197:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001919e:	e8 e9 f9 ff ff       	call   c0018b8c <FAT::fixFilepath(char*)>
c00191a3:	83 c4 10             	add    esp,0x10
c00191a6:	83 ec 08             	sub    esp,0x8
c00191a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191ad:	50                   	push   eax
c00191ae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00191b5:	50                   	push   eax
c00191b6:	e8 fc ba fe ff       	call   c0004cb7 <f_rename>
c00191bb:	83 c4 10             	add    esp,0x10
c00191be:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00191c5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00191cc:	85 c0                	test   eax,eax
c00191ce:	75 08                	jne    c00191d8 <FAT::rename(char const*, char const*)+0xbc>
c00191d0:	b8 00 00 00 00       	mov    eax,0x0
c00191d5:	eb 09                	jmp    c00191e0 <FAT::rename(char const*, char const*)+0xc4>
c00191d7:	90                   	nop
c00191d8:	b8 01 00 00 00       	mov    eax,0x1
c00191dd:	8d 76 00             	lea    esi,[esi+0x0]
c00191e0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00191e6:	c3                   	ret    
c00191e7:	90                   	nop

c00191e8 <FAT::mkdir(char const*)>:
c00191e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00191ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00191f6:	75 08                	jne    c0019200 <FAT::mkdir(char const*)+0x18>
c00191f8:	b8 04 00 00 00       	mov    eax,0x4
c00191fd:	eb 61                	jmp    c0019260 <FAT::mkdir(char const*)+0x78>
c00191ff:	90                   	nop
c0019200:	83 ec 08             	sub    esp,0x8
c0019203:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001920a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001920e:	50                   	push   eax
c001920f:	e8 2c 74 fe ff       	call   c0000640 <strcpy>
c0019214:	83 c4 10             	add    esp,0x10
c0019217:	83 ec 08             	sub    esp,0x8
c001921a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001921e:	50                   	push   eax
c001921f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019226:	e8 61 f9 ff ff       	call   c0018b8c <FAT::fixFilepath(char*)>
c001922b:	83 c4 10             	add    esp,0x10
c001922e:	83 ec 0c             	sub    esp,0xc
c0019231:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019235:	50                   	push   eax
c0019236:	e8 e1 b8 fe ff       	call   c0004b1c <f_mkdir>
c001923b:	83 c4 10             	add    esp,0x10
c001923e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019245:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001924c:	85 c0                	test   eax,eax
c001924e:	75 08                	jne    c0019258 <FAT::mkdir(char const*)+0x70>
c0019250:	b8 00 00 00 00       	mov    eax,0x0
c0019255:	eb 09                	jmp    c0019260 <FAT::mkdir(char const*)+0x78>
c0019257:	90                   	nop
c0019258:	b8 01 00 00 00       	mov    eax,0x1
c001925d:	8d 76 00             	lea    esi,[esi+0x0]
c0019260:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019266:	c3                   	ret    
c0019267:	90                   	nop

c0019268 <FAT::exists(char const*)>:
c0019268:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001926e:	83 ec 08             	sub    esp,0x8
c0019271:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019278:	8d 44 24 10          	lea    eax,[esp+0x10]
c001927c:	50                   	push   eax
c001927d:	e8 be 73 fe ff       	call   c0000640 <strcpy>
c0019282:	83 c4 10             	add    esp,0x10
c0019285:	83 ec 08             	sub    esp,0x8
c0019288:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001928c:	50                   	push   eax
c001928d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019294:	e8 f3 f8 ff ff       	call   c0018b8c <FAT::fixFilepath(char*)>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	83 ec 08             	sub    esp,0x8
c001929f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00192a6:	50                   	push   eax
c00192a7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192ab:	50                   	push   eax
c00192ac:	e8 d7 b4 fe ff       	call   c0004788 <f_stat>
c00192b1:	83 c4 10             	add    esp,0x10
c00192b4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00192bb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00192c2:	85 c0                	test   eax,eax
c00192c4:	75 06                	jne    c00192cc <FAT::exists(char const*)+0x64>
c00192c6:	b0 01                	mov    al,0x1
c00192c8:	eb 06                	jmp    c00192d0 <FAT::exists(char const*)+0x68>
c00192ca:	66 90                	xchg   ax,ax
c00192cc:	b0 00                	mov    al,0x0
c00192ce:	66 90                	xchg   ax,ax
c00192d0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00192d6:	c3                   	ret    
c00192d7:	90                   	nop

c00192d8 <isoReadDiscSectorHelper>:
c00192d8:	83 ec 2c             	sub    esp,0x2c
c00192db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00192df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00192e3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00192e8:	83 e8 41             	sub    eax,0x41
c00192eb:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00192f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00192f6:	ba 00 00 00 00       	mov    edx,0x0
c00192fb:	83 ec 0c             	sub    esp,0xc
c00192fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019302:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019306:	52                   	push   edx
c0019307:	50                   	push   eax
c0019308:	51                   	push   ecx
c0019309:	e8 ca 3e ff ff       	call   c000d1d8 <LogicalDisk::read(unsigned long long, int, void*)>
c001930e:	83 c4 20             	add    esp,0x20
c0019311:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019315:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001931a:	74 0c                	je     c0019328 <isoReadDiscSectorHelper+0x50>
c001931c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019320:	c1 e0 0b             	shl    eax,0xb
c0019323:	eb 0b                	jmp    c0019330 <isoReadDiscSectorHelper+0x58>
c0019325:	8d 76 00             	lea    esi,[esi+0x0]
c0019328:	b8 00 00 00 00       	mov    eax,0x0
c001932d:	8d 76 00             	lea    esi,[esi+0x0]
c0019330:	83 c4 2c             	add    esp,0x2c
c0019333:	c3                   	ret    

c0019334 <iso_kprintf>:
c0019334:	83 ec 0c             	sub    esp,0xc
c0019337:	83 ec 08             	sub    esp,0x8
c001933a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001933e:	68 f1 10 02 c0       	push   0xc00210f1
c0019343:	e8 7a 16 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0019348:	83 c4 10             	add    esp,0x10
c001934b:	90                   	nop
c001934c:	83 c4 0c             	add    esp,0xc
c001934f:	c3                   	ret    

c0019350 <iso_kprintfd>:
c0019350:	83 ec 0c             	sub    esp,0xc
c0019353:	83 ec 08             	sub    esp,0x8
c0019356:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001935a:	68 ed 00 02 c0       	push   0xc00200ed
c001935f:	e8 5e 16 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0019364:	83 c4 10             	add    esp,0x10
c0019367:	90                   	nop
c0019368:	83 c4 0c             	add    esp,0xc
c001936b:	c3                   	ret    

c001936c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001936c:	b8 08 00 00 00       	mov    eax,0x8
c0019371:	c3                   	ret    

c0019372 <ISO9660::getName()>:
c0019372:	b8 48 17 02 c0       	mov    eax,0xc0021748
c0019377:	c3                   	ret    

c0019378 <ISO9660::closeDir(void*)>:
c0019378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001937c:	8b 00                	mov    eax,DWORD PTR [eax]
c001937e:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019381:	90                   	nop

c0019382 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019382:	b8 01 00 00 00       	mov    eax,0x1
c0019387:	c3                   	ret    

c0019388 <ISO9660::unlink(char const*)>:
c0019388:	b8 01 00 00 00       	mov    eax,0x1
c001938d:	c3                   	ret    

c001938e <ISO9660::write(void*, unsigned long, void*, int*)>:
c001938e:	b8 03 00 00 00       	mov    eax,0x3
c0019393:	c3                   	ret    

c0019394 <ISO9660::rename(char const*, char const*)>:
c0019394:	b8 01 00 00 00       	mov    eax,0x1
c0019399:	c3                   	ret    

c001939a <ISO9660::mkdir(char const*)>:
c001939a:	b8 01 00 00 00       	mov    eax,0x1
c001939f:	c3                   	ret    

c00193a0 <ISO9660::~ISO9660()>:
c00193a0:	83 ec 0c             	sub    esp,0xc
c00193a3:	ba 88 18 02 c0       	mov    edx,0xc0021888
c00193a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193ac:	89 10                	mov    DWORD PTR [eax],edx
c00193ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193b2:	83 ec 0c             	sub    esp,0xc
c00193b5:	50                   	push   eax
c00193b6:	e8 4d 19 ff ff       	call   c000ad08 <Filesystem::~Filesystem()>
c00193bb:	83 c4 10             	add    esp,0x10
c00193be:	90                   	nop
c00193bf:	83 c4 0c             	add    esp,0xc
c00193c2:	c3                   	ret    
c00193c3:	90                   	nop

c00193c4 <ISO9660::~ISO9660()>:
c00193c4:	83 ec 0c             	sub    esp,0xc
c00193c7:	83 ec 0c             	sub    esp,0xc
c00193ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193ce:	e8 cd ff ff ff       	call   c00193a0 <ISO9660::~ISO9660()>
c00193d3:	83 c4 10             	add    esp,0x10
c00193d6:	83 ec 08             	sub    esp,0x8
c00193d9:	6a 08                	push   0x8
c00193db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193df:	e8 b1 14 ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c00193e4:	83 c4 10             	add    esp,0x10
c00193e7:	83 c4 0c             	add    esp,0xc
c00193ea:	c3                   	ret    
c00193eb:	90                   	nop

c00193ec <ISO9660::exists(char const*)>:
c00193ec:	83 ec 18             	sub    esp,0x18
c00193ef:	68 63 17 02 c0       	push   0xc0021763
c00193f4:	e8 f6 74 ff ff       	call   c00108ef <KePanic(char const*)>
c00193f9:	31 c0                	xor    eax,eax
c00193fb:	83 c4 1c             	add    esp,0x1c
c00193fe:	c3                   	ret    
c00193ff:	90                   	nop

c0019400 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019400:	56                   	push   esi
c0019401:	53                   	push   ebx
c0019402:	53                   	push   ebx
c0019403:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019407:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001940b:	85 db                	test   ebx,ebx
c001940d:	0f 84 ca 00 00 00    	je     c00194dd <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019413:	85 f6                	test   esi,esi
c0019415:	0f 84 c2 00 00 00    	je     c00194dd <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001941b:	b8 03 00 00 00       	mov    eax,0x3
c0019420:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019425:	0f 85 b7 00 00 00    	jne    c00194e2 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001942b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001942d:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019434:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001943a:	74 1b                	je     c0019457 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001943c:	85 c0                	test   eax,eax
c001943e:	74 10                	je     c0019450 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019440:	83 ec 0c             	sub    esp,0xc
c0019443:	68 81 17 02 c0       	push   0xc0021781
c0019448:	e8 a2 74 ff ff       	call   c00108ef <KePanic(char const*)>
c001944d:	83 c4 10             	add    esp,0x10
c0019450:	8a 03                	mov    al,BYTE PTR [ebx]
c0019452:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019457:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001945a:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019461:	85 c0                	test   eax,eax
c0019463:	74 09                	je     c001946e <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019465:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001946c:	74 48                	je     c00194b6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001946e:	83 ec 0c             	sub    esp,0xc
c0019471:	68 91 17 02 c0       	push   0xc0021791
c0019476:	e8 47 15 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001947b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001947e:	83 c4 10             	add    esp,0x10
c0019481:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019488:	85 c0                	test   eax,eax
c001948a:	74 17                	je     c00194a3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001948c:	83 ec 0c             	sub    esp,0xc
c001948f:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019496:	68 b1 17 02 c0       	push   0xc00217b1
c001949b:	e8 22 15 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00194a0:	83 c4 10             	add    esp,0x10
c00194a3:	83 ec 0c             	sub    esp,0xc
c00194a6:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00194ad:	50                   	push   eax
c00194ae:	e8 93 d5 fe ff       	call   c0006a46 <init_percd>
c00194b3:	83 c4 10             	add    esp,0x10
c00194b6:	83 c3 03             	add    ebx,0x3
c00194b9:	51                   	push   ecx
c00194ba:	51                   	push   ecx
c00194bb:	6a 00                	push   0x0
c00194bd:	53                   	push   ebx
c00194be:	e8 4a d0 fe ff       	call   c000650d <iso_open>
c00194c3:	83 c4 10             	add    esp,0x10
c00194c6:	89 c2                	mov    edx,eax
c00194c8:	b8 01 00 00 00       	mov    eax,0x1
c00194cd:	83 fa ff             	cmp    edx,0xffffffff
c00194d0:	74 10                	je     c00194e2 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00194d2:	83 c2 32             	add    edx,0x32
c00194d5:	31 c0                	xor    eax,eax
c00194d7:	01 d2                	add    edx,edx
c00194d9:	89 16                	mov    DWORD PTR [esi],edx
c00194db:	eb 05                	jmp    c00194e2 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00194dd:	b8 04 00 00 00       	mov    eax,0x4
c00194e2:	5a                   	pop    edx
c00194e3:	5b                   	pop    ebx
c00194e4:	5e                   	pop    esi
c00194e5:	c3                   	ret    

c00194e6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00194e6:	53                   	push   ebx
c00194e7:	83 ec 08             	sub    esp,0x8
c00194ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00194f2:	85 c0                	test   eax,eax
c00194f4:	74 2d                	je     c0019523 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00194f6:	85 db                	test   ebx,ebx
c00194f8:	74 29                	je     c0019523 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00194fa:	b9 02 00 00 00       	mov    ecx,0x2
c00194ff:	52                   	push   edx
c0019500:	99                   	cdq    
c0019501:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019505:	f7 f9                	idiv   ecx
c0019507:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001950b:	83 e8 32             	sub    eax,0x32
c001950e:	50                   	push   eax
c001950f:	e8 a1 d0 fe ff       	call   c00065b5 <iso_read>
c0019514:	83 c4 10             	add    esp,0x10
c0019517:	89 03                	mov    DWORD PTR [ebx],eax
c0019519:	09 d0                	or     eax,edx
c001951b:	0f 94 c0             	sete   al
c001951e:	0f b6 c0             	movzx  eax,al
c0019521:	eb 05                	jmp    c0019528 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0019523:	b8 04 00 00 00       	mov    eax,0x4
c0019528:	83 c4 08             	add    esp,0x8
c001952b:	5b                   	pop    ebx
c001952c:	c3                   	ret    
c001952d:	90                   	nop

c001952e <ISO9660::seek(void*, unsigned long long)>:
c001952e:	57                   	push   edi
c001952f:	56                   	push   esi
c0019530:	b8 04 00 00 00       	mov    eax,0x4
c0019535:	51                   	push   ecx
c0019536:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001953a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001953e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019542:	85 d2                	test   edx,edx
c0019544:	74 26                	je     c001956c <ISO9660::seek(void*, unsigned long long)+0x3e>
c0019546:	6a 00                	push   0x0
c0019548:	b9 02 00 00 00       	mov    ecx,0x2
c001954d:	57                   	push   edi
c001954e:	89 d0                	mov    eax,edx
c0019550:	56                   	push   esi
c0019551:	99                   	cdq    
c0019552:	f7 f9                	idiv   ecx
c0019554:	83 e8 32             	sub    eax,0x32
c0019557:	50                   	push   eax
c0019558:	e8 6e d1 fe ff       	call   c00066cb <iso_seek>
c001955d:	83 c4 10             	add    esp,0x10
c0019560:	31 f0                	xor    eax,esi
c0019562:	31 fa                	xor    edx,edi
c0019564:	09 d0                	or     eax,edx
c0019566:	0f 95 c0             	setne  al
c0019569:	0f b6 c0             	movzx  eax,al
c001956c:	5a                   	pop    edx
c001956d:	5e                   	pop    esi
c001956e:	5f                   	pop    edi
c001956f:	c3                   	ret    

c0019570 <ISO9660::tell(void*, unsigned long long*)>:
c0019570:	53                   	push   ebx
c0019571:	83 ec 08             	sub    esp,0x8
c0019574:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019578:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001957c:	85 c0                	test   eax,eax
c001957e:	74 24                	je     c00195a4 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019580:	85 db                	test   ebx,ebx
c0019582:	74 20                	je     c00195a4 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019584:	83 ec 0c             	sub    esp,0xc
c0019587:	b9 02 00 00 00       	mov    ecx,0x2
c001958c:	99                   	cdq    
c001958d:	f7 f9                	idiv   ecx
c001958f:	83 e8 32             	sub    eax,0x32
c0019592:	50                   	push   eax
c0019593:	e8 b7 d1 fe ff       	call   c000674f <iso_tell>
c0019598:	83 c4 10             	add    esp,0x10
c001959b:	89 03                	mov    DWORD PTR [ebx],eax
c001959d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00195a0:	31 c0                	xor    eax,eax
c00195a2:	eb 05                	jmp    c00195a9 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00195a4:	b8 04 00 00 00       	mov    eax,0x4
c00195a9:	83 c4 08             	add    esp,0x8
c00195ac:	5b                   	pop    ebx
c00195ad:	c3                   	ret    

c00195ae <ISO9660::stat(void*, unsigned long long*)>:
c00195ae:	53                   	push   ebx
c00195af:	83 ec 14             	sub    esp,0x14
c00195b2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00195b6:	68 d5 17 02 c0       	push   0xc00217d5
c00195bb:	e8 02 14 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00195c0:	83 c4 10             	add    esp,0x10
c00195c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195c8:	74 2c                	je     c00195f6 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00195ca:	85 db                	test   ebx,ebx
c00195cc:	74 28                	je     c00195f6 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00195ce:	83 ec 0c             	sub    esp,0xc
c00195d1:	b9 02 00 00 00       	mov    ecx,0x2
c00195d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195da:	99                   	cdq    
c00195db:	f7 f9                	idiv   ecx
c00195dd:	83 e8 32             	sub    eax,0x32
c00195e0:	50                   	push   eax
c00195e1:	e8 9a d1 fe ff       	call   c0006780 <iso_total>
c00195e6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00195ed:	89 03                	mov    DWORD PTR [ebx],eax
c00195ef:	83 c4 10             	add    esp,0x10
c00195f2:	31 c0                	xor    eax,eax
c00195f4:	eb 05                	jmp    c00195fb <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00195f6:	b8 04 00 00 00       	mov    eax,0x4
c00195fb:	83 c4 08             	add    esp,0x8
c00195fe:	5b                   	pop    ebx
c00195ff:	c3                   	ret    

c0019600 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019600:	55                   	push   ebp
c0019601:	57                   	push   edi
c0019602:	56                   	push   esi
c0019603:	53                   	push   ebx
c0019604:	83 ec 18             	sub    esp,0x18
c0019607:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001960b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001960f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019613:	68 dd 17 02 c0       	push   0xc00217dd
c0019618:	e8 a5 13 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001961d:	83 c4 10             	add    esp,0x10
c0019620:	85 ff                	test   edi,edi
c0019622:	0f 94 c0             	sete   al
c0019625:	85 f6                	test   esi,esi
c0019627:	0f 94 c2             	sete   dl
c001962a:	09 d0                	or     eax,edx
c001962c:	a8 01                	test   al,0x1
c001962e:	0f 85 dd 00 00 00    	jne    c0019711 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019634:	85 db                	test   ebx,ebx
c0019636:	0f 84 d5 00 00 00    	je     c0019711 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001963c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001963f:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019645:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001964c:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019653:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019655:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001965b:	74 1b                	je     c0019678 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001965d:	85 c0                	test   eax,eax
c001965f:	74 10                	je     c0019671 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019661:	83 ec 0c             	sub    esp,0xc
c0019664:	68 81 17 02 c0       	push   0xc0021781
c0019669:	e8 81 72 ff ff       	call   c00108ef <KePanic(char const*)>
c001966e:	83 c4 10             	add    esp,0x10
c0019671:	8a 03                	mov    al,BYTE PTR [ebx]
c0019673:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019678:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001967b:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019682:	85 c0                	test   eax,eax
c0019684:	74 09                	je     c001968f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0019686:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001968d:	74 51                	je     c00196e0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001968f:	83 ec 0c             	sub    esp,0xc
c0019692:	68 e5 17 02 c0       	push   0xc00217e5
c0019697:	e8 26 13 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001969c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001969f:	83 c4 10             	add    esp,0x10
c00196a2:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00196aa:	74 21                	je     c00196cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	68 05 18 02 c0       	push   0xc0021805
c00196b4:	e8 09 13 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c00196b9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196bc:	83 c4 10             	add    esp,0x10
c00196bf:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00196c6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00196cd:	83 ec 0c             	sub    esp,0xc
c00196d0:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00196d7:	50                   	push   eax
c00196d8:	e8 69 d3 fe ff       	call   c0006a46 <init_percd>
c00196dd:	83 c4 10             	add    esp,0x10
c00196e0:	83 c3 03             	add    ebx,0x3
c00196e3:	52                   	push   edx
c00196e4:	52                   	push   edx
c00196e5:	6a 00                	push   0x0
c00196e7:	53                   	push   ebx
c00196e8:	e8 20 ce fe ff       	call   c000650d <iso_open>
c00196ed:	83 c4 10             	add    esp,0x10
c00196f0:	89 c5                	mov    ebp,eax
c00196f2:	83 f8 ff             	cmp    eax,0xffffffff
c00196f5:	75 21                	jne    c0019718 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00196f7:	50                   	push   eax
c00196f8:	50                   	push   eax
c00196f9:	6a 01                	push   0x1
c00196fb:	53                   	push   ebx
c00196fc:	e8 0c ce fe ff       	call   c000650d <iso_open>
c0019701:	83 c4 10             	add    esp,0x10
c0019704:	ba 02 00 00 00       	mov    edx,0x2
c0019709:	40                   	inc    eax
c001970a:	74 2b                	je     c0019737 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001970c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001970f:	eb 24                	jmp    c0019735 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019711:	ba 04 00 00 00       	mov    edx,0x4
c0019716:	eb 1f                	jmp    c0019737 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019718:	83 ec 0c             	sub    esp,0xc
c001971b:	50                   	push   eax
c001971c:	e8 5f d0 fe ff       	call   c0006780 <iso_total>
c0019721:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019728:	89 07                	mov    DWORD PTR [edi],eax
c001972a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001972d:	e8 65 ce fe ff       	call   c0006597 <iso_close>
c0019732:	83 c4 10             	add    esp,0x10
c0019735:	31 d2                	xor    edx,edx
c0019737:	83 c4 0c             	add    esp,0xc
c001973a:	89 d0                	mov    eax,edx
c001973c:	5b                   	pop    ebx
c001973d:	5e                   	pop    esi
c001973e:	5f                   	pop    edi
c001973f:	5d                   	pop    ebp
c0019740:	c3                   	ret    
c0019741:	90                   	nop

c0019742 <ISO9660::close(void*)>:
c0019742:	83 ec 0c             	sub    esp,0xc
c0019745:	b8 04 00 00 00       	mov    eax,0x4
c001974a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001974e:	85 d2                	test   edx,edx
c0019750:	74 1b                	je     c001976d <ISO9660::close(void*)+0x2b>
c0019752:	83 ec 0c             	sub    esp,0xc
c0019755:	b9 02 00 00 00       	mov    ecx,0x2
c001975a:	89 d0                	mov    eax,edx
c001975c:	99                   	cdq    
c001975d:	f7 f9                	idiv   ecx
c001975f:	83 e8 32             	sub    eax,0x32
c0019762:	50                   	push   eax
c0019763:	e8 2f ce fe ff       	call   c0006597 <iso_close>
c0019768:	83 c4 10             	add    esp,0x10
c001976b:	31 c0                	xor    eax,eax
c001976d:	83 c4 0c             	add    esp,0xc
c0019770:	c3                   	ret    
c0019771:	90                   	nop

c0019772 <ISO9660::openDir(char const*, void**)>:
c0019772:	56                   	push   esi
c0019773:	53                   	push   ebx
c0019774:	50                   	push   eax
c0019775:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019779:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001977d:	85 db                	test   ebx,ebx
c001977f:	0f 84 bd 00 00 00    	je     c0019842 <ISO9660::openDir(char const*, void**)+0xd0>
c0019785:	85 f6                	test   esi,esi
c0019787:	0f 84 b5 00 00 00    	je     c0019842 <ISO9660::openDir(char const*, void**)+0xd0>
c001978d:	8a 13                	mov    dl,BYTE PTR [ebx]
c001978f:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019796:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c001979c:	74 1b                	je     c00197b9 <ISO9660::openDir(char const*, void**)+0x47>
c001979e:	85 c0                	test   eax,eax
c00197a0:	74 10                	je     c00197b2 <ISO9660::openDir(char const*, void**)+0x40>
c00197a2:	83 ec 0c             	sub    esp,0xc
c00197a5:	68 81 17 02 c0       	push   0xc0021781
c00197aa:	e8 40 71 ff ff       	call   c00108ef <KePanic(char const*)>
c00197af:	83 c4 10             	add    esp,0x10
c00197b2:	8a 03                	mov    al,BYTE PTR [ebx]
c00197b4:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00197b9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00197bc:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00197c3:	85 c0                	test   eax,eax
c00197c5:	74 10                	je     c00197d7 <ISO9660::openDir(char const*, void**)+0x65>
c00197c7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00197ce:	74 1a                	je     c00197ea <ISO9660::openDir(char const*, void**)+0x78>
c00197d0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00197d7:	83 ec 0c             	sub    esp,0xc
c00197da:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00197e1:	50                   	push   eax
c00197e2:	e8 5f d2 fe ff       	call   c0006a46 <init_percd>
c00197e7:	83 c4 10             	add    esp,0x10
c00197ea:	83 c3 03             	add    ebx,0x3
c00197ed:	50                   	push   eax
c00197ee:	50                   	push   eax
c00197ef:	6a 01                	push   0x1
c00197f1:	53                   	push   ebx
c00197f2:	e8 16 cd fe ff       	call   c000650d <iso_open>
c00197f7:	83 c4 10             	add    esp,0x10
c00197fa:	89 c3                	mov    ebx,eax
c00197fc:	83 f8 ff             	cmp    eax,0xffffffff
c00197ff:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019804:	75 1c                	jne    c0019822 <ISO9660::openDir(char const*, void**)+0xb0>
c0019806:	53                   	push   ebx
c0019807:	53                   	push   ebx
c0019808:	68 29 18 02 c0       	push   0xc0021829
c001980d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019813:	e8 78 f2 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019818:	83 c4 10             	add    esp,0x10
c001981b:	b8 01 00 00 00       	mov    eax,0x1
c0019820:	eb 25                	jmp    c0019847 <ISO9660::openDir(char const*, void**)+0xd5>
c0019822:	01 db                	add    ebx,ebx
c0019824:	51                   	push   ecx
c0019825:	83 c3 65             	add    ebx,0x65
c0019828:	51                   	push   ecx
c0019829:	68 3c 18 02 c0       	push   0xc002183c
c001982e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019834:	e8 57 f2 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019839:	89 1e                	mov    DWORD PTR [esi],ebx
c001983b:	83 c4 10             	add    esp,0x10
c001983e:	31 c0                	xor    eax,eax
c0019840:	eb 05                	jmp    c0019847 <ISO9660::openDir(char const*, void**)+0xd5>
c0019842:	b8 04 00 00 00       	mov    eax,0x4
c0019847:	5a                   	pop    edx
c0019848:	5b                   	pop    ebx
c0019849:	5e                   	pop    esi
c001984a:	c3                   	ret    
c001984b:	90                   	nop

c001984c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001984c:	55                   	push   ebp
c001984d:	57                   	push   edi
c001984e:	56                   	push   esi
c001984f:	53                   	push   ebx
c0019850:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019856:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001985d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019864:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001986c:	0f 84 e7 00 00 00    	je     c0019959 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019872:	85 db                	test   ebx,ebx
c0019874:	0f 84 df 00 00 00    	je     c0019959 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001987a:	83 ec 0c             	sub    esp,0xc
c001987d:	68 4f 18 02 c0       	push   0xc002184f
c0019882:	e8 3b 11 ff ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c0019887:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001988e:	b9 02 00 00 00       	mov    ecx,0x2
c0019893:	99                   	cdq    
c0019894:	f7 f9                	idiv   ecx
c0019896:	83 e8 32             	sub    eax,0x32
c0019899:	89 04 24             	mov    DWORD PTR [esp],eax
c001989c:	e8 31 cf fe ff       	call   c00067d2 <iso_readdir>
c00198a1:	83 c4 10             	add    esp,0x10
c00198a4:	89 c6                	mov    esi,eax
c00198a6:	85 c0                	test   eax,eax
c00198a8:	75 37                	jne    c00198e1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c00198aa:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00198af:	56                   	push   esi
c00198b0:	56                   	push   esi
c00198b1:	68 5a 18 02 c0       	push   0xc002185a
c00198b6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198bc:	e8 cf f1 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c00198c1:	83 c4 0c             	add    esp,0xc
c00198c4:	68 10 01 00 00       	push   0x110
c00198c9:	6a 00                	push   0x0
c00198cb:	57                   	push   edi
c00198cc:	e8 1f 6c fe ff       	call   c00004f0 <memset>
c00198d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00198d7:	83 c4 10             	add    esp,0x10
c00198da:	b8 01 00 00 00       	mov    eax,0x1
c00198df:	eb 7d                	jmp    c001995e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00198e1:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00198e7:	8d 68 08             	lea    ebp,[eax+0x8]
c00198ea:	83 ec 0c             	sub    esp,0xc
c00198ed:	55                   	push   ebp
c00198ee:	e8 7d 6c fe ff       	call   c0000570 <strlen>
c00198f3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00198fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00198ff:	83 c4 10             	add    esp,0x10
c0019902:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0019906:	75 0a                	jne    c0019912 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019908:	b8 02 00 00 00       	mov    eax,0x2
c001990d:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019910:	74 05                	je     c0019917 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0019912:	b8 01 00 00 00       	mov    eax,0x1
c0019917:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001991b:	50                   	push   eax
c001991c:	50                   	push   eax
c001991d:	55                   	push   ebp
c001991e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019922:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019926:	50                   	push   eax
c0019927:	e8 14 6d fe ff       	call   c0000640 <strcpy>
c001992c:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019933:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019935:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001993b:	5a                   	pop    edx
c001993c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019941:	59                   	pop    ecx
c0019942:	68 6d 18 02 c0       	push   0xc002186d
c0019947:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001994d:	e8 3e f1 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019952:	83 c4 10             	add    esp,0x10
c0019955:	31 c0                	xor    eax,eax
c0019957:	eb 05                	jmp    c001995e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019959:	b8 04 00 00 00       	mov    eax,0x4
c001995e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019964:	5b                   	pop    ebx
c0019965:	5e                   	pop    esi
c0019966:	5f                   	pop    edi
c0019967:	5d                   	pop    ebp
c0019968:	c3                   	ret    

c0019969 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019969:	57                   	push   edi
c001996a:	56                   	push   esi
c001996b:	53                   	push   ebx
c001996c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019970:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019974:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019978:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c001997e:	0f be cb             	movsx  ecx,bl
c0019981:	75 0b                	jne    c001998e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019983:	0f be 05 c4 23 02 c0 	movsx  eax,BYTE PTR ds:0xc00223c4
c001998a:	39 c8                	cmp    eax,ecx
c001998c:	74 47                	je     c00199d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001998e:	83 ec 0c             	sub    esp,0xc
c0019991:	31 d2                	xor    edx,edx
c0019993:	68 40 83 02 c0       	push   0xc0028340
c0019998:	6a 01                	push   0x1
c001999a:	52                   	push   edx
c001999b:	56                   	push   esi
c001999c:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c00199a3:	e8 30 38 ff ff       	call   c000d1d8 <LogicalDisk::read(unsigned long long, int, void*)>
c00199a8:	83 c4 20             	add    esp,0x20
c00199ab:	85 c0                	test   eax,eax
c00199ad:	75 0e                	jne    c00199bd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00199af:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c00199b5:	88 1d c4 23 02 c0    	mov    BYTE PTR ds:0xc00223c4,bl
c00199bb:	eb 18                	jmp    c00199d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00199bd:	50                   	push   eax
c00199be:	68 00 08 00 00       	push   0x800
c00199c3:	6a 00                	push   0x0
c00199c5:	57                   	push   edi
c00199c6:	e8 25 6b fe ff       	call   c00004f0 <memset>
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	b8 01 00 00 00       	mov    eax,0x1
c00199d3:	eb 0e                	jmp    c00199e3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00199d5:	be 40 83 02 c0       	mov    esi,0xc0028340
c00199da:	b9 00 08 00 00       	mov    ecx,0x800
c00199df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199e1:	31 c0                	xor    eax,eax
c00199e3:	5b                   	pop    ebx
c00199e4:	5e                   	pop    esi
c00199e5:	5f                   	pop    edi
c00199e6:	c3                   	ret    
c00199e7:	90                   	nop

c00199e8 <ISO9660::tryMount(LogicalDisk*, int)>:
c00199e8:	53                   	push   ebx
c00199e9:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00199ef:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c00199f9:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019a00:	8d 58 41             	lea    ebx,[eax+0x41]
c0019a03:	0f be db             	movsx  ebx,bl
c0019a06:	53                   	push   ebx
c0019a07:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a0b:	50                   	push   eax
c0019a0c:	6a 10                	push   0x10
c0019a0e:	e8 56 ff ff ff       	call   c0019969 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019a13:	83 c4 10             	add    esp,0x10
c0019a16:	31 d2                	xor    edx,edx
c0019a18:	85 c0                	test   eax,eax
c0019a1a:	75 33                	jne    c0019a4f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a1c:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019a21:	75 2c                	jne    c0019a4f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a23:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019a28:	75 25                	jne    c0019a4f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a2a:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019a2f:	75 1e                	jne    c0019a4f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a31:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019a36:	75 17                	jne    c0019a4f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a38:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019a3d:	75 10                	jne    c0019a4f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a3f:	83 ec 0c             	sub    esp,0xc
c0019a42:	53                   	push   ebx
c0019a43:	e8 fe cf fe ff       	call   c0006a46 <init_percd>
c0019a48:	83 c4 10             	add    esp,0x10
c0019a4b:	40                   	inc    eax
c0019a4c:	0f 95 c2             	setne  dl
c0019a4f:	88 d0                	mov    al,dl
c0019a51:	81 c4 08 08 00 00    	add    esp,0x808
c0019a57:	5b                   	pop    ebx
c0019a58:	c3                   	ret    
c0019a59:	90                   	nop

c0019a5a <ISO9660::ISO9660()>:
c0019a5a:	83 ec 0c             	sub    esp,0xc
c0019a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a61:	83 ec 0c             	sub    esp,0xc
c0019a64:	50                   	push   eax
c0019a65:	e8 7a 12 ff ff       	call   c000ace4 <Filesystem::Filesystem()>
c0019a6a:	83 c4 10             	add    esp,0x10
c0019a6d:	ba 88 18 02 c0       	mov    edx,0xc0021888
c0019a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a76:	89 10                	mov    DWORD PTR [eax],edx
c0019a78:	e8 db d0 fe ff       	call   c0006b58 <fs_iso9660_init>
c0019a7d:	90                   	nop
c0019a7e:	83 c4 0c             	add    esp,0xc
c0019a81:	c3                   	ret    

c0019a82 <SoundCard::beginPlayback()>:
c0019a82:	c7 44 24 04 e8 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218e8
c0019a8a:	e9 60 6e ff ff       	jmp    c00108ef <KePanic(char const*)>
c0019a8f:	90                   	nop

c0019a90 <SoundCard::stopPlayback()>:
c0019a90:	c7 44 24 04 e8 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218e8
c0019a98:	e9 52 6e ff ff       	jmp    c00108ef <KePanic(char const*)>
c0019a9d:	90                   	nop

c0019a9e <SoundCard::SoundCard(char const*)>:
c0019a9e:	83 ec 1c             	sub    esp,0x1c
c0019aa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aa5:	83 ec 08             	sub    esp,0x8
c0019aa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019aac:	50                   	push   eax
c0019aad:	e8 dc 24 ff ff       	call   c000bf8e <Device::Device(char const*)>
c0019ab2:	83 c4 10             	add    esp,0x10
c0019ab5:	ba 34 19 02 c0       	mov    edx,0xc0021934
c0019aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019abe:	89 10                	mov    DWORD PTR [eax],edx
c0019ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ac4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019acb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019acf:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019ad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019add:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019ae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aeb:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019af9:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019b03:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b0b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019b10:	7f 1a                	jg     c0019b2c <SoundCard::SoundCard(char const*)+0x8e>
c0019b12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b1a:	83 c2 54             	add    edx,0x54
c0019b1d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019b25:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019b2a:	eb df                	jmp    c0019b0b <SoundCard::SoundCard(char const*)+0x6d>
c0019b2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b30:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019b37:	90                   	nop
c0019b38:	83 c4 1c             	add    esp,0x1c
c0019b3b:	c3                   	ret    

c0019b3c <SoundCard::~SoundCard()>:
c0019b3c:	83 ec 0c             	sub    esp,0xc
c0019b3f:	ba 34 19 02 c0       	mov    edx,0xc0021934
c0019b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b48:	89 10                	mov    DWORD PTR [eax],edx
c0019b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b4e:	83 ec 0c             	sub    esp,0xc
c0019b51:	50                   	push   eax
c0019b52:	e8 a1 21 ff ff       	call   c000bcf8 <Device::~Device()>
c0019b57:	83 c4 10             	add    esp,0x10
c0019b5a:	90                   	nop
c0019b5b:	83 c4 0c             	add    esp,0xc
c0019b5e:	c3                   	ret    
c0019b5f:	90                   	nop

c0019b60 <SoundCard::~SoundCard()>:
c0019b60:	83 ec 0c             	sub    esp,0xc
c0019b63:	83 ec 0c             	sub    esp,0xc
c0019b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b6a:	e8 cd ff ff ff       	call   c0019b3c <SoundCard::~SoundCard()>
c0019b6f:	83 c4 10             	add    esp,0x10
c0019b72:	83 ec 08             	sub    esp,0x8
c0019b75:	68 e8 01 00 00       	push   0x1e8
c0019b7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b7e:	e8 12 0d ff ff       	call   c000a895 <operator delete(void*, unsigned long)>
c0019b83:	83 c4 10             	add    esp,0x10
c0019b86:	83 c4 0c             	add    esp,0xc
c0019b89:	c3                   	ret    

c0019b8a <SoundCard::configureRates(int, int, int)>:
c0019b8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b8e:	31 c0                	xor    eax,eax
c0019b90:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019b97:	75 20                	jne    c0019bb9 <SoundCard::configureRates(int, int, int)+0x2f>
c0019b99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b9d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ba7:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bb1:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019bb7:	b0 01                	mov    al,0x1
c0019bb9:	c3                   	ret    

c0019bba <SoundCard::getSamples16(int, short*)>:
c0019bba:	55                   	push   ebp
c0019bbb:	57                   	push   edi
c0019bbc:	31 ff                	xor    edi,edi
c0019bbe:	56                   	push   esi
c0019bbf:	53                   	push   ebx
c0019bc0:	31 db                	xor    ebx,ebx
c0019bc2:	83 ec 10             	sub    esp,0x10
c0019bc5:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019bc9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019bcd:	8d 04 36             	lea    eax,[esi+esi*1]
c0019bd0:	50                   	push   eax
c0019bd1:	6a 00                	push   0x0
c0019bd3:	55                   	push   ebp
c0019bd4:	e8 17 69 fe ff       	call   c00004f0 <memset>
c0019bd9:	83 c4 10             	add    esp,0x10
c0019bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019be0:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019be7:	85 c0                	test   eax,eax
c0019be9:	74 1b                	je     c0019c06 <SoundCard::getSamples16(int, short*)+0x4c>
c0019beb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019bef:	75 15                	jne    c0019c06 <SoundCard::getSamples16(int, short*)+0x4c>
c0019bf1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019bf5:	55                   	push   ebp
c0019bf6:	56                   	push   esi
c0019bf7:	50                   	push   eax
c0019bf8:	e8 f3 02 00 00       	call   c0019ef0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019bfd:	83 c4 10             	add    esp,0x10
c0019c00:	39 c7                	cmp    edi,eax
c0019c02:	7d 02                	jge    c0019c06 <SoundCard::getSamples16(int, short*)+0x4c>
c0019c04:	89 c7                	mov    edi,eax
c0019c06:	43                   	inc    ebx
c0019c07:	83 fb 20             	cmp    ebx,0x20
c0019c0a:	75 d0                	jne    c0019bdc <SoundCard::getSamples16(int, short*)+0x22>
c0019c0c:	83 c4 0c             	add    esp,0xc
c0019c0f:	89 f8                	mov    eax,edi
c0019c11:	5b                   	pop    ebx
c0019c12:	5e                   	pop    esi
c0019c13:	5f                   	pop    edi
c0019c14:	5d                   	pop    ebp
c0019c15:	c3                   	ret    

c0019c16 <SoundCard::getSamples32(int, int*)>:
c0019c16:	55                   	push   ebp
c0019c17:	57                   	push   edi
c0019c18:	31 ff                	xor    edi,edi
c0019c1a:	56                   	push   esi
c0019c1b:	31 f6                	xor    esi,esi
c0019c1d:	53                   	push   ebx
c0019c1e:	83 ec 10             	sub    esp,0x10
c0019c21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c25:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019c29:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019c2d:	c1 e0 02             	shl    eax,0x2
c0019c30:	50                   	push   eax
c0019c31:	6a 00                	push   0x0
c0019c33:	55                   	push   ebp
c0019c34:	e8 b7 68 fe ff       	call   c00004f0 <memset>
c0019c39:	83 c4 10             	add    esp,0x10
c0019c3c:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019c43:	85 c0                	test   eax,eax
c0019c45:	74 1b                	je     c0019c62 <SoundCard::getSamples32(int, int*)+0x4c>
c0019c47:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019c4b:	75 15                	jne    c0019c62 <SoundCard::getSamples32(int, int*)+0x4c>
c0019c4d:	53                   	push   ebx
c0019c4e:	55                   	push   ebp
c0019c4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c53:	50                   	push   eax
c0019c54:	e8 63 03 00 00       	call   c0019fbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019c59:	83 c4 10             	add    esp,0x10
c0019c5c:	39 c6                	cmp    esi,eax
c0019c5e:	7d 02                	jge    c0019c62 <SoundCard::getSamples32(int, int*)+0x4c>
c0019c60:	89 c6                	mov    esi,eax
c0019c62:	47                   	inc    edi
c0019c63:	83 ff 20             	cmp    edi,0x20
c0019c66:	75 d4                	jne    c0019c3c <SoundCard::getSamples32(int, int*)+0x26>
c0019c68:	85 f6                	test   esi,esi
c0019c6a:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019c71:	75 0f                	jne    c0019c82 <SoundCard::getSamples32(int, int*)+0x6c>
c0019c73:	85 c0                	test   eax,eax
c0019c75:	74 1b                	je     c0019c92 <SoundCard::getSamples32(int, int*)+0x7c>
c0019c77:	83 ec 0c             	sub    esp,0xc
c0019c7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c7c:	53                   	push   ebx
c0019c7d:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019c80:	eb 0d                	jmp    c0019c8f <SoundCard::getSamples32(int, int*)+0x79>
c0019c82:	85 c0                	test   eax,eax
c0019c84:	75 0c                	jne    c0019c92 <SoundCard::getSamples32(int, int*)+0x7c>
c0019c86:	83 ec 0c             	sub    esp,0xc
c0019c89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c8b:	53                   	push   ebx
c0019c8c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019c8f:	83 c4 10             	add    esp,0x10
c0019c92:	83 c4 0c             	add    esp,0xc
c0019c95:	89 f0                	mov    eax,esi
c0019c97:	5b                   	pop    ebx
c0019c98:	5e                   	pop    esi
c0019c99:	5f                   	pop    edi
c0019c9a:	5d                   	pop    ebp
c0019c9b:	c3                   	ret    

c0019c9c <SoundCard::addChannel(SoundPort*)>:
c0019c9c:	83 ec 0c             	sub    esp,0xc
c0019c9f:	31 c0                	xor    eax,eax
c0019ca1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ca5:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019cad:	74 1b                	je     c0019cca <SoundCard::addChannel(SoundPort*)+0x2e>
c0019caf:	40                   	inc    eax
c0019cb0:	83 f8 20             	cmp    eax,0x20
c0019cb3:	75 f0                	jne    c0019ca5 <SoundCard::addChannel(SoundPort*)+0x9>
c0019cb5:	83 ec 0c             	sub    esp,0xc
c0019cb8:	68 0d 19 02 c0       	push   0xc002190d
c0019cbd:	e8 2d 6c ff ff       	call   c00108ef <KePanic(char const*)>
c0019cc2:	83 c4 10             	add    esp,0x10
c0019cc5:	83 c8 ff             	or     eax,0xffffffff
c0019cc8:	eb 0b                	jmp    c0019cd5 <SoundCard::addChannel(SoundPort*)+0x39>
c0019cca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019cce:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019cd5:	83 c4 0c             	add    esp,0xc
c0019cd8:	c3                   	ret    
c0019cd9:	90                   	nop

c0019cda <SoundCard::removeChannel(int)>:
c0019cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ce2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019ced:	c3                   	ret    
c0019cee:	66 90                	xchg   ax,ax

c0019cf0 <SoundPort::SoundPort(int, int, int, int)>:
c0019cf0:	83 ec 0c             	sub    esp,0xc
c0019cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cf7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d02:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d0e:	89 10                	mov    DWORD PTR [eax],edx
c0019d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d18:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d23:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019d26:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019d2b:	75 13                	jne    c0019d40 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d31:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d33:	05 a0 0f 00 00       	add    eax,0xfa0
c0019d38:	01 c0                	add    eax,eax
c0019d3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019d3e:	66 90                	xchg   ax,ax
c0019d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019d48:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d4f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d5d:	c1 e0 02             	shl    eax,0x2
c0019d60:	83 ec 0c             	sub    esp,0xc
c0019d63:	50                   	push   eax
c0019d64:	e8 45 dd fe ff       	call   c0007aae <malloc>
c0019d69:	83 c4 10             	add    esp,0x10
c0019d6c:	89 c2                	mov    edx,eax
c0019d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d72:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019d75:	90                   	nop
c0019d76:	83 c4 0c             	add    esp,0xc
c0019d79:	c3                   	ret    
c0019d7a:	66 90                	xchg   ax,ax

c0019d7c <SoundPort::~SoundPort()>:
c0019d7c:	83 ec 0c             	sub    esp,0xc
c0019d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d86:	85 c0                	test   eax,eax
c0019d88:	74 1e                	je     c0019da8 <SoundPort::~SoundPort()+0x2c>
c0019d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d91:	83 ec 0c             	sub    esp,0xc
c0019d94:	50                   	push   eax
c0019d95:	e8 24 dd fe ff       	call   c0007abe <free>
c0019d9a:	83 c4 10             	add    esp,0x10
c0019d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019da1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019da8:	90                   	nop
c0019da9:	83 c4 0c             	add    esp,0xc
c0019dac:	c3                   	ret    
c0019dad:	90                   	nop
c0019dae:	66 90                	xchg   ax,ax

c0019db0 <SoundPort::unpause()>:
c0019db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019db4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019db8:	c3                   	ret    
c0019db9:	90                   	nop
c0019dba:	66 90                	xchg   ax,ax

c0019dbc <SoundPort::pause()>:
c0019dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dc0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019dc4:	c3                   	ret    
c0019dc5:	90                   	nop
c0019dc6:	66 90                	xchg   ax,ax

c0019dc8 <SoundPort::getBufferUsed()>:
c0019dc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dcc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019dcf:	c3                   	ret    

c0019dd0 <SoundPort::getBufferSize()>:
c0019dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dd4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019dd7:	c3                   	ret    

c0019dd8 <SoundPort::buffer16(short*, int)>:
c0019dd8:	55                   	push   ebp
c0019dd9:	57                   	push   edi
c0019dda:	56                   	push   esi
c0019ddb:	53                   	push   ebx
c0019ddc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019de0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019de4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019de7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019dea:	74 68                	je     c0019e54 <SoundPort::buffer16(short*, int)+0x7c>
c0019dec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019df0:	85 c9                	test   ecx,ecx
c0019df2:	7e 60                	jle    c0019e54 <SoundPort::buffer16(short*, int)+0x7c>
c0019df4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019df8:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019dfb:	c1 e1 0f             	shl    ecx,0xf
c0019dfe:	8d 70 01             	lea    esi,[eax+0x1]
c0019e01:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e04:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019e07:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e0a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e0d:	74 4d                	je     c0019e5c <SoundPort::buffer16(short*, int)+0x84>
c0019e0f:	31 f6                	xor    esi,esi
c0019e11:	eb 21                	jmp    c0019e34 <SoundPort::buffer16(short*, int)+0x5c>
c0019e13:	90                   	nop
c0019e14:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019e19:	8d 79 01             	lea    edi,[ecx+0x1]
c0019e1c:	c1 e3 0f             	shl    ebx,0xf
c0019e1f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019e22:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019e25:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019e28:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e2b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e2e:	74 1c                	je     c0019e4c <SoundPort::buffer16(short*, int)+0x74>
c0019e30:	89 c6                	mov    esi,eax
c0019e32:	66 90                	xchg   ax,ax
c0019e34:	8d 46 01             	lea    eax,[esi+0x1]
c0019e37:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019e3b:	75 d7                	jne    c0019e14 <SoundPort::buffer16(short*, int)+0x3c>
c0019e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e41:	8d 76 00             	lea    esi,[esi+0x0]
c0019e44:	5b                   	pop    ebx
c0019e45:	5e                   	pop    esi
c0019e46:	5f                   	pop    edi
c0019e47:	5d                   	pop    ebp
c0019e48:	c3                   	ret    
c0019e49:	8d 76 00             	lea    esi,[esi+0x0]
c0019e4c:	5b                   	pop    ebx
c0019e4d:	8d 46 02             	lea    eax,[esi+0x2]
c0019e50:	5e                   	pop    esi
c0019e51:	5f                   	pop    edi
c0019e52:	5d                   	pop    ebp
c0019e53:	c3                   	ret    
c0019e54:	5b                   	pop    ebx
c0019e55:	31 c0                	xor    eax,eax
c0019e57:	5e                   	pop    esi
c0019e58:	5f                   	pop    edi
c0019e59:	5d                   	pop    ebp
c0019e5a:	c3                   	ret    
c0019e5b:	90                   	nop
c0019e5c:	b8 01 00 00 00       	mov    eax,0x1
c0019e61:	eb e1                	jmp    c0019e44 <SoundPort::buffer16(short*, int)+0x6c>
c0019e63:	90                   	nop

c0019e64 <SoundPort::buffer32(int*, int)>:
c0019e64:	55                   	push   ebp
c0019e65:	57                   	push   edi
c0019e66:	56                   	push   esi
c0019e67:	53                   	push   ebx
c0019e68:	83 ec 04             	sub    esp,0x4
c0019e6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e73:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e76:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e7d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e80:	74 5a                	je     c0019edc <SoundPort::buffer32(int*, int)+0x78>
c0019e82:	85 c0                	test   eax,eax
c0019e84:	7e 56                	jle    c0019edc <SoundPort::buffer32(int*, int)+0x78>
c0019e86:	8d 71 01             	lea    esi,[ecx+0x1]
c0019e89:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019e8c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e8f:	8b 37                	mov    esi,DWORD PTR [edi]
c0019e91:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019e94:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e97:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e9a:	74 4c                	je     c0019ee8 <SoundPort::buffer32(int*, int)+0x84>
c0019e9c:	31 f6                	xor    esi,esi
c0019e9e:	eb 1c                	jmp    c0019ebc <SoundPort::buffer32(int*, int)+0x58>
c0019ea0:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019ea3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019ea6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019ea9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019eac:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019eb0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019eb3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019eb6:	74 18                	je     c0019ed0 <SoundPort::buffer32(int*, int)+0x6c>
c0019eb8:	89 de                	mov    esi,ebx
c0019eba:	66 90                	xchg   ax,ax
c0019ebc:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019ebf:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019ec2:	75 dc                	jne    c0019ea0 <SoundPort::buffer32(int*, int)+0x3c>
c0019ec4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019ec7:	90                   	nop
c0019ec8:	83 c4 04             	add    esp,0x4
c0019ecb:	5b                   	pop    ebx
c0019ecc:	5e                   	pop    esi
c0019ecd:	5f                   	pop    edi
c0019ece:	5d                   	pop    ebp
c0019ecf:	c3                   	ret    
c0019ed0:	83 c4 04             	add    esp,0x4
c0019ed3:	8d 46 02             	lea    eax,[esi+0x2]
c0019ed6:	5b                   	pop    ebx
c0019ed7:	5e                   	pop    esi
c0019ed8:	5f                   	pop    edi
c0019ed9:	5d                   	pop    ebp
c0019eda:	c3                   	ret    
c0019edb:	90                   	nop
c0019edc:	83 c4 04             	add    esp,0x4
c0019edf:	31 c0                	xor    eax,eax
c0019ee1:	5b                   	pop    ebx
c0019ee2:	5e                   	pop    esi
c0019ee3:	5f                   	pop    edi
c0019ee4:	5d                   	pop    ebp
c0019ee5:	c3                   	ret    
c0019ee6:	66 90                	xchg   ax,ax
c0019ee8:	b8 01 00 00 00       	mov    eax,0x1
c0019eed:	eb d9                	jmp    c0019ec8 <SoundPort::buffer32(int*, int)+0x64>
c0019eef:	90                   	nop

c0019ef0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019ef0:	57                   	push   edi
c0019ef1:	56                   	push   esi
c0019ef2:	53                   	push   ebx
c0019ef3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ef7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019efb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019f01:	39 03                	cmp    DWORD PTR [ebx],eax
c0019f03:	74 13                	je     c0019f18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019f05:	83 ec 0c             	sub    esp,0xc
c0019f08:	68 60 19 02 c0       	push   0xc0021960
c0019f0d:	e8 dd 69 ff ff       	call   c00108ef <KePanic(char const*)>
c0019f12:	83 c4 10             	add    esp,0x10
c0019f15:	8d 76 00             	lea    esi,[esi+0x0]
c0019f18:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0019f1e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019f21:	74 11                	je     c0019f34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0019f23:	83 ec 0c             	sub    esp,0xc
c0019f26:	68 9f 19 02 c0       	push   0xc002199f
c0019f2b:	e8 bf 69 ff ff       	call   c00108ef <KePanic(char const*)>
c0019f30:	83 c4 10             	add    esp,0x10
c0019f33:	90                   	nop
c0019f34:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0019f3a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f3d:	74 11                	je     c0019f50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019f3f:	83 ec 0c             	sub    esp,0xc
c0019f42:	68 9f 19 02 c0       	push   0xc002199f
c0019f47:	e8 a3 69 ff ff       	call   c00108ef <KePanic(char const*)>
c0019f4c:	83 c4 10             	add    esp,0x10
c0019f4f:	90                   	nop
c0019f50:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019f53:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019f57:	7e 07                	jle    c0019f60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019f59:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f60:	85 f6                	test   esi,esi
c0019f62:	7e 2c                	jle    c0019f90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0019f64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019f68:	8d 3c 36             	lea    edi,[esi+esi*1]
c0019f6b:	31 c9                	xor    ecx,ecx
c0019f6d:	01 d7                	add    edi,edx
c0019f6f:	90                   	nop
c0019f70:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0019f73:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0019f76:	85 c0                	test   eax,eax
c0019f78:	79 06                	jns    c0019f80 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019f7a:	05 ff 7f 00 00       	add    eax,0x7fff
c0019f7f:	90                   	nop
c0019f80:	c1 f8 0f             	sar    eax,0xf
c0019f83:	83 c1 04             	add    ecx,0x4
c0019f86:	66 01 02             	add    WORD PTR [edx],ax
c0019f89:	83 c2 02             	add    edx,0x2
c0019f8c:	39 d7                	cmp    edi,edx
c0019f8e:	75 e0                	jne    c0019f70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019f90:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f96:	83 ec 04             	sub    esp,0x4
c0019f99:	29 f0                	sub    eax,esi
c0019f9b:	c1 e0 02             	shl    eax,0x2
c0019f9e:	50                   	push   eax
c0019f9f:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019fa2:	50                   	push   eax
c0019fa3:	52                   	push   edx
c0019fa4:	e8 27 64 fe ff       	call   c00003d0 <memmove>
c0019fa9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019fac:	83 c4 10             	add    esp,0x10
c0019faf:	29 f0                	sub    eax,esi
c0019fb1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019fb4:	89 f0                	mov    eax,esi
c0019fb6:	5b                   	pop    ebx
c0019fb7:	5e                   	pop    esi
c0019fb8:	5f                   	pop    edi
c0019fb9:	c3                   	ret    
c0019fba:	66 90                	xchg   ax,ax

c0019fbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019fbc:	57                   	push   edi
c0019fbd:	56                   	push   esi
c0019fbe:	53                   	push   ebx
c0019fbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fc3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fc7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019fcb:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019fd1:	39 06                	cmp    DWORD PTR [esi],eax
c0019fd3:	74 13                	je     c0019fe8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0019fd5:	83 ec 0c             	sub    esp,0xc
c0019fd8:	68 80 19 02 c0       	push   0xc0021980
c0019fdd:	e8 0d 69 ff ff       	call   c00108ef <KePanic(char const*)>
c0019fe2:	83 c4 10             	add    esp,0x10
c0019fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fe8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019fee:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019ff1:	74 11                	je     c001a004 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019ff3:	83 ec 0c             	sub    esp,0xc
c0019ff6:	68 bb 19 02 c0       	push   0xc00219bb
c0019ffb:	e8 ef 68 ff ff       	call   c00108ef <KePanic(char const*)>
c001a000:	83 c4 10             	add    esp,0x10
c001a003:	90                   	nop
c001a004:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001a00a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001a00d:	74 11                	je     c001a020 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001a00f:	83 ec 0c             	sub    esp,0xc
c001a012:	68 bb 19 02 c0       	push   0xc00219bb
c001a017:	e8 d3 68 ff ff       	call   c00108ef <KePanic(char const*)>
c001a01c:	83 c4 10             	add    esp,0x10
c001a01f:	90                   	nop
c001a020:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a023:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001a027:	7e 07                	jle    c001a030 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001a029:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a02d:	8d 76 00             	lea    esi,[esi+0x0]
c001a030:	85 ff                	test   edi,edi
c001a032:	7e 1c                	jle    c001a050 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001a034:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a03b:	31 c0                	xor    eax,eax
c001a03d:	8d 76 00             	lea    esi,[esi+0x0]
c001a040:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a043:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a046:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001a049:	83 c0 04             	add    eax,0x4
c001a04c:	39 c1                	cmp    ecx,eax
c001a04e:	75 f0                	jne    c001a040 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001a050:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a053:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a056:	83 ec 04             	sub    esp,0x4
c001a059:	29 f8                	sub    eax,edi
c001a05b:	c1 e0 02             	shl    eax,0x2
c001a05e:	50                   	push   eax
c001a05f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a062:	50                   	push   eax
c001a063:	52                   	push   edx
c001a064:	e8 67 63 fe ff       	call   c00003d0 <memmove>
c001a069:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a06c:	83 c4 10             	add    esp,0x10
c001a06f:	29 f8                	sub    eax,edi
c001a071:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001a074:	89 f8                	mov    eax,edi
c001a076:	5b                   	pop    ebx
c001a077:	5e                   	pop    esi
c001a078:	5f                   	pop    edi
c001a079:	c3                   	ret    

c001a07a <PCI::open(int, int, void*)>:
c001a07a:	83 ec 18             	sub    esp,0x18
c001a07d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a081:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a085:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a08b:	8b 10                	mov    edx,DWORD PTR [eax]
c001a08d:	50                   	push   eax
c001a08e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a091:	31 c0                	xor    eax,eax
c001a093:	83 c4 1c             	add    esp,0x1c
c001a096:	c3                   	ret    
c001a097:	90                   	nop

c001a098 <PCI::close(int, int, void*)>:
c001a098:	31 c0                	xor    eax,eax
c001a09a:	c3                   	ret    
c001a09b:	90                   	nop

c001a09c <PCI::PCI()>:
c001a09c:	83 ec 0c             	sub    esp,0xc
c001a09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a3:	83 ec 08             	sub    esp,0x8
c001a0a6:	68 d7 19 02 c0       	push   0xc00219d7
c001a0ab:	50                   	push   eax
c001a0ac:	e8 a7 16 ff ff       	call   c000b758 <Bus::Bus(char const*)>
c001a0b1:	83 c4 10             	add    esp,0x10
c001a0b4:	ba 80 1a 02 c0       	mov    edx,0xc0021a80
c001a0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0bd:	89 10                	mov    DWORD PTR [eax],edx
c001a0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0c3:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a0cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0d1:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0e0:	0f b6 d0             	movzx  edx,al
c001a0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0e7:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0f8:	0f b6 d0             	movzx  edx,al
c001a0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ff:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a108:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a10e:	8d 50 01             	lea    edx,[eax+0x1]
c001a111:	88 d1                	mov    cl,dl
c001a113:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a117:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a11d:	0f b6 d0             	movzx  edx,al
c001a120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a124:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a128:	83 c9 c0             	or     ecx,0xffffffc0
c001a12b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a12f:	90                   	nop
c001a130:	83 c4 0c             	add    esp,0xc
c001a133:	c3                   	ret    

c001a134 <PCI::readBAR8(unsigned int, int)>:
c001a134:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a138:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a13c:	f6 c2 01             	test   dl,0x1
c001a13f:	74 07                	je     c001a148 <PCI::readBAR8(unsigned int, int)+0x14>
c001a141:	83 e2 fc             	and    edx,0xfffffffc
c001a144:	01 c2                	add    edx,eax
c001a146:	ec                   	in     al,dx
c001a147:	c3                   	ret    
c001a148:	83 e2 f0             	and    edx,0xfffffff0
c001a14b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a14e:	c3                   	ret    
c001a14f:	90                   	nop

c001a150 <PCI::readBAR16(unsigned int, int)>:
c001a150:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a154:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a158:	f6 c2 01             	test   dl,0x1
c001a15b:	74 08                	je     c001a165 <PCI::readBAR16(unsigned int, int)+0x15>
c001a15d:	83 e2 fc             	and    edx,0xfffffffc
c001a160:	01 c2                	add    edx,eax
c001a162:	66 ed                	in     ax,dx
c001a164:	c3                   	ret    
c001a165:	83 e2 f0             	and    edx,0xfffffff0
c001a168:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a16c:	c3                   	ret    
c001a16d:	90                   	nop

c001a16e <PCI::readBAR32(unsigned int, int)>:
c001a16e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a172:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a176:	f6 c2 01             	test   dl,0x1
c001a179:	74 07                	je     c001a182 <PCI::readBAR32(unsigned int, int)+0x14>
c001a17b:	83 e2 fc             	and    edx,0xfffffffc
c001a17e:	01 c2                	add    edx,eax
c001a180:	ed                   	in     eax,dx
c001a181:	c3                   	ret    
c001a182:	83 e2 f0             	and    edx,0xfffffff0
c001a185:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a188:	c3                   	ret    
c001a189:	90                   	nop

c001a18a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a18a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a18e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a192:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a196:	f6 c2 01             	test   dl,0x1
c001a199:	74 07                	je     c001a1a2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a19b:	83 e2 fc             	and    edx,0xfffffffc
c001a19e:	01 ca                	add    edx,ecx
c001a1a0:	ee                   	out    dx,al
c001a1a1:	c3                   	ret    
c001a1a2:	83 e2 f0             	and    edx,0xfffffff0
c001a1a5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a1a8:	c3                   	ret    
c001a1a9:	90                   	nop

c001a1aa <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a1aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1b6:	f6 c2 01             	test   dl,0x1
c001a1b9:	74 08                	je     c001a1c3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a1bb:	83 e2 fc             	and    edx,0xfffffffc
c001a1be:	01 ca                	add    edx,ecx
c001a1c0:	66 ef                	out    dx,ax
c001a1c2:	c3                   	ret    
c001a1c3:	83 e2 f0             	and    edx,0xfffffff0
c001a1c6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a1ca:	c3                   	ret    
c001a1cb:	90                   	nop

c001a1cc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a1cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1d8:	f6 c2 01             	test   dl,0x1
c001a1db:	74 07                	je     c001a1e4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a1dd:	83 e2 fc             	and    edx,0xfffffffc
c001a1e0:	01 ca                	add    edx,ecx
c001a1e2:	ef                   	out    dx,eax
c001a1e3:	c3                   	ret    
c001a1e4:	83 e2 f0             	and    edx,0xfffffff0
c001a1e7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a1ea:	c3                   	ret    
c001a1eb:	90                   	nop

c001a1ec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a1ec:	55                   	push   ebp
c001a1ed:	57                   	push   edi
c001a1ee:	56                   	push   esi
c001a1ef:	53                   	push   ebx
c001a1f0:	83 ec 0c             	sub    esp,0xc
c001a1f3:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a1f8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a1fc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a200:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a204:	83 fe 07             	cmp    esi,0x7
c001a207:	76 10                	jbe    c001a219 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a209:	83 ec 0c             	sub    esp,0xc
c001a20c:	68 df 19 02 c0       	push   0xc00219df
c001a211:	e8 d9 66 ff ff       	call   c00108ef <KePanic(char const*)>
c001a216:	83 c4 10             	add    esp,0x10
c001a219:	0f b6 db             	movzx  ebx,bl
c001a21c:	83 fb 0f             	cmp    ebx,0xf
c001a21f:	76 10                	jbe    c001a231 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a221:	83 ec 0c             	sub    esp,0xc
c001a224:	68 0f 1a 02 c0       	push   0xc0021a0f
c001a229:	e8 c1 66 ff ff       	call   c00108ef <KePanic(char const*)>
c001a22e:	83 c4 10             	add    esp,0x10
c001a231:	8d 04 36             	lea    eax,[esi+esi*1]
c001a234:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a239:	83 c8 f0             	or     eax,0xfffffff0
c001a23c:	ee                   	out    dx,al
c001a23d:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a242:	89 e8                	mov    eax,ebp
c001a244:	ee                   	out    dx,al
c001a245:	83 c4 0c             	add    esp,0xc
c001a248:	89 d8                	mov    eax,ebx
c001a24a:	89 f9                	mov    ecx,edi
c001a24c:	c1 e0 08             	shl    eax,0x8
c001a24f:	0f b6 d9             	movzx  ebx,cl
c001a252:	83 e3 fc             	and    ebx,0xfffffffc
c001a255:	09 d8                	or     eax,ebx
c001a257:	5b                   	pop    ebx
c001a258:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a25d:	5e                   	pop    esi
c001a25e:	5f                   	pop    edi
c001a25f:	5d                   	pop    ebp
c001a260:	c3                   	ret    
c001a261:	90                   	nop

c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a262:	57                   	push   edi
c001a263:	56                   	push   esi
c001a264:	53                   	push   ebx
c001a265:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a269:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a26d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a273:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a277:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a27b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a27f:	83 ff 01             	cmp    edi,0x1
c001a282:	75 3f                	jne    c001a2c3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a284:	89 de                	mov    esi,ebx
c001a286:	0f b6 c0             	movzx  eax,al
c001a289:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a28f:	c1 e0 10             	shl    eax,0x10
c001a292:	0f b6 c9             	movzx  ecx,cl
c001a295:	09 f0                	or     eax,esi
c001a297:	c1 e1 08             	shl    ecx,0x8
c001a29a:	0f b6 d2             	movzx  edx,dl
c001a29d:	09 c8                	or     eax,ecx
c001a29f:	c1 e2 0b             	shl    edx,0xb
c001a2a2:	09 d0                	or     eax,edx
c001a2a4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a2a9:	0d 00 00 00 80       	or     eax,0x80000000
c001a2ae:	ef                   	out    dx,eax
c001a2af:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a2b4:	ed                   	in     eax,dx
c001a2b5:	83 e3 02             	and    ebx,0x2
c001a2b8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a2bf:	d3 e8                	shr    eax,cl
c001a2c1:	eb 44                	jmp    c001a307 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a2c3:	83 ff 02             	cmp    edi,0x2
c001a2c6:	75 2d                	jne    c001a2f5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a2c8:	83 ec 0c             	sub    esp,0xc
c001a2cb:	0f b6 c9             	movzx  ecx,cl
c001a2ce:	0f b6 d2             	movzx  edx,dl
c001a2d1:	0f b6 fb             	movzx  edi,bl
c001a2d4:	0f b6 c0             	movzx  eax,al
c001a2d7:	57                   	push   edi
c001a2d8:	51                   	push   ecx
c001a2d9:	52                   	push   edx
c001a2da:	50                   	push   eax
c001a2db:	56                   	push   esi
c001a2dc:	e8 0b ff ff ff       	call   c001a1ec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2e1:	89 c2                	mov    edx,eax
c001a2e3:	ed                   	in     eax,dx
c001a2e4:	83 e3 02             	and    ebx,0x2
c001a2e7:	83 c4 20             	add    esp,0x20
c001a2ea:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a2f1:	d3 e8                	shr    eax,cl
c001a2f3:	eb 12                	jmp    c001a307 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a2f5:	83 ec 0c             	sub    esp,0xc
c001a2f8:	68 3f 1a 02 c0       	push   0xc0021a3f
c001a2fd:	e8 ed 65 ff ff       	call   c00108ef <KePanic(char const*)>
c001a302:	83 c4 10             	add    esp,0x10
c001a305:	31 c0                	xor    eax,eax
c001a307:	5b                   	pop    ebx
c001a308:	5e                   	pop    esi
c001a309:	5f                   	pop    edi
c001a30a:	c3                   	ret    
c001a30b:	90                   	nop

c001a30c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a30c:	83 ec 18             	sub    esp,0x18
c001a30f:	6a 00                	push   0x0
c001a311:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a316:	50                   	push   eax
c001a317:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a31c:	50                   	push   eax
c001a31d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a322:	50                   	push   eax
c001a323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a327:	e8 36 ff ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a32c:	83 c4 2c             	add    esp,0x2c
c001a32f:	c3                   	ret    

c001a330 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a330:	83 ec 18             	sub    esp,0x18
c001a333:	6a 0e                	push   0xe
c001a335:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a33a:	50                   	push   eax
c001a33b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a340:	50                   	push   eax
c001a341:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a346:	50                   	push   eax
c001a347:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a34b:	e8 12 ff ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a350:	83 c4 2c             	add    esp,0x2c
c001a353:	0f b6 c0             	movzx  eax,al
c001a356:	c3                   	ret    
c001a357:	90                   	nop

c001a358 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a358:	55                   	push   ebp
c001a359:	57                   	push   edi
c001a35a:	56                   	push   esi
c001a35b:	53                   	push   ebx
c001a35c:	83 ec 18             	sub    esp,0x18
c001a35f:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a364:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a369:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a36e:	6a 0a                	push   0xa
c001a370:	56                   	push   esi
c001a371:	55                   	push   ebp
c001a372:	57                   	push   edi
c001a373:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a377:	e8 e6 fe ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a37c:	83 c4 14             	add    esp,0x14
c001a37f:	89 c3                	mov    ebx,eax
c001a381:	6a 0a                	push   0xa
c001a383:	0f b6 db             	movzx  ebx,bl
c001a386:	56                   	push   esi
c001a387:	55                   	push   ebp
c001a388:	57                   	push   edi
c001a389:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a38d:	e8 d0 fe ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a392:	83 c4 2c             	add    esp,0x2c
c001a395:	25 00 ff 00 00       	and    eax,0xff00
c001a39a:	09 d8                	or     eax,ebx
c001a39c:	5b                   	pop    ebx
c001a39d:	5e                   	pop    esi
c001a39e:	5f                   	pop    edi
c001a39f:	5d                   	pop    ebp
c001a3a0:	c3                   	ret    
c001a3a1:	90                   	nop

c001a3a2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a3a2:	83 ec 18             	sub    esp,0x18
c001a3a5:	6a 08                	push   0x8
c001a3a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3ac:	50                   	push   eax
c001a3ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3b2:	50                   	push   eax
c001a3b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3b8:	50                   	push   eax
c001a3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3bd:	e8 a0 fe ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3c2:	83 c4 2c             	add    esp,0x2c
c001a3c5:	0f b6 c4             	movzx  eax,ah
c001a3c8:	c3                   	ret    
c001a3c9:	90                   	nop

c001a3ca <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a3ca:	83 ec 18             	sub    esp,0x18
c001a3cd:	6a 08                	push   0x8
c001a3cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3d4:	50                   	push   eax
c001a3d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3da:	50                   	push   eax
c001a3db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3e0:	50                   	push   eax
c001a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3e5:	e8 78 fe ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3ea:	83 c4 2c             	add    esp,0x2c
c001a3ed:	c3                   	ret    

c001a3ee <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a3ee:	83 ec 18             	sub    esp,0x18
c001a3f1:	6a 3c                	push   0x3c
c001a3f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3f8:	50                   	push   eax
c001a3f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3fe:	50                   	push   eax
c001a3ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a404:	50                   	push   eax
c001a405:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a409:	e8 54 fe ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a40e:	83 c4 2c             	add    esp,0x2c
c001a411:	c3                   	ret    

c001a412 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a412:	83 ec 18             	sub    esp,0x18
c001a415:	6a 18                	push   0x18
c001a417:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a41c:	50                   	push   eax
c001a41d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a422:	50                   	push   eax
c001a423:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a428:	50                   	push   eax
c001a429:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a42d:	e8 30 fe ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a432:	83 c4 2c             	add    esp,0x2c
c001a435:	0f b6 c4             	movzx  eax,ah
c001a438:	c3                   	ret    
c001a439:	90                   	nop

c001a43a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a43a:	55                   	push   ebp
c001a43b:	57                   	push   edi
c001a43c:	56                   	push   esi
c001a43d:	53                   	push   ebx
c001a43e:	83 ec 28             	sub    esp,0x28
c001a441:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a445:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a44a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a44f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a454:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a45b:	8d 43 12             	lea    eax,[ebx+0x12]
c001a45e:	83 c3 10             	add    ebx,0x10
c001a461:	0f b6 c0             	movzx  eax,al
c001a464:	0f b6 db             	movzx  ebx,bl
c001a467:	50                   	push   eax
c001a468:	51                   	push   ecx
c001a469:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a46d:	57                   	push   edi
c001a46e:	55                   	push   ebp
c001a46f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a473:	e8 ea fd ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a478:	83 c4 14             	add    esp,0x14
c001a47b:	89 c6                	mov    esi,eax
c001a47d:	53                   	push   ebx
c001a47e:	c1 e6 10             	shl    esi,0x10
c001a481:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a485:	51                   	push   ecx
c001a486:	57                   	push   edi
c001a487:	55                   	push   ebp
c001a488:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a48c:	e8 d1 fd ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a491:	83 c4 3c             	add    esp,0x3c
c001a494:	0f b7 c0             	movzx  eax,ax
c001a497:	5b                   	pop    ebx
c001a498:	09 f0                	or     eax,esi
c001a49a:	5e                   	pop    esi
c001a49b:	5f                   	pop    edi
c001a49c:	5d                   	pop    ebp
c001a49d:	c3                   	ret    

c001a49e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a49e:	55                   	push   ebp
c001a49f:	57                   	push   edi
c001a4a0:	56                   	push   esi
c001a4a1:	53                   	push   ebx
c001a4a2:	83 ec 0c             	sub    esp,0xc
c001a4a5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a4a9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a4ad:	89 f5                	mov    ebp,esi
c001a4af:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a4b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a4b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a4bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a4c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a4c5:	83 f9 01             	cmp    ecx,0x1
c001a4c8:	75 5d                	jne    c001a527 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a4ca:	0f b6 c8             	movzx  ecx,al
c001a4cd:	0f b6 d2             	movzx  edx,dl
c001a4d0:	c1 e1 10             	shl    ecx,0x10
c001a4d3:	c1 e2 0b             	shl    edx,0xb
c001a4d6:	89 f0                	mov    eax,esi
c001a4d8:	25 fc 00 00 00       	and    eax,0xfc
c001a4dd:	09 c1                	or     ecx,eax
c001a4df:	89 e8                	mov    eax,ebp
c001a4e1:	0f b6 c0             	movzx  eax,al
c001a4e4:	c1 e0 08             	shl    eax,0x8
c001a4e7:	09 c1                	or     ecx,eax
c001a4e9:	09 d1                	or     ecx,edx
c001a4eb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a4f0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a4f6:	89 c8                	mov    eax,ecx
c001a4f8:	ef                   	out    dx,eax
c001a4f9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a4fe:	ed                   	in     eax,dx
c001a4ff:	0f b7 db             	movzx  ebx,bx
c001a502:	83 e6 02             	and    esi,0x2
c001a505:	74 0a                	je     c001a511 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a507:	0f b7 d0             	movzx  edx,ax
c001a50a:	c1 e3 10             	shl    ebx,0x10
c001a50d:	09 d3                	or     ebx,edx
c001a50f:	eb 05                	jmp    c001a516 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a511:	66 31 c0             	xor    ax,ax
c001a514:	09 c3                	or     ebx,eax
c001a516:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a51b:	89 c8                	mov    eax,ecx
c001a51d:	ef                   	out    dx,eax
c001a51e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a523:	89 d8                	mov    eax,ebx
c001a525:	eb 41                	jmp    c001a568 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a527:	83 f9 02             	cmp    ecx,0x2
c001a52a:	75 45                	jne    c001a571 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a52c:	83 ec 0c             	sub    esp,0xc
c001a52f:	0f b6 d2             	movzx  edx,dl
c001a532:	89 f1                	mov    ecx,esi
c001a534:	0f b6 c0             	movzx  eax,al
c001a537:	0f b6 f1             	movzx  esi,cl
c001a53a:	89 e9                	mov    ecx,ebp
c001a53c:	56                   	push   esi
c001a53d:	0f b6 c9             	movzx  ecx,cl
c001a540:	51                   	push   ecx
c001a541:	52                   	push   edx
c001a542:	50                   	push   eax
c001a543:	57                   	push   edi
c001a544:	e8 a3 fc ff ff       	call   c001a1ec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a549:	89 c2                	mov    edx,eax
c001a54b:	ed                   	in     eax,dx
c001a54c:	83 c4 20             	add    esp,0x20
c001a54f:	0f b7 db             	movzx  ebx,bx
c001a552:	f6 c2 02             	test   dl,0x2
c001a555:	74 0c                	je     c001a563 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a557:	0f b7 c8             	movzx  ecx,ax
c001a55a:	89 d8                	mov    eax,ebx
c001a55c:	c1 e0 10             	shl    eax,0x10
c001a55f:	09 c8                	or     eax,ecx
c001a561:	eb 05                	jmp    c001a568 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a563:	66 31 c0             	xor    ax,ax
c001a566:	09 d8                	or     eax,ebx
c001a568:	ef                   	out    dx,eax
c001a569:	83 c4 0c             	add    esp,0xc
c001a56c:	5b                   	pop    ebx
c001a56d:	5e                   	pop    esi
c001a56e:	5f                   	pop    edi
c001a56f:	5d                   	pop    ebp
c001a570:	c3                   	ret    
c001a571:	c7 44 24 20 3f 1a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021a3f
c001a579:	83 c4 0c             	add    esp,0xc
c001a57c:	5b                   	pop    ebx
c001a57d:	5e                   	pop    esi
c001a57e:	5f                   	pop    edi
c001a57f:	5d                   	pop    ebp
c001a580:	e9 6a 63 ff ff       	jmp    c00108ef <KePanic(char const*)>
c001a585:	90                   	nop

c001a586 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a586:	55                   	push   ebp
c001a587:	57                   	push   edi
c001a588:	56                   	push   esi
c001a589:	53                   	push   ebx
c001a58a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a590:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a597:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a59e:	0f 85 bd 00 00 00    	jne    c001a661 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a5a4:	83 ec 0c             	sub    esp,0xc
c001a5a7:	68 14 01 00 00       	push   0x114
c001a5ac:	e8 fd d4 fe ff       	call   c0007aae <malloc>
c001a5b1:	83 c4 0c             	add    esp,0xc
c001a5b4:	89 c3                	mov    ebx,eax
c001a5b6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a5bc:	68 45 1a 02 c0       	push   0xc0021a45
c001a5c1:	50                   	push   eax
c001a5c2:	e8 7d 09 ff ff       	call   c000af44 <File::File(char const*, Process*)>
c001a5c7:	83 c4 10             	add    esp,0x10
c001a5ca:	85 db                	test   ebx,ebx
c001a5cc:	0f 84 67 02 00 00    	je     c001a839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a5d2:	56                   	push   esi
c001a5d3:	56                   	push   esi
c001a5d4:	6a 01                	push   0x1
c001a5d6:	53                   	push   ebx
c001a5d7:	e8 24 0a ff ff       	call   c000b000 <File::open(FileOpenMode)>
c001a5dc:	83 c4 10             	add    esp,0x10
c001a5df:	85 c0                	test   eax,eax
c001a5e1:	0f 85 52 02 00 00    	jne    c001a839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a5e7:	52                   	push   edx
c001a5e8:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a5ec:	50                   	push   eax
c001a5ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a5f1:	50                   	push   eax
c001a5f2:	53                   	push   ebx
c001a5f3:	e8 b4 0c ff ff       	call   c000b2ac <File::stat(unsigned long long*, bool*)>
c001a5f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5fc:	40                   	inc    eax
c001a5fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a600:	e8 a9 d4 fe ff       	call   c0007aae <malloc>
c001a605:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a609:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a60e:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a612:	59                   	pop    ecx
c001a613:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a615:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a619:	51                   	push   ecx
c001a61a:	50                   	push   eax
c001a61b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a61f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a623:	53                   	push   ebx
c001a624:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a627:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a62b:	83 c4 20             	add    esp,0x20
c001a62e:	89 c8                	mov    eax,ecx
c001a630:	99                   	cdq    
c001a631:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a635:	0f 85 fe 01 00 00    	jne    c001a839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a63b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a63f:	0f 85 f4 01 00 00    	jne    c001a839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a645:	83 ec 0c             	sub    esp,0xc
c001a648:	53                   	push   ebx
c001a649:	e8 10 0a ff ff       	call   c000b05e <File::close()>
c001a64e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a652:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a659:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a65e:	83 c4 10             	add    esp,0x10
c001a661:	a1 44 8b 02 c0       	mov    eax,ds:0xc0028b44
c001a666:	8b 1d 48 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b48
c001a66c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a670:	31 f6                	xor    esi,esi
c001a672:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a67a:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a681:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a686:	31 c9                	xor    ecx,ecx
c001a688:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a690:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a695:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a69d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6a1:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a6a9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a6ad:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a6b1:	0f 8e 82 01 00 00    	jle    c001a839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a6b7:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001a6ba:	d4 40                	aam    0x40
c001a6bc:	d5 39                	aad    0x39
c001a6be:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a6c2:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001a6c6:	d4 40                	aam    0x40
c001a6c8:	d5 39                	aad    0x39
c001a6ca:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a6ce:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001a6d2:	d4 40                	aam    0x40
c001a6d4:	d5 39                	aad    0x39
c001a6d6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a6da:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001a6de:	d4 40                	aam    0x40
c001a6e0:	d5 39                	aad    0x39
c001a6e2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a6e6:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001a6ea:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a6ee:	3c 56                	cmp    al,0x56
c001a6f0:	74 43                	je     c001a735 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001a6f2:	d4 40                	aam    0x40
c001a6f4:	d5 39                	aad    0x39
c001a6f6:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a6f9:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001a6fd:	0f b6 c9             	movzx  ecx,cl
c001a700:	c1 e1 04             	shl    ecx,0x4
c001a703:	d4 40                	aam    0x40
c001a705:	d5 39                	aad    0x39
c001a707:	83 e8 30             	sub    eax,0x30
c001a70a:	0f b6 c0             	movzx  eax,al
c001a70d:	09 c1                	or     ecx,eax
c001a70f:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001a713:	c1 e1 04             	shl    ecx,0x4
c001a716:	d4 40                	aam    0x40
c001a718:	d5 39                	aad    0x39
c001a71a:	83 e8 30             	sub    eax,0x30
c001a71d:	0f b6 c0             	movzx  eax,al
c001a720:	09 c1                	or     ecx,eax
c001a722:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001a726:	c1 e1 04             	shl    ecx,0x4
c001a729:	d4 40                	aam    0x40
c001a72b:	d5 39                	aad    0x39
c001a72d:	83 e8 30             	sub    eax,0x30
c001a730:	0f b6 c0             	movzx  eax,al
c001a733:	09 c1                	or     ecx,eax
c001a735:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001a739:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a73d:	3c 58                	cmp    al,0x58
c001a73f:	74 47                	je     c001a788 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001a741:	d4 40                	aam    0x40
c001a743:	d5 39                	aad    0x39
c001a745:	8d 50 d0             	lea    edx,[eax-0x30]
c001a748:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001a74c:	0f b6 d2             	movzx  edx,dl
c001a74f:	c1 e2 04             	shl    edx,0x4
c001a752:	d4 40                	aam    0x40
c001a754:	d5 39                	aad    0x39
c001a756:	83 e8 30             	sub    eax,0x30
c001a759:	0f b6 c0             	movzx  eax,al
c001a75c:	09 c2                	or     edx,eax
c001a75e:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001a762:	c1 e2 04             	shl    edx,0x4
c001a765:	d4 40                	aam    0x40
c001a767:	d5 39                	aad    0x39
c001a769:	83 e8 30             	sub    eax,0x30
c001a76c:	0f b6 c0             	movzx  eax,al
c001a76f:	09 c2                	or     edx,eax
c001a771:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001a775:	c1 e2 04             	shl    edx,0x4
c001a778:	d4 40                	aam    0x40
c001a77a:	d5 39                	aad    0x39
c001a77c:	83 e8 30             	sub    eax,0x30
c001a77f:	0f b6 c0             	movzx  eax,al
c001a782:	09 c2                	or     edx,eax
c001a784:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a788:	83 c6 10             	add    esi,0x10
c001a78b:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a78f:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001a793:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a797:	83 fa 0a             	cmp    edx,0xa
c001a79a:	74 0b                	je     c001a7a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001a79c:	47                   	inc    edi
c001a79d:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a7a1:	75 19                	jne    c001a7bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001a7a3:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001a7a7:	31 c0                	xor    eax,eax
c001a7a9:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001a7ae:	0f 94 c0             	sete   al
c001a7b1:	01 c6                	add    esi,eax
c001a7b3:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a7b8:	75 0b                	jne    c001a7c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001a7ba:	eb 14                	jmp    c001a7d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001a7bc:	46                   	inc    esi
c001a7bd:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001a7c0:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a7c3:	eb ca                	jmp    c001a78f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001a7c5:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001a7ca:	0f 85 dd fe ff ff    	jne    c001a6ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a7d0:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001a7d5:	74 10                	je     c001a7e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001a7d7:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a7dc:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a7e1:	0f 85 c6 fe ff ff    	jne    c001a6ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a7e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7eb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a7ef:	83 e8 30             	sub    eax,0x30
c001a7f2:	83 ef 30             	sub    edi,0x30
c001a7f5:	c1 e0 04             	shl    eax,0x4
c001a7f8:	09 f8                	or     eax,edi
c001a7fa:	0f b6 c0             	movzx  eax,al
c001a7fd:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a801:	0f 85 a6 fe ff ff    	jne    c001a6ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a80b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a80f:	83 e8 30             	sub    eax,0x30
c001a812:	83 ef 30             	sub    edi,0x30
c001a815:	c1 e0 04             	shl    eax,0x4
c001a818:	09 f8                	or     eax,edi
c001a81a:	0f b6 c0             	movzx  eax,al
c001a81d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a821:	0f 85 86 fe ff ff    	jne    c001a6ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a827:	50                   	push   eax
c001a828:	50                   	push   eax
c001a829:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a82d:	50                   	push   eax
c001a82e:	55                   	push   ebp
c001a82f:	e8 0c 5e fe ff       	call   c0000640 <strcpy>
c001a834:	83 c4 10             	add    esp,0x10
c001a837:	eb 06                	jmp    c001a83f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001a839:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a83d:	31 ed                	xor    ebp,ebp
c001a83f:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a845:	89 e8                	mov    eax,ebp
c001a847:	5b                   	pop    ebx
c001a848:	5e                   	pop    esi
c001a849:	5f                   	pop    edi
c001a84a:	5d                   	pop    ebp
c001a84b:	c3                   	ret    

c001a84c <PCI::checkBus(unsigned char)>:
c001a84c:	56                   	push   esi
c001a84d:	53                   	push   ebx
c001a84e:	31 db                	xor    ebx,ebx
c001a850:	51                   	push   ecx
c001a851:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a856:	52                   	push   edx
c001a857:	53                   	push   ebx
c001a858:	43                   	inc    ebx
c001a859:	56                   	push   esi
c001a85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a85e:	e8 03 03 00 00       	call   c001ab66 <PCI::checkDevice(unsigned char, unsigned char)>
c001a863:	83 c4 10             	add    esp,0x10
c001a866:	83 fb 20             	cmp    ebx,0x20
c001a869:	75 eb                	jne    c001a856 <PCI::checkBus(unsigned char)+0xa>
c001a86b:	58                   	pop    eax
c001a86c:	5b                   	pop    ebx
c001a86d:	5e                   	pop    esi
c001a86e:	c3                   	ret    
c001a86f:	90                   	nop

c001a870 <PCI::foundDevice(PCIDeviceInfo)>:
c001a870:	55                   	push   ebp
c001a871:	57                   	push   edi
c001a872:	56                   	push   esi
c001a873:	53                   	push   ebx
c001a874:	83 ec 1c             	sub    esp,0x1c
c001a877:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a87c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a880:	3d ff ff 00 00       	cmp    eax,0xffff
c001a885:	0f 84 57 01 00 00    	je     c001a9e2 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a88b:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a890:	66 3d 06 04          	cmp    ax,0x406
c001a894:	75 2c                	jne    c001a8c2 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a896:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a89b:	50                   	push   eax
c001a89c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a8a1:	50                   	push   eax
c001a8a2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a8a7:	50                   	push   eax
c001a8a8:	53                   	push   ebx
c001a8a9:	e8 64 fb ff ff       	call   c001a412 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a8ae:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a8b2:	0f b6 c0             	movzx  eax,al
c001a8b5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a8b9:	83 c4 2c             	add    esp,0x2c
c001a8bc:	5b                   	pop    ebx
c001a8bd:	5e                   	pop    esi
c001a8be:	5f                   	pop    edi
c001a8bf:	5d                   	pop    ebp
c001a8c0:	eb 8a                	jmp    c001a84c <PCI::checkBus(unsigned char)>
c001a8c2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a8c6:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a8cc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001a8d0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a8d4:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001a8d9:	85 d2                	test   edx,edx
c001a8db:	74 36                	je     c001a913 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001a8dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a8e0:	85 c9                	test   ecx,ecx
c001a8e2:	74 2b                	je     c001a90f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a8e4:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001a8ea:	31 ee                	xor    esi,ebp
c001a8ec:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001a8f2:	75 1b                	jne    c001a90f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a8f4:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001a8f8:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001a8fe:	75 0f                	jne    c001a90f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a900:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a907:	39 f9                	cmp    ecx,edi
c001a909:	0f 84 d3 00 00 00    	je     c001a9e2 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a90f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a911:	eb c6                	jmp    c001a8d9 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a913:	3d 01 06 00 00       	cmp    eax,0x601
c001a918:	75 19                	jne    c001a933 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001a91a:	83 ec 0c             	sub    esp,0xc
c001a91d:	68 64 01 00 00       	push   0x164
c001a922:	e8 87 d1 fe ff       	call   c0007aae <malloc>
c001a927:	89 c5                	mov    ebp,eax
c001a929:	89 04 24             	mov    DWORD PTR [esp],eax
c001a92c:	e8 a1 0e 00 00       	call   c001b7d2 <SATABus::SATABus()>
c001a931:	eb 1e                	jmp    c001a951 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001a933:	3d 01 01 00 00       	cmp    eax,0x101
c001a938:	75 62                	jne    c001a99c <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001a93a:	83 ec 0c             	sub    esp,0xc
c001a93d:	68 70 02 00 00       	push   0x270
c001a942:	e8 67 d1 fe ff       	call   c0007aae <malloc>
c001a947:	89 c5                	mov    ebp,eax
c001a949:	89 04 24             	mov    DWORD PTR [esp],eax
c001a94c:	e8 e5 02 00 00       	call   c001ac36 <IDE::IDE()>
c001a951:	5f                   	pop    edi
c001a952:	58                   	pop    eax
c001a953:	55                   	push   ebp
c001a954:	53                   	push   ebx
c001a955:	e8 9c 14 ff ff       	call   c000bdf6 <Device::addChild(Device*)>
c001a95a:	83 ec 1c             	sub    esp,0x1c
c001a95d:	b9 09 00 00 00       	mov    ecx,0x9
c001a962:	fc                   	cld    
c001a963:	89 e7                	mov    edi,esp
c001a965:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a969:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a96b:	55                   	push   ebp
c001a96c:	e8 cb 13 ff ff       	call   c000bd3c <Device::preOpenPCI(PCIDeviceInfo)>
c001a971:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a974:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a978:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a980:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a988:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a990:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a993:	83 c4 4c             	add    esp,0x4c
c001a996:	5b                   	pop    ebx
c001a997:	5e                   	pop    esi
c001a998:	5f                   	pop    edi
c001a999:	5d                   	pop    ebp
c001a99a:	ff e0                	jmp    eax
c001a99c:	83 ec 0c             	sub    esp,0xc
c001a99f:	68 58 01 00 00       	push   0x158
c001a9a4:	e8 05 d1 fe ff       	call   c0007aae <malloc>
c001a9a9:	89 c5                	mov    ebp,eax
c001a9ab:	58                   	pop    eax
c001a9ac:	5a                   	pop    edx
c001a9ad:	68 5e 1a 02 c0       	push   0xc0021a5e
c001a9b2:	55                   	push   ebp
c001a9b3:	e8 dc 16 ff ff       	call   c000c094 <DriverlessDevice::DriverlessDevice(char const*)>
c001a9b8:	59                   	pop    ecx
c001a9b9:	5e                   	pop    esi
c001a9ba:	55                   	push   ebp
c001a9bb:	53                   	push   ebx
c001a9bc:	e8 35 14 ff ff       	call   c000bdf6 <Device::addChild(Device*)>
c001a9c1:	83 c4 10             	add    esp,0x10
c001a9c4:	b9 09 00 00 00       	mov    ecx,0x9
c001a9c9:	fc                   	cld    
c001a9ca:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a9ce:	89 fe                	mov    esi,edi
c001a9d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a9d2:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001a9d6:	83 c4 1c             	add    esp,0x1c
c001a9d9:	5b                   	pop    ebx
c001a9da:	5e                   	pop    esi
c001a9db:	5f                   	pop    edi
c001a9dc:	5d                   	pop    ebp
c001a9dd:	e9 5a 13 ff ff       	jmp    c000bd3c <Device::preOpenPCI(PCIDeviceInfo)>
c001a9e2:	83 c4 1c             	add    esp,0x1c
c001a9e5:	5b                   	pop    ebx
c001a9e6:	5e                   	pop    esi
c001a9e7:	5f                   	pop    edi
c001a9e8:	5d                   	pop    ebp
c001a9e9:	c3                   	ret    

c001a9ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a9ea:	55                   	push   ebp
c001a9eb:	57                   	push   edi
c001a9ec:	56                   	push   esi
c001a9ed:	53                   	push   ebx
c001a9ee:	83 ec 68             	sub    esp,0x68
c001a9f1:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a9f5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa00:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa07:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001aa0c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa10:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa17:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001aa1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa20:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001aa25:	6a 0c                	push   0xc
c001aa27:	57                   	push   edi
c001aa28:	53                   	push   ebx
c001aa29:	56                   	push   esi
c001aa2a:	55                   	push   ebp
c001aa2b:	e8 32 f8 ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa30:	83 c4 20             	add    esp,0x20
c001aa33:	57                   	push   edi
c001aa34:	53                   	push   ebx
c001aa35:	56                   	push   esi
c001aa36:	55                   	push   ebp
c001aa37:	e8 1c f9 ff ff       	call   c001a358 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001aa3c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001aa41:	57                   	push   edi
c001aa42:	53                   	push   ebx
c001aa43:	56                   	push   esi
c001aa44:	55                   	push   ebp
c001aa45:	e8 a4 f9 ff ff       	call   c001a3ee <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001aa4a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001aa4e:	83 c4 14             	add    esp,0x14
c001aa51:	6a 3c                	push   0x3c
c001aa53:	57                   	push   edi
c001aa54:	53                   	push   ebx
c001aa55:	56                   	push   esi
c001aa56:	55                   	push   ebp
c001aa57:	e8 06 f8 ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa5c:	0f b6 c4             	movzx  eax,ah
c001aa5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa63:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001aa67:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001aa6b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001aa70:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001aa76:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001aa7c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa80:	83 c4 20             	add    esp,0x20
c001aa83:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001aa88:	74 30                	je     c001aaba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa8a:	31 c0                	xor    eax,eax
c001aa8c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aa90:	7e 28                	jle    c001aaba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa92:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aa9a:	39 cb                	cmp    ebx,ecx
c001aa9c:	75 19                	jne    c001aab7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa9e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aaa6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aaaa:	75 0b                	jne    c001aab7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aaac:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aab3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aab7:	40                   	inc    eax
c001aab8:	eb d2                	jmp    c001aa8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aaba:	31 d2                	xor    edx,edx
c001aabc:	83 ec 0c             	sub    esp,0xc
c001aabf:	57                   	push   edi
c001aac0:	53                   	push   ebx
c001aac1:	56                   	push   esi
c001aac2:	52                   	push   edx
c001aac3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aac7:	55                   	push   ebp
c001aac8:	e8 6d f9 ff ff       	call   c001a43a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aacd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aad1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aad5:	42                   	inc    edx
c001aad6:	83 c4 20             	add    esp,0x20
c001aad9:	83 fa 06             	cmp    edx,0x6
c001aadc:	75 de                	jne    c001aabc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aade:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aae6:	c1 e2 08             	shl    edx,0x8
c001aae9:	83 ec 0c             	sub    esp,0xc
c001aaec:	0f b6 c4             	movzx  eax,ah
c001aaef:	09 d0                	or     eax,edx
c001aaf1:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aaf6:	6a 02                	push   0x2
c001aaf8:	57                   	push   edi
c001aaf9:	53                   	push   ebx
c001aafa:	56                   	push   esi
c001aafb:	55                   	push   ebp
c001aafc:	e8 61 f7 ff ff       	call   c001a262 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ab01:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ab06:	83 c4 20             	add    esp,0x20
c001ab09:	57                   	push   edi
c001ab0a:	53                   	push   ebx
c001ab0b:	56                   	push   esi
c001ab0c:	55                   	push   ebp
c001ab0d:	e8 90 f8 ff ff       	call   c001a3a2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ab12:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ab16:	57                   	push   edi
c001ab17:	53                   	push   ebx
c001ab18:	56                   	push   esi
c001ab19:	55                   	push   ebp
c001ab1a:	e8 ed f7 ff ff       	call   c001a30c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab1f:	b9 09 00 00 00       	mov    ecx,0x9
c001ab24:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ab29:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ab2d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ab31:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ab35:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ab39:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ab3d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ab41:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ab45:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ab49:	83 ec 0c             	sub    esp,0xc
c001ab4c:	fc                   	cld    
c001ab4d:	89 e7                	mov    edi,esp
c001ab4f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ab53:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ab55:	55                   	push   ebp
c001ab56:	e8 15 fd ff ff       	call   c001a870 <PCI::foundDevice(PCIDeviceInfo)>
c001ab5b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ab61:	5b                   	pop    ebx
c001ab62:	5e                   	pop    esi
c001ab63:	5f                   	pop    edi
c001ab64:	5d                   	pop    ebp
c001ab65:	c3                   	ret    

c001ab66 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ab66:	55                   	push   ebp
c001ab67:	57                   	push   edi
c001ab68:	56                   	push   esi
c001ab69:	53                   	push   ebx
c001ab6a:	83 ec 0c             	sub    esp,0xc
c001ab6d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ab71:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ab76:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ab7b:	6a 00                	push   0x0
c001ab7d:	56                   	push   esi
c001ab7e:	57                   	push   edi
c001ab7f:	55                   	push   ebp
c001ab80:	e8 87 f7 ff ff       	call   c001a30c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab85:	6a 00                	push   0x0
c001ab87:	56                   	push   esi
c001ab88:	57                   	push   edi
c001ab89:	55                   	push   ebp
c001ab8a:	e8 5b fe ff ff       	call   c001a9ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab8f:	83 c4 20             	add    esp,0x20
c001ab92:	6a 00                	push   0x0
c001ab94:	56                   	push   esi
c001ab95:	57                   	push   edi
c001ab96:	55                   	push   ebp
c001ab97:	e8 94 f7 ff ff       	call   c001a330 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab9c:	83 c4 10             	add    esp,0x10
c001ab9f:	a8 80                	test   al,0x80
c001aba1:	74 2d                	je     c001abd0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001aba3:	bb 01 00 00 00       	mov    ebx,0x1
c001aba8:	53                   	push   ebx
c001aba9:	56                   	push   esi
c001abaa:	57                   	push   edi
c001abab:	55                   	push   ebp
c001abac:	e8 5b f7 ff ff       	call   c001a30c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abb1:	83 c4 10             	add    esp,0x10
c001abb4:	0f b7 c0             	movzx  eax,ax
c001abb7:	3d ff ff 00 00       	cmp    eax,0xffff
c001abbc:	74 0c                	je     c001abca <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001abbe:	53                   	push   ebx
c001abbf:	56                   	push   esi
c001abc0:	57                   	push   edi
c001abc1:	55                   	push   ebp
c001abc2:	e8 23 fe ff ff       	call   c001a9ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001abc7:	83 c4 10             	add    esp,0x10
c001abca:	43                   	inc    ebx
c001abcb:	83 fb 08             	cmp    ebx,0x8
c001abce:	75 d8                	jne    c001aba8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001abd0:	83 c4 0c             	add    esp,0xc
c001abd3:	5b                   	pop    ebx
c001abd4:	5e                   	pop    esi
c001abd5:	5f                   	pop    edi
c001abd6:	5d                   	pop    ebp
c001abd7:	c3                   	ret    

c001abd8 <PCI::detect()>:
c001abd8:	56                   	push   esi
c001abd9:	53                   	push   ebx
c001abda:	53                   	push   ebx
c001abdb:	31 db                	xor    ebx,ebx
c001abdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001abe1:	6a 00                	push   0x0
c001abe3:	6a 00                	push   0x0
c001abe5:	6a 00                	push   0x0
c001abe7:	56                   	push   esi
c001abe8:	e8 43 f7 ff ff       	call   c001a330 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001abed:	83 c4 10             	add    esp,0x10
c001abf0:	a8 80                	test   al,0x80
c001abf2:	75 21                	jne    c001ac15 <PCI::detect()+0x3d>
c001abf4:	51                   	push   ecx
c001abf5:	51                   	push   ecx
c001abf6:	6a 00                	push   0x0
c001abf8:	56                   	push   esi
c001abf9:	e8 4e fc ff ff       	call   c001a84c <PCI::checkBus(unsigned char)>
c001abfe:	83 c4 10             	add    esp,0x10
c001ac01:	eb 2a                	jmp    c001ac2d <PCI::detect()+0x55>
c001ac03:	52                   	push   edx
c001ac04:	52                   	push   edx
c001ac05:	53                   	push   ebx
c001ac06:	43                   	inc    ebx
c001ac07:	56                   	push   esi
c001ac08:	e8 3f fc ff ff       	call   c001a84c <PCI::checkBus(unsigned char)>
c001ac0d:	83 c4 10             	add    esp,0x10
c001ac10:	83 fb 08             	cmp    ebx,0x8
c001ac13:	74 18                	je     c001ac2d <PCI::detect()+0x55>
c001ac15:	53                   	push   ebx
c001ac16:	6a 00                	push   0x0
c001ac18:	6a 00                	push   0x0
c001ac1a:	56                   	push   esi
c001ac1b:	e8 ec f6 ff ff       	call   c001a30c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ac20:	83 c4 10             	add    esp,0x10
c001ac23:	0f b7 c0             	movzx  eax,ax
c001ac26:	3d ff ff 00 00       	cmp    eax,0xffff
c001ac2b:	74 d6                	je     c001ac03 <PCI::detect()+0x2b>
c001ac2d:	58                   	pop    eax
c001ac2e:	5b                   	pop    ebx
c001ac2f:	5e                   	pop    esi
c001ac30:	c3                   	ret    
c001ac31:	90                   	nop

c001ac32 <IDE::close(int, int, void*)>:
c001ac32:	83 c8 ff             	or     eax,0xffffffff
c001ac35:	c3                   	ret    

c001ac36 <IDE::IDE()>:
c001ac36:	83 ec 0c             	sub    esp,0xc
c001ac39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac3d:	83 ec 08             	sub    esp,0x8
c001ac40:	68 a4 1a 02 c0       	push   0xc0021aa4
c001ac45:	50                   	push   eax
c001ac46:	e8 ed 14 ff ff       	call   c000c138 <HardDiskController::HardDiskController(char const*)>
c001ac4b:	83 c4 10             	add    esp,0x10
c001ac4e:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c001ac53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac57:	89 10                	mov    DWORD PTR [eax],edx
c001ac59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac5d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ac64:	90                   	nop
c001ac65:	83 c4 0c             	add    esp,0xc
c001ac68:	c3                   	ret    
c001ac69:	90                   	nop

c001ac6a <IDE::prepareInterrupt(unsigned char)>:
c001ac6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac6f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac73:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ac7b:	c3                   	ret    

c001ac7c <selectDrive(unsigned char, unsigned char)>:
c001ac7c:	c3                   	ret    
c001ac7d:	90                   	nop

c001ac7e <IDE::getBase(unsigned char)>:
c001ac7e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ac83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac87:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ac8f:	c3                   	ret    

c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ac90:	55                   	push   ebp
c001ac91:	57                   	push   edi
c001ac92:	56                   	push   esi
c001ac93:	53                   	push   ebx
c001ac94:	83 ec 1c             	sub    esp,0x1c
c001ac97:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac9f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001aca2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aca6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001acaa:	80 f9 03             	cmp    cl,0x3
c001acad:	77 4f                	ja     c001acfe <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001acaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acb3:	0f b6 fa             	movzx  edi,dl
c001acb6:	0f b6 db             	movzx  ebx,bl
c001acb9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001acbc:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001acc1:	80 ca 80             	or     dl,0x80
c001acc4:	52                   	push   edx
c001acc5:	6a 0c                	push   0xc
c001acc7:	57                   	push   edi
c001acc8:	56                   	push   esi
c001acc9:	e8 c2 ff ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acce:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001acd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acd7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001acdb:	ee                   	out    dx,al
c001acdc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ace1:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ace5:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ace9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aced:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001acf5:	83 c4 2c             	add    esp,0x2c
c001acf8:	5b                   	pop    ebx
c001acf9:	5e                   	pop    esi
c001acfa:	5f                   	pop    edi
c001acfb:	5d                   	pop    ebp
c001acfc:	eb 92                	jmp    c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acfe:	0f b6 cb             	movzx  ecx,bl
c001ad01:	83 f9 07             	cmp    ecx,0x7
c001ad04:	77 12                	ja     c001ad18 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ad06:	0f b6 d2             	movzx  edx,dl
c001ad09:	0f b6 db             	movzx  ebx,bl
c001ad0c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ad14:	01 da                	add    edx,ebx
c001ad16:	eb 2f                	jmp    c001ad47 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ad18:	83 f9 0d             	cmp    ecx,0xd
c001ad1b:	77 13                	ja     c001ad30 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ad1d:	0f b6 d2             	movzx  edx,dl
c001ad20:	0f b6 db             	movzx  ebx,bl
c001ad23:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ad2a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ad2e:	eb 17                	jmp    c001ad47 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ad30:	83 f9 15             	cmp    ecx,0x15
c001ad33:	77 13                	ja     c001ad48 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ad35:	0f b6 d2             	movzx  edx,dl
c001ad38:	0f b6 db             	movzx  ebx,bl
c001ad3b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ad43:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ad47:	ee                   	out    dx,al
c001ad48:	83 c4 1c             	add    esp,0x1c
c001ad4b:	5b                   	pop    ebx
c001ad4c:	5e                   	pop    esi
c001ad4d:	5f                   	pop    edi
c001ad4e:	5d                   	pop    ebp
c001ad4f:	c3                   	ret    

c001ad50 <IDE::read(unsigned char, unsigned char)>:
c001ad50:	55                   	push   ebp
c001ad51:	57                   	push   edi
c001ad52:	56                   	push   esi
c001ad53:	53                   	push   ebx
c001ad54:	83 ec 1c             	sub    esp,0x1c
c001ad57:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ad5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ad5f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ad62:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ad66:	3c 03                	cmp    al,0x3
c001ad68:	77 40                	ja     c001adaa <IDE::read(unsigned char, unsigned char)+0x5a>
c001ad6a:	0f b6 f9             	movzx  edi,cl
c001ad6d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ad70:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ad75:	0c 80                	or     al,0x80
c001ad77:	50                   	push   eax
c001ad78:	6a 0c                	push   0xc
c001ad7a:	57                   	push   edi
c001ad7b:	56                   	push   esi
c001ad7c:	e8 0f ff ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad81:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ad86:	0f b6 d3             	movzx  edx,bl
c001ad89:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ad8d:	ec                   	in     al,dx
c001ad8e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ad92:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ad97:	52                   	push   edx
c001ad98:	6a 0c                	push   0xc
c001ad9a:	57                   	push   edi
c001ad9b:	56                   	push   esi
c001ad9c:	e8 ef fe ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ada1:	83 c4 20             	add    esp,0x20
c001ada4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ada8:	eb 4c                	jmp    c001adf6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001adaa:	0f b6 d3             	movzx  edx,bl
c001adad:	83 fa 07             	cmp    edx,0x7
c001adb0:	77 12                	ja     c001adc4 <IDE::read(unsigned char, unsigned char)+0x74>
c001adb2:	0f b6 c9             	movzx  ecx,cl
c001adb5:	0f b6 d3             	movzx  edx,bl
c001adb8:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001adc0:	01 c2                	add    edx,eax
c001adc2:	eb 31                	jmp    c001adf5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001adc4:	83 fa 0d             	cmp    edx,0xd
c001adc7:	77 13                	ja     c001addc <IDE::read(unsigned char, unsigned char)+0x8c>
c001adc9:	0f b6 c9             	movzx  ecx,cl
c001adcc:	0f b6 d3             	movzx  edx,bl
c001adcf:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001add6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001adda:	eb 19                	jmp    c001adf5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001addc:	31 c0                	xor    eax,eax
c001adde:	83 fa 15             	cmp    edx,0x15
c001ade1:	77 13                	ja     c001adf6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ade3:	0f b6 c9             	movzx  ecx,cl
c001ade6:	0f b6 d3             	movzx  edx,bl
c001ade9:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001adf1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001adf5:	ec                   	in     al,dx
c001adf6:	83 c4 1c             	add    esp,0x1c
c001adf9:	5b                   	pop    ebx
c001adfa:	5e                   	pop    esi
c001adfb:	5f                   	pop    edi
c001adfc:	5d                   	pop    ebp
c001adfd:	c3                   	ret    

c001adfe <IDE::waitInterrupt(unsigned char)>:
c001adfe:	55                   	push   ebp
c001adff:	57                   	push   edi
c001ae00:	56                   	push   esi
c001ae01:	53                   	push   ebx
c001ae02:	31 db                	xor    ebx,ebx
c001ae04:	83 ec 0c             	sub    esp,0xc
c001ae07:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae0b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ae10:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ae18:	89 e8                	mov    eax,ebp
c001ae1a:	84 c0                	test   al,al
c001ae1c:	75 30                	jne    c001ae4e <IDE::waitInterrupt(unsigned char)+0x50>
c001ae1e:	50                   	push   eax
c001ae1f:	6a 0c                	push   0xc
c001ae21:	56                   	push   esi
c001ae22:	57                   	push   edi
c001ae23:	e8 28 ff ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001ae28:	83 c4 10             	add    esp,0x10
c001ae2b:	a8 01                	test   al,0x1
c001ae2d:	75 27                	jne    c001ae56 <IDE::waitInterrupt(unsigned char)+0x58>
c001ae2f:	f6 c3 04             	test   bl,0x4
c001ae32:	75 12                	jne    c001ae46 <IDE::waitInterrupt(unsigned char)+0x48>
c001ae34:	83 fb 32             	cmp    ebx,0x32
c001ae37:	7e 0d                	jle    c001ae46 <IDE::waitInterrupt(unsigned char)+0x48>
c001ae39:	83 ec 0c             	sub    esp,0xc
c001ae3c:	6a 64                	push   0x64
c001ae3e:	e8 91 a5 ff ff       	call   c00153d4 <milliTenthSleep(unsigned int)>
c001ae43:	83 c4 10             	add    esp,0x10
c001ae46:	83 fb 3c             	cmp    ebx,0x3c
c001ae49:	74 0b                	je     c001ae56 <IDE::waitInterrupt(unsigned char)+0x58>
c001ae4b:	43                   	inc    ebx
c001ae4c:	eb c2                	jmp    c001ae10 <IDE::waitInterrupt(unsigned char)+0x12>
c001ae4e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ae56:	83 c4 0c             	add    esp,0xc
c001ae59:	89 e8                	mov    eax,ebp
c001ae5b:	5b                   	pop    ebx
c001ae5c:	5e                   	pop    esi
c001ae5d:	5f                   	pop    edi
c001ae5e:	5d                   	pop    ebp
c001ae5f:	c3                   	ret    

c001ae60 <ideChannel0IRQHandler(regs*, void*)>:
c001ae60:	83 ec 10             	sub    esp,0x10
c001ae63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae67:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ae6e:	6a 07                	push   0x7
c001ae70:	6a 00                	push   0x0
c001ae72:	50                   	push   eax
c001ae73:	e8 d8 fe ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001ae78:	83 c4 1c             	add    esp,0x1c
c001ae7b:	c3                   	ret    

c001ae7c <ideChannel1IRQHandler(regs*, void*)>:
c001ae7c:	83 ec 10             	sub    esp,0x10
c001ae7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae83:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ae8a:	6a 07                	push   0x7
c001ae8c:	6a 01                	push   0x1
c001ae8e:	50                   	push   eax
c001ae8f:	e8 bc fe ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001ae94:	83 c4 1c             	add    esp,0x1c
c001ae97:	c3                   	ret    

c001ae98 <IDE::enableIRQs(unsigned char, bool)>:
c001ae98:	57                   	push   edi
c001ae99:	b8 02 00 00 00       	mov    eax,0x2
c001ae9e:	56                   	push   esi
c001ae9f:	53                   	push   ebx
c001aea0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aea4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001aea8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001aead:	74 02                	je     c001aeb1 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001aeaf:	31 c0                	xor    eax,eax
c001aeb1:	0f b6 db             	movzx  ebx,bl
c001aeb4:	bf 04 00 00 00       	mov    edi,0x4
c001aeb9:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001aec0:	50                   	push   eax
c001aec1:	6a 0c                	push   0xc
c001aec3:	53                   	push   ebx
c001aec4:	56                   	push   esi
c001aec5:	e8 c6 fd ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aeca:	83 c4 10             	add    esp,0x10
c001aecd:	50                   	push   eax
c001aece:	6a 0c                	push   0xc
c001aed0:	53                   	push   ebx
c001aed1:	56                   	push   esi
c001aed2:	e8 79 fe ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001aed7:	83 c4 10             	add    esp,0x10
c001aeda:	4f                   	dec    edi
c001aedb:	75 f0                	jne    c001aecd <IDE::enableIRQs(unsigned char, bool)+0x35>
c001aedd:	5b                   	pop    ebx
c001aede:	5e                   	pop    esi
c001aedf:	5f                   	pop    edi
c001aee0:	c3                   	ret    
c001aee1:	90                   	nop

c001aee2 <IDE::open(int, int, void*)>:
c001aee2:	55                   	push   ebp
c001aee3:	57                   	push   edi
c001aee4:	56                   	push   esi
c001aee5:	53                   	push   ebx
c001aee6:	83 ec 1c             	sub    esp,0x1c
c001aee9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aeed:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001aef6:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001aeff:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001af06:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001af0d:	0f 85 de 02 00 00    	jne    c001b1f1 <IDE::open(int, int, void*)+0x30f>
c001af13:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001af19:	88 04 24             	mov    BYTE PTR [esp],al
c001af1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af1f:	83 e0 7f             	and    eax,0x7f
c001af22:	83 f8 05             	cmp    eax,0x5
c001af25:	74 05                	je     c001af2c <IDE::open(int, int, void*)+0x4a>
c001af27:	83 f8 0f             	cmp    eax,0xf
c001af2a:	75 32                	jne    c001af5e <IDE::open(int, int, void*)+0x7c>
c001af2c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001af32:	83 e0 fc             	and    eax,0xfffffffc
c001af35:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001af3c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001af42:	83 e0 fc             	and    eax,0xfffffffc
c001af45:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001af4c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001af52:	83 e0 fc             	and    eax,0xfffffffc
c001af55:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001af5c:	eb 14                	jmp    c001af72 <IDE::open(int, int, void*)+0x90>
c001af5e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001af68:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001af72:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001af79:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001af80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af84:	89 c6                	mov    esi,eax
c001af86:	bf f8 0c 00 00       	mov    edi,0xcf8
c001af8b:	c1 e6 10             	shl    esi,0x10
c001af8e:	89 e8                	mov    eax,ebp
c001af90:	89 fa                	mov    edx,edi
c001af92:	c1 e0 0b             	shl    eax,0xb
c001af95:	09 f0                	or     eax,esi
c001af97:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001af9e:	c1 e6 08             	shl    esi,0x8
c001afa1:	09 c6                	or     esi,eax
c001afa3:	89 f0                	mov    eax,esi
c001afa5:	0d 08 00 00 80       	or     eax,0x80000008
c001afaa:	ef                   	out    dx,eax
c001afab:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001afb0:	89 ca                	mov    edx,ecx
c001afb2:	ed                   	in     eax,dx
c001afb3:	c1 e8 10             	shr    eax,0x10
c001afb6:	3d ff ff 00 00       	cmp    eax,0xffff
c001afbb:	0f 84 f9 00 00 00    	je     c001b0ba <IDE::open(int, int, void*)+0x1d8>
c001afc1:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001afc7:	89 fa                	mov    edx,edi
c001afc9:	89 f0                	mov    eax,esi
c001afcb:	ef                   	out    dx,eax
c001afcc:	b0 fe                	mov    al,0xfe
c001afce:	89 ca                	mov    edx,ecx
c001afd0:	ee                   	out    dx,al
c001afd1:	89 f0                	mov    eax,esi
c001afd3:	89 fa                	mov    edx,edi
c001afd5:	ef                   	out    dx,eax
c001afd6:	89 ca                	mov    edx,ecx
c001afd8:	ed                   	in     eax,dx
c001afd9:	3c fe                	cmp    al,0xfe
c001afdb:	0f 85 a9 00 00 00    	jne    c001b08a <IDE::open(int, int, void*)+0x1a8>
c001afe1:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001afe7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001afee:	74 33                	je     c001b023 <IDE::open(int, int, void*)+0x141>
c001aff0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001aff6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001affa:	40                   	inc    eax
c001affb:	83 ec 0c             	sub    esp,0xc
c001affe:	0f b6 c0             	movzx  eax,al
c001b001:	50                   	push   eax
c001b002:	55                   	push   ebp
c001b003:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b007:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b00d:	51                   	push   ecx
c001b00e:	e8 55 3d ff ff       	call   c000ed68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b013:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b018:	83 c4 1c             	add    esp,0x1c
c001b01b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b021:	eb 0a                	jmp    c001b02d <IDE::open(int, int, void*)+0x14b>
c001b023:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b02d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b034:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b03b:	c1 e1 10             	shl    ecx,0x10
c001b03e:	c1 e0 08             	shl    eax,0x8
c001b041:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b046:	09 c1                	or     ecx,eax
c001b048:	89 fa                	mov    edx,edi
c001b04a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b051:	c1 e0 0b             	shl    eax,0xb
c001b054:	09 c1                	or     ecx,eax
c001b056:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b05c:	89 c8                	mov    eax,ecx
c001b05e:	ef                   	out    dx,eax
c001b05f:	be fc 0c 00 00       	mov    esi,0xcfc
c001b064:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b06a:	89 f2                	mov    edx,esi
c001b06c:	ee                   	out    dx,al
c001b06d:	89 c8                	mov    eax,ecx
c001b06f:	89 fa                	mov    edx,edi
c001b071:	ef                   	out    dx,eax
c001b072:	89 f2                	mov    edx,esi
c001b074:	ed                   	in     eax,dx
c001b075:	0f b6 c0             	movzx  eax,al
c001b078:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b07e:	74 4a                	je     c001b0ca <IDE::open(int, int, void*)+0x1e8>
c001b080:	83 ec 0c             	sub    esp,0xc
c001b083:	68 bc 1a 02 c0       	push   0xc0021abc
c001b088:	eb 38                	jmp    c001b0c2 <IDE::open(int, int, void*)+0x1e0>
c001b08a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b093:	75 1b                	jne    c001b0b0 <IDE::open(int, int, void*)+0x1ce>
c001b095:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b099:	3d 80 00 00 00       	cmp    eax,0x80
c001b09e:	74 07                	je     c001b0a7 <IDE::open(int, int, void*)+0x1c5>
c001b0a0:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b0a5:	75 09                	jne    c001b0b0 <IDE::open(int, int, void*)+0x1ce>
c001b0a7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b0ae:	eb 1a                	jmp    c001b0ca <IDE::open(int, int, void*)+0x1e8>
c001b0b0:	83 ec 0c             	sub    esp,0xc
c001b0b3:	68 c4 1a 02 c0       	push   0xc0021ac4
c001b0b8:	eb 08                	jmp    c001b0c2 <IDE::open(int, int, void*)+0x1e0>
c001b0ba:	83 ec 0c             	sub    esp,0xc
c001b0bd:	68 f5 1a 02 c0       	push   0xc0021af5
c001b0c2:	e8 28 58 ff ff       	call   c00108ef <KePanic(char const*)>
c001b0c7:	83 c4 10             	add    esp,0x10
c001b0ca:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b0d1:	74 1a                	je     c001b0ed <IDE::open(int, int, void*)+0x20b>
c001b0d3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b0d9:	83 e0 fc             	and    eax,0xfffffffc
c001b0dc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b0e3:	83 c0 08             	add    eax,0x8
c001b0e6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b0ed:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b0f3:	89 c2                	mov    edx,eax
c001b0f5:	83 e2 0f             	and    edx,0xf
c001b0f8:	83 fa 08             	cmp    edx,0x8
c001b0fb:	75 0a                	jne    c001b107 <IDE::open(int, int, void*)+0x225>
c001b0fd:	83 e8 02             	sub    eax,0x2
c001b100:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b107:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b10d:	89 c2                	mov    edx,eax
c001b10f:	83 e2 0f             	and    edx,0xf
c001b112:	83 fa 08             	cmp    edx,0x8
c001b115:	75 0a                	jne    c001b121 <IDE::open(int, int, void*)+0x23f>
c001b117:	83 e8 02             	sub    eax,0x2
c001b11a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b121:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b128:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b12f:	89 d0                	mov    eax,edx
c001b131:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b134:	8d 7a 01             	lea    edi,[edx+0x1]
c001b137:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b13b:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b13f:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b143:	83 e1 3f             	and    ecx,0x3f
c001b146:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b14a:	89 f9                	mov    ecx,edi
c001b14c:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b153:	0f b6 c9             	movzx  ecx,cl
c001b156:	8d 78 02             	lea    edi,[eax+0x2]
c001b159:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b15c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b160:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b164:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b168:	83 e2 3f             	and    edx,0x3f
c001b16b:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b16f:	89 f9                	mov    ecx,edi
c001b171:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b177:	0f b6 d1             	movzx  edx,cl
c001b17a:	8d 78 03             	lea    edi,[eax+0x3]
c001b17d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b180:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b184:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b188:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b18c:	83 e1 3f             	and    ecx,0x3f
c001b18f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b193:	89 f9                	mov    ecx,edi
c001b195:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b19b:	0f b6 c9             	movzx  ecx,cl
c001b19e:	8d 78 04             	lea    edi,[eax+0x4]
c001b1a1:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b1a4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b1a8:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b1ac:	89 fa                	mov    edx,edi
c001b1ae:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b1b4:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b1b8:	83 e2 3f             	and    edx,0x3f
c001b1bb:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b1bf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b1c6:	66 85 f6             	test   si,si
c001b1c9:	74 65                	je     c001b230 <IDE::open(int, int, void*)+0x34e>
c001b1cb:	89 f9                	mov    ecx,edi
c001b1cd:	83 c0 05             	add    eax,0x5
c001b1d0:	0f b6 d1             	movzx  edx,cl
c001b1d3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b1d6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b1da:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b1de:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b1e4:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b1e8:	83 e0 3f             	and    eax,0x3f
c001b1eb:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b1ef:	eb 3f                	jmp    c001b230 <IDE::open(int, int, void*)+0x34e>
c001b1f1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b1f7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b1fe:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b205:	05 06 02 00 00       	add    eax,0x206
c001b20a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b211:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b218:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b21f:	05 06 02 00 00       	add    eax,0x206
c001b224:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b22b:	e9 bd fe ff ff       	jmp    c001b0ed <IDE::open(int, int, void*)+0x20b>
c001b230:	50                   	push   eax
c001b231:	50                   	push   eax
c001b232:	6a 00                	push   0x0
c001b234:	53                   	push   ebx
c001b235:	e8 30 fa ff ff       	call   c001ac6a <IDE::prepareInterrupt(unsigned char)>
c001b23a:	5a                   	pop    edx
c001b23b:	59                   	pop    ecx
c001b23c:	6a 01                	push   0x1
c001b23e:	53                   	push   ebx
c001b23f:	e8 26 fa ff ff       	call   c001ac6a <IDE::prepareInterrupt(unsigned char)>
c001b244:	83 c4 0c             	add    esp,0xc
c001b247:	6a 00                	push   0x0
c001b249:	6a 00                	push   0x0
c001b24b:	53                   	push   ebx
c001b24c:	e8 47 fc ff ff       	call   c001ae98 <IDE::enableIRQs(unsigned char, bool)>
c001b251:	83 c4 0c             	add    esp,0xc
c001b254:	6a 00                	push   0x0
c001b256:	6a 01                	push   0x1
c001b258:	53                   	push   ebx
c001b259:	e8 3a fc ff ff       	call   c001ae98 <IDE::enableIRQs(unsigned char, bool)>
c001b25e:	83 c4 10             	add    esp,0x10
c001b261:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b268:	74 34                	je     c001b29e <IDE::open(int, int, void*)+0x3bc>
c001b26a:	83 ec 0c             	sub    esp,0xc
c001b26d:	53                   	push   ebx
c001b26e:	6a 01                	push   0x1
c001b270:	68 60 ae 01 c0       	push   0xc001ae60
c001b275:	6a 0e                	push   0xe
c001b277:	53                   	push   ebx
c001b278:	e8 25 0b ff ff       	call   c000bda2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b27d:	83 c4 14             	add    esp,0x14
c001b280:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b286:	53                   	push   ebx
c001b287:	6a 01                	push   0x1
c001b289:	68 7c ae 01 c0       	push   0xc001ae7c
c001b28e:	6a 0f                	push   0xf
c001b290:	53                   	push   ebx
c001b291:	e8 0c 0b ff ff       	call   c000bda2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b296:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b29c:	eb 38                	jmp    c001b2d6 <IDE::open(int, int, void*)+0x3f4>
c001b29e:	83 ec 0c             	sub    esp,0xc
c001b2a1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b2ab:	53                   	push   ebx
c001b2ac:	6a 00                	push   0x0
c001b2ae:	68 60 ae 01 c0       	push   0xc001ae60
c001b2b3:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b2b9:	53                   	push   ebx
c001b2ba:	e8 e3 0a ff ff       	call   c000bda2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2bf:	83 c4 14             	add    esp,0x14
c001b2c2:	53                   	push   ebx
c001b2c3:	6a 00                	push   0x0
c001b2c5:	68 7c ae 01 c0       	push   0xc001ae7c
c001b2ca:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b2d0:	53                   	push   ebx
c001b2d1:	e8 cc 0a ff ff       	call   c000bda2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2d8:	83 c4 20             	add    esp,0x20
c001b2db:	83 ec 0c             	sub    esp,0xc
c001b2de:	53                   	push   ebx
c001b2df:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b2e2:	83 c4 0c             	add    esp,0xc
c001b2e5:	6a 07                	push   0x7
c001b2e7:	6a 00                	push   0x0
c001b2e9:	53                   	push   ebx
c001b2ea:	e8 61 fa ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b2ef:	83 c4 0c             	add    esp,0xc
c001b2f2:	6a 07                	push   0x7
c001b2f4:	6a 01                	push   0x1
c001b2f6:	53                   	push   ebx
c001b2f7:	e8 54 fa ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b2fc:	83 c4 0c             	add    esp,0xc
c001b2ff:	6a 01                	push   0x1
c001b301:	6a 00                	push   0x0
c001b303:	53                   	push   ebx
c001b304:	e8 8f fb ff ff       	call   c001ae98 <IDE::enableIRQs(unsigned char, bool)>
c001b309:	83 c4 0c             	add    esp,0xc
c001b30c:	6a 01                	push   0x1
c001b30e:	6a 01                	push   0x1
c001b310:	53                   	push   ebx
c001b311:	e8 82 fb ff ff       	call   c001ae98 <IDE::enableIRQs(unsigned char, bool)>
c001b316:	83 c4 2c             	add    esp,0x2c
c001b319:	31 c0                	xor    eax,eax
c001b31b:	5b                   	pop    ebx
c001b31c:	5e                   	pop    esi
c001b31d:	5f                   	pop    edi
c001b31e:	5d                   	pop    ebp
c001b31f:	c3                   	ret    

c001b320 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b320:	55                   	push   ebp
c001b321:	57                   	push   edi
c001b322:	56                   	push   esi
c001b323:	53                   	push   ebx
c001b324:	83 ec 1c             	sub    esp,0x1c
c001b327:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b32b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b32f:	8d 42 f8             	lea    eax,[edx-0x8]
c001b332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b336:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b33a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b33e:	3c 03                	cmp    al,0x3
c001b340:	77 5a                	ja     c001b39c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b342:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b346:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b34a:	0f b6 db             	movzx  ebx,bl
c001b34d:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b350:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b355:	0c 80                	or     al,0x80
c001b357:	50                   	push   eax
c001b358:	6a 0c                	push   0xc
c001b35a:	53                   	push   ebx
c001b35b:	56                   	push   esi
c001b35c:	e8 2f f9 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b361:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b366:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b36a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b36e:	0f b6 d2             	movzx  edx,dl
c001b371:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b375:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b377:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b37c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b380:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b384:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b388:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b390:	83 c4 2c             	add    esp,0x2c
c001b393:	5b                   	pop    ebx
c001b394:	5e                   	pop    esi
c001b395:	5f                   	pop    edi
c001b396:	5d                   	pop    ebp
c001b397:	e9 f4 f8 ff ff       	jmp    c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b39c:	0f b6 c2             	movzx  eax,dl
c001b39f:	83 f8 07             	cmp    eax,0x7
c001b3a2:	77 12                	ja     c001b3b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b3a4:	0f b6 c2             	movzx  eax,dl
c001b3a7:	0f b6 db             	movzx  ebx,bl
c001b3aa:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b3b2:	01 c2                	add    edx,eax
c001b3b4:	eb 2f                	jmp    c001b3e5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b3b6:	83 f8 0d             	cmp    eax,0xd
c001b3b9:	77 13                	ja     c001b3ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b3bb:	0f b6 db             	movzx  ebx,bl
c001b3be:	0f b6 d2             	movzx  edx,dl
c001b3c1:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b3c8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b3cc:	eb 17                	jmp    c001b3e5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b3ce:	83 f8 15             	cmp    eax,0x15
c001b3d1:	77 14                	ja     c001b3e7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b3d3:	0f b6 db             	movzx  ebx,bl
c001b3d6:	0f b6 d2             	movzx  edx,dl
c001b3d9:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b3e1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b3e5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b3e7:	83 c4 1c             	add    esp,0x1c
c001b3ea:	5b                   	pop    ebx
c001b3eb:	5e                   	pop    esi
c001b3ec:	5f                   	pop    edi
c001b3ed:	5d                   	pop    ebp
c001b3ee:	c3                   	ret    
c001b3ef:	90                   	nop

c001b3f0 <IDE::detect()>:
c001b3f0:	55                   	push   ebp
c001b3f1:	57                   	push   edi
c001b3f2:	56                   	push   esi
c001b3f3:	53                   	push   ebx
c001b3f4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b3fa:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b401:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b408:	0f 85 a4 02 00 00    	jne    c001b6b2 <IDE::detect()+0x2c2>
c001b40e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b415:	31 f6                	xor    esi,esi
c001b417:	31 ed                	xor    ebp,ebp
c001b419:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b421:	89 e8                	mov    eax,ebp
c001b423:	c1 e0 06             	shl    eax,0x6
c001b426:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b42e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b432:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b43a:	c1 e0 04             	shl    eax,0x4
c001b43d:	83 c8 a0             	or     eax,0xffffffa0
c001b440:	0f b6 c0             	movzx  eax,al
c001b443:	50                   	push   eax
c001b444:	6a 06                	push   0x6
c001b446:	56                   	push   esi
c001b447:	53                   	push   ebx
c001b448:	e8 43 f8 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b44d:	83 c4 0c             	add    esp,0xc
c001b450:	6a 0c                	push   0xc
c001b452:	56                   	push   esi
c001b453:	53                   	push   ebx
c001b454:	e8 f7 f8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b459:	83 c4 0c             	add    esp,0xc
c001b45c:	6a 0c                	push   0xc
c001b45e:	56                   	push   esi
c001b45f:	53                   	push   ebx
c001b460:	e8 eb f8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b465:	83 c4 0c             	add    esp,0xc
c001b468:	6a 0c                	push   0xc
c001b46a:	56                   	push   esi
c001b46b:	53                   	push   ebx
c001b46c:	e8 df f8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b471:	83 c4 0c             	add    esp,0xc
c001b474:	6a 0c                	push   0xc
c001b476:	56                   	push   esi
c001b477:	53                   	push   ebx
c001b478:	e8 d3 f8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b47d:	68 ec 00 00 00       	push   0xec
c001b482:	6a 07                	push   0x7
c001b484:	56                   	push   esi
c001b485:	53                   	push   ebx
c001b486:	e8 05 f8 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b48b:	83 c4 1c             	add    esp,0x1c
c001b48e:	6a 0c                	push   0xc
c001b490:	56                   	push   esi
c001b491:	53                   	push   ebx
c001b492:	e8 b9 f8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b497:	83 c4 0c             	add    esp,0xc
c001b49a:	6a 0c                	push   0xc
c001b49c:	56                   	push   esi
c001b49d:	53                   	push   ebx
c001b49e:	e8 ad f8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b4a3:	83 c4 0c             	add    esp,0xc
c001b4a6:	6a 0c                	push   0xc
c001b4a8:	56                   	push   esi
c001b4a9:	53                   	push   ebx
c001b4aa:	e8 a1 f8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b4af:	83 c4 0c             	add    esp,0xc
c001b4b2:	6a 0c                	push   0xc
c001b4b4:	56                   	push   esi
c001b4b5:	53                   	push   ebx
c001b4b6:	e8 95 f8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b4bb:	83 c4 0c             	add    esp,0xc
c001b4be:	6a 0c                	push   0xc
c001b4c0:	56                   	push   esi
c001b4c1:	53                   	push   ebx
c001b4c2:	e8 89 f8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b4c7:	83 c4 10             	add    esp,0x10
c001b4ca:	84 c0                	test   al,al
c001b4cc:	0f 84 60 01 00 00    	je     c001b632 <IDE::detect()+0x242>
c001b4d2:	31 ff                	xor    edi,edi
c001b4d4:	50                   	push   eax
c001b4d5:	6a 0c                	push   0xc
c001b4d7:	56                   	push   esi
c001b4d8:	53                   	push   ebx
c001b4d9:	e8 72 f8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b4de:	83 c4 10             	add    esp,0x10
c001b4e1:	a8 01                	test   al,0x1
c001b4e3:	0f 85 6a 01 00 00    	jne    c001b653 <IDE::detect()+0x263>
c001b4e9:	a8 80                	test   al,0x80
c001b4eb:	75 04                	jne    c001b4f1 <IDE::detect()+0x101>
c001b4ed:	a8 08                	test   al,0x8
c001b4ef:	75 23                	jne    c001b514 <IDE::detect()+0x124>
c001b4f1:	47                   	inc    edi
c001b4f2:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b4f8:	7e da                	jle    c001b4d4 <IDE::detect()+0xe4>
c001b4fa:	83 ec 0c             	sub    esp,0xc
c001b4fd:	6a 32                	push   0x32
c001b4ff:	e8 d0 9e ff ff       	call   c00153d4 <milliTenthSleep(unsigned int)>
c001b504:	83 c4 10             	add    esp,0x10
c001b507:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b50d:	75 c5                	jne    c001b4d4 <IDE::detect()+0xe4>
c001b50f:	e9 3f 01 00 00       	jmp    c001b653 <IDE::detect()+0x263>
c001b514:	31 c9                	xor    ecx,ecx
c001b516:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b51a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b51e:	83 ec 0c             	sub    esp,0xc
c001b521:	68 80 00 00 00       	push   0x80
c001b526:	57                   	push   edi
c001b527:	6a 00                	push   0x0
c001b529:	56                   	push   esi
c001b52a:	53                   	push   ebx
c001b52b:	e8 f0 fd ff ff       	call   c001b320 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b530:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b535:	89 e8                	mov    eax,ebp
c001b537:	89 d1                	mov    ecx,edx
c001b539:	c1 e0 06             	shl    eax,0x6
c001b53c:	01 d8                	add    eax,ebx
c001b53e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b545:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b54c:	89 f2                	mov    edx,esi
c001b54e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b554:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b558:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b55e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b562:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b569:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b571:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b578:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b580:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b586:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b58d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b593:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b597:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b59b:	83 c4 20             	add    esp,0x20
c001b59e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b5a1:	83 c0 02             	add    eax,0x2
c001b5a4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b5aa:	83 c7 02             	add    edi,0x2
c001b5ad:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b5b0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b5b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001b5ba:	75 e2                	jne    c001b59e <IDE::detect()+0x1ae>
c001b5bc:	89 e8                	mov    eax,ebp
c001b5be:	c1 e0 06             	shl    eax,0x6
c001b5c1:	01 d8                	add    eax,ebx
c001b5c3:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b5ca:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b5d1:	c1 ea 09             	shr    edx,0x9
c001b5d4:	83 e2 01             	and    edx,0x1
c001b5d7:	80 e1 01             	and    cl,0x1
c001b5da:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b5e0:	75 22                	jne    c001b604 <IDE::detect()+0x214>
c001b5e2:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b5e9:	74 46                	je     c001b631 <IDE::detect()+0x241>
c001b5eb:	83 ec 0c             	sub    esp,0xc
c001b5ee:	68 7c 01 00 00       	push   0x17c
c001b5f3:	e8 b6 c4 fe ff       	call   c0007aae <malloc>
c001b5f8:	89 c7                	mov    edi,eax
c001b5fa:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5fd:	e8 1a 05 00 00       	call   c001bb1c <ATA::ATA()>
c001b602:	eb 17                	jmp    c001b61b <IDE::detect()+0x22b>
c001b604:	83 ec 0c             	sub    esp,0xc
c001b607:	68 84 01 00 00       	push   0x184
c001b60c:	e8 9d c4 fe ff       	call   c0007aae <malloc>
c001b611:	89 c7                	mov    edi,eax
c001b613:	89 04 24             	mov    DWORD PTR [esp],eax
c001b616:	e8 45 0e 00 00       	call   c001c460 <ATAPI::ATAPI()>
c001b61b:	5a                   	pop    edx
c001b61c:	59                   	pop    ecx
c001b61d:	57                   	push   edi
c001b61e:	53                   	push   ebx
c001b61f:	e8 d2 07 ff ff       	call   c000bdf6 <Device::addChild(Device*)>
c001b624:	8b 07                	mov    eax,DWORD PTR [edi]
c001b626:	53                   	push   ebx
c001b627:	55                   	push   ebp
c001b628:	6a 00                	push   0x0
c001b62a:	57                   	push   edi
c001b62b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b62e:	83 c4 20             	add    esp,0x20
c001b631:	45                   	inc    ebp
c001b632:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b637:	74 0d                	je     c001b646 <IDE::detect()+0x256>
c001b639:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b641:	e9 db fd ff ff       	jmp    c001b421 <IDE::detect()+0x31>
c001b646:	4e                   	dec    esi
c001b647:	74 69                	je     c001b6b2 <IDE::detect()+0x2c2>
c001b649:	be 01 00 00 00       	mov    esi,0x1
c001b64e:	e9 c6 fd ff ff       	jmp    c001b419 <IDE::detect()+0x29>
c001b653:	50                   	push   eax
c001b654:	6a 04                	push   0x4
c001b656:	56                   	push   esi
c001b657:	53                   	push   ebx
c001b658:	e8 f3 f6 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b65d:	83 c4 0c             	add    esp,0xc
c001b660:	89 c7                	mov    edi,eax
c001b662:	6a 05                	push   0x5
c001b664:	56                   	push   esi
c001b665:	53                   	push   ebx
c001b666:	e8 e5 f6 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b66b:	83 c4 10             	add    esp,0x10
c001b66e:	89 f9                	mov    ecx,edi
c001b670:	0f b6 c0             	movzx  eax,al
c001b673:	0f b6 f9             	movzx  edi,cl
c001b676:	83 ff 14             	cmp    edi,0x14
c001b679:	75 07                	jne    c001b682 <IDE::detect()+0x292>
c001b67b:	3d eb 00 00 00       	cmp    eax,0xeb
c001b680:	eb 0a                	jmp    c001b68c <IDE::detect()+0x29c>
c001b682:	3d 96 00 00 00       	cmp    eax,0x96
c001b687:	75 a9                	jne    c001b632 <IDE::detect()+0x242>
c001b689:	83 ff 69             	cmp    edi,0x69
c001b68c:	75 a4                	jne    c001b632 <IDE::detect()+0x242>
c001b68e:	68 a1 00 00 00       	push   0xa1
c001b693:	6a 07                	push   0x7
c001b695:	56                   	push   esi
c001b696:	53                   	push   ebx
c001b697:	e8 f4 f5 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b69c:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b6a3:	e8 2c 9d ff ff       	call   c00153d4 <milliTenthSleep(unsigned int)>
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	b1 01                	mov    cl,0x1
c001b6ad:	e9 64 fe ff ff       	jmp    c001b516 <IDE::detect()+0x126>
c001b6b2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b6b8:	5b                   	pop    ebx
c001b6b9:	5e                   	pop    esi
c001b6ba:	5f                   	pop    edi
c001b6bb:	5d                   	pop    ebp
c001b6bc:	c3                   	ret    
c001b6bd:	90                   	nop

c001b6be <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b6be:	55                   	push   ebp
c001b6bf:	57                   	push   edi
c001b6c0:	56                   	push   esi
c001b6c1:	53                   	push   ebx
c001b6c2:	83 ec 1c             	sub    esp,0x1c
c001b6c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b6c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b6cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b6d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b6d9:	88 c3                	mov    bl,al
c001b6db:	25 ff 00 00 00       	and    eax,0xff
c001b6e0:	0f 84 88 00 00 00    	je     c001b76e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6e6:	83 ec 0c             	sub    esp,0xc
c001b6e9:	89 c7                	mov    edi,eax
c001b6eb:	68 1f 1b 02 c0       	push   0xc0021b1f
c001b6f0:	e8 cd f2 fe ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001b6f5:	83 c4 10             	add    esp,0x10
c001b6f8:	83 ff 01             	cmp    edi,0x1
c001b6fb:	74 6b                	je     c001b768 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b6fd:	83 ff 02             	cmp    edi,0x2
c001b700:	75 58                	jne    c001b75a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b702:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b707:	01 ff                	add    edi,edi
c001b709:	50                   	push   eax
c001b70a:	09 fe                	or     esi,edi
c001b70c:	6a 01                	push   0x1
c001b70e:	89 f0                	mov    eax,esi
c001b710:	0f b6 f0             	movzx  esi,al
c001b713:	c1 e6 06             	shl    esi,0x6
c001b716:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b71e:	50                   	push   eax
c001b71f:	55                   	push   ebp
c001b720:	e8 2b f6 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b725:	83 c4 10             	add    esp,0x10
c001b728:	a8 01                	test   al,0x1
c001b72a:	74 02                	je     c001b72e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b72c:	b3 07                	mov    bl,0x7
c001b72e:	a8 02                	test   al,0x2
c001b730:	74 02                	je     c001b734 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b732:	b3 03                	mov    bl,0x3
c001b734:	a8 04                	test   al,0x4
c001b736:	74 02                	je     c001b73a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b738:	b3 14                	mov    bl,0x14
c001b73a:	a8 08                	test   al,0x8
c001b73c:	74 02                	je     c001b740 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b73e:	b3 03                	mov    bl,0x3
c001b740:	a8 10                	test   al,0x10
c001b742:	74 02                	je     c001b746 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b744:	b3 15                	mov    bl,0x15
c001b746:	a8 20                	test   al,0x20
c001b748:	74 02                	je     c001b74c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b74a:	b3 03                	mov    bl,0x3
c001b74c:	a8 40                	test   al,0x40
c001b74e:	74 02                	je     c001b752 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b750:	b3 16                	mov    bl,0x16
c001b752:	a8 80                	test   al,0x80
c001b754:	74 18                	je     c001b76e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b756:	b3 0d                	mov    bl,0xd
c001b758:	eb 14                	jmp    c001b76e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b75a:	83 ff 03             	cmp    edi,0x3
c001b75d:	74 0d                	je     c001b76c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b75f:	83 ff 04             	cmp    edi,0x4
c001b762:	75 0a                	jne    c001b76e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b764:	b3 08                	mov    bl,0x8
c001b766:	eb 06                	jmp    c001b76e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b768:	b3 13                	mov    bl,0x13
c001b76a:	eb 02                	jmp    c001b76e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b76c:	b3 17                	mov    bl,0x17
c001b76e:	83 c4 1c             	add    esp,0x1c
c001b771:	88 d8                	mov    al,bl
c001b773:	5b                   	pop    ebx
c001b774:	5e                   	pop    esi
c001b775:	5f                   	pop    edi
c001b776:	5d                   	pop    ebp
c001b777:	c3                   	ret    

c001b778 <IDE::polling(unsigned char, unsigned int)>:
c001b778:	57                   	push   edi
c001b779:	56                   	push   esi
c001b77a:	53                   	push   ebx
c001b77b:	bb 04 00 00 00       	mov    ebx,0x4
c001b780:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b784:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b789:	52                   	push   edx
c001b78a:	6a 0c                	push   0xc
c001b78c:	56                   	push   esi
c001b78d:	57                   	push   edi
c001b78e:	e8 bd f5 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b793:	83 c4 10             	add    esp,0x10
c001b796:	4b                   	dec    ebx
c001b797:	75 f0                	jne    c001b789 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b799:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b79e:	50                   	push   eax
c001b79f:	6a 0c                	push   0xc
c001b7a1:	56                   	push   esi
c001b7a2:	57                   	push   edi
c001b7a3:	e8 a8 f5 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001b7a8:	83 c4 10             	add    esp,0x10
c001b7ab:	a8 01                	test   al,0x1
c001b7ad:	75 17                	jne    c001b7c6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b7af:	a8 20                	test   al,0x20
c001b7b1:	75 0f                	jne    c001b7c2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b7b3:	4b                   	dec    ebx
c001b7b4:	74 10                	je     c001b7c6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b7b6:	a8 80                	test   al,0x80
c001b7b8:	75 e4                	jne    c001b79e <IDE::polling(unsigned char, unsigned int)+0x26>
c001b7ba:	a8 08                	test   al,0x8
c001b7bc:	74 e0                	je     c001b79e <IDE::polling(unsigned char, unsigned int)+0x26>
c001b7be:	31 c0                	xor    eax,eax
c001b7c0:	eb 06                	jmp    c001b7c8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b7c2:	b0 01                	mov    al,0x1
c001b7c4:	eb 02                	jmp    c001b7c8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b7c6:	b0 02                	mov    al,0x2
c001b7c8:	5b                   	pop    ebx
c001b7c9:	5e                   	pop    esi
c001b7ca:	5f                   	pop    edi
c001b7cb:	c3                   	ret    

c001b7cc <SATABus::close(int, int, void*)>:
c001b7cc:	31 c0                	xor    eax,eax
c001b7ce:	c3                   	ret    
c001b7cf:	90                   	nop

c001b7d0 <SATABus::detect()>:
c001b7d0:	c3                   	ret    
c001b7d1:	90                   	nop

c001b7d2 <SATABus::SATABus()>:
c001b7d2:	83 ec 0c             	sub    esp,0xc
c001b7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d9:	83 ec 08             	sub    esp,0x8
c001b7dc:	68 58 1b 02 c0       	push   0xc0021b58
c001b7e1:	50                   	push   eax
c001b7e2:	e8 51 09 ff ff       	call   c000c138 <HardDiskController::HardDiskController(char const*)>
c001b7e7:	83 c4 10             	add    esp,0x10
c001b7ea:	ba 84 1b 02 c0       	mov    edx,0xc0021b84
c001b7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f3:	89 10                	mov    DWORD PTR [eax],edx
c001b7f5:	83 ec 0c             	sub    esp,0xc
c001b7f8:	6a 50                	push   0x50
c001b7fa:	e8 83 c6 fe ff       	call   c0007e82 <Phys::allocateContiguousPages(int)>
c001b7ff:	83 c4 10             	add    esp,0x10
c001b802:	89 c2                	mov    edx,eax
c001b804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b808:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b80e:	83 ec 0c             	sub    esp,0xc
c001b811:	6a 50                	push   0x50
c001b813:	e8 05 de fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001b818:	83 c4 10             	add    esp,0x10
c001b81b:	89 c2                	mov    edx,eax
c001b81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b821:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b827:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b82c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b830:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b836:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b83a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b840:	83 ec 0c             	sub    esp,0xc
c001b843:	6a 03                	push   0x3
c001b845:	6a 50                	push   0x50
c001b847:	51                   	push   ecx
c001b848:	52                   	push   edx
c001b849:	50                   	push   eax
c001b84a:	e8 c9 e7 fe ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b84f:	83 c4 20             	add    esp,0x20
c001b852:	90                   	nop
c001b853:	83 c4 0c             	add    esp,0xc
c001b856:	c3                   	ret    
c001b857:	90                   	nop

c001b858 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b858:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b85c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b85f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b862:	09 c2                	or     edx,eax
c001b864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b868:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b86e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b870:	31 c0                	xor    eax,eax
c001b872:	c1 e9 08             	shr    ecx,0x8
c001b875:	83 e1 0f             	and    ecx,0xf
c001b878:	39 c8                	cmp    eax,ecx
c001b87a:	74 0a                	je     c001b886 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b87c:	f6 c2 01             	test   dl,0x1
c001b87f:	74 08                	je     c001b889 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b881:	d1 ea                	shr    edx,1
c001b883:	40                   	inc    eax
c001b884:	eb f2                	jmp    c001b878 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b886:	83 c8 ff             	or     eax,0xffffffff
c001b889:	c3                   	ret    

c001b88a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b88a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b88e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b891:	89 c2                	mov    edx,eax
c001b893:	c1 ea 08             	shr    edx,0x8
c001b896:	83 e2 0f             	and    edx,0xf
c001b899:	4a                   	dec    edx
c001b89a:	75 32                	jne    c001b8ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b89c:	83 e0 0f             	and    eax,0xf
c001b89f:	83 f8 03             	cmp    eax,0x3
c001b8a2:	75 2a                	jne    c001b8ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b8a4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b8a7:	b8 02 00 00 00       	mov    eax,0x2
c001b8ac:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b8b2:	74 1c                	je     c001b8d0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b8b4:	b8 04 00 00 00       	mov    eax,0x4
c001b8b9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b8bf:	74 0f                	je     c001b8d0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b8c1:	31 c0                	xor    eax,eax
c001b8c3:	83 fa 03             	cmp    edx,0x3
c001b8c6:	0f 94 c0             	sete   al
c001b8c9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b8cd:	c3                   	ret    
c001b8ce:	31 c0                	xor    eax,eax
c001b8d0:	c3                   	ret    
c001b8d1:	90                   	nop

c001b8d2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b8d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8d9:	0f ba e2 0f          	bt     edx,0xf
c001b8dd:	72 f7                	jb     c001b8d6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b8df:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8e2:	83 ca 10             	or     edx,0x10
c001b8e5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8e8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8eb:	83 ca 01             	or     edx,0x1
c001b8ee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8f1:	c3                   	ret    

c001b8f2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b8f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8f6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8f9:	83 e2 fe             	and    edx,0xfffffffe
c001b8fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8ff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b902:	83 e2 ef             	and    edx,0xffffffef
c001b905:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b908:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b90b:	0f ba e2 0e          	bt     edx,0xe
c001b90f:	72 f7                	jb     c001b908 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b911:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b914:	0f ba e2 0f          	bt     edx,0xf
c001b918:	72 ee                	jb     c001b908 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b91a:	c3                   	ret    
c001b91b:	90                   	nop

c001b91c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b91c:	55                   	push   ebp
c001b91d:	57                   	push   edi
c001b91e:	56                   	push   esi
c001b91f:	53                   	push   ebx
c001b920:	83 ec 1c             	sub    esp,0x1c
c001b923:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b927:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b92b:	53                   	push   ebx
c001b92c:	56                   	push   esi
c001b92d:	e8 c0 ff ff ff       	call   c001b8f2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b932:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b936:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b93c:	83 ec 0c             	sub    esp,0xc
c001b93f:	c1 e5 0a             	shl    ebp,0xa
c001b942:	01 e8                	add    eax,ebp
c001b944:	89 03                	mov    DWORD PTR [ebx],eax
c001b946:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b948:	68 00 04 00 00       	push   0x400
c001b94d:	6a 00                	push   0x0
c001b94f:	50                   	push   eax
c001b950:	e8 9b 4b fe ff       	call   c00004f0 <memset>
c001b955:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b95b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b95f:	01 e8                	add    eax,ebp
c001b961:	83 c4 1c             	add    esp,0x1c
c001b964:	89 03                	mov    DWORD PTR [ebx],eax
c001b966:	c1 e2 08             	shl    edx,0x8
c001b969:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b970:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b976:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b97c:	01 f8                	add    eax,edi
c001b97e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b981:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b984:	68 00 01 00 00       	push   0x100
c001b989:	6a 00                	push   0x0
c001b98b:	50                   	push   eax
c001b98c:	e8 5f 4b fe ff       	call   c00004f0 <memset>
c001b991:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b997:	01 fa                	add    edx,edi
c001b999:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b99d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b9a0:	c1 e7 0d             	shl    edi,0xd
c001b9a3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b9aa:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b9b0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b9b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b9ba:	31 ff                	xor    edi,edi
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b9c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9c9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b9cf:	83 c5 20             	add    ebp,0x20
c001b9d2:	01 f8                	add    eax,edi
c001b9d4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b9d7:	52                   	push   edx
c001b9d8:	68 00 01 00 00       	push   0x100
c001b9dd:	6a 00                	push   0x0
c001b9df:	50                   	push   eax
c001b9e0:	e8 0b 4b fe ff       	call   c00004f0 <memset>
c001b9e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9e9:	83 c4 10             	add    esp,0x10
c001b9ec:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b9f2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b9f9:	01 f8                	add    eax,edi
c001b9fb:	81 c7 00 01 00 00    	add    edi,0x100
c001ba01:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ba04:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001ba0a:	75 b3                	jne    c001b9bf <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001ba0c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ba13:	50                   	push   eax
c001ba14:	50                   	push   eax
c001ba15:	53                   	push   ebx
c001ba16:	56                   	push   esi
c001ba17:	e8 b6 fe ff ff       	call   c001b8d2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ba1c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ba23:	83 c4 2c             	add    esp,0x2c
c001ba26:	5b                   	pop    ebx
c001ba27:	5e                   	pop    esi
c001ba28:	5f                   	pop    edi
c001ba29:	5d                   	pop    ebp
c001ba2a:	c3                   	ret    
c001ba2b:	90                   	nop

c001ba2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ba2c:	55                   	push   ebp
c001ba2d:	57                   	push   edi
c001ba2e:	56                   	push   esi
c001ba2f:	53                   	push   ebx
c001ba30:	31 db                	xor    ebx,ebx
c001ba32:	83 ec 0c             	sub    esp,0xc
c001ba35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba39:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ba3d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ba40:	f7 c7 01 00 00 00    	test   edi,0x1
c001ba46:	74 7a                	je     c001bac2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba48:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ba4c:	89 d8                	mov    eax,ebx
c001ba4e:	c1 e0 07             	shl    eax,0x7
c001ba51:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ba58:	55                   	push   ebp
c001ba59:	56                   	push   esi
c001ba5a:	e8 2b fe ff ff       	call   c001b88a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ba5f:	5a                   	pop    edx
c001ba60:	83 f8 01             	cmp    eax,0x1
c001ba63:	59                   	pop    ecx
c001ba64:	75 21                	jne    c001ba87 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ba66:	50                   	push   eax
c001ba67:	53                   	push   ebx
c001ba68:	55                   	push   ebp
c001ba69:	56                   	push   esi
c001ba6a:	e8 ad fe ff ff       	call   c001b91c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba6f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ba76:	e8 33 c0 fe ff       	call   c0007aae <malloc>
c001ba7b:	89 c5                	mov    ebp,eax
c001ba7d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba80:	e8 99 10 00 00       	call   c001cb1e <SATA::SATA()>
c001ba85:	eb 24                	jmp    c001baab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ba87:	83 f8 04             	cmp    eax,0x4
c001ba8a:	75 36                	jne    c001bac2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba8c:	51                   	push   ecx
c001ba8d:	53                   	push   ebx
c001ba8e:	55                   	push   ebp
c001ba8f:	56                   	push   esi
c001ba90:	e8 87 fe ff ff       	call   c001b91c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba95:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ba9c:	e8 0d c0 fe ff       	call   c0007aae <malloc>
c001baa1:	89 c5                	mov    ebp,eax
c001baa3:	89 04 24             	mov    DWORD PTR [esp],eax
c001baa6:	e8 d5 17 00 00       	call   c001d280 <SATAPI::SATAPI()>
c001baab:	58                   	pop    eax
c001baac:	5a                   	pop    edx
c001baad:	55                   	push   ebp
c001baae:	56                   	push   esi
c001baaf:	e8 42 03 ff ff       	call   c000bdf6 <Device::addChild(Device*)>
c001bab4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bab7:	56                   	push   esi
c001bab8:	6a 00                	push   0x0
c001baba:	53                   	push   ebx
c001babb:	55                   	push   ebp
c001babc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001babf:	83 c4 20             	add    esp,0x20
c001bac2:	d1 ef                	shr    edi,1
c001bac4:	43                   	inc    ebx
c001bac5:	83 fb 20             	cmp    ebx,0x20
c001bac8:	0f 85 72 ff ff ff    	jne    c001ba40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001bace:	83 c4 0c             	add    esp,0xc
c001bad1:	5b                   	pop    ebx
c001bad2:	5e                   	pop    esi
c001bad3:	5f                   	pop    edi
c001bad4:	5d                   	pop    ebp
c001bad5:	c3                   	ret    

c001bad6 <SATABus::open(int, int, void*)>:
c001bad6:	83 ec 14             	sub    esp,0x14
c001bad9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001badd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001bae3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bae9:	52                   	push   edx
c001baea:	50                   	push   eax
c001baeb:	e8 3c ff ff ff       	call   c001ba2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001baf0:	31 c0                	xor    eax,eax
c001baf2:	83 c4 1c             	add    esp,0x1c
c001baf5:	c3                   	ret    

c001baf6 <ATA::close(int, int, void*)>:
c001baf6:	83 ec 0c             	sub    esp,0xc
c001baf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bafd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bb03:	85 c0                	test   eax,eax
c001bb05:	74 0c                	je     c001bb13 <ATA::close(int, int, void*)+0x1d>
c001bb07:	83 ec 0c             	sub    esp,0xc
c001bb0a:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb0c:	50                   	push   eax
c001bb0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bb10:	83 c4 10             	add    esp,0x10
c001bb13:	31 c0                	xor    eax,eax
c001bb15:	83 c4 0c             	add    esp,0xc
c001bb18:	c3                   	ret    
c001bb19:	90                   	nop

c001bb1a <ATA::powerSaving(PowerSavingLevel)>:
c001bb1a:	c3                   	ret    
c001bb1b:	90                   	nop

c001bb1c <ATA::ATA()>:
c001bb1c:	83 ec 0c             	sub    esp,0xc
c001bb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb23:	83 ec 04             	sub    esp,0x4
c001bb26:	68 00 02 00 00       	push   0x200
c001bb2b:	68 51 1c 02 c0       	push   0xc0021c51
c001bb30:	50                   	push   eax
c001bb31:	e8 8c 06 ff ff       	call   c000c1c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bb36:	83 c4 10             	add    esp,0x10
c001bb39:	ba c4 1b 02 c0       	mov    edx,0xc0021bc4
c001bb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb42:	89 10                	mov    DWORD PTR [eax],edx
c001bb44:	90                   	nop
c001bb45:	83 c4 0c             	add    esp,0xc
c001bb48:	c3                   	ret    
c001bb49:	90                   	nop

c001bb4a <ATA::flush(bool)>:
c001bb4a:	53                   	push   ebx
c001bb4b:	83 ec 08             	sub    esp,0x8
c001bb4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb57:	83 f8 01             	cmp    eax,0x1
c001bb5a:	19 c0                	sbb    eax,eax
c001bb5c:	83 e0 fd             	and    eax,0xfffffffd
c001bb5f:	05 ea 00 00 00       	add    eax,0xea
c001bb64:	50                   	push   eax
c001bb65:	6a 07                	push   0x7
c001bb67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb6e:	50                   	push   eax
c001bb6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb75:	e8 16 f1 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb7a:	83 c4 0c             	add    esp,0xc
c001bb7d:	6a 00                	push   0x0
c001bb7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb86:	50                   	push   eax
c001bb87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb8d:	e8 e6 fb ff ff       	call   c001b778 <IDE::polling(unsigned char, unsigned int)>
c001bb92:	83 c4 18             	add    esp,0x18
c001bb95:	5b                   	pop    ebx
c001bb96:	c3                   	ret    
c001bb97:	90                   	nop

c001bb98 <ATA::readyForCommand()>:
c001bb98:	56                   	push   esi
c001bb99:	53                   	push   ebx
c001bb9a:	53                   	push   ebx
c001bb9b:	31 db                	xor    ebx,ebx
c001bb9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bba1:	51                   	push   ecx
c001bba2:	6a 0c                	push   0xc
c001bba4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbab:	50                   	push   eax
c001bbac:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbb2:	e8 99 f1 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001bbb7:	83 c4 10             	add    esp,0x10
c001bbba:	a8 88                	test   al,0x88
c001bbbc:	74 1f                	je     c001bbdd <ATA::readyForCommand()+0x45>
c001bbbe:	43                   	inc    ebx
c001bbbf:	83 fb 63             	cmp    ebx,0x63
c001bbc2:	7e dd                	jle    c001bba1 <ATA::readyForCommand()+0x9>
c001bbc4:	83 ec 0c             	sub    esp,0xc
c001bbc7:	6a 0a                	push   0xa
c001bbc9:	e8 06 98 ff ff       	call   c00153d4 <milliTenthSleep(unsigned int)>
c001bbce:	83 c4 10             	add    esp,0x10
c001bbd1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bbd7:	75 c8                	jne    c001bba1 <ATA::readyForCommand()+0x9>
c001bbd9:	31 c0                	xor    eax,eax
c001bbdb:	eb 02                	jmp    c001bbdf <ATA::readyForCommand()+0x47>
c001bbdd:	b0 01                	mov    al,0x1
c001bbdf:	5a                   	pop    edx
c001bbe0:	5b                   	pop    ebx
c001bbe1:	5e                   	pop    esi
c001bbe2:	c3                   	ret    
c001bbe3:	90                   	nop

c001bbe4 <ATA::access(unsigned long long, int, void*, bool)>:
c001bbe4:	55                   	push   ebp
c001bbe5:	57                   	push   edi
c001bbe6:	56                   	push   esi
c001bbe7:	53                   	push   ebx
c001bbe8:	83 ec 2c             	sub    esp,0x2c
c001bbeb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bbef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bbf3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bbf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbfb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bbff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bc03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bc07:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bc0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc11:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bc17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc1b:	c1 e0 06             	shl    eax,0x6
c001bc1e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bc26:	74 5d                	je     c001bc85 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001bc28:	89 fa                	mov    edx,edi
c001bc2a:	89 f0                	mov    eax,esi
c001bc2c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001bc30:	c1 ea 1c             	shr    edx,0x1c
c001bc33:	89 d1                	mov    ecx,edx
c001bc35:	09 c1                	or     ecx,eax
c001bc37:	74 25                	je     c001bc5e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bc39:	31 ed                	xor    ebp,ebp
c001bc3b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bc42:	89 fa                	mov    edx,edi
c001bc44:	89 f0                	mov    eax,esi
c001bc46:	0f ad d0             	shrd   eax,edx,cl
c001bc49:	d3 ea                	shr    edx,cl
c001bc4b:	f6 c1 20             	test   cl,0x20
c001bc4e:	74 02                	je     c001bc52 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bc50:	89 d0                	mov    eax,edx
c001bc52:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bc56:	45                   	inc    ebp
c001bc57:	83 fd 06             	cmp    ebp,0x6
c001bc5a:	75 df                	jne    c001bc3b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bc5c:	eb 76                	jmp    c001bcd4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001bc5e:	89 f0                	mov    eax,esi
c001bc60:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bc65:	89 fa                	mov    edx,edi
c001bc67:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc6e:	0f ac d0 10          	shrd   eax,edx,0x10
c001bc72:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bc7b:	c1 ee 18             	shr    esi,0x18
c001bc7e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001bc83:	eb 56                	jmp    c001bcdb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bc85:	6a 00                	push   0x0
c001bc87:	6a 3f                	push   0x3f
c001bc89:	57                   	push   edi
c001bc8a:	56                   	push   esi
c001bc8b:	e8 b0 2a 00 00       	call   c001e740 <__umoddi3>
c001bc90:	83 c4 10             	add    esp,0x10
c001bc93:	40                   	inc    eax
c001bc94:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bc98:	6a 00                	push   0x0
c001bc9a:	68 f0 03 00 00       	push   0x3f0
c001bc9f:	57                   	push   edi
c001bca0:	56                   	push   esi
c001bca1:	e8 9a 29 00 00       	call   c001e640 <__udivdi3>
c001bca6:	83 c4 10             	add    esp,0x10
c001bca9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bcae:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bcb5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bcba:	6a 00                	push   0x0
c001bcbc:	6a 3f                	push   0x3f
c001bcbe:	57                   	push   edi
c001bcbf:	56                   	push   esi
c001bcc0:	e8 7b 29 00 00       	call   c001e640 <__udivdi3>
c001bcc5:	83 c4 10             	add    esp,0x10
c001bcc8:	83 e0 0f             	and    eax,0xf
c001bccb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001bcd0:	89 c6                	mov    esi,eax
c001bcd2:	eb 07                	jmp    c001bcdb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bcd4:	31 f6                	xor    esi,esi
c001bcd6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001bcdb:	bf 01 00 00 00       	mov    edi,0x1
c001bce0:	50                   	push   eax
c001bce1:	6a 00                	push   0x0
c001bce3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcea:	50                   	push   eax
c001bceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bcef:	e8 a4 f1 ff ff       	call   c001ae98 <IDE::enableIRQs(unsigned char, bool)>
c001bcf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcf7:	e8 9c fe ff ff       	call   c001bb98 <ATA::readyForCommand()>
c001bcfc:	83 c4 10             	add    esp,0x10
c001bcff:	84 c0                	test   al,al
c001bd01:	0f 84 69 02 00 00    	je     c001bf70 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001bd07:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bd0d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bd13:	c1 e0 04             	shl    eax,0x4
c001bd16:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bd1d:	09 c6                	or     esi,eax
c001bd1f:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001bd24:	75 05                	jne    c001bd2b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bd26:	83 ce a0             	or     esi,0xffffffa0
c001bd29:	eb 03                	jmp    c001bd2e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001bd2b:	83 ce e0             	or     esi,0xffffffe0
c001bd2e:	89 f0                	mov    eax,esi
c001bd30:	0f b6 f0             	movzx  esi,al
c001bd33:	56                   	push   esi
c001bd34:	6a 06                	push   0x6
c001bd36:	51                   	push   ecx
c001bd37:	52                   	push   edx
c001bd38:	e8 53 ef ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd3d:	83 c4 10             	add    esp,0x10
c001bd40:	6a 00                	push   0x0
c001bd42:	6a 01                	push   0x1
c001bd44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd4b:	50                   	push   eax
c001bd4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd52:	e8 39 ef ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd57:	83 c4 10             	add    esp,0x10
c001bd5a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001bd5f:	83 f8 02             	cmp    eax,0x2
c001bd62:	75 6e                	jne    c001bdd2 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001bd64:	6a 00                	push   0x0
c001bd66:	6a 08                	push   0x8
c001bd68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd6f:	50                   	push   eax
c001bd70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd76:	e8 15 ef ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd7b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bd80:	50                   	push   eax
c001bd81:	6a 09                	push   0x9
c001bd83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd8a:	50                   	push   eax
c001bd8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd91:	e8 fa ee ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd96:	83 c4 20             	add    esp,0x20
c001bd99:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bd9e:	50                   	push   eax
c001bd9f:	6a 0a                	push   0xa
c001bda1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bda8:	50                   	push   eax
c001bda9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdaf:	e8 dc ee ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdb4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bdb9:	50                   	push   eax
c001bdba:	6a 0b                	push   0xb
c001bdbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdc3:	50                   	push   eax
c001bdc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdca:	e8 c1 ee ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdcf:	83 c4 20             	add    esp,0x20
c001bdd2:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bdd7:	50                   	push   eax
c001bdd8:	6a 02                	push   0x2
c001bdda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bde1:	50                   	push   eax
c001bde2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bde8:	e8 a3 ee ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bded:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bdf2:	50                   	push   eax
c001bdf3:	6a 03                	push   0x3
c001bdf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdfc:	50                   	push   eax
c001bdfd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be03:	e8 88 ee ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be08:	83 c4 20             	add    esp,0x20
c001be0b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001be10:	50                   	push   eax
c001be11:	6a 04                	push   0x4
c001be13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be1a:	50                   	push   eax
c001be1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be21:	e8 6a ee ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be26:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001be2b:	50                   	push   eax
c001be2c:	6a 05                	push   0x5
c001be2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be35:	50                   	push   eax
c001be36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be3c:	e8 4f ee ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be41:	83 c4 20             	add    esp,0x20
c001be44:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be49:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001be4e:	74 11                	je     c001be61 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001be50:	b8 30 00 00 00       	mov    eax,0x30
c001be55:	83 fa 02             	cmp    edx,0x2
c001be58:	75 16                	jne    c001be70 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be5a:	b8 34 00 00 00       	mov    eax,0x34
c001be5f:	eb 0f                	jmp    c001be70 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be61:	b8 20 00 00 00       	mov    eax,0x20
c001be66:	83 fa 02             	cmp    edx,0x2
c001be69:	75 05                	jne    c001be70 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be6b:	b8 24 00 00 00       	mov    eax,0x24
c001be70:	50                   	push   eax
c001be71:	6a 07                	push   0x7
c001be73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be7a:	50                   	push   eax
c001be7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be81:	e8 0a ee ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be86:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001be8a:	83 c4 10             	add    esp,0x10
c001be8d:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001be92:	85 f6                	test   esi,esi
c001be94:	0f 84 b3 00 00 00    	je     c001bf4d <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001be9a:	50                   	push   eax
c001be9b:	6a 01                	push   0x1
c001be9d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bea4:	50                   	push   eax
c001bea5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001beab:	e8 c8 f8 ff ff       	call   c001b778 <IDE::polling(unsigned char, unsigned int)>
c001beb0:	83 c4 10             	add    esp,0x10
c001beb3:	0f b6 f8             	movzx  edi,al
c001beb6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bebc:	85 ff                	test   edi,edi
c001bebe:	74 1d                	je     c001bedd <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001bec0:	57                   	push   edi
c001bec1:	0f b6 d2             	movzx  edx,dl
c001bec4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001becb:	50                   	push   eax
c001becc:	52                   	push   edx
c001becd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bed3:	e8 e6 f7 ff ff       	call   c001b6be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bed8:	e9 90 00 00 00       	jmp    c001bf6d <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001bedd:	85 ed                	test   ebp,ebp
c001bedf:	74 3b                	je     c001bf1c <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001bee1:	31 c9                	xor    ecx,ecx
c001bee3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bee7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001beeb:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001beef:	50                   	push   eax
c001bef0:	50                   	push   eax
c001bef1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bef8:	50                   	push   eax
c001bef9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001beff:	e8 7a ed ff ff       	call   c001ac7e <IDE::getBase(unsigned char)>
c001bf04:	89 c2                	mov    edx,eax
c001bf06:	89 f8                	mov    eax,edi
c001bf08:	66 ef                	out    dx,ax
c001bf0a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bf0e:	83 c4 10             	add    esp,0x10
c001bf11:	41                   	inc    ecx
c001bf12:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001bf18:	75 c9                	jne    c001bee3 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001bf1a:	eb 23                	jmp    c001bf3f <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001bf1c:	0f b6 d2             	movzx  edx,dl
c001bf1f:	51                   	push   ecx
c001bf20:	51                   	push   ecx
c001bf21:	52                   	push   edx
c001bf22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf28:	e8 51 ed ff ff       	call   c001ac7e <IDE::getBase(unsigned char)>
c001bf2d:	b9 00 01 00 00       	mov    ecx,0x100
c001bf32:	89 c2                	mov    edx,eax
c001bf34:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bf38:	fc                   	cld    
c001bf39:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bf3c:	83 c4 10             	add    esp,0x10
c001bf3f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bf47:	4e                   	dec    esi
c001bf48:	e9 45 ff ff ff       	jmp    c001be92 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001bf4d:	31 ff                	xor    edi,edi
c001bf4f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bf54:	74 1a                	je     c001bf70 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001bf56:	50                   	push   eax
c001bf57:	50                   	push   eax
c001bf58:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001bf5d:	83 f8 02             	cmp    eax,0x2
c001bf60:	0f 94 c0             	sete   al
c001bf63:	0f b6 c0             	movzx  eax,al
c001bf66:	50                   	push   eax
c001bf67:	53                   	push   ebx
c001bf68:	e8 dd fb ff ff       	call   c001bb4a <ATA::flush(bool)>
c001bf6d:	83 c4 10             	add    esp,0x10
c001bf70:	83 c4 2c             	add    esp,0x2c
c001bf73:	89 f8                	mov    eax,edi
c001bf75:	5b                   	pop    ebx
c001bf76:	5e                   	pop    esi
c001bf77:	5f                   	pop    edi
c001bf78:	5d                   	pop    ebp
c001bf79:	c3                   	ret    

c001bf7a <ATA::detectCHS()>:
c001bf7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf7e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bf84:	c1 e0 06             	shl    eax,0x6
c001bf87:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bf8d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bf97:	c7 44 24 04 a8 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ba8
c001bf9f:	e9 4b 49 ff ff       	jmp    c00108ef <KePanic(char const*)>

c001bfa4 <ATA::open(int, int, void*)>:
c001bfa4:	53                   	push   ebx
c001bfa5:	83 ec 08             	sub    esp,0x8
c001bfa8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfb4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bfba:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bfc0:	c1 e0 06             	shl    eax,0x6
c001bfc3:	01 d0                	add    eax,edx
c001bfc5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bfcc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bfd2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bfd9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bfe3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bfe9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bff0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bff7:	75 0c                	jne    c001c005 <ATA::open(int, int, void*)+0x61>
c001bff9:	83 ec 0c             	sub    esp,0xc
c001bffc:	53                   	push   ebx
c001bffd:	e8 78 ff ff ff       	call   c001bf7a <ATA::detectCHS()>
c001c002:	83 c4 10             	add    esp,0x10
c001c005:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c00b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c011:	c1 e0 06             	shl    eax,0x6
c001c014:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c01b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c025:	d1 e8                	shr    eax,1
c001c027:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c02d:	6a 04                	push   0x4
c001c02f:	6a 0c                	push   0xc
c001c031:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c038:	50                   	push   eax
c001c039:	52                   	push   edx
c001c03a:	e8 51 ec ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c03f:	90                   	nop
c001c040:	90                   	nop
c001c041:	6a 00                	push   0x0
c001c043:	6a 0c                	push   0xc
c001c045:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c04c:	50                   	push   eax
c001c04d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c053:	e8 38 ec ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c058:	83 c4 14             	add    esp,0x14
c001c05b:	53                   	push   ebx
c001c05c:	e8 c9 01 ff ff       	call   c000c22a <PhysicalDisk::startCache()>
c001c061:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c064:	e8 05 14 ff ff       	call   c000d46e <createPartitionsForDisk(PhysicalDisk*)>
c001c069:	31 c0                	xor    eax,eax
c001c06b:	83 c4 18             	add    esp,0x18
c001c06e:	5b                   	pop    ebx
c001c06f:	c3                   	ret    

c001c070 <combineCharAndColour(char, unsigned char)>:
c001c070:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c075:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c07b:	c1 e0 08             	shl    eax,0x8
c001c07e:	09 d0                	or     eax,edx
c001c080:	c3                   	ret    

c001c081 <combineColours(unsigned char, unsigned char)>:
c001c081:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c086:	c1 e0 04             	shl    eax,0x4
c001c089:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c08d:	c3                   	ret    

c001c08e <ATA::read(unsigned long long, int, void*)>:
c001c08e:	55                   	push   ebp
c001c08f:	57                   	push   edi
c001c090:	56                   	push   esi
c001c091:	be 04 00 00 00       	mov    esi,0x4
c001c096:	53                   	push   ebx
c001c097:	83 ec 0c             	sub    esp,0xc
c001c09a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c09e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c0a2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c0a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c0a9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c0ad:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c0b3:	0f 87 a1 01 00 00    	ja     c001c25a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0b9:	be 06 00 00 00       	mov    esi,0x6
c001c0be:	85 c9                	test   ecx,ecx
c001c0c0:	0f 84 94 01 00 00    	je     c001c25a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0c6:	55                   	push   ebp
c001c0c7:	55                   	push   ebp
c001c0c8:	6a 00                	push   0x0
c001c0ca:	51                   	push   ecx
c001c0cb:	53                   	push   ebx
c001c0cc:	52                   	push   edx
c001c0cd:	50                   	push   eax
c001c0ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0d2:	e8 0d fb ff ff       	call   c001bbe4 <ATA::access(unsigned long long, int, void*, bool)>
c001c0d7:	83 c4 20             	add    esp,0x20
c001c0da:	89 c6                	mov    esi,eax
c001c0dc:	85 c0                	test   eax,eax
c001c0de:	0f 85 71 01 00 00    	jne    c001c255 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c0e4:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c0ea:	89 da                	mov    edx,ebx
c001c0ec:	50                   	push   eax
c001c0ed:	bd 10 27 00 00       	mov    ebp,0x2710
c001c0f2:	50                   	push   eax
c001c0f3:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c0f9:	6a 0f                	push   0xf
c001c0fb:	6a 00                	push   0x0
c001c0fd:	e8 7f ff ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001c102:	59                   	pop    ecx
c001c103:	b9 0a 00 00 00       	mov    ecx,0xa
c001c108:	5b                   	pop    ebx
c001c109:	0f b6 d8             	movzx  ebx,al
c001c10c:	89 d0                	mov    eax,edx
c001c10e:	53                   	push   ebx
c001c10f:	99                   	cdq    
c001c110:	f7 fd                	idiv   ebp
c001c112:	99                   	cdq    
c001c113:	f7 f9                	idiv   ecx
c001c115:	83 c2 30             	add    edx,0x30
c001c118:	0f b6 d2             	movzx  edx,dl
c001c11b:	52                   	push   edx
c001c11c:	e8 4f ff ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c121:	5f                   	pop    edi
c001c122:	bf e8 03 00 00       	mov    edi,0x3e8
c001c127:	5a                   	pop    edx
c001c128:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c12e:	53                   	push   ebx
c001c12f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c134:	99                   	cdq    
c001c135:	f7 ff                	idiv   edi
c001c137:	99                   	cdq    
c001c138:	f7 f9                	idiv   ecx
c001c13a:	8d 42 30             	lea    eax,[edx+0x30]
c001c13d:	0f b6 c0             	movzx  eax,al
c001c140:	50                   	push   eax
c001c141:	e8 2a ff ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c146:	5f                   	pop    edi
c001c147:	bf 64 00 00 00       	mov    edi,0x64
c001c14c:	5a                   	pop    edx
c001c14d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c153:	53                   	push   ebx
c001c154:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c159:	99                   	cdq    
c001c15a:	f7 ff                	idiv   edi
c001c15c:	99                   	cdq    
c001c15d:	f7 f9                	idiv   ecx
c001c15f:	8d 42 30             	lea    eax,[edx+0x30]
c001c162:	0f b6 c0             	movzx  eax,al
c001c165:	50                   	push   eax
c001c166:	e8 05 ff ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c16b:	5a                   	pop    edx
c001c16c:	5a                   	pop    edx
c001c16d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c173:	53                   	push   ebx
c001c174:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c179:	99                   	cdq    
c001c17a:	f7 f9                	idiv   ecx
c001c17c:	99                   	cdq    
c001c17d:	f7 f9                	idiv   ecx
c001c17f:	8d 42 30             	lea    eax,[edx+0x30]
c001c182:	0f b6 c0             	movzx  eax,al
c001c185:	50                   	push   eax
c001c186:	e8 e5 fe ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c18b:	5a                   	pop    edx
c001c18c:	5a                   	pop    edx
c001c18d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c193:	53                   	push   ebx
c001c194:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c199:	99                   	cdq    
c001c19a:	f7 f9                	idiv   ecx
c001c19c:	83 c2 30             	add    edx,0x30
c001c19f:	0f b6 d2             	movzx  edx,dl
c001c1a2:	52                   	push   edx
c001c1a3:	e8 c8 fe ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c1a8:	5a                   	pop    edx
c001c1a9:	5a                   	pop    edx
c001c1aa:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c1b0:	53                   	push   ebx
c001c1b1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1b6:	99                   	cdq    
c001c1b7:	f7 fd                	idiv   ebp
c001c1b9:	99                   	cdq    
c001c1ba:	f7 f9                	idiv   ecx
c001c1bc:	8d 42 30             	lea    eax,[edx+0x30]
c001c1bf:	0f b6 c0             	movzx  eax,al
c001c1c2:	50                   	push   eax
c001c1c3:	e8 a8 fe ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c1c8:	5d                   	pop    ebp
c001c1c9:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c1ce:	5a                   	pop    edx
c001c1cf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c1d5:	53                   	push   ebx
c001c1d6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1db:	99                   	cdq    
c001c1dc:	f7 fd                	idiv   ebp
c001c1de:	99                   	cdq    
c001c1df:	f7 f9                	idiv   ecx
c001c1e1:	8d 42 30             	lea    eax,[edx+0x30]
c001c1e4:	0f b6 c0             	movzx  eax,al
c001c1e7:	50                   	push   eax
c001c1e8:	e8 83 fe ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c1ed:	5d                   	pop    ebp
c001c1ee:	5a                   	pop    edx
c001c1ef:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c1f5:	53                   	push   ebx
c001c1f6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1fb:	99                   	cdq    
c001c1fc:	f7 ff                	idiv   edi
c001c1fe:	99                   	cdq    
c001c1ff:	f7 f9                	idiv   ecx
c001c201:	8d 42 30             	lea    eax,[edx+0x30]
c001c204:	0f b6 c0             	movzx  eax,al
c001c207:	50                   	push   eax
c001c208:	e8 63 fe ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c20d:	5f                   	pop    edi
c001c20e:	5d                   	pop    ebp
c001c20f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c215:	53                   	push   ebx
c001c216:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c21b:	99                   	cdq    
c001c21c:	f7 f9                	idiv   ecx
c001c21e:	99                   	cdq    
c001c21f:	f7 f9                	idiv   ecx
c001c221:	8d 42 30             	lea    eax,[edx+0x30]
c001c224:	0f b6 c0             	movzx  eax,al
c001c227:	50                   	push   eax
c001c228:	e8 43 fe ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c22d:	5a                   	pop    edx
c001c22e:	5f                   	pop    edi
c001c22f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c235:	53                   	push   ebx
c001c236:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c23b:	99                   	cdq    
c001c23c:	f7 f9                	idiv   ecx
c001c23e:	83 c2 30             	add    edx,0x30
c001c241:	0f b6 d2             	movzx  edx,dl
c001c244:	52                   	push   edx
c001c245:	e8 26 fe ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c24a:	83 c4 10             	add    esp,0x10
c001c24d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c253:	eb 05                	jmp    c001c25a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c255:	be 01 00 00 00       	mov    esi,0x1
c001c25a:	83 c4 0c             	add    esp,0xc
c001c25d:	89 f0                	mov    eax,esi
c001c25f:	5b                   	pop    ebx
c001c260:	5e                   	pop    esi
c001c261:	5f                   	pop    edi
c001c262:	5d                   	pop    ebp
c001c263:	c3                   	ret    

c001c264 <ATA::write(unsigned long long, int, void*)>:
c001c264:	55                   	push   ebp
c001c265:	57                   	push   edi
c001c266:	56                   	push   esi
c001c267:	be 04 00 00 00       	mov    esi,0x4
c001c26c:	53                   	push   ebx
c001c26d:	83 ec 0c             	sub    esp,0xc
c001c270:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c274:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c278:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c27b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c27f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c283:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c289:	0f 87 9c 01 00 00    	ja     c001c42b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c28f:	be 06 00 00 00       	mov    esi,0x6
c001c294:	85 c9                	test   ecx,ecx
c001c296:	0f 84 8f 01 00 00    	je     c001c42b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c29c:	55                   	push   ebp
c001c29d:	55                   	push   ebp
c001c29e:	6a 01                	push   0x1
c001c2a0:	51                   	push   ecx
c001c2a1:	53                   	push   ebx
c001c2a2:	52                   	push   edx
c001c2a3:	50                   	push   eax
c001c2a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2a8:	e8 37 f9 ff ff       	call   c001bbe4 <ATA::access(unsigned long long, int, void*, bool)>
c001c2ad:	83 c4 20             	add    esp,0x20
c001c2b0:	89 c6                	mov    esi,eax
c001c2b2:	85 c0                	test   eax,eax
c001c2b4:	0f 85 6c 01 00 00    	jne    c001c426 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c2ba:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c2c0:	bd 10 27 00 00       	mov    ebp,0x2710
c001c2c5:	50                   	push   eax
c001c2c6:	50                   	push   eax
c001c2c7:	6a 0f                	push   0xf
c001c2c9:	6a 00                	push   0x0
c001c2cb:	e8 b1 fd ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001c2d0:	5a                   	pop    edx
c001c2d1:	0f b6 d8             	movzx  ebx,al
c001c2d4:	59                   	pop    ecx
c001c2d5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2da:	53                   	push   ebx
c001c2db:	b9 0a 00 00 00       	mov    ecx,0xa
c001c2e0:	99                   	cdq    
c001c2e1:	f7 fd                	idiv   ebp
c001c2e3:	99                   	cdq    
c001c2e4:	f7 f9                	idiv   ecx
c001c2e6:	8d 42 30             	lea    eax,[edx+0x30]
c001c2e9:	0f b6 c0             	movzx  eax,al
c001c2ec:	50                   	push   eax
c001c2ed:	e8 7e fd ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c2f2:	5f                   	pop    edi
c001c2f3:	bf e8 03 00 00       	mov    edi,0x3e8
c001c2f8:	5a                   	pop    edx
c001c2f9:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c2ff:	53                   	push   ebx
c001c300:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c305:	99                   	cdq    
c001c306:	f7 ff                	idiv   edi
c001c308:	99                   	cdq    
c001c309:	f7 f9                	idiv   ecx
c001c30b:	8d 42 30             	lea    eax,[edx+0x30]
c001c30e:	0f b6 c0             	movzx  eax,al
c001c311:	50                   	push   eax
c001c312:	e8 59 fd ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c317:	5f                   	pop    edi
c001c318:	bf 64 00 00 00       	mov    edi,0x64
c001c31d:	5a                   	pop    edx
c001c31e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c324:	53                   	push   ebx
c001c325:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c32a:	99                   	cdq    
c001c32b:	f7 ff                	idiv   edi
c001c32d:	99                   	cdq    
c001c32e:	f7 f9                	idiv   ecx
c001c330:	8d 42 30             	lea    eax,[edx+0x30]
c001c333:	0f b6 c0             	movzx  eax,al
c001c336:	50                   	push   eax
c001c337:	e8 34 fd ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c33c:	5a                   	pop    edx
c001c33d:	5a                   	pop    edx
c001c33e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c344:	53                   	push   ebx
c001c345:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c34a:	99                   	cdq    
c001c34b:	f7 f9                	idiv   ecx
c001c34d:	99                   	cdq    
c001c34e:	f7 f9                	idiv   ecx
c001c350:	8d 42 30             	lea    eax,[edx+0x30]
c001c353:	0f b6 c0             	movzx  eax,al
c001c356:	50                   	push   eax
c001c357:	e8 14 fd ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c35c:	5a                   	pop    edx
c001c35d:	5a                   	pop    edx
c001c35e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c364:	53                   	push   ebx
c001c365:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c36a:	99                   	cdq    
c001c36b:	f7 f9                	idiv   ecx
c001c36d:	8d 42 30             	lea    eax,[edx+0x30]
c001c370:	0f b6 c0             	movzx  eax,al
c001c373:	50                   	push   eax
c001c374:	e8 f7 fc ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c379:	5a                   	pop    edx
c001c37a:	5a                   	pop    edx
c001c37b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c381:	53                   	push   ebx
c001c382:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c387:	99                   	cdq    
c001c388:	f7 fd                	idiv   ebp
c001c38a:	99                   	cdq    
c001c38b:	f7 f9                	idiv   ecx
c001c38d:	8d 42 30             	lea    eax,[edx+0x30]
c001c390:	0f b6 c0             	movzx  eax,al
c001c393:	50                   	push   eax
c001c394:	e8 d7 fc ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c399:	5d                   	pop    ebp
c001c39a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c39f:	5a                   	pop    edx
c001c3a0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c3a6:	53                   	push   ebx
c001c3a7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3ac:	99                   	cdq    
c001c3ad:	f7 fd                	idiv   ebp
c001c3af:	99                   	cdq    
c001c3b0:	f7 f9                	idiv   ecx
c001c3b2:	8d 42 30             	lea    eax,[edx+0x30]
c001c3b5:	0f b6 c0             	movzx  eax,al
c001c3b8:	50                   	push   eax
c001c3b9:	e8 b2 fc ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c3be:	5d                   	pop    ebp
c001c3bf:	5a                   	pop    edx
c001c3c0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c3c6:	53                   	push   ebx
c001c3c7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3cc:	99                   	cdq    
c001c3cd:	f7 ff                	idiv   edi
c001c3cf:	99                   	cdq    
c001c3d0:	f7 f9                	idiv   ecx
c001c3d2:	8d 42 30             	lea    eax,[edx+0x30]
c001c3d5:	0f b6 c0             	movzx  eax,al
c001c3d8:	50                   	push   eax
c001c3d9:	e8 92 fc ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c3de:	5f                   	pop    edi
c001c3df:	5d                   	pop    ebp
c001c3e0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c3e6:	53                   	push   ebx
c001c3e7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3ec:	99                   	cdq    
c001c3ed:	f7 f9                	idiv   ecx
c001c3ef:	99                   	cdq    
c001c3f0:	f7 f9                	idiv   ecx
c001c3f2:	8d 42 30             	lea    eax,[edx+0x30]
c001c3f5:	0f b6 c0             	movzx  eax,al
c001c3f8:	50                   	push   eax
c001c3f9:	e8 72 fc ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c3fe:	5a                   	pop    edx
c001c3ff:	5f                   	pop    edi
c001c400:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c406:	53                   	push   ebx
c001c407:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c40c:	99                   	cdq    
c001c40d:	f7 f9                	idiv   ecx
c001c40f:	83 c2 30             	add    edx,0x30
c001c412:	0f b6 d2             	movzx  edx,dl
c001c415:	52                   	push   edx
c001c416:	e8 55 fc ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001c41b:	83 c4 10             	add    esp,0x10
c001c41e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c424:	eb 05                	jmp    c001c42b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c426:	be 01 00 00 00       	mov    esi,0x1
c001c42b:	83 c4 0c             	add    esp,0xc
c001c42e:	89 f0                	mov    eax,esi
c001c430:	5b                   	pop    ebx
c001c431:	5e                   	pop    esi
c001c432:	5f                   	pop    edi
c001c433:	5d                   	pop    ebp
c001c434:	c3                   	ret    
c001c435:	90                   	nop

c001c436 <ATAPI::write(unsigned long long, int, void*)>:
c001c436:	b8 03 00 00 00       	mov    eax,0x3
c001c43b:	c3                   	ret    

c001c43c <ATAPI::close(int, int, void*)>:
c001c43c:	83 ec 0c             	sub    esp,0xc
c001c43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c443:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c449:	85 c0                	test   eax,eax
c001c44b:	74 0c                	je     c001c459 <ATAPI::close(int, int, void*)+0x1d>
c001c44d:	83 ec 0c             	sub    esp,0xc
c001c450:	8b 10                	mov    edx,DWORD PTR [eax]
c001c452:	50                   	push   eax
c001c453:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c456:	83 c4 10             	add    esp,0x10
c001c459:	31 c0                	xor    eax,eax
c001c45b:	83 c4 0c             	add    esp,0xc
c001c45e:	c3                   	ret    
c001c45f:	90                   	nop

c001c460 <ATAPI::ATAPI()>:
c001c460:	83 ec 0c             	sub    esp,0xc
c001c463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c467:	83 ec 04             	sub    esp,0x4
c001c46a:	68 00 08 00 00       	push   0x800
c001c46f:	68 f1 1c 02 c0       	push   0xc0021cf1
c001c474:	50                   	push   eax
c001c475:	e8 48 fd fe ff       	call   c000c1c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c47a:	83 c4 10             	add    esp,0x10
c001c47d:	ba 0c 1c 02 c0       	mov    edx,0xc0021c0c
c001c482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c486:	89 10                	mov    DWORD PTR [eax],edx
c001c488:	90                   	nop
c001c489:	83 c4 0c             	add    esp,0xc
c001c48c:	c3                   	ret    
c001c48d:	90                   	nop

c001c48e <ATAPI::readyForCommand()>:
c001c48e:	56                   	push   esi
c001c48f:	53                   	push   ebx
c001c490:	53                   	push   ebx
c001c491:	31 db                	xor    ebx,ebx
c001c493:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c497:	51                   	push   ecx
c001c498:	6a 0c                	push   0xc
c001c49a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c4a1:	50                   	push   eax
c001c4a2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c4a8:	e8 a3 e8 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001c4ad:	83 c4 10             	add    esp,0x10
c001c4b0:	a8 88                	test   al,0x88
c001c4b2:	74 25                	je     c001c4d9 <ATAPI::readyForCommand()+0x4b>
c001c4b4:	43                   	inc    ebx
c001c4b5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c4bb:	7e da                	jle    c001c497 <ATAPI::readyForCommand()+0x9>
c001c4bd:	83 ec 0c             	sub    esp,0xc
c001c4c0:	68 5e 01 00 00       	push   0x15e
c001c4c5:	e8 0a 8f ff ff       	call   c00153d4 <milliTenthSleep(unsigned int)>
c001c4ca:	83 c4 10             	add    esp,0x10
c001c4cd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c4d3:	75 c2                	jne    c001c497 <ATAPI::readyForCommand()+0x9>
c001c4d5:	31 c0                	xor    eax,eax
c001c4d7:	eb 02                	jmp    c001c4db <ATAPI::readyForCommand()+0x4d>
c001c4d9:	b0 01                	mov    al,0x1
c001c4db:	5a                   	pop    edx
c001c4dc:	5b                   	pop    ebx
c001c4dd:	5e                   	pop    esi
c001c4de:	c3                   	ret    
c001c4df:	90                   	nop

c001c4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c4e0:	55                   	push   ebp
c001c4e1:	57                   	push   edi
c001c4e2:	56                   	push   esi
c001c4e3:	53                   	push   ebx
c001c4e4:	83 ec 20             	sub    esp,0x20
c001c4e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c4eb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c4ef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c4f3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c4f7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c4fb:	6a 01                	push   0x1
c001c4fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c504:	50                   	push   eax
c001c505:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c50b:	e8 88 e9 ff ff       	call   c001ae98 <IDE::enableIRQs(unsigned char, bool)>
c001c510:	5e                   	pop    esi
c001c511:	58                   	pop    eax
c001c512:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c519:	50                   	push   eax
c001c51a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c520:	e8 45 e7 ff ff       	call   c001ac6a <IDE::prepareInterrupt(unsigned char)>
c001c525:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c528:	e8 61 ff ff ff       	call   c001c48e <ATAPI::readyForCommand()>
c001c52d:	83 c4 10             	add    esp,0x10
c001c530:	84 c0                	test   al,al
c001c532:	75 0a                	jne    c001c53e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c534:	bb 01 00 00 00       	mov    ebx,0x1
c001c539:	e9 60 02 00 00       	jmp    c001c79e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c53e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c544:	c1 e0 04             	shl    eax,0x4
c001c547:	0f b6 c0             	movzx  eax,al
c001c54a:	50                   	push   eax
c001c54b:	6a 06                	push   0x6
c001c54d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c554:	50                   	push   eax
c001c555:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c55b:	e8 30 e7 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c560:	6a 00                	push   0x0
c001c562:	6a 01                	push   0x1
c001c564:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c56b:	50                   	push   eax
c001c56c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c572:	e8 19 e7 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c577:	83 c4 20             	add    esp,0x20
c001c57a:	0f b6 c3             	movzx  eax,bl
c001c57d:	0f b6 df             	movzx  ebx,bh
c001c580:	50                   	push   eax
c001c581:	6a 04                	push   0x4
c001c583:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c58a:	50                   	push   eax
c001c58b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c591:	e8 fa e6 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c596:	53                   	push   ebx
c001c597:	6a 05                	push   0x5
c001c599:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5a0:	50                   	push   eax
c001c5a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5a7:	e8 e4 e6 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5ac:	83 c4 20             	add    esp,0x20
c001c5af:	68 a0 00 00 00       	push   0xa0
c001c5b4:	6a 07                	push   0x7
c001c5b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5bd:	50                   	push   eax
c001c5be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5c4:	e8 c7 e6 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5c9:	83 c4 0c             	add    esp,0xc
c001c5cc:	6a 01                	push   0x1
c001c5ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5d5:	50                   	push   eax
c001c5d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5dc:	e8 97 f1 ff ff       	call   c001b778 <IDE::polling(unsigned char, unsigned int)>
c001c5e1:	83 c4 10             	add    esp,0x10
c001c5e4:	0f b6 d8             	movzx  ebx,al
c001c5e7:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c5ed:	85 db                	test   ebx,ebx
c001c5ef:	74 20                	je     c001c611 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c5f1:	53                   	push   ebx
c001c5f2:	0f b6 c0             	movzx  eax,al
c001c5f5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c5fc:	52                   	push   edx
c001c5fd:	50                   	push   eax
c001c5fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c604:	e8 b5 f0 ff ff       	call   c001b6be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	e9 8d 01 00 00       	jmp    c001c79e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c611:	0f b6 c0             	movzx  eax,al
c001c614:	53                   	push   ebx
c001c615:	53                   	push   ebx
c001c616:	50                   	push   eax
c001c617:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c61d:	e8 5c e6 ff ff       	call   c001ac7e <IDE::getBase(unsigned char)>
c001c622:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c626:	b9 06 00 00 00       	mov    ecx,0x6
c001c62b:	89 c2                	mov    edx,eax
c001c62d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c630:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c634:	83 c4 10             	add    esp,0x10
c001c637:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c63c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c640:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c646:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c64d:	85 db                	test   ebx,ebx
c001c64f:	0f 84 ec 00 00 00    	je     c001c741 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001c655:	51                   	push   ecx
c001c656:	51                   	push   ecx
c001c657:	52                   	push   edx
c001c658:	50                   	push   eax
c001c659:	e8 a0 e7 ff ff       	call   c001adfe <IDE::waitInterrupt(unsigned char)>
c001c65e:	83 c4 10             	add    esp,0x10
c001c661:	84 c0                	test   al,al
c001c663:	0f 84 cb fe ff ff    	je     c001c534 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c669:	56                   	push   esi
c001c66a:	56                   	push   esi
c001c66b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c672:	50                   	push   eax
c001c673:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c679:	e8 ec e5 ff ff       	call   c001ac6a <IDE::prepareInterrupt(unsigned char)>
c001c67e:	83 c4 0c             	add    esp,0xc
c001c681:	6a 04                	push   0x4
c001c683:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c68a:	50                   	push   eax
c001c68b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c691:	e8 ba e6 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001c696:	83 c4 0c             	add    esp,0xc
c001c699:	89 c6                	mov    esi,eax
c001c69b:	6a 05                	push   0x5
c001c69d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6a4:	50                   	push   eax
c001c6a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6ab:	e8 a0 e6 ff ff       	call   c001ad50 <IDE::read(unsigned char, unsigned char)>
c001c6b0:	89 f1                	mov    ecx,esi
c001c6b2:	0f b6 c0             	movzx  eax,al
c001c6b5:	0f b6 f1             	movzx  esi,cl
c001c6b8:	c1 e0 08             	shl    eax,0x8
c001c6bb:	09 c6                	or     esi,eax
c001c6bd:	d1 fe                	sar    esi,1
c001c6bf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001c6c3:	83 c4 10             	add    esp,0x10
c001c6c6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c6cb:	74 41                	je     c001c70e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001c6cd:	31 c9                	xor    ecx,ecx
c001c6cf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c6d5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c6dc:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001c6e0:	75 0a                	jne    c001c6ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001c6e2:	01 c9                	add    ecx,ecx
c001c6e4:	01 cd                	add    ebp,ecx
c001c6e6:	4b                   	dec    ebx
c001c6e7:	e9 54 ff ff ff       	jmp    c001c640 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001c6ec:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001c6f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c6f5:	51                   	push   ecx
c001c6f6:	51                   	push   ecx
c001c6f7:	52                   	push   edx
c001c6f8:	50                   	push   eax
c001c6f9:	e8 80 e5 ff ff       	call   c001ac7e <IDE::getBase(unsigned char)>
c001c6fe:	89 c2                	mov    edx,eax
c001c700:	89 f0                	mov    eax,esi
c001c702:	66 ef                	out    dx,ax
c001c704:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c708:	83 c4 10             	add    esp,0x10
c001c70b:	41                   	inc    ecx
c001c70c:	eb c1                	jmp    c001c6cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001c70e:	31 f6                	xor    esi,esi
c001c710:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c716:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c71d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c721:	75 06                	jne    c001c729 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001c723:	01 f6                	add    esi,esi
c001c725:	01 f5                	add    ebp,esi
c001c727:	eb bd                	jmp    c001c6e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c729:	51                   	push   ecx
c001c72a:	51                   	push   ecx
c001c72b:	52                   	push   edx
c001c72c:	50                   	push   eax
c001c72d:	e8 4c e5 ff ff       	call   c001ac7e <IDE::getBase(unsigned char)>
c001c732:	89 c2                	mov    edx,eax
c001c734:	66 ed                	in     ax,dx
c001c736:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c73b:	83 c4 10             	add    esp,0x10
c001c73e:	46                   	inc    esi
c001c73f:	eb cf                	jmp    c001c710 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001c741:	51                   	push   ecx
c001c742:	51                   	push   ecx
c001c743:	52                   	push   edx
c001c744:	50                   	push   eax
c001c745:	e8 b4 e6 ff ff       	call   c001adfe <IDE::waitInterrupt(unsigned char)>
c001c74a:	83 c4 10             	add    esp,0x10
c001c74d:	84 c0                	test   al,al
c001c74f:	0f 84 df fd ff ff    	je     c001c534 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c755:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c75a:	52                   	push   edx
c001c75b:	52                   	push   edx
c001c75c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c763:	50                   	push   eax
c001c764:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c76a:	e8 fb e4 ff ff       	call   c001ac6a <IDE::prepareInterrupt(unsigned char)>
c001c76f:	83 c4 10             	add    esp,0x10
c001c772:	50                   	push   eax
c001c773:	50                   	push   eax
c001c774:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c77b:	50                   	push   eax
c001c77c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c782:	e8 f7 e4 ff ff       	call   c001ac7e <IDE::getBase(unsigned char)>
c001c787:	8d 50 07             	lea    edx,[eax+0x7]
c001c78a:	ec                   	in     al,dx
c001c78b:	83 c4 10             	add    esp,0x10
c001c78e:	a8 88                	test   al,0x88
c001c790:	74 0a                	je     c001c79c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001c792:	4b                   	dec    ebx
c001c793:	75 dd                	jne    c001c772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001c795:	bb 02 00 00 00       	mov    ebx,0x2
c001c79a:	eb 02                	jmp    c001c79e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c79c:	31 db                	xor    ebx,ebx
c001c79e:	83 c4 1c             	add    esp,0x1c
c001c7a1:	89 d8                	mov    eax,ebx
c001c7a3:	5b                   	pop    ebx
c001c7a4:	5e                   	pop    esi
c001c7a5:	5f                   	pop    edi
c001c7a6:	5d                   	pop    ebp
c001c7a7:	c3                   	ret    

c001c7a8 <ATAPI::diskRemoved()>:
c001c7a8:	53                   	push   ebx
c001c7a9:	83 ec 14             	sub    esp,0x14
c001c7ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c7b0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c7b7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c7bd:	e8 9c 09 ff ff       	call   c000d15e <LogicalDisk::unmount()>
c001c7c2:	58                   	pop    eax
c001c7c3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c7c9:	e8 72 13 ff ff       	call   c000db40 <VCache::writeWriteBuffer()>
c001c7ce:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c7d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7d8:	83 c4 18             	add    esp,0x18
c001c7db:	5b                   	pop    ebx
c001c7dc:	e9 4f 13 ff ff       	jmp    c000db30 <VCache::invalidateReadBuffer()>
c001c7e1:	90                   	nop

c001c7e2 <ATAPI::eject()>:
c001c7e2:	57                   	push   edi
c001c7e3:	b9 03 00 00 00       	mov    ecx,0x3
c001c7e8:	53                   	push   ebx
c001c7e9:	83 ec 14             	sub    esp,0x14
c001c7ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c7f4:	fc                   	cld    
c001c7f5:	31 c0                	xor    eax,eax
c001c7f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c7f9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c7fe:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c803:	50                   	push   eax
c001c804:	50                   	push   eax
c001c805:	6a 00                	push   0x0
c001c807:	6a 00                	push   0x0
c001c809:	6a 00                	push   0x0
c001c80b:	6a 02                	push   0x2
c001c80d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c811:	50                   	push   eax
c001c812:	53                   	push   ebx
c001c813:	e8 c8 fc ff ff       	call   c001c4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c818:	83 c4 14             	add    esp,0x14
c001c81b:	53                   	push   ebx
c001c81c:	e8 87 ff ff ff       	call   c001c7a8 <ATAPI::diskRemoved()>
c001c821:	83 c4 24             	add    esp,0x24
c001c824:	31 c0                	xor    eax,eax
c001c826:	5b                   	pop    ebx
c001c827:	5f                   	pop    edi
c001c828:	c3                   	ret    
c001c829:	90                   	nop

c001c82a <ATAPI::diskInserted()>:
c001c82a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c82e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c835:	c3                   	ret    

c001c836 <ATAPI::detectMedia()>:
c001c836:	56                   	push   esi
c001c837:	53                   	push   ebx
c001c838:	83 ec 28             	sub    esp,0x28
c001c83b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c83f:	6a 0c                	push   0xc
c001c841:	6a 00                	push   0x0
c001c843:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c847:	56                   	push   esi
c001c848:	e8 a3 3c fe ff       	call   c00004f0 <memset>
c001c84d:	58                   	pop    eax
c001c84e:	5a                   	pop    edx
c001c84f:	6a 00                	push   0x0
c001c851:	6a 00                	push   0x0
c001c853:	6a 00                	push   0x0
c001c855:	6a 00                	push   0x0
c001c857:	56                   	push   esi
c001c858:	53                   	push   ebx
c001c859:	e8 82 fc ff ff       	call   c001c4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c85e:	83 c4 1c             	add    esp,0x1c
c001c861:	6a 0c                	push   0xc
c001c863:	6a 00                	push   0x0
c001c865:	56                   	push   esi
c001c866:	e8 85 3c fe ff       	call   c00004f0 <memset>
c001c86b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c870:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c875:	59                   	pop    ecx
c001c876:	58                   	pop    eax
c001c877:	6a 01                	push   0x1
c001c879:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c87d:	50                   	push   eax
c001c87e:	6a 00                	push   0x0
c001c880:	6a 12                	push   0x12
c001c882:	56                   	push   esi
c001c883:	53                   	push   ebx
c001c884:	e8 57 fc ff ff       	call   c001c4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c889:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c88d:	83 c4 20             	add    esp,0x20
c001c890:	83 e0 7f             	and    eax,0x7f
c001c893:	83 f8 70             	cmp    eax,0x70
c001c896:	74 15                	je     c001c8ad <ATAPI::detectMedia()+0x77>
c001c898:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c89f:	75 0c                	jne    c001c8ad <ATAPI::detectMedia()+0x77>
c001c8a1:	83 ec 0c             	sub    esp,0xc
c001c8a4:	53                   	push   ebx
c001c8a5:	e8 80 ff ff ff       	call   c001c82a <ATAPI::diskInserted()>
c001c8aa:	83 c4 10             	add    esp,0x10
c001c8ad:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c8b1:	83 e0 0f             	and    eax,0xf
c001c8b4:	83 f8 02             	cmp    eax,0x2
c001c8b7:	75 1b                	jne    c001c8d4 <ATAPI::detectMedia()+0x9e>
c001c8b9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c8be:	75 2d                	jne    c001c8ed <ATAPI::detectMedia()+0xb7>
c001c8c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8c7:	74 24                	je     c001c8ed <ATAPI::detectMedia()+0xb7>
c001c8c9:	83 ec 0c             	sub    esp,0xc
c001c8cc:	53                   	push   ebx
c001c8cd:	e8 d6 fe ff ff       	call   c001c7a8 <ATAPI::diskRemoved()>
c001c8d2:	eb 16                	jmp    c001c8ea <ATAPI::detectMedia()+0xb4>
c001c8d4:	85 c0                	test   eax,eax
c001c8d6:	75 15                	jne    c001c8ed <ATAPI::detectMedia()+0xb7>
c001c8d8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8df:	75 0c                	jne    c001c8ed <ATAPI::detectMedia()+0xb7>
c001c8e1:	83 ec 0c             	sub    esp,0xc
c001c8e4:	53                   	push   ebx
c001c8e5:	e8 40 ff ff ff       	call   c001c82a <ATAPI::diskInserted()>
c001c8ea:	83 c4 10             	add    esp,0x10
c001c8ed:	83 c4 24             	add    esp,0x24
c001c8f0:	5b                   	pop    ebx
c001c8f1:	5e                   	pop    esi
c001c8f2:	c3                   	ret    
c001c8f3:	90                   	nop

c001c8f4 <ATAPI::open(int, int, void*)>:
c001c8f4:	56                   	push   esi
c001c8f5:	53                   	push   ebx
c001c8f6:	50                   	push   eax
c001c8f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c903:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c909:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c90f:	c1 e0 06             	shl    eax,0x6
c001c912:	01 d0                	add    eax,edx
c001c914:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c91b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c921:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c928:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c932:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c938:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c93f:	6a 04                	push   0x4
c001c941:	6a 0c                	push   0xc
c001c943:	51                   	push   ecx
c001c944:	52                   	push   edx
c001c945:	e8 46 e3 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c94a:	90                   	nop
c001c94b:	90                   	nop
c001c94c:	6a 00                	push   0x0
c001c94e:	6a 0c                	push   0xc
c001c950:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c957:	50                   	push   eax
c001c958:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c95e:	e8 2d e3 ff ff       	call   c001ac90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c963:	83 c4 14             	add    esp,0x14
c001c966:	68 78 01 00 00       	push   0x178
c001c96b:	e8 3e b1 fe ff       	call   c0007aae <malloc>
c001c970:	83 c4 0c             	add    esp,0xc
c001c973:	89 c6                	mov    esi,eax
c001c975:	6a 00                	push   0x0
c001c977:	68 ff ff ff 7f       	push   0x7fffffff
c001c97c:	6a 00                	push   0x0
c001c97e:	6a 00                	push   0x0
c001c980:	53                   	push   ebx
c001c981:	68 a3 1d 02 c0       	push   0xc0021da3
c001c986:	50                   	push   eax
c001c987:	e8 10 06 ff ff       	call   c000cf9c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c98c:	83 c4 14             	add    esp,0x14
c001c98f:	56                   	push   esi
c001c990:	e8 c7 06 ff ff       	call   c000d05c <LogicalDisk::assignDriveLetter()>
c001c995:	5a                   	pop    edx
c001c996:	0f be c0             	movsx  eax,al
c001c999:	59                   	pop    ecx
c001c99a:	50                   	push   eax
c001c99b:	68 f4 1b 02 c0       	push   0xc0021bf4
c001c9a0:	e8 1d e0 fe ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001c9a5:	58                   	pop    eax
c001c9a6:	5a                   	pop    edx
c001c9a7:	56                   	push   esi
c001c9a8:	53                   	push   ebx
c001c9a9:	e8 48 f4 fe ff       	call   c000bdf6 <Device::addChild(Device*)>
c001c9ae:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c9b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9b7:	e8 6e f8 fe ff       	call   c000c22a <PhysicalDisk::startCache()>
c001c9bc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c9c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9c6:	e8 6b fe ff ff       	call   c001c836 <ATAPI::detectMedia()>
c001c9cb:	83 c4 14             	add    esp,0x14
c001c9ce:	31 c0                	xor    eax,eax
c001c9d0:	5b                   	pop    ebx
c001c9d1:	5e                   	pop    esi
c001c9d2:	c3                   	ret    
c001c9d3:	90                   	nop

c001c9d4 <ATAPI::read(unsigned long long, int, void*)>:
c001c9d4:	55                   	push   ebp
c001c9d5:	57                   	push   edi
c001c9d6:	56                   	push   esi
c001c9d7:	53                   	push   ebx
c001c9d8:	83 ec 1c             	sub    esp,0x1c
c001c9db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c9df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c9e3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c9e7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c9ee:	74 3c                	je     c001ca2c <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c9f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c9f4:	b9 03 00 00 00       	mov    ecx,0x3
c001c9f9:	fc                   	cld    
c001c9fa:	31 c0                	xor    eax,eax
c001c9fc:	0f ce                	bswap  esi
c001c9fe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ca00:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ca05:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ca09:	89 e8                	mov    eax,ebp
c001ca0b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ca0f:	50                   	push   eax
c001ca10:	50                   	push   eax
c001ca11:	55                   	push   ebp
c001ca12:	c1 e5 0b             	shl    ebp,0xb
c001ca15:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca19:	6a 00                	push   0x0
c001ca1b:	55                   	push   ebp
c001ca1c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca20:	50                   	push   eax
c001ca21:	53                   	push   ebx
c001ca22:	e8 b9 fa ff ff       	call   c001c4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ca27:	83 c4 20             	add    esp,0x20
c001ca2a:	eb 1a                	jmp    c001ca46 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ca2c:	83 ec 0c             	sub    esp,0xc
c001ca2f:	53                   	push   ebx
c001ca30:	e8 01 fe ff ff       	call   c001c836 <ATAPI::detectMedia()>
c001ca35:	83 c4 10             	add    esp,0x10
c001ca38:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca3f:	75 af                	jne    c001c9f0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ca41:	b8 02 00 00 00       	mov    eax,0x2
c001ca46:	83 c4 1c             	add    esp,0x1c
c001ca49:	5b                   	pop    ebx
c001ca4a:	5e                   	pop    esi
c001ca4b:	5f                   	pop    edi
c001ca4c:	5d                   	pop    ebp
c001ca4d:	c3                   	ret    

c001ca4e <SATA::close(int, int, void*)>:
c001ca4e:	83 ec 0c             	sub    esp,0xc
c001ca51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca5b:	85 c0                	test   eax,eax
c001ca5d:	74 0c                	je     c001ca6b <SATA::close(int, int, void*)+0x1d>
c001ca5f:	83 ec 0c             	sub    esp,0xc
c001ca62:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca64:	50                   	push   eax
c001ca65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca68:	83 c4 10             	add    esp,0x10
c001ca6b:	31 c0                	xor    eax,eax
c001ca6d:	83 c4 0c             	add    esp,0xc
c001ca70:	c3                   	ret    
c001ca71:	90                   	nop

c001ca72 <SATA::powerSaving(PowerSavingLevel)>:
c001ca72:	c3                   	ret    
c001ca73:	90                   	nop

c001ca74 <SATA::open(int, int, void*)>:
c001ca74:	56                   	push   esi
c001ca75:	53                   	push   ebx
c001ca76:	50                   	push   eax
c001ca77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca7f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ca89:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ca8f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ca99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca9d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001caa7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001caad:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cab4:	e8 fa b2 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001cab9:	89 c6                	mov    esi,eax
c001cabb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cac1:	81 c6 00 10 00 00    	add    esi,0x1000
c001cac7:	e8 e7 b2 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001cacc:	39 c6                	cmp    esi,eax
c001cace:	74 10                	je     c001cae0 <SATA::open(int, int, void*)+0x6c>
c001cad0:	83 ec 0c             	sub    esp,0xc
c001cad3:	68 3c 1c 02 c0       	push   0xc0021c3c
c001cad8:	e8 12 3e ff ff       	call   c00108ef <KePanic(char const*)>
c001cadd:	83 c4 10             	add    esp,0x10
c001cae0:	83 ec 0c             	sub    esp,0xc
c001cae3:	6a 02                	push   0x2
c001cae5:	e8 33 cb fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001caea:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001caf0:	6a 03                	push   0x3
c001caf2:	50                   	push   eax
c001caf3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001caf9:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001caff:	e8 00 d2 fe ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cb04:	83 c4 14             	add    esp,0x14
c001cb07:	53                   	push   ebx
c001cb08:	e8 1d f7 fe ff       	call   c000c22a <PhysicalDisk::startCache()>
c001cb0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb10:	e8 59 09 ff ff       	call   c000d46e <createPartitionsForDisk(PhysicalDisk*)>
c001cb15:	83 c4 14             	add    esp,0x14
c001cb18:	31 c0                	xor    eax,eax
c001cb1a:	5b                   	pop    ebx
c001cb1b:	5e                   	pop    esi
c001cb1c:	c3                   	ret    
c001cb1d:	90                   	nop

c001cb1e <SATA::SATA()>:
c001cb1e:	83 ec 0c             	sub    esp,0xc
c001cb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb25:	83 ec 04             	sub    esp,0x4
c001cb28:	68 00 02 00 00       	push   0x200
c001cb2d:	68 50 1c 02 c0       	push   0xc0021c50
c001cb32:	50                   	push   eax
c001cb33:	e8 8a f6 fe ff       	call   c000c1c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb38:	83 c4 10             	add    esp,0x10
c001cb3b:	ba c0 1c 02 c0       	mov    edx,0xc0021cc0
c001cb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb44:	89 10                	mov    DWORD PTR [eax],edx
c001cb46:	90                   	nop
c001cb47:	83 c4 0c             	add    esp,0xc
c001cb4a:	c3                   	ret    
c001cb4b:	90                   	nop

c001cb4c <SATA::access(unsigned long long, int, void*, bool)>:
c001cb4c:	55                   	push   ebp
c001cb4d:	57                   	push   edi
c001cb4e:	56                   	push   esi
c001cb4f:	53                   	push   ebx
c001cb50:	83 ec 2c             	sub    esp,0x2c
c001cb53:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cb57:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cb5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb5f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cb63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cb67:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cb6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb70:	7e 10                	jle    c001cb82 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001cb72:	83 ec 0c             	sub    esp,0xc
c001cb75:	68 60 1c 02 c0       	push   0xc0021c60
c001cb7a:	e8 70 3d ff ff       	call   c00108ef <KePanic(char const*)>
c001cb7f:	83 c4 10             	add    esp,0x10
c001cb82:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb88:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cb8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cb94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb98:	89 d0                	mov    eax,edx
c001cb9a:	c1 e0 07             	shl    eax,0x7
c001cb9d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cba1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cbab:	51                   	push   ecx
c001cbac:	8d 42 02             	lea    eax,[edx+0x2]
c001cbaf:	51                   	push   ecx
c001cbb0:	c1 e0 07             	shl    eax,0x7
c001cbb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cbb7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cbbb:	50                   	push   eax
c001cbbc:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cbc2:	e8 91 ec ff ff       	call   c001b858 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cbc7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbcb:	83 c4 10             	add    esp,0x10
c001cbce:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cbd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbd7:	0f 84 57 01 00 00    	je     c001cd34 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cbdd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cbe1:	c1 e0 09             	shl    eax,0x9
c001cbe4:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cbe9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbed:	74 0e                	je     c001cbfd <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cbef:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cbf5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cbf9:	89 c1                	mov    ecx,eax
c001cbfb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cbfd:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cc07:	8d 42 02             	lea    eax,[edx+0x2]
c001cc0a:	c1 e0 07             	shl    eax,0x7
c001cc0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cc11:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc13:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cc19:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cc1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc23:	c1 e1 05             	shl    ecx,0x5
c001cc26:	01 c8                	add    eax,ecx
c001cc28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc2c:	83 e1 01             	and    ecx,0x1
c001cc2f:	89 ce                	mov    esi,ecx
c001cc31:	8a 08                	mov    cl,BYTE PTR [eax]
c001cc33:	c1 e6 06             	shl    esi,0x6
c001cc36:	83 e1 bf             	and    ecx,0xffffffbf
c001cc39:	09 f1                	or     ecx,esi
c001cc3b:	88 08                	mov    BYTE PTR [eax],cl
c001cc3d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc3f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cc45:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cc4b:	89 08                	mov    DWORD PTR [eax],ecx
c001cc4d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc53:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cc59:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cc5f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cc62:	50                   	push   eax
c001cc63:	68 90 00 00 00       	push   0x90
c001cc68:	6a 00                	push   0x0
c001cc6a:	56                   	push   esi
c001cc6b:	e8 80 38 fe ff       	call   c00004f0 <memset>
c001cc70:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cc76:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cc7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc80:	83 c4 10             	add    esp,0x10
c001cc83:	48                   	dec    eax
c001cc84:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cc89:	89 c1                	mov    ecx,eax
c001cc8b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cc91:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc96:	09 c8                	or     eax,ecx
c001cc98:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cc9e:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cca4:	83 c8 80             	or     eax,0xffffff80
c001cca7:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001ccad:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ccb0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccb4:	25 00 7f 00 00       	and    eax,0x7f00
c001ccb9:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ccbe:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ccc3:	66 89 06             	mov    WORD PTR [esi],ax
c001ccc6:	b0 35                	mov    al,0x35
c001ccc8:	75 02                	jne    c001cccc <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001ccca:	b0 25                	mov    al,0x25
c001cccc:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cccf:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ccd3:	89 e8                	mov    eax,ebp
c001ccd5:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ccd9:	c1 e8 10             	shr    eax,0x10
c001ccdc:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ccdf:	89 e8                	mov    eax,ebp
c001cce1:	c1 e8 18             	shr    eax,0x18
c001cce4:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cce7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cceb:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ccee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccf2:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ccf5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ccf9:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ccfd:	89 d6                	mov    esi,edx
c001ccff:	31 c0                	xor    eax,eax
c001cd01:	c1 e6 07             	shl    esi,0x7
c001cd04:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd08:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cd0e:	80 e1 88             	and    cl,0x88
c001cd11:	74 0a                	je     c001cd1d <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cd13:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd18:	74 0a                	je     c001cd24 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cd1a:	40                   	inc    eax
c001cd1b:	eb eb                	jmp    c001cd08 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cd1d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd22:	75 17                	jne    c001cd3b <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cd24:	83 ec 0c             	sub    esp,0xc
c001cd27:	68 99 1c 02 c0       	push   0xc0021c99
c001cd2c:	e8 91 dc fe ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001cd31:	83 c4 10             	add    esp,0x10
c001cd34:	b8 01 00 00 00       	mov    eax,0x1
c001cd39:	eb 5d                	jmp    c001cd98 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cd3b:	b8 01 00 00 00       	mov    eax,0x1
c001cd40:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cd44:	c1 e2 07             	shl    edx,0x7
c001cd47:	d3 e0                	shl    eax,cl
c001cd49:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001cd4d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cd53:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cd59:	85 c8                	test   eax,ecx
c001cd5b:	74 16                	je     c001cd73 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001cd5d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cd63:	0f ba e1 1e          	bt     ecx,0x1e
c001cd67:	73 ea                	jae    c001cd53 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001cd69:	83 ec 0c             	sub    esp,0xc
c001cd6c:	68 a7 1c 02 c0       	push   0xc0021ca7
c001cd71:	eb b9                	jmp    c001cd2c <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cd73:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cd79:	0f ba e0 1e          	bt     eax,0x1e
c001cd7d:	72 b5                	jb     c001cd34 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cd7f:	31 c0                	xor    eax,eax
c001cd81:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cd86:	75 10                	jne    c001cd98 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cd88:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cd8e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cd92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cd96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd98:	83 c4 2c             	add    esp,0x2c
c001cd9b:	5b                   	pop    ebx
c001cd9c:	5e                   	pop    esi
c001cd9d:	5f                   	pop    edi
c001cd9e:	5d                   	pop    ebp
c001cd9f:	c3                   	ret    

c001cda0 <SATA::read(unsigned long long, int, void*)>:
c001cda0:	55                   	push   ebp
c001cda1:	57                   	push   edi
c001cda2:	56                   	push   esi
c001cda3:	be 04 00 00 00       	mov    esi,0x4
c001cda8:	53                   	push   ebx
c001cda9:	83 ec 0c             	sub    esp,0xc
c001cdac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdb4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdb7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdbb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdbf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdc5:	0f 87 1a 02 00 00    	ja     c001cfe5 <SATA::read(unsigned long long, int, void*)+0x245>
c001cdcb:	be 06 00 00 00       	mov    esi,0x6
c001cdd0:	85 c9                	test   ecx,ecx
c001cdd2:	0f 84 0d 02 00 00    	je     c001cfe5 <SATA::read(unsigned long long, int, void*)+0x245>
c001cdd8:	56                   	push   esi
c001cdd9:	56                   	push   esi
c001cdda:	6a 00                	push   0x0
c001cddc:	51                   	push   ecx
c001cddd:	53                   	push   ebx
c001cdde:	52                   	push   edx
c001cddf:	50                   	push   eax
c001cde0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cde4:	e8 63 fd ff ff       	call   c001cb4c <SATA::access(unsigned long long, int, void*, bool)>
c001cde9:	83 c4 20             	add    esp,0x20
c001cdec:	89 c6                	mov    esi,eax
c001cdee:	85 c0                	test   eax,eax
c001cdf0:	0f 85 ea 01 00 00    	jne    c001cfe0 <SATA::read(unsigned long long, int, void*)+0x240>
c001cdf6:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cdfc:	bb 0a 00 00 00       	mov    ebx,0xa
c001ce01:	50                   	push   eax
c001ce02:	50                   	push   eax
c001ce03:	6a 0f                	push   0xf
c001ce05:	6a 00                	push   0x0
c001ce07:	e8 75 f2 ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001ce0c:	5a                   	pop    edx
c001ce0d:	0f b6 c0             	movzx  eax,al
c001ce10:	59                   	pop    ecx
c001ce11:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce16:	50                   	push   eax
c001ce17:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce1c:	99                   	cdq    
c001ce1d:	f7 f9                	idiv   ecx
c001ce1f:	99                   	cdq    
c001ce20:	f7 fb                	idiv   ebx
c001ce22:	8d 42 30             	lea    eax,[edx+0x30]
c001ce25:	0f b6 c0             	movzx  eax,al
c001ce28:	50                   	push   eax
c001ce29:	e8 42 f2 ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001ce2e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce34:	5f                   	pop    edi
c001ce35:	5d                   	pop    ebp
c001ce36:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce3b:	6a 0f                	push   0xf
c001ce3d:	6a 00                	push   0x0
c001ce3f:	e8 3d f2 ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001ce44:	5a                   	pop    edx
c001ce45:	0f b6 c0             	movzx  eax,al
c001ce48:	59                   	pop    ecx
c001ce49:	50                   	push   eax
c001ce4a:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce4f:	99                   	cdq    
c001ce50:	f7 fd                	idiv   ebp
c001ce52:	99                   	cdq    
c001ce53:	f7 fb                	idiv   ebx
c001ce55:	8d 42 30             	lea    eax,[edx+0x30]
c001ce58:	0f b6 c0             	movzx  eax,al
c001ce5b:	50                   	push   eax
c001ce5c:	e8 0f f2 ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001ce61:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce67:	5f                   	pop    edi
c001ce68:	bf 64 00 00 00       	mov    edi,0x64
c001ce6d:	58                   	pop    eax
c001ce6e:	6a 0f                	push   0xf
c001ce70:	6a 00                	push   0x0
c001ce72:	e8 0a f2 ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001ce77:	5a                   	pop    edx
c001ce78:	0f b6 c0             	movzx  eax,al
c001ce7b:	59                   	pop    ecx
c001ce7c:	50                   	push   eax
c001ce7d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce82:	99                   	cdq    
c001ce83:	f7 ff                	idiv   edi
c001ce85:	99                   	cdq    
c001ce86:	f7 fb                	idiv   ebx
c001ce88:	8d 42 30             	lea    eax,[edx+0x30]
c001ce8b:	0f b6 c0             	movzx  eax,al
c001ce8e:	50                   	push   eax
c001ce8f:	e8 dc f1 ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001ce94:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce9a:	58                   	pop    eax
c001ce9b:	5a                   	pop    edx
c001ce9c:	6a 0f                	push   0xf
c001ce9e:	6a 00                	push   0x0
c001cea0:	e8 dc f1 ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001cea5:	59                   	pop    ecx
c001cea6:	0f b6 c0             	movzx  eax,al
c001cea9:	5a                   	pop    edx
c001ceaa:	50                   	push   eax
c001ceab:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ceb0:	99                   	cdq    
c001ceb1:	f7 fb                	idiv   ebx
c001ceb3:	99                   	cdq    
c001ceb4:	f7 fb                	idiv   ebx
c001ceb6:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb9:	0f b6 c0             	movzx  eax,al
c001cebc:	50                   	push   eax
c001cebd:	e8 ae f1 ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001cec2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cec8:	59                   	pop    ecx
c001cec9:	58                   	pop    eax
c001ceca:	6a 0f                	push   0xf
c001cecc:	6a 00                	push   0x0
c001cece:	e8 ae f1 ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001ced3:	5a                   	pop    edx
c001ced4:	0f b6 c0             	movzx  eax,al
c001ced7:	59                   	pop    ecx
c001ced8:	50                   	push   eax
c001ced9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cede:	99                   	cdq    
c001cedf:	f7 fb                	idiv   ebx
c001cee1:	8d 42 30             	lea    eax,[edx+0x30]
c001cee4:	0f b6 c0             	movzx  eax,al
c001cee7:	50                   	push   eax
c001cee8:	e8 83 f1 ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001ceed:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cef3:	58                   	pop    eax
c001cef4:	5a                   	pop    edx
c001cef5:	6a 0f                	push   0xf
c001cef7:	6a 00                	push   0x0
c001cef9:	e8 83 f1 ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001cefe:	59                   	pop    ecx
c001ceff:	0f b6 c0             	movzx  eax,al
c001cf02:	5a                   	pop    edx
c001cf03:	b9 10 27 00 00       	mov    ecx,0x2710
c001cf08:	50                   	push   eax
c001cf09:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf0e:	99                   	cdq    
c001cf0f:	f7 f9                	idiv   ecx
c001cf11:	99                   	cdq    
c001cf12:	f7 fb                	idiv   ebx
c001cf14:	8d 42 30             	lea    eax,[edx+0x30]
c001cf17:	0f b6 c0             	movzx  eax,al
c001cf1a:	50                   	push   eax
c001cf1b:	e8 50 f1 ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001cf20:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf26:	59                   	pop    ecx
c001cf27:	58                   	pop    eax
c001cf28:	6a 0f                	push   0xf
c001cf2a:	6a 00                	push   0x0
c001cf2c:	e8 50 f1 ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001cf31:	5a                   	pop    edx
c001cf32:	0f b6 c0             	movzx  eax,al
c001cf35:	59                   	pop    ecx
c001cf36:	50                   	push   eax
c001cf37:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf3c:	99                   	cdq    
c001cf3d:	f7 fd                	idiv   ebp
c001cf3f:	99                   	cdq    
c001cf40:	f7 fb                	idiv   ebx
c001cf42:	8d 42 30             	lea    eax,[edx+0x30]
c001cf45:	0f b6 c0             	movzx  eax,al
c001cf48:	50                   	push   eax
c001cf49:	e8 22 f1 ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001cf4e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf54:	5d                   	pop    ebp
c001cf55:	58                   	pop    eax
c001cf56:	6a 0f                	push   0xf
c001cf58:	6a 00                	push   0x0
c001cf5a:	e8 22 f1 ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001cf5f:	5a                   	pop    edx
c001cf60:	0f b6 c0             	movzx  eax,al
c001cf63:	59                   	pop    ecx
c001cf64:	50                   	push   eax
c001cf65:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf6a:	99                   	cdq    
c001cf6b:	f7 ff                	idiv   edi
c001cf6d:	99                   	cdq    
c001cf6e:	f7 fb                	idiv   ebx
c001cf70:	8d 42 30             	lea    eax,[edx+0x30]
c001cf73:	0f b6 c0             	movzx  eax,al
c001cf76:	50                   	push   eax
c001cf77:	e8 f4 f0 ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001cf7c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf82:	5f                   	pop    edi
c001cf83:	5d                   	pop    ebp
c001cf84:	6a 0f                	push   0xf
c001cf86:	6a 00                	push   0x0
c001cf88:	e8 f4 f0 ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001cf8d:	5a                   	pop    edx
c001cf8e:	0f b6 c0             	movzx  eax,al
c001cf91:	59                   	pop    ecx
c001cf92:	50                   	push   eax
c001cf93:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf98:	99                   	cdq    
c001cf99:	f7 fb                	idiv   ebx
c001cf9b:	99                   	cdq    
c001cf9c:	f7 fb                	idiv   ebx
c001cf9e:	8d 42 30             	lea    eax,[edx+0x30]
c001cfa1:	0f b6 c0             	movzx  eax,al
c001cfa4:	50                   	push   eax
c001cfa5:	e8 c6 f0 ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001cfaa:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cfb0:	5f                   	pop    edi
c001cfb1:	5d                   	pop    ebp
c001cfb2:	6a 0f                	push   0xf
c001cfb4:	6a 00                	push   0x0
c001cfb6:	e8 c6 f0 ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001cfbb:	5a                   	pop    edx
c001cfbc:	0f b6 c0             	movzx  eax,al
c001cfbf:	59                   	pop    ecx
c001cfc0:	50                   	push   eax
c001cfc1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfc6:	99                   	cdq    
c001cfc7:	f7 fb                	idiv   ebx
c001cfc9:	83 c2 30             	add    edx,0x30
c001cfcc:	0f b6 d2             	movzx  edx,dl
c001cfcf:	52                   	push   edx
c001cfd0:	e8 9b f0 ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001cfd5:	83 c4 10             	add    esp,0x10
c001cfd8:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cfde:	eb 05                	jmp    c001cfe5 <SATA::read(unsigned long long, int, void*)+0x245>
c001cfe0:	be 01 00 00 00       	mov    esi,0x1
c001cfe5:	83 c4 0c             	add    esp,0xc
c001cfe8:	89 f0                	mov    eax,esi
c001cfea:	5b                   	pop    ebx
c001cfeb:	5e                   	pop    esi
c001cfec:	5f                   	pop    edi
c001cfed:	5d                   	pop    ebp
c001cfee:	c3                   	ret    
c001cfef:	90                   	nop

c001cff0 <SATA::write(unsigned long long, int, void*)>:
c001cff0:	55                   	push   ebp
c001cff1:	b8 04 00 00 00       	mov    eax,0x4
c001cff6:	57                   	push   edi
c001cff7:	56                   	push   esi
c001cff8:	53                   	push   ebx
c001cff9:	83 ec 1c             	sub    esp,0x1c
c001cffc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d000:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d004:	8d 75 ff             	lea    esi,[ebp-0x1]
c001d007:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d00b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d00f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d015:	0f 87 32 02 00 00    	ja     c001d24d <SATA::write(unsigned long long, int, void*)+0x25d>
c001d01b:	b8 06 00 00 00       	mov    eax,0x6
c001d020:	85 ff                	test   edi,edi
c001d022:	0f 84 25 02 00 00    	je     c001d24d <SATA::write(unsigned long long, int, void*)+0x25d>
c001d028:	89 ee                	mov    esi,ebp
c001d02a:	c1 e6 09             	shl    esi,0x9
c001d02d:	01 fe                	add    esi,edi
c001d02f:	89 c8                	mov    eax,ecx
c001d031:	89 da                	mov    edx,ebx
c001d033:	83 c0 01             	add    eax,0x1
c001d036:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d03a:	83 d2 00             	adc    edx,0x0
c001d03d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d041:	50                   	push   eax
c001d042:	50                   	push   eax
c001d043:	6a 01                	push   0x1
c001d045:	57                   	push   edi
c001d046:	81 c7 00 02 00 00    	add    edi,0x200
c001d04c:	6a 01                	push   0x1
c001d04e:	53                   	push   ebx
c001d04f:	51                   	push   ecx
c001d050:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d054:	e8 f3 fa ff ff       	call   c001cb4c <SATA::access(unsigned long long, int, void*, bool)>
c001d059:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d05d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d061:	83 c4 20             	add    esp,0x20
c001d064:	39 f7                	cmp    edi,esi
c001d066:	75 c7                	jne    c001d02f <SATA::write(unsigned long long, int, void*)+0x3f>
c001d068:	bb 0a 00 00 00       	mov    ebx,0xa
c001d06d:	01 2d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebp
c001d073:	bd 10 27 00 00       	mov    ebp,0x2710
c001d078:	50                   	push   eax
c001d079:	50                   	push   eax
c001d07a:	6a 0f                	push   0xf
c001d07c:	6a 00                	push   0x0
c001d07e:	e8 fe ef ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001d083:	5a                   	pop    edx
c001d084:	0f b6 c0             	movzx  eax,al
c001d087:	59                   	pop    ecx
c001d088:	50                   	push   eax
c001d089:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d08e:	99                   	cdq    
c001d08f:	f7 fd                	idiv   ebp
c001d091:	99                   	cdq    
c001d092:	f7 fb                	idiv   ebx
c001d094:	8d 42 30             	lea    eax,[edx+0x30]
c001d097:	0f b6 c0             	movzx  eax,al
c001d09a:	50                   	push   eax
c001d09b:	e8 d0 ef ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001d0a0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d0a6:	5e                   	pop    esi
c001d0a7:	5f                   	pop    edi
c001d0a8:	bf e8 03 00 00       	mov    edi,0x3e8
c001d0ad:	6a 0f                	push   0xf
c001d0af:	6a 00                	push   0x0
c001d0b1:	e8 cb ef ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001d0b6:	5a                   	pop    edx
c001d0b7:	0f b6 c0             	movzx  eax,al
c001d0ba:	59                   	pop    ecx
c001d0bb:	50                   	push   eax
c001d0bc:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0c1:	99                   	cdq    
c001d0c2:	f7 ff                	idiv   edi
c001d0c4:	99                   	cdq    
c001d0c5:	f7 fb                	idiv   ebx
c001d0c7:	8d 42 30             	lea    eax,[edx+0x30]
c001d0ca:	0f b6 c0             	movzx  eax,al
c001d0cd:	50                   	push   eax
c001d0ce:	e8 9d ef ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001d0d3:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d0d9:	5e                   	pop    esi
c001d0da:	be 64 00 00 00       	mov    esi,0x64
c001d0df:	58                   	pop    eax
c001d0e0:	6a 0f                	push   0xf
c001d0e2:	6a 00                	push   0x0
c001d0e4:	e8 98 ef ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001d0e9:	5a                   	pop    edx
c001d0ea:	0f b6 c0             	movzx  eax,al
c001d0ed:	59                   	pop    ecx
c001d0ee:	50                   	push   eax
c001d0ef:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0f4:	99                   	cdq    
c001d0f5:	f7 fe                	idiv   esi
c001d0f7:	99                   	cdq    
c001d0f8:	f7 fb                	idiv   ebx
c001d0fa:	8d 42 30             	lea    eax,[edx+0x30]
c001d0fd:	0f b6 c0             	movzx  eax,al
c001d100:	50                   	push   eax
c001d101:	e8 6a ef ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001d106:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d10c:	58                   	pop    eax
c001d10d:	5a                   	pop    edx
c001d10e:	6a 0f                	push   0xf
c001d110:	6a 00                	push   0x0
c001d112:	e8 6a ef ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001d117:	59                   	pop    ecx
c001d118:	0f b6 c0             	movzx  eax,al
c001d11b:	5a                   	pop    edx
c001d11c:	50                   	push   eax
c001d11d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d122:	99                   	cdq    
c001d123:	f7 fb                	idiv   ebx
c001d125:	99                   	cdq    
c001d126:	f7 fb                	idiv   ebx
c001d128:	8d 42 30             	lea    eax,[edx+0x30]
c001d12b:	0f b6 c0             	movzx  eax,al
c001d12e:	50                   	push   eax
c001d12f:	e8 3c ef ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001d134:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d13a:	59                   	pop    ecx
c001d13b:	58                   	pop    eax
c001d13c:	6a 0f                	push   0xf
c001d13e:	6a 00                	push   0x0
c001d140:	e8 3c ef ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001d145:	5a                   	pop    edx
c001d146:	0f b6 c0             	movzx  eax,al
c001d149:	59                   	pop    ecx
c001d14a:	50                   	push   eax
c001d14b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d150:	99                   	cdq    
c001d151:	f7 fb                	idiv   ebx
c001d153:	83 c2 30             	add    edx,0x30
c001d156:	0f b6 d2             	movzx  edx,dl
c001d159:	52                   	push   edx
c001d15a:	e8 11 ef ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001d15f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d165:	58                   	pop    eax
c001d166:	5a                   	pop    edx
c001d167:	6a 0f                	push   0xf
c001d169:	6a 00                	push   0x0
c001d16b:	e8 11 ef ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001d170:	59                   	pop    ecx
c001d171:	0f b6 c0             	movzx  eax,al
c001d174:	5a                   	pop    edx
c001d175:	50                   	push   eax
c001d176:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d17b:	99                   	cdq    
c001d17c:	f7 fd                	idiv   ebp
c001d17e:	99                   	cdq    
c001d17f:	f7 fb                	idiv   ebx
c001d181:	8d 42 30             	lea    eax,[edx+0x30]
c001d184:	0f b6 c0             	movzx  eax,al
c001d187:	50                   	push   eax
c001d188:	e8 e3 ee ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001d18d:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d193:	59                   	pop    ecx
c001d194:	5d                   	pop    ebp
c001d195:	6a 0f                	push   0xf
c001d197:	6a 00                	push   0x0
c001d199:	e8 e3 ee ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001d19e:	5a                   	pop    edx
c001d19f:	0f b6 c0             	movzx  eax,al
c001d1a2:	59                   	pop    ecx
c001d1a3:	50                   	push   eax
c001d1a4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1a9:	99                   	cdq    
c001d1aa:	f7 ff                	idiv   edi
c001d1ac:	99                   	cdq    
c001d1ad:	f7 fb                	idiv   ebx
c001d1af:	8d 42 30             	lea    eax,[edx+0x30]
c001d1b2:	0f b6 c0             	movzx  eax,al
c001d1b5:	50                   	push   eax
c001d1b6:	e8 b5 ee ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001d1bb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d1c1:	5f                   	pop    edi
c001d1c2:	5d                   	pop    ebp
c001d1c3:	6a 0f                	push   0xf
c001d1c5:	6a 00                	push   0x0
c001d1c7:	e8 b5 ee ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001d1cc:	5a                   	pop    edx
c001d1cd:	0f b6 c0             	movzx  eax,al
c001d1d0:	59                   	pop    ecx
c001d1d1:	50                   	push   eax
c001d1d2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1d7:	99                   	cdq    
c001d1d8:	f7 fe                	idiv   esi
c001d1da:	99                   	cdq    
c001d1db:	f7 fb                	idiv   ebx
c001d1dd:	8d 42 30             	lea    eax,[edx+0x30]
c001d1e0:	0f b6 c0             	movzx  eax,al
c001d1e3:	50                   	push   eax
c001d1e4:	e8 87 ee ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001d1e9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d1ef:	5e                   	pop    esi
c001d1f0:	5f                   	pop    edi
c001d1f1:	6a 0f                	push   0xf
c001d1f3:	6a 00                	push   0x0
c001d1f5:	e8 87 ee ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001d1fa:	5d                   	pop    ebp
c001d1fb:	0f b6 c0             	movzx  eax,al
c001d1fe:	5a                   	pop    edx
c001d1ff:	50                   	push   eax
c001d200:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d205:	99                   	cdq    
c001d206:	f7 fb                	idiv   ebx
c001d208:	99                   	cdq    
c001d209:	f7 fb                	idiv   ebx
c001d20b:	8d 42 30             	lea    eax,[edx+0x30]
c001d20e:	0f b6 c0             	movzx  eax,al
c001d211:	50                   	push   eax
c001d212:	e8 59 ee ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001d217:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d21d:	59                   	pop    ecx
c001d21e:	5e                   	pop    esi
c001d21f:	6a 0f                	push   0xf
c001d221:	6a 00                	push   0x0
c001d223:	e8 59 ee ff ff       	call   c001c081 <combineColours(unsigned char, unsigned char)>
c001d228:	5f                   	pop    edi
c001d229:	0f b6 c0             	movzx  eax,al
c001d22c:	5d                   	pop    ebp
c001d22d:	50                   	push   eax
c001d22e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d233:	99                   	cdq    
c001d234:	f7 fb                	idiv   ebx
c001d236:	83 c2 30             	add    edx,0x30
c001d239:	0f b6 d2             	movzx  edx,dl
c001d23c:	52                   	push   edx
c001d23d:	e8 2e ee ff ff       	call   c001c070 <combineCharAndColour(char, unsigned char)>
c001d242:	83 c4 10             	add    esp,0x10
c001d245:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d24b:	31 c0                	xor    eax,eax
c001d24d:	83 c4 1c             	add    esp,0x1c
c001d250:	5b                   	pop    ebx
c001d251:	5e                   	pop    esi
c001d252:	5f                   	pop    edi
c001d253:	5d                   	pop    ebp
c001d254:	c3                   	ret    
c001d255:	90                   	nop

c001d256 <SATAPI::write(unsigned long long, int, void*)>:
c001d256:	b8 03 00 00 00       	mov    eax,0x3
c001d25b:	c3                   	ret    

c001d25c <SATAPI::close(int, int, void*)>:
c001d25c:	83 ec 0c             	sub    esp,0xc
c001d25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d263:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d269:	85 c0                	test   eax,eax
c001d26b:	74 0c                	je     c001d279 <SATAPI::close(int, int, void*)+0x1d>
c001d26d:	83 ec 0c             	sub    esp,0xc
c001d270:	8b 10                	mov    edx,DWORD PTR [eax]
c001d272:	50                   	push   eax
c001d273:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d276:	83 c4 10             	add    esp,0x10
c001d279:	31 c0                	xor    eax,eax
c001d27b:	83 c4 0c             	add    esp,0xc
c001d27e:	c3                   	ret    
c001d27f:	90                   	nop

c001d280 <SATAPI::SATAPI()>:
c001d280:	83 ec 0c             	sub    esp,0xc
c001d283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d287:	83 ec 04             	sub    esp,0x4
c001d28a:	68 00 08 00 00       	push   0x800
c001d28f:	68 f0 1c 02 c0       	push   0xc0021cf0
c001d294:	50                   	push   eax
c001d295:	e8 28 ef fe ff       	call   c000c1c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d29a:	83 c4 10             	add    esp,0x10
c001d29d:	ba e4 1d 02 c0       	mov    edx,0xc0021de4
c001d2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a6:	89 10                	mov    DWORD PTR [eax],edx
c001d2a8:	90                   	nop
c001d2a9:	83 c4 0c             	add    esp,0xc
c001d2ac:	c3                   	ret    
c001d2ad:	90                   	nop

c001d2ae <SATAPI::diskRemoved()>:
c001d2ae:	c3                   	ret    
c001d2af:	90                   	nop

c001d2b0 <SATAPI::diskInserted()>:
c001d2b0:	83 ec 18             	sub    esp,0x18
c001d2b3:	68 fc 1c 02 c0       	push   0xc0021cfc
c001d2b8:	e8 05 d7 fe ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001d2bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d2c8:	83 c4 1c             	add    esp,0x1c
c001d2cb:	c3                   	ret    

c001d2cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d2cc:	55                   	push   ebp
c001d2cd:	57                   	push   edi
c001d2ce:	56                   	push   esi
c001d2cf:	53                   	push   ebx
c001d2d0:	83 ec 34             	sub    esp,0x34
c001d2d3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d2d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d2db:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d2df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d2e7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d2ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d2f7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d2fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d301:	83 c0 02             	add    eax,0x2
c001d304:	c1 e0 07             	shl    eax,0x7
c001d307:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d30b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d30f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d313:	c1 e0 07             	shl    eax,0x7
c001d316:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d31a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d31e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d328:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d32c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d332:	e8 21 e5 ff ff       	call   c001b858 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d337:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d33b:	83 c4 10             	add    esp,0x10
c001d33e:	b8 01 00 00 00       	mov    eax,0x1
c001d343:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d348:	0f 84 53 02 00 00    	je     c001d5a1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d34e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d358:	8b 00                	mov    eax,DWORD PTR [eax]
c001d35a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d360:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d366:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d36a:	c1 e1 05             	shl    ecx,0x5
c001d36d:	01 c8                	add    eax,ecx
c001d36f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d371:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d377:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d37d:	89 08                	mov    DWORD PTR [eax],ecx
c001d37f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d385:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d38b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d391:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d394:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d397:	50                   	push   eax
c001d398:	68 90 00 00 00       	push   0x90
c001d39d:	6a 00                	push   0x0
c001d39f:	53                   	push   ebx
c001d3a0:	e8 4b 31 fe ff       	call   c00004f0 <memset>
c001d3a5:	b9 0c 00 00 00       	mov    ecx,0xc
c001d3aa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d3ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3b0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d3b6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d3ba:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d3c0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d3c4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d3c8:	48                   	dec    eax
c001d3c9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d3ce:	89 c1                	mov    ecx,eax
c001d3d0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d3d6:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d3db:	09 c8                	or     eax,ecx
c001d3dd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d3e3:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d3e9:	83 c8 80             	or     eax,0xffffff80
c001d3ec:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d3f2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d3f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d3f9:	25 00 7f 00 00       	and    eax,0x7f00
c001d3fe:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d402:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d407:	66 89 03             	mov    WORD PTR [ebx],ax
c001d40a:	89 d0                	mov    eax,edx
c001d40c:	c1 ea 18             	shr    edx,0x18
c001d40f:	c1 e8 10             	shr    eax,0x10
c001d412:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d415:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d418:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d41c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d41f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d423:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d426:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d42a:	83 c4 10             	add    esp,0x10
c001d42d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d431:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d435:	31 c0                	xor    eax,eax
c001d437:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d43d:	80 e1 88             	and    cl,0x88
c001d440:	74 0a                	je     c001d44c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d442:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d447:	74 0a                	je     c001d453 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d449:	40                   	inc    eax
c001d44a:	eb eb                	jmp    c001d437 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d44c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d451:	75 43                	jne    c001d496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d453:	83 ec 0c             	sub    esp,0xc
c001d456:	68 14 1d 02 c0       	push   0xc0021d14
c001d45b:	e8 62 d5 fe ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001d460:	58                   	pop    eax
c001d461:	5a                   	pop    edx
c001d462:	68 29 1d 02 c0       	push   0xc0021d29
c001d467:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d46d:	e8 1e b6 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c001d472:	59                   	pop    ecx
c001d473:	5b                   	pop    ebx
c001d474:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d478:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d47e:	e8 6f e4 ff ff       	call   c001b8f2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d483:	5e                   	pop    esi
c001d484:	5f                   	pop    edi
c001d485:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d489:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d48f:	e8 3e e4 ff ff       	call   c001b8d2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d494:	eb 48                	jmp    c001d4de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d496:	be 01 00 00 00       	mov    esi,0x1
c001d49b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d49f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d4a3:	d3 e6                	shl    esi,cl
c001d4a5:	c1 e7 07             	shl    edi,0x7
c001d4a8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d4ae:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d4b3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d4b7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d4bd:	85 c6                	test   esi,eax
c001d4bf:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d4c5:	0f 84 a3 00 00 00    	je     c001d56e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d4cb:	0f ba e0 1e          	bt     eax,0x1e
c001d4cf:	73 1a                	jae    c001d4eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d4d1:	83 ec 0c             	sub    esp,0xc
c001d4d4:	68 3b 1d 02 c0       	push   0xc0021d3b
c001d4d9:	e8 e4 d4 fe ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001d4de:	83 c4 10             	add    esp,0x10
c001d4e1:	b8 01 00 00 00       	mov    eax,0x1
c001d4e6:	e9 b6 00 00 00       	jmp    c001d5a1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d4eb:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d4f1:	83 f8 0d             	cmp    eax,0xd
c001d4f4:	77 0a                	ja     c001d500 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d4f6:	83 ec 0c             	sub    esp,0xc
c001d4f9:	68 c8 00 00 00       	push   0xc8
c001d4fe:	eb 28                	jmp    c001d528 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d500:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d506:	83 f8 0d             	cmp    eax,0xd
c001d509:	77 0a                	ja     c001d515 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d50b:	83 ec 0c             	sub    esp,0xc
c001d50e:	68 58 02 00 00       	push   0x258
c001d513:	eb 13                	jmp    c001d528 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d515:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d51b:	83 f8 06             	cmp    eax,0x6
c001d51e:	77 10                	ja     c001d530 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d520:	83 ec 0c             	sub    esp,0xc
c001d523:	68 dc 05 00 00       	push   0x5dc
c001d528:	e8 a7 7e ff ff       	call   c00153d4 <milliTenthSleep(unsigned int)>
c001d52d:	83 c4 10             	add    esp,0x10
c001d530:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d534:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d537:	75 06                	jne    c001d53f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d539:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d53d:	74 15                	je     c001d554 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d53f:	83 fb 06             	cmp    ebx,0x6
c001d542:	77 10                	ja     c001d554 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d544:	83 ec 0c             	sub    esp,0xc
c001d547:	68 c4 09 00 00       	push   0x9c4
c001d54c:	e8 83 7e ff ff       	call   c00153d4 <milliTenthSleep(unsigned int)>
c001d551:	83 c4 10             	add    esp,0x10
c001d554:	43                   	inc    ebx
c001d555:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d55b:	0f 85 56 ff ff ff    	jne    c001d4b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d561:	83 ec 0c             	sub    esp,0xc
c001d564:	68 4e 1d 02 c0       	push   0xc0021d4e
c001d569:	e9 6b ff ff ff       	jmp    c001d4d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d56e:	0f ba e0 1e          	bt     eax,0x1e
c001d572:	73 0d                	jae    c001d581 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d574:	83 ec 0c             	sub    esp,0xc
c001d577:	68 62 1d 02 c0       	push   0xc0021d62
c001d57c:	e9 58 ff ff ff       	jmp    c001d4d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d581:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d586:	74 17                	je     c001d59f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d588:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d58d:	74 10                	je     c001d59f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d58f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d595:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d599:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d59d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d59f:	31 c0                	xor    eax,eax
c001d5a1:	83 c4 2c             	add    esp,0x2c
c001d5a4:	5b                   	pop    ebx
c001d5a5:	5e                   	pop    esi
c001d5a6:	5f                   	pop    edi
c001d5a7:	5d                   	pop    ebp
c001d5a8:	c3                   	ret    
c001d5a9:	90                   	nop

c001d5aa <SATAPI::eject()>:
c001d5aa:	57                   	push   edi
c001d5ab:	b9 03 00 00 00       	mov    ecx,0x3
c001d5b0:	83 ec 18             	sub    esp,0x18
c001d5b3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d5b7:	fc                   	cld    
c001d5b8:	31 c0                	xor    eax,eax
c001d5ba:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5bc:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d5c1:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d5c6:	50                   	push   eax
c001d5c7:	6a 00                	push   0x0
c001d5c9:	6a 00                	push   0x0
c001d5cb:	6a 00                	push   0x0
c001d5cd:	6a 00                	push   0x0
c001d5cf:	6a 02                	push   0x2
c001d5d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d5d5:	50                   	push   eax
c001d5d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5da:	e8 ed fc ff ff       	call   c001d2cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d5df:	31 c0                	xor    eax,eax
c001d5e1:	83 c4 38             	add    esp,0x38
c001d5e4:	5f                   	pop    edi
c001d5e5:	c3                   	ret    

c001d5e6 <SATAPI::detectMedia()>:
c001d5e6:	53                   	push   ebx
c001d5e7:	83 ec 14             	sub    esp,0x14
c001d5ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d5ee:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5f4:	e8 47 05 ff ff       	call   c000db40 <VCache::writeWriteBuffer()>
c001d5f9:	59                   	pop    ecx
c001d5fa:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d600:	e8 2b 05 ff ff       	call   c000db30 <VCache::invalidateReadBuffer()>
c001d605:	c7 04 24 77 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d77
c001d60c:	e8 b1 d3 fe ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001d611:	83 c4 10             	add    esp,0x10
c001d614:	31 c0                	xor    eax,eax
c001d616:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d61d:	85 d2                	test   edx,edx
c001d61f:	74 0f                	je     c001d630 <SATAPI::detectMedia()+0x4a>
c001d621:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d627:	75 07                	jne    c001d630 <SATAPI::detectMedia()+0x4a>
c001d629:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d630:	40                   	inc    eax
c001d631:	83 f8 1a             	cmp    eax,0x1a
c001d634:	75 e0                	jne    c001d616 <SATAPI::detectMedia()+0x30>
c001d636:	83 c4 08             	add    esp,0x8
c001d639:	5b                   	pop    ebx
c001d63a:	c3                   	ret    
c001d63b:	90                   	nop

c001d63c <SATAPI::open(int, int, void*)>:
c001d63c:	56                   	push   esi
c001d63d:	53                   	push   ebx
c001d63e:	51                   	push   ecx
c001d63f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d647:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d651:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d657:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d661:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d665:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d66f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d675:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d67c:	e8 32 a7 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001d681:	89 c6                	mov    esi,eax
c001d683:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d689:	81 c6 00 10 00 00    	add    esi,0x1000
c001d68f:	e8 1f a7 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001d694:	39 c6                	cmp    esi,eax
c001d696:	74 10                	je     c001d6a8 <SATAPI::open(int, int, void*)+0x6c>
c001d698:	83 ec 0c             	sub    esp,0xc
c001d69b:	68 8c 1d 02 c0       	push   0xc0021d8c
c001d6a0:	e8 4a 32 ff ff       	call   c00108ef <KePanic(char const*)>
c001d6a5:	83 c4 10             	add    esp,0x10
c001d6a8:	83 ec 0c             	sub    esp,0xc
c001d6ab:	6a 02                	push   0x2
c001d6ad:	e8 6b bf fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001d6b2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d6b8:	6a 03                	push   0x3
c001d6ba:	50                   	push   eax
c001d6bb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d6c1:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d6c7:	e8 38 c6 fe ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d6cc:	83 c4 14             	add    esp,0x14
c001d6cf:	68 78 01 00 00       	push   0x178
c001d6d4:	e8 d5 a3 fe ff       	call   c0007aae <malloc>
c001d6d9:	83 c4 0c             	add    esp,0xc
c001d6dc:	89 c6                	mov    esi,eax
c001d6de:	6a 00                	push   0x0
c001d6e0:	68 ff ff ff 7f       	push   0x7fffffff
c001d6e5:	6a 00                	push   0x0
c001d6e7:	6a 00                	push   0x0
c001d6e9:	53                   	push   ebx
c001d6ea:	68 a2 1d 02 c0       	push   0xc0021da2
c001d6ef:	50                   	push   eax
c001d6f0:	e8 a7 f8 fe ff       	call   c000cf9c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d6f5:	83 c4 14             	add    esp,0x14
c001d6f8:	56                   	push   esi
c001d6f9:	e8 5e f9 fe ff       	call   c000d05c <LogicalDisk::assignDriveLetter()>
c001d6fe:	5a                   	pop    edx
c001d6ff:	0f be c0             	movsx  eax,al
c001d702:	59                   	pop    ecx
c001d703:	50                   	push   eax
c001d704:	68 f4 1b 02 c0       	push   0xc0021bf4
c001d709:	e8 b4 d2 fe ff       	call   c000a9c2 <Dbg::kprintf(char const*, ...)>
c001d70e:	58                   	pop    eax
c001d70f:	5a                   	pop    edx
c001d710:	56                   	push   esi
c001d711:	53                   	push   ebx
c001d712:	e8 df e6 fe ff       	call   c000bdf6 <Device::addChild(Device*)>
c001d717:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d71d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d720:	e8 05 eb fe ff       	call   c000c22a <PhysicalDisk::startCache()>
c001d725:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d72c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d72f:	e8 b2 fe ff ff       	call   c001d5e6 <SATAPI::detectMedia()>
c001d734:	83 c4 14             	add    esp,0x14
c001d737:	31 c0                	xor    eax,eax
c001d739:	5b                   	pop    ebx
c001d73a:	5e                   	pop    esi
c001d73b:	c3                   	ret    

c001d73c <SATAPI::read(unsigned long long, int, void*)>:
c001d73c:	57                   	push   edi
c001d73d:	56                   	push   esi
c001d73e:	53                   	push   ebx
c001d73f:	83 ec 30             	sub    esp,0x30
c001d742:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d746:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001d74a:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d74e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d752:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d756:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d75a:	83 fe 04             	cmp    esi,0x4
c001d75d:	7e 10                	jle    c001d76f <SATAPI::read(unsigned long long, int, void*)+0x33>
c001d75f:	83 ec 0c             	sub    esp,0xc
c001d762:	68 b0 1d 02 c0       	push   0xc0021db0
c001d767:	e8 83 31 ff ff       	call   c00108ef <KePanic(char const*)>
c001d76c:	83 c4 10             	add    esp,0x10
c001d76f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d775:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d77b:	51                   	push   ecx
c001d77c:	50                   	push   eax
c001d77d:	83 c0 02             	add    eax,0x2
c001d780:	c1 e0 07             	shl    eax,0x7
c001d783:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d789:	50                   	push   eax
c001d78a:	52                   	push   edx
c001d78b:	e8 8c e1 ff ff       	call   c001b91c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d790:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d794:	b9 03 00 00 00       	mov    ecx,0x3
c001d799:	fc                   	cld    
c001d79a:	31 c0                	xor    eax,eax
c001d79c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d79e:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d7a3:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d7a8:	83 c4 0c             	add    esp,0xc
c001d7ab:	6a 00                	push   0x0
c001d7ad:	6a 00                	push   0x0
c001d7af:	6a 00                	push   0x0
c001d7b1:	6a 00                	push   0x0
c001d7b3:	6a 02                	push   0x2
c001d7b5:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d7b9:	50                   	push   eax
c001d7ba:	53                   	push   ebx
c001d7bb:	e8 0c fb ff ff       	call   c001d2cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7c0:	83 c4 20             	add    esp,0x20
c001d7c3:	85 c0                	test   eax,eax
c001d7c5:	75 44                	jne    c001d80b <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001d7c7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d7cb:	b9 03 00 00 00       	mov    ecx,0x3
c001d7d0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7d6:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d7db:	0f c8                	bswap  eax
c001d7dd:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d7e1:	89 f0                	mov    eax,esi
c001d7e3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d7e7:	50                   	push   eax
c001d7e8:	56                   	push   esi
c001d7e9:	c1 e6 0b             	shl    esi,0xb
c001d7ec:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d7f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7f8:	56                   	push   esi
c001d7f9:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d7fd:	50                   	push   eax
c001d7fe:	53                   	push   ebx
c001d7ff:	e8 c8 fa ff ff       	call   c001d2cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d804:	83 c4 20             	add    esp,0x20
c001d807:	85 c0                	test   eax,eax
c001d809:	74 14                	je     c001d81f <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001d80b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d80f:	83 ec 0c             	sub    esp,0xc
c001d812:	53                   	push   ebx
c001d813:	e8 ce fd ff ff       	call   c001d5e6 <SATAPI::detectMedia()>
c001d818:	83 c4 10             	add    esp,0x10
c001d81b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d81f:	83 c4 30             	add    esp,0x30
c001d822:	5b                   	pop    ebx
c001d823:	5e                   	pop    esi
c001d824:	5f                   	pop    edi
c001d825:	c3                   	ret    

c001d826 <IOAPIC::close(int, int, void*)>:
c001d826:	b8 00 00 00 00       	mov    eax,0x0
c001d82b:	c3                   	ret    

c001d82c <apicGetBase()>:
c001d82c:	55                   	push   ebp
c001d82d:	89 e5                	mov    ebp,esp
c001d82f:	83 ec 18             	sub    esp,0x18
c001d832:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d837:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d83d:	83 e0 08             	and    eax,0x8
c001d840:	0f b6 c0             	movzx  eax,al
c001d843:	85 c0                	test   eax,eax
c001d845:	75 07                	jne    c001d84e <apicGetBase()+0x22>
c001d847:	b8 00 00 00 00       	mov    eax,0x0
c001d84c:	eb 21                	jmp    c001d86f <apicGetBase()+0x43>
c001d84e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d853:	83 ec 08             	sub    esp,0x8
c001d856:	6a 1b                	push   0x1b
c001d858:	50                   	push   eax
c001d859:	e8 5a 98 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001d85e:	83 c4 10             	add    esp,0x10
c001d861:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d864:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d867:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d86a:	25 00 00 ff ff       	and    eax,0xffff0000
c001d86f:	c9                   	leave  
c001d870:	c3                   	ret    
c001d871:	90                   	nop

c001d872 <IOAPIC::IOAPIC()>:
c001d872:	83 ec 0c             	sub    esp,0xc
c001d875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d879:	83 ec 08             	sub    esp,0x8
c001d87c:	68 14 1e 02 c0       	push   0xc0021e14
c001d881:	50                   	push   eax
c001d882:	e8 07 e7 fe ff       	call   c000bf8e <Device::Device(char const*)>
c001d887:	83 c4 10             	add    esp,0x10
c001d88a:	ba 24 1e 02 c0       	mov    edx,0xc0021e24
c001d88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d893:	89 10                	mov    DWORD PTR [eax],edx
c001d895:	90                   	nop
c001d896:	83 c4 0c             	add    esp,0xc
c001d899:	c3                   	ret    

c001d89a <apicOpen()>:
c001d89a:	55                   	push   ebp
c001d89b:	89 e5                	mov    ebp,esp
c001d89d:	53                   	push   ebx
c001d89e:	83 ec 34             	sub    esp,0x34
c001d8a1:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d8a6:	83 f0 01             	xor    eax,0x1
c001d8a9:	0f b6 c0             	movzx  eax,al
c001d8ac:	85 c0                	test   eax,eax
c001d8ae:	0f 84 a3 00 00 00    	je     c001d957 <apicOpen()+0xbd>
c001d8b4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d8b8:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d8bd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8c1:	0f b6 c0             	movzx  eax,al
c001d8c4:	39 c2                	cmp    edx,eax
c001d8c6:	0f 83 84 00 00 00    	jae    c001d950 <apicOpen()+0xb6>
c001d8cc:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d8d3:	83 ec 0c             	sub    esp,0xc
c001d8d6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d8d9:	e8 d0 a1 fe ff       	call   c0007aae <malloc>
c001d8de:	83 c4 10             	add    esp,0x10
c001d8e1:	89 c3                	mov    ebx,eax
c001d8e3:	83 ec 0c             	sub    esp,0xc
c001d8e6:	53                   	push   ebx
c001d8e7:	e8 86 ff ff ff       	call   c001d872 <IOAPIC::IOAPIC()>
c001d8ec:	83 c4 10             	add    esp,0x10
c001d8ef:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d8f2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d8f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d8f9:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d900:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d905:	83 c0 01             	add    eax,0x1
c001d908:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d90d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d912:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d918:	83 ec 08             	sub    esp,0x8
c001d91b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d91e:	50                   	push   eax
c001d91f:	e8 d2 e4 fe ff       	call   c000bdf6 <Device::addChild(Device*)>
c001d924:	83 c4 10             	add    esp,0x10
c001d927:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d92a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d92c:	83 c0 08             	add    eax,0x8
c001d92f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d931:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d935:	6a 00                	push   0x0
c001d937:	6a 00                	push   0x0
c001d939:	52                   	push   edx
c001d93a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d93d:	ff d0                	call   eax
c001d93f:	83 c4 10             	add    esp,0x10
c001d942:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d945:	83 c0 01             	add    eax,0x1
c001d948:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d94b:	e9 68 ff ff ff       	jmp    c001d8b8 <apicOpen()+0x1e>
c001d950:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d957:	e8 d0 fe ff ff       	call   c001d82c <apicGetBase()>
c001d95c:	05 f0 00 00 00       	add    eax,0xf0
c001d961:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d964:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d967:	8b 00                	mov    eax,DWORD PTR [eax]
c001d969:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d96c:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d973:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d97a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d97d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d980:	89 10                	mov    DWORD PTR [eax],edx
c001d982:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d989:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d98e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d991:	7d 7c                	jge    c001da0f <apicOpen()+0x175>
c001d993:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d996:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d99d:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d9a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9a3:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9aa:	c1 e8 08             	shr    eax,0x8
c001d9ad:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d9b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9b4:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9bb:	c1 e8 18             	shr    eax,0x18
c001d9be:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d9c1:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d9c5:	3d ff 00 00 00       	cmp    eax,0xff
c001d9ca:	75 3a                	jne    c001da06 <apicOpen()+0x16c>
c001d9cc:	e8 5b fe ff ff       	call   c001d82c <apicGetBase()>
c001d9d1:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d9d5:	83 fa 01             	cmp    edx,0x1
c001d9d8:	75 07                	jne    c001d9e1 <apicOpen()+0x147>
c001d9da:	ba 60 03 00 00       	mov    edx,0x360
c001d9df:	eb 05                	jmp    c001d9e6 <apicOpen()+0x14c>
c001d9e1:	ba 50 03 00 00       	mov    edx,0x350
c001d9e6:	01 d0                	add    eax,edx
c001d9e8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d9eb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9ee:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9f0:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d9f3:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d9fa:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d9fe:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001da01:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001da04:	89 10                	mov    DWORD PTR [eax],edx
c001da06:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001da0a:	e9 7a ff ff ff       	jmp    c001d989 <apicOpen()+0xef>
c001da0f:	90                   	nop
c001da10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001da13:	c9                   	leave  
c001da14:	c3                   	ret    
c001da15:	90                   	nop

c001da16 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001da16:	55                   	push   ebp
c001da17:	89 e5                	mov    ebp,esp
c001da19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da22:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da25:	72 1d                	jb     c001da44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da2a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001da30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da33:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001da39:	01 d0                	add    eax,edx
c001da3b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da3e:	73 04                	jae    c001da44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da40:	b0 01                	mov    al,0x1
c001da42:	eb 02                	jmp    c001da46 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001da44:	b0 00                	mov    al,0x0
c001da46:	5d                   	pop    ebp
c001da47:	c3                   	ret    

c001da48 <IOAPIC::read(int)>:
c001da48:	55                   	push   ebp
c001da49:	89 e5                	mov    ebp,esp
c001da4b:	83 ec 10             	sub    esp,0x10
c001da4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da51:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da57:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da5d:	0f b6 d0             	movzx  edx,al
c001da60:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da63:	89 10                	mov    DWORD PTR [eax],edx
c001da65:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da68:	83 c0 10             	add    eax,0x10
c001da6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001da6d:	c9                   	leave  
c001da6e:	c3                   	ret    
c001da6f:	90                   	nop

c001da70 <IOAPIC::open(int, int, void*)>:
c001da70:	55                   	push   ebp
c001da71:	89 e5                	mov    ebp,esp
c001da73:	57                   	push   edi
c001da74:	56                   	push   esi
c001da75:	53                   	push   ebx
c001da76:	83 ec 04             	sub    esp,0x4
c001da79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da88:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da8e:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001da95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da98:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001da9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daa1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001daa7:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001daae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dab1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daba:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001dac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dac3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dac9:	0f b6 f0             	movzx  esi,al
c001dacc:	89 d0                	mov    eax,edx
c001dace:	ba 00 00 00 00       	mov    edx,0x0
c001dad3:	89 c7                	mov    edi,eax
c001dad5:	83 e7 ff             	and    edi,0xffffffff
c001dad8:	89 f9                	mov    ecx,edi
c001dada:	0f b6 da             	movzx  ebx,dl
c001dadd:	89 c8                	mov    eax,ecx
c001dadf:	89 da                	mov    edx,ebx
c001dae1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dae4:	8d 5e 08             	lea    ebx,[esi+0x8]
c001dae7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001daeb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001daef:	83 e0 00             	and    eax,0x0
c001daf2:	09 d0                	or     eax,edx
c001daf4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001daf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dafb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001db01:	8d 50 01             	lea    edx,[eax+0x1]
c001db04:	88 d1                	mov    cl,dl
c001db06:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001db09:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001db0f:	0f b6 d0             	movzx  edx,al
c001db12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db15:	83 c2 08             	add    edx,0x8
c001db18:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001db1c:	0f b6 c9             	movzx  ecx,cl
c001db1f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001db25:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db29:	6a 01                	push   0x1
c001db2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db2e:	e8 15 ff ff ff       	call   c001da48 <IOAPIC::read(int)>
c001db33:	83 c4 08             	add    esp,0x8
c001db36:	c1 f8 10             	sar    eax,0x10
c001db39:	0f b6 c0             	movzx  eax,al
c001db3c:	8d 50 01             	lea    edx,[eax+0x1]
c001db3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db42:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001db48:	b8 00 00 00 00       	mov    eax,0x0
c001db4d:	8d 65 f4             	lea    esp,[ebp-0xc]
c001db50:	5b                   	pop    ebx
c001db51:	5e                   	pop    esi
c001db52:	5f                   	pop    edi
c001db53:	5d                   	pop    ebp
c001db54:	c3                   	ret    
c001db55:	90                   	nop

c001db56 <IOAPIC::write(int, int)>:
c001db56:	55                   	push   ebp
c001db57:	89 e5                	mov    ebp,esp
c001db59:	83 ec 10             	sub    esp,0x10
c001db5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db5f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db65:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001db68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db6b:	0f b6 d0             	movzx  edx,al
c001db6e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db71:	89 10                	mov    DWORD PTR [eax],edx
c001db73:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db76:	8d 50 10             	lea    edx,[eax+0x10]
c001db79:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db7c:	89 02                	mov    DWORD PTR [edx],eax
c001db7e:	90                   	nop
c001db7f:	c9                   	leave  
c001db80:	c3                   	ret    
c001db81:	90                   	nop

c001db82 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001db82:	55                   	push   ebp
c001db83:	89 e5                	mov    ebp,esp
c001db85:	53                   	push   ebx
c001db86:	83 ec 2c             	sub    esp,0x2c
c001db89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db8c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001db8f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001db92:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001db95:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001db98:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db9b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001db9e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dba1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001dba4:	88 d8                	mov    al,bl
c001dba6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001dba9:	88 c8                	mov    al,cl
c001dbab:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001dbae:	88 d0                	mov    al,dl
c001dbb0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001dbb3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbb7:	83 c0 08             	add    eax,0x8
c001dbba:	01 c0                	add    eax,eax
c001dbbc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dbbf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbc3:	83 c0 08             	add    eax,0x8
c001dbc6:	01 c0                	add    eax,eax
c001dbc8:	83 c0 01             	add    eax,0x1
c001dbcb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001dbce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dbd1:	50                   	push   eax
c001dbd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbd5:	e8 6e fe ff ff       	call   c001da48 <IOAPIC::read(int)>
c001dbda:	83 c4 08             	add    esp,0x8
c001dbdd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dbe0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001dbe7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dbea:	c1 e0 18             	shl    eax,0x18
c001dbed:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dbf0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dbf3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dbf6:	52                   	push   edx
c001dbf7:	50                   	push   eax
c001dbf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbfb:	e8 56 ff ff ff       	call   c001db56 <IOAPIC::write(int, int)>
c001dc00:	83 c4 0c             	add    esp,0xc
c001dc03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc06:	50                   	push   eax
c001dc07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc0a:	e8 39 fe ff ff       	call   c001da48 <IOAPIC::read(int)>
c001dc0f:	83 c4 08             	add    esp,0x8
c001dc12:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dc15:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dc1c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dc23:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dc2a:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dc2e:	85 c0                	test   eax,eax
c001dc30:	74 09                	je     c001dc3b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dc32:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dc39:	eb 07                	jmp    c001dc42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dc3b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dc42:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dc46:	85 c0                	test   eax,eax
c001dc48:	74 09                	je     c001dc53 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dc4a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dc51:	eb 07                	jmp    c001dc5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dc53:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dc5a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dc61:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dc65:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dc68:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dc6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc6e:	52                   	push   edx
c001dc6f:	50                   	push   eax
c001dc70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc73:	e8 de fe ff ff       	call   c001db56 <IOAPIC::write(int, int)>
c001dc78:	83 c4 0c             	add    esp,0xc
c001dc7b:	90                   	nop
c001dc7c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dc7f:	c9                   	leave  
c001dc80:	c3                   	ret    
c001dc81:	66 90                	xchg   ax,ax
c001dc83:	90                   	nop

c001dc84 <APICTimer::close(int, int, void*)>:
c001dc84:	b8 00 00 00 00       	mov    eax,0x0
c001dc89:	c3                   	ret    
c001dc8a:	66 90                	xchg   ax,ax

c001dc8c <apicTimerHandler(regs*, void*)>:
c001dc8c:	83 ec 0c             	sub    esp,0xc
c001dc8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc93:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc95:	b8 10 27 00 00       	mov    eax,0x2710
c001dc9a:	ba 00 00 00 00       	mov    edx,0x0
c001dc9f:	f7 f1                	div    ecx
c001dca1:	83 ec 0c             	sub    esp,0xc
c001dca4:	50                   	push   eax
c001dca5:	e8 ae fb fe ff       	call   c000d858 <timerHandler(unsigned int)>
c001dcaa:	83 c4 10             	add    esp,0x10
c001dcad:	90                   	nop
c001dcae:	83 c4 0c             	add    esp,0xc
c001dcb1:	c3                   	ret    
c001dcb2:	66 90                	xchg   ax,ax

c001dcb4 <APICTimer::open(int, int, void*)>:
c001dcb4:	83 ec 0c             	sub    esp,0xc
c001dcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcbd:	83 c0 24             	add    eax,0x24
c001dcc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcc2:	83 ec 08             	sub    esp,0x8
c001dcc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dccd:	ff d0                	call   eax
c001dccf:	83 c4 10             	add    esp,0x10
c001dcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcda:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dce8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dcee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcf2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dcf8:	83 ec 0c             	sub    esp,0xc
c001dcfb:	51                   	push   ecx
c001dcfc:	6a 01                	push   0x1
c001dcfe:	68 8c dc 01 c0       	push   0xc001dc8c
c001dd03:	52                   	push   edx
c001dd04:	50                   	push   eax
c001dd05:	e8 98 e0 fe ff       	call   c000bda2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd0a:	83 c4 20             	add    esp,0x20
c001dd0d:	89 c2                	mov    edx,eax
c001dd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd13:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dd19:	b8 00 00 00 00       	mov    eax,0x0
c001dd1e:	83 c4 0c             	add    esp,0xc
c001dd21:	c3                   	ret    
c001dd22:	66 90                	xchg   ax,ax

c001dd24 <APICTimer::write(int)>:
c001dd24:	83 ec 0c             	sub    esp,0xc
c001dd27:	83 ec 0c             	sub    esp,0xc
c001dd2a:	68 48 1e 02 c0       	push   0xc0021e48
c001dd2f:	e8 bb 2b ff ff       	call   c00108ef <KePanic(char const*)>
c001dd34:	83 c4 10             	add    esp,0x10
c001dd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd3f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd45:	90                   	nop
c001dd46:	83 c4 0c             	add    esp,0xc
c001dd49:	c3                   	ret    
c001dd4a:	66 90                	xchg   ax,ax

c001dd4c <APICTimer::APICTimer()>:
c001dd4c:	83 ec 0c             	sub    esp,0xc
c001dd4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd53:	83 ec 08             	sub    esp,0x8
c001dd56:	68 58 1e 02 c0       	push   0xc0021e58
c001dd5b:	50                   	push   eax
c001dd5c:	e8 2b fa fe ff       	call   c000d78c <Timer::Timer(char const*)>
c001dd61:	83 c4 10             	add    esp,0x10
c001dd64:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c001dd69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6d:	89 10                	mov    DWORD PTR [eax],edx
c001dd6f:	90                   	nop
c001dd70:	83 c4 0c             	add    esp,0xc
c001dd73:	c3                   	ret    

c001dd74 <PIT::write(int)>:
c001dd74:	83 ec 10             	sub    esp,0x10
c001dd77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd89:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dd8e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dd93:	89 c2                	mov    edx,eax
c001dd95:	c1 fa 1f             	sar    edx,0x1f
c001dd98:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dd9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dda0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dda7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ddac:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ddb0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ddb5:	ee                   	out    dx,al
c001ddb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddba:	0f b6 c0             	movzx  eax,al
c001ddbd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ddc4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ddc8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ddcc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ddd1:	ee                   	out    dx,al
c001ddd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddd6:	c1 f8 08             	sar    eax,0x8
c001ddd9:	0f b6 c0             	movzx  eax,al
c001dddc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dde3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dde7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddeb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ddf0:	ee                   	out    dx,al
c001ddf1:	90                   	nop
c001ddf2:	83 c4 10             	add    esp,0x10
c001ddf5:	c3                   	ret    
c001ddf6:	66 90                	xchg   ax,ax

c001ddf8 <pitHandler(regs*, void*)>:
c001ddf8:	83 ec 0c             	sub    esp,0xc
c001ddfb:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001de01:	b8 10 27 00 00       	mov    eax,0x2710
c001de06:	89 c2                	mov    edx,eax
c001de08:	c1 fa 1f             	sar    edx,0x1f
c001de0b:	f7 f9                	idiv   ecx
c001de0d:	83 ec 0c             	sub    esp,0xc
c001de10:	50                   	push   eax
c001de11:	e8 42 fa fe ff       	call   c000d858 <timerHandler(unsigned int)>
c001de16:	83 c4 10             	add    esp,0x10
c001de19:	90                   	nop
c001de1a:	83 c4 0c             	add    esp,0xc
c001de1d:	c3                   	ret    
c001de1e:	66 90                	xchg   ax,ax

c001de20 <PIT::open(int, int, void*)>:
c001de20:	83 ec 0c             	sub    esp,0xc
c001de23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de27:	8b 00                	mov    eax,DWORD PTR [eax]
c001de29:	83 c0 24             	add    eax,0x24
c001de2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001de2e:	83 ec 08             	sub    esp,0x8
c001de31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de39:	ff d0                	call   eax
c001de3b:	83 c4 10             	add    esp,0x10
c001de3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de42:	83 ec 0c             	sub    esp,0xc
c001de45:	6a 00                	push   0x0
c001de47:	6a 01                	push   0x1
c001de49:	68 f8 dd 01 c0       	push   0xc001ddf8
c001de4e:	6a 00                	push   0x0
c001de50:	50                   	push   eax
c001de51:	e8 4c df fe ff       	call   c000bda2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de56:	83 c4 20             	add    esp,0x20
c001de59:	89 c2                	mov    edx,eax
c001de5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de5f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de65:	b8 00 00 00 00       	mov    eax,0x0
c001de6a:	83 c4 0c             	add    esp,0xc
c001de6d:	c3                   	ret    
c001de6e:	66 90                	xchg   ax,ax

c001de70 <PIT::close(int, int, void*)>:
c001de70:	83 ec 0c             	sub    esp,0xc
c001de73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de77:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001de81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de85:	6a 01                	push   0x1
c001de87:	68 f8 dd 01 c0       	push   0xc001ddf8
c001de8c:	6a 00                	push   0x0
c001de8e:	50                   	push   eax
c001de8f:	e8 44 df fe ff       	call   c000bdd8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001de94:	83 c4 10             	add    esp,0x10
c001de97:	b8 00 00 00 00       	mov    eax,0x0
c001de9c:	83 c4 0c             	add    esp,0xc
c001de9f:	c3                   	ret    

c001dea0 <PIT::PIT()>:
c001dea0:	83 ec 0c             	sub    esp,0xc
c001dea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea7:	83 ec 08             	sub    esp,0x8
c001deaa:	68 94 1e 02 c0       	push   0xc0021e94
c001deaf:	50                   	push   eax
c001deb0:	e8 d7 f8 fe ff       	call   c000d78c <Timer::Timer(char const*)>
c001deb5:	83 c4 10             	add    esp,0x10
c001deb8:	ba bc 1e 02 c0       	mov    edx,0xc0021ebc
c001debd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec1:	89 10                	mov    DWORD PTR [eax],edx
c001dec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001decd:	0f b6 d0             	movzx  edx,al
c001ded0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dedf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dee5:	0f b6 d0             	movzx  edx,al
c001dee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deec:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001def1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001defb:	8d 50 01             	lea    edx,[eax+0x1]
c001defe:	88 d1                	mov    cl,dl
c001df00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df04:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001df0a:	0f b6 d0             	movzx  edx,al
c001df0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df11:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001df15:	83 e1 3f             	and    ecx,0x3f
c001df18:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001df1c:	90                   	nop
c001df1d:	83 c4 0c             	add    esp,0xc
c001df20:	c3                   	ret    
c001df21:	66 90                	xchg   ax,ax
c001df23:	66 90                	xchg   ax,ax
c001df25:	66 90                	xchg   ax,ax
c001df27:	66 90                	xchg   ax,ax
c001df29:	66 90                	xchg   ax,ax
c001df2b:	66 90                	xchg   ax,ax
c001df2d:	66 90                	xchg   ax,ax
c001df2f:	90                   	nop

c001df30 <avxDetect>:
c001df30:	b8 01 00 00 00       	mov    eax,0x1
c001df35:	0f a2                	cpuid  
c001df37:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001df3d:	74 15                	je     c001df54 <avxDetect.noAVX>
c001df3f:	b8 01 00 00 00       	mov    eax,0x1
c001df44:	0f a2                	cpuid  
c001df46:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001df4c:	74 06                	je     c001df54 <avxDetect.noAVX>
c001df4e:	b8 01 00 00 00       	mov    eax,0x1
c001df53:	c3                   	ret    

c001df54 <avxDetect.noAVX>:
c001df54:	b8 00 00 00 00       	mov    eax,0x0
c001df59:	c3                   	ret    

c001df5a <avxSave>:
c001df5a:	53                   	push   ebx
c001df5b:	52                   	push   edx
c001df5c:	31 c0                	xor    eax,eax
c001df5e:	48                   	dec    eax
c001df5f:	89 c2                	mov    edx,eax
c001df61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df65:	0f ae 23             	xsave  [ebx]
c001df68:	5a                   	pop    edx
c001df69:	5b                   	pop    ebx
c001df6a:	c3                   	ret    

c001df6b <avxLoad>:
c001df6b:	53                   	push   ebx
c001df6c:	52                   	push   edx
c001df6d:	31 c0                	xor    eax,eax
c001df6f:	48                   	dec    eax
c001df70:	89 c2                	mov    edx,eax
c001df72:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df76:	0f ae 2b             	xrstor [ebx]
c001df79:	5a                   	pop    edx
c001df7a:	5b                   	pop    ebx
c001df7b:	c3                   	ret    

c001df7c <avxInit>:
c001df7c:	e8 67 03 00 00       	call   c001e2e8 <sseInit>
c001df81:	50                   	push   eax
c001df82:	51                   	push   ecx
c001df83:	0f 20 e0             	mov    eax,cr4
c001df86:	0d 00 00 04 00       	or     eax,0x40000
c001df8b:	0f 22 e0             	mov    cr4,eax
c001df8e:	31 c9                	xor    ecx,ecx
c001df90:	0f 01 d0             	xgetbv 
c001df93:	0d 07 00 00 00       	or     eax,0x7
c001df98:	0f 01 d1             	xsetbv 
c001df9b:	59                   	pop    ecx
c001df9c:	58                   	pop    eax
c001df9d:	c3                   	ret    

c001df9e <avxClose>:
c001df9e:	c3                   	ret    

c001df9f <wouldSheSayYes>:
c001df9f:	c3                   	ret    
c001dfa0:	49                   	dec    ecx
c001dfa1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dfa5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dfa9:	75 20                	jne    c001dfcb <isr0+0xb>
c001dfab:	4e                   	dec    esi
c001dfac:	79 61                	jns    c001e00f <isr7+0x3>
c001dfae:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dfb3:	66 90                	xchg   ax,ax
c001dfb5:	66 90                	xchg   ax,ax
c001dfb7:	66 90                	xchg   ax,ax
c001dfb9:	66 90                	xchg   ax,ax
c001dfbb:	66 90                	xchg   ax,ax
c001dfbd:	66 90                	xchg   ax,ax
c001dfbf:	90                   	nop

c001dfc0 <isr0>:
c001dfc0:	fa                   	cli    
c001dfc1:	68 00 00 00 00       	push   0x0
c001dfc6:	68 00 00 00 00       	push   0x0
c001dfcb:	e9 56 01 00 00       	jmp    c001e126 <int_common_stub>

c001dfd0 <isr1>:
c001dfd0:	fa                   	cli    
c001dfd1:	6a 00                	push   0x0
c001dfd3:	6a 01                	push   0x1
c001dfd5:	e9 4c 01 00 00       	jmp    c001e126 <int_common_stub>

c001dfda <isr2>:
c001dfda:	fa                   	cli    
c001dfdb:	6a 00                	push   0x0
c001dfdd:	6a 02                	push   0x2
c001dfdf:	e9 42 01 00 00       	jmp    c001e126 <int_common_stub>

c001dfe4 <isr3>:
c001dfe4:	fa                   	cli    
c001dfe5:	6a 00                	push   0x0
c001dfe7:	6a 03                	push   0x3
c001dfe9:	e9 38 01 00 00       	jmp    c001e126 <int_common_stub>

c001dfee <isr4>:
c001dfee:	fa                   	cli    
c001dfef:	6a 00                	push   0x0
c001dff1:	6a 04                	push   0x4
c001dff3:	e9 2e 01 00 00       	jmp    c001e126 <int_common_stub>

c001dff8 <isr5>:
c001dff8:	fa                   	cli    
c001dff9:	6a 00                	push   0x0
c001dffb:	6a 05                	push   0x5
c001dffd:	e9 24 01 00 00       	jmp    c001e126 <int_common_stub>

c001e002 <isr6>:
c001e002:	fa                   	cli    
c001e003:	6a 00                	push   0x0
c001e005:	6a 06                	push   0x6
c001e007:	e9 1a 01 00 00       	jmp    c001e126 <int_common_stub>

c001e00c <isr7>:
c001e00c:	fa                   	cli    
c001e00d:	6a 00                	push   0x0
c001e00f:	6a 07                	push   0x7
c001e011:	e9 10 01 00 00       	jmp    c001e126 <int_common_stub>

c001e016 <isr8>:
c001e016:	fa                   	cli    
c001e017:	6a 08                	push   0x8
c001e019:	e9 08 01 00 00       	jmp    c001e126 <int_common_stub>

c001e01e <isr9>:
c001e01e:	fa                   	cli    
c001e01f:	6a 00                	push   0x0
c001e021:	6a 09                	push   0x9
c001e023:	e9 fe 00 00 00       	jmp    c001e126 <int_common_stub>

c001e028 <isr10>:
c001e028:	fa                   	cli    
c001e029:	6a 0a                	push   0xa
c001e02b:	e9 f6 00 00 00       	jmp    c001e126 <int_common_stub>

c001e030 <isr11>:
c001e030:	fa                   	cli    
c001e031:	6a 0b                	push   0xb
c001e033:	e9 ee 00 00 00       	jmp    c001e126 <int_common_stub>

c001e038 <isr12>:
c001e038:	fa                   	cli    
c001e039:	6a 0c                	push   0xc
c001e03b:	e9 e6 00 00 00       	jmp    c001e126 <int_common_stub>

c001e040 <isr13>:
c001e040:	fa                   	cli    
c001e041:	6a 0d                	push   0xd
c001e043:	53                   	push   ebx
c001e044:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e048:	81 fb 16 e2 01 c0    	cmp    ebx,0xc001e216
c001e04e:	5b                   	pop    ebx
c001e04f:	0f 84 c3 01 00 00    	je     c001e218 <finishSignal2>
c001e055:	e9 cc 00 00 00       	jmp    c001e126 <int_common_stub>

c001e05a <isr14>:
c001e05a:	fa                   	cli    
c001e05b:	6a 0e                	push   0xe
c001e05d:	e9 c4 00 00 00       	jmp    c001e126 <int_common_stub>

c001e062 <isr15>:
c001e062:	fa                   	cli    
c001e063:	6a 00                	push   0x0
c001e065:	6a 0f                	push   0xf
c001e067:	e9 ba 00 00 00       	jmp    c001e126 <int_common_stub>

c001e06c <isr16>:
c001e06c:	fa                   	cli    
c001e06d:	6a 00                	push   0x0
c001e06f:	6a 10                	push   0x10
c001e071:	e9 b0 00 00 00       	jmp    c001e126 <int_common_stub>

c001e076 <isr17>:
c001e076:	fa                   	cli    
c001e077:	6a 00                	push   0x0
c001e079:	6a 11                	push   0x11
c001e07b:	e9 a6 00 00 00       	jmp    c001e126 <int_common_stub>

c001e080 <isr18>:
c001e080:	fa                   	cli    
c001e081:	6a 00                	push   0x0
c001e083:	6a 12                	push   0x12
c001e085:	e9 9c 00 00 00       	jmp    c001e126 <int_common_stub>

c001e08a <irq3>:
c001e08a:	fa                   	cli    
c001e08b:	6a 00                	push   0x0
c001e08d:	6a 23                	push   0x23
c001e08f:	e9 92 00 00 00       	jmp    c001e126 <int_common_stub>

c001e094 <irq4>:
c001e094:	fa                   	cli    
c001e095:	6a 00                	push   0x0
c001e097:	6a 24                	push   0x24
c001e099:	e9 88 00 00 00       	jmp    c001e126 <int_common_stub>

c001e09e <irq5>:
c001e09e:	fa                   	cli    
c001e09f:	6a 00                	push   0x0
c001e0a1:	6a 25                	push   0x25
c001e0a3:	e9 7e 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0a8 <irq6>:
c001e0a8:	fa                   	cli    
c001e0a9:	6a 00                	push   0x0
c001e0ab:	6a 26                	push   0x26
c001e0ad:	e9 74 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0b2 <irq7>:
c001e0b2:	fa                   	cli    
c001e0b3:	6a 00                	push   0x0
c001e0b5:	6a 27                	push   0x27
c001e0b7:	e9 6a 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0bc <irq8>:
c001e0bc:	fa                   	cli    
c001e0bd:	6a 00                	push   0x0
c001e0bf:	6a 28                	push   0x28
c001e0c1:	e9 60 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0c6 <irq9>:
c001e0c6:	fa                   	cli    
c001e0c7:	6a 00                	push   0x0
c001e0c9:	6a 29                	push   0x29
c001e0cb:	e9 56 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0d0 <irq10>:
c001e0d0:	fa                   	cli    
c001e0d1:	6a 00                	push   0x0
c001e0d3:	6a 2a                	push   0x2a
c001e0d5:	e9 4c 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0da <irq11>:
c001e0da:	fa                   	cli    
c001e0db:	6a 00                	push   0x0
c001e0dd:	6a 2b                	push   0x2b
c001e0df:	e9 42 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0e4 <irq12>:
c001e0e4:	fa                   	cli    
c001e0e5:	6a 00                	push   0x0
c001e0e7:	6a 2c                	push   0x2c
c001e0e9:	e9 38 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0ee <irq13>:
c001e0ee:	fa                   	cli    
c001e0ef:	6a 00                	push   0x0
c001e0f1:	6a 2d                	push   0x2d
c001e0f3:	e9 2e 00 00 00       	jmp    c001e126 <int_common_stub>

c001e0f8 <irq14>:
c001e0f8:	fa                   	cli    
c001e0f9:	6a 00                	push   0x0
c001e0fb:	6a 2e                	push   0x2e
c001e0fd:	e9 24 00 00 00       	jmp    c001e126 <int_common_stub>

c001e102 <irq15>:
c001e102:	fa                   	cli    
c001e103:	6a 00                	push   0x0
c001e105:	6a 2f                	push   0x2f
c001e107:	e9 1a 00 00 00       	jmp    c001e126 <int_common_stub>

c001e10c <irq1>:
c001e10c:	fa                   	cli    
c001e10d:	6a 00                	push   0x0
c001e10f:	6a 21                	push   0x21
c001e111:	eb 13                	jmp    c001e126 <int_common_stub>

c001e113 <irq2>:
c001e113:	fa                   	cli    
c001e114:	6a 00                	push   0x0
c001e116:	6a 22                	push   0x22
c001e118:	eb 0c                	jmp    c001e126 <int_common_stub>

c001e11a <isr96>:
c001e11a:	6a 00                	push   0x0
c001e11c:	6a 60                	push   0x60
c001e11e:	fb                   	sti    
c001e11f:	eb 37                	jmp    c001e158 <syscall_common_stub>

c001e121 <irq0>:
c001e121:	fa                   	cli    
c001e122:	6a 00                	push   0x0
c001e124:	6a 20                	push   0x20

c001e126 <int_common_stub>:
c001e126:	60                   	pusha  
c001e127:	1e                   	push   ds
c001e128:	06                   	push   es
c001e129:	0f a0                	push   fs
c001e12b:	0f a8                	push   gs
c001e12d:	66 b8 10 00          	mov    ax,0x10
c001e131:	66 8e d8             	mov    ds,ax
c001e134:	66 8e c0             	mov    es,ax
c001e137:	66 8e e0             	mov    fs,ax
c001e13a:	66 8e e8             	mov    gs,ax
c001e13d:	54                   	push   esp
c001e13e:	fc                   	cld    
c001e13f:	e8 5c e1 fe ff       	call   c000c2a0 <int_handler>
c001e144:	81 c4 04 00 00 00    	add    esp,0x4
c001e14a:	0f a9                	pop    gs
c001e14c:	0f a1                	pop    fs
c001e14e:	07                   	pop    es
c001e14f:	1f                   	pop    ds
c001e150:	61                   	popa   
c001e151:	81 c4 08 00 00 00    	add    esp,0x8
c001e157:	cf                   	iret   

c001e158 <syscall_common_stub>:
c001e158:	60                   	pusha  
c001e159:	1e                   	push   ds
c001e15a:	06                   	push   es
c001e15b:	0f a0                	push   fs
c001e15d:	0f a8                	push   gs
c001e15f:	66 b8 10 00          	mov    ax,0x10
c001e163:	66 8e d8             	mov    ds,ax
c001e166:	66 8e c0             	mov    es,ax
c001e169:	66 8e e0             	mov    fs,ax
c001e16c:	66 8e e8             	mov    gs,ax
c001e16f:	54                   	push   esp
c001e170:	fc                   	cld    
c001e171:	e8 2a e1 fe ff       	call   c000c2a0 <int_handler>
c001e176:	81 c4 04 00 00 00    	add    esp,0x4
c001e17c:	0f a9                	pop    gs
c001e17e:	0f a1                	pop    fs
c001e180:	07                   	pop    es
c001e181:	1f                   	pop    ds
c001e182:	e8 70 2d ff ff       	call   c0010ef7 <KiCheckSignalZ>
c001e187:	3d 00 00 00 00       	cmp    eax,0x0
c001e18c:	0f 84 c0 00 00 00    	je     c001e252 <skipSignals>
c001e192:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e197:	61                   	popa   
c001e198:	53                   	push   ebx
c001e199:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e19f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e1a2:	5b                   	pop    ebx
c001e1a3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e1a8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e1ab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e1ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1b1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e1b4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e1b7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e1ba:	81 c4 08 00 00 00    	add    esp,0x8
c001e1c0:	5e                   	pop    esi
c001e1c1:	5b                   	pop    ebx
c001e1c2:	59                   	pop    ecx
c001e1c3:	5a                   	pop    edx
c001e1c4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e1c7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e1ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e1cd:	52                   	push   edx
c001e1ce:	51                   	push   ecx
c001e1cf:	53                   	push   ebx
c001e1d0:	56                   	push   esi
c001e1d1:	81 ec 08 00 00 00    	sub    esp,0x8
c001e1d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e1da:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e1dd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e1e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e1e6:	60                   	pusha  
c001e1e7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e1ed:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e1f0:	89 e3                	mov    ebx,esp
c001e1f2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e1f5:	52                   	push   edx
c001e1f6:	68 16 e2 01 c0       	push   0xc001e216
c001e1fb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e1fe:	89 dc                	mov    esp,ebx
c001e200:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e203:	68 23 00 00 00       	push   0x23
c001e208:	51                   	push   ecx
c001e209:	68 02 02 00 00       	push   0x202
c001e20e:	68 1b 00 00 00       	push   0x1b
c001e213:	ff 36                	push   DWORD PTR [esi]
c001e215:	cf                   	iret   

c001e216 <finishSignal>:
c001e216:	cd 0f                	int    0xf

c001e218 <finishSignal2>:
c001e218:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e21e:	e8 51 2d ff ff       	call   c0010f74 <KiFinishSignalZ>
c001e223:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e229:	68 23 00 00 00       	push   0x23
c001e22e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e231:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e234:	68 1b 00 00 00       	push   0x1b
c001e239:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e23c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e23f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e242:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e245:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e248:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e24b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e24e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e251:	cf                   	iret   

c001e252 <skipSignals>:
c001e252:	61                   	popa   
c001e253:	81 c4 08 00 00 00    	add    esp,0x8
c001e259:	cf                   	iret   
c001e25a:	90                   	nop
c001e25b:	90                   	nop

c001e25c <irq16>:
c001e25c:	fa                   	cli    
c001e25d:	6a 00                	push   0x0
c001e25f:	6a 30                	push   0x30
c001e261:	e9 c0 fe ff ff       	jmp    c001e126 <int_common_stub>

c001e266 <irq17>:
c001e266:	fa                   	cli    
c001e267:	6a 00                	push   0x0
c001e269:	6a 31                	push   0x31
c001e26b:	e9 b6 fe ff ff       	jmp    c001e126 <int_common_stub>

c001e270 <irq18>:
c001e270:	fa                   	cli    
c001e271:	6a 00                	push   0x0
c001e273:	6a 32                	push   0x32
c001e275:	e9 ac fe ff ff       	jmp    c001e126 <int_common_stub>

c001e27a <irq19>:
c001e27a:	fa                   	cli    
c001e27b:	6a 00                	push   0x0
c001e27d:	6a 33                	push   0x33
c001e27f:	e9 a2 fe ff ff       	jmp    c001e126 <int_common_stub>

c001e284 <irq20>:
c001e284:	fa                   	cli    
c001e285:	6a 00                	push   0x0
c001e287:	6a 34                	push   0x34
c001e289:	e9 98 fe ff ff       	jmp    c001e126 <int_common_stub>

c001e28e <irq21>:
c001e28e:	fa                   	cli    
c001e28f:	6a 00                	push   0x0
c001e291:	6a 35                	push   0x35
c001e293:	e9 8e fe ff ff       	jmp    c001e126 <int_common_stub>

c001e298 <irq22>:
c001e298:	fa                   	cli    
c001e299:	6a 00                	push   0x0
c001e29b:	6a 36                	push   0x36
c001e29d:	e9 84 fe ff ff       	jmp    c001e126 <int_common_stub>

c001e2a2 <irq23>:
c001e2a2:	fa                   	cli    
c001e2a3:	6a 00                	push   0x0
c001e2a5:	6a 37                	push   0x37
c001e2a7:	e9 7a fe ff ff       	jmp    c001e126 <int_common_stub>
c001e2ac:	66 90                	xchg   ax,ax
c001e2ae:	66 90                	xchg   ax,ax

c001e2b0 <i386GetRDRAND>:
c001e2b0:	b9 64 00 00 00       	mov    ecx,0x64

c001e2b5 <retry>:
c001e2b5:	0f c7 f0             	rdrand eax
c001e2b8:	72 05                	jb     c001e2bf <retry.done>
c001e2ba:	e2 f9                	loop   c001e2b5 <retry>

c001e2bc <retry.fail>:
c001e2bc:	31 c0                	xor    eax,eax
c001e2be:	c3                   	ret    

c001e2bf <retry.done>:
c001e2bf:	c3                   	ret    

c001e2c0 <absolutelyNoChanceInHell>:
c001e2c0:	b8 01 00 00 00       	mov    eax,0x1
c001e2c5:	0f a2                	cpuid  
c001e2c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e2cd:	74 06                	je     c001e2d5 <sseDetect.noSSE>
c001e2cf:	b8 01 00 00 00       	mov    eax,0x1
c001e2d4:	c3                   	ret    

c001e2d5 <sseDetect.noSSE>:
c001e2d5:	31 c0                	xor    eax,eax
c001e2d7:	c3                   	ret    

c001e2d8 <sseSave>:
c001e2d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2dc:	0f ae 00             	fxsave [eax]
c001e2df:	c3                   	ret    

c001e2e0 <sseLoad>:
c001e2e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2e4:	0f ae 08             	fxrstor [eax]
c001e2e7:	c3                   	ret    

c001e2e8 <sseInit>:
c001e2e8:	e8 42 00 00 00       	call   c001e32f <x87Init>
c001e2ed:	0f 20 e0             	mov    eax,cr4
c001e2f0:	66 0d 00 06          	or     ax,0x600
c001e2f4:	0f 22 e0             	mov    cr4,eax
c001e2f7:	c3                   	ret    

c001e2f8 <sseClose>:
c001e2f8:	c3                   	ret    
c001e2f9:	66 90                	xchg   ax,ax
c001e2fb:	66 90                	xchg   ax,ax
c001e2fd:	66 90                	xchg   ax,ax
c001e2ff:	90                   	nop

c001e300 <value_37F>:
c001e300:	7f 03                	jg     c001e305 <value_37A+0x1>

c001e302 <value_37E>:
c001e302:	7e 03                	jle    c001e307 <x87Detect+0x1>

c001e304 <value_37A>:
c001e304:	7a 03                	jp     c001e309 <x87Detect+0x3>

c001e306 <x87Detect>:
c001e306:	b8 01 00 00 00       	mov    eax,0x1
c001e30b:	0f a2                	cpuid  
c001e30d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e313:	74 06                	je     c001e31b <x87Detect.nox87>
c001e315:	b8 01 00 00 00       	mov    eax,0x1
c001e31a:	c3                   	ret    

c001e31b <x87Detect.nox87>:
c001e31b:	b8 00 00 00 00       	mov    eax,0x0
c001e320:	c3                   	ret    

c001e321 <x87Save>:
c001e321:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e325:	dd 30                	fnsave [eax]
c001e327:	c3                   	ret    

c001e328 <x87Load>:
c001e328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e32c:	dd 20                	frstor [eax]
c001e32e:	c3                   	ret    

c001e32f <x87Init>:
c001e32f:	0f 20 c0             	mov    eax,cr0
c001e332:	66 25 fb ff          	and    ax,0xfffb
c001e336:	66 0d 22 00          	or     ax,0x22
c001e33a:	0f 22 c0             	mov    cr0,eax
c001e33d:	db e3                	fninit 
c001e33f:	0f 06                	clts   
c001e341:	d9 2d 04 e3 01 c0    	fldcw  WORD PTR ds:0xc001e304
c001e347:	c3                   	ret    

c001e348 <x87Close>:
c001e348:	c3                   	ret    
c001e349:	66 90                	xchg   ax,ax
c001e34b:	90                   	nop

c001e34c <__do_global_ctors_aux>:
c001e34c:	a1 00 f3 01 c0       	mov    eax,ds:0xc001f300
c001e351:	83 f8 ff             	cmp    eax,0xffffffff
c001e354:	74 1a                	je     c001e370 <__do_global_ctors_aux+0x24>
c001e356:	55                   	push   ebp
c001e357:	89 e5                	mov    ebp,esp
c001e359:	53                   	push   ebx
c001e35a:	52                   	push   edx
c001e35b:	bb 00 f3 01 c0       	mov    ebx,0xc001f300
c001e360:	ff d0                	call   eax
c001e362:	83 eb 04             	sub    ebx,0x4
c001e365:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e367:	83 f8 ff             	cmp    eax,0xffffffff
c001e36a:	75 f4                	jne    c001e360 <__do_global_ctors_aux+0x14>
c001e36c:	58                   	pop    eax
c001e36d:	5b                   	pop    ebx
c001e36e:	5d                   	pop    ebp
c001e36f:	c3                   	ret    
c001e370:	c3                   	ret    
c001e371:	66 90                	xchg   ax,ax
c001e373:	90                   	nop

c001e374 <__divdi3>:
c001e374:	55                   	push   ebp
c001e375:	57                   	push   edi
c001e376:	56                   	push   esi
c001e377:	53                   	push   ebx
c001e378:	83 ec 1c             	sub    esp,0x1c
c001e37b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e37f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e383:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e386:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e38a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e38e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e392:	85 db                	test   ebx,ebx
c001e394:	0f 88 8e 00 00 00    	js     c001e428 <__divdi3+0xb4>
c001e39a:	89 dd                	mov    ebp,ebx
c001e39c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e3a4:	89 d3                	mov    ebx,edx
c001e3a6:	85 d2                	test   edx,edx
c001e3a8:	79 0d                	jns    c001e3b7 <__divdi3+0x43>
c001e3aa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e3ae:	f7 d8                	neg    eax
c001e3b0:	83 d2 00             	adc    edx,0x0
c001e3b3:	f7 da                	neg    edx
c001e3b5:	89 d3                	mov    ebx,edx
c001e3b7:	89 c7                	mov    edi,eax
c001e3b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3bc:	85 db                	test   ebx,ebx
c001e3be:	75 48                	jne    c001e408 <__divdi3+0x94>
c001e3c0:	39 ef                	cmp    edi,ebp
c001e3c2:	76 24                	jbe    c001e3e8 <__divdi3+0x74>
c001e3c4:	89 ea                	mov    edx,ebp
c001e3c6:	f7 f7                	div    edi
c001e3c8:	89 c1                	mov    ecx,eax
c001e3ca:	31 f6                	xor    esi,esi
c001e3cc:	89 c8                	mov    eax,ecx
c001e3ce:	89 f2                	mov    edx,esi
c001e3d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e3d4:	85 c9                	test   ecx,ecx
c001e3d6:	74 07                	je     c001e3df <__divdi3+0x6b>
c001e3d8:	f7 d8                	neg    eax
c001e3da:	83 d2 00             	adc    edx,0x0
c001e3dd:	f7 da                	neg    edx
c001e3df:	83 c4 1c             	add    esp,0x1c
c001e3e2:	5b                   	pop    ebx
c001e3e3:	5e                   	pop    esi
c001e3e4:	5f                   	pop    edi
c001e3e5:	5d                   	pop    ebp
c001e3e6:	c3                   	ret    
c001e3e7:	90                   	nop
c001e3e8:	85 ff                	test   edi,edi
c001e3ea:	75 0b                	jne    c001e3f7 <__divdi3+0x83>
c001e3ec:	b8 01 00 00 00       	mov    eax,0x1
c001e3f1:	31 d2                	xor    edx,edx
c001e3f3:	f7 f3                	div    ebx
c001e3f5:	89 c7                	mov    edi,eax
c001e3f7:	31 d2                	xor    edx,edx
c001e3f9:	89 e8                	mov    eax,ebp
c001e3fb:	f7 f7                	div    edi
c001e3fd:	89 c6                	mov    esi,eax
c001e3ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e402:	f7 f7                	div    edi
c001e404:	89 c1                	mov    ecx,eax
c001e406:	eb c4                	jmp    c001e3cc <__divdi3+0x58>
c001e408:	39 eb                	cmp    ebx,ebp
c001e40a:	77 3c                	ja     c001e448 <__divdi3+0xd4>
c001e40c:	0f bd f3             	bsr    esi,ebx
c001e40f:	83 f6 1f             	xor    esi,0x1f
c001e412:	75 40                	jne    c001e454 <__divdi3+0xe0>
c001e414:	39 eb                	cmp    ebx,ebp
c001e416:	72 09                	jb     c001e421 <__divdi3+0xad>
c001e418:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e41b:	0f 87 97 00 00 00    	ja     c001e4b8 <__divdi3+0x144>
c001e421:	b9 01 00 00 00       	mov    ecx,0x1
c001e426:	eb a4                	jmp    c001e3cc <__divdi3+0x58>
c001e428:	f7 d9                	neg    ecx
c001e42a:	83 d3 00             	adc    ebx,0x0
c001e42d:	f7 db                	neg    ebx
c001e42f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e432:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e436:	89 dd                	mov    ebp,ebx
c001e438:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e440:	e9 5f ff ff ff       	jmp    c001e3a4 <__divdi3+0x30>
c001e445:	8d 76 00             	lea    esi,[esi+0x0]
c001e448:	31 f6                	xor    esi,esi
c001e44a:	31 c9                	xor    ecx,ecx
c001e44c:	e9 7b ff ff ff       	jmp    c001e3cc <__divdi3+0x58>
c001e451:	8d 76 00             	lea    esi,[esi+0x0]
c001e454:	b8 20 00 00 00       	mov    eax,0x20
c001e459:	29 f0                	sub    eax,esi
c001e45b:	89 f1                	mov    ecx,esi
c001e45d:	d3 e3                	shl    ebx,cl
c001e45f:	89 fa                	mov    edx,edi
c001e461:	88 c1                	mov    cl,al
c001e463:	d3 ea                	shr    edx,cl
c001e465:	09 da                	or     edx,ebx
c001e467:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e46b:	89 f1                	mov    ecx,esi
c001e46d:	d3 e7                	shl    edi,cl
c001e46f:	89 eb                	mov    ebx,ebp
c001e471:	88 c1                	mov    cl,al
c001e473:	d3 eb                	shr    ebx,cl
c001e475:	89 f1                	mov    ecx,esi
c001e477:	d3 e5                	shl    ebp,cl
c001e479:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e47c:	88 c1                	mov    cl,al
c001e47e:	d3 ea                	shr    edx,cl
c001e480:	09 d5                	or     ebp,edx
c001e482:	89 e8                	mov    eax,ebp
c001e484:	89 da                	mov    edx,ebx
c001e486:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e48a:	89 d3                	mov    ebx,edx
c001e48c:	89 c5                	mov    ebp,eax
c001e48e:	f7 e7                	mul    edi
c001e490:	39 d3                	cmp    ebx,edx
c001e492:	72 18                	jb     c001e4ac <__divdi3+0x138>
c001e494:	74 0a                	je     c001e4a0 <__divdi3+0x12c>
c001e496:	89 e9                	mov    ecx,ebp
c001e498:	31 f6                	xor    esi,esi
c001e49a:	e9 2d ff ff ff       	jmp    c001e3cc <__divdi3+0x58>
c001e49f:	90                   	nop
c001e4a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e4a3:	89 f1                	mov    ecx,esi
c001e4a5:	d3 e7                	shl    edi,cl
c001e4a7:	39 c7                	cmp    edi,eax
c001e4a9:	73 eb                	jae    c001e496 <__divdi3+0x122>
c001e4ab:	90                   	nop
c001e4ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e4af:	31 f6                	xor    esi,esi
c001e4b1:	e9 16 ff ff ff       	jmp    c001e3cc <__divdi3+0x58>
c001e4b6:	66 90                	xchg   ax,ax
c001e4b8:	31 c9                	xor    ecx,ecx
c001e4ba:	e9 0d ff ff ff       	jmp    c001e3cc <__divdi3+0x58>
c001e4bf:	90                   	nop

c001e4c0 <__moddi3>:
c001e4c0:	55                   	push   ebp
c001e4c1:	57                   	push   edi
c001e4c2:	56                   	push   esi
c001e4c3:	53                   	push   ebx
c001e4c4:	83 ec 2c             	sub    esp,0x2c
c001e4c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e4cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e4cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e4d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e4d7:	85 db                	test   ebx,ebx
c001e4d9:	0f 88 85 00 00 00    	js     c001e564 <__moddi3+0xa4>
c001e4df:	89 de                	mov    esi,ebx
c001e4e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e4e9:	89 d7                	mov    edi,edx
c001e4eb:	85 d2                	test   edx,edx
c001e4ed:	79 09                	jns    c001e4f8 <__moddi3+0x38>
c001e4ef:	f7 d8                	neg    eax
c001e4f1:	83 d2 00             	adc    edx,0x0
c001e4f4:	f7 da                	neg    edx
c001e4f6:	89 d7                	mov    edi,edx
c001e4f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4fc:	89 cd                	mov    ebp,ecx
c001e4fe:	85 ff                	test   edi,edi
c001e500:	75 52                	jne    c001e554 <__moddi3+0x94>
c001e502:	89 c3                	mov    ebx,eax
c001e504:	39 f0                	cmp    eax,esi
c001e506:	76 24                	jbe    c001e52c <__moddi3+0x6c>
c001e508:	89 c8                	mov    eax,ecx
c001e50a:	89 f2                	mov    edx,esi
c001e50c:	f7 f3                	div    ebx
c001e50e:	89 d6                	mov    esi,edx
c001e510:	89 f0                	mov    eax,esi
c001e512:	31 d2                	xor    edx,edx
c001e514:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e518:	85 c9                	test   ecx,ecx
c001e51a:	74 07                	je     c001e523 <__moddi3+0x63>
c001e51c:	f7 d8                	neg    eax
c001e51e:	83 d2 00             	adc    edx,0x0
c001e521:	f7 da                	neg    edx
c001e523:	83 c4 2c             	add    esp,0x2c
c001e526:	5b                   	pop    ebx
c001e527:	5e                   	pop    esi
c001e528:	5f                   	pop    edi
c001e529:	5d                   	pop    ebp
c001e52a:	c3                   	ret    
c001e52b:	90                   	nop
c001e52c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e530:	85 db                	test   ebx,ebx
c001e532:	75 0d                	jne    c001e541 <__moddi3+0x81>
c001e534:	b8 01 00 00 00       	mov    eax,0x1
c001e539:	31 d2                	xor    edx,edx
c001e53b:	f7 f7                	div    edi
c001e53d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e541:	89 f0                	mov    eax,esi
c001e543:	31 d2                	xor    edx,edx
c001e545:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e549:	f7 f7                	div    edi
c001e54b:	89 e8                	mov    eax,ebp
c001e54d:	f7 f7                	div    edi
c001e54f:	89 d6                	mov    esi,edx
c001e551:	eb bd                	jmp    c001e510 <__moddi3+0x50>
c001e553:	90                   	nop
c001e554:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e558:	39 f7                	cmp    edi,esi
c001e55a:	76 20                	jbe    c001e57c <__moddi3+0xbc>
c001e55c:	89 c8                	mov    eax,ecx
c001e55e:	89 f2                	mov    edx,esi
c001e560:	eb b2                	jmp    c001e514 <__moddi3+0x54>
c001e562:	66 90                	xchg   ax,ax
c001e564:	f7 d9                	neg    ecx
c001e566:	83 d3 00             	adc    ebx,0x0
c001e569:	f7 db                	neg    ebx
c001e56b:	89 de                	mov    esi,ebx
c001e56d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e575:	e9 6f ff ff ff       	jmp    c001e4e9 <__moddi3+0x29>
c001e57a:	66 90                	xchg   ax,ax
c001e57c:	0f bd c7             	bsr    eax,edi
c001e57f:	83 f0 1f             	xor    eax,0x1f
c001e582:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e586:	75 24                	jne    c001e5ac <__moddi3+0xec>
c001e588:	39 f7                	cmp    edi,esi
c001e58a:	72 06                	jb     c001e592 <__moddi3+0xd2>
c001e58c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e590:	77 0c                	ja     c001e59e <__moddi3+0xde>
c001e592:	89 e9                	mov    ecx,ebp
c001e594:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e598:	19 fe                	sbb    esi,edi
c001e59a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e59e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5a2:	89 f2                	mov    edx,esi
c001e5a4:	e9 6b ff ff ff       	jmp    c001e514 <__moddi3+0x54>
c001e5a9:	8d 76 00             	lea    esi,[esi+0x0]
c001e5ac:	b8 20 00 00 00       	mov    eax,0x20
c001e5b1:	89 c2                	mov    edx,eax
c001e5b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e5b7:	29 da                	sub    edx,ebx
c001e5b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e5bd:	88 d9                	mov    cl,bl
c001e5bf:	d3 e7                	shl    edi,cl
c001e5c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5c5:	88 d1                	mov    cl,dl
c001e5c7:	d3 e8                	shr    eax,cl
c001e5c9:	09 c7                	or     edi,eax
c001e5cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e5cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5d3:	89 d8                	mov    eax,ebx
c001e5d5:	88 d9                	mov    cl,bl
c001e5d7:	d3 e7                	shl    edi,cl
c001e5d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e5dd:	89 f3                	mov    ebx,esi
c001e5df:	88 d1                	mov    cl,dl
c001e5e1:	d3 eb                	shr    ebx,cl
c001e5e3:	89 c7                	mov    edi,eax
c001e5e5:	88 c1                	mov    cl,al
c001e5e7:	d3 e6                	shl    esi,cl
c001e5e9:	89 e8                	mov    eax,ebp
c001e5eb:	88 d1                	mov    cl,dl
c001e5ed:	d3 e8                	shr    eax,cl
c001e5ef:	09 f0                	or     eax,esi
c001e5f1:	89 f9                	mov    ecx,edi
c001e5f3:	d3 e5                	shl    ebp,cl
c001e5f5:	89 da                	mov    edx,ebx
c001e5f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e5fb:	89 d3                	mov    ebx,edx
c001e5fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e601:	89 c6                	mov    esi,eax
c001e603:	89 d1                	mov    ecx,edx
c001e605:	39 d3                	cmp    ebx,edx
c001e607:	72 27                	jb     c001e630 <__moddi3+0x170>
c001e609:	74 21                	je     c001e62c <__moddi3+0x16c>
c001e60b:	29 f5                	sub    ebp,esi
c001e60d:	19 cb                	sbb    ebx,ecx
c001e60f:	89 de                	mov    esi,ebx
c001e611:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e615:	d3 e6                	shl    esi,cl
c001e617:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e61b:	89 f9                	mov    ecx,edi
c001e61d:	d3 ed                	shr    ebp,cl
c001e61f:	09 ee                	or     esi,ebp
c001e621:	89 f0                	mov    eax,esi
c001e623:	d3 eb                	shr    ebx,cl
c001e625:	89 da                	mov    edx,ebx
c001e627:	e9 e8 fe ff ff       	jmp    c001e514 <__moddi3+0x54>
c001e62c:	39 c5                	cmp    ebp,eax
c001e62e:	73 db                	jae    c001e60b <__moddi3+0x14b>
c001e630:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e634:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e638:	89 d1                	mov    ecx,edx
c001e63a:	89 c6                	mov    esi,eax
c001e63c:	eb cd                	jmp    c001e60b <__moddi3+0x14b>
c001e63e:	66 90                	xchg   ax,ax

c001e640 <__udivdi3>:
c001e640:	55                   	push   ebp
c001e641:	57                   	push   edi
c001e642:	56                   	push   esi
c001e643:	53                   	push   ebx
c001e644:	83 ec 1c             	sub    esp,0x1c
c001e647:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e64b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e64f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e653:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e657:	85 d2                	test   edx,edx
c001e659:	75 41                	jne    c001e69c <__udivdi3+0x5c>
c001e65b:	39 f7                	cmp    edi,esi
c001e65d:	76 15                	jbe    c001e674 <__udivdi3+0x34>
c001e65f:	89 e8                	mov    eax,ebp
c001e661:	89 f2                	mov    edx,esi
c001e663:	f7 f7                	div    edi
c001e665:	31 db                	xor    ebx,ebx
c001e667:	89 da                	mov    edx,ebx
c001e669:	83 c4 1c             	add    esp,0x1c
c001e66c:	5b                   	pop    ebx
c001e66d:	5e                   	pop    esi
c001e66e:	5f                   	pop    edi
c001e66f:	5d                   	pop    ebp
c001e670:	c3                   	ret    
c001e671:	8d 76 00             	lea    esi,[esi+0x0]
c001e674:	89 f9                	mov    ecx,edi
c001e676:	85 ff                	test   edi,edi
c001e678:	75 0b                	jne    c001e685 <__udivdi3+0x45>
c001e67a:	b8 01 00 00 00       	mov    eax,0x1
c001e67f:	31 d2                	xor    edx,edx
c001e681:	f7 f7                	div    edi
c001e683:	89 c1                	mov    ecx,eax
c001e685:	31 d2                	xor    edx,edx
c001e687:	89 f0                	mov    eax,esi
c001e689:	f7 f1                	div    ecx
c001e68b:	89 c3                	mov    ebx,eax
c001e68d:	89 e8                	mov    eax,ebp
c001e68f:	f7 f1                	div    ecx
c001e691:	89 da                	mov    edx,ebx
c001e693:	83 c4 1c             	add    esp,0x1c
c001e696:	5b                   	pop    ebx
c001e697:	5e                   	pop    esi
c001e698:	5f                   	pop    edi
c001e699:	5d                   	pop    ebp
c001e69a:	c3                   	ret    
c001e69b:	90                   	nop
c001e69c:	39 f2                	cmp    edx,esi
c001e69e:	77 1c                	ja     c001e6bc <__udivdi3+0x7c>
c001e6a0:	0f bd da             	bsr    ebx,edx
c001e6a3:	83 f3 1f             	xor    ebx,0x1f
c001e6a6:	75 24                	jne    c001e6cc <__udivdi3+0x8c>
c001e6a8:	39 f2                	cmp    edx,esi
c001e6aa:	72 08                	jb     c001e6b4 <__udivdi3+0x74>
c001e6ac:	39 ef                	cmp    edi,ebp
c001e6ae:	0f 87 84 00 00 00    	ja     c001e738 <__udivdi3+0xf8>
c001e6b4:	b8 01 00 00 00       	mov    eax,0x1
c001e6b9:	eb ac                	jmp    c001e667 <__udivdi3+0x27>
c001e6bb:	90                   	nop
c001e6bc:	31 db                	xor    ebx,ebx
c001e6be:	31 c0                	xor    eax,eax
c001e6c0:	89 da                	mov    edx,ebx
c001e6c2:	83 c4 1c             	add    esp,0x1c
c001e6c5:	5b                   	pop    ebx
c001e6c6:	5e                   	pop    esi
c001e6c7:	5f                   	pop    edi
c001e6c8:	5d                   	pop    ebp
c001e6c9:	c3                   	ret    
c001e6ca:	66 90                	xchg   ax,ax
c001e6cc:	b8 20 00 00 00       	mov    eax,0x20
c001e6d1:	29 d8                	sub    eax,ebx
c001e6d3:	88 d9                	mov    cl,bl
c001e6d5:	d3 e2                	shl    edx,cl
c001e6d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e6db:	89 fa                	mov    edx,edi
c001e6dd:	88 c1                	mov    cl,al
c001e6df:	d3 ea                	shr    edx,cl
c001e6e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e6e5:	09 d1                	or     ecx,edx
c001e6e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6eb:	88 d9                	mov    cl,bl
c001e6ed:	d3 e7                	shl    edi,cl
c001e6ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6f3:	89 f7                	mov    edi,esi
c001e6f5:	88 c1                	mov    cl,al
c001e6f7:	d3 ef                	shr    edi,cl
c001e6f9:	88 d9                	mov    cl,bl
c001e6fb:	d3 e6                	shl    esi,cl
c001e6fd:	89 ea                	mov    edx,ebp
c001e6ff:	88 c1                	mov    cl,al
c001e701:	d3 ea                	shr    edx,cl
c001e703:	09 d6                	or     esi,edx
c001e705:	89 f0                	mov    eax,esi
c001e707:	89 fa                	mov    edx,edi
c001e709:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e70d:	89 d7                	mov    edi,edx
c001e70f:	89 c6                	mov    esi,eax
c001e711:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e715:	39 d7                	cmp    edi,edx
c001e717:	72 13                	jb     c001e72c <__udivdi3+0xec>
c001e719:	74 09                	je     c001e724 <__udivdi3+0xe4>
c001e71b:	89 f0                	mov    eax,esi
c001e71d:	31 db                	xor    ebx,ebx
c001e71f:	e9 43 ff ff ff       	jmp    c001e667 <__udivdi3+0x27>
c001e724:	88 d9                	mov    cl,bl
c001e726:	d3 e5                	shl    ebp,cl
c001e728:	39 c5                	cmp    ebp,eax
c001e72a:	73 ef                	jae    c001e71b <__udivdi3+0xdb>
c001e72c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e72f:	31 db                	xor    ebx,ebx
c001e731:	e9 31 ff ff ff       	jmp    c001e667 <__udivdi3+0x27>
c001e736:	66 90                	xchg   ax,ax
c001e738:	31 c0                	xor    eax,eax
c001e73a:	e9 28 ff ff ff       	jmp    c001e667 <__udivdi3+0x27>
c001e73f:	90                   	nop

c001e740 <__umoddi3>:
c001e740:	55                   	push   ebp
c001e741:	57                   	push   edi
c001e742:	56                   	push   esi
c001e743:	53                   	push   ebx
c001e744:	83 ec 1c             	sub    esp,0x1c
c001e747:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e74b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e74f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e753:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e757:	89 da                	mov    edx,ebx
c001e759:	85 c0                	test   eax,eax
c001e75b:	75 37                	jne    c001e794 <__umoddi3+0x54>
c001e75d:	39 df                	cmp    edi,ebx
c001e75f:	76 13                	jbe    c001e774 <__umoddi3+0x34>
c001e761:	89 f0                	mov    eax,esi
c001e763:	f7 f7                	div    edi
c001e765:	89 d0                	mov    eax,edx
c001e767:	31 d2                	xor    edx,edx
c001e769:	83 c4 1c             	add    esp,0x1c
c001e76c:	5b                   	pop    ebx
c001e76d:	5e                   	pop    esi
c001e76e:	5f                   	pop    edi
c001e76f:	5d                   	pop    ebp
c001e770:	c3                   	ret    
c001e771:	8d 76 00             	lea    esi,[esi+0x0]
c001e774:	89 fd                	mov    ebp,edi
c001e776:	85 ff                	test   edi,edi
c001e778:	75 0b                	jne    c001e785 <__umoddi3+0x45>
c001e77a:	b8 01 00 00 00       	mov    eax,0x1
c001e77f:	31 d2                	xor    edx,edx
c001e781:	f7 f7                	div    edi
c001e783:	89 c5                	mov    ebp,eax
c001e785:	89 d8                	mov    eax,ebx
c001e787:	31 d2                	xor    edx,edx
c001e789:	f7 f5                	div    ebp
c001e78b:	89 f0                	mov    eax,esi
c001e78d:	f7 f5                	div    ebp
c001e78f:	89 d0                	mov    eax,edx
c001e791:	eb d4                	jmp    c001e767 <__umoddi3+0x27>
c001e793:	90                   	nop
c001e794:	89 f1                	mov    ecx,esi
c001e796:	39 d8                	cmp    eax,ebx
c001e798:	76 0a                	jbe    c001e7a4 <__umoddi3+0x64>
c001e79a:	89 f0                	mov    eax,esi
c001e79c:	83 c4 1c             	add    esp,0x1c
c001e79f:	5b                   	pop    ebx
c001e7a0:	5e                   	pop    esi
c001e7a1:	5f                   	pop    edi
c001e7a2:	5d                   	pop    ebp
c001e7a3:	c3                   	ret    
c001e7a4:	0f bd e8             	bsr    ebp,eax
c001e7a7:	83 f5 1f             	xor    ebp,0x1f
c001e7aa:	75 1c                	jne    c001e7c8 <__umoddi3+0x88>
c001e7ac:	39 d8                	cmp    eax,ebx
c001e7ae:	72 04                	jb     c001e7b4 <__umoddi3+0x74>
c001e7b0:	39 f7                	cmp    edi,esi
c001e7b2:	77 08                	ja     c001e7bc <__umoddi3+0x7c>
c001e7b4:	89 da                	mov    edx,ebx
c001e7b6:	29 fe                	sub    esi,edi
c001e7b8:	19 c2                	sbb    edx,eax
c001e7ba:	89 f1                	mov    ecx,esi
c001e7bc:	89 c8                	mov    eax,ecx
c001e7be:	83 c4 1c             	add    esp,0x1c
c001e7c1:	5b                   	pop    ebx
c001e7c2:	5e                   	pop    esi
c001e7c3:	5f                   	pop    edi
c001e7c4:	5d                   	pop    ebp
c001e7c5:	c3                   	ret    
c001e7c6:	66 90                	xchg   ax,ax
c001e7c8:	ba 20 00 00 00       	mov    edx,0x20
c001e7cd:	29 ea                	sub    edx,ebp
c001e7cf:	89 e9                	mov    ecx,ebp
c001e7d1:	d3 e0                	shl    eax,cl
c001e7d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7d7:	89 f8                	mov    eax,edi
c001e7d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e7dd:	88 d1                	mov    cl,dl
c001e7df:	d3 e8                	shr    eax,cl
c001e7e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7e5:	09 c1                	or     ecx,eax
c001e7e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7eb:	89 e9                	mov    ecx,ebp
c001e7ed:	d3 e7                	shl    edi,cl
c001e7ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7f3:	89 d8                	mov    eax,ebx
c001e7f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e7f9:	88 d1                	mov    cl,dl
c001e7fb:	d3 e8                	shr    eax,cl
c001e7fd:	89 c7                	mov    edi,eax
c001e7ff:	89 e9                	mov    ecx,ebp
c001e801:	d3 e3                	shl    ebx,cl
c001e803:	89 f0                	mov    eax,esi
c001e805:	88 d1                	mov    cl,dl
c001e807:	d3 e8                	shr    eax,cl
c001e809:	09 d8                	or     eax,ebx
c001e80b:	89 e9                	mov    ecx,ebp
c001e80d:	d3 e6                	shl    esi,cl
c001e80f:	89 f3                	mov    ebx,esi
c001e811:	89 fa                	mov    edx,edi
c001e813:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e817:	89 d1                	mov    ecx,edx
c001e819:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e81d:	89 c6                	mov    esi,eax
c001e81f:	89 d7                	mov    edi,edx
c001e821:	39 d1                	cmp    ecx,edx
c001e823:	72 27                	jb     c001e84c <__umoddi3+0x10c>
c001e825:	74 21                	je     c001e848 <__umoddi3+0x108>
c001e827:	89 ca                	mov    edx,ecx
c001e829:	29 f3                	sub    ebx,esi
c001e82b:	19 fa                	sbb    edx,edi
c001e82d:	89 d0                	mov    eax,edx
c001e82f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e833:	d3 e0                	shl    eax,cl
c001e835:	89 e9                	mov    ecx,ebp
c001e837:	d3 eb                	shr    ebx,cl
c001e839:	09 d8                	or     eax,ebx
c001e83b:	d3 ea                	shr    edx,cl
c001e83d:	83 c4 1c             	add    esp,0x1c
c001e840:	5b                   	pop    ebx
c001e841:	5e                   	pop    esi
c001e842:	5f                   	pop    edi
c001e843:	5d                   	pop    ebp
c001e844:	c3                   	ret    
c001e845:	8d 76 00             	lea    esi,[esi+0x0]
c001e848:	39 c3                	cmp    ebx,eax
c001e84a:	73 db                	jae    c001e827 <__umoddi3+0xe7>
c001e84c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e850:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e854:	89 d7                	mov    edi,edx
c001e856:	89 c6                	mov    esi,eax
c001e858:	eb cd                	jmp    c001e827 <__umoddi3+0xe7>

Disassembly of section .init:

c001e85a <_init>:
c001e85a:	55                   	push   ebp
c001e85b:	89 e5                	mov    ebp,esp
c001e85d:	e8 92 18 fe ff       	call   c00000f4 <frame_dummy>
c001e862:	e8 e5 fa ff ff       	call   c001e34c <__do_global_ctors_aux>
c001e867:	5d                   	pop    ebp
c001e868:	c3                   	ret    

Disassembly of section .fini:

c001e869 <_fini>:
c001e869:	55                   	push   ebp
c001e86a:	89 e5                	mov    ebp,esp
c001e86c:	e8 13 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e871:	5d                   	pop    ebp
c001e872:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e874 <Computer::~Computer()>:
c001e874:	83 ec 0c             	sub    esp,0xc
c001e877:	ba 94 fb 01 c0       	mov    edx,0xc001fb94
c001e87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e880:	89 10                	mov    DWORD PTR [eax],edx
c001e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e886:	83 ec 0c             	sub    esp,0xc
c001e889:	50                   	push   eax
c001e88a:	e8 69 d4 fe ff       	call   c000bcf8 <Device::~Device()>
c001e88f:	83 c4 10             	add    esp,0x10
c001e892:	90                   	nop
c001e893:	83 c4 0c             	add    esp,0xc
c001e896:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e898 <Computer::~Computer()>:
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	83 ec 0c             	sub    esp,0xc
c001e89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8a2:	e8 cd ff ff ff       	call   c001e874 <Computer::~Computer()>
c001e8a7:	83 c4 10             	add    esp,0x10
c001e8aa:	83 ec 08             	sub    esp,0x8
c001e8ad:	68 70 01 00 00       	push   0x170
c001e8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b6:	e8 da bf fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001e8bb:	83 c4 10             	add    esp,0x10
c001e8be:	83 c4 0c             	add    esp,0xc
c001e8c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e8c2 <idleCommon()>:
c001e8c2:	83 ec 0c             	sub    esp,0xc
c001e8c5:	fa                   	cli    
c001e8c6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e8cc:	e8 d3 67 ff ff       	call   c00150a4 <schedule()>
c001e8d1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e8d6:	48                   	dec    eax
c001e8d7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e8dc:	75 01                	jne    c001e8df <idleCommon()+0x1d>
c001e8de:	fb                   	sti    
c001e8df:	83 c4 0c             	add    esp,0xc
c001e8e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e8e4 <LinkedList<UnixFile>::~LinkedList()>:
c001e8e4:	90                   	nop
c001e8e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e8e6 <LinkedList<UnixFile>::LinkedList()>:
c001e8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e90a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e91f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e926:	90                   	nop
c001e927:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e928 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e928:	83 ec 0c             	sub    esp,0xc
c001e92b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e930:	75 10                	jne    c001e942 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e932:	83 ec 0c             	sub    esp,0xc
c001e935:	68 a8 fd 01 c0       	push   0xc001fda8
c001e93a:	e8 b0 1f ff ff       	call   c00108ef <KePanic(char const*)>
c001e93f:	83 c4 10             	add    esp,0x10
c001e942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e946:	8b 00                	mov    eax,DWORD PTR [eax]
c001e948:	85 c0                	test   eax,eax
c001e94a:	74 34                	je     c001e980 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e950:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e953:	85 c0                	test   eax,eax
c001e955:	74 29                	je     c001e980 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e95e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e962:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e969:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e96d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e974:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e977:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e97e:	eb 65                	jmp    c001e9e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e984:	8b 00                	mov    eax,DWORD PTR [eax]
c001e986:	85 c0                	test   eax,eax
c001e988:	75 4b                	jne    c001e9d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e991:	85 c0                	test   eax,eax
c001e993:	75 40                	jne    c001e9d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e999:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e99d:	89 10                	mov    DWORD PTR [eax],edx
c001e99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9bf:	85 c0                	test   eax,eax
c001e9c1:	74 22                	je     c001e9e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9c3:	83 ec 0c             	sub    esp,0xc
c001e9c6:	68 ca fd 01 c0       	push   0xc001fdca
c001e9cb:	e8 1f 1f ff ff       	call   c00108ef <KePanic(char const*)>
c001e9d0:	83 c4 10             	add    esp,0x10
c001e9d3:	eb 10                	jmp    c001e9e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9d5:	83 ec 0c             	sub    esp,0xc
c001e9d8:	68 d4 fd 01 c0       	push   0xc001fdd4
c001e9dd:	e8 0d 1f ff ff       	call   c00108ef <KePanic(char const*)>
c001e9e2:	83 c4 10             	add    esp,0x10
c001e9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9ec:	8d 50 01             	lea    edx,[eax+0x1]
c001e9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9f6:	90                   	nop
c001e9f7:	83 c4 0c             	add    esp,0xc
c001e9fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e9fc <LinkedList<UnixFile>::getFirstElement()>:
c001e9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ea04 <LinkedList<UnixFile>::removeFirst()>:
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea0d:	85 c0                	test   eax,eax
c001ea0f:	75 12                	jne    c001ea23 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ea11:	83 ec 0c             	sub    esp,0xc
c001ea14:	68 e0 fd 01 c0       	push   0xc001fde0
c001ea19:	e8 d1 1e ff ff       	call   c00108ef <KePanic(char const*)>
c001ea1e:	83 c4 10             	add    esp,0x10
c001ea21:	eb 7e                	jmp    c001eaa1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ea23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea2d:	85 c0                	test   eax,eax
c001ea2f:	74 10                	je     c001ea41 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ea31:	83 ec 0c             	sub    esp,0xc
c001ea34:	68 2b fe 01 c0       	push   0xc001fe2b
c001ea39:	e8 b1 1e ff ff       	call   c00108ef <KePanic(char const*)>
c001ea3e:	83 c4 10             	add    esp,0x10
c001ea41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea45:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea4a:	85 c0                	test   eax,eax
c001ea4c:	75 33                	jne    c001ea81 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ea4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea6a:	83 f8 01             	cmp    eax,0x1
c001ea6d:	74 21                	je     c001ea90 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea6f:	83 ec 0c             	sub    esp,0xc
c001ea72:	68 04 fe 01 c0       	push   0xc001fe04
c001ea77:	e8 73 1e ff ff       	call   c00108ef <KePanic(char const*)>
c001ea7c:	83 c4 10             	add    esp,0x10
c001ea7f:	eb 0f                	jmp    c001ea90 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea87:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ea8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8e:	89 10                	mov    DWORD PTR [eax],edx
c001ea90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea97:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eaa1:	83 c4 0c             	add    esp,0xc
c001eaa4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001eaa6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001eaa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eaaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eaad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001eaae <DriverlessDevice::~DriverlessDevice()>:
c001eaae:	ba 7c 04 02 c0       	mov    edx,0xc002047c
c001eab3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eab7:	89 10                	mov    DWORD PTR [eax],edx
c001eab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eabd:	50                   	push   eax
c001eabe:	e8 35 d2 fe ff       	call   c000bcf8 <Device::~Device()>
c001eac3:	83 c4 04             	add    esp,0x4
c001eac6:	90                   	nop
c001eac7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eac8 <DriverlessDevice::~DriverlessDevice()>:
c001eac8:	83 ec 0c             	sub    esp,0xc
c001eacb:	83 ec 0c             	sub    esp,0xc
c001eace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead2:	e8 d7 ff ff ff       	call   c001eaae <DriverlessDevice::~DriverlessDevice()>
c001ead7:	83 c4 10             	add    esp,0x10
c001eada:	83 ec 08             	sub    esp,0x8
c001eadd:	68 58 01 00 00       	push   0x158
c001eae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eae6:	e8 aa bd fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001eaeb:	83 c4 10             	add    esp,0x10
c001eaee:	83 c4 0c             	add    esp,0xc
c001eaf1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eaf2 <LinkedList<Device>::addElement(Device*)>:
c001eaf2:	83 ec 0c             	sub    esp,0xc
c001eaf5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eafa:	75 10                	jne    c001eb0c <LinkedList<Device>::addElement(Device*)+0x1a>
c001eafc:	83 ec 0c             	sub    esp,0xc
c001eaff:	68 a8 fd 01 c0       	push   0xc001fda8
c001eb04:	e8 e6 1d ff ff       	call   c00108ef <KePanic(char const*)>
c001eb09:	83 c4 10             	add    esp,0x10
c001eb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb10:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb12:	85 c0                	test   eax,eax
c001eb14:	74 3a                	je     c001eb50 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb1d:	85 c0                	test   eax,eax
c001eb1f:	74 2f                	je     c001eb50 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb2c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb3a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb44:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb4e:	eb 68                	jmp    c001ebb8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb54:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb56:	85 c0                	test   eax,eax
c001eb58:	75 4e                	jne    c001eba8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb61:	85 c0                	test   eax,eax
c001eb63:	75 43                	jne    c001eba8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb6d:	89 10                	mov    DWORD PTR [eax],edx
c001eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb81:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb92:	85 c0                	test   eax,eax
c001eb94:	74 22                	je     c001ebb8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb96:	83 ec 0c             	sub    esp,0xc
c001eb99:	68 ca fd 01 c0       	push   0xc001fdca
c001eb9e:	e8 4c 1d ff ff       	call   c00108ef <KePanic(char const*)>
c001eba3:	83 c4 10             	add    esp,0x10
c001eba6:	eb 10                	jmp    c001ebb8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eba8:	83 ec 0c             	sub    esp,0xc
c001ebab:	68 d4 fd 01 c0       	push   0xc001fdd4
c001ebb0:	e8 3a 1d ff ff       	call   c00108ef <KePanic(char const*)>
c001ebb5:	83 c4 10             	add    esp,0x10
c001ebb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebbf:	8d 50 01             	lea    edx,[eax+0x1]
c001ebc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebc9:	90                   	nop
c001ebca:	83 c4 0c             	add    esp,0xc
c001ebcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ebce <LinkedList<Device>::LinkedList()>:
c001ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec0e:	90                   	nop
c001ec0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ec10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ec10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec16:	85 c0                	test   eax,eax
c001ec18:	75 0e                	jne    c001ec28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec21:	85 c0                	test   eax,eax
c001ec23:	75 03                	jne    c001ec28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec25:	b0 01                	mov    al,0x1
c001ec27:	c3                   	ret    
c001ec28:	b0 00                	mov    al,0x0
c001ec2a:	90                   	nop
c001ec2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ec34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ec34:	83 ec 0c             	sub    esp,0xc
c001ec37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec3d:	85 c0                	test   eax,eax
c001ec3f:	75 17                	jne    c001ec58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ec41:	83 ec 0c             	sub    esp,0xc
c001ec44:	68 e0 fd 01 c0       	push   0xc001fde0
c001ec49:	e8 a1 1c ff ff       	call   c00108ef <KePanic(char const*)>
c001ec4e:	83 c4 10             	add    esp,0x10
c001ec51:	e9 96 00 00 00       	jmp    c001ecec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ec56:	66 90                	xchg   ax,ax
c001ec58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec62:	85 c0                	test   eax,eax
c001ec64:	0f 95 c0             	setne  al
c001ec67:	0f b6 c0             	movzx  eax,al
c001ec6a:	85 c0                	test   eax,eax
c001ec6c:	74 12                	je     c001ec80 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ec6e:	83 ec 0c             	sub    esp,0xc
c001ec71:	68 2b fe 01 c0       	push   0xc001fe2b
c001ec76:	e8 74 1c ff ff       	call   c00108ef <KePanic(char const*)>
c001ec7b:	83 c4 10             	add    esp,0x10
c001ec7e:	66 90                	xchg   ax,ax
c001ec80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec89:	85 c0                	test   eax,eax
c001ec8b:	0f 94 c0             	sete   al
c001ec8e:	0f b6 c0             	movzx  eax,al
c001ec91:	85 c0                	test   eax,eax
c001ec93:	74 33                	je     c001ecc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ec95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecb1:	83 f8 01             	cmp    eax,0x1
c001ecb4:	74 22                	je     c001ecd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ecb6:	83 ec 0c             	sub    esp,0xc
c001ecb9:	68 04 fe 01 c0       	push   0xc001fe04
c001ecbe:	e8 2c 1c ff ff       	call   c00108ef <KePanic(char const*)>
c001ecc3:	83 c4 10             	add    esp,0x10
c001ecc6:	eb 10                	jmp    c001ecd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ecc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eccc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ecd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd5:	89 10                	mov    DWORD PTR [eax],edx
c001ecd7:	90                   	nop
c001ecd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecdf:	8d 50 ff             	lea    edx,[eax-0x1]
c001ece2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ece9:	8d 76 00             	lea    esi,[esi+0x0]
c001ecec:	83 c4 0c             	add    esp,0xc
c001ecef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ecf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ecf0:	83 ec 0c             	sub    esp,0xc
c001ecf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ecf8:	75 12                	jne    c001ed0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ecfa:	83 ec 0c             	sub    esp,0xc
c001ecfd:	68 a8 fd 01 c0       	push   0xc001fda8
c001ed02:	e8 e8 1b ff ff       	call   c00108ef <KePanic(char const*)>
c001ed07:	83 c4 10             	add    esp,0x10
c001ed0a:	66 90                	xchg   ax,ax
c001ed0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed12:	85 c0                	test   eax,eax
c001ed14:	74 36                	je     c001ed4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed1d:	85 c0                	test   eax,eax
c001ed1f:	74 2b                	je     c001ed4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed2c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ed2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed41:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed48:	eb 6a                	jmp    c001edb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed4a:	66 90                	xchg   ax,ax
c001ed4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed52:	85 c0                	test   eax,eax
c001ed54:	75 4e                	jne    c001eda4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed5d:	85 c0                	test   eax,eax
c001ed5f:	75 43                	jne    c001eda4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed69:	89 10                	mov    DWORD PTR [eax],edx
c001ed6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed7d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed8b:	85 c0                	test   eax,eax
c001ed8d:	74 25                	je     c001edb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed8f:	83 ec 0c             	sub    esp,0xc
c001ed92:	68 ca fd 01 c0       	push   0xc001fdca
c001ed97:	e8 53 1b ff ff       	call   c00108ef <KePanic(char const*)>
c001ed9c:	83 c4 10             	add    esp,0x10
c001ed9f:	eb 13                	jmp    c001edb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001eda1:	8d 76 00             	lea    esi,[esi+0x0]
c001eda4:	83 ec 0c             	sub    esp,0xc
c001eda7:	68 d4 fd 01 c0       	push   0xc001fdd4
c001edac:	e8 3e 1b ff ff       	call   c00108ef <KePanic(char const*)>
c001edb1:	83 c4 10             	add    esp,0x10
c001edb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edbb:	8d 50 01             	lea    edx,[eax+0x1]
c001edbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edc5:	90                   	nop
c001edc6:	83 c4 0c             	add    esp,0xc
c001edc9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001edcc <ACPI::~ACPI()>:
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	ba 80 0a 02 c0       	mov    edx,0xc0020a80
c001edd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd8:	89 10                	mov    DWORD PTR [eax],edx
c001edda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edde:	83 ec 0c             	sub    esp,0xc
c001ede1:	50                   	push   eax
c001ede2:	e8 11 cf fe ff       	call   c000bcf8 <Device::~Device()>
c001ede7:	83 c4 10             	add    esp,0x10
c001edea:	90                   	nop
c001edeb:	83 c4 0c             	add    esp,0xc
c001edee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001edf0 <ACPI::~ACPI()>:
c001edf0:	83 ec 0c             	sub    esp,0xc
c001edf3:	83 ec 0c             	sub    esp,0xc
c001edf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edfa:	e8 cd ff ff ff       	call   c001edcc <ACPI::~ACPI()>
c001edff:	83 c4 10             	add    esp,0x10
c001ee02:	83 ec 08             	sub    esp,0x8
c001ee05:	68 64 12 00 00       	push   0x1264
c001ee0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee0e:	e8 82 ba fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001ee13:	83 c4 10             	add    esp,0x10
c001ee16:	83 c4 0c             	add    esp,0xc
c001ee19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ee1c <LinkedList<Device>::~LinkedList()>:
c001ee1c:	90                   	nop
c001ee1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ee20 <LinkedList<Device>::isEmpty()>:
c001ee20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee26:	85 c0                	test   eax,eax
c001ee28:	75 0e                	jne    c001ee38 <LinkedList<Device>::isEmpty()+0x18>
c001ee2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee31:	85 c0                	test   eax,eax
c001ee33:	75 03                	jne    c001ee38 <LinkedList<Device>::isEmpty()+0x18>
c001ee35:	b0 01                	mov    al,0x1
c001ee37:	c3                   	ret    
c001ee38:	b0 00                	mov    al,0x0
c001ee3a:	90                   	nop
c001ee3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ee3c <LinkedList<Device>::getFirstElement()>:
c001ee3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ee44 <LinkedList<Device>::removeFirst()>:
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee4d:	85 c0                	test   eax,eax
c001ee4f:	75 17                	jne    c001ee68 <LinkedList<Device>::removeFirst()+0x24>
c001ee51:	83 ec 0c             	sub    esp,0xc
c001ee54:	68 e0 fd 01 c0       	push   0xc001fde0
c001ee59:	e8 91 1a ff ff       	call   c00108ef <KePanic(char const*)>
c001ee5e:	83 c4 10             	add    esp,0x10
c001ee61:	e9 92 00 00 00       	jmp    c001eef8 <LinkedList<Device>::removeFirst()+0xb4>
c001ee66:	66 90                	xchg   ax,ax
c001ee68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee6f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee75:	85 c0                	test   eax,eax
c001ee77:	74 13                	je     c001ee8c <LinkedList<Device>::removeFirst()+0x48>
c001ee79:	83 ec 0c             	sub    esp,0xc
c001ee7c:	68 2b fe 01 c0       	push   0xc001fe2b
c001ee81:	e8 69 1a ff ff       	call   c00108ef <KePanic(char const*)>
c001ee86:	83 c4 10             	add    esp,0x10
c001ee89:	8d 76 00             	lea    esi,[esi+0x0]
c001ee8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee92:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee98:	85 c0                	test   eax,eax
c001ee9a:	75 34                	jne    c001eed0 <LinkedList<Device>::removeFirst()+0x8c>
c001ee9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeaa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eeb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeb8:	83 f8 01             	cmp    eax,0x1
c001eebb:	74 27                	je     c001eee4 <LinkedList<Device>::removeFirst()+0xa0>
c001eebd:	83 ec 0c             	sub    esp,0xc
c001eec0:	68 04 fe 01 c0       	push   0xc001fe04
c001eec5:	e8 25 1a ff ff       	call   c00108ef <KePanic(char const*)>
c001eeca:	83 c4 10             	add    esp,0x10
c001eecd:	eb 15                	jmp    c001eee4 <LinkedList<Device>::removeFirst()+0xa0>
c001eecf:	90                   	nop
c001eed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eed6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001eedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee0:	89 10                	mov    DWORD PTR [eax],edx
c001eee2:	66 90                	xchg   ax,ax
c001eee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeeb:	8d 50 ff             	lea    edx,[eax-0x1]
c001eeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eef5:	8d 76 00             	lea    esi,[esi+0x0]
c001eef8:	83 c4 0c             	add    esp,0xc
c001eefb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eefc <CPU::~CPU()>:
c001eefc:	83 ec 0c             	sub    esp,0xc
c001eeff:	ba 1c 0c 02 c0       	mov    edx,0xc0020c1c
c001ef04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef08:	89 10                	mov    DWORD PTR [eax],edx
c001ef0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0e:	83 ec 0c             	sub    esp,0xc
c001ef11:	50                   	push   eax
c001ef12:	e8 e1 cd fe ff       	call   c000bcf8 <Device::~Device()>
c001ef17:	83 c4 10             	add    esp,0x10
c001ef1a:	90                   	nop
c001ef1b:	83 c4 0c             	add    esp,0xc
c001ef1e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ef20 <CPU::~CPU()>:
c001ef20:	83 ec 0c             	sub    esp,0xc
c001ef23:	83 ec 0c             	sub    esp,0xc
c001ef26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef2a:	e8 cd ff ff ff       	call   c001eefc <CPU::~CPU()>
c001ef2f:	83 c4 10             	add    esp,0x10
c001ef32:	83 ec 08             	sub    esp,0x8
c001ef35:	68 94 11 00 00       	push   0x1194
c001ef3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef3e:	e8 52 b9 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001ef43:	83 c4 10             	add    esp,0x10
c001ef46:	83 c4 0c             	add    esp,0xc
c001ef49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ef4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ef4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ef53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ef54 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ef54:	90                   	nop
c001ef55:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ef58 <ThreadControlBlock::ThreadControlBlock()>:
c001ef58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef5c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef67:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef72:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ef79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef7d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ef84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef88:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ef8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef93:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ef97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef9b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ef9f:	90                   	nop
c001efa0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001efa4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001efa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efbd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efdd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efe4:	90                   	nop
c001efe5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001efe6 <PCI::~PCI()>:
c001efe6:	83 ec 0c             	sub    esp,0xc
c001efe9:	ba 80 1a 02 c0       	mov    edx,0xc0021a80
c001efee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff2:	89 10                	mov    DWORD PTR [eax],edx
c001eff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff8:	83 ec 0c             	sub    esp,0xc
c001effb:	50                   	push   eax
c001effc:	e8 8f c7 fe ff       	call   c000b790 <Bus::~Bus()>
c001f001:	83 c4 10             	add    esp,0x10
c001f004:	90                   	nop
c001f005:	83 c4 0c             	add    esp,0xc
c001f008:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f00a <PCI::~PCI()>:
c001f00a:	83 ec 0c             	sub    esp,0xc
c001f00d:	83 ec 0c             	sub    esp,0xc
c001f010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f014:	e8 cd ff ff ff       	call   c001efe6 <PCI::~PCI()>
c001f019:	83 c4 10             	add    esp,0x10
c001f01c:	83 ec 08             	sub    esp,0x8
c001f01f:	68 5c 01 00 00       	push   0x15c
c001f024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f028:	e8 68 b8 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001f02d:	83 c4 10             	add    esp,0x10
c001f030:	83 c4 0c             	add    esp,0xc
c001f033:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f034 <IDE::~IDE()>:
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c001f03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f040:	89 10                	mov    DWORD PTR [eax],edx
c001f042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f046:	83 ec 0c             	sub    esp,0xc
c001f049:	50                   	push   eax
c001f04a:	e8 21 d1 fe ff       	call   c000c170 <HardDiskController::~HardDiskController()>
c001f04f:	83 c4 10             	add    esp,0x10
c001f052:	90                   	nop
c001f053:	83 c4 0c             	add    esp,0xc
c001f056:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f058 <IDE::~IDE()>:
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	83 ec 0c             	sub    esp,0xc
c001f05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f062:	e8 cd ff ff ff       	call   c001f034 <IDE::~IDE()>
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	83 ec 08             	sub    esp,0x8
c001f06d:	68 70 02 00 00       	push   0x270
c001f072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f076:	e8 1a b8 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001f07b:	83 c4 10             	add    esp,0x10
c001f07e:	83 c4 0c             	add    esp,0xc
c001f081:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f082 <SATABus::~SATABus()>:
c001f082:	83 ec 0c             	sub    esp,0xc
c001f085:	ba 84 1b 02 c0       	mov    edx,0xc0021b84
c001f08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08e:	89 10                	mov    DWORD PTR [eax],edx
c001f090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f094:	83 ec 0c             	sub    esp,0xc
c001f097:	50                   	push   eax
c001f098:	e8 d3 d0 fe ff       	call   c000c170 <HardDiskController::~HardDiskController()>
c001f09d:	83 c4 10             	add    esp,0x10
c001f0a0:	90                   	nop
c001f0a1:	83 c4 0c             	add    esp,0xc
c001f0a4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f0a6 <SATABus::~SATABus()>:
c001f0a6:	83 ec 0c             	sub    esp,0xc
c001f0a9:	83 ec 0c             	sub    esp,0xc
c001f0ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b0:	e8 cd ff ff ff       	call   c001f082 <SATABus::~SATABus()>
c001f0b5:	83 c4 10             	add    esp,0x10
c001f0b8:	83 ec 08             	sub    esp,0x8
c001f0bb:	68 64 01 00 00       	push   0x164
c001f0c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0c4:	e8 cc b7 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001f0c9:	83 c4 10             	add    esp,0x10
c001f0cc:	83 c4 0c             	add    esp,0xc
c001f0cf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f0d0 <ATA::~ATA()>:
c001f0d0:	83 ec 0c             	sub    esp,0xc
c001f0d3:	ba c4 1b 02 c0       	mov    edx,0xc0021bc4
c001f0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0dc:	89 10                	mov    DWORD PTR [eax],edx
c001f0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e2:	83 ec 0c             	sub    esp,0xc
c001f0e5:	50                   	push   eax
c001f0e6:	e8 67 d1 fe ff       	call   c000c252 <PhysicalDisk::~PhysicalDisk()>
c001f0eb:	83 c4 10             	add    esp,0x10
c001f0ee:	90                   	nop
c001f0ef:	83 c4 0c             	add    esp,0xc
c001f0f2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f0f4 <ATA::~ATA()>:
c001f0f4:	83 ec 0c             	sub    esp,0xc
c001f0f7:	83 ec 0c             	sub    esp,0xc
c001f0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0fe:	e8 cd ff ff ff       	call   c001f0d0 <ATA::~ATA()>
c001f103:	83 c4 10             	add    esp,0x10
c001f106:	83 ec 08             	sub    esp,0x8
c001f109:	68 7c 01 00 00       	push   0x17c
c001f10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f112:	e8 7e b7 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001f117:	83 c4 10             	add    esp,0x10
c001f11a:	83 c4 0c             	add    esp,0xc
c001f11d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f11e <ATAPI::~ATAPI()>:
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	ba 0c 1c 02 c0       	mov    edx,0xc0021c0c
c001f126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12a:	89 10                	mov    DWORD PTR [eax],edx
c001f12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f130:	83 ec 0c             	sub    esp,0xc
c001f133:	50                   	push   eax
c001f134:	e8 19 d1 fe ff       	call   c000c252 <PhysicalDisk::~PhysicalDisk()>
c001f139:	83 c4 10             	add    esp,0x10
c001f13c:	90                   	nop
c001f13d:	83 c4 0c             	add    esp,0xc
c001f140:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f142 <ATAPI::~ATAPI()>:
c001f142:	83 ec 0c             	sub    esp,0xc
c001f145:	83 ec 0c             	sub    esp,0xc
c001f148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14c:	e8 cd ff ff ff       	call   c001f11e <ATAPI::~ATAPI()>
c001f151:	83 c4 10             	add    esp,0x10
c001f154:	83 ec 08             	sub    esp,0x8
c001f157:	68 84 01 00 00       	push   0x184
c001f15c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f160:	e8 30 b7 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001f165:	83 c4 10             	add    esp,0x10
c001f168:	83 c4 0c             	add    esp,0xc
c001f16b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f16c <SATA::~SATA()>:
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	ba c0 1c 02 c0       	mov    edx,0xc0021cc0
c001f174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f178:	89 10                	mov    DWORD PTR [eax],edx
c001f17a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f17e:	83 ec 0c             	sub    esp,0xc
c001f181:	50                   	push   eax
c001f182:	e8 cb d0 fe ff       	call   c000c252 <PhysicalDisk::~PhysicalDisk()>
c001f187:	83 c4 10             	add    esp,0x10
c001f18a:	90                   	nop
c001f18b:	83 c4 0c             	add    esp,0xc
c001f18e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f190 <SATA::~SATA()>:
c001f190:	83 ec 0c             	sub    esp,0xc
c001f193:	83 ec 0c             	sub    esp,0xc
c001f196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f19a:	e8 cd ff ff ff       	call   c001f16c <SATA::~SATA()>
c001f19f:	83 c4 10             	add    esp,0x10
c001f1a2:	83 ec 08             	sub    esp,0x8
c001f1a5:	68 7c 01 00 00       	push   0x17c
c001f1aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ae:	e8 e2 b6 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	83 c4 0c             	add    esp,0xc
c001f1b9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f1ba <SATAPI::~SATAPI()>:
c001f1ba:	83 ec 0c             	sub    esp,0xc
c001f1bd:	ba e4 1d 02 c0       	mov    edx,0xc0021de4
c001f1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c6:	89 10                	mov    DWORD PTR [eax],edx
c001f1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1cc:	83 ec 0c             	sub    esp,0xc
c001f1cf:	50                   	push   eax
c001f1d0:	e8 7d d0 fe ff       	call   c000c252 <PhysicalDisk::~PhysicalDisk()>
c001f1d5:	83 c4 10             	add    esp,0x10
c001f1d8:	90                   	nop
c001f1d9:	83 c4 0c             	add    esp,0xc
c001f1dc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f1de <SATAPI::~SATAPI()>:
c001f1de:	83 ec 0c             	sub    esp,0xc
c001f1e1:	83 ec 0c             	sub    esp,0xc
c001f1e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1e8:	e8 cd ff ff ff       	call   c001f1ba <SATAPI::~SATAPI()>
c001f1ed:	83 c4 10             	add    esp,0x10
c001f1f0:	83 ec 08             	sub    esp,0x8
c001f1f3:	68 84 01 00 00       	push   0x184
c001f1f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1fc:	e8 94 b6 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001f201:	83 c4 10             	add    esp,0x10
c001f204:	83 c4 0c             	add    esp,0xc
c001f207:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f208 <IOAPIC::~IOAPIC()>:
c001f208:	83 ec 0c             	sub    esp,0xc
c001f20b:	ba 24 1e 02 c0       	mov    edx,0xc0021e24
c001f210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f214:	89 10                	mov    DWORD PTR [eax],edx
c001f216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f21a:	83 ec 0c             	sub    esp,0xc
c001f21d:	50                   	push   eax
c001f21e:	e8 d5 ca fe ff       	call   c000bcf8 <Device::~Device()>
c001f223:	83 c4 10             	add    esp,0x10
c001f226:	90                   	nop
c001f227:	83 c4 0c             	add    esp,0xc
c001f22a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f22c <IOAPIC::~IOAPIC()>:
c001f22c:	83 ec 0c             	sub    esp,0xc
c001f22f:	83 ec 0c             	sub    esp,0xc
c001f232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f236:	e8 cd ff ff ff       	call   c001f208 <IOAPIC::~IOAPIC()>
c001f23b:	83 c4 10             	add    esp,0x10
c001f23e:	83 ec 08             	sub    esp,0x8
c001f241:	68 68 01 00 00       	push   0x168
c001f246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f24a:	e8 46 b6 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001f24f:	83 c4 10             	add    esp,0x10
c001f252:	83 c4 0c             	add    esp,0xc
c001f255:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f258 <APICTimer::~APICTimer()>:
c001f258:	83 ec 0c             	sub    esp,0xc
c001f25b:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c001f260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f264:	89 10                	mov    DWORD PTR [eax],edx
c001f266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f26a:	83 ec 0c             	sub    esp,0xc
c001f26d:	50                   	push   eax
c001f26e:	e8 51 e5 fe ff       	call   c000d7c4 <Timer::~Timer()>
c001f273:	83 c4 10             	add    esp,0x10
c001f276:	90                   	nop
c001f277:	83 c4 0c             	add    esp,0xc
c001f27a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f27c <APICTimer::~APICTimer()>:
c001f27c:	83 ec 0c             	sub    esp,0xc
c001f27f:	83 ec 0c             	sub    esp,0xc
c001f282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f286:	e8 cd ff ff ff       	call   c001f258 <APICTimer::~APICTimer()>
c001f28b:	83 c4 10             	add    esp,0x10
c001f28e:	83 ec 08             	sub    esp,0x8
c001f291:	68 60 01 00 00       	push   0x160
c001f296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f29a:	e8 f6 b5 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001f29f:	83 c4 10             	add    esp,0x10
c001f2a2:	83 c4 0c             	add    esp,0xc
c001f2a5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f2a8 <PIT::~PIT()>:
c001f2a8:	83 ec 0c             	sub    esp,0xc
c001f2ab:	ba bc 1e 02 c0       	mov    edx,0xc0021ebc
c001f2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b4:	89 10                	mov    DWORD PTR [eax],edx
c001f2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ba:	83 ec 0c             	sub    esp,0xc
c001f2bd:	50                   	push   eax
c001f2be:	e8 01 e5 fe ff       	call   c000d7c4 <Timer::~Timer()>
c001f2c3:	83 c4 10             	add    esp,0x10
c001f2c6:	90                   	nop
c001f2c7:	83 c4 0c             	add    esp,0xc
c001f2ca:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f2cc <PIT::~PIT()>:
c001f2cc:	83 ec 0c             	sub    esp,0xc
c001f2cf:	83 ec 0c             	sub    esp,0xc
c001f2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2d6:	e8 cd ff ff ff       	call   c001f2a8 <PIT::~PIT()>
c001f2db:	83 c4 10             	add    esp,0x10
c001f2de:	83 ec 08             	sub    esp,0x8
c001f2e1:	68 5c 01 00 00       	push   0x15c
c001f2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ea:	e8 a6 b5 fe ff       	call   c000a895 <operator delete(void*, unsigned long)>
c001f2ef:	83 c4 10             	add    esp,0x10
c001f2f2:	83 c4 0c             	add    esp,0xc
c001f2f5:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 0d 0d 02 c0       	mov    esi,0xc0020d0d
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 29 0d 02 c0       	mov    esi,0xc0020d29
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
