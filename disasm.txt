
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e8 7a 00 00       	call   c0007b08 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 28 24 02 c0       	mov    eax,0xc0022428
c0000025:	3d 28 24 02 c0       	cmp    eax,0xc0022428
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 28 24 02 c0       	push   0xc0022428
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 28 24 02 c0       	mov    eax,0xc0022428
c0000051:	2d 28 24 02 c0       	sub    eax,0xc0022428
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 28 24 02 c0       	push   0xc0022428
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 3c f3 01 c0       	mov    ebx,0xc001f33c
c0000097:	81 eb 38 f3 01 c0    	sub    ebx,0xc001f338
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 38 f3 01 c0       	mov    esi,0xc001f338
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 28 24 02 c0       	push   0xc0022428
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 28 24 02 c0       	push   0xc0022428
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 5b 46 01 00       	call   c0014908 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 b4 a4 00 00       	call   c000a779 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 39 46 01 00       	call   c0014908 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 46 4b 01 00       	call   c0014e34 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 05 52 01 00       	call   c00154fc <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 8b 05 01 00       	jmp    c001090a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 f3 01 c0 02 	test   BYTE PTR [edx-0x3ffe0cc0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0cc0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0cc0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 f3 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0cc0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0cc0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000df7:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 a8 6a 00 00       	call   c0007980 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 ed 69 00 00       	call   c0007980 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 d7 69 00 00       	call   c0007980 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 b3 69 00 00       	call   c0007980 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001176:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011b2:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011b7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011c5:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c0001216:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c0001231:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00012eb:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00012f1:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00012f8:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013be:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013c4:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013cb:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 44 f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0bbc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 26 6c 01 00       	jmp    c00189c8 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 50 6c 01 00       	jmp    c0018a08 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 71 6c 01 00       	jmp    c0018a48 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 a0 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0a60]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 a0 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0a60]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 20 17 02 c0       	mov    edx,0xc0021720
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 5c f4 01 c0       	mov    edx,0xc001f45c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 62 f4 01 c0       	mov    eax,0xc001f462
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 20 f5 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0ae0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 6b f4 01 c0       	mov    eax,0xc001f46b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 a0 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0a60]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 f0 f4 01 c0       	mov    eax,0xc001f4f0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb e0 f4 01 c0       	mov    ebx,0xc001f4e0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 c0 f4 01 c0       	mov    eax,0xc001f4c0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 d0 f4 01 c0       	mov    eax,0xc001f4d0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 72 f4 01 c0       	mov    edx,0xc001f472
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 7e f4 01 c0       	mov    edx,0xc001f47e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 92 f4 01 c0       	mov    edx,0xc001f492
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 7f 1e 00 00       	call   c0007aae <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 77 1e 00 00       	call   c0007abe <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c c0 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f8c0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 c0 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f8c0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 c0 f6 01 c0       	mov    eax,0xc001f6c0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 00 f6 01 c0       	mov    eax,0xc001f600
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 c0 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a40]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 c0 f9 01 c0       	push   0xc001f9c0
c000611b:	e8 44 32 01 00       	call   c0019364 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ce f9 01 c0       	push   0xc001f9ce
c0006153:	e8 0c 32 01 00       	call   c0019364 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 75 31 01 00       	call   c0019308 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 dd f9 01 c0       	push   0xc001f9dd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000655e:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006564:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006580:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065f9:	8b 8d 4c 45 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdbab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066f1:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000672f:	05 40 45 02 c0       	add    eax,0xc0024540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067ee:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 e0 f9 01 c0       	push   0xc001f9e0
c0006812:	e8 4d 2b 01 00       	call   c0019364 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 61 2b 01 00       	call   c0019380 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 e5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9e5
c000682c:	e8 33 2b 01 00       	call   c0019364 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006838:	e8 43 2b 01 00       	call   c0019380 <iso_kprintfd>
c000683d:	c7 04 24 eb f9 01 c0 	mov    DWORD PTR [esp],0xc001f9eb
c0006844:	e8 1b 2b 01 00       	call   c0019364 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006850:	e8 2b 2b 01 00       	call   c0019380 <iso_kprintfd>
c0006855:	c7 04 24 f1 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9f1
c000685c:	e8 03 2b 01 00       	call   c0019364 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006868:	e8 13 2b 01 00       	call   c0019380 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068ce:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 45 02 c0    	lea    ebp,[eax-0x3ffdbaa8]
c000692a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 45 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdbaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 dd f9 01 c0       	push   0xc001f9dd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a06:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a0c:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 45 02 c0       	add    eax,0xc0024550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 fa f9 01 c0       	push   0xc001f9fa
c0006a31:	e8 2e 29 01 00       	call   c0019364 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a66:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 05 fa 01 c0       	push   0xc001fa05
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 0c fa 01 c0       	push   0xc001fa0c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b27:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 13 fa 01 c0       	push   0xc001fa13
c0006b48:	e8 17 28 01 00       	call   c0019364 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 1e fa 01 c0       	push   0xc001fa1e
c0006b63:	e8 fc 27 01 00       	call   c0019364 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 45 02 c0       	push   0xc0024540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b8d:	e8 1c 0f 00 00       	call   c0007aae <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b9e:	e8 0b 0f 00 00       	call   c0007aae <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 f6 0e 00 00       	call   c0007aae <malloc>
c0006bb8:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 dd 0e 00 00       	call   c0007aae <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bfe:	e8 bb 0e 00 00       	call   c0007abe <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 ad 0e 00 00       	call   c0007abe <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 93 0e 00 00       	call   c0007abe <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 7e 0e 00 00       	call   c0007abe <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c4d:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c73:	83 ec 0c             	sub    esp,0xc
c0006c76:	50                   	push   eax
c0006c77:	e8 c8 52 00 00       	call   c000bf44 <Device::closeAll()>
c0006c7c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c82:	83 c4 10             	add    esp,0x10
c0006c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c87:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c8b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c9b:	5b                   	pop    ebx
c0006c9c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c9f:	5e                   	pop    esi
c0006ca0:	5f                   	pop    edi
c0006ca1:	ff e0                	jmp    eax

c0006ca3 <Krnl::firstTask()>:
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 14             	sub    esp,0x14
c0006ca7:	fb                   	sti    
c0006ca8:	68 2f fa 01 c0       	push   0xc001fa2f
c0006cad:	e8 f0 95 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c0006cb2:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cb9:	e8 f0 0d 00 00       	call   c0007aae <malloc>
c0006cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc5:	89 c3                	mov    ebx,eax
c0006cc7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006ccc:	50                   	push   eax
c0006ccd:	68 48 fa 01 c0       	push   0xc001fa48
c0006cd2:	6a 01                	push   0x1
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 86 df 00 00       	call   c0014c60 <Process::Process(bool, char const*, Process*, char**)>
c0006cda:	83 c4 20             	add    esp,0x20
c0006cdd:	68 ff 00 00 00       	push   0xff
c0006ce2:	6a 00                	push   0x0
c0006ce4:	68 f5 74 00 c0       	push   0xc00074f5
c0006ce9:	53                   	push   ebx
c0006cea:	e8 95 e1 00 00       	call   c0014e84 <Process::createThread(void (*)(void*), void*, int)>
c0006cef:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006cf5:	6a 7a                	push   0x7a
c0006cf7:	6a 00                	push   0x0
c0006cf9:	68 6c 59 01 c0       	push   0xc001596c
c0006cfe:	52                   	push   edx
c0006cff:	e8 80 e1 00 00       	call   c0014e84 <Process::createThread(void (*)(void*), void*, int)>
c0006d04:	83 c4 20             	add    esp,0x20
c0006d07:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0c:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d13:	e8 c0 9d 00 00       	call   c0010ad8 <KeInitRand()>
c0006d18:	83 ec 0c             	sub    esp,0xc
c0006d1b:	68 44 fb 01 c0       	push   0xc001fb44
c0006d20:	e8 7d 95 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c0006d25:	e8 65 f0 00 00       	call   c0015d8f <Vm::initialise8086()>
c0006d2a:	e8 65 40 00 00       	call   c000ad94 <Fs::initVFS()>
c0006d2f:	c7 04 24 55 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa55
c0006d36:	e8 67 95 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c0006d3b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d48:	6a 00                	push   0x0
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	50                   	push   eax
c0006d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d52:	83 c4 14             	add    esp,0x14
c0006d55:	68 44 fb 01 c0       	push   0xc001fb44
c0006d5a:	e8 43 95 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c0006d5f:	e8 1e 9a 00 00       	call   c0010782 <Krnl::loadSystemEnv()>
c0006d64:	e8 7b 9c 00 00       	call   c00109e4 <Krnl::setupPowerManager()>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	6a 3a                	push   0x3a
c0006d6e:	68 6f fa 01 c0       	push   0xc001fa6f
c0006d73:	68 78 fa 01 c0       	push   0xc001fa78
c0006d78:	e8 2b c2 00 00       	call   c0012fa8 <Reg::readIntWithDefault(char*, char*, int)>
c0006d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d80:	e8 1f 4b 00 00       	call   c000b8a4 <User::loadClockSettings(int)>
c0006d85:	c7 04 24 68 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb68
c0006d8c:	e8 11 95 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c0006d91:	59                   	pop    ecx
c0006d92:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d97:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d9d:	53                   	push   ebx
c0006d9e:	e8 9f 51 00 00       	call   c000bf42 <Device::loadDriversForAll()>
c0006da3:	c7 04 24 80 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa80
c0006daa:	e8 f3 94 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c0006daf:	58                   	pop    eax
c0006db0:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006db6:	5a                   	pop    edx
c0006db7:	6a 01                	push   0x1
c0006db9:	68 91 fa 01 c0       	push   0xc001fa91
c0006dbe:	e8 b3 d8 00 00       	call   c0014676 <Thr::loadDLL(char const*, bool)>
c0006dc3:	59                   	pop    ecx
c0006dc4:	5a                   	pop    edx
c0006dc5:	53                   	push   ebx
c0006dc6:	50                   	push   eax
c0006dc7:	e8 db da 00 00       	call   c00148a7 <Thr::executeDLL(unsigned long, void*)>
c0006dcc:	83 c4 10             	add    esp,0x10
c0006dcf:	83 ec 0c             	sub    esp,0xc
c0006dd2:	6a 02                	push   0x2
c0006dd4:	e8 0f e5 00 00       	call   c00152e8 <blockTask(TaskState)>
c0006dd9:	83 c4 10             	add    esp,0x10
c0006ddc:	eb f1                	jmp    c0006dcf <Krnl::firstTask()+0x12c>

c0006dde <Computer::Computer()>:
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de5:	83 ec 08             	sub    esp,0x8
c0006de8:	68 ad fa 01 c0       	push   0xc001faad
c0006ded:	50                   	push   eax
c0006dee:	e8 cb 51 00 00       	call   c000bfbe <Device::Device(char const*)>
c0006df3:	83 c4 10             	add    esp,0x10
c0006df6:	ba b4 fb 01 c0       	mov    edx,0xc001fbb4
c0006dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dff:	89 10                	mov    DWORD PTR [eax],edx
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e27:	83 ca 04             	or     edx,0x4
c0006e2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e3a:	0f b6 d0             	movzx  edx,al
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e52:	0f b6 d0             	movzx  edx,al
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	8d 50 01             	lea    edx,[eax+0x1]
c0006e6b:	88 d1                	mov    cl,dl
c0006e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e77:	0f b6 d0             	movzx  edx,al
c0006e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e82:	83 e1 3f             	and    ecx,0x3f
c0006e85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e89:	90                   	nop
c0006e8a:	83 c4 0c             	add    esp,0xc
c0006e8d:	c3                   	ret    

c0006e8e <Computer::setBootMessage(char const*)>:
c0006e8e:	c3                   	ret    
c0006e8f:	90                   	nop

c0006e90 <Computer::detectFeatures()>:
c0006e90:	55                   	push   ebp
c0006e91:	57                   	push   edi
c0006e92:	56                   	push   esi
c0006e93:	53                   	push   ebx
c0006e94:	83 ec 1c             	sub    esp,0x1c
c0006e97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ea7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ead:	e8 47 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eb2:	31 d2                	xor    edx,edx
c0006eb4:	85 c0                	test   eax,eax
c0006eb6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ebc:	0f 95 c2             	setne  dl
c0006ebf:	83 e0 fd             	and    eax,0xfffffffd
c0006ec2:	d1 e2                	shl    edx,1
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	a8 02                	test   al,0x2
c0006ece:	75 51                	jne    c0006f21 <Computer::detectFeatures()+0x91>
c0006ed0:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ed7:	74 0f                	je     c0006ee8 <Computer::detectFeatures()+0x58>
c0006ed9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006edf:	83 e0 fb             	and    eax,0xfffffffb
c0006ee2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee8:	e8 49 74 01 00       	call   c001e336 <x87Detect>
c0006eed:	83 e0 01             	and    eax,0x1
c0006ef0:	c1 e0 04             	shl    eax,0x4
c0006ef3:	89 c2                	mov    edx,eax
c0006ef5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efb:	83 e0 ef             	and    eax,0xffffffef
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	88 c2                	mov    dl,al
c0006f08:	a8 10                	test   al,0x10
c0006f0a:	0f 85 33 01 00 00    	jne    c0007043 <Computer::detectFeatures()+0x1b3>
c0006f10:	80 e2 80             	and    dl,0x80
c0006f13:	0f 85 4c 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1d5>
c0006f19:	83 c4 1c             	add    esp,0x1c
c0006f1c:	5b                   	pop    ebx
c0006f1d:	5e                   	pop    esi
c0006f1e:	5f                   	pop    edi
c0006f1f:	5d                   	pop    ebp
c0006f20:	c3                   	ret    
c0006f21:	83 ec 0c             	sub    esp,0xc
c0006f24:	6a 20                	push   0x20
c0006f26:	e8 8d 88 00 00       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f2b:	83 e0 01             	and    eax,0x1
c0006f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 f7             	and    eax,0xfffffff7
c0006f3e:	09 d0                	or     eax,edx
c0006f40:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f46:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f4d:	e8 66 88 00 00       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f52:	89 c2                	mov    edx,eax
c0006f54:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f5a:	83 e2 01             	and    edx,0x1
c0006f5d:	83 e0 fe             	and    eax,0xfffffffe
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f68:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f6f:	e8 44 88 00 00       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	c1 e2 07             	shl    edx,0x7
c0006f7f:	83 e0 7f             	and    eax,0x7f
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f91:	e8 22 88 00 00       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	83 c4 10             	add    esp,0x10
c0006f99:	83 e0 01             	and    eax,0x1
c0006f9c:	c1 e0 05             	shl    eax,0x5
c0006f9f:	89 c2                	mov    edx,eax
c0006fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa7:	83 e0 df             	and    eax,0xffffffdf
c0006faa:	09 d0                	or     eax,edx
c0006fac:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fb6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbc:	0f 84 c9 00 00 00    	je     c000708b <Computer::detectFeatures()+0x1fb>
c0006fc2:	83 e0 fe             	and    eax,0xfffffffe
c0006fc5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	89 c2                	mov    edx,eax
c0006fd3:	83 e2 09             	and    edx,0x9
c0006fd6:	83 fa 01             	cmp    edx,0x1
c0006fd9:	75 09                	jne    c0006fe4 <Computer::detectFeatures()+0x154>
c0006fdb:	83 e0 fe             	and    eax,0xfffffffe
c0006fde:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe4:	83 ec 0c             	sub    esp,0xc
c0006fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006feb:	50                   	push   eax
c0006fec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff0:	55                   	push   ebp
c0006ff1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ff5:	57                   	push   edi
c0006ff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ffa:	56                   	push   esi
c0006ffb:	68 00 00 00 80       	push   0x80000000
c0007000:	e8 2f 87 00 00       	call   c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007005:	83 c4 20             	add    esp,0x20
c0007008:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000700f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007013:	0f 86 b7 fe ff ff    	jbe    c0006ed0 <Computer::detectFeatures()+0x40>
c0007019:	83 ec 0c             	sub    esp,0xc
c000701c:	50                   	push   eax
c000701d:	55                   	push   ebp
c000701e:	57                   	push   edi
c000701f:	56                   	push   esi
c0007020:	68 01 00 00 80       	push   0x80000001
c0007025:	e8 0a 87 00 00       	call   c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007030:	83 c4 20             	add    esp,0x20
c0007033:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007038:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000703e:	e9 8d fe ff ff       	jmp    c0006ed0 <Computer::detectFeatures()+0x40>
c0007043:	e8 a8 72 01 00       	call   c001e2f0 <absolutelyNoChanceInHell>
c0007048:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000704e:	c1 e0 07             	shl    eax,0x7
c0007051:	83 e2 7f             	and    edx,0x7f
c0007054:	09 c2                	or     edx,eax
c0007056:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000705c:	80 e2 80             	and    dl,0x80
c000705f:	0f 84 b4 fe ff ff    	je     c0006f19 <Computer::detectFeatures()+0x89>
c0007065:	e8 f6 6e 01 00       	call   c001df60 <avxDetect>
c000706a:	83 e0 01             	and    eax,0x1
c000706d:	c1 e0 05             	shl    eax,0x5
c0007070:	89 c2                	mov    edx,eax
c0007072:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007078:	83 e0 df             	and    eax,0xffffffdf
c000707b:	09 d0                	or     eax,edx
c000707d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007083:	83 c4 1c             	add    esp,0x1c
c0007086:	5b                   	pop    ebx
c0007087:	5e                   	pop    esi
c0007088:	5f                   	pop    edi
c0007089:	5d                   	pop    ebp
c000708a:	c3                   	ret    
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	68 00 02 00 00       	push   0x200
c0007093:	e8 20 87 00 00       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	89 c2                	mov    edx,eax
c000709d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070a3:	83 e2 01             	and    edx,0x1
c00070a6:	83 e0 fe             	and    eax,0xfffffffe
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b1:	e9 15 ff ff ff       	jmp    c0006fcb <Computer::detectFeatures()+0x13b>

c00070b6 <Computer::displayFeatures()>:
c00070b6:	c3                   	ret    
c00070b7:	90                   	nop

c00070b8 <Computer::rdmsr(unsigned int)>:
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070c6:	74 0a                	je     c00070d2 <Computer::rdmsr(unsigned int)+0x1a>
c00070c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070cc:	0f 32                	rdmsr  
c00070ce:	83 c4 0c             	add    esp,0xc
c00070d1:	c3                   	ret    
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	68 b6 fa 01 c0       	push   0xc001fab6
c00070da:	e8 40 98 00 00       	call   c001091f <KePanic(char const*)>
c00070df:	83 c4 10             	add    esp,0x10
c00070e2:	eb e4                	jmp    c00070c8 <Computer::rdmsr(unsigned int)+0x10>

c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e4:	57                   	push   edi
c00070e5:	56                   	push   esi
c00070e6:	83 ec 04             	sub    esp,0x4
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fc:	74 10                	je     c000710e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007102:	89 f0                	mov    eax,esi
c0007104:	89 fa                	mov    edx,edi
c0007106:	0f 30                	wrmsr  
c0007108:	83 c4 04             	add    esp,0x4
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	c3                   	ret    
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 bc fa 01 c0       	push   0xc001fabc
c0007116:	e8 04 98 00 00       	call   c001091f <KePanic(char const*)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	eb de                	jmp    c00070fe <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007120 <Computer::shutdown()>:
c0007120:	83 ec 0c             	sub    esp,0xc
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 10                	mov    edx,DWORD PTR [eax]
c0007129:	6a 00                	push   0x0
c000712b:	6a 00                	push   0x0
c000712d:	6a 00                	push   0x0
c000712f:	50                   	push   eax
c0007130:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007133:	83 c4 1c             	add    esp,0x1c
c0007136:	c3                   	ret    
c0007137:	90                   	nop

c0007138 <Computer::restart()>:
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007141:	6a 00                	push   0x0
c0007143:	6a 00                	push   0x0
c0007145:	6a 01                	push   0x1
c0007147:	50                   	push   eax
c0007148:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714b:	83 c4 1c             	add    esp,0x1c
c000714e:	c3                   	ret    
c000714f:	90                   	nop

c0007150 <Computer::sleep()>:
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000715a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000715e:	e9 6d 80 00 00       	jmp    c000f1d0 <ACPI::sleep()>
c0007163:	90                   	nop

c0007164 <Computer::nmiEnabled()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::readCMOS(unsigned char)>:
c0007170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007178:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000717f:	75 09                	jne    c000718a <Computer::readCMOS(unsigned char)+0x1a>
c0007181:	b2 80                	mov    dl,0x80
c0007183:	09 d0                	or     eax,edx
c0007185:	e6 70                	out    0x70,al
c0007187:	e4 71                	in     al,0x71
c0007189:	c3                   	ret    
c000718a:	31 d2                	xor    edx,edx
c000718c:	eb f5                	jmp    c0007183 <Computer::readCMOS(unsigned char)+0x13>

c000718e <Computer::enableNMI(bool)>:
c000718e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000719c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071a4:	eb ca                	jmp    c0007170 <Computer::readCMOS(unsigned char)>

c00071a6 <Computer::open(int, int, void*)>:
c00071a6:	56                   	push   esi
c00071a7:	53                   	push   ebx
c00071a8:	83 ec 10             	sub    esp,0x10
c00071ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071af:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071b6:	68 c2 fa 01 c0       	push   0xc001fac2
c00071bb:	0f 94 05 60 1f 02 c0 	sete   BYTE PTR ds:0xc0021f60
c00071c2:	e8 db 90 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c00071c7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ce:	e8 db 08 00 00       	call   c0007aae <malloc>
c00071d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071d6:	89 c6                	mov    esi,eax
c00071d8:	e8 67 7b 00 00       	call   c000ed44 <ACPI::ACPI()>
c00071dd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071e3:	58                   	pop    eax
c00071e4:	5a                   	pop    edx
c00071e5:	56                   	push   esi
c00071e6:	53                   	push   ebx
c00071e7:	e8 3a 4c 00 00       	call   c000be26 <Device::addChild(Device*)>
c00071ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071ef:	e8 9c fc ff ff       	call   c0006e90 <Computer::detectFeatures()>
c00071f4:	59                   	pop    ecx
c00071f5:	5e                   	pop    esi
c00071f6:	6a 01                	push   0x1
c00071f8:	53                   	push   ebx
c00071f9:	e8 90 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c00071fe:	c7 04 24 da fa 01 c0 	mov    DWORD PTR [esp],0xc001fada
c0007205:	e8 98 90 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c000720a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007211:	e8 98 08 00 00       	call   c0007aae <malloc>
c0007216:	89 04 24             	mov    DWORD PTR [esp],eax
c0007219:	89 c6                	mov    esi,eax
c000721b:	e8 50 86 00 00       	call   c000f870 <CPU::CPU()>
c0007220:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007226:	58                   	pop    eax
c0007227:	5a                   	pop    edx
c0007228:	56                   	push   esi
c0007229:	53                   	push   ebx
c000722a:	e8 f7 4b 00 00       	call   c000be26 <Device::addChild(Device*)>
c000722f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007235:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007239:	8b 10                	mov    edx,DWORD PTR [eax]
c000723b:	51                   	push   ecx
c000723c:	6a 00                	push   0x0
c000723e:	6a 00                	push   0x0
c0007240:	50                   	push   eax
c0007241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007244:	83 c4 14             	add    esp,0x14
c0007247:	68 88 fb 01 c0       	push   0xc001fb88
c000724c:	e8 51 90 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c0007251:	e8 0e fd 00 00       	call   c0016f64 <HalInitialiseCoprocessor()>
c0007256:	c7 04 24 f4 fa 01 c0 	mov    DWORD PTR [esp],0xc001faf4
c000725d:	e8 40 90 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c0007262:	c7 04 24 a3 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca3
c0007269:	e8 42 dd 00 00       	call   c0014fb0 <setupMultitasking(void (*)())>
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007276:	5b                   	pop    ebx
c0007277:	5e                   	pop    esi
c0007278:	c3                   	ret    
c0007279:	90                   	nop

c000727a <Computer::disableNMI()>:
c000727a:	6a 00                	push   0x0
c000727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007280:	50                   	push   eax
c0007281:	e8 08 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c0007286:	5a                   	pop    edx
c0007287:	59                   	pop    ecx
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000728a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000728e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007296:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000729d:	75 0b                	jne    c00072aa <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c000729f:	b1 80                	mov    cl,0x80
c00072a1:	09 c8                	or     eax,ecx
c00072a3:	e6 70                	out    0x70,al
c00072a5:	88 d0                	mov    al,dl
c00072a7:	e6 71                	out    0x71,al
c00072a9:	c3                   	ret    
c00072aa:	31 c9                	xor    ecx,ecx
c00072ac:	eb f3                	jmp    c00072a1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072ae <Computer::handleNMI()>:
c00072ae:	56                   	push   esi
c00072af:	53                   	push   ebx
c00072b0:	83 ec 10             	sub    esp,0x10
c00072b3:	e4 92                	in     al,0x92
c00072b5:	89 c6                	mov    esi,eax
c00072b7:	e4 61                	in     al,0x61
c00072b9:	68 0f fb 01 c0       	push   0xc001fb0f
c00072be:	88 c3                	mov    bl,al
c00072c0:	e8 2c 37 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	83 e6 10             	and    esi,0x10
c00072cb:	75 10                	jne    c00072dd <Computer::handleNMI()+0x2f>
c00072cd:	f6 c3 40             	test   bl,0x40
c00072d0:	75 20                	jne    c00072f2 <Computer::handleNMI()+0x44>
c00072d2:	80 e3 80             	and    bl,0x80
c00072d5:	75 30                	jne    c0007307 <Computer::handleNMI()+0x59>
c00072d7:	83 c4 04             	add    esp,0x4
c00072da:	5b                   	pop    ebx
c00072db:	5e                   	pop    esi
c00072dc:	c3                   	ret    
c00072dd:	83 ec 0c             	sub    esp,0xc
c00072e0:	68 20 fb 01 c0       	push   0xc001fb20
c00072e5:	e8 35 96 00 00       	call   c001091f <KePanic(char const*)>
c00072ea:	83 c4 10             	add    esp,0x10
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	74 e0                	je     c00072d2 <Computer::handleNMI()+0x24>
c00072f2:	83 ec 0c             	sub    esp,0xc
c00072f5:	68 2d fb 01 c0       	push   0xc001fb2d
c00072fa:	e8 20 96 00 00       	call   c001091f <KePanic(char const*)>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	80 e3 80             	and    bl,0x80
c0007305:	74 d0                	je     c00072d7 <Computer::handleNMI()+0x29>
c0007307:	c7 44 24 10 37 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb37
c000730f:	83 c4 04             	add    esp,0x4
c0007312:	5b                   	pop    ebx
c0007313:	5e                   	pop    esi
c0007314:	e9 06 96 00 00       	jmp    c001091f <KePanic(char const*)>
c0007319:	90                   	nop

c000731a <GDTEntry::setBase(unsigned int)>:
c000731a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000731e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007322:	89 c1                	mov    ecx,eax
c0007324:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007328:	c1 e9 10             	shr    ecx,0x10
c000732b:	c1 e8 18             	shr    eax,0x18
c000732e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007331:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007334:	c3                   	ret    
c0007335:	90                   	nop

c0007336 <GDTEntry::setLimit(unsigned int)>:
c0007336:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007341:	66 89 01             	mov    WORD PTR [ecx],ax
c0007344:	83 e2 f0             	and    edx,0xfffffff0
c0007347:	c1 e8 10             	shr    eax,0x10
c000734a:	83 e0 0f             	and    eax,0xf
c000734d:	09 d0                	or     eax,edx
c000734f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007352:	c3                   	ret    
c0007353:	90                   	nop

c0007354 <GDT::GDT()>:
c0007354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000735e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007368:	90                   	nop
c0007369:	c3                   	ret    

c000736a <GDT::addEntry(GDTEntry)>:
c000736a:	53                   	push   ebx
c000736b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000736f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007373:	8b 02                	mov    eax,DWORD PTR [edx]
c0007375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007379:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000737d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007381:	8d 48 01             	lea    ecx,[eax+0x1]
c0007384:	c1 e0 03             	shl    eax,0x3
c0007387:	89 0a                	mov    DWORD PTR [edx],ecx
c0007389:	5b                   	pop    ebx
c000738a:	c3                   	ret    
c000738b:	90                   	nop

c000738c <GDT::getNumberOfEntries()>:
c000738c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007390:	8b 00                	mov    eax,DWORD PTR [eax]
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::flush()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 10                	mov    edx,DWORD PTR [eax]
c000739a:	83 c0 04             	add    eax,0x4
c000739d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073a4:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073a9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073b0:	e9 a5 8f ff ff       	jmp    c000035a <loadGDT>
c00073b5:	90                   	nop

c00073b6 <GDT::setup()>:
c00073b6:	57                   	push   edi
c00073b7:	56                   	push   esi
c00073b8:	53                   	push   ebx
c00073b9:	83 ec 30             	sub    esp,0x30
c00073bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c0:	6a 00                	push   0x0
c00073c2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073c6:	56                   	push   esi
c00073c7:	e8 4e ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073cc:	6a 00                	push   0x0
c00073ce:	56                   	push   esi
c00073cf:	e8 62 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073d4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073dc:	6a 00                	push   0x0
c00073de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073e2:	56                   	push   esi
c00073e3:	e8 32 ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073e8:	68 ff ff ff 00       	push   0xffffff
c00073ed:	56                   	push   esi
c00073ee:	e8 43 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073ff:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007403:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007408:	0d 00 9a c0 00       	or     eax,0xc09a00
c000740d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007411:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007415:	89 f8                	mov    eax,edi
c0007417:	89 fa                	mov    edx,edi
c0007419:	80 e4 f7             	and    ah,0xf7
c000741c:	80 ce 60             	or     dh,0x60
c000741f:	89 c7                	mov    edi,eax
c0007421:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007425:	80 cc 60             	or     ah,0x60
c0007428:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000742c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007430:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007434:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007438:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000743c:	83 c4 20             	add    esp,0x20
c000743f:	6a 00                	push   0x0
c0007441:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007445:	50                   	push   eax
c0007446:	e8 cf fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000744b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000744f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007453:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007457:	83 e0 3f             	and    eax,0x3f
c000745a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000745e:	6a 00                	push   0x0
c0007460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007464:	50                   	push   eax
c0007465:	e8 b0 fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000746a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000746e:	83 e0 3f             	and    eax,0x3f
c0007471:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007475:	83 c4 0c             	add    esp,0xc
c0007478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000747c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007480:	53                   	push   ebx
c0007481:	e8 e4 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007486:	83 c4 0c             	add    esp,0xc
c0007489:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000748d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007491:	53                   	push   ebx
c0007492:	e8 d3 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007497:	83 c4 0c             	add    esp,0xc
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	e8 c8 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074a9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074ad:	53                   	push   ebx
c00074ae:	e8 b7 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074b3:	83 c4 0c             	add    esp,0xc
c00074b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074be:	53                   	push   ebx
c00074bf:	e8 a6 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074c4:	83 c4 0c             	add    esp,0xc
c00074c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cf:	53                   	push   ebx
c00074d0:	e8 95 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074d5:	83 c4 0c             	add    esp,0xc
c00074d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e0:	53                   	push   ebx
c00074e1:	e8 84 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::flush()>
c00074ee:	83 c4 40             	add    esp,0x40
c00074f1:	5b                   	pop    ebx
c00074f2:	5e                   	pop    esi
c00074f3:	5f                   	pop    edi
c00074f4:	c3                   	ret    

c00074f5 <idleFunction(void*)>:
c00074f5:	83 ec 0c             	sub    esp,0xc
c00074f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00074fd:	48                   	dec    eax
c00074fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007503:	75 01                	jne    c0007506 <idleFunction(void*)+0x11>
c0007505:	fb                   	sti    
c0007506:	e8 25 f7 00 00       	call   c0016c30 <HalSystemIdle()>
c000750b:	e8 e2 73 01 00       	call   c001e8f2 <idleCommon()>
c0007510:	eb f4                	jmp    c0007506 <idleFunction(void*)+0x11>
c0007512:	66 90                	xchg   ax,ax

c0007514 <IDTEntry::IDTEntry(bool)>:
c0007514:	53                   	push   ebx
c0007515:	83 ec 04             	sub    esp,0x4
c0007518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751c:	88 04 24             	mov    BYTE PTR [esp],al
c000751f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007523:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007538:	83 e2 f0             	and    edx,0xfffffff0
c000753b:	83 ca 0e             	or     edx,0xe
c000753e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007545:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007548:	83 e2 ef             	and    edx,0xffffffef
c000754b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007552:	85 c0                	test   eax,eax
c0007554:	74 06                	je     c000755c <IDTEntry::IDTEntry(bool)+0x48>
c0007556:	b2 03                	mov    dl,0x3
c0007558:	eb 06                	jmp    c0007560 <IDTEntry::IDTEntry(bool)+0x4c>
c000755a:	66 90                	xchg   ax,ax
c000755c:	b2 00                	mov    dl,0x0
c000755e:	66 90                	xchg   ax,ax
c0007560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007564:	83 e2 03             	and    edx,0x3
c0007567:	89 d3                	mov    ebx,edx
c0007569:	c1 e3 05             	shl    ebx,0x5
c000756c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000756f:	83 e2 9f             	and    edx,0xffffff9f
c0007572:	88 d1                	mov    cl,dl
c0007574:	88 da                	mov    dl,bl
c0007576:	09 ca                	or     edx,ecx
c0007578:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007582:	83 ca 80             	or     edx,0xffffff80
c0007585:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007588:	90                   	nop
c0007589:	83 c4 04             	add    esp,0x4
c000758c:	5b                   	pop    ebx
c000758d:	c3                   	ret    

c000758e <IDTEntry::setOffset(unsigned int)>:
c000758e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007596:	66 89 02             	mov    WORD PTR [edx],ax
c0007599:	c1 e8 10             	shr    eax,0x10
c000759c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a0:	c3                   	ret    
c00075a1:	90                   	nop
c00075a2:	66 90                	xchg   ax,ax

c00075a4 <IDT::IDT()>:
c00075a4:	90                   	nop
c00075a5:	c3                   	ret    

c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075aa:	83 c0 30             	add    eax,0x30
c00075ad:	c3                   	ret    

c00075ae <IDT::addEntry(IDTEntry, int)>:
c00075ae:	53                   	push   ebx
c00075af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075c6:	5b                   	pop    ebx
c00075c7:	c3                   	ret    

c00075c8 <IDT::addEntry(int, void (*)(), bool)>:
c00075c8:	53                   	push   ebx
c00075c9:	83 ec 10             	sub    esp,0x10
c00075cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d1:	50                   	push   eax
c00075d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075d6:	53                   	push   ebx
c00075d7:	e8 38 ff ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c00075dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e0:	53                   	push   ebx
c00075e1:	e8 a8 ff ff ff       	call   c000758e <IDTEntry::setOffset(unsigned int)>
c00075e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075f6:	e8 b3 ff ff ff       	call   c00075ae <IDT::addEntry(IDTEntry, int)>
c00075fb:	83 c4 30             	add    esp,0x30
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::flush()>:
c0007600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007604:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c000760d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007612:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007619:	c3                   	ret    

c000761a <IDT::setup()>:
c000761a:	57                   	push   edi
c000761b:	56                   	push   esi
c000761c:	53                   	push   ebx
c000761d:	83 ec 10             	sub    esp,0x10
c0007620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007624:	6a 00                	push   0x0
c0007626:	68 f0 df 01 c0       	push   0xc001dff0
c000762b:	6a 00                	push   0x0
c000762d:	53                   	push   ebx
c000762e:	e8 95 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007633:	6a 00                	push   0x0
c0007635:	68 00 e0 01 c0       	push   0xc001e000
c000763a:	6a 01                	push   0x1
c000763c:	53                   	push   ebx
c000763d:	e8 86 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	6a 00                	push   0x0
c0007647:	68 0a e0 01 c0       	push   0xc001e00a
c000764c:	6a 02                	push   0x2
c000764e:	53                   	push   ebx
c000764f:	e8 74 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007654:	6a 00                	push   0x0
c0007656:	68 14 e0 01 c0       	push   0xc001e014
c000765b:	6a 03                	push   0x3
c000765d:	53                   	push   ebx
c000765e:	e8 65 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007663:	83 c4 20             	add    esp,0x20
c0007666:	6a 00                	push   0x0
c0007668:	68 1e e0 01 c0       	push   0xc001e01e
c000766d:	6a 04                	push   0x4
c000766f:	53                   	push   ebx
c0007670:	e8 53 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007675:	6a 00                	push   0x0
c0007677:	68 28 e0 01 c0       	push   0xc001e028
c000767c:	6a 05                	push   0x5
c000767e:	53                   	push   ebx
c000767f:	e8 44 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007684:	83 c4 20             	add    esp,0x20
c0007687:	6a 00                	push   0x0
c0007689:	68 32 e0 01 c0       	push   0xc001e032
c000768e:	6a 06                	push   0x6
c0007690:	53                   	push   ebx
c0007691:	e8 32 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007696:	6a 00                	push   0x0
c0007698:	68 3c e0 01 c0       	push   0xc001e03c
c000769d:	6a 07                	push   0x7
c000769f:	53                   	push   ebx
c00076a0:	e8 23 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076a5:	83 c4 20             	add    esp,0x20
c00076a8:	6a 00                	push   0x0
c00076aa:	68 46 e0 01 c0       	push   0xc001e046
c00076af:	6a 08                	push   0x8
c00076b1:	53                   	push   ebx
c00076b2:	e8 11 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076b7:	6a 00                	push   0x0
c00076b9:	68 4e e0 01 c0       	push   0xc001e04e
c00076be:	6a 09                	push   0x9
c00076c0:	53                   	push   ebx
c00076c1:	e8 02 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076c6:	83 c4 20             	add    esp,0x20
c00076c9:	6a 00                	push   0x0
c00076cb:	68 58 e0 01 c0       	push   0xc001e058
c00076d0:	6a 0a                	push   0xa
c00076d2:	53                   	push   ebx
c00076d3:	e8 f0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076d8:	6a 00                	push   0x0
c00076da:	68 60 e0 01 c0       	push   0xc001e060
c00076df:	6a 0b                	push   0xb
c00076e1:	53                   	push   ebx
c00076e2:	e8 e1 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076e7:	83 c4 20             	add    esp,0x20
c00076ea:	6a 00                	push   0x0
c00076ec:	68 68 e0 01 c0       	push   0xc001e068
c00076f1:	6a 0c                	push   0xc
c00076f3:	53                   	push   ebx
c00076f4:	e8 cf fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076f9:	6a 00                	push   0x0
c00076fb:	68 70 e0 01 c0       	push   0xc001e070
c0007700:	6a 0d                	push   0xd
c0007702:	53                   	push   ebx
c0007703:	e8 c0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007708:	83 c4 20             	add    esp,0x20
c000770b:	6a 00                	push   0x0
c000770d:	68 8a e0 01 c0       	push   0xc001e08a
c0007712:	6a 0e                	push   0xe
c0007714:	53                   	push   ebx
c0007715:	e8 ae fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000771a:	6a 00                	push   0x0
c000771c:	68 92 e0 01 c0       	push   0xc001e092
c0007721:	6a 0f                	push   0xf
c0007723:	53                   	push   ebx
c0007724:	e8 9f fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007729:	83 c4 20             	add    esp,0x20
c000772c:	6a 00                	push   0x0
c000772e:	68 9c e0 01 c0       	push   0xc001e09c
c0007733:	6a 10                	push   0x10
c0007735:	53                   	push   ebx
c0007736:	e8 8d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000773b:	6a 00                	push   0x0
c000773d:	68 a6 e0 01 c0       	push   0xc001e0a6
c0007742:	6a 11                	push   0x11
c0007744:	53                   	push   ebx
c0007745:	e8 7e fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000774a:	83 c4 20             	add    esp,0x20
c000774d:	6a 00                	push   0x0
c000774f:	68 b0 e0 01 c0       	push   0xc001e0b0
c0007754:	6a 12                	push   0x12
c0007756:	53                   	push   ebx
c0007757:	e8 6c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000775c:	6a 01                	push   0x1
c000775e:	68 4a e1 01 c0       	push   0xc001e14a
c0007763:	6a 60                	push   0x60
c0007765:	53                   	push   ebx
c0007766:	e8 5d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000776b:	83 c4 20             	add    esp,0x20
c000776e:	6a 00                	push   0x0
c0007770:	68 51 e1 01 c0       	push   0xc001e151
c0007775:	6a 20                	push   0x20
c0007777:	53                   	push   ebx
c0007778:	e8 4b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000777d:	6a 00                	push   0x0
c000777f:	68 3c e1 01 c0       	push   0xc001e13c
c0007784:	6a 21                	push   0x21
c0007786:	53                   	push   ebx
c0007787:	e8 3c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000778c:	83 c4 20             	add    esp,0x20
c000778f:	6a 00                	push   0x0
c0007791:	68 43 e1 01 c0       	push   0xc001e143
c0007796:	6a 22                	push   0x22
c0007798:	53                   	push   ebx
c0007799:	e8 2a fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000779e:	6a 00                	push   0x0
c00077a0:	68 ba e0 01 c0       	push   0xc001e0ba
c00077a5:	6a 23                	push   0x23
c00077a7:	53                   	push   ebx
c00077a8:	e8 1b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ad:	83 c4 20             	add    esp,0x20
c00077b0:	6a 00                	push   0x0
c00077b2:	68 c4 e0 01 c0       	push   0xc001e0c4
c00077b7:	6a 24                	push   0x24
c00077b9:	53                   	push   ebx
c00077ba:	e8 09 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077bf:	6a 00                	push   0x0
c00077c1:	68 ce e0 01 c0       	push   0xc001e0ce
c00077c6:	6a 25                	push   0x25
c00077c8:	53                   	push   ebx
c00077c9:	e8 fa fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ce:	83 c4 20             	add    esp,0x20
c00077d1:	6a 00                	push   0x0
c00077d3:	68 d8 e0 01 c0       	push   0xc001e0d8
c00077d8:	6a 26                	push   0x26
c00077da:	53                   	push   ebx
c00077db:	e8 e8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077e0:	6a 00                	push   0x0
c00077e2:	68 e2 e0 01 c0       	push   0xc001e0e2
c00077e7:	6a 27                	push   0x27
c00077e9:	53                   	push   ebx
c00077ea:	e8 d9 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ef:	83 c4 20             	add    esp,0x20
c00077f2:	6a 00                	push   0x0
c00077f4:	68 ec e0 01 c0       	push   0xc001e0ec
c00077f9:	6a 28                	push   0x28
c00077fb:	53                   	push   ebx
c00077fc:	e8 c7 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007801:	6a 00                	push   0x0
c0007803:	68 f6 e0 01 c0       	push   0xc001e0f6
c0007808:	6a 29                	push   0x29
c000780a:	53                   	push   ebx
c000780b:	e8 b8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007810:	83 c4 20             	add    esp,0x20
c0007813:	6a 00                	push   0x0
c0007815:	68 00 e1 01 c0       	push   0xc001e100
c000781a:	6a 2a                	push   0x2a
c000781c:	53                   	push   ebx
c000781d:	e8 a6 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007822:	6a 00                	push   0x0
c0007824:	68 0a e1 01 c0       	push   0xc001e10a
c0007829:	6a 2b                	push   0x2b
c000782b:	53                   	push   ebx
c000782c:	e8 97 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007831:	83 c4 20             	add    esp,0x20
c0007834:	6a 00                	push   0x0
c0007836:	68 14 e1 01 c0       	push   0xc001e114
c000783b:	6a 2c                	push   0x2c
c000783d:	53                   	push   ebx
c000783e:	e8 85 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007843:	6a 00                	push   0x0
c0007845:	68 1e e1 01 c0       	push   0xc001e11e
c000784a:	6a 2d                	push   0x2d
c000784c:	53                   	push   ebx
c000784d:	e8 76 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007852:	83 c4 20             	add    esp,0x20
c0007855:	6a 00                	push   0x0
c0007857:	68 28 e1 01 c0       	push   0xc001e128
c000785c:	6a 2e                	push   0x2e
c000785e:	53                   	push   ebx
c000785f:	e8 64 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007864:	6a 00                	push   0x0
c0007866:	68 32 e1 01 c0       	push   0xc001e132
c000786b:	6a 2f                	push   0x2f
c000786d:	53                   	push   ebx
c000786e:	e8 55 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007873:	83 c4 20             	add    esp,0x20
c0007876:	6a 00                	push   0x0
c0007878:	68 8c e2 01 c0       	push   0xc001e28c
c000787d:	6a 30                	push   0x30
c000787f:	53                   	push   ebx
c0007880:	e8 43 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007885:	6a 00                	push   0x0
c0007887:	68 96 e2 01 c0       	push   0xc001e296
c000788c:	6a 31                	push   0x31
c000788e:	53                   	push   ebx
c000788f:	e8 34 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007894:	83 c4 20             	add    esp,0x20
c0007897:	6a 00                	push   0x0
c0007899:	68 a0 e2 01 c0       	push   0xc001e2a0
c000789e:	6a 32                	push   0x32
c00078a0:	53                   	push   ebx
c00078a1:	e8 22 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078a6:	6a 00                	push   0x0
c00078a8:	68 aa e2 01 c0       	push   0xc001e2aa
c00078ad:	6a 33                	push   0x33
c00078af:	53                   	push   ebx
c00078b0:	e8 13 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078b5:	83 c4 20             	add    esp,0x20
c00078b8:	6a 00                	push   0x0
c00078ba:	68 b4 e2 01 c0       	push   0xc001e2b4
c00078bf:	6a 34                	push   0x34
c00078c1:	53                   	push   ebx
c00078c2:	e8 01 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078c7:	6a 00                	push   0x0
c00078c9:	68 be e2 01 c0       	push   0xc001e2be
c00078ce:	6a 35                	push   0x35
c00078d0:	53                   	push   ebx
c00078d1:	e8 f2 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078d6:	83 c4 20             	add    esp,0x20
c00078d9:	6a 00                	push   0x0
c00078db:	68 c8 e2 01 c0       	push   0xc001e2c8
c00078e0:	6a 36                	push   0x36
c00078e2:	53                   	push   ebx
c00078e3:	e8 e0 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078e8:	6a 00                	push   0x0
c00078ea:	68 d2 e2 01 c0       	push   0xc001e2d2
c00078ef:	6a 37                	push   0x37
c00078f1:	53                   	push   ebx
c00078f2:	e8 d1 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078f7:	83 c4 1c             	add    esp,0x1c
c00078fa:	6a 03                	push   0x3
c00078fc:	6a 02                	push   0x2
c00078fe:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007904:	e8 01 25 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007909:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007910:	89 c6                	mov    esi,eax
c0007912:	e8 97 01 00 00       	call   c0007aae <malloc>
c0007917:	81 c6 00 20 00 00    	add    esi,0x2000
c000791d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007920:	89 c7                	mov    edi,eax
c0007922:	e8 2d 16 00 00       	call   c0008f54 <TSS::TSS()>
c0007927:	83 c4 0c             	add    esp,0xc
c000792a:	68 46 e0 01 c0       	push   0xc001e046
c000792f:	56                   	push   esi
c0007930:	57                   	push   edi
c0007931:	e8 62 16 00 00       	call   c0008f98 <TSS::setup(unsigned long, unsigned long)>
c0007936:	89 c6                	mov    esi,eax
c0007938:	58                   	pop    eax
c0007939:	5a                   	pop    edx
c000793a:	6a 00                	push   0x0
c000793c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007940:	50                   	push   eax
c0007941:	e8 ce fb ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c0007946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000794f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007956:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000795c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007960:	80 ce 05             	or     dh,0x5
c0007963:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007966:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000796a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007974:	e8 87 fc ff ff       	call   c0007600 <IDT::flush()>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	c3                   	ret    

c0007980 <sbrk>:
c0007980:	55                   	push   ebp
c0007981:	57                   	push   edi
c0007982:	56                   	push   esi
c0007983:	53                   	push   ebx
c0007984:	83 ec 1c             	sub    esp,0x1c
c0007987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000798b:	85 c0                	test   eax,eax
c000798d:	74 61                	je     c00079f0 <sbrk+0x70>
c000798f:	78 66                	js     c00079f7 <sbrk+0x77>
c0007991:	8b 15 48 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f48
c0007997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000799b:	05 ff 0f 00 00       	add    eax,0xfff
c00079a0:	89 c5                	mov    ebp,eax
c00079a2:	78 6b                	js     c0007a0f <sbrk+0x8f>
c00079a4:	c1 fd 0c             	sar    ebp,0xc
c00079a7:	bb 00 00 00 00       	mov    ebx,0x0
c00079ac:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079b2:	8b 3d 48 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021f48
c00079b8:	e8 f6 03 00 00       	call   c0007db3 <Phys::allocatePage()>
c00079bd:	68 01 04 00 00       	push   0x401
c00079c2:	57                   	push   edi
c00079c3:	50                   	push   eax
c00079c4:	56                   	push   esi
c00079c5:	e8 3a 23 00 00       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ca:	81 05 48 1f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021f48,0x1000
c00079d4:	83 c3 01             	add    ebx,0x1
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	39 dd                	cmp    ebp,ebx
c00079dc:	75 ce                	jne    c00079ac <sbrk+0x2c>
c00079de:	0f 20 d8             	mov    eax,cr3
c00079e1:	0f 22 d8             	mov    cr3,eax
c00079e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e8:	83 c4 1c             	add    esp,0x1c
c00079eb:	5b                   	pop    ebx
c00079ec:	5e                   	pop    esi
c00079ed:	5f                   	pop    edi
c00079ee:	5d                   	pop    ebp
c00079ef:	c3                   	ret    
c00079f0:	a1 48 1f 02 c0       	mov    eax,ds:0xc0021f48
c00079f5:	eb f1                	jmp    c00079e8 <sbrk+0x68>
c00079f7:	83 ec 08             	sub    esp,0x8
c00079fa:	50                   	push   eax
c00079fb:	68 d8 fb 01 c0       	push   0xc001fbd8
c0007a00:	e8 ec 2f 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a0d:	eb d9                	jmp    c00079e8 <sbrk+0x68>
c0007a0f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a15:	eb 8d                	jmp    c00079a4 <sbrk+0x24>

c0007a17 <mmap>:
c0007a17:	83 ec 18             	sub    esp,0x18
c0007a1a:	68 08 fc 01 c0       	push   0xc001fc08
c0007a1f:	e8 fb 8e 00 00       	call   c001091f <KePanic(char const*)>
c0007a24:	b8 00 00 00 00       	mov    eax,0x0
c0007a29:	83 c4 1c             	add    esp,0x1c
c0007a2c:	c3                   	ret    

c0007a2d <munmap>:
c0007a2d:	83 ec 18             	sub    esp,0x18
c0007a30:	68 0d fc 01 c0       	push   0xc001fc0d
c0007a35:	e8 e5 8e 00 00       	call   c001091f <KePanic(char const*)>
c0007a3a:	b8 00 00 00 00       	mov    eax,0x0
c0007a3f:	83 c4 1c             	add    esp,0x1c
c0007a42:	c3                   	ret    

c0007a43 <liballoc_lock()>:
c0007a43:	fa                   	cli    
c0007a44:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a4b:	b8 00 00 00 00       	mov    eax,0x0
c0007a50:	c3                   	ret    

c0007a51 <liballoc_unlock()>:
c0007a51:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a56:	83 e8 01             	sub    eax,0x1
c0007a59:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a5e:	75 01                	jne    c0007a61 <liballoc_unlock()+0x10>
c0007a60:	fb                   	sti    
c0007a61:	b8 00 00 00 00       	mov    eax,0x0
c0007a66:	c3                   	ret    

c0007a67 <liballoc_alloc(int)>:
c0007a67:	83 ec 10             	sub    esp,0x10
c0007a6a:	6a 01                	push   0x1
c0007a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a70:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a76:	e8 8f 23 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007a7b:	83 c4 1c             	add    esp,0x1c
c0007a7e:	c3                   	ret    

c0007a7f <liballoc_free(void*, int)>:
c0007a7f:	83 ec 14             	sub    esp,0x14
c0007a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a86:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a8c:	e8 bb 1f 00 00       	call   c0009a4c <VAS::freeAllocatedPages(unsigned long)>
c0007a91:	b8 00 00 00 00       	mov    eax,0x0
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	c3                   	ret    

c0007a9a <realloc>:
c0007a9a:	83 ec 14             	sub    esp,0x14
c0007a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa5:	e8 3e 9b ff ff       	call   c00015e8 <dlrealloc>
c0007aaa:	83 c4 1c             	add    esp,0x1c
c0007aad:	c3                   	ret    

c0007aae <malloc>:
c0007aae:	83 ec 18             	sub    esp,0x18
c0007ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab5:	e8 f1 95 ff ff       	call   c00010ab <dlmalloc>
c0007aba:	83 c4 1c             	add    esp,0x1c
c0007abd:	c3                   	ret    

c0007abe <free>:
c0007abe:	83 ec 18             	sub    esp,0x18
c0007ac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac5:	e8 89 92 ff ff       	call   c0000d53 <dlfree>
c0007aca:	83 c4 1c             	add    esp,0x1c
c0007acd:	c3                   	ret    

c0007ace <rfree>:
c0007ace:	83 ec 18             	sub    esp,0x18
c0007ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad5:	e8 79 92 ff ff       	call   c0000d53 <dlfree>
c0007ada:	83 c4 1c             	add    esp,0x1c
c0007add:	c3                   	ret    

c0007ade <calloc>:
c0007ade:	56                   	push   esi
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 10             	sub    esp,0x10
c0007ae3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ae7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007aec:	53                   	push   ebx
c0007aed:	e8 bc ff ff ff       	call   c0007aae <malloc>
c0007af2:	89 c6                	mov    esi,eax
c0007af4:	83 c4 0c             	add    esp,0xc
c0007af7:	53                   	push   ebx
c0007af8:	6a 00                	push   0x0
c0007afa:	50                   	push   eax
c0007afb:	e8 f0 89 ff ff       	call   c00004f0 <memset>
c0007b00:	89 f0                	mov    eax,esi
c0007b02:	83 c4 14             	add    esp,0x14
c0007b05:	5b                   	pop    ebx
c0007b06:	5e                   	pop    esi
c0007b07:	c3                   	ret    

c0007b08 <KeEntryPoint>:
c0007b08:	57                   	push   edi
c0007b09:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b0e:	56                   	push   esi
c0007b0f:	89 fa                	mov    edx,edi
c0007b11:	53                   	push   ebx
c0007b12:	31 f6                	xor    esi,esi
c0007b14:	83 ec 2c             	sub    esp,0x2c
c0007b17:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b1c:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b21:	89 f0                	mov    eax,esi
c0007b23:	ee                   	out    dx,al
c0007b24:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b29:	b0 80                	mov    al,0x80
c0007b2b:	89 da                	mov    edx,ebx
c0007b2d:	ee                   	out    dx,al
c0007b2e:	b1 03                	mov    cl,0x3
c0007b30:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b35:	88 c8                	mov    al,cl
c0007b37:	ee                   	out    dx,al
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	89 fa                	mov    edx,edi
c0007b3c:	ee                   	out    dx,al
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	89 da                	mov    edx,ebx
c0007b41:	ee                   	out    dx,al
c0007b42:	b0 c7                	mov    al,0xc7
c0007b44:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 0b                	mov    al,0xb
c0007b4c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b51:	ee                   	out    dx,al
c0007b52:	68 14 fc 01 c0       	push   0xc001fc14
c0007b57:	e8 95 2e 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0007b5c:	e8 cc 86 00 00       	call   c001022d <KeDisplaySplashScreen()>
c0007b61:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b66:	05 ff 0f 00 00       	add    eax,0xfff
c0007b6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b73:	e8 a9 03 00 00       	call   c0007f21 <Phys::physicalMemorySetup(unsigned int)>
c0007b78:	e8 7e 1c 00 00       	call   c00097fb <Virt::virtualMemorySetup()>
c0007b7d:	58                   	pop    eax
c0007b7e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b82:	53                   	push   ebx
c0007b83:	e8 44 1f 00 00       	call   c0009acc <VAS::VAS()>
c0007b88:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b8e:	e8 f7 6c 01 00       	call   c001e88a <_init>
c0007b93:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b9a:	e8 0f ff ff ff       	call   c0007aae <malloc>
c0007b9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ba2:	89 c6                	mov    esi,eax
c0007ba4:	e8 35 f2 ff ff       	call   c0006dde <Computer::Computer()>
c0007ba9:	6a 00                	push   0x0
c0007bab:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bb1:	6a 00                	push   0x0
c0007bb3:	6a 00                	push   0x0
c0007bb5:	56                   	push   esi
c0007bb6:	e8 eb f5 ff ff       	call   c00071a6 <Computer::open(int, int, void*)>
c0007bbb:	83 c4 14             	add    esp,0x14
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 d2 1f 00 00       	call   c0009b96 <VAS::~VAS()>
c0007bc4:	83 c4 30             	add    esp,0x30
c0007bc7:	5b                   	pop    ebx
c0007bc8:	5e                   	pop    esi
c0007bc9:	5f                   	pop    edi
c0007bca:	c3                   	ret    

c0007bcb <Phys::allocateDMA(unsigned long)>:
c0007bcb:	55                   	push   ebp
c0007bcc:	31 ed                	xor    ebp,ebp
c0007bce:	57                   	push   edi
c0007bcf:	56                   	push   esi
c0007bd0:	53                   	push   ebx
c0007bd1:	31 db                	xor    ebx,ebx
c0007bd3:	83 ec 1c             	sub    esp,0x1c
c0007bd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bda:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007be2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007be8:	31 c0                	xor    eax,eax
c0007bea:	c1 ef 0c             	shr    edi,0xc
c0007bed:	eb 1b                	jmp    c0007c0a <Phys::allocateDMA(unsigned long)+0x3f>
c0007bef:	85 c0                	test   eax,eax
c0007bf1:	75 06                	jne    c0007bf9 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bf3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bf7:	89 dd                	mov    ebp,ebx
c0007bf9:	8d 70 01             	lea    esi,[eax+0x1]
c0007bfc:	39 f7                	cmp    edi,esi
c0007bfe:	74 37                	je     c0007c37 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c00:	89 f0                	mov    eax,esi
c0007c02:	83 c3 01             	add    ebx,0x1
c0007c05:	83 fb 0f             	cmp    ebx,0xf
c0007c08:	7f 13                	jg     c0007c1d <Phys::allocateDMA(unsigned long)+0x52>
c0007c0a:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c11:	74 dc                	je     c0007bef <Phys::allocateDMA(unsigned long)+0x24>
c0007c13:	31 c0                	xor    eax,eax
c0007c15:	83 c3 01             	add    ebx,0x1
c0007c18:	83 fb 0f             	cmp    ebx,0xf
c0007c1b:	7e ed                	jle    c0007c0a <Phys::allocateDMA(unsigned long)+0x3f>
c0007c1d:	83 ec 0c             	sub    esp,0xc
c0007c20:	68 2c fc 01 c0       	push   0xc001fc2c
c0007c25:	e8 f5 8c 00 00       	call   c001091f <KePanic(char const*)>
c0007c2a:	83 c4 10             	add    esp,0x10
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c4 1c             	add    esp,0x1c
c0007c32:	5b                   	pop    ebx
c0007c33:	5e                   	pop    esi
c0007c34:	5f                   	pop    edi
c0007c35:	5d                   	pop    ebp
c0007c36:	c3                   	ret    
c0007c37:	89 e9                	mov    ecx,ebp
c0007c39:	c1 f9 04             	sar    ecx,0x4
c0007c3c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c40:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c44:	89 ca                	mov    edx,ecx
c0007c46:	83 ea 01             	sub    edx,0x1
c0007c49:	79 03                	jns    c0007c4e <Phys::allocateDMA(unsigned long)+0x83>
c0007c4b:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c4e:	c1 fa 04             	sar    edx,0x4
c0007c51:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c55:	74 08                	je     c0007c5f <Phys::allocateDMA(unsigned long)+0x94>
c0007c57:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c5b:	31 c0                	xor    eax,eax
c0007c5d:	eb b6                	jmp    c0007c15 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c5f:	85 f6                	test   esi,esi
c0007c61:	74 17                	je     c0007c7a <Phys::allocateDMA(unsigned long)+0xaf>
c0007c63:	8d 95 ec 4e 02 c0    	lea    edx,[ebp-0x3ffdb114]
c0007c69:	8d 84 05 ed 4e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdb113]
c0007c70:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c73:	83 c2 01             	add    edx,0x1
c0007c76:	39 d0                	cmp    eax,edx
c0007c78:	75 f6                	jne    c0007c70 <Phys::allocateDMA(unsigned long)+0xa5>
c0007c7a:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007c7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c83:	01 f8                	add    eax,edi
c0007c85:	85 d2                	test   edx,edx
c0007c87:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007c8c:	74 17                	je     c0007ca5 <Phys::allocateDMA(unsigned long)+0xda>
c0007c8e:	83 ec 0c             	sub    esp,0xc
c0007c91:	68 2c fc 01 c0       	push   0xc001fc2c
c0007c96:	e8 84 8c 00 00       	call   c001091f <KePanic(char const*)>
c0007c9b:	83 c4 10             	add    esp,0x10
c0007c9e:	89 f0                	mov    eax,esi
c0007ca0:	e9 5d ff ff ff       	jmp    c0007c02 <Phys::allocateDMA(unsigned long)+0x37>
c0007ca5:	c1 e5 0c             	shl    ebp,0xc
c0007ca8:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cae:	e9 7c ff ff ff       	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x64>

c0007cb3 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cbd:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007cc2:	c1 ea 0c             	shr    edx,0xc
c0007cc5:	29 d0                	sub    eax,edx
c0007cc7:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd0:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cd5:	c1 e8 0c             	shr    eax,0xc
c0007cd8:	85 d2                	test   edx,edx
c0007cda:	74 11                	je     c0007ced <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cdc:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007ce1:	01 c2                	add    edx,eax
c0007ce3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007ce6:	83 c0 01             	add    eax,0x1
c0007ce9:	39 d0                	cmp    eax,edx
c0007ceb:	75 f6                	jne    c0007ce3 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007ced:	c3                   	ret    

c0007cee <Phys::setPageState(unsigned long, bool)>:
c0007cee:	57                   	push   edi
c0007cef:	56                   	push   esi
c0007cf0:	8b 35 4c 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021f4c
c0007cf6:	53                   	push   ebx
c0007cf7:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d04:	0f b6 c0             	movzx  eax,al
c0007d07:	89 ca                	mov    edx,ecx
c0007d09:	83 e1 07             	and    ecx,0x7
c0007d0c:	c1 ea 03             	shr    edx,0x3
c0007d0f:	d3 c3                	rol    ebx,cl
c0007d11:	01 d6                	add    esi,edx
c0007d13:	d3 e0                	shl    eax,cl
c0007d15:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d18:	21 fb                	and    ebx,edi
c0007d1a:	88 1e                	mov    BYTE PTR [esi],bl
c0007d1c:	8b 1d 4c 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f4c
c0007d22:	01 da                	add    edx,ebx
c0007d24:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d26:	09 c8                	or     eax,ecx
c0007d28:	88 02                	mov    BYTE PTR [edx],al
c0007d2a:	5b                   	pop    ebx
c0007d2b:	5e                   	pop    esi
c0007d2c:	5f                   	pop    edi
c0007d2d:	c3                   	ret    

c0007d2e <Phys::getPageState(unsigned long)>:
c0007d2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d32:	8b 15 4c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f4c
c0007d38:	89 c8                	mov    eax,ecx
c0007d3a:	83 e1 07             	and    ecx,0x7
c0007d3d:	c1 e8 03             	shr    eax,0x3
c0007d40:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d44:	d3 f8                	sar    eax,cl
c0007d46:	83 e0 01             	and    eax,0x1
c0007d49:	c3                   	ret    

c0007d4a <Phys::freePage(unsigned long)>:
c0007d4a:	53                   	push   ebx
c0007d4b:	83 ec 08             	sub    esp,0x8
c0007d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d52:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d58:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d5e:	76 41                	jbe    c0007da1 <Phys::freePage(unsigned long)+0x57>
c0007d60:	c1 e8 0c             	shr    eax,0xc
c0007d63:	50                   	push   eax
c0007d64:	89 c3                	mov    ebx,eax
c0007d66:	e8 c3 ff ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007d6b:	5a                   	pop    edx
c0007d6c:	84 c0                	test   al,al
c0007d6e:	74 20                	je     c0007d90 <Phys::freePage(unsigned long)+0x46>
c0007d70:	83 ec 08             	sub    esp,0x8
c0007d73:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d78:	6a 00                	push   0x0
c0007d7a:	83 e8 01             	sub    eax,0x1
c0007d7d:	53                   	push   ebx
c0007d7e:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d83:	e8 66 ff ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007d88:	83 c4 10             	add    esp,0x10
c0007d8b:	83 c4 08             	add    esp,0x8
c0007d8e:	5b                   	pop    ebx
c0007d8f:	c3                   	ret    
c0007d90:	c7 44 24 10 d1 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fcd1
c0007d98:	83 c4 08             	add    esp,0x8
c0007d9b:	5b                   	pop    ebx
c0007d9c:	e9 7e 8b 00 00       	jmp    c001091f <KePanic(char const*)>
c0007da1:	68 00 10 00 00       	push   0x1000
c0007da6:	50                   	push   eax
c0007da7:	e8 07 ff ff ff       	call   c0007cb3 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dac:	59                   	pop    ecx
c0007dad:	5b                   	pop    ebx
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    

c0007db3 <Phys::allocatePage()>:
c0007db3:	56                   	push   esi
c0007db4:	53                   	push   ebx
c0007db5:	83 ec 14             	sub    esp,0x14
c0007db8:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007dbe:	89 f3                	mov    ebx,esi
c0007dc0:	eb 0a                	jmp    c0007dcc <Phys::allocatePage()+0x19>
c0007dc2:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007dc8:	39 de                	cmp    esi,ebx
c0007dca:	74 26                	je     c0007df2 <Phys::allocatePage()+0x3f>
c0007dcc:	53                   	push   ebx
c0007dcd:	e8 5c ff ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007dd2:	5a                   	pop    edx
c0007dd3:	84 c0                	test   al,al
c0007dd5:	74 67                	je     c0007e3e <Phys::allocatePage()+0x8b>
c0007dd7:	83 c3 01             	add    ebx,0x1
c0007dda:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007de0:	75 e0                	jne    c0007dc2 <Phys::allocatePage()+0xf>
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007dee:	39 de                	cmp    esi,ebx
c0007df0:	75 da                	jne    c0007dcc <Phys::allocatePage()+0x19>
c0007df2:	83 ec 0c             	sub    esp,0xc
c0007df5:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007dfa:	83 f0 01             	xor    eax,0x1
c0007dfd:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e0a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e10:	50                   	push   eax
c0007e11:	e8 60 28 00 00       	call   c000a676 <VAS::scanForEviction()>
c0007e16:	83 c4 10             	add    esp,0x10
c0007e19:	85 c0                	test   eax,eax
c0007e1b:	75 48                	jne    c0007e65 <Phys::allocatePage()+0xb2>
c0007e1d:	83 ec 0c             	sub    esp,0xc
c0007e20:	68 54 fc 01 c0       	push   0xc001fc54
c0007e25:	e8 f5 8a 00 00       	call   c001091f <KePanic(char const*)>
c0007e2a:	83 c4 10             	add    esp,0x10
c0007e2d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e33:	53                   	push   ebx
c0007e34:	e8 f5 fe ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007e39:	5a                   	pop    edx
c0007e3a:	84 c0                	test   al,al
c0007e3c:	75 99                	jne    c0007dd7 <Phys::allocatePage()+0x24>
c0007e3e:	6a 01                	push   0x1
c0007e40:	53                   	push   ebx
c0007e41:	e8 a8 fe ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007e46:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e4c:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e51:	83 c2 01             	add    edx,0x1
c0007e54:	59                   	pop    ecx
c0007e55:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e5b:	c1 e0 0c             	shl    eax,0xc
c0007e5e:	5b                   	pop    ebx
c0007e5f:	83 c4 14             	add    esp,0x14
c0007e62:	5b                   	pop    ebx
c0007e63:	5e                   	pop    esi
c0007e64:	c3                   	ret    
c0007e65:	83 ec 08             	sub    esp,0x8
c0007e68:	89 c2                	mov    edx,eax
c0007e6a:	6a 01                	push   0x1
c0007e6c:	c1 ea 0c             	shr    edx,0xc
c0007e6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e73:	52                   	push   edx
c0007e74:	e8 75 fe ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007e79:	83 c4 10             	add    esp,0x10
c0007e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e80:	eb dd                	jmp    c0007e5f <Phys::allocatePage()+0xac>

c0007e82 <Phys::allocateContiguousPages(int)>:
c0007e82:	57                   	push   edi
c0007e83:	56                   	push   esi
c0007e84:	53                   	push   ebx
c0007e85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e89:	fa                   	cli    
c0007e8a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e8f:	31 db                	xor    ebx,ebx
c0007e91:	83 c0 01             	add    eax,0x1
c0007e94:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e99:	85 db                	test   ebx,ebx
c0007e9b:	75 11                	jne    c0007eae <Phys::allocateContiguousPages(int)+0x2c>
c0007e9d:	e8 11 ff ff ff       	call   c0007db3 <Phys::allocatePage()>
c0007ea2:	83 fe 01             	cmp    esi,0x1
c0007ea5:	89 c7                	mov    edi,eax
c0007ea7:	74 21                	je     c0007eca <Phys::allocateContiguousPages(int)+0x48>
c0007ea9:	bb 01 00 00 00       	mov    ebx,0x1
c0007eae:	e8 00 ff ff ff       	call   c0007db3 <Phys::allocatePage()>
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	c1 e2 0c             	shl    edx,0xc
c0007eb8:	01 fa                	add    edx,edi
c0007eba:	39 c2                	cmp    edx,eax
c0007ebc:	74 22                	je     c0007ee0 <Phys::allocateContiguousPages(int)+0x5e>
c0007ebe:	bb 01 00 00 00       	mov    ebx,0x1
c0007ec3:	89 c7                	mov    edi,eax
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	75 e4                	jne    c0007eae <Phys::allocateContiguousPages(int)+0x2c>
c0007eca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ecf:	83 e8 01             	sub    eax,0x1
c0007ed2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ed7:	75 01                	jne    c0007eda <Phys::allocateContiguousPages(int)+0x58>
c0007ed9:	fb                   	sti    
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	5b                   	pop    ebx
c0007edd:	5e                   	pop    esi
c0007ede:	5f                   	pop    edi
c0007edf:	c3                   	ret    
c0007ee0:	83 c3 01             	add    ebx,0x1
c0007ee3:	39 f3                	cmp    ebx,esi
c0007ee5:	75 b2                	jne    c0007e99 <Phys::allocateContiguousPages(int)+0x17>
c0007ee7:	eb e1                	jmp    c0007eca <Phys::allocateContiguousPages(int)+0x48>

c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ee9:	56                   	push   esi
c0007eea:	53                   	push   ebx
c0007eeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eef:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007ef5:	73 06                	jae    c0007efd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ef7:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f01:	c1 eb 0c             	shr    ebx,0xc
c0007f04:	c1 e8 0c             	shr    eax,0xc
c0007f07:	39 d8                	cmp    eax,ebx
c0007f09:	73 13                	jae    c0007f1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f0b:	6a 00                	push   0x0
c0007f0d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f10:	50                   	push   eax
c0007f11:	e8 d8 fd ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007f16:	5a                   	pop    edx
c0007f17:	89 f0                	mov    eax,esi
c0007f19:	59                   	pop    ecx
c0007f1a:	39 f3                	cmp    ebx,esi
c0007f1c:	75 ed                	jne    c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f1e:	5b                   	pop    ebx
c0007f1f:	5e                   	pop    esi
c0007f20:	c3                   	ret    

c0007f21 <Phys::physicalMemorySetup(unsigned int)>:
c0007f21:	55                   	push   ebp
c0007f22:	57                   	push   edi
c0007f23:	56                   	push   esi
c0007f24:	53                   	push   ebx
c0007f25:	83 ec 40             	sub    esp,0x40
c0007f28:	6a 10                	push   0x10
c0007f2a:	6a 00                	push   0x0
c0007f2c:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f31:	e8 ba 85 ff ff       	call   c00004f0 <memset>
c0007f36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f3f:	05 00 10 00 00       	add    eax,0x1000
c0007f44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f48:	5b                   	pop    ebx
c0007f49:	31 db                	xor    ebx,ebx
c0007f4b:	5e                   	pop    esi
c0007f4c:	50                   	push   eax
c0007f4d:	68 e7 fc 01 c0       	push   0xc001fce7
c0007f52:	e8 9a 2a 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0007f57:	83 c4 10             	add    esp,0x10
c0007f5a:	83 ec 08             	sub    esp,0x8
c0007f5d:	6a 01                	push   0x1
c0007f5f:	53                   	push   ebx
c0007f60:	83 c3 01             	add    ebx,0x1
c0007f63:	e8 86 fd ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007f68:	83 c4 10             	add    esp,0x10
c0007f6b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f71:	75 e7                	jne    c0007f5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f73:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007f7e:	85 c0                	test   eax,eax
c0007f80:	0f 84 98 01 00 00    	je     c000811e <Phys::physicalMemorySetup(unsigned int)+0x1fd>
c0007f86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f8a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f92:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f97:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f9b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fa3:	eb 1c                	jmp    c0007fc1 <Phys::physicalMemorySetup(unsigned int)+0xa0>
c0007fa5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fa9:	83 c3 18             	add    ebx,0x18
c0007fac:	83 c6 01             	add    esi,0x1
c0007faf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fb7:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fbb:	0f 84 6d 01 00 00    	je     c000812e <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0007fc1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fc4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fc7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fd2:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fd4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fd7:	01 f0                	add    eax,esi
c0007fd9:	55                   	push   ebp
c0007fda:	11 fa                	adc    edx,edi
c0007fdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fe0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fe4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe8:	51                   	push   ecx
c0007fe9:	56                   	push   esi
c0007fea:	68 84 fc 01 c0       	push   0xc001fc84
c0007fef:	e8 fd 29 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0007ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007ff8:	83 c4 10             	add    esp,0x10
c0007ffb:	09 f8                	or     eax,edi
c0007ffd:	0f 85 2b 01 00 00    	jne    c000812e <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0008003:	83 fd 01             	cmp    ebp,0x1
c0008006:	75 9d                	jne    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c0008008:	ba 00 00 08 00       	mov    edx,0x80000
c000800d:	89 c1                	mov    ecx,eax
c000800f:	39 f2                	cmp    edx,esi
c0008011:	19 f9                	sbb    ecx,edi
c0008013:	0f 82 ab 00 00 00    	jb     c00080c4 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008019:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000801d:	89 c1                	mov    ecx,eax
c000801f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008023:	0f 83 9b 00 00 00    	jae    c00080c4 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008029:	ba 00 00 0a 00       	mov    edx,0xa0000
c000802e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008032:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008036:	39 fa                	cmp    edx,edi
c0008038:	19 e8                	sbb    eax,ebp
c000803a:	0f 82 b0 01 00 00    	jb     c00081f0 <Phys::physicalMemorySetup(unsigned int)+0x2cf>
c0008040:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008044:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008048:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000804e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008053:	83 d5 ff             	adc    ebp,0xffffffff
c0008056:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000805a:	31 c0                	xor    eax,eax
c000805c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008060:	39 fa                	cmp    edx,edi
c0008062:	89 c1                	mov    ecx,eax
c0008064:	19 e9                	sbb    ecx,ebp
c0008066:	0f 83 39 ff ff ff    	jae    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c000806c:	be 00 00 08 00       	mov    esi,0x80000
c0008071:	83 ec 04             	sub    esp,0x4
c0008074:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008078:	57                   	push   edi
c0008079:	56                   	push   esi
c000807a:	68 a8 fc 01 c0       	push   0xc001fca8
c000807f:	e8 6d 29 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0008084:	5d                   	pop    ebp
c0008085:	58                   	pop    eax
c0008086:	57                   	push   edi
c0008087:	56                   	push   esi
c0008088:	e8 5c fe ff ff       	call   c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000808d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008091:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008095:	83 c4 0c             	add    esp,0xc
c0008098:	0f ac d0 0c          	shrd   eax,edx,0xc
c000809c:	8b 15 e8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee8
c00080a2:	01 d0                	add    eax,edx
c00080a4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080ab:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080b0:	52                   	push   edx
c00080b1:	50                   	push   eax
c00080b2:	68 0d fd 01 c0       	push   0xc001fd0d
c00080b7:	e8 35 29 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00080bc:	83 c4 10             	add    esp,0x10
c00080bf:	e9 e1 fe ff ff       	jmp    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080c4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080d0:	39 ea                	cmp    edx,ebp
c00080d2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080d6:	0f 82 c9 fe ff ff    	jb     c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080dc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080e1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080e5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080e9:	0f 83 b6 fe ff ff    	jae    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080ef:	39 ee                	cmp    esi,ebp
c00080f1:	89 f8                	mov    eax,edi
c00080f3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00080f7:	0f 83 74 ff ff ff    	jae    c0008071 <Phys::physicalMemorySetup(unsigned int)+0x150>
c00080fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008101:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008105:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008109:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000810d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008111:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008115:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008119:	e9 53 ff ff ff       	jmp    c0008071 <Phys::physicalMemorySetup(unsigned int)+0x150>
c000811e:	83 ec 0c             	sub    esp,0xc
c0008121:	68 ff fc 01 c0       	push   0xc001fcff
c0008126:	e8 f4 87 00 00       	call   c001091f <KePanic(char const*)>
c000812b:	83 c4 10             	add    esp,0x10
c000812e:	83 ec 08             	sub    esp,0x8
c0008131:	bb 60 00 00 00       	mov    ebx,0x60
c0008136:	6a 00                	push   0x0
c0008138:	6a 06                	push   0x6
c000813a:	e8 af fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000813f:	58                   	pop    eax
c0008140:	5a                   	pop    edx
c0008141:	6a 00                	push   0x0
c0008143:	6a 07                	push   0x7
c0008145:	e8 a4 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000814a:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0008150:	83 c4 10             	add    esp,0x10
c0008153:	83 c1 02             	add    ecx,0x2
c0008156:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000815c:	83 ec 08             	sub    esp,0x8
c000815f:	6a 00                	push   0x0
c0008161:	53                   	push   ebx
c0008162:	83 c3 01             	add    ebx,0x1
c0008165:	e8 84 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008173:	75 e7                	jne    c000815c <Phys::physicalMemorySetup(unsigned int)+0x23b>
c0008175:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000817a:	bb 40 01 00 00       	mov    ebx,0x140
c000817f:	83 c0 20             	add    eax,0x20
c0008182:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008187:	eb 26                	jmp    c00081af <Phys::physicalMemorySetup(unsigned int)+0x28e>
c0008189:	83 ec 08             	sub    esp,0x8
c000818c:	6a 00                	push   0x0
c000818e:	53                   	push   ebx
c000818f:	83 c3 01             	add    ebx,0x1
c0008192:	e8 57 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0008197:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000819c:	83 c4 10             	add    esp,0x10
c000819f:	83 c0 01             	add    eax,0x1
c00081a2:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081a8:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081ad:	74 07                	je     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x295>
c00081af:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081b4:	7e d3                	jle    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x268>
c00081b6:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081bb:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081c0:	7f 26                	jg     c00081e8 <Phys::physicalMemorySetup(unsigned int)+0x2c7>
c00081c2:	83 ec 08             	sub    esp,0x8
c00081c5:	6a 00                	push   0x0
c00081c7:	53                   	push   ebx
c00081c8:	83 c3 01             	add    ebx,0x1
c00081cb:	e8 1e fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c00081d0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081d5:	83 c4 10             	add    esp,0x10
c00081d8:	83 c0 01             	add    eax,0x1
c00081db:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081e1:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081e6:	75 d3                	jne    c00081bb <Phys::physicalMemorySetup(unsigned int)+0x29a>
c00081e8:	83 c4 3c             	add    esp,0x3c
c00081eb:	5b                   	pop    ebx
c00081ec:	5e                   	pop    esi
c00081ed:	5f                   	pop    edi
c00081ee:	5d                   	pop    ebp
c00081ef:	c3                   	ret    
c00081f0:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00081f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008200:	e9 3b fe ff ff       	jmp    c0008040 <Phys::physicalMemorySetup(unsigned int)+0x11f>
c0008205:	90                   	nop

c0008206 <Pipe::isAtty()>:
c0008206:	31 c0                	xor    eax,eax
c0008208:	c3                   	ret    
c0008209:	90                   	nop

c000820a <Pipe::~Pipe()>:
c000820a:	83 ec 0c             	sub    esp,0xc
c000820d:	ba 6c fd 01 c0       	mov    edx,0xc001fd6c
c0008212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008216:	89 10                	mov    DWORD PTR [eax],edx
c0008218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821c:	83 ec 0c             	sub    esp,0xc
c000821f:	50                   	push   eax
c0008220:	e8 8f 11 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008225:	83 c4 10             	add    esp,0x10
c0008228:	90                   	nop
c0008229:	83 c4 0c             	add    esp,0xc
c000822c:	c3                   	ret    
c000822d:	90                   	nop

c000822e <Pipe::~Pipe()>:
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	83 ec 0c             	sub    esp,0xc
c0008234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008238:	e8 cd ff ff ff       	call   c000820a <Pipe::~Pipe()>
c000823d:	83 c4 10             	add    esp,0x10
c0008240:	83 ec 08             	sub    esp,0x8
c0008243:	6a 20                	push   0x20
c0008245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008249:	e8 76 26 00 00       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000824e:	83 c4 10             	add    esp,0x10
c0008251:	83 c4 0c             	add    esp,0xc
c0008254:	c3                   	ret    
c0008255:	90                   	nop

c0008256 <Pipe::write(unsigned long long, void*, int*)>:
c0008256:	55                   	push   ebp
c0008257:	57                   	push   edi
c0008258:	56                   	push   esi
c0008259:	53                   	push   ebx
c000825a:	83 ec 1c             	sub    esp,0x1c
c000825d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008261:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008265:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008268:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000826c:	89 04 24             	mov    DWORD PTR [esp],eax
c000826f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008273:	89 d8                	mov    eax,ebx
c0008275:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008278:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000827c:	89 d6                	mov    esi,edx
c000827e:	89 d7                	mov    edi,edx
c0008280:	c1 ff 1f             	sar    edi,0x1f
c0008283:	03 34 24             	add    esi,DWORD PTR [esp]
c0008286:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000828a:	c1 f8 1f             	sar    eax,0x1f
c000828d:	39 f3                	cmp    ebx,esi
c000828f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008297:	19 f8                	sbb    eax,edi
c0008299:	b8 01 00 00 00       	mov    eax,0x1
c000829e:	72 6e                	jb     c000830e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082a3:	01 d0                	add    eax,edx
c00082a5:	99                   	cdq    
c00082a6:	f7 fb                	idiv   ebx
c00082a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ac:	29 d3                	sub    ebx,edx
c00082ae:	89 d7                	mov    edi,edx
c00082b0:	89 de                	mov    esi,ebx
c00082b2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082b5:	c1 fb 1f             	sar    ebx,0x1f
c00082b8:	39 f2                	cmp    edx,esi
c00082ba:	19 d8                	sbb    eax,ebx
c00082bc:	b8 00 00 00 00       	mov    eax,0x0
c00082c1:	72 04                	jb     c00082c7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082c3:	89 d0                	mov    eax,edx
c00082c5:	29 f0                	sub    eax,esi
c00082c7:	89 d3                	mov    ebx,edx
c00082c9:	29 c3                	sub    ebx,eax
c00082cb:	74 0b                	je     c00082d8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082cd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082d0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082d4:	89 d9                	mov    ecx,ebx
c00082d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082d8:	85 c0                	test   eax,eax
c00082da:	74 0d                	je     c00082e9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082dc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082e3:	89 de                	mov    esi,ebx
c00082e5:	89 c1                	mov    ecx,eax
c00082e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082e9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082ec:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082f1:	75 10                	jne    c0008303 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082f3:	83 ec 0c             	sub    esp,0xc
c00082f6:	68 29 fd 01 c0       	push   0xc001fd29
c00082fb:	e8 1f 86 00 00       	call   c001091f <KePanic(char const*)>
c0008300:	83 c4 10             	add    esp,0x10
c0008303:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008307:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000830a:	89 08                	mov    DWORD PTR [eax],ecx
c000830c:	31 c0                	xor    eax,eax
c000830e:	83 c4 1c             	add    esp,0x1c
c0008311:	5b                   	pop    ebx
c0008312:	5e                   	pop    esi
c0008313:	5f                   	pop    edi
c0008314:	5d                   	pop    ebp
c0008315:	c3                   	ret    

c0008316 <Pipe::read(unsigned long long, void*, int*)>:
c0008316:	55                   	push   ebp
c0008317:	57                   	push   edi
c0008318:	56                   	push   esi
c0008319:	53                   	push   ebx
c000831a:	83 ec 1c             	sub    esp,0x1c
c000831d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008321:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008325:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008329:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000832c:	89 c8                	mov    eax,ecx
c000832e:	99                   	cdq    
c000832f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008333:	74 24                	je     c0008359 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008335:	39 f9                	cmp    ecx,edi
c0008337:	89 d1                	mov    ecx,edx
c0008339:	19 f1                	sbb    ecx,esi
c000833b:	73 1c                	jae    c0008359 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000833d:	fa                   	cli    
c000833e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008344:	e8 8b cd 00 00       	call   c00150d4 <schedule()>
c0008349:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000834e:	48                   	dec    eax
c000834f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008354:	75 d3                	jne    c0008329 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008356:	fb                   	sti    
c0008357:	eb d0                	jmp    c0008329 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008359:	39 f8                	cmp    eax,edi
c000835b:	89 d1                	mov    ecx,edx
c000835d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008360:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008364:	19 f1                	sbb    ecx,esi
c0008366:	73 07                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008368:	89 04 24             	mov    DWORD PTR [esp],eax
c000836b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000836f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008372:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008375:	29 f7                	sub    edi,esi
c0008377:	89 f8                	mov    eax,edi
c0008379:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000837d:	99                   	cdq    
c000837e:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008381:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008385:	19 d0                	sbb    eax,edx
c0008387:	73 07                	jae    c0008390 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008389:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008393:	89 ea                	mov    edx,ebp
c0008395:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008399:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000839e:	74 0d                	je     c00083ad <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083a0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083a3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ad:	85 d2                	test   edx,edx
c00083af:	74 11                	je     c00083c2 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083b5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083b8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083bc:	89 d1                	mov    ecx,edx
c00083be:	89 c7                	mov    edi,eax
c00083c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083c5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083c8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083cb:	99                   	cdq    
c00083cc:	89 f7                	mov    edi,esi
c00083ce:	03 04 24             	add    eax,DWORD PTR [esp]
c00083d1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083d5:	c1 ff 1f             	sar    edi,0x1f
c00083d8:	57                   	push   edi
c00083d9:	56                   	push   esi
c00083da:	52                   	push   edx
c00083db:	50                   	push   eax
c00083dc:	e8 8f 63 01 00       	call   c001e770 <__umoddi3>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083e7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ec:	75 10                	jne    c00083fe <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	68 46 fd 01 c0       	push   0xc001fd46
c00083f6:	e8 24 85 00 00       	call   c001091f <KePanic(char const*)>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008402:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008405:	89 10                	mov    DWORD PTR [eax],edx
c0008407:	83 c4 1c             	add    esp,0x1c
c000840a:	31 c0                	xor    eax,eax
c000840c:	5b                   	pop    ebx
c000840d:	5e                   	pop    esi
c000840e:	5f                   	pop    edi
c000840f:	5d                   	pop    ebp
c0008410:	c3                   	ret    
c0008411:	90                   	nop

c0008412 <Pipe::Pipe(int)>:
c0008412:	83 ec 0c             	sub    esp,0xc
c0008415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008419:	83 ec 08             	sub    esp,0x8
c000841c:	6a 00                	push   0x0
c000841e:	50                   	push   eax
c000841f:	e8 aa 0d 00 00       	call   c00091ce <UnixFile::UnixFile(int)>
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	ba 6c fd 01 c0       	mov    edx,0xc001fd6c
c000842c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008430:	89 10                	mov    DWORD PTR [eax],edx
c0008432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000843a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000843d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008441:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008453:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008457:	83 ec 0c             	sub    esp,0xc
c000845a:	50                   	push   eax
c000845b:	e8 4e f6 ff ff       	call   c0007aae <malloc>
c0008460:	83 c4 10             	add    esp,0x10
c0008463:	89 c2                	mov    edx,eax
c0008465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008469:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000846c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008470:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008474:	90                   	nop
c0008475:	83 c4 0c             	add    esp,0xc
c0008478:	c3                   	ret    
c0008479:	90                   	nop

c000847a <VgaText::isAtty()>:
c000847a:	b0 01                	mov    al,0x1
c000847c:	c3                   	ret    
c000847d:	90                   	nop

c000847e <VgaText::~VgaText()>:
c000847e:	83 ec 0c             	sub    esp,0xc
c0008481:	ba b4 fd 01 c0       	mov    edx,0xc001fdb4
c0008486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848a:	89 10                	mov    DWORD PTR [eax],edx
c000848c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008490:	83 ec 0c             	sub    esp,0xc
c0008493:	50                   	push   eax
c0008494:	e8 1b 0f 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008499:	83 c4 10             	add    esp,0x10
c000849c:	90                   	nop
c000849d:	83 c4 0c             	add    esp,0xc
c00084a0:	c3                   	ret    
c00084a1:	90                   	nop

c00084a2 <VgaText::~VgaText()>:
c00084a2:	83 ec 0c             	sub    esp,0xc
c00084a5:	83 ec 0c             	sub    esp,0xc
c00084a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ac:	e8 cd ff ff ff       	call   c000847e <VgaText::~VgaText()>
c00084b1:	83 c4 10             	add    esp,0x10
c00084b4:	83 ec 08             	sub    esp,0x8
c00084b7:	68 84 01 00 00       	push   0x184
c00084bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c0:	e8 ff 23 00 00       	call   c000a8c4 <operator delete(void*, unsigned long)>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	83 c4 0c             	add    esp,0xc
c00084cb:	c3                   	ret    

c00084cc <VgaText::read(unsigned long long, void*, int*)>:
c00084cc:	83 ec 10             	sub    esp,0x10
c00084cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084db:	e8 20 48 00 00       	call   c000cd00 <readKeyboard(VgaText*, char*, unsigned long)>
c00084e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e4:	89 02                	mov    DWORD PTR [edx],eax
c00084e6:	31 c0                	xor    eax,eax
c00084e8:	83 c4 1c             	add    esp,0x1c
c00084eb:	c3                   	ret    

c00084ec <setTerminalScrollLock(bool)>:
c00084ec:	c3                   	ret    

c00084ed <doTerminalCycle()>:
c00084ed:	c3                   	ret    

c00084ee <addToTerminalCycle(VgaText*)>:
c00084ee:	c3                   	ret    

c00084ef <scrollTerminalScrollLock(int)>:
c00084ef:	c3                   	ret    

c00084f0 <VgaText::updateTitle()>:
c00084f0:	c3                   	ret    
c00084f1:	90                   	nop

c00084f2 <VgaText::load()>:
c00084f2:	c3                   	ret    
c00084f3:	90                   	nop

c00084f4 <VgaText::updateCursor()>:
c00084f4:	83 ec 14             	sub    esp,0x14
c00084f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084fb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084fe:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008501:	e8 16 f9 00 00       	call   c0017e1c <HalConsoleCursorUpdate(int, int)>
c0008506:	83 c4 1c             	add    esp,0x1c
c0008509:	c3                   	ret    

c000850a <VgaText::doANSI_SGR(int)>:
c000850a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000850e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008512:	85 d2                	test   edx,edx
c0008514:	75 0b                	jne    c0008521 <VgaText::doANSI_SGR(int)+0x17>
c0008516:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008519:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000851c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000851f:	eb 59                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008521:	83 fa 07             	cmp    edx,0x7
c0008524:	75 0b                	jne    c0008531 <VgaText::doANSI_SGR(int)+0x27>
c0008526:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008529:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000852c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000852f:	eb 49                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008531:	83 fa 1b             	cmp    edx,0x1b
c0008534:	74 e0                	je     c0008516 <VgaText::doANSI_SGR(int)+0xc>
c0008536:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008539:	83 f9 07             	cmp    ecx,0x7
c000853c:	77 09                	ja     c0008547 <VgaText::doANSI_SGR(int)+0x3d>
c000853e:	8b 14 8d 80 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde080]
c0008545:	eb 20                	jmp    c0008567 <VgaText::doANSI_SGR(int)+0x5d>
c0008547:	8d 4a d8             	lea    ecx,[edx-0x28]
c000854a:	83 f9 07             	cmp    ecx,0x7
c000854d:	77 09                	ja     c0008558 <VgaText::doANSI_SGR(int)+0x4e>
c000854f:	8b 14 8d 80 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde080]
c0008556:	eb 22                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008558:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000855b:	83 f9 07             	cmp    ecx,0x7
c000855e:	77 0b                	ja     c000856b <VgaText::doANSI_SGR(int)+0x61>
c0008560:	8b 14 95 38 1e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde1c8]
c0008567:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000856a:	c3                   	ret    
c000856b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000856e:	83 f9 07             	cmp    ecx,0x7
c0008571:	77 0a                	ja     c000857d <VgaText::doANSI_SGR(int)+0x73>
c0008573:	8b 14 95 10 1e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde1f0]
c000857a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000857d:	c3                   	ret    

c000857e <VgaText::setDefaultBgColour(VgaColour)>:
c000857e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008582:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008586:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008589:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000858c:	c3                   	ret    
c000858d:	90                   	nop

c000858e <VgaText::setDefaultFgColour(VgaColour)>:
c000858e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008596:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008599:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000859c:	c3                   	ret    
c000859d:	90                   	nop

c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000859e:	53                   	push   ebx
c000859f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085ab:	51                   	push   ecx
c00085ac:	e8 cd ff ff ff       	call   c000857e <VgaText::setDefaultBgColour(VgaColour)>
c00085b1:	58                   	pop    eax
c00085b2:	5a                   	pop    edx
c00085b3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085bb:	5b                   	pop    ebx
c00085bc:	eb d0                	jmp    c000858e <VgaText::setDefaultFgColour(VgaColour)>

c00085be <VgaText::setTitleTextColour(VgaColour)>:
c00085be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085c9:	c3                   	ret    

c00085ca <VgaText::setTitleColour(VgaColour)>:
c00085ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085d5:	c3                   	ret    

c00085d6 <VgaText::setTitle(char*)>:
c00085d6:	c3                   	ret    
c00085d7:	90                   	nop

c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085e1:	83 e0 0f             	and    eax,0xf
c00085e4:	c1 e2 04             	shl    edx,0x4
c00085e7:	09 d0                	or     eax,edx
c00085e9:	c3                   	ret    

c00085ea <VgaText::scrollScreen()>:
c00085ea:	55                   	push   ebp
c00085eb:	57                   	push   edi
c00085ec:	56                   	push   esi
c00085ed:	be 01 00 00 00       	mov    esi,0x1
c00085f2:	53                   	push   ebx
c00085f3:	83 ec 0c             	sub    esp,0xc
c00085f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00085fa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00085fd:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008603:	31 ff                	xor    edi,edi
c0008605:	01 e9                	add    ecx,ebp
c0008607:	8a 01                	mov    al,BYTE PTR [ecx]
c0008609:	83 fe 18             	cmp    esi,0x18
c000860c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008612:	75 20                	jne    c0008634 <VgaText::scrollScreen()+0x4a>
c0008614:	f7 c7 01 00 00 00    	test   edi,0x1
c000861a:	74 15                	je     c0008631 <VgaText::scrollScreen()+0x47>
c000861c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008620:	50                   	push   eax
c0008621:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008625:	50                   	push   eax
c0008626:	e8 ad ff ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c000862b:	5a                   	pop    edx
c000862c:	5a                   	pop    edx
c000862d:	88 01                	mov    BYTE PTR [ecx],al
c000862f:	eb 03                	jmp    c0008634 <VgaText::scrollScreen()+0x4a>
c0008631:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008634:	47                   	inc    edi
c0008635:	41                   	inc    ecx
c0008636:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000863c:	75 c9                	jne    c0008607 <VgaText::scrollScreen()+0x1d>
c000863e:	46                   	inc    esi
c000863f:	83 fe 19             	cmp    esi,0x19
c0008642:	75 b9                	jne    c00085fd <VgaText::scrollScreen()+0x13>
c0008644:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c000864a:	75 1f                	jne    c000866b <VgaText::scrollScreen()+0x81>
c000864c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008650:	74 05                	je     c0008657 <VgaText::scrollScreen()+0x6d>
c0008652:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008655:	eb 14                	jmp    c000866b <VgaText::scrollScreen()+0x81>
c0008657:	50                   	push   eax
c0008658:	50                   	push   eax
c0008659:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000865d:	50                   	push   eax
c000865e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008662:	50                   	push   eax
c0008663:	e8 48 f6 00 00       	call   c0017cb0 <HalConsoleScroll(int, int)>
c0008668:	83 c4 10             	add    esp,0x10
c000866b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000866f:	83 c4 0c             	add    esp,0xc
c0008672:	5b                   	pop    ebx
c0008673:	5e                   	pop    esi
c0008674:	5f                   	pop    edi
c0008675:	5d                   	pop    ebp
c0008676:	e9 79 fe ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c000867b:	90                   	nop

c000867c <VgaText::combineCharAndColour(char, unsigned char)>:
c000867c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008681:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008686:	c1 e0 08             	shl    eax,0x8
c0008689:	09 d0                	or     eax,edx
c000868b:	c3                   	ret    

c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000868c:	55                   	push   ebp
c000868d:	57                   	push   edi
c000868e:	56                   	push   esi
c000868f:	53                   	push   ebx
c0008690:	83 ec 1c             	sub    esp,0x1c
c0008693:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008697:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000869b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000869f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086a3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086a7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086ab:	0f b6 c3             	movzx  eax,bl
c00086ae:	50                   	push   eax
c00086af:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086b4:	50                   	push   eax
c00086b5:	e8 1e ff ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c00086ba:	5a                   	pop    edx
c00086bb:	0f b6 c0             	movzx  eax,al
c00086be:	59                   	pop    ecx
c00086bf:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086c4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086c8:	50                   	push   eax
c00086c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086cd:	e8 aa ff ff ff       	call   c000867c <VgaText::combineCharAndColour(char, unsigned char)>
c00086d2:	5a                   	pop    edx
c00086d3:	6b d7 50             	imul   edx,edi,0x50
c00086d6:	59                   	pop    ecx
c00086d7:	01 f2                	add    edx,esi
c00086d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086dc:	0f b7 d2             	movzx  edx,dx
c00086df:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086e3:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086e9:	75 28                	jne    c0008713 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086f3:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086f7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00086fb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008703:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008707:	83 c4 1c             	add    esp,0x1c
c000870a:	5b                   	pop    ebx
c000870b:	5e                   	pop    esi
c000870c:	5f                   	pop    edi
c000870d:	5d                   	pop    ebp
c000870e:	e9 a5 f6 00 00       	jmp    c0017db8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008713:	83 c4 1c             	add    esp,0x1c
c0008716:	5b                   	pop    ebx
c0008717:	5e                   	pop    esi
c0008718:	5f                   	pop    edi
c0008719:	5d                   	pop    ebp
c000871a:	c3                   	ret    
c000871b:	90                   	nop

c000871c <VgaText::getCursorX()>:
c000871c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008720:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008723:	c3                   	ret    

c0008724 <VgaText::getCursorY()>:
c0008724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008728:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000872b:	c3                   	ret    

c000872c <VgaText::setCursor(int, int)>:
c000872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008730:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008734:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008737:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000873b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000873e:	e9 b1 fd ff ff       	jmp    c00084f4 <VgaText::updateCursor()>

c0008743 <setActiveTerminal(VgaText*)>:
c0008743:	53                   	push   ebx
c0008744:	83 ec 08             	sub    esp,0x8
c0008747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000874b:	85 db                	test   ebx,ebx
c000874d:	75 11                	jne    c0008760 <setActiveTerminal(VgaText*)+0x1d>
c000874f:	c7 44 24 10 80 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd80
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	e9 bf 81 00 00       	jmp    c001091f <KePanic(char const*)>
c0008760:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008765:	85 c0                	test   eax,eax
c0008767:	74 0c                	je     c0008775 <setActiveTerminal(VgaText*)+0x32>
c0008769:	83 ec 0c             	sub    esp,0xc
c000876c:	50                   	push   eax
c000876d:	e8 82 fd ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008772:	83 c4 10             	add    esp,0x10
c0008775:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c000877b:	50                   	push   eax
c000877c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000877f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008782:	53                   	push   ebx
c0008783:	e8 a4 ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008788:	83 c4 18             	add    esp,0x18
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <VgaText::clearScreen()>:
c000878e:	57                   	push   edi
c000878f:	56                   	push   esi
c0008790:	31 f6                	xor    esi,esi
c0008792:	53                   	push   ebx
c0008793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008797:	52                   	push   edx
c0008798:	6a 00                	push   0x0
c000879a:	6a 00                	push   0x0
c000879c:	53                   	push   ebx
c000879d:	e8 8a ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c00087a2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087a9:	83 c4 10             	add    esp,0x10
c00087ac:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087af:	7e 20                	jle    c00087d1 <VgaText::clearScreen()+0x43>
c00087b1:	31 ff                	xor    edi,edi
c00087b3:	50                   	push   eax
c00087b4:	50                   	push   eax
c00087b5:	56                   	push   esi
c00087b6:	57                   	push   edi
c00087b7:	47                   	inc    edi
c00087b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087be:	6a 20                	push   0x20
c00087c0:	53                   	push   ebx
c00087c1:	e8 c6 fe ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087c6:	83 c4 20             	add    esp,0x20
c00087c9:	83 ff 50             	cmp    edi,0x50
c00087cc:	75 e5                	jne    c00087b3 <VgaText::clearScreen()+0x25>
c00087ce:	46                   	inc    esi
c00087cf:	eb db                	jmp    c00087ac <VgaText::clearScreen()+0x1e>
c00087d1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087d8:	5b                   	pop    ebx
c00087d9:	5e                   	pop    esi
c00087da:	5f                   	pop    edi
c00087db:	c3                   	ret    

c00087dc <VgaText::setCursorX(int)>:
c00087dc:	83 ec 10             	sub    esp,0x10
c00087df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087e3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087ea:	50                   	push   eax
c00087eb:	e8 3c ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c00087f0:	83 c4 1c             	add    esp,0x1c
c00087f3:	c3                   	ret    

c00087f4 <VgaText::setCursorY(int)>:
c00087f4:	83 ec 10             	sub    esp,0x10
c00087f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087ff:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008802:	50                   	push   eax
c0008803:	e8 24 ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008808:	83 c4 1c             	add    esp,0x1c
c000880b:	c3                   	ret    

c000880c <VgaText::incrementCursor(bool)>:
c000880c:	56                   	push   esi
c000880d:	53                   	push   ebx
c000880e:	51                   	push   ecx
c000880f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008813:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008817:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000881a:	40                   	inc    eax
c000881b:	83 f8 50             	cmp    eax,0x50
c000881e:	74 05                	je     c0008825 <VgaText::incrementCursor(bool)+0x19>
c0008820:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008823:	eb 24                	jmp    c0008849 <VgaText::incrementCursor(bool)+0x3d>
c0008825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008828:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000882f:	8d 50 01             	lea    edx,[eax+0x1]
c0008832:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008835:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008838:	75 0f                	jne    c0008849 <VgaText::incrementCursor(bool)+0x3d>
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008840:	53                   	push   ebx
c0008841:	e8 a4 fd ff ff       	call   c00085ea <VgaText::scrollScreen()>
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	89 f0                	mov    eax,esi
c000884b:	84 c0                	test   al,al
c000884d:	74 0c                	je     c000885b <VgaText::incrementCursor(bool)+0x4f>
c000884f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008853:	5a                   	pop    edx
c0008854:	5b                   	pop    ebx
c0008855:	5e                   	pop    esi
c0008856:	e9 99 fc ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c000885b:	58                   	pop    eax
c000885c:	5b                   	pop    ebx
c000885d:	5e                   	pop    esi
c000885e:	c3                   	ret    
c000885f:	90                   	nop

c0008860 <VgaText::decrementCursor(bool)>:
c0008860:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008864:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008868:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000886b:	85 c0                	test   eax,eax
c000886d:	74 04                	je     c0008873 <VgaText::decrementCursor(bool)+0x13>
c000886f:	48                   	dec    eax
c0008870:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008873:	84 c9                	test   cl,cl
c0008875:	74 09                	je     c0008880 <VgaText::decrementCursor(bool)+0x20>
c0008877:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000887b:	e9 74 fc ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c0008880:	c3                   	ret    
c0008881:	90                   	nop

c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008882:	53                   	push   ebx
c0008883:	83 ec 08             	sub    esp,0x8
c0008886:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c000888b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000888f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008893:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008897:	83 f8 07             	cmp    eax,0x7
c000889a:	75 21                	jne    c00088bd <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c000889c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088a4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ac:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088b4:	83 c4 08             	add    esp,0x8
c00088b7:	5b                   	pop    ebx
c00088b8:	e9 8e 2f 00 00       	jmp    c000b84b <Krnl::beep(int, int, bool)>
c00088bd:	83 f8 0d             	cmp    eax,0xd
c00088c0:	75 09                	jne    c00088cb <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c9:	eb 2d                	jmp    c00088f8 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088cb:	83 f8 0a             	cmp    eax,0xa
c00088ce:	75 31                	jne    c0008901 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088d0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088d3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088da:	8d 50 01             	lea    edx,[eax+0x1]
c00088dd:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088e0:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088e3:	75 0f                	jne    c00088f4 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088e5:	83 ec 0c             	sub    esp,0xc
c00088e8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088eb:	53                   	push   ebx
c00088ec:	e8 f9 fc ff ff       	call   c00085ea <VgaText::scrollScreen()>
c00088f1:	83 c4 10             	add    esp,0x10
c00088f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088f8:	83 c4 08             	add    esp,0x8
c00088fb:	5b                   	pop    ebx
c00088fc:	e9 f3 fb ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c0008901:	83 f8 08             	cmp    eax,0x8
c0008904:	75 25                	jne    c000892b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008906:	50                   	push   eax
c0008907:	50                   	push   eax
c0008908:	6a 01                	push   0x1
c000890a:	53                   	push   ebx
c000890b:	e8 50 ff ff ff       	call   c0008860 <VgaText::decrementCursor(bool)>
c0008910:	5a                   	pop    edx
c0008911:	59                   	pop    ecx
c0008912:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008915:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008918:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000891b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000891e:	6a 20                	push   0x20
c0008920:	53                   	push   ebx
c0008921:	e8 66 fd ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008926:	83 c4 28             	add    esp,0x28
c0008929:	5b                   	pop    ebx
c000892a:	c3                   	ret    
c000892b:	83 ec 08             	sub    esp,0x8
c000892e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008931:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008934:	51                   	push   ecx
c0008935:	52                   	push   edx
c0008936:	50                   	push   eax
c0008937:	53                   	push   ebx
c0008938:	e8 4f fd ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008941:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008949:	83 c4 28             	add    esp,0x28
c000894c:	5b                   	pop    ebx
c000894d:	e9 ba fe ff ff       	jmp    c000880c <VgaText::incrementCursor(bool)>

c0008952 <VgaText::putchar(char)>:
c0008952:	57                   	push   edi
c0008953:	56                   	push   esi
c0008954:	53                   	push   ebx
c0008955:	83 ec 10             	sub    esp,0x10
c0008958:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000895c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008960:	89 f8                	mov    eax,edi
c0008962:	0f be c0             	movsx  eax,al
c0008965:	83 f8 5b             	cmp    eax,0x5b
c0008968:	75 18                	jne    c0008982 <VgaText::putchar(char)+0x30>
c000896a:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000896e:	74 20                	je     c0008990 <VgaText::putchar(char)+0x3e>
c0008970:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008976:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000897d:	e9 c1 00 00 00       	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008982:	83 f8 1b             	cmp    eax,0x1b
c0008985:	75 09                	jne    c0008990 <VgaText::putchar(char)+0x3e>
c0008987:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000898b:	e9 b3 00 00 00       	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008990:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008993:	84 c9                	test   cl,cl
c0008995:	0f 84 98 00 00 00    	je     c0008a33 <VgaText::putchar(char)+0xe1>
c000899b:	8d 77 c0             	lea    esi,[edi-0x40]
c000899e:	89 f2                	mov    edx,esi
c00089a0:	80 fa 3e             	cmp    dl,0x3e
c00089a3:	77 78                	ja     c0008a1d <VgaText::putchar(char)+0xcb>
c00089a5:	83 f8 6d             	cmp    eax,0x6d
c00089a8:	75 47                	jne    c00089f1 <VgaText::putchar(char)+0x9f>
c00089aa:	31 f6                	xor    esi,esi
c00089ac:	31 d2                	xor    edx,edx
c00089ae:	31 c0                	xor    eax,eax
c00089b0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089b3:	7e 2d                	jle    c00089e2 <VgaText::putchar(char)+0x90>
c00089b5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089ba:	83 fa 3b             	cmp    edx,0x3b
c00089bd:	75 17                	jne    c00089d6 <VgaText::putchar(char)+0x84>
c00089bf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089c3:	50                   	push   eax
c00089c4:	53                   	push   ebx
c00089c5:	e8 40 fb ff ff       	call   c000850a <VgaText::doANSI_SGR(int)>
c00089ca:	59                   	pop    ecx
c00089cb:	31 d2                	xor    edx,edx
c00089cd:	5f                   	pop    edi
c00089ce:	31 c0                	xor    eax,eax
c00089d0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089d4:	eb 09                	jmp    c00089df <VgaText::putchar(char)+0x8d>
c00089d6:	6b c0 0a             	imul   eax,eax,0xa
c00089d9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089dd:	88 ca                	mov    dl,cl
c00089df:	46                   	inc    esi
c00089e0:	eb ce                	jmp    c00089b0 <VgaText::putchar(char)+0x5e>
c00089e2:	84 d2                	test   dl,dl
c00089e4:	74 2f                	je     c0008a15 <VgaText::putchar(char)+0xc3>
c00089e6:	50                   	push   eax
c00089e7:	53                   	push   ebx
c00089e8:	e8 1d fb ff ff       	call   c000850a <VgaText::doANSI_SGR(int)>
c00089ed:	58                   	pop    eax
c00089ee:	5a                   	pop    edx
c00089ef:	eb 24                	jmp    c0008a15 <VgaText::putchar(char)+0xc3>
c00089f1:	83 f8 4a             	cmp    eax,0x4a
c00089f4:	75 1f                	jne    c0008a15 <VgaText::putchar(char)+0xc3>
c00089f6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00089fa:	75 19                	jne    c0008a15 <VgaText::putchar(char)+0xc3>
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 89 fd ff ff       	call   c000878e <VgaText::clearScreen()>
c0008a05:	83 c4 0c             	add    esp,0xc
c0008a08:	6a 00                	push   0x0
c0008a0a:	6a 00                	push   0x0
c0008a0c:	53                   	push   ebx
c0008a0d:	e8 1a fd ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008a12:	83 c4 10             	add    esp,0x10
c0008a15:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a1b:	eb 26                	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008a1d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a20:	83 f8 0e             	cmp    eax,0xe
c0008a23:	7f 1e                	jg     c0008a43 <VgaText::putchar(char)+0xf1>
c0008a25:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a28:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a2b:	89 f9                	mov    ecx,edi
c0008a2d:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a31:	eb 10                	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008a33:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a36:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a39:	50                   	push   eax
c0008a3a:	53                   	push   ebx
c0008a3b:	e8 42 fe ff ff       	call   c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	5b                   	pop    ebx
c0008a47:	5e                   	pop    esi
c0008a48:	5f                   	pop    edi
c0008a49:	c3                   	ret    

c0008a4a <VgaText::putx(unsigned int)>:
c0008a4a:	57                   	push   edi
c0008a4b:	b9 11 00 00 00       	mov    ecx,0x11
c0008a50:	56                   	push   esi
c0008a51:	be 8e fd 01 c0       	mov    esi,0xc001fd8e
c0008a56:	53                   	push   ebx
c0008a57:	83 ec 20             	sub    esp,0x20
c0008a5a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a5e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a62:	fc                   	cld    
c0008a63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a65:	be 08 00 00 00       	mov    esi,0x8
c0008a6a:	50                   	push   eax
c0008a6b:	50                   	push   eax
c0008a6c:	89 d8                	mov    eax,ebx
c0008a6e:	c1 e3 04             	shl    ebx,0x4
c0008a71:	c1 e8 1c             	shr    eax,0x1c
c0008a74:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a79:	50                   	push   eax
c0008a7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a7e:	e8 cf fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008a83:	83 c4 10             	add    esp,0x10
c0008a86:	4e                   	dec    esi
c0008a87:	75 e1                	jne    c0008a6a <VgaText::putx(unsigned int)+0x20>
c0008a89:	83 c4 20             	add    esp,0x20
c0008a8c:	5b                   	pop    ebx
c0008a8d:	5e                   	pop    esi
c0008a8e:	5f                   	pop    edi
c0008a8f:	c3                   	ret    

c0008a90 <VgaText::puts(char const*)>:
c0008a90:	53                   	push   ebx
c0008a91:	83 ec 08             	sub    esp,0x8
c0008a94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a98:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a9b:	85 c0                	test   eax,eax
c0008a9d:	74 12                	je     c0008ab1 <VgaText::puts(char const*)+0x21>
c0008a9f:	43                   	inc    ebx
c0008aa0:	51                   	push   ecx
c0008aa1:	51                   	push   ecx
c0008aa2:	50                   	push   eax
c0008aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa7:	e8 a6 fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	eb e7                	jmp    c0008a98 <VgaText::puts(char const*)+0x8>
c0008ab1:	83 c4 08             	add    esp,0x8
c0008ab4:	5b                   	pop    ebx
c0008ab5:	c3                   	ret    

c0008ab6 <VgaText::write(unsigned long long, void*, int*)>:
c0008ab6:	55                   	push   ebp
c0008ab7:	57                   	push   edi
c0008ab8:	56                   	push   esi
c0008ab9:	53                   	push   ebx
c0008aba:	83 ec 0c             	sub    esp,0xc
c0008abd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ac5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ac9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad3:	39 eb                	cmp    ebx,ebp
c0008ad5:	74 13                	je     c0008aea <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ad7:	43                   	inc    ebx
c0008ad8:	50                   	push   eax
c0008ad9:	50                   	push   eax
c0008ada:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ade:	50                   	push   eax
c0008adf:	56                   	push   esi
c0008ae0:	e8 6d fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008ae5:	83 c4 10             	add    esp,0x10
c0008ae8:	eb e9                	jmp    c0008ad3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008aea:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008af5:	89 38                	mov    DWORD PTR [eax],edi
c0008af7:	83 c4 0c             	add    esp,0xc
c0008afa:	31 c0                	xor    eax,eax
c0008afc:	5b                   	pop    ebx
c0008afd:	5e                   	pop    esi
c0008afe:	5f                   	pop    edi
c0008aff:	5d                   	pop    ebp
c0008b00:	c3                   	ret    
c0008b01:	90                   	nop

c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b02:	55                   	push   ebp
c0008b03:	57                   	push   edi
c0008b04:	56                   	push   esi
c0008b05:	53                   	push   ebx
c0008b06:	83 ec 0c             	sub    esp,0xc
c0008b09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b12:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b19:	50                   	push   eax
c0008b1a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b1f:	50                   	push   eax
c0008b20:	e8 b3 fa ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b25:	5a                   	pop    edx
c0008b26:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b2a:	59                   	pop    ecx
c0008b2b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b2e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b32:	0f b7 f6             	movzx  esi,si
c0008b35:	0f b6 e8             	movzx  ebp,al
c0008b38:	01 f6                	add    esi,esi
c0008b3a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b3d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b40:	85 c0                	test   eax,eax
c0008b42:	0f 84 ef 00 00 00    	je     c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b48:	83 f8 0d             	cmp    eax,0xd
c0008b4b:	75 0c                	jne    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b4d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b54:	e9 d8 00 00 00       	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b59:	83 f8 0a             	cmp    eax,0xa
c0008b5c:	75 44                	jne    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b61:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b68:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b6b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b6e:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b71:	75 0f                	jne    c0008b82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b79:	53                   	push   ebx
c0008b7a:	e8 6b fa ff ff       	call   c00085ea <VgaText::scrollScreen()>
c0008b7f:	83 c4 10             	add    esp,0x10
c0008b82:	83 ec 0c             	sub    esp,0xc
c0008b85:	53                   	push   ebx
c0008b86:	e8 69 f9 ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008b8b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b8f:	83 c4 10             	add    esp,0x10
c0008b92:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b95:	0f b7 f6             	movzx  esi,si
c0008b98:	01 f6                	add    esi,esi
c0008b9a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b9d:	e9 8f 00 00 00       	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba2:	83 f8 08             	cmp    eax,0x8
c0008ba5:	75 34                	jne    c0008bdb <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008ba7:	51                   	push   ecx
c0008ba8:	51                   	push   ecx
c0008ba9:	6a 01                	push   0x1
c0008bab:	53                   	push   ebx
c0008bac:	e8 af fc ff ff       	call   c0008860 <VgaText::decrementCursor(bool)>
c0008bb1:	5e                   	pop    esi
c0008bb2:	58                   	pop    eax
c0008bb3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bb6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bb9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bbc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bbf:	6a 20                	push   0x20
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 c5 fa ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bc7:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bcb:	83 c4 20             	add    esp,0x20
c0008bce:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bd1:	0f b7 f6             	movzx  esi,si
c0008bd4:	01 f6                	add    esi,esi
c0008bd6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bd9:	eb 56                	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bdb:	52                   	push   edx
c0008bdc:	52                   	push   edx
c0008bdd:	55                   	push   ebp
c0008bde:	50                   	push   eax
c0008bdf:	e8 98 fa ff ff       	call   c000867c <VgaText::combineCharAndColour(char, unsigned char)>
c0008be4:	83 c4 10             	add    esp,0x10
c0008be7:	66 89 06             	mov    WORD PTR [esi],ax
c0008bea:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008bf0:	75 1d                	jne    c0008c0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf2:	83 ec 0c             	sub    esp,0xc
c0008bf5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bf8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bfb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c03:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c06:	50                   	push   eax
c0008c07:	e8 ac f1 00 00       	call   c0017db8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c0c:	83 c4 20             	add    esp,0x20
c0008c0f:	83 c6 02             	add    esi,0x2
c0008c12:	50                   	push   eax
c0008c13:	50                   	push   eax
c0008c14:	6a 00                	push   0x0
c0008c16:	53                   	push   ebx
c0008c17:	e8 f0 fb ff ff       	call   c000880c <VgaText::incrementCursor(bool)>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c23:	75 0c                	jne    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c25:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c29:	0f b7 f6             	movzx  esi,si
c0008c2c:	01 f6                	add    esi,esi
c0008c2e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c31:	47                   	inc    edi
c0008c32:	e9 06 ff ff ff       	jmp    c0008b3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c37:	83 ec 0c             	sub    esp,0xc
c0008c3a:	53                   	push   ebx
c0008c3b:	e8 b4 f8 ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008c40:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c47:	83 c4 1c             	add    esp,0x1c
c0008c4a:	5b                   	pop    ebx
c0008c4b:	5e                   	pop    esi
c0008c4c:	5f                   	pop    edi
c0008c4d:	5d                   	pop    ebp
c0008c4e:	c3                   	ret    
c0008c4f:	90                   	nop

c0008c50 <VgaText::VgaText(char const*)>:
c0008c50:	56                   	push   esi
c0008c51:	53                   	push   ebx
c0008c52:	83 ec 04             	sub    esp,0x4
c0008c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c59:	83 ec 08             	sub    esp,0x8
c0008c5c:	6a 00                	push   0x0
c0008c5e:	50                   	push   eax
c0008c5f:	e8 6a 05 00 00       	call   c00091ce <UnixFile::UnixFile(int)>
c0008c64:	83 c4 10             	add    esp,0x10
c0008c67:	ba b4 fd 01 c0       	mov    edx,0xc001fdb4
c0008c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c70:	89 10                	mov    DWORD PTR [eax],edx
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c81:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c94:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ccf:	83 ec 0c             	sub    esp,0xc
c0008cd2:	6a 01                	push   0x1
c0008cd4:	e8 44 09 00 00       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0008cd9:	83 c4 10             	add    esp,0x10
c0008cdc:	89 c2                	mov    edx,eax
c0008cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ce5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf2:	89 c6                	mov    esi,eax
c0008cf4:	e8 ba f0 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0008cf9:	68 05 0c 00 00       	push   0xc05
c0008cfe:	56                   	push   esi
c0008cff:	50                   	push   eax
c0008d00:	53                   	push   ebx
c0008d01:	e8 fe 0f 00 00       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d06:	83 c4 10             	add    esp,0x10
c0008d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d10:	83 ec 04             	sub    esp,0x4
c0008d13:	68 a0 0f 00 00       	push   0xfa0
c0008d18:	6a 00                	push   0x0
c0008d1a:	50                   	push   eax
c0008d1b:	e8 d0 77 ff ff       	call   c00004f0 <memset>
c0008d20:	83 c4 10             	add    esp,0x10
c0008d23:	83 ec 04             	sub    esp,0x4
c0008d26:	6a 00                	push   0x0
c0008d28:	6a 07                	push   0x7
c0008d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d2e:	e8 6b f8 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d33:	83 c4 10             	add    esp,0x10
c0008d36:	83 ec 04             	sub    esp,0x4
c0008d39:	6a 00                	push   0x0
c0008d3b:	6a 00                	push   0x0
c0008d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d41:	e8 e6 f9 ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	83 ec 0c             	sub    esp,0xc
c0008d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d50:	e8 39 fa ff ff       	call   c000878e <VgaText::clearScreen()>
c0008d55:	83 c4 10             	add    esp,0x10
c0008d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d5c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d64:	05 82 00 00 00       	add    eax,0x82
c0008d69:	83 ec 04             	sub    esp,0x4
c0008d6c:	68 80 00 00 00       	push   0x80
c0008d71:	6a 00                	push   0x0
c0008d73:	50                   	push   eax
c0008d74:	e8 77 77 ff ff       	call   c00004f0 <memset>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 02 01 00 00       	add    eax,0x102
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	90                   	nop
c0008d99:	83 c4 04             	add    esp,0x4
c0008d9c:	5b                   	pop    ebx
c0008d9d:	5e                   	pop    esi
c0008d9e:	c3                   	ret    
c0008d9f:	90                   	nop

c0008da0 <VgaText::receiveKey(unsigned char)>:
c0008da0:	55                   	push   ebp
c0008da1:	57                   	push   edi
c0008da2:	56                   	push   esi
c0008da3:	53                   	push   ebx
c0008da4:	83 ec 2c             	sub    esp,0x2c
c0008da7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008daf:	89 ef                	mov    edi,ebp
c0008db1:	81 e7 ff 00 00 00    	and    edi,0xff
c0008db7:	0f 84 66 01 00 00    	je     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008dbd:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc3:	83 ff 08             	cmp    edi,0x8
c0008dc6:	75 73                	jne    c0008e3b <VgaText::receiveKey(unsigned char)+0x9b>
c0008dc8:	83 ec 0c             	sub    esp,0xc
c0008dcb:	56                   	push   esi
c0008dcc:	e8 9f 77 ff ff       	call   c0000570 <strlen>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	85 c0                	test   eax,eax
c0008dd6:	0f 84 02 01 00 00    	je     c0008ede <VgaText::receiveKey(unsigned char)+0x13e>
c0008ddc:	50                   	push   eax
c0008ddd:	50                   	push   eax
c0008dde:	6a 08                	push   0x8
c0008de0:	53                   	push   ebx
c0008de1:	e8 6c fb ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008de6:	89 34 24             	mov    DWORD PTR [esp],esi
c0008de9:	e8 82 77 ff ff       	call   c0000570 <strlen>
c0008dee:	83 c4 10             	add    esp,0x10
c0008df1:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008df9:	83 fa 0d             	cmp    edx,0xd
c0008dfc:	89 d0                	mov    eax,edx
c0008dfe:	0f 95 c1             	setne  cl
c0008e01:	83 fa 1f             	cmp    edx,0x1f
c0008e04:	0f 9e c2             	setle  dl
c0008e07:	0f b6 d2             	movzx  edx,dl
c0008e0a:	85 ca                	test   edx,ecx
c0008e0c:	74 17                	je     c0008e25 <VgaText::receiveKey(unsigned char)+0x85>
c0008e0e:	83 e8 08             	sub    eax,0x8
c0008e11:	3c 02                	cmp    al,0x2
c0008e13:	76 10                	jbe    c0008e25 <VgaText::receiveKey(unsigned char)+0x85>
c0008e15:	55                   	push   ebp
c0008e16:	55                   	push   ebp
c0008e17:	68 9f fd 01 c0       	push   0xc001fd9f
c0008e1c:	53                   	push   ebx
c0008e1d:	e8 6e fc ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0008e22:	83 c4 10             	add    esp,0x10
c0008e25:	83 ec 0c             	sub    esp,0xc
c0008e28:	56                   	push   esi
c0008e29:	e8 42 77 ff ff       	call   c0000570 <strlen>
c0008e2e:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e36:	e9 a0 00 00 00       	jmp    c0008edb <VgaText::receiveKey(unsigned char)+0x13b>
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e44:	50                   	push   eax
c0008e45:	e8 26 77 ff ff       	call   c0000570 <strlen>
c0008e4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e51:	e8 1a 77 ff ff       	call   c0000570 <strlen>
c0008e56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e5a:	83 c4 10             	add    esp,0x10
c0008e5d:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e61:	3d 80 00 00 00       	cmp    eax,0x80
c0008e66:	0f 87 b7 00 00 00    	ja     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008e6c:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e6f:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e72:	3c 1e                	cmp    al,0x1e
c0008e74:	0f 96 c0             	setbe  al
c0008e77:	80 fa 01             	cmp    dl,0x1
c0008e7a:	0f 97 c2             	seta   dl
c0008e7d:	0f b6 d2             	movzx  edx,dl
c0008e80:	85 c2                	test   edx,eax
c0008e82:	74 2e                	je     c0008eb2 <VgaText::receiveKey(unsigned char)+0x112>
c0008e84:	83 ff 0d             	cmp    edi,0xd
c0008e87:	74 29                	je     c0008eb2 <VgaText::receiveKey(unsigned char)+0x112>
c0008e89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e8c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e8f:	68 a5 fd 01 c0       	push   0xc001fda5
c0008e94:	53                   	push   ebx
c0008e95:	e8 68 fc ff ff       	call   c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e9a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e9d:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ea0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea3:	0f b6 c0             	movzx  eax,al
c0008ea6:	50                   	push   eax
c0008ea7:	53                   	push   ebx
c0008ea8:	e8 d5 f9 ff ff       	call   c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ead:	83 c4 20             	add    esp,0x20
c0008eb0:	eb 11                	jmp    c0008ec3 <VgaText::receiveKey(unsigned char)+0x123>
c0008eb2:	89 e8                	mov    eax,ebp
c0008eb4:	51                   	push   ecx
c0008eb5:	0f be c0             	movsx  eax,al
c0008eb8:	51                   	push   ecx
c0008eb9:	50                   	push   eax
c0008eba:	53                   	push   ebx
c0008ebb:	e8 92 fa ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008ec0:	83 c4 10             	add    esp,0x10
c0008ec3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ece:	52                   	push   edx
c0008ecf:	52                   	push   edx
c0008ed0:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ed4:	50                   	push   eax
c0008ed5:	56                   	push   esi
c0008ed6:	e8 65 79 ff ff       	call   c0000840 <strcat>
c0008edb:	83 c4 10             	add    esp,0x10
c0008ede:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008ee4:	b0 01                	mov    al,0x1
c0008ee6:	83 ff 1c             	cmp    edi,0x1c
c0008ee9:	77 0e                	ja     c0008ef9 <VgaText::receiveKey(unsigned char)+0x159>
c0008eeb:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ef0:	89 f9                	mov    ecx,edi
c0008ef2:	d3 e8                	shr    eax,cl
c0008ef4:	f7 d0                	not    eax
c0008ef6:	83 e0 01             	and    eax,0x1
c0008ef9:	84 c0                	test   al,al
c0008efb:	74 04                	je     c0008f01 <VgaText::receiveKey(unsigned char)+0x161>
c0008efd:	84 d2                	test   dl,dl
c0008eff:	74 22                	je     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008f01:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f07:	50                   	push   eax
c0008f08:	50                   	push   eax
c0008f09:	56                   	push   esi
c0008f0a:	53                   	push   ebx
c0008f0b:	e8 30 79 ff ff       	call   c0000840 <strcat>
c0008f10:	83 c4 0c             	add    esp,0xc
c0008f13:	68 80 00 00 00       	push   0x80
c0008f18:	6a 00                	push   0x0
c0008f1a:	56                   	push   esi
c0008f1b:	e8 d0 75 ff ff       	call   c00004f0 <memset>
c0008f20:	83 c4 10             	add    esp,0x10
c0008f23:	83 c4 2c             	add    esp,0x2c
c0008f26:	5b                   	pop    ebx
c0008f27:	5e                   	pop    esi
c0008f28:	5f                   	pop    edi
c0008f29:	5d                   	pop    ebp
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <VgaText::doUpdate()>:
c0008f2c:	c3                   	ret    

c0008f2d <newTerminal(char*)>:
c0008f2d:	83 ec 28             	sub    esp,0x28
c0008f30:	68 84 01 00 00       	push   0x184
c0008f35:	e8 74 eb ff ff       	call   c0007aae <malloc>
c0008f3a:	5a                   	pop    edx
c0008f3b:	59                   	pop    ecx
c0008f3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f40:	50                   	push   eax
c0008f41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f45:	e8 06 fd ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0008f4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f4e:	83 c4 2c             	add    esp,0x2c
c0008f51:	c3                   	ret    
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::TSS()>:
c0008f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f5f:	90                   	nop
c0008f60:	c3                   	ret    
c0008f61:	90                   	nop
c0008f62:	66 90                	xchg   ax,ax

c0008f64 <TSS::setESP(unsigned long)>:
c0008f64:	55                   	push   ebp
c0008f65:	89 e5                	mov    ebp,esp
c0008f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f70:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f73:	90                   	nop
c0008f74:	5d                   	pop    ebp
c0008f75:	c3                   	ret    
c0008f76:	66 90                	xchg   ax,ax

c0008f78 <TSS::flush()>:
c0008f78:	55                   	push   ebp
c0008f79:	89 e5                	mov    ebp,esp
c0008f7b:	83 ec 10             	sub    esp,0x10
c0008f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f81:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f83:	83 c8 03             	or     eax,0x3
c0008f86:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f8a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f8e:	66 89 d0             	mov    ax,dx
c0008f91:	0f 00 d8             	ltr    ax
c0008f94:	90                   	nop
c0008f95:	c9                   	leave  
c0008f96:	c3                   	ret    
c0008f97:	90                   	nop

c0008f98 <TSS::setup(unsigned long, unsigned long)>:
c0008f98:	55                   	push   ebp
c0008f99:	89 e5                	mov    ebp,esp
c0008f9b:	83 ec 18             	sub    esp,0x18
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	6a 68                	push   0x68
c0008fa3:	e8 06 eb ff ff       	call   c0007aae <malloc>
c0008fa8:	83 c4 10             	add    esp,0x10
c0008fab:	89 c2                	mov    edx,eax
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb9:	83 ec 04             	sub    esp,0x4
c0008fbc:	6a 68                	push   0x68
c0008fbe:	6a 00                	push   0x0
c0008fc0:	50                   	push   eax
c0008fc1:	e8 2a 75 ff ff       	call   c00004f0 <memset>
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000903e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009047:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000904a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000904d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009053:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000905a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009060:	0f 20 da             	mov    edx,cr3
c0009063:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009066:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009069:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000906c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000906f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	50                   	push   eax
c0009076:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009079:	50                   	push   eax
c000907a:	e8 9b e2 ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000907f:	83 c4 10             	add    esp,0x10
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	6a 68                	push   0x68
c0009087:	8d 45 ec             	lea    eax,[ebp-0x14]
c000908a:	50                   	push   eax
c000908b:	e8 a6 e2 ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009097:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000909a:	83 e0 0f             	and    eax,0xf
c000909d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090a3:	83 c8 40             	or     eax,0x40
c00090a6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b4:	05 78 01 00 00       	add    eax,0x178
c00090b9:	83 ec 04             	sub    esp,0x4
c00090bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090bf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090c2:	50                   	push   eax
c00090c3:	e8 a2 e2 ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	89 c2                	mov    edx,eax
c00090cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d0:	89 10                	mov    DWORD PTR [eax],edx
c00090d2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090dd:	05 78 01 00 00       	add    eax,0x178
c00090e2:	83 ec 0c             	sub    esp,0xc
c00090e5:	50                   	push   eax
c00090e6:	e8 a9 e2 ff ff       	call   c0007394 <GDT::flush()>
c00090eb:	83 c4 10             	add    esp,0x10
c00090ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090f3:	c9                   	leave  
c00090f4:	c3                   	ret    
c00090f5:	90                   	nop

c00090f6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009101:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009106:	75 08                	jne    c0009110 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009108:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000910e:	eb 38                	jmp    c0009148 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009110:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009115:	75 17                	jne    c000912e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000911c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000911f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009125:	8b 10                	mov    edx,DWORD PTR [eax]
c0009127:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000912b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000912e:	89 c1                	mov    ecx,eax
c0009130:	83 e1 fd             	and    ecx,0xfffffffd
c0009133:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009139:	74 cd                	je     c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000913b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009140:	83 e0 ef             	and    eax,0xffffffef
c0009143:	83 f8 08             	cmp    eax,0x8
c0009146:	76 c0                	jbe    c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009148:	31 c0                	xor    eax,eax
c000914a:	c3                   	ret    
c000914b:	90                   	nop

c000914c <ReservedFilename::isAtty()>:
c000914c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009150:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009153:	31 c0                	xor    eax,eax
c0009155:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000915b:	74 09                	je     c0009166 <ReservedFilename::isAtty()+0x1a>
c000915d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009163:	0f 94 c0             	sete   al
c0009166:	c3                   	ret    
c0009167:	90                   	nop

c0009168 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000916c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009173:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009177:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000917c:	75 08                	jne    c0009186 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000917e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009184:	eb 3d                	jmp    c00091c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009186:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000918b:	75 17                	jne    c00091a4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000918d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009192:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009195:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000919b:	8b 10                	mov    edx,DWORD PTR [eax]
c000919d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091a1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091a9:	75 04                	jne    c00091af <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091ab:	89 0a                	mov    DWORD PTR [edx],ecx
c00091ad:	eb 14                	jmp    c00091c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091af:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091b4:	74 c8                	je     c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091bb:	83 e0 ef             	and    eax,0xffffffef
c00091be:	83 f8 08             	cmp    eax,0x8
c00091c1:	76 bb                	jbe    c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091c3:	31 c0                	xor    eax,eax
c00091c5:	c3                   	ret    

c00091c6 <UnixFile::getFileDescriptor()>:
c00091c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091cd:	c3                   	ret    

c00091ce <UnixFile::UnixFile(int)>:
c00091ce:	53                   	push   ebx
c00091cf:	83 ec 28             	sub    esp,0x28
c00091d2:	ba 7c fe 01 c0       	mov    edx,0xc001fe7c
c00091d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091db:	89 10                	mov    DWORD PTR [eax],edx
c00091dd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091e5:	0f 8f 90 01 00 00    	jg     c000937b <UnixFile::UnixFile(int)+0x1ad>
c00091eb:	a1 c0 1f 02 c0       	mov    eax,ds:0xc0021fc0
c00091f0:	8d 50 01             	lea    edx,[eax+0x1]
c00091f3:	89 15 c0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc0,edx
c00091f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009200:	83 ec 08             	sub    esp,0x8
c0009203:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009207:	68 98 4f 02 c0       	push   0xc0024f98
c000920c:	e8 47 57 01 00       	call   c001e958 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009219:	83 f0 01             	xor    eax,0x1
c000921c:	0f b6 c0             	movzx  eax,al
c000921f:	85 c0                	test   eax,eax
c0009221:	0f 84 55 01 00 00    	je     c000937c <UnixFile::UnixFile(int)+0x1ae>
c0009227:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c000922e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009236:	83 ec 0c             	sub    esp,0xc
c0009239:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000923d:	e8 6c e8 ff ff       	call   c0007aae <malloc>
c0009242:	83 c4 10             	add    esp,0x10
c0009245:	89 c3                	mov    ebx,eax
c0009247:	83 ec 08             	sub    esp,0x8
c000924a:	68 03 ff ff 0f       	push   0xfffff03
c000924f:	53                   	push   ebx
c0009250:	e8 2d 01 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009255:	83 c4 10             	add    esp,0x10
c0009258:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c000925e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000926d:	e8 3c e8 ff ff       	call   c0007aae <malloc>
c0009272:	83 c4 10             	add    esp,0x10
c0009275:	89 c3                	mov    ebx,eax
c0009277:	83 ec 08             	sub    esp,0x8
c000927a:	68 01 ff ff 0f       	push   0xfffff01
c000927f:	53                   	push   ebx
c0009280:	e8 fd 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000928e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009296:	83 ec 0c             	sub    esp,0xc
c0009299:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000929d:	e8 0c e8 ff ff       	call   c0007aae <malloc>
c00092a2:	83 c4 10             	add    esp,0x10
c00092a5:	89 c3                	mov    ebx,eax
c00092a7:	83 ec 08             	sub    esp,0x8
c00092aa:	68 00 ff ff 0f       	push   0xfffff00
c00092af:	53                   	push   ebx
c00092b0:	e8 cd 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092be:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092c6:	83 ec 0c             	sub    esp,0xc
c00092c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092cd:	e8 dc e7 ff ff       	call   c0007aae <malloc>
c00092d2:	83 c4 10             	add    esp,0x10
c00092d5:	89 c3                	mov    ebx,eax
c00092d7:	83 ec 08             	sub    esp,0x8
c00092da:	68 02 ff ff 0f       	push   0xfffff02
c00092df:	53                   	push   ebx
c00092e0:	e8 9d 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092e5:	83 c4 10             	add    esp,0x10
c00092e8:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092ee:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092f6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092fb:	7f 7f                	jg     c000937c <UnixFile::UnixFile(int)+0x1ae>
c00092fd:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009305:	83 ec 0c             	sub    esp,0xc
c0009308:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000930c:	e8 9d e7 ff ff       	call   c0007aae <malloc>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	89 c3                	mov    ebx,eax
c0009316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000931a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000931f:	83 ec 08             	sub    esp,0x8
c0009322:	50                   	push   eax
c0009323:	53                   	push   ebx
c0009324:	e8 59 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009329:	83 c4 10             	add    esp,0x10
c000932c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009330:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009337:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000933f:	83 ec 0c             	sub    esp,0xc
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 63 e7 ff ff       	call   c0007aae <malloc>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	89 c3                	mov    ebx,eax
c0009350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009354:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009359:	83 ec 08             	sub    esp,0x8
c000935c:	50                   	push   eax
c000935d:	53                   	push   ebx
c000935e:	e8 1f 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009363:	83 c4 10             	add    esp,0x10
c0009366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000936a:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009371:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009376:	e9 7b ff ff ff       	jmp    c00092f6 <UnixFile::UnixFile(int)+0x128>
c000937b:	90                   	nop
c000937c:	83 c4 28             	add    esp,0x28
c000937f:	5b                   	pop    ebx
c0009380:	c3                   	ret    
c0009381:	90                   	nop

c0009382 <ReservedFilename::ReservedFilename(int)>:
c0009382:	83 ec 0c             	sub    esp,0xc
c0009385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009389:	83 ec 08             	sub    esp,0x8
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	50                   	push   eax
c0009391:	e8 38 fe ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c0009396:	83 c4 10             	add    esp,0x10
c0009399:	ba 98 fe 01 c0       	mov    edx,0xc001fe98
c000939e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a2:	89 10                	mov    DWORD PTR [eax],edx
c00093a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093af:	90                   	nop
c00093b0:	83 c4 0c             	add    esp,0xc
c00093b3:	c3                   	ret    

c00093b4 <UnixFile::~UnixFile()>:
c00093b4:	83 ec 1c             	sub    esp,0x1c
c00093b7:	ba 7c fe 01 c0       	mov    edx,0xc001fe7c
c00093bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c0:	89 10                	mov    DWORD PTR [eax],edx
c00093c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093ce:	7f 76                	jg     c0009446 <UnixFile::~UnixFile()+0x92>
c00093d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093d8:	83 ec 0c             	sub    esp,0xc
c00093db:	68 98 4f 02 c0       	push   0xc0024f98
c00093e0:	e8 47 56 01 00       	call   c001ea2c <LinkedList<UnixFile>::getFirstElement()>
c00093e5:	83 c4 10             	add    esp,0x10
c00093e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	68 98 4f 02 c0       	push   0xc0024f98
c00093f4:	e8 3b 56 01 00       	call   c001ea34 <LinkedList<UnixFile>::removeFirst()>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009400:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009404:	74 43                	je     c0009449 <UnixFile::~UnixFile()+0x95>
c0009406:	83 ec 08             	sub    esp,0x8
c0009409:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000940d:	68 98 4f 02 c0       	push   0xc0024f98
c0009412:	e8 41 55 01 00       	call   c001e958 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009417:	83 c4 10             	add    esp,0x10
c000941a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000941e:	8d 50 01             	lea    edx,[eax+0x1]
c0009421:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009425:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000942a:	0f 94 c0             	sete   al
c000942d:	0f b6 c0             	movzx  eax,al
c0009430:	85 c0                	test   eax,eax
c0009432:	74 a4                	je     c00093d8 <UnixFile::~UnixFile()+0x24>
c0009434:	83 ec 0c             	sub    esp,0xc
c0009437:	68 54 fe 01 c0       	push   0xc001fe54
c000943c:	e8 de 74 00 00       	call   c001091f <KePanic(char const*)>
c0009441:	83 c4 10             	add    esp,0x10
c0009444:	eb 92                	jmp    c00093d8 <UnixFile::~UnixFile()+0x24>
c0009446:	90                   	nop
c0009447:	eb 01                	jmp    c000944a <UnixFile::~UnixFile()+0x96>
c0009449:	90                   	nop
c000944a:	90                   	nop
c000944b:	83 c4 1c             	add    esp,0x1c
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <UnixFile::~UnixFile()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	83 ec 0c             	sub    esp,0xc
c0009456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945a:	e8 55 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	83 ec 08             	sub    esp,0x8
c0009465:	6a 0c                	push   0xc
c0009467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000946b:	e8 54 14 00 00       	call   c000a8c4 <operator delete(void*, unsigned long)>
c0009470:	83 c4 10             	add    esp,0x10
c0009473:	83 c4 0c             	add    esp,0xc
c0009476:	c3                   	ret    
c0009477:	90                   	nop

c0009478 <ReservedFilename::~ReservedFilename()>:
c0009478:	83 ec 0c             	sub    esp,0xc
c000947b:	ba 98 fe 01 c0       	mov    edx,0xc001fe98
c0009480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009484:	89 10                	mov    DWORD PTR [eax],edx
c0009486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	50                   	push   eax
c000948e:	e8 21 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	90                   	nop
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    
c000949b:	90                   	nop

c000949c <ReservedFilename::~ReservedFilename()>:
c000949c:	83 ec 0c             	sub    esp,0xc
c000949f:	83 ec 0c             	sub    esp,0xc
c00094a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a6:	e8 cd ff ff ff       	call   c0009478 <ReservedFilename::~ReservedFilename()>
c00094ab:	83 c4 10             	add    esp,0x10
c00094ae:	83 ec 08             	sub    esp,0x8
c00094b1:	6a 0c                	push   0xc
c00094b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094b7:	e8 08 14 00 00       	call   c000a8c4 <operator delete(void*, unsigned long)>
c00094bc:	83 c4 10             	add    esp,0x10
c00094bf:	83 c4 0c             	add    esp,0xc
c00094c2:	c3                   	ret    

c00094c3 <getFromFileDescriptor(int)>:
c00094c3:	53                   	push   ebx
c00094c4:	83 ec 08             	sub    esp,0x8
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094d1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094d7:	7f 2c                	jg     c0009505 <getFromFileDescriptor(int)+0x42>
c00094d9:	83 ec 0c             	sub    esp,0xc
c00094dc:	68 98 4f 02 c0       	push   0xc0024f98
c00094e1:	e8 46 55 01 00       	call   c001ea2c <LinkedList<UnixFile>::getFirstElement()>
c00094e6:	83 c4 10             	add    esp,0x10
c00094e9:	85 c0                	test   eax,eax
c00094eb:	75 04                	jne    c00094f1 <getFromFileDescriptor(int)+0x2e>
c00094ed:	31 c0                	xor    eax,eax
c00094ef:	eb 6e                	jmp    c000955f <getFromFileDescriptor(int)+0x9c>
c00094f1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094f4:	74 69                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c00094f6:	52                   	push   edx
c00094f7:	52                   	push   edx
c00094f8:	50                   	push   eax
c00094f9:	68 98 4f 02 c0       	push   0xc0024f98
c00094fe:	e8 d3 55 01 00       	call   c001ead6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009503:	eb e1                	jmp    c00094e6 <getFromFileDescriptor(int)+0x23>
c0009505:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c000950a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009510:	74 4d                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c0009512:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009517:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000951d:	74 40                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c000951f:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009524:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000952a:	74 33                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c000952c:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009531:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009537:	74 26                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c0009539:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000953f:	83 f8 08             	cmp    eax,0x8
c0009542:	77 09                	ja     c000954d <getFromFileDescriptor(int)+0x8a>
c0009544:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000954b:	eb 12                	jmp    c000955f <getFromFileDescriptor(int)+0x9c>
c000954d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009553:	83 fb 08             	cmp    ebx,0x8
c0009556:	77 95                	ja     c00094ed <getFromFileDescriptor(int)+0x2a>
c0009558:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000955f:	83 c4 08             	add    esp,0x8
c0009562:	5b                   	pop    ebx
c0009563:	c3                   	ret    

c0009564 <__static_initialization_and_destruction_0(int, int)>:
c0009564:	83 ec 0c             	sub    esp,0xc
c0009567:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000956c:	75 34                	jne    c00095a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000956e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009576:	75 2a                	jne    c00095a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009578:	83 ec 0c             	sub    esp,0xc
c000957b:	68 98 4f 02 c0       	push   0xc0024f98
c0009580:	e8 91 53 01 00       	call   c001e916 <LinkedList<UnixFile>::LinkedList()>
c0009585:	83 c4 10             	add    esp,0x10
c0009588:	83 ec 04             	sub    esp,0x4
c000958b:	68 44 1f 02 c0       	push   0xc0021f44
c0009590:	68 98 4f 02 c0       	push   0xc0024f98
c0009595:	68 14 e9 01 c0       	push   0xc001e914
c000959a:	e8 d5 12 00 00       	call   c000a874 <__cxa_atexit>
c000959f:	83 c4 10             	add    esp,0x10
c00095a2:	90                   	nop
c00095a3:	83 c4 0c             	add    esp,0xc
c00095a6:	c3                   	ret    

c00095a7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095a7:	83 ec 0c             	sub    esp,0xc
c00095aa:	83 ec 08             	sub    esp,0x8
c00095ad:	68 ff ff 00 00       	push   0xffff
c00095b2:	6a 01                	push   0x1
c00095b4:	e8 ab ff ff ff       	call   c0009564 <__static_initialization_and_destruction_0(int, int)>
c00095b9:	83 c4 10             	add    esp,0x10
c00095bc:	83 c4 0c             	add    esp,0xc
c00095bf:	c3                   	ret    

c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095c0:	53                   	push   ebx
c00095c1:	8b 15 c8 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fc8
c00095c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095cf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095d5:	89 d8                	mov    eax,ebx
c00095d7:	d1 e8                	shr    eax,1
c00095d9:	01 d0                	add    eax,edx
c00095db:	80 e3 01             	and    bl,0x1
c00095de:	8a 10                	mov    dl,BYTE PTR [eax]
c00095e0:	75 09                	jne    c00095eb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095e2:	83 e2 f0             	and    edx,0xfffffff0
c00095e5:	09 ca                	or     edx,ecx
c00095e7:	88 10                	mov    BYTE PTR [eax],dl
c00095e9:	5b                   	pop    ebx
c00095ea:	c3                   	ret    
c00095eb:	83 e2 0f             	and    edx,0xf
c00095ee:	0f b6 c9             	movzx  ecx,cl
c00095f1:	c1 e1 04             	shl    ecx,0x4
c00095f4:	09 ca                	or     edx,ecx
c00095f6:	88 10                	mov    BYTE PTR [eax],dl
c00095f8:	5b                   	pop    ebx
c00095f9:	c3                   	ret    

c00095fa <Virt::getPageState(unsigned long)>:
c00095fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fe:	8b 0d c8 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fc8
c0009604:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000960a:	89 d0                	mov    eax,edx
c000960c:	d1 e8                	shr    eax,1
c000960e:	80 e2 01             	and    dl,0x1
c0009611:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009614:	74 03                	je     c0009619 <Virt::getPageState(unsigned long)+0x1f>
c0009616:	c1 e8 04             	shr    eax,0x4
c0009619:	83 e0 0f             	and    eax,0xf
c000961c:	c3                   	ret    

c000961d <Virt::allocateKernelVirtualPages(int)>:
c000961d:	55                   	push   ebp
c000961e:	31 ed                	xor    ebp,ebp
c0009620:	57                   	push   edi
c0009621:	31 ff                	xor    edi,edi
c0009623:	56                   	push   esi
c0009624:	53                   	push   ebx
c0009625:	31 db                	xor    ebx,ebx
c0009627:	83 ec 0c             	sub    esp,0xc
c000962a:	8b 35 c4 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fc4
c0009630:	56                   	push   esi
c0009631:	e8 c4 ff ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009636:	5a                   	pop    edx
c0009637:	84 c0                	test   al,al
c0009639:	75 41                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000963b:	85 db                	test   ebx,ebx
c000963d:	75 02                	jne    c0009641 <Virt::allocateKernelVirtualPages(int)+0x24>
c000963f:	89 f5                	mov    ebp,esi
c0009641:	83 c3 01             	add    ebx,0x1
c0009644:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009648:	74 5f                	je     c00096a9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000964a:	83 c6 01             	add    esi,0x1
c000964d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009653:	76 34                	jbe    c0009689 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009655:	c7 05 c4 1f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021fc4,0xc8000
c000965f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009665:	75 2a                	jne    c0009691 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009667:	be 00 80 0c 00       	mov    esi,0xc8000
c000966c:	bf 01 00 00 00       	mov    edi,0x1
c0009671:	56                   	push   esi
c0009672:	e8 83 ff ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009677:	5a                   	pop    edx
c0009678:	84 c0                	test   al,al
c000967a:	74 bf                	je     c000963b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000967c:	31 db                	xor    ebx,ebx
c000967e:	83 c6 01             	add    esi,0x1
c0009681:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009687:	77 cc                	ja     c0009655 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009689:	89 35 c4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc4,esi
c000968f:	eb 9f                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009691:	83 ec 0c             	sub    esp,0xc
c0009694:	68 ac fe 01 c0       	push   0xc001feac
c0009699:	e8 81 72 00 00       	call   c001091f <KePanic(char const*)>
c000969e:	8b 35 c4 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fc4
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	eb 87                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096a9:	89 2d c4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc4,ebp
c00096af:	83 fb 01             	cmp    ebx,0x1
c00096b2:	74 6f                	je     c0009723 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b8:	85 c9                	test   ecx,ecx
c00096ba:	74 49                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096c0:	89 e8                	mov    eax,ebp
c00096c2:	31 db                	xor    ebx,ebx
c00096c4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096c7:	eb 18                	jmp    c00096e1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096c9:	6a 01                	push   0x1
c00096cb:	83 c3 01             	add    ebx,0x1
c00096ce:	50                   	push   eax
c00096cf:	e8 ec fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d4:	58                   	pop    eax
c00096d5:	5a                   	pop    edx
c00096d6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096da:	74 29                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096dc:	a1 c4 1f 02 c0       	mov    eax,ds:0xc0021fc4
c00096e1:	8d 50 01             	lea    edx,[eax+0x1]
c00096e4:	85 db                	test   ebx,ebx
c00096e6:	89 15 c4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc4,edx
c00096ec:	74 24                	je     c0009712 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096ee:	39 df                	cmp    edi,ebx
c00096f0:	75 d7                	jne    c00096c9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096f2:	6a 03                	push   0x3
c00096f4:	83 c3 01             	add    ebx,0x1
c00096f7:	50                   	push   eax
c00096f8:	e8 c3 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fd:	59                   	pop    ecx
c00096fe:	5e                   	pop    esi
c00096ff:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009703:	75 d7                	jne    c00096dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009705:	83 c4 0c             	add    esp,0xc
c0009708:	89 e8                	mov    eax,ebp
c000970a:	5b                   	pop    ebx
c000970b:	c1 e0 0c             	shl    eax,0xc
c000970e:	5e                   	pop    esi
c000970f:	5f                   	pop    edi
c0009710:	5d                   	pop    ebp
c0009711:	c3                   	ret    
c0009712:	6a 02                	push   0x2
c0009714:	bb 01 00 00 00       	mov    ebx,0x1
c0009719:	50                   	push   eax
c000971a:	e8 a1 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971f:	58                   	pop    eax
c0009720:	5a                   	pop    edx
c0009721:	eb b9                	jmp    c00096dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009723:	6a 04                	push   0x4
c0009725:	8d 45 01             	lea    eax,[ebp+0x1]
c0009728:	55                   	push   ebp
c0009729:	a3 c4 1f 02 c0       	mov    ds:0xc0021fc4,eax
c000972e:	e8 8d fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009733:	5b                   	pop    ebx
c0009734:	89 e8                	mov    eax,ebp
c0009736:	5e                   	pop    esi
c0009737:	c1 e0 0c             	shl    eax,0xc
c000973a:	83 c4 0c             	add    esp,0xc
c000973d:	5b                   	pop    ebx
c000973e:	5e                   	pop    esi
c000973f:	5f                   	pop    edi
c0009740:	5d                   	pop    ebp
c0009741:	c3                   	ret    

c0009742 <Virt::freeSwapfilePage(unsigned long)>:
c0009742:	53                   	push   ebx
c0009743:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009749:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000974d:	b8 01 00 00 00       	mov    eax,0x1
c0009752:	89 cb                	mov    ebx,ecx
c0009754:	d3 e0                	shl    eax,cl
c0009756:	c1 eb 05             	shr    ebx,0x5
c0009759:	f7 d0                	not    eax
c000975b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000975e:	21 c1                	and    ecx,eax
c0009760:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009763:	5b                   	pop    ebx
c0009764:	c3                   	ret    

c0009765 <Virt::swapIDToSector(unsigned long)>:
c0009765:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009769:	8b 15 cc 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fcc
c000976f:	8b 0d d4 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fd4
c0009775:	0f af c2             	imul   eax,edx
c0009778:	01 c8                	add    eax,ecx
c000977a:	c3                   	ret    

c000977b <Virt::allocateSwapfilePage()>:
c000977b:	55                   	push   ebp
c000977c:	31 d2                	xor    edx,edx
c000977e:	57                   	push   edi
c000977f:	56                   	push   esi
c0009780:	53                   	push   ebx
c0009781:	83 ec 0c             	sub    esp,0xc
c0009784:	8b 0d cc 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fcc
c000978a:	a1 d0 1f 02 c0       	mov    eax,ds:0xc0021fd0
c000978f:	f7 f1                	div    ecx
c0009791:	39 0d d0 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fd0,ecx
c0009797:	72 2f                	jb     c00097c8 <Virt::allocateSwapfilePage()+0x4d>
c0009799:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000979f:	8b 16                	mov    edx,DWORD PTR [esi]
c00097a1:	f6 c2 01             	test   dl,0x1
c00097a4:	74 3e                	je     c00097e4 <Virt::allocateSwapfilePage()+0x69>
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	bf 01 00 00 00       	mov    edi,0x1
c00097ad:	eb 12                	jmp    c00097c1 <Virt::allocateSwapfilePage()+0x46>
c00097af:	89 fd                	mov    ebp,edi
c00097b1:	89 ca                	mov    edx,ecx
c00097b3:	d3 e5                	shl    ebp,cl
c00097b5:	c1 ea 05             	shr    edx,0x5
c00097b8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097bd:	85 ea                	test   edx,ebp
c00097bf:	74 2c                	je     c00097ed <Virt::allocateSwapfilePage()+0x72>
c00097c1:	83 c1 01             	add    ecx,0x1
c00097c4:	39 c8                	cmp    eax,ecx
c00097c6:	77 e7                	ja     c00097af <Virt::allocateSwapfilePage()+0x34>
c00097c8:	83 ec 0c             	sub    esp,0xc
c00097cb:	68 44 00 02 c0       	push   0xc0020044
c00097d0:	e8 4a 71 00 00       	call   c001091f <KePanic(char const*)>
c00097d5:	83 c4 10             	add    esp,0x10
c00097d8:	31 c9                	xor    ecx,ecx
c00097da:	83 c4 0c             	add    esp,0xc
c00097dd:	89 c8                	mov    eax,ecx
c00097df:	5b                   	pop    ebx
c00097e0:	5e                   	pop    esi
c00097e1:	5f                   	pop    edi
c00097e2:	5d                   	pop    ebp
c00097e3:	c3                   	ret    
c00097e4:	89 f3                	mov    ebx,esi
c00097e6:	bd 01 00 00 00       	mov    ebp,0x1
c00097eb:	31 c9                	xor    ecx,ecx
c00097ed:	09 ea                	or     edx,ebp
c00097ef:	89 c8                	mov    eax,ecx
c00097f1:	89 13                	mov    DWORD PTR [ebx],edx
c00097f3:	83 c4 0c             	add    esp,0xc
c00097f6:	5b                   	pop    ebx
c00097f7:	5e                   	pop    esi
c00097f8:	5f                   	pop    edi
c00097f9:	5d                   	pop    ebp
c00097fa:	c3                   	ret    

c00097fb <Virt::virtualMemorySetup()>:
c00097fb:	53                   	push   ebx
c00097fc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009801:	6a 0f                	push   0xf
c0009803:	53                   	push   ebx
c0009804:	83 c3 01             	add    ebx,0x1
c0009807:	e8 b4 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980c:	58                   	pop    eax
c000980d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009813:	5a                   	pop    edx
c0009814:	75 eb                	jne    c0009801 <Virt::virtualMemorySetup()+0x6>
c0009816:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000981b:	6a 00                	push   0x0
c000981d:	53                   	push   ebx
c000981e:	83 c3 01             	add    ebx,0x1
c0009821:	e8 9a fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009826:	59                   	pop    ecx
c0009827:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000982d:	58                   	pop    eax
c000982e:	75 eb                	jne    c000981b <Virt::virtualMemorySetup()+0x20>
c0009830:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009835:	6a 0f                	push   0xf
c0009837:	53                   	push   ebx
c0009838:	83 c3 01             	add    ebx,0x1
c000983b:	e8 80 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009840:	58                   	pop    eax
c0009841:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009847:	5a                   	pop    edx
c0009848:	75 eb                	jne    c0009835 <Virt::virtualMemorySetup()+0x3a>
c000984a:	5b                   	pop    ebx
c000984b:	c3                   	ret    

c000984c <Virt::setupPageSwapping(int)>:
c000984c:	53                   	push   ebx
c000984d:	83 ec 0c             	sub    esp,0xc
c0009850:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009854:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009859:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000985f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009861:	53                   	push   ebx
c0009862:	c1 e3 0b             	shl    ebx,0xb
c0009865:	68 5b 00 02 c0       	push   0xc002005b
c000986a:	50                   	push   eax
c000986b:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000986e:	89 1d d0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fd0,ebx
c0009874:	c6 05 d8 1f 02 c0 43 	mov    BYTE PTR ds:0xc0021fd8,0x43
c000987b:	c1 eb 08             	shr    ebx,0x8
c000987e:	a3 d4 1f 02 c0       	mov    ds:0xc0021fd4,eax
c0009883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009886:	c7 05 cc 1f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021fcc,0x8
c0009890:	e8 19 e2 ff ff       	call   c0007aae <malloc>
c0009895:	83 c4 0c             	add    esp,0xc
c0009898:	89 c1                	mov    ecx,eax
c000989a:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000989f:	31 d2                	xor    edx,edx
c00098a1:	a1 d0 1f 02 c0       	mov    eax,ds:0xc0021fd0
c00098a6:	f7 35 cc 1f 02 c0    	div    DWORD PTR ds:0xc0021fcc
c00098ac:	c1 e8 05             	shr    eax,0x5
c00098af:	50                   	push   eax
c00098b0:	6a 00                	push   0x0
c00098b2:	51                   	push   ecx
c00098b3:	e8 38 6c ff ff       	call   c00004f0 <memset>
c00098b8:	83 c4 18             	add    esp,0x18
c00098bb:	5b                   	pop    ebx
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <VAS::VAS(VAS*)>:
c00098be:	83 ec 0c             	sub    esp,0xc
c00098c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	68 cc fe 01 c0       	push   0xc001fecc
c00098df:	e8 3b 70 00 00       	call   c001091f <KePanic(char const*)>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	90                   	nop
c00098e8:	83 c4 0c             	add    esp,0xc
c00098eb:	c3                   	ret    

c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098f5:	89 c2                	mov    edx,eax
c00098f7:	c1 e8 0a             	shr    eax,0xa
c00098fa:	c1 ea 16             	shr    edx,0x16
c00098fd:	83 f9 01             	cmp    ecx,0x1
c0009900:	19 c9                	sbb    ecx,ecx
c0009902:	c1 e2 0c             	shl    edx,0xc
c0009905:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000990b:	25 fc 0f 00 00       	and    eax,0xffc
c0009910:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009917:	01 d0                	add    eax,edx
c0009919:	c3                   	ret    

c000991a <VAS::getPageTableEntry(unsigned long)>:
c000991a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000991e:	89 ca                	mov    edx,ecx
c0009920:	c1 e9 0a             	shr    ecx,0xa
c0009923:	c1 ea 16             	shr    edx,0x16
c0009926:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000992c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009932:	c1 e0 0c             	shl    eax,0xc
c0009935:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009938:	c3                   	ret    

c0009939 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009939:	55                   	push   ebp
c000993a:	57                   	push   edi
c000993b:	bf 01 00 00 00       	mov    edi,0x1
c0009940:	56                   	push   esi
c0009941:	53                   	push   ebx
c0009942:	83 ec 0c             	sub    esp,0xc
c0009945:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009949:	c1 ee 0c             	shr    esi,0xc
c000994c:	eb 3a                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000994e:	83 ec 08             	sub    esp,0x8
c0009951:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009956:	55                   	push   ebp
c0009957:	50                   	push   eax
c0009958:	e8 bd ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000995d:	83 c4 10             	add    esp,0x10
c0009960:	8b 00                	mov    eax,DWORD PTR [eax]
c0009962:	f6 c4 04             	test   ah,0x4
c0009965:	75 5a                	jne    c00099c1 <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009967:	83 fb 04             	cmp    ebx,0x4
c000996a:	74 6b                	je     c00099d7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000996c:	83 fb 02             	cmp    ebx,0x2
c000996f:	74 7f                	je     c00099f0 <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 a3 00 00 00    	je     c0009a1d <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 87 00 00 00    	je     c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 6a fc ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 b3                	jne    c000994e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 72 00 02 c0       	push   0xc0020072
c00099a3:	e8 77 6f 00 00       	call   c001091f <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 63 ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00099bc:	f6 c4 04             	test   ah,0x4
c00099bf:	74 c2                	je     c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099c1:	83 ec 0c             	sub    esp,0xc
c00099c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099c9:	50                   	push   eax
c00099ca:	e8 7b e3 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c00099cf:	83 c4 10             	add    esp,0x10
c00099d2:	83 fb 04             	cmp    ebx,0x4
c00099d5:	75 95                	jne    c000996c <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099d7:	83 e7 01             	and    edi,0x1
c00099da:	75 46                	jne    c0009a22 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099dc:	c7 44 24 20 f0 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fef0
c00099e4:	83 c4 0c             	add    esp,0xc
c00099e7:	5b                   	pop    ebx
c00099e8:	5e                   	pop    esi
c00099e9:	5f                   	pop    edi
c00099ea:	5d                   	pop    ebp
c00099eb:	e9 2f 6f 00 00       	jmp    c001091f <KePanic(char const*)>
c00099f0:	83 e7 01             	and    edi,0x1
c00099f3:	75 15                	jne    c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099f5:	83 ec 0c             	sub    esp,0xc
c00099f8:	68 8e 00 02 c0       	push   0xc002008e
c00099fd:	e8 1d 6f 00 00       	call   c001091f <KePanic(char const*)>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	e9 79 ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a0a:	83 ec 08             	sub    esp,0x8
c0009a0d:	6a 00                	push   0x0
c0009a0f:	56                   	push   esi
c0009a10:	e8 ab fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	e9 66 ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a1d:	83 e7 01             	and    edi,0x1
c0009a20:	75 16                	jne    c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a22:	83 ec 08             	sub    esp,0x8
c0009a25:	6a 00                	push   0x0
c0009a27:	56                   	push   esi
c0009a28:	e8 93 fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a2d:	83 c4 10             	add    esp,0x10
c0009a30:	83 c4 0c             	add    esp,0xc
c0009a33:	5b                   	pop    ebx
c0009a34:	5e                   	pop    esi
c0009a35:	5f                   	pop    edi
c0009a36:	5d                   	pop    ebp
c0009a37:	c3                   	ret    
c0009a38:	c7 44 24 20 aa 00 02 c0 	mov    DWORD PTR [esp+0x20],0xc00200aa
c0009a40:	83 c4 0c             	add    esp,0xc
c0009a43:	5b                   	pop    ebx
c0009a44:	5e                   	pop    esi
c0009a45:	5f                   	pop    edi
c0009a46:	5d                   	pop    ebp
c0009a47:	e9 d3 6e 00 00       	jmp    c001091f <KePanic(char const*)>

c0009a4c <VAS::freeAllocatedPages(unsigned long)>:
c0009a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a54:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a58:	74 09                	je     c0009a63 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a5e:	e9 d6 fe ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a63:	c7 44 24 04 14 ff 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ff14
c0009a6b:	e9 81 0f 00 00       	jmp    c000a9f1 <Dbg::kprintf(char const*, ...)>

c0009a70 <VAS::virtualToPhysical(unsigned long)>:
c0009a70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a74:	50                   	push   eax
c0009a75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a79:	52                   	push   edx
c0009a7a:	e8 9b fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009a7f:	59                   	pop    ecx
c0009a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a82:	5a                   	pop    edx
c0009a83:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a88:	c3                   	ret    
c0009a89:	90                   	nop

c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a8a:	55                   	push   ebp
c0009a8b:	57                   	push   edi
c0009a8c:	56                   	push   esi
c0009a8d:	53                   	push   ebx
c0009a8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a92:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a96:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a9a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a9e:	85 db                	test   ebx,ebx
c0009aa0:	7e 24                	jle    c0009ac6 <VAS::reflagRange(unsigned long, int, int, int)+0x3c>
c0009aa2:	c1 e3 0c             	shl    ebx,0xc
c0009aa5:	01 f3                	add    ebx,esi
c0009aa7:	56                   	push   esi
c0009aa8:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aae:	55                   	push   ebp
c0009aaf:	e8 66 fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009ab4:	5a                   	pop    edx
c0009ab5:	59                   	pop    ecx
c0009ab6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009abc:	21 f9                	and    ecx,edi
c0009abe:	09 d1                	or     ecx,edx
c0009ac0:	39 f3                	cmp    ebx,esi
c0009ac2:	89 08                	mov    DWORD PTR [eax],ecx
c0009ac4:	75 e1                	jne    c0009aa7 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009ac6:	5b                   	pop    ebx
c0009ac7:	5e                   	pop    esi
c0009ac8:	5f                   	pop    edi
c0009ac9:	5d                   	pop    ebp
c0009aca:	c3                   	ret    
c0009acb:	90                   	nop

c0009acc <VAS::VAS()>:
c0009acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009adb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009aeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aef:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afe:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b05:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009b0a:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b0f:	29 c2                	sub    edx,eax
c0009b11:	89 d0                	mov    eax,edx
c0009b13:	05 ff 0f 00 00       	add    eax,0xfff
c0009b18:	c1 e8 0c             	shr    eax,0xc
c0009b1b:	89 c2                	mov    edx,eax
c0009b1d:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b22:	6a 04                	push   0x4
c0009b24:	6a ff                	push   0xffffffff
c0009b26:	52                   	push   edx
c0009b27:	50                   	push   eax
c0009b28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2c:	e8 59 ff ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c0009b31:	83 c4 14             	add    esp,0x14
c0009b34:	90                   	nop
c0009b35:	c3                   	ret    

c0009b36 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b36:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b41:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b48:	75 01                	jne    c0009b4b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b4a:	c3                   	ret    
c0009b4b:	68 80 00 00 00       	push   0x80
c0009b50:	6a ff                	push   0xffffffff
c0009b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b56:	50                   	push   eax
c0009b57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b5b:	52                   	push   edx
c0009b5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b60:	51                   	push   ecx
c0009b61:	e8 24 ff ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c0009b66:	83 c4 14             	add    esp,0x14
c0009b69:	c3                   	ret    

c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b75:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b7d:	83 f8 01             	cmp    eax,0x1
c0009b80:	19 c0                	sbb    eax,eax
c0009b82:	83 ca 03             	or     edx,0x3
c0009b85:	83 e0 fc             	and    eax,0xfffffffc
c0009b88:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b8f:	0f 20 d8             	mov    eax,cr3
c0009b92:	0f 22 d8             	mov    cr3,eax
c0009b95:	c3                   	ret    

c0009b96 <VAS::~VAS()>:
c0009b96:	83 ec 2c             	sub    esp,0x2c
c0009b99:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ba1:	fa                   	cli    
c0009ba2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ba7:	83 c0 01             	add    eax,0x1
c0009baa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009baf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bc3:	6a 01                	push   0x1
c0009bc5:	50                   	push   eax
c0009bc6:	e8 9f ff ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bcb:	83 c4 0c             	add    esp,0xc
c0009bce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bde:	0f 8f d8 00 00 00    	jg     c0009cbc <VAS::~VAS()+0x126>
c0009be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009beb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bef:	c1 e2 02             	shl    edx,0x2
c0009bf2:	01 d0                	add    eax,edx
c0009bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bfe:	83 e0 01             	and    eax,0x1
c0009c01:	0f 84 ab 00 00 00    	je     c0009cb2 <VAS::~VAS()+0x11c>
c0009c07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c0f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c17:	7f 74                	jg     c0009c8d <VAS::~VAS()+0xf7>
c0009c19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c1d:	c1 e0 0a             	shl    eax,0xa
c0009c20:	89 c2                	mov    edx,eax
c0009c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c26:	01 d0                	add    eax,edx
c0009c28:	c1 e0 0c             	shl    eax,0xc
c0009c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c2f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c43:	6a 01                	push   0x1
c0009c45:	50                   	push   eax
c0009c46:	e8 a1 fc ff ff       	call   c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c4b:	83 c4 0c             	add    esp,0xc
c0009c4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c60:	25 01 04 00 00       	and    eax,0x401
c0009c65:	3d 01 04 00 00       	cmp    eax,0x401
c0009c6a:	75 1a                	jne    c0009c86 <VAS::~VAS()+0xf0>
c0009c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c75:	83 ec 0c             	sub    esp,0xc
c0009c78:	50                   	push   eax
c0009c79:	e8 cc e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009c7e:	83 c4 10             	add    esp,0x10
c0009c81:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c86:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c8b:	eb 82                	jmp    c0009c0f <VAS::~VAS()+0x79>
c0009c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c91:	25 00 04 00 00       	and    eax,0x400
c0009c96:	74 1a                	je     c0009cb2 <VAS::~VAS()+0x11c>
c0009c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca1:	83 ec 0c             	sub    esp,0xc
c0009ca4:	50                   	push   eax
c0009ca5:	e8 a0 e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009caa:	83 c4 10             	add    esp,0x10
c0009cad:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cb2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb7:	e9 1a ff ff ff       	jmp    c0009bd6 <VAS::~VAS()+0x40>
c0009cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cc3:	83 ec 0c             	sub    esp,0xc
c0009cc6:	50                   	push   eax
c0009cc7:	e8 6d fc ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ccc:	83 c4 10             	add    esp,0x10
c0009ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd6:	83 ec 0c             	sub    esp,0xc
c0009cd9:	50                   	push   eax
c0009cda:	e8 6b e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009cdf:	83 c4 10             	add    esp,0x10
c0009ce2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cec:	83 e8 01             	sub    eax,0x1
c0009cef:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cf4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cf9:	85 c0                	test   eax,eax
c0009cfb:	75 01                	jne    c0009cfe <VAS::~VAS()+0x168>
c0009cfd:	fb                   	sti    
c0009cfe:	90                   	nop
c0009cff:	83 c4 2c             	add    esp,0x2c
c0009d02:	c3                   	ret    
c0009d03:	90                   	nop

c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d04:	55                   	push   ebp
c0009d05:	57                   	push   edi
c0009d06:	56                   	push   esi
c0009d07:	53                   	push   ebx
c0009d08:	83 ec 1c             	sub    esp,0x1c
c0009d0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d0f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d13:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d19:	77 0b                	ja     c0009d26 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009d1b:	0f 20 d8             	mov    eax,cr3
c0009d1e:	0f 20 d8             	mov    eax,cr3
c0009d21:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d24:	75 49                	jne    c0009d6f <VAS::mapPage(unsigned long, unsigned long, int)+0x6b>
c0009d26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d2a:	09 d8                	or     eax,ebx
c0009d2c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d31:	75 59                	jne    c0009d8c <VAS::mapPage(unsigned long, unsigned long, int)+0x88>
c0009d33:	89 de                	mov    esi,ebx
c0009d35:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d38:	c1 ee 16             	shr    esi,0x16
c0009d3b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d42:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d46:	74 56                	je     c0009d9e <VAS::mapPage(unsigned long, unsigned long, int)+0x9a>
c0009d48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d50:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d56:	c1 eb 0a             	shr    ebx,0xa
c0009d59:	c1 e6 0c             	shl    esi,0xc
c0009d5c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d62:	09 d0                	or     eax,edx
c0009d64:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d67:	83 c4 1c             	add    esp,0x1c
c0009d6a:	5b                   	pop    ebx
c0009d6b:	5e                   	pop    esi
c0009d6c:	5f                   	pop    edi
c0009d6d:	5d                   	pop    ebp
c0009d6e:	c3                   	ret    
c0009d6f:	83 ec 0c             	sub    esp,0xc
c0009d72:	68 38 ff 01 c0       	push   0xc001ff38
c0009d77:	e8 75 0c 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0009d7c:	83 c4 10             	add    esp,0x10
c0009d7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d83:	09 d8                	or     eax,ebx
c0009d85:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d8a:	74 a7                	je     c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	68 a0 ff 01 c0       	push   0xc001ffa0
c0009d94:	e8 86 6b 00 00       	call   c001091f <KePanic(char const*)>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	eb 95                	jmp    c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009da2:	e8 0c e0 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009da7:	83 ec 0c             	sub    esp,0xc
c0009daa:	89 c5                	mov    ebp,eax
c0009dac:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009db2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009db6:	6a 01                	push   0x1
c0009db8:	e8 60 f8 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0009dbd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dc4:	6a 01                	push   0x1
c0009dc6:	50                   	push   eax
c0009dc7:	55                   	push   ebp
c0009dc8:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dd2:	51                   	push   ecx
c0009dd3:	e8 40 02 00 00       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dd8:	83 c4 1c             	add    esp,0x1c
c0009ddb:	68 00 10 00 00       	push   0x1000
c0009de0:	6a 00                	push   0x0
c0009de2:	50                   	push   eax
c0009de3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009de7:	e8 04 67 ff ff       	call   c00004f0 <memset>
c0009dec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009df0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df3:	e8 41 fb ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009df8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dfc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e05:	e9 3e ff ff ff       	jmp    c0009d48 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009e0a <VAS::allocatePages(int, int)>:
c0009e0a:	55                   	push   ebp
c0009e0b:	57                   	push   edi
c0009e0c:	56                   	push   esi
c0009e0d:	53                   	push   ebx
c0009e0e:	83 ec 1c             	sub    esp,0x1c
c0009e11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e15:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009e1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e20:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e26:	83 e0 01             	and    eax,0x1
c0009e29:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e31:	89 c7                	mov    edi,eax
c0009e33:	0f 85 d6 00 00 00    	jne    c0009f0f <VAS::allocatePages(int, int)+0x105>
c0009e39:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	0f 84 ab 00 00 00    	je     c0009ef3 <VAS::allocatePages(int, int)+0xe9>
c0009e48:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e4c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e50:	c1 e6 0c             	shl    esi,0xc
c0009e53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e57:	01 de                	add    esi,ebx
c0009e59:	85 c0                	test   eax,eax
c0009e5b:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e5e:	7e 3a                	jle    c0009e9a <VAS::allocatePages(int, int)+0x90>
c0009e60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e64:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e68:	80 cc 04             	or     ah,0x4
c0009e6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e6f:	89 f8                	mov    eax,edi
c0009e71:	0f b6 f8             	movzx  edi,al
c0009e74:	e8 3a df ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009e79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e7d:	52                   	push   edx
c0009e7e:	53                   	push   ebx
c0009e7f:	50                   	push   eax
c0009e80:	55                   	push   ebp
c0009e81:	e8 7e fe ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e86:	83 c4 10             	add    esp,0x10
c0009e89:	85 ff                	test   edi,edi
c0009e8b:	74 03                	je     c0009e90 <VAS::allocatePages(int, int)+0x86>
c0009e8d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e90:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e96:	39 de                	cmp    esi,ebx
c0009e98:	75 da                	jne    c0009e74 <VAS::allocatePages(int, int)+0x6a>
c0009e9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e9e:	85 c9                	test   ecx,ecx
c0009ea0:	75 12                	jne    c0009eb4 <VAS::allocatePages(int, int)+0xaa>
c0009ea2:	0f 20 d8             	mov    eax,cr3
c0009ea5:	0f 22 d8             	mov    cr3,eax
c0009ea8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eac:	83 c4 1c             	add    esp,0x1c
c0009eaf:	5b                   	pop    ebx
c0009eb0:	5e                   	pop    esi
c0009eb1:	5f                   	pop    edi
c0009eb2:	5d                   	pop    ebp
c0009eb3:	c3                   	ret    
c0009eb4:	c1 ee 0a             	shr    esi,0xa
c0009eb7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ebb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ec1:	c1 eb 0a             	shr    ebx,0xa
c0009ec4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009eca:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ed0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ed6:	39 c3                	cmp    ebx,eax
c0009ed8:	77 ce                	ja     c0009ea8 <VAS::allocatePages(int, int)+0x9e>
c0009eda:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009edd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee3:	39 d8                	cmp    eax,ebx
c0009ee5:	73 f3                	jae    c0009eda <VAS::allocatePages(int, int)+0xd0>
c0009ee7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eeb:	83 c4 1c             	add    esp,0x1c
c0009eee:	5b                   	pop    ebx
c0009eef:	5e                   	pop    esi
c0009ef0:	5f                   	pop    edi
c0009ef1:	5d                   	pop    ebp
c0009ef2:	c3                   	ret    
c0009ef3:	83 ec 0c             	sub    esp,0xc
c0009ef6:	68 c4 ff 01 c0       	push   0xc001ffc4
c0009efb:	e8 1f 6a 00 00       	call   c001091f <KePanic(char const*)>
c0009f00:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009f03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f07:	83 c4 10             	add    esp,0x10
c0009f0a:	e9 39 ff ff ff       	jmp    c0009e48 <VAS::allocatePages(int, int)+0x3e>
c0009f0f:	83 ec 0c             	sub    esp,0xc
c0009f12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f16:	50                   	push   eax
c0009f17:	e8 01 f7 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0009f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f20:	83 c4 10             	add    esp,0x10
c0009f23:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f28:	0f 87 a4 00 00 00    	ja     c0009fd2 <VAS::allocatePages(int, int)+0x1c8>
c0009f2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f32:	85 c0                	test   eax,eax
c0009f34:	7e 44                	jle    c0009f7a <VAS::allocatePages(int, int)+0x170>
c0009f36:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f3e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f42:	c1 e0 0c             	shl    eax,0xc
c0009f45:	81 ce 00 04 00 00    	or     esi,0x400
c0009f4b:	01 d8                	add    eax,ebx
c0009f4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f51:	89 f8                	mov    eax,edi
c0009f53:	0f b6 f8             	movzx  edi,al
c0009f56:	e8 58 de ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009f5b:	56                   	push   esi
c0009f5c:	53                   	push   ebx
c0009f5d:	50                   	push   eax
c0009f5e:	55                   	push   ebp
c0009f5f:	e8 a0 fd ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f64:	83 c4 10             	add    esp,0x10
c0009f67:	85 ff                	test   edi,edi
c0009f69:	74 03                	je     c0009f6e <VAS::allocatePages(int, int)+0x164>
c0009f6b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f74:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f78:	75 dc                	jne    c0009f56 <VAS::allocatePages(int, int)+0x14c>
c0009f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7e:	85 c0                	test   eax,eax
c0009f80:	0f 84 1c ff ff ff    	je     c0009ea2 <VAS::allocatePages(int, int)+0x98>
c0009f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f8e:	89 d3                	mov    ebx,edx
c0009f90:	c1 e0 0c             	shl    eax,0xc
c0009f93:	c1 eb 0a             	shr    ebx,0xa
c0009f96:	01 d0                	add    eax,edx
c0009f98:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f9e:	c1 e8 0a             	shr    eax,0xa
c0009fa1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009fa7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fac:	2d 00 00 40 00       	sub    eax,0x400000
c0009fb1:	39 c3                	cmp    ebx,eax
c0009fb3:	0f 87 ef fe ff ff    	ja     c0009ea8 <VAS::allocatePages(int, int)+0x9e>
c0009fb9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fbc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fc2:	39 d8                	cmp    eax,ebx
c0009fc4:	73 f3                	jae    c0009fb9 <VAS::allocatePages(int, int)+0x1af>
c0009fc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fca:	83 c4 1c             	add    esp,0x1c
c0009fcd:	5b                   	pop    ebx
c0009fce:	5e                   	pop    esi
c0009fcf:	5f                   	pop    edi
c0009fd0:	5d                   	pop    ebp
c0009fd1:	c3                   	ret    
c0009fd2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fdd:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fe4:	0f 84 44 ff ff ff    	je     c0009f2e <VAS::allocatePages(int, int)+0x124>
c0009fea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fee:	80 cc 01             	or     ah,0x1
c0009ff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ff5:	e9 34 ff ff ff       	jmp    c0009f2e <VAS::allocatePages(int, int)+0x124>

c0009ffa <VAS::setCPUSpecific(unsigned long)>:
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	6a 05                	push   0x5
c0009fff:	68 00 00 40 c2       	push   0xc2400000
c000a004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a008:	50                   	push   eax
c000a009:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a00d:	52                   	push   edx
c000a00e:	e8 f1 fc ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a013:	83 c4 1c             	add    esp,0x1c
c000a016:	c3                   	ret    
c000a017:	90                   	nop

c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a018:	55                   	push   ebp
c000a019:	57                   	push   edi
c000a01a:	56                   	push   esi
c000a01b:	53                   	push   ebx
c000a01c:	83 ec 1c             	sub    esp,0x1c
c000a01f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a024:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a028:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a032:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a038:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a03c:	83 e0 01             	and    eax,0x1
c000a03f:	85 db                	test   ebx,ebx
c000a041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a045:	7e 43                	jle    c000a08a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x72>
c000a047:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a04f:	c1 e2 0c             	shl    edx,0xc
c000a052:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a056:	01 ca                	add    edx,ecx
c000a058:	0f b6 f0             	movzx  esi,al
c000a05b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a05f:	55                   	push   ebp
c000a060:	53                   	push   ebx
c000a061:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a065:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000a069:	29 d0                	sub    eax,edx
c000a06b:	01 d8                	add    eax,ebx
c000a06d:	50                   	push   eax
c000a06e:	57                   	push   edi
c000a06f:	e8 90 fc ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a074:	83 c4 10             	add    esp,0x10
c000a077:	85 f6                	test   esi,esi
c000a079:	74 03                	je     c000a07e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000a07b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a07e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a084:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a088:	75 d5                	jne    c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c000a08a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a08e:	85 c9                	test   ecx,ecx
c000a090:	75 12                	jne    c000a0a4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8c>
c000a092:	0f 20 d8             	mov    eax,cr3
c000a095:	0f 22 d8             	mov    cr3,eax
c000a098:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a09c:	83 c4 1c             	add    esp,0x1c
c000a09f:	5b                   	pop    ebx
c000a0a0:	5e                   	pop    esi
c000a0a1:	5f                   	pop    edi
c000a0a2:	5d                   	pop    ebp
c000a0a3:	c3                   	ret    
c000a0a4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a0a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0ac:	c1 eb 0a             	shr    ebx,0xa
c000a0af:	c1 e0 0c             	shl    eax,0xc
c000a0b2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0b8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a0bc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a0c2:	01 d0                	add    eax,edx
c000a0c4:	c1 e8 0a             	shr    eax,0xa
c000a0c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0cc:	2d 00 00 40 00       	sub    eax,0x400000
c000a0d1:	39 c3                	cmp    ebx,eax
c000a0d3:	77 c3                	ja     c000a098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x80>
c000a0d5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0de:	39 d8                	cmp    eax,ebx
c000a0e0:	73 f3                	jae    c000a0d5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xbd>
c000a0e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a0e6:	83 c4 1c             	add    esp,0x1c
c000a0e9:	5b                   	pop    ebx
c000a0ea:	5e                   	pop    esi
c000a0eb:	5f                   	pop    edi
c000a0ec:	5d                   	pop    ebp
c000a0ed:	c3                   	ret    

c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0ee:	55                   	push   ebp
c000a0ef:	57                   	push   edi
c000a0f0:	56                   	push   esi
c000a0f1:	53                   	push   ebx
c000a0f2:	83 ec 1c             	sub    esp,0x1c
c000a0f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0f9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a0fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a101:	09 f8                	or     eax,edi
c000a103:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a107:	a9 ff 0f 00 00       	test   eax,0xfff
c000a10c:	75 4f                	jne    c000a15d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a10e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a112:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a115:	c1 eb 16             	shr    ebx,0x16
c000a118:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c000a11f:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a123:	74 52                	je     c000a177 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c000a125:	0f b6 f2             	movzx  esi,dl
c000a128:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a12c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a130:	c1 e8 0a             	shr    eax,0xa
c000a133:	83 fe 01             	cmp    esi,0x1
c000a136:	19 d2                	sbb    edx,edx
c000a138:	c1 e3 0c             	shl    ebx,0xc
c000a13b:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a141:	25 fc 0f 00 00       	and    eax,0xffc
c000a146:	01 d8                	add    eax,ebx
c000a148:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a14c:	09 d9                	or     ecx,ebx
c000a14e:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a155:	83 c4 1c             	add    esp,0x1c
c000a158:	5b                   	pop    ebx
c000a159:	5e                   	pop    esi
c000a15a:	5f                   	pop    edi
c000a15b:	5d                   	pop    ebp
c000a15c:	c3                   	ret    
c000a15d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a161:	83 ec 0c             	sub    esp,0xc
c000a164:	68 f0 ff 01 c0       	push   0xc001fff0
c000a169:	e8 b1 67 00 00       	call   c001091f <KePanic(char const*)>
c000a16e:	83 c4 10             	add    esp,0x10
c000a171:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a175:	eb 97                	jmp    c000a10e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a17b:	e8 33 dc ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a180:	83 ec 0c             	sub    esp,0xc
c000a183:	89 c5                	mov    ebp,eax
c000a185:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a18b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a18f:	6a 01                	push   0x1
c000a191:	e8 87 f4 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000a196:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a19d:	6a 01                	push   0x1
c000a19f:	50                   	push   eax
c000a1a0:	55                   	push   ebp
c000a1a1:	81 cd 07 04 00 00    	or     ebp,0x407
c000a1a7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a1ab:	51                   	push   ecx
c000a1ac:	e8 67 fe ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a1b1:	83 c4 1c             	add    esp,0x1c
c000a1b4:	68 00 10 00 00       	push   0x1000
c000a1b9:	6a 00                	push   0x0
c000a1bb:	50                   	push   eax
c000a1bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1c0:	e8 2b 63 ff ff       	call   c00004f0 <memset>
c000a1c5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a1c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1cc:	e8 68 f7 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a1d1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1d4:	83 c4 10             	add    esp,0x10
c000a1d7:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1de:	e9 42 ff ff ff       	jmp    c000a125 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a1e3:	90                   	nop

c000a1e4 <VAS::VAS(bool)>:
c000a1e4:	53                   	push   ebx
c000a1e5:	83 ec 28             	sub    esp,0x28
c000a1e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a20e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a211:	e8 9d db ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a216:	89 c2                	mov    edx,eax
c000a218:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a21c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a21f:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a225:	83 ec 0c             	sub    esp,0xc
c000a228:	6a 01                	push   0x1
c000a22a:	e8 ee f3 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	89 c2                	mov    edx,eax
c000a234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a238:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a23b:	83 ec 0c             	sub    esp,0xc
c000a23e:	6a 03                	push   0x3
c000a240:	6a 01                	push   0x1
c000a242:	52                   	push   edx
c000a243:	50                   	push   eax
c000a244:	53                   	push   ebx
c000a245:	e8 ce fd ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a24a:	83 c4 20             	add    esp,0x20
c000a24d:	89 c2                	mov    edx,eax
c000a24f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a253:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a256:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a25e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a266:	7f 1d                	jg     c000a285 <VAS::VAS(bool)+0xa1>
c000a268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a26c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a26f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a273:	c1 e2 02             	shl    edx,0x2
c000a276:	01 d0                	add    eax,edx
c000a278:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a27e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a283:	eb d9                	jmp    c000a25e <VAS::VAS(bool)+0x7a>
c000a285:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a28d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a295:	7f 7e                	jg     c000a315 <VAS::VAS(bool)+0x131>
c000a297:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a29b:	2d 00 02 00 00       	sub    eax,0x200
c000a2a0:	c1 e0 0c             	shl    eax,0xc
c000a2a3:	83 c8 05             	or     eax,0x5
c000a2a6:	89 c2                	mov    edx,eax
c000a2a8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2b3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2b9:	83 e0 10             	and    eax,0x10
c000a2bc:	0f b6 c0             	movzx  eax,al
c000a2bf:	85 c0                	test   eax,eax
c000a2c1:	74 07                	je     c000a2ca <VAS::VAS(bool)+0xe6>
c000a2c3:	b8 00 01 00 00       	mov    eax,0x100
c000a2c8:	eb 05                	jmp    c000a2cf <VAS::VAS(bool)+0xeb>
c000a2ca:	b8 00 00 00 00       	mov    eax,0x0
c000a2cf:	09 d0                	or     eax,edx
c000a2d1:	89 c1                	mov    ecx,eax
c000a2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2de:	c1 e2 02             	shl    edx,0x2
c000a2e1:	01 d0                	add    eax,edx
c000a2e3:	89 ca                	mov    edx,ecx
c000a2e5:	89 10                	mov    DWORD PTR [eax],edx
c000a2e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2eb:	2d 40 03 00 00       	sub    eax,0x340
c000a2f0:	83 f8 7f             	cmp    eax,0x7f
c000a2f3:	77 16                	ja     c000a30b <VAS::VAS(bool)+0x127>
c000a2f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2f9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a300:	c1 e2 02             	shl    edx,0x2
c000a303:	01 d0                	add    eax,edx
c000a305:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a30b:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a310:	e9 78 ff ff ff       	jmp    c000a28d <VAS::VAS(bool)+0xa9>
c000a315:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a31a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a320:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a326:	83 e0 10             	and    eax,0x10
c000a329:	0f b6 c0             	movzx  eax,al
c000a32c:	85 c0                	test   eax,eax
c000a32e:	74 07                	je     c000a337 <VAS::VAS(bool)+0x153>
c000a330:	b8 03 41 00 00       	mov    eax,0x4103
c000a335:	eb 05                	jmp    c000a33c <VAS::VAS(bool)+0x158>
c000a337:	b8 03 40 00 00       	mov    eax,0x4003
c000a33c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a340:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a343:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a349:	89 02                	mov    DWORD PTR [edx],eax
c000a34b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a350:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a356:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a35c:	83 ec 08             	sub    esp,0x8
c000a35f:	50                   	push   eax
c000a360:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a364:	e8 91 fc ff ff       	call   c0009ffa <VAS::setCPUSpecific(unsigned long)>
c000a369:	83 c4 10             	add    esp,0x10
c000a36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a370:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a373:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a378:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a37e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a384:	83 e0 10             	and    eax,0x10
c000a387:	0f b6 c0             	movzx  eax,al
c000a38a:	85 c0                	test   eax,eax
c000a38c:	74 07                	je     c000a395 <VAS::VAS(bool)+0x1b1>
c000a38e:	b8 00 01 00 00       	mov    eax,0x100
c000a393:	eb 05                	jmp    c000a39a <VAS::VAS(bool)+0x1b6>
c000a395:	b8 00 00 00 00       	mov    eax,0x0
c000a39a:	09 c2                	or     edx,eax
c000a39c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a3a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a3a3:	05 fc 0f 00 00       	add    eax,0xffc
c000a3a8:	83 ca 03             	or     edx,0x3
c000a3ab:	89 10                	mov    DWORD PTR [eax],edx
c000a3ad:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3b8:	83 ec 0c             	sub    esp,0xc
c000a3bb:	50                   	push   eax
c000a3bc:	e8 f9 1c 00 00       	call   c000c0ba <Device::getName()>
c000a3c1:	83 c4 10             	add    esp,0x10
c000a3c4:	83 ec 08             	sub    esp,0x8
c000a3c7:	68 c4 00 02 c0       	push   0xc00200c4
c000a3cc:	50                   	push   eax
c000a3cd:	e8 7e 63 ff ff       	call   c0000750 <strcmp>
c000a3d2:	83 c4 10             	add    esp,0x10
c000a3d5:	85 c0                	test   eax,eax
c000a3d7:	0f 94 c0             	sete   al
c000a3da:	0f b6 c0             	movzx  eax,al
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	0f 84 8b 00 00 00    	je     c000a470 <VAS::VAS(bool)+0x28c>
c000a3e5:	fa                   	cli    
c000a3e6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3eb:	83 c0 01             	add    eax,0x1
c000a3ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3f3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3fe:	05 7c 09 00 00       	add    eax,0x97c
c000a403:	83 ec 0c             	sub    esp,0xc
c000a406:	50                   	push   eax
c000a407:	e8 9a d1 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a40c:	83 c4 10             	add    esp,0x10
c000a40f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a414:	89 c3                	mov    ebx,eax
c000a416:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a41b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a421:	05 7c 09 00 00       	add    eax,0x97c
c000a426:	83 ec 0c             	sub    esp,0xc
c000a429:	50                   	push   eax
c000a42a:	e8 77 d1 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a42f:	83 c4 10             	add    esp,0x10
c000a432:	83 ec 08             	sub    esp,0x8
c000a435:	50                   	push   eax
c000a436:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a43a:	e8 db f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a43f:	83 c4 10             	add    esp,0x10
c000a442:	8b 00                	mov    eax,DWORD PTR [eax]
c000a444:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a449:	6a 11                	push   0x11
c000a44b:	53                   	push   ebx
c000a44c:	50                   	push   eax
c000a44d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a451:	e8 ae f8 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a45e:	83 e8 01             	sub    eax,0x1
c000a461:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a466:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a46b:	85 c0                	test   eax,eax
c000a46d:	75 01                	jne    c000a470 <VAS::VAS(bool)+0x28c>
c000a46f:	fb                   	sti    
c000a470:	90                   	nop
c000a471:	83 c4 28             	add    esp,0x28
c000a474:	5b                   	pop    ebx
c000a475:	c3                   	ret    

c000a476 <VAS::evict(unsigned long)>:
c000a476:	55                   	push   ebp
c000a477:	57                   	push   edi
c000a478:	56                   	push   esi
c000a479:	53                   	push   ebx
c000a47a:	83 ec 1c             	sub    esp,0x1c
c000a47d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a481:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a485:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a489:	e8 ed f2 ff ff       	call   c000977b <Virt::allocateSwapfilePage()>
c000a48e:	89 c7                	mov    edi,eax
c000a490:	a1 cc 1f 02 c0       	mov    eax,ds:0xc0021fcc
c000a495:	85 c0                	test   eax,eax
c000a497:	7e 40                	jle    c000a4d9 <VAS::evict(unsigned long)+0x63>
c000a499:	89 ee                	mov    esi,ebp
c000a49b:	31 db                	xor    ebx,ebx
c000a49d:	83 ec 0c             	sub    esp,0xc
c000a4a0:	57                   	push   edi
c000a4a1:	e8 bf f2 ff ff       	call   c0009765 <Virt::swapIDToSector(unsigned long)>
c000a4a6:	89 34 24             	mov    DWORD PTR [esp],esi
c000a4a9:	01 d8                	add    eax,ebx
c000a4ab:	6a 01                	push   0x1
c000a4ad:	31 d2                	xor    edx,edx
c000a4af:	83 c3 01             	add    ebx,0x1
c000a4b2:	52                   	push   edx
c000a4b3:	81 c6 00 02 00 00    	add    esi,0x200
c000a4b9:	50                   	push   eax
c000a4ba:	0f be 05 d8 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021fd8
c000a4c1:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a4c8:	50                   	push   eax
c000a4c9:	e8 a6 2d 00 00       	call   c000d274 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4ce:	83 c4 20             	add    esp,0x20
c000a4d1:	39 1d cc 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fcc,ebx
c000a4d7:	7f c4                	jg     c000a49d <VAS::evict(unsigned long)+0x27>
c000a4d9:	83 ec 08             	sub    esp,0x8
c000a4dc:	c1 e7 0b             	shl    edi,0xb
c000a4df:	55                   	push   ebp
c000a4e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4e4:	50                   	push   eax
c000a4e5:	e8 30 f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a4ea:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4ec:	89 d3                	mov    ebx,edx
c000a4ee:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a4f4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a4fa:	09 d7                	or     edi,edx
c000a4fc:	89 38                	mov    DWORD PTR [eax],edi
c000a4fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a501:	8b 15 a8 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fa8
c000a507:	83 c2 01             	add    edx,0x1
c000a50a:	89 15 a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,edx
c000a510:	e8 35 d8 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c000a515:	0f 20 d8             	mov    eax,cr3
c000a518:	0f 22 d8             	mov    cr3,eax
c000a51b:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a521:	51                   	push   ecx
c000a522:	55                   	push   ebp
c000a523:	53                   	push   ebx
c000a524:	68 14 00 02 c0       	push   0xc0020014
c000a529:	e8 c3 04 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000a52e:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a533:	c7 44 24 50 d2 00 02 c0 	mov    DWORD PTR [esp+0x50],0xc00200d2
c000a53b:	8d 50 01             	lea    edx,[eax+0x1]
c000a53e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a542:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a548:	83 c4 3c             	add    esp,0x3c
c000a54b:	5b                   	pop    ebx
c000a54c:	5e                   	pop    esi
c000a54d:	5f                   	pop    edi
c000a54e:	5d                   	pop    ebp
c000a54f:	e9 9d 04 00 00       	jmp    c000a9f1 <Dbg::kprintf(char const*, ...)>

c000a554 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a554:	55                   	push   ebp
c000a555:	57                   	push   edi
c000a556:	56                   	push   esi
c000a557:	53                   	push   ebx
c000a558:	83 ec 0c             	sub    esp,0xc
c000a55b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a55f:	89 de                	mov    esi,ebx
c000a561:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a567:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a56d:	77 1f                	ja     c000a58e <VAS::tryLoadBackOffDisk(unsigned long)+0x3a>
c000a56f:	83 ec 08             	sub    esp,0x8
c000a572:	53                   	push   ebx
c000a573:	68 f5 00 02 c0       	push   0xc00200f5
c000a578:	e8 74 04 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000a57d:	83 c4 10             	add    esp,0x10
c000a580:	85 f6                	test   esi,esi
c000a582:	75 27                	jne    c000a5ab <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000a584:	31 c0                	xor    eax,eax
c000a586:	83 c4 0c             	add    esp,0xc
c000a589:	5b                   	pop    ebx
c000a58a:	5e                   	pop    esi
c000a58b:	5f                   	pop    edi
c000a58c:	5d                   	pop    ebp
c000a58d:	c3                   	ret    
c000a58e:	83 ec 0c             	sub    esp,0xc
c000a591:	68 e3 00 02 c0       	push   0xc00200e3
c000a596:	e8 84 63 00 00       	call   c001091f <KePanic(char const*)>
c000a59b:	5f                   	pop    edi
c000a59c:	5d                   	pop    ebp
c000a59d:	53                   	push   ebx
c000a59e:	68 f5 00 02 c0       	push   0xc00200f5
c000a5a3:	e8 49 04 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000a5a8:	83 c4 10             	add    esp,0x10
c000a5ab:	83 ec 08             	sub    esp,0x8
c000a5ae:	56                   	push   esi
c000a5af:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a5b3:	51                   	push   ecx
c000a5b4:	e8 61 f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a5b9:	83 c4 10             	add    esp,0x10
c000a5bc:	89 c3                	mov    ebx,eax
c000a5be:	85 c0                	test   eax,eax
c000a5c0:	74 c2                	je     c000a584 <VAS::tryLoadBackOffDisk(unsigned long)+0x30>
c000a5c2:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a5c4:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a5ca:	75 b8                	jne    c000a584 <VAS::tryLoadBackOffDisk(unsigned long)+0x30>
c000a5cc:	e8 e2 d7 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a5d1:	c1 ed 0b             	shr    ebp,0xb
c000a5d4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a5d6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5dc:	09 c2                	or     edx,eax
c000a5de:	81 ca 01 08 00 00    	or     edx,0x801
c000a5e4:	89 13                	mov    DWORD PTR [ebx],edx
c000a5e6:	8b 15 cc 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fcc
c000a5ec:	85 d2                	test   edx,edx
c000a5ee:	7e 40                	jle    c000a630 <VAS::tryLoadBackOffDisk(unsigned long)+0xdc>
c000a5f0:	89 f7                	mov    edi,esi
c000a5f2:	31 db                	xor    ebx,ebx
c000a5f4:	83 ec 0c             	sub    esp,0xc
c000a5f7:	55                   	push   ebp
c000a5f8:	e8 68 f1 ff ff       	call   c0009765 <Virt::swapIDToSector(unsigned long)>
c000a5fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a600:	01 d8                	add    eax,ebx
c000a602:	6a 01                	push   0x1
c000a604:	31 d2                	xor    edx,edx
c000a606:	83 c3 01             	add    ebx,0x1
c000a609:	52                   	push   edx
c000a60a:	81 c7 00 02 00 00    	add    edi,0x200
c000a610:	50                   	push   eax
c000a611:	0f be 05 d8 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021fd8
c000a618:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a61f:	50                   	push   eax
c000a620:	e8 e3 2b 00 00       	call   c000d208 <LogicalDisk::read(unsigned long long, int, void*)>
c000a625:	83 c4 20             	add    esp,0x20
c000a628:	39 1d cc 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fcc,ebx
c000a62e:	7f c4                	jg     c000a5f4 <VAS::tryLoadBackOffDisk(unsigned long)+0xa0>
c000a630:	83 ec 04             	sub    esp,0x4
c000a633:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a638:	83 e8 01             	sub    eax,0x1
c000a63b:	50                   	push   eax
c000a63c:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a641:	56                   	push   esi
c000a642:	68 08 01 02 c0       	push   0xc0020108
c000a647:	e8 a5 03 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000a64c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a64f:	e8 ee f0 ff ff       	call   c0009742 <Virt::freeSwapfilePage(unsigned long)>
c000a654:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a659:	83 c4 10             	add    esp,0x10
c000a65c:	83 e8 01             	sub    eax,0x1
c000a65f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a664:	85 c0                	test   eax,eax
c000a666:	75 01                	jne    c000a669 <VAS::tryLoadBackOffDisk(unsigned long)+0x115>
c000a668:	fb                   	sti    
c000a669:	0f 20 d8             	mov    eax,cr3
c000a66c:	0f 22 d8             	mov    cr3,eax
c000a66f:	b0 01                	mov    al,0x1
c000a671:	e9 10 ff ff ff       	jmp    c000a586 <VAS::tryLoadBackOffDisk(unsigned long)+0x32>

c000a676 <VAS::scanForEviction()>:
c000a676:	57                   	push   edi
c000a677:	56                   	push   esi
c000a678:	31 f6                	xor    esi,esi
c000a67a:	53                   	push   ebx
c000a67b:	83 ec 10             	sub    esp,0x10
c000a67e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a682:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a685:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a68b:	75 0e                	jne    c000a69b <VAS::scanForEviction()+0x25>
c000a68d:	89 da                	mov    edx,ebx
c000a68f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a692:	c1 ea 16             	shr    edx,0x16
c000a695:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a699:	74 57                	je     c000a6f2 <VAS::scanForEviction()+0x7c>
c000a69b:	53                   	push   ebx
c000a69c:	57                   	push   edi
c000a69d:	e8 78 f2 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a6a2:	5a                   	pop    edx
c000a6a3:	8b 10                	mov    edx,DWORD PTR [eax]
c000a6a5:	59                   	pop    ecx
c000a6a6:	89 d1                	mov    ecx,edx
c000a6a8:	c1 e9 0c             	shr    ecx,0xc
c000a6ab:	74 10                	je     c000a6bd <VAS::scanForEviction()+0x47>
c000a6ad:	89 d1                	mov    ecx,edx
c000a6af:	81 e1 01 08 00 00    	and    ecx,0x801
c000a6b5:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a6bb:	74 40                	je     c000a6fd <VAS::scanForEviction()+0x87>
c000a6bd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a6c3:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a6c9:	76 2d                	jbe    c000a6f8 <VAS::scanForEviction()+0x82>
c000a6cb:	83 c6 01             	add    esi,0x1
c000a6ce:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a6d5:	83 fe 03             	cmp    esi,0x3
c000a6d8:	74 32                	je     c000a70c <VAS::scanForEviction()+0x96>
c000a6da:	31 db                	xor    ebx,ebx
c000a6dc:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6e2:	75 b7                	jne    c000a69b <VAS::scanForEviction()+0x25>
c000a6e4:	89 da                	mov    edx,ebx
c000a6e6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a6e9:	c1 ea 16             	shr    edx,0x16
c000a6ec:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6f0:	75 a9                	jne    c000a69b <VAS::scanForEviction()+0x25>
c000a6f2:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6f8:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a6fb:	eb 88                	jmp    c000a685 <VAS::scanForEviction()+0xf>
c000a6fd:	f6 c2 20             	test   dl,0x20
c000a700:	74 13                	je     c000a715 <VAS::scanForEviction()+0x9f>
c000a702:	83 e2 df             	and    edx,0xffffffdf
c000a705:	89 10                	mov    DWORD PTR [eax],edx
c000a707:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a70a:	eb b1                	jmp    c000a6bd <VAS::scanForEviction()+0x47>
c000a70c:	83 c4 10             	add    esp,0x10
c000a70f:	31 c0                	xor    eax,eax
c000a711:	5b                   	pop    ebx
c000a712:	5e                   	pop    esi
c000a713:	5f                   	pop    edi
c000a714:	c3                   	ret    
c000a715:	83 ec 08             	sub    esp,0x8
c000a718:	89 d0                	mov    eax,edx
c000a71a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a71f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a723:	53                   	push   ebx
c000a724:	68 1d 01 02 c0       	push   0xc002011d
c000a729:	e8 c3 02 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000a72e:	58                   	pop    eax
c000a72f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a732:	5a                   	pop    edx
c000a733:	51                   	push   ecx
c000a734:	57                   	push   edi
c000a735:	e8 3c fd ff ff       	call   c000a476 <VAS::evict(unsigned long)>
c000a73a:	5b                   	pop    ebx
c000a73b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a73e:	5e                   	pop    esi
c000a73f:	50                   	push   eax
c000a740:	68 31 01 02 c0       	push   0xc0020131
c000a745:	e8 a7 02 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000a74a:	58                   	pop    eax
c000a74b:	5a                   	pop    edx
c000a74c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a750:	50                   	push   eax
c000a751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a755:	68 44 01 02 c0       	push   0xc0020144
c000a75a:	e8 92 02 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000a75f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a76b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a76f:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a772:	83 c4 10             	add    esp,0x10
c000a775:	5b                   	pop    ebx
c000a776:	5e                   	pop    esi
c000a777:	5f                   	pop    edi
c000a778:	c3                   	ret    

c000a779 <mapVASFirstTime>:
c000a779:	55                   	push   ebp
c000a77a:	57                   	push   edi
c000a77b:	56                   	push   esi
c000a77c:	53                   	push   ebx
c000a77d:	83 ec 0c             	sub    esp,0xc
c000a780:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a785:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a788:	83 fa 01             	cmp    edx,0x1
c000a78b:	0f 84 cb 00 00 00    	je     c000a85c <mapVASFirstTime+0xe3>
c000a791:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a794:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a797:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a79c:	c1 e5 15             	shl    ebp,0x15
c000a79f:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a7a4:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a7aa:	29 eb                	sub    ebx,ebp
c000a7ac:	29 ef                	sub    edi,ebp
c000a7ae:	e8 00 d6 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	68 03 04 00 00       	push   0x403
c000a7bb:	6a 01                	push   0x1
c000a7bd:	53                   	push   ebx
c000a7be:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7c4:	50                   	push   eax
c000a7c5:	56                   	push   esi
c000a7c6:	e8 4d f8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7cb:	83 c4 20             	add    esp,0x20
c000a7ce:	39 fb                	cmp    ebx,edi
c000a7d0:	75 dc                	jne    c000a7ae <mapVASFirstTime+0x35>
c000a7d2:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a7d7:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a7dc:	29 eb                	sub    ebx,ebp
c000a7de:	29 ef                	sub    edi,ebp
c000a7e0:	e8 ce d5 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a7e5:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a7e9:	83 fa 01             	cmp    edx,0x1
c000a7ec:	19 d2                	sbb    edx,edx
c000a7ee:	83 ec 0c             	sub    esp,0xc
c000a7f1:	83 e2 04             	and    edx,0x4
c000a7f4:	81 c2 03 04 00 00    	add    edx,0x403
c000a7fa:	52                   	push   edx
c000a7fb:	6a 01                	push   0x1
c000a7fd:	53                   	push   ebx
c000a7fe:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a804:	50                   	push   eax
c000a805:	56                   	push   esi
c000a806:	e8 0d f8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a80b:	83 c4 20             	add    esp,0x20
c000a80e:	39 df                	cmp    edi,ebx
c000a810:	75 ce                	jne    c000a7e0 <mapVASFirstTime+0x67>
c000a812:	83 ec 0c             	sub    esp,0xc
c000a815:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a81a:	6a 04                	push   0x4
c000a81c:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a822:	6a ff                	push   0xffffffff
c000a824:	c1 eb 0c             	shr    ebx,0xc
c000a827:	53                   	push   ebx
c000a828:	68 00 30 02 c0       	push   0xc0023000
c000a82d:	56                   	push   esi
c000a82e:	e8 57 f2 ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c000a833:	83 c4 14             	add    esp,0x14
c000a836:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a83b:	6a 04                	push   0x4
c000a83d:	6a ff                	push   0xffffffff
c000a83f:	53                   	push   ebx
c000a840:	68 00 30 02 c0       	push   0xc0023000
c000a845:	50                   	push   eax
c000a846:	e8 3f f2 ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c000a84b:	0f 20 d8             	mov    eax,cr3
c000a84e:	0f 22 d8             	mov    cr3,eax
c000a851:	83 c4 20             	add    esp,0x20
c000a854:	83 c4 0c             	add    esp,0xc
c000a857:	5b                   	pop    ebx
c000a858:	5e                   	pop    esi
c000a859:	5f                   	pop    edi
c000a85a:	5d                   	pop    ebp
c000a85b:	c3                   	ret    
c000a85c:	83 ec 0c             	sub    esp,0xc
c000a85f:	68 51 01 02 c0       	push   0xc0020151
c000a864:	e8 88 01 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000a869:	83 c4 10             	add    esp,0x10
c000a86c:	83 c4 0c             	add    esp,0xc
c000a86f:	5b                   	pop    ebx
c000a870:	5e                   	pop    esi
c000a871:	5f                   	pop    edi
c000a872:	5d                   	pop    ebp
c000a873:	c3                   	ret    

c000a874 <__cxa_atexit>:
c000a874:	31 c0                	xor    eax,eax
c000a876:	c3                   	ret    

c000a877 <__cxa_finalize>:
c000a877:	c3                   	ret    

c000a878 <__stack_chk_fail>:
c000a878:	55                   	push   ebp
c000a879:	89 e5                	mov    ebp,esp
c000a87b:	83 ec 10             	sub    esp,0x10
c000a87e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a881:	68 6a 01 02 c0       	push   0xc002016a
c000a886:	e8 66 01 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000a88b:	58                   	pop    eax
c000a88c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a88f:	5a                   	pop    edx
c000a890:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a893:	68 6a 01 02 c0       	push   0xc002016a
c000a898:	e8 54 01 00 00       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000a89d:	c7 04 24 72 01 02 c0 	mov    DWORD PTR [esp],0xc0020172
c000a8a4:	e8 76 60 00 00       	call   c001091f <KePanic(char const*)>
c000a8a9:	83 c4 10             	add    esp,0x10
c000a8ac:	c9                   	leave  
c000a8ad:	c3                   	ret    

c000a8ae <__cxa_pure_virtual>:
c000a8ae:	83 ec 18             	sub    esp,0x18
c000a8b1:	68 8a 01 02 c0       	push   0xc002018a
c000a8b6:	e8 64 60 00 00       	call   c001091f <KePanic(char const*)>
c000a8bb:	83 c4 1c             	add    esp,0x1c
c000a8be:	c3                   	ret    

c000a8bf <operator new[](unsigned long)>:
c000a8bf:	e9 ea d1 ff ff       	jmp    c0007aae <malloc>

c000a8c4 <operator delete(void*, unsigned long)>:
c000a8c4:	e9 05 d2 ff ff       	jmp    c0007ace <rfree>

c000a8c9 <operator delete[](void*)>:
c000a8c9:	e9 00 d2 ff ff       	jmp    c0007ace <rfree>

c000a8ce <operator delete[](void*, unsigned long)>:
c000a8ce:	e9 fb d1 ff ff       	jmp    c0007ace <rfree>

c000a8d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a8d3:	55                   	push   ebp
c000a8d4:	57                   	push   edi
c000a8d5:	56                   	push   esi
c000a8d6:	be 8f fd 01 c0       	mov    esi,0xc001fd8f
c000a8db:	53                   	push   ebx
c000a8dc:	83 ec 20             	sub    esp,0x20
c000a8df:	a0 8e fd 01 c0       	mov    al,ds:0xc001fd8e
c000a8e4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a8e8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a8ec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a8f0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a8f4:	b8 10 00 00 00       	mov    eax,0x10
c000a8f9:	f7 c7 02 00 00 00    	test   edi,0x2
c000a8ff:	75 60                	jne    c000a961 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a901:	89 c1                	mov    ecx,eax
c000a903:	c1 e9 02             	shr    ecx,0x2
c000a906:	fc                   	cld    
c000a907:	31 d2                	xor    edx,edx
c000a909:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a90b:	a8 02                	test   al,0x2
c000a90d:	74 0b                	je     c000a91a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a90f:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a912:	66 89 17             	mov    WORD PTR [edi],dx
c000a915:	ba 02 00 00 00       	mov    edx,0x2
c000a91a:	a8 01                	test   al,0x1
c000a91c:	74 06                	je     c000a924 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a91e:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a921:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a924:	89 ee                	mov    esi,ebp
c000a926:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a92a:	eb 02                	jmp    c000a92e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a92c:	89 c6                	mov    esi,eax
c000a92e:	31 d2                	xor    edx,edx
c000a930:	83 c1 01             	add    ecx,0x1
c000a933:	89 f0                	mov    eax,esi
c000a935:	f7 f3                	div    ebx
c000a937:	39 de                	cmp    esi,ebx
c000a939:	73 f1                	jae    c000a92c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a93b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a93e:	eb 02                	jmp    c000a942 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a940:	89 c5                	mov    ebp,eax
c000a942:	31 d2                	xor    edx,edx
c000a944:	83 e9 01             	sub    ecx,0x1
c000a947:	89 e8                	mov    eax,ebp
c000a949:	f7 f3                	div    ebx
c000a94b:	39 dd                	cmp    ebp,ebx
c000a94d:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a951:	88 11                	mov    BYTE PTR [ecx],dl
c000a953:	73 eb                	jae    c000a940 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a955:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a959:	83 c4 20             	add    esp,0x20
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a964:	83 c7 02             	add    edi,0x2
c000a967:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a96b:	83 c6 02             	add    esi,0x2
c000a96e:	83 e8 02             	sub    eax,0x2
c000a971:	eb 8e                	jmp    c000a901 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a973 <Dbg::logc(char)>:
c000a973:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a977:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a97e:	75 12                	jne    c000a992 <Dbg::logc(char)+0x1f>
c000a980:	ba fd 03 00 00       	mov    edx,0x3fd
c000a985:	ec                   	in     al,dx
c000a986:	a8 20                	test   al,0x20
c000a988:	74 fb                	je     c000a985 <Dbg::logc(char)+0x12>
c000a98a:	ba f8 03 00 00       	mov    edx,0x3f8
c000a98f:	88 c8                	mov    al,cl
c000a991:	ee                   	out    dx,al
c000a992:	c3                   	ret    

c000a993 <Dbg::logs(char*)>:
c000a993:	53                   	push   ebx
c000a994:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a998:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a99b:	85 c0                	test   eax,eax
c000a99d:	74 11                	je     c000a9b0 <Dbg::logs(char*)+0x1d>
c000a99f:	83 c3 01             	add    ebx,0x1
c000a9a2:	50                   	push   eax
c000a9a3:	e8 cb ff ff ff       	call   c000a973 <Dbg::logc(char)>
c000a9a8:	58                   	pop    eax
c000a9a9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9ac:	85 c0                	test   eax,eax
c000a9ae:	75 ef                	jne    c000a99f <Dbg::logs(char*)+0xc>
c000a9b0:	5b                   	pop    ebx
c000a9b1:	c3                   	ret    

c000a9b2 <Dbg::logWriteInt(unsigned int)>:
c000a9b2:	83 ec 10             	sub    esp,0x10
c000a9b5:	6a 0a                	push   0xa
c000a9b7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a9bb:	50                   	push   eax
c000a9bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a9c0:	50                   	push   eax
c000a9c1:	e8 0d ff ff ff       	call   c000a8d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9c6:	50                   	push   eax
c000a9c7:	e8 c7 ff ff ff       	call   c000a993 <Dbg::logs(char*)>
c000a9cc:	83 c4 20             	add    esp,0x20
c000a9cf:	c3                   	ret    

c000a9d0 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a9d0:	83 ec 10             	sub    esp,0x10
c000a9d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9d7:	50                   	push   eax
c000a9d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a9dc:	50                   	push   eax
c000a9dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a9e1:	52                   	push   edx
c000a9e2:	e8 ec fe ff ff       	call   c000a8d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9e7:	50                   	push   eax
c000a9e8:	e8 a6 ff ff ff       	call   c000a993 <Dbg::logs(char*)>
c000a9ed:	83 c4 20             	add    esp,0x20
c000a9f0:	c3                   	ret    

c000a9f1 <Dbg::kprintf(char const*, ...)>:
c000a9f1:	55                   	push   ebp
c000a9f2:	57                   	push   edi
c000a9f3:	56                   	push   esi
c000a9f4:	53                   	push   ebx
c000a9f5:	83 ec 0c             	sub    esp,0xc
c000a9f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9fc:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000aa03:	74 08                	je     c000aa0d <Dbg::kprintf(char const*, ...)+0x1c>
c000aa05:	83 c4 0c             	add    esp,0xc
c000aa08:	5b                   	pop    ebx
c000aa09:	5e                   	pop    esi
c000aa0a:	5f                   	pop    edi
c000aa0b:	5d                   	pop    ebp
c000aa0c:	c3                   	ret    
c000aa0d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000aa11:	31 ff                	xor    edi,edi
c000aa13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa17:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aa1a:	85 c0                	test   eax,eax
c000aa1c:	74 e7                	je     c000aa05 <Dbg::kprintf(char const*, ...)+0x14>
c000aa1e:	8d 77 01             	lea    esi,[edi+0x1]
c000aa21:	83 f8 25             	cmp    eax,0x25
c000aa24:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa27:	75 47                	jne    c000aa70 <Dbg::kprintf(char const*, ...)+0x7f>
c000aa29:	83 c7 02             	add    edi,0x2
c000aa2c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa2f:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000aa32:	83 e8 25             	sub    eax,0x25
c000aa35:	0f b6 c0             	movzx  eax,al
c000aa38:	83 f8 53             	cmp    eax,0x53
c000aa3b:	0f 87 ce 00 00 00    	ja     c000ab0f <Dbg::kprintf(char const*, ...)+0x11e>
c000aa41:	ff 24 85 a0 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfe60]
c000aa48:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa4c:	89 c8                	mov    eax,ecx
c000aa4e:	83 c1 04             	add    ecx,0x4
c000aa51:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa55:	8b 28                	mov    ebp,DWORD PTR [eax]
c000aa57:	55                   	push   ebp
c000aa58:	e8 55 ff ff ff       	call   c000a9b2 <Dbg::logWriteInt(unsigned int)>
c000aa5d:	58                   	pop    eax
c000aa5e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa61:	85 c0                	test   eax,eax
c000aa63:	74 a0                	je     c000aa05 <Dbg::kprintf(char const*, ...)+0x14>
c000aa65:	8d 77 01             	lea    esi,[edi+0x1]
c000aa68:	83 f8 25             	cmp    eax,0x25
c000aa6b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa6e:	74 b9                	je     c000aa29 <Dbg::kprintf(char const*, ...)+0x38>
c000aa70:	50                   	push   eax
c000aa71:	89 f7                	mov    edi,esi
c000aa73:	e8 fb fe ff ff       	call   c000a973 <Dbg::logc(char)>
c000aa78:	89 ee                	mov    esi,ebp
c000aa7a:	58                   	pop    eax
c000aa7b:	eb e1                	jmp    c000aa5e <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa81:	89 c8                	mov    eax,ecx
c000aa83:	83 c1 04             	add    ecx,0x4
c000aa86:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa88:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa8c:	50                   	push   eax
c000aa8d:	e8 01 ff ff ff       	call   c000a993 <Dbg::logs(char*)>
c000aa92:	58                   	pop    eax
c000aa93:	eb c9                	jmp    c000aa5e <Dbg::kprintf(char const*, ...)+0x6d>
c000aa95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa99:	89 d0                	mov    eax,edx
c000aa9b:	83 c2 04             	add    edx,0x4
c000aa9e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaa2:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa4:	50                   	push   eax
c000aaa5:	e8 08 ff ff ff       	call   c000a9b2 <Dbg::logWriteInt(unsigned int)>
c000aaaa:	58                   	pop    eax
c000aaab:	eb b1                	jmp    c000aa5e <Dbg::kprintf(char const*, ...)+0x6d>
c000aaad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aab1:	89 d0                	mov    eax,edx
c000aab3:	83 c2 04             	add    edx,0x4
c000aab6:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aab9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aabd:	50                   	push   eax
c000aabe:	e8 b0 fe ff ff       	call   c000a973 <Dbg::logc(char)>
c000aac3:	58                   	pop    eax
c000aac4:	eb 98                	jmp    c000aa5e <Dbg::kprintf(char const*, ...)+0x6d>
c000aac6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aaca:	89 c8                	mov    eax,ecx
c000aacc:	83 c1 04             	add    ecx,0x4
c000aacf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aad3:	6a 10                	push   0x10
c000aad5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aad7:	51                   	push   ecx
c000aad8:	e8 f3 fe ff ff       	call   c000a9d0 <Dbg::logWriteIntBase(unsigned int, int)>
c000aadd:	5d                   	pop    ebp
c000aade:	58                   	pop    eax
c000aadf:	e9 7a ff ff ff       	jmp    c000aa5e <Dbg::kprintf(char const*, ...)+0x6d>
c000aae4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aae8:	89 d0                	mov    eax,edx
c000aaea:	83 c2 08             	add    edx,0x8
c000aaed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf1:	6a 10                	push   0x10
c000aaf3:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaf5:	50                   	push   eax
c000aaf6:	e8 d5 fe ff ff       	call   c000a9d0 <Dbg::logWriteIntBase(unsigned int, int)>
c000aafb:	58                   	pop    eax
c000aafc:	5a                   	pop    edx
c000aafd:	e9 5c ff ff ff       	jmp    c000aa5e <Dbg::kprintf(char const*, ...)+0x6d>
c000ab02:	6a 25                	push   0x25
c000ab04:	e8 6a fe ff ff       	call   c000a973 <Dbg::logc(char)>
c000ab09:	5a                   	pop    edx
c000ab0a:	e9 4f ff ff ff       	jmp    c000aa5e <Dbg::kprintf(char const*, ...)+0x6d>
c000ab0f:	6a 25                	push   0x25
c000ab11:	e8 5d fe ff ff       	call   c000a973 <Dbg::logc(char)>
c000ab16:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ab1a:	50                   	push   eax
c000ab1b:	e8 53 fe ff ff       	call   c000a973 <Dbg::logc(char)>
c000ab20:	5a                   	pop    edx
c000ab21:	59                   	pop    ecx
c000ab22:	e9 37 ff ff ff       	jmp    c000aa5e <Dbg::kprintf(char const*, ...)+0x6d>
c000ab27:	90                   	nop

c000ab28 <File::read(unsigned long long, void*, int*)>:
c000ab28:	53                   	push   ebx
c000ab29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab2d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab31:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab38:	83 f8 19             	cmp    eax,0x19
c000ab3b:	77 35                	ja     c000ab72 <File::read(unsigned long long, void*, int*)+0x4a>
c000ab3d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab44:	85 c0                	test   eax,eax
c000ab46:	74 2a                	je     c000ab72 <File::read(unsigned long long, void*, int*)+0x4a>
c000ab48:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab4e:	85 c0                	test   eax,eax
c000ab50:	74 20                	je     c000ab72 <File::read(unsigned long long, void*, int*)+0x4a>
c000ab52:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab56:	74 21                	je     c000ab79 <File::read(unsigned long long, void*, int*)+0x51>
c000ab58:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab5a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab5e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab6c:	5b                   	pop    ebx
c000ab6d:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab70:	ff e0                	jmp    eax
c000ab72:	b8 0b 00 00 00       	mov    eax,0xb
c000ab77:	eb 05                	jmp    c000ab7e <File::read(unsigned long long, void*, int*)+0x56>
c000ab79:	b8 05 00 00 00       	mov    eax,0x5
c000ab7e:	5b                   	pop    ebx
c000ab7f:	c3                   	ret    

c000ab80 <File::write(unsigned long long, void*, int*)>:
c000ab80:	53                   	push   ebx
c000ab81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab85:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab89:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab90:	83 f8 19             	cmp    eax,0x19
c000ab93:	77 35                	ja     c000abca <File::write(unsigned long long, void*, int*)+0x4a>
c000ab95:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab9c:	85 c0                	test   eax,eax
c000ab9e:	74 2a                	je     c000abca <File::write(unsigned long long, void*, int*)+0x4a>
c000aba0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aba6:	85 c0                	test   eax,eax
c000aba8:	74 20                	je     c000abca <File::write(unsigned long long, void*, int*)+0x4a>
c000abaa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abae:	74 21                	je     c000abd1 <File::write(unsigned long long, void*, int*)+0x51>
c000abb0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abb2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abb6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc4:	5b                   	pop    ebx
c000abc5:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000abc8:	ff e0                	jmp    eax
c000abca:	b8 0b 00 00 00       	mov    eax,0xb
c000abcf:	eb 05                	jmp    c000abd6 <File::write(unsigned long long, void*, int*)+0x56>
c000abd1:	b8 05 00 00 00       	mov    eax,0x5
c000abd6:	5b                   	pop    ebx
c000abd7:	c3                   	ret    

c000abd8 <Directory::read(unsigned long long, void*, int*)>:
c000abd8:	53                   	push   ebx
c000abd9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abdd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000abe1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000abe8:	83 f8 19             	cmp    eax,0x19
c000abeb:	77 35                	ja     c000ac22 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abed:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abf4:	85 c0                	test   eax,eax
c000abf6:	74 2a                	je     c000ac22 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abf8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abfe:	85 c0                	test   eax,eax
c000ac00:	74 20                	je     c000ac22 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ac02:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac06:	74 21                	je     c000ac29 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ac08:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac0e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac1c:	5b                   	pop    ebx
c000ac1d:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ac20:	ff e0                	jmp    eax
c000ac22:	b8 0b 00 00 00       	mov    eax,0xb
c000ac27:	eb 05                	jmp    c000ac2e <Directory::read(unsigned long long, void*, int*)+0x56>
c000ac29:	b8 05 00 00 00       	mov    eax,0x5
c000ac2e:	5b                   	pop    ebx
c000ac2f:	c3                   	ret    

c000ac30 <Directory::write(unsigned long long, void*, int*)>:
c000ac30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac34:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ac3b:	b8 0b 00 00 00       	mov    eax,0xb
c000ac40:	83 fa 19             	cmp    edx,0x19
c000ac43:	77 18                	ja     c000ac5d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac45:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ac4c:	85 d2                	test   edx,edx
c000ac4e:	74 0d                	je     c000ac5d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac50:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ac57:	19 c0                	sbb    eax,eax
c000ac59:	83 e0 0a             	and    eax,0xa
c000ac5c:	40                   	inc    eax
c000ac5d:	c3                   	ret    

c000ac5e <File::isAtty()>:
c000ac5e:	31 c0                	xor    eax,eax
c000ac60:	c3                   	ret    
c000ac61:	90                   	nop

c000ac62 <Directory::isAtty()>:
c000ac62:	31 c0                	xor    eax,eax
c000ac64:	c3                   	ret    
c000ac65:	90                   	nop

c000ac66 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ac66:	b8 0a 00 00 00       	mov    eax,0xa
c000ac6b:	c3                   	ret    

c000ac6c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ac6c:	b8 0a 00 00 00       	mov    eax,0xa
c000ac71:	c3                   	ret    

c000ac72 <Filesystem::allocateSwapfile(char const*, int)>:
c000ac72:	31 c0                	xor    eax,eax
c000ac74:	31 d2                	xor    edx,edx
c000ac76:	c3                   	ret    
c000ac77:	90                   	nop

c000ac78 <File::~File()>:
c000ac78:	83 ec 0c             	sub    esp,0xc
c000ac7b:	ba 60 03 02 c0       	mov    edx,0xc0020360
c000ac80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac84:	89 10                	mov    DWORD PTR [eax],edx
c000ac86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac8a:	83 ec 0c             	sub    esp,0xc
c000ac8d:	50                   	push   eax
c000ac8e:	e8 21 e7 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000ac93:	83 c4 10             	add    esp,0x10
c000ac96:	90                   	nop
c000ac97:	83 c4 0c             	add    esp,0xc
c000ac9a:	c3                   	ret    
c000ac9b:	90                   	nop

c000ac9c <File::~File()>:
c000ac9c:	83 ec 0c             	sub    esp,0xc
c000ac9f:	83 ec 0c             	sub    esp,0xc
c000aca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca6:	e8 cd ff ff ff       	call   c000ac78 <File::~File()>
c000acab:	83 c4 10             	add    esp,0x10
c000acae:	83 ec 08             	sub    esp,0x8
c000acb1:	68 14 01 00 00       	push   0x114
c000acb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acba:	e8 05 fc ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000acbf:	83 c4 10             	add    esp,0x10
c000acc2:	83 c4 0c             	add    esp,0xc
c000acc5:	c3                   	ret    

c000acc6 <Directory::~Directory()>:
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	ba 7c 03 02 c0       	mov    edx,0xc002037c
c000acce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acd2:	89 10                	mov    DWORD PTR [eax],edx
c000acd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acd8:	83 ec 0c             	sub    esp,0xc
c000acdb:	50                   	push   eax
c000acdc:	e8 d3 e6 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000ace1:	83 c4 10             	add    esp,0x10
c000ace4:	90                   	nop
c000ace5:	83 c4 0c             	add    esp,0xc
c000ace8:	c3                   	ret    
c000ace9:	90                   	nop

c000acea <Directory::~Directory()>:
c000acea:	83 ec 0c             	sub    esp,0xc
c000aced:	83 ec 0c             	sub    esp,0xc
c000acf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acf4:	e8 cd ff ff ff       	call   c000acc6 <Directory::~Directory()>
c000acf9:	83 c4 10             	add    esp,0x10
c000acfc:	83 ec 08             	sub    esp,0x8
c000acff:	68 14 01 00 00       	push   0x114
c000ad04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad08:	e8 b7 fb ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000ad0d:	83 c4 10             	add    esp,0x10
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <Filesystem::Filesystem()>:
c000ad14:	ba f8 02 02 c0       	mov    edx,0xc00202f8
c000ad19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad1d:	89 10                	mov    DWORD PTR [eax],edx
c000ad1f:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ad25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad29:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad30:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ad35:	90                   	nop
c000ad36:	c3                   	ret    
c000ad37:	90                   	nop

c000ad38 <Filesystem::~Filesystem()>:
c000ad38:	ba f8 02 02 c0       	mov    edx,0xc00202f8
c000ad3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad41:	89 10                	mov    DWORD PTR [eax],edx
c000ad43:	90                   	nop
c000ad44:	c3                   	ret    
c000ad45:	90                   	nop

c000ad46 <Filesystem::~Filesystem()>:
c000ad46:	83 ec 0c             	sub    esp,0xc
c000ad49:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad4d:	e8 e6 ff ff ff       	call   c000ad38 <Filesystem::~Filesystem()>
c000ad52:	83 c4 04             	add    esp,0x4
c000ad55:	83 ec 08             	sub    esp,0x8
c000ad58:	6a 08                	push   0x8
c000ad5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad5e:	e8 61 fb ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000ad63:	83 c4 10             	add    esp,0x10
c000ad66:	83 c4 0c             	add    esp,0xc
c000ad69:	c3                   	ret    

c000ad6a <Fs::getcwd(Process*, char*, int)>:
c000ad6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad6e:	31 c0                	xor    eax,eax
c000ad70:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad73:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad77:	7d 15                	jge    c000ad8e <Fs::getcwd(Process*, char*, int)+0x24>
c000ad79:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad7d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad84:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad87:	84 c9                	test   cl,cl
c000ad89:	74 06                	je     c000ad91 <Fs::getcwd(Process*, char*, int)+0x27>
c000ad8b:	40                   	inc    eax
c000ad8c:	eb e2                	jmp    c000ad70 <Fs::getcwd(Process*, char*, int)+0x6>
c000ad8e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad91:	31 c0                	xor    eax,eax
c000ad93:	c3                   	ret    

c000ad94 <Fs::initVFS()>:
c000ad94:	83 ec 18             	sub    esp,0x18
c000ad97:	6a 08                	push   0x8
c000ad99:	e8 10 cd ff ff       	call   c0007aae <malloc>
c000ad9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ada1:	e8 be dd 00 00       	call   c0018b64 <FAT::FAT()>
c000ada6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000adad:	e8 fc cc ff ff       	call   c0007aae <malloc>
c000adb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb5:	e8 d0 ec 00 00       	call   c0019a8a <ISO9660::ISO9660()>
c000adba:	83 c4 1c             	add    esp,0x1c
c000adbd:	c3                   	ret    

c000adbe <Fs::standardiseFiles(char*, char const*, char const*)>:
c000adbe:	55                   	push   ebp
c000adbf:	57                   	push   edi
c000adc0:	56                   	push   esi
c000adc1:	53                   	push   ebx
c000adc2:	81 ec 10 04 00 00    	sub    esp,0x410
c000adc8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000adcf:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000add6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000addd:	68 00 04 00 00       	push   0x400
c000ade2:	6a 00                	push   0x0
c000ade4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ade8:	56                   	push   esi
c000ade9:	e8 02 57 ff ff       	call   c00004f0 <memset>
c000adee:	83 c4 10             	add    esp,0x10
c000adf1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000adf5:	75 0b                	jne    c000ae02 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000adf7:	50                   	push   eax
c000adf8:	50                   	push   eax
c000adf9:	57                   	push   edi
c000adfa:	56                   	push   esi
c000adfb:	e8 40 58 ff ff       	call   c0000640 <strcpy>
c000ae00:	eb 44                	jmp    c000ae46 <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000ae02:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ae05:	83 f8 5c             	cmp    eax,0x5c
c000ae08:	74 05                	je     c000ae0f <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ae0a:	83 f8 2f             	cmp    eax,0x2f
c000ae0d:	75 18                	jne    c000ae27 <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000ae0f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ae12:	3c 60                	cmp    al,0x60
c000ae14:	7e 03                	jle    c000ae19 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ae16:	83 e8 20             	sub    eax,0x20
c000ae19:	88 04 24             	mov    BYTE PTR [esp],al
c000ae1c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae23:	50                   	push   eax
c000ae24:	50                   	push   eax
c000ae25:	eb 18                	jmp    c000ae3f <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000ae27:	50                   	push   eax
c000ae28:	50                   	push   eax
c000ae29:	55                   	push   ebp
c000ae2a:	56                   	push   esi
c000ae2b:	e8 10 58 ff ff       	call   c0000640 <strcpy>
c000ae30:	5a                   	pop    edx
c000ae31:	59                   	pop    ecx
c000ae32:	68 73 12 02 c0       	push   0xc0021273
c000ae37:	56                   	push   esi
c000ae38:	e8 03 5a ff ff       	call   c0000840 <strcat>
c000ae3d:	5d                   	pop    ebp
c000ae3e:	58                   	pop    eax
c000ae3f:	57                   	push   edi
c000ae40:	56                   	push   esi
c000ae41:	e8 fa 59 ff ff       	call   c0000840 <strcat>
c000ae46:	83 c4 10             	add    esp,0x10
c000ae49:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ae4c:	3c 60                	cmp    al,0x60
c000ae4e:	7e 03                	jle    c000ae53 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000ae50:	83 e8 20             	sub    eax,0x20
c000ae53:	88 04 24             	mov    BYTE PTR [esp],al
c000ae56:	88 03                	mov    BYTE PTR [ebx],al
c000ae58:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae5f:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ae65:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ae69:	bf 03 00 00 00       	mov    edi,0x3
c000ae6e:	b8 03 00 00 00       	mov    eax,0x3
c000ae73:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000ae77:	89 ea                	mov    edx,ebp
c000ae79:	85 ed                	test   ebp,ebp
c000ae7b:	0f 84 97 00 00 00    	je     c000af18 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000ae81:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ae84:	83 fd 5c             	cmp    ebp,0x5c
c000ae87:	74 05                	je     c000ae8e <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000ae89:	83 fd 2f             	cmp    ebp,0x2f
c000ae8c:	75 12                	jne    c000aea0 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae8e:	89 c5                	mov    ebp,eax
c000ae90:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae95:	74 09                	je     c000aea0 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae97:	40                   	inc    eax
c000ae98:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae9c:	89 cf                	mov    edi,ecx
c000ae9e:	eb d3                	jmp    c000ae73 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000aea0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aea5:	0f be ea             	movsx  ebp,dl
c000aea8:	75 5e                	jne    c000af08 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000aeaa:	83 fd 2e             	cmp    ebp,0x2e
c000aead:	75 59                	jne    c000af08 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000aeaf:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aeb3:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000aeb8:	74 18                	je     c000aed2 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000aeba:	83 fd 2e             	cmp    ebp,0x2e
c000aebd:	74 53                	je     c000af12 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000aebf:	89 f9                	mov    ecx,edi
c000aec1:	41                   	inc    ecx
c000aec2:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000aec6:	83 fa 2f             	cmp    edx,0x2f
c000aec9:	74 f6                	je     c000aec1 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000aecb:	83 fa 5c             	cmp    edx,0x5c
c000aece:	74 f1                	je     c000aec1 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000aed0:	eb ca                	jmp    c000ae9c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aed2:	83 fd 2e             	cmp    ebp,0x2e
c000aed5:	74 3b                	je     c000af12 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000aed7:	83 f8 03             	cmp    eax,0x3
c000aeda:	74 c0                	je     c000ae9c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aedc:	41                   	inc    ecx
c000aedd:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000aee1:	83 fa 2f             	cmp    edx,0x2f
c000aee4:	74 f6                	je     c000aedc <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000aee6:	83 fa 5c             	cmp    edx,0x5c
c000aee9:	74 f1                	je     c000aedc <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000aeeb:	48                   	dec    eax
c000aeec:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aef0:	75 06                	jne    c000aef8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000aef2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aef6:	eb f3                	jmp    c000aeeb <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000aef8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aefc:	74 07                	je     c000af05 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000aefe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af02:	48                   	dec    eax
c000af03:	eb f3                	jmp    c000aef8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000af05:	40                   	inc    eax
c000af06:	eb 94                	jmp    c000ae9c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af08:	83 fd 2f             	cmp    ebp,0x2f
c000af0b:	74 8f                	je     c000ae9c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af0d:	83 fd 5c             	cmp    ebp,0x5c
c000af10:	74 8a                	je     c000ae9c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af12:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000af15:	40                   	inc    eax
c000af16:	eb 84                	jmp    c000ae9c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af18:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af1c:	83 ec 0c             	sub    esp,0xc
c000af1f:	53                   	push   ebx
c000af20:	e8 4b 56 ff ff       	call   c0000570 <strlen>
c000af25:	83 c4 10             	add    esp,0x10
c000af28:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000af2d:	75 26                	jne    c000af55 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000af2f:	83 ec 0c             	sub    esp,0xc
c000af32:	53                   	push   ebx
c000af33:	e8 38 56 ff ff       	call   c0000570 <strlen>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000af40:	74 26                	je     c000af68 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000af42:	83 ec 0c             	sub    esp,0xc
c000af45:	53                   	push   ebx
c000af46:	e8 25 56 ff ff       	call   c0000570 <strlen>
c000af4b:	83 c4 10             	add    esp,0x10
c000af4e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000af53:	eb c7                	jmp    c000af1c <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000af55:	83 ec 0c             	sub    esp,0xc
c000af58:	53                   	push   ebx
c000af59:	e8 12 56 ff ff       	call   c0000570 <strlen>
c000af5e:	83 c4 10             	add    esp,0x10
c000af61:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af66:	74 c7                	je     c000af2f <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000af68:	81 c4 0c 04 00 00    	add    esp,0x40c
c000af6e:	5b                   	pop    ebx
c000af6f:	5e                   	pop    esi
c000af70:	5f                   	pop    edi
c000af71:	5d                   	pop    ebp
c000af72:	c3                   	ret    
c000af73:	90                   	nop

c000af74 <File::File(char const*, Process*)>:
c000af74:	83 ec 0c             	sub    esp,0xc
c000af77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7b:	83 ec 08             	sub    esp,0x8
c000af7e:	6a 00                	push   0x0
c000af80:	50                   	push   eax
c000af81:	e8 48 e2 ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c000af86:	83 c4 10             	add    esp,0x10
c000af89:	ba 60 03 02 c0       	mov    edx,0xc0020360
c000af8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af92:	89 10                	mov    DWORD PTR [eax],edx
c000af94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af98:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa2:	83 c0 0d             	add    eax,0xd
c000afa5:	83 ec 04             	sub    esp,0x4
c000afa8:	52                   	push   edx
c000afa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afad:	50                   	push   eax
c000afae:	e8 0b fe ff ff       	call   c000adbe <Fs::standardiseFiles(char*, char const*, char const*)>
c000afb3:	83 c4 10             	add    esp,0x10
c000afb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afba:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afbd:	83 e8 41             	sub    eax,0x41
c000afc0:	88 c2                	mov    dl,al
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afde:	0f b6 c0             	movzx  eax,al
c000afe1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afe8:	85 c0                	test   eax,eax
c000afea:	74 3e                	je     c000b02a <File::File(char const*, Process*)+0xb6>
c000afec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aff6:	0f b6 c0             	movzx  eax,al
c000aff9:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b000:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b006:	85 c0                	test   eax,eax
c000b008:	75 20                	jne    c000b02a <File::File(char const*, Process*)+0xb6>
c000b00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b014:	0f b6 c0             	movzx  eax,al
c000b017:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	50                   	push   eax
c000b022:	e8 1f 21 00 00       	call   c000d146 <LogicalDisk::mount()>
c000b027:	83 c4 10             	add    esp,0x10
c000b02a:	90                   	nop
c000b02b:	83 c4 0c             	add    esp,0xc
c000b02e:	c3                   	ret    
c000b02f:	90                   	nop

c000b030 <File::open(FileOpenMode)>:
c000b030:	53                   	push   ebx
c000b031:	b8 0b 00 00 00       	mov    eax,0xb
c000b036:	83 ec 08             	sub    esp,0x8
c000b039:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b03d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b044:	83 fa 19             	cmp    edx,0x19
c000b047:	77 40                	ja     c000b089 <File::open(FileOpenMode)+0x59>
c000b049:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b050:	85 d2                	test   edx,edx
c000b052:	74 35                	je     c000b089 <File::open(FileOpenMode)+0x59>
c000b054:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b05a:	85 d2                	test   edx,edx
c000b05c:	74 2b                	je     c000b089 <File::open(FileOpenMode)+0x59>
c000b05e:	b8 06 00 00 00       	mov    eax,0x6
c000b063:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b067:	75 20                	jne    c000b089 <File::open(FileOpenMode)+0x59>
c000b069:	8b 02                	mov    eax,DWORD PTR [edx]
c000b06b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b071:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b075:	51                   	push   ecx
c000b076:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b079:	51                   	push   ecx
c000b07a:	52                   	push   edx
c000b07b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b07e:	83 c4 10             	add    esp,0x10
c000b081:	85 c0                	test   eax,eax
c000b083:	75 04                	jne    c000b089 <File::open(FileOpenMode)+0x59>
c000b085:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b089:	83 c4 08             	add    esp,0x8
c000b08c:	5b                   	pop    ebx
c000b08d:	c3                   	ret    

c000b08e <File::close()>:
c000b08e:	53                   	push   ebx
c000b08f:	b8 0b 00 00 00       	mov    eax,0xb
c000b094:	83 ec 08             	sub    esp,0x8
c000b097:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b09b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b0a2:	83 f9 19             	cmp    ecx,0x19
c000b0a5:	77 41                	ja     c000b0e8 <File::close()+0x5a>
c000b0a7:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b0ae:	85 db                	test   ebx,ebx
c000b0b0:	74 36                	je     c000b0e8 <File::close()+0x5a>
c000b0b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b0b9:	74 2d                	je     c000b0e8 <File::close()+0x5a>
c000b0bb:	b8 05 00 00 00       	mov    eax,0x5
c000b0c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0c4:	74 22                	je     c000b0e8 <File::close()+0x5a>
c000b0c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b0ca:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b0d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b0d7:	53                   	push   ebx
c000b0d8:	53                   	push   ebx
c000b0d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b0db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b0e1:	50                   	push   eax
c000b0e2:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	83 c4 08             	add    esp,0x8
c000b0eb:	5b                   	pop    ebx
c000b0ec:	c3                   	ret    
c000b0ed:	90                   	nop

c000b0ee <File::seek(unsigned long long)>:
c000b0ee:	56                   	push   esi
c000b0ef:	53                   	push   ebx
c000b0f0:	b8 0b 00 00 00       	mov    eax,0xb
c000b0f5:	51                   	push   ecx
c000b0f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b0fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b0fe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b105:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b109:	83 fa 19             	cmp    edx,0x19
c000b10c:	77 31                	ja     c000b13f <File::seek(unsigned long long)+0x51>
c000b10e:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b115:	85 d2                	test   edx,edx
c000b117:	74 26                	je     c000b13f <File::seek(unsigned long long)+0x51>
c000b119:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b11f:	85 d2                	test   edx,edx
c000b121:	74 1c                	je     c000b13f <File::seek(unsigned long long)+0x51>
c000b123:	b8 05 00 00 00       	mov    eax,0x5
c000b128:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b12c:	74 11                	je     c000b13f <File::seek(unsigned long long)+0x51>
c000b12e:	8b 02                	mov    eax,DWORD PTR [edx]
c000b130:	53                   	push   ebx
c000b131:	51                   	push   ecx
c000b132:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b138:	52                   	push   edx
c000b139:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b13c:	83 c4 10             	add    esp,0x10
c000b13f:	5a                   	pop    edx
c000b140:	5b                   	pop    ebx
c000b141:	5e                   	pop    esi
c000b142:	c3                   	ret    
c000b143:	90                   	nop

c000b144 <File::tell(unsigned long long*)>:
c000b144:	83 ec 0c             	sub    esp,0xc
c000b147:	b8 0b 00 00 00       	mov    eax,0xb
c000b14c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b150:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b157:	83 fa 19             	cmp    edx,0x19
c000b15a:	77 34                	ja     c000b190 <File::tell(unsigned long long*)+0x4c>
c000b15c:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b163:	85 d2                	test   edx,edx
c000b165:	74 29                	je     c000b190 <File::tell(unsigned long long*)+0x4c>
c000b167:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b16d:	85 d2                	test   edx,edx
c000b16f:	74 1f                	je     c000b190 <File::tell(unsigned long long*)+0x4c>
c000b171:	b8 05 00 00 00       	mov    eax,0x5
c000b176:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b17a:	74 14                	je     c000b190 <File::tell(unsigned long long*)+0x4c>
c000b17c:	50                   	push   eax
c000b17d:	8b 02                	mov    eax,DWORD PTR [edx]
c000b17f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b183:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b189:	52                   	push   edx
c000b18a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b18d:	83 c4 10             	add    esp,0x10
c000b190:	83 c4 0c             	add    esp,0xc
c000b193:	c3                   	ret    

c000b194 <File::rewind()>:
c000b194:	83 ec 10             	sub    esp,0x10
c000b197:	6a 00                	push   0x0
c000b199:	6a 00                	push   0x0
c000b19b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b19f:	e8 4a ff ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c000b1a4:	83 c4 1c             	add    esp,0x1c
c000b1a7:	c3                   	ret    

c000b1a8 <File::unlink()>:
c000b1a8:	83 ec 0c             	sub    esp,0xc
c000b1ab:	b8 0b 00 00 00       	mov    eax,0xb
c000b1b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1bb:	83 f9 19             	cmp    ecx,0x19
c000b1be:	77 2f                	ja     c000b1ef <File::unlink()+0x47>
c000b1c0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1c7:	85 c9                	test   ecx,ecx
c000b1c9:	74 24                	je     c000b1ef <File::unlink()+0x47>
c000b1cb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1d1:	85 c9                	test   ecx,ecx
c000b1d3:	74 1a                	je     c000b1ef <File::unlink()+0x47>
c000b1d5:	b8 06 00 00 00       	mov    eax,0x6
c000b1da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1de:	75 0f                	jne    c000b1ef <File::unlink()+0x47>
c000b1e0:	83 c2 0d             	add    edx,0xd
c000b1e3:	50                   	push   eax
c000b1e4:	50                   	push   eax
c000b1e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1e7:	52                   	push   edx
c000b1e8:	51                   	push   ecx
c000b1e9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1ec:	83 c4 10             	add    esp,0x10
c000b1ef:	83 c4 0c             	add    esp,0xc
c000b1f2:	c3                   	ret    
c000b1f3:	90                   	nop

c000b1f4 <File::rename(char const*)>:
c000b1f4:	83 ec 0c             	sub    esp,0xc
c000b1f7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b200:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b207:	83 f9 19             	cmp    ecx,0x19
c000b20a:	77 32                	ja     c000b23e <File::rename(char const*)+0x4a>
c000b20c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b213:	85 c9                	test   ecx,ecx
c000b215:	74 27                	je     c000b23e <File::rename(char const*)+0x4a>
c000b217:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b21d:	85 c9                	test   ecx,ecx
c000b21f:	74 1d                	je     c000b23e <File::rename(char const*)+0x4a>
c000b221:	b8 06 00 00 00       	mov    eax,0x6
c000b226:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b22a:	75 12                	jne    c000b23e <File::rename(char const*)+0x4a>
c000b22c:	83 c2 0d             	add    edx,0xd
c000b22f:	50                   	push   eax
c000b230:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b236:	52                   	push   edx
c000b237:	51                   	push   ecx
c000b238:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b23b:	83 c4 10             	add    esp,0x10
c000b23e:	83 c4 0c             	add    esp,0xc
c000b241:	c3                   	ret    

c000b242 <File::chfatattr(unsigned char, unsigned char)>:
c000b242:	57                   	push   edi
c000b243:	b8 0b 00 00 00       	mov    eax,0xb
c000b248:	56                   	push   esi
c000b249:	53                   	push   ebx
c000b24a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b24e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b252:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b259:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b25d:	83 f9 19             	cmp    ecx,0x19
c000b260:	77 37                	ja     c000b299 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b262:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b269:	85 c9                	test   ecx,ecx
c000b26b:	74 2c                	je     c000b299 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b26d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b273:	85 c9                	test   ecx,ecx
c000b275:	74 22                	je     c000b299 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b277:	b8 06 00 00 00       	mov    eax,0x6
c000b27c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b280:	75 17                	jne    c000b299 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b282:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b284:	89 f0                	mov    eax,esi
c000b286:	83 c2 0d             	add    edx,0xd
c000b289:	0f b6 f0             	movzx  esi,al
c000b28c:	0f b6 db             	movzx  ebx,bl
c000b28f:	56                   	push   esi
c000b290:	53                   	push   ebx
c000b291:	52                   	push   edx
c000b292:	51                   	push   ecx
c000b293:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b296:	83 c4 10             	add    esp,0x10
c000b299:	5b                   	pop    ebx
c000b29a:	5e                   	pop    esi
c000b29b:	5f                   	pop    edi
c000b29c:	c3                   	ret    
c000b29d:	90                   	nop

c000b29e <File::exists()>:
c000b29e:	83 ec 0c             	sub    esp,0xc
c000b2a1:	31 c0                	xor    eax,eax
c000b2a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2a7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2ae:	83 f9 19             	cmp    ecx,0x19
c000b2b1:	77 24                	ja     c000b2d7 <File::exists()+0x39>
c000b2b3:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2ba:	85 c9                	test   ecx,ecx
c000b2bc:	74 19                	je     c000b2d7 <File::exists()+0x39>
c000b2be:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2c4:	85 c9                	test   ecx,ecx
c000b2c6:	74 0f                	je     c000b2d7 <File::exists()+0x39>
c000b2c8:	83 c2 0d             	add    edx,0xd
c000b2cb:	50                   	push   eax
c000b2cc:	50                   	push   eax
c000b2cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2cf:	52                   	push   edx
c000b2d0:	51                   	push   ecx
c000b2d1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2d4:	83 c4 10             	add    esp,0x10
c000b2d7:	83 c4 0c             	add    esp,0xc
c000b2da:	c3                   	ret    
c000b2db:	90                   	nop

c000b2dc <File::stat(unsigned long long*, bool*)>:
c000b2dc:	56                   	push   esi
c000b2dd:	53                   	push   ebx
c000b2de:	50                   	push   eax
c000b2df:	b8 0b 00 00 00       	mov    eax,0xb
c000b2e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2e8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b2ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2f7:	83 f9 19             	cmp    ecx,0x19
c000b2fa:	77 3d                	ja     c000b339 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2fc:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b303:	85 c9                	test   ecx,ecx
c000b305:	74 32                	je     c000b339 <File::stat(unsigned long long*, bool*)+0x5d>
c000b307:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b30d:	85 c9                	test   ecx,ecx
c000b30f:	74 28                	je     c000b339 <File::stat(unsigned long long*, bool*)+0x5d>
c000b311:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b313:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b317:	74 13                	je     c000b32c <File::stat(unsigned long long*, bool*)+0x50>
c000b319:	83 ec 04             	sub    esp,0x4
c000b31c:	56                   	push   esi
c000b31d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b323:	51                   	push   ecx
c000b324:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b327:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b32a:	eb 0a                	jmp    c000b336 <File::stat(unsigned long long*, bool*)+0x5a>
c000b32c:	53                   	push   ebx
c000b32d:	83 c2 0d             	add    edx,0xd
c000b330:	56                   	push   esi
c000b331:	52                   	push   edx
c000b332:	51                   	push   ecx
c000b333:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b336:	83 c4 10             	add    esp,0x10
c000b339:	5a                   	pop    edx
c000b33a:	5b                   	pop    ebx
c000b33b:	5e                   	pop    esi
c000b33c:	c3                   	ret    

c000b33d <Fs::setcwd(Process*, char*)>:
c000b33d:	55                   	push   ebp
c000b33e:	57                   	push   edi
c000b33f:	56                   	push   esi
c000b340:	53                   	push   ebx
c000b341:	81 ec 20 02 00 00    	sub    esp,0x220
c000b347:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b34e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b354:	57                   	push   edi
c000b355:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b35c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b360:	56                   	push   esi
c000b361:	e8 58 fa ff ff       	call   c000adbe <Fs::standardiseFiles(char*, char const*, char const*)>
c000b366:	89 34 24             	mov    DWORD PTR [esp],esi
c000b369:	e8 02 52 ff ff       	call   c0000570 <strlen>
c000b36e:	83 c4 10             	add    esp,0x10
c000b371:	83 f8 02             	cmp    eax,0x2
c000b374:	77 15                	ja     c000b38b <Fs::setcwd(Process*, char*)+0x4e>
c000b376:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b37b:	83 eb 41             	sub    ebx,0x41
c000b37e:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b385:	85 c0                	test   eax,eax
c000b387:	75 1c                	jne    c000b3a5 <Fs::setcwd(Process*, char*)+0x68>
c000b389:	eb 2f                	jmp    c000b3ba <Fs::setcwd(Process*, char*)+0x7d>
c000b38b:	83 ec 0c             	sub    esp,0xc
c000b38e:	56                   	push   esi
c000b38f:	e8 dc 51 ff ff       	call   c0000570 <strlen>
c000b394:	83 c4 10             	add    esp,0x10
c000b397:	83 f8 03             	cmp    eax,0x3
c000b39a:	75 57                	jne    c000b3f3 <Fs::setcwd(Process*, char*)+0xb6>
c000b39c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b3a1:	75 50                	jne    c000b3f3 <Fs::setcwd(Process*, char*)+0xb6>
c000b3a3:	eb d1                	jmp    c000b376 <Fs::setcwd(Process*, char*)+0x39>
c000b3a5:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b3ac:	75 0c                	jne    c000b3ba <Fs::setcwd(Process*, char*)+0x7d>
c000b3ae:	83 ec 0c             	sub    esp,0xc
c000b3b1:	50                   	push   eax
c000b3b2:	e8 8f 1d 00 00       	call   c000d146 <LogicalDisk::mount()>
c000b3b7:	83 c4 10             	add    esp,0x10
c000b3ba:	b8 03 00 00 00       	mov    eax,0x3
c000b3bf:	83 fb 19             	cmp    ebx,0x19
c000b3c2:	0f 87 c6 00 00 00    	ja     c000b48e <Fs::setcwd(Process*, char*)+0x151>
c000b3c8:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b3cf:	b8 05 00 00 00       	mov    eax,0x5
c000b3d4:	85 d2                	test   edx,edx
c000b3d6:	0f 84 b2 00 00 00    	je     c000b48e <Fs::setcwd(Process*, char*)+0x151>
c000b3dc:	b8 06 00 00 00       	mov    eax,0x6
c000b3e1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b3e8:	0f 85 92 00 00 00    	jne    c000b480 <Fs::setcwd(Process*, char*)+0x143>
c000b3ee:	e9 9b 00 00 00       	jmp    c000b48e <Fs::setcwd(Process*, char*)+0x151>
c000b3f3:	83 ec 0c             	sub    esp,0xc
c000b3f6:	68 14 01 00 00       	push   0x114
c000b3fb:	e8 ae c6 ff ff       	call   c0007aae <malloc>
c000b400:	83 c4 0c             	add    esp,0xc
c000b403:	89 c3                	mov    ebx,eax
c000b405:	55                   	push   ebp
c000b406:	56                   	push   esi
c000b407:	50                   	push   eax
c000b408:	e8 67 fb ff ff       	call   c000af74 <File::File(char const*, Process*)>
c000b40d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b412:	83 c4 0c             	add    esp,0xc
c000b415:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b419:	50                   	push   eax
c000b41a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b41e:	50                   	push   eax
c000b41f:	53                   	push   ebx
c000b420:	e8 b7 fe ff ff       	call   c000b2dc <File::stat(unsigned long long*, bool*)>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	83 f8 02             	cmp    eax,0x2
c000b42b:	74 27                	je     c000b454 <Fs::setcwd(Process*, char*)+0x117>
c000b42d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b432:	75 1c                	jne    c000b450 <Fs::setcwd(Process*, char*)+0x113>
c000b434:	b8 02 00 00 00       	mov    eax,0x2
c000b439:	85 db                	test   ebx,ebx
c000b43b:	74 51                	je     c000b48e <Fs::setcwd(Process*, char*)+0x151>
c000b43d:	83 ec 0c             	sub    esp,0xc
c000b440:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b442:	53                   	push   ebx
c000b443:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b446:	83 c4 10             	add    esp,0x10
c000b449:	b8 02 00 00 00       	mov    eax,0x2
c000b44e:	eb 3e                	jmp    c000b48e <Fs::setcwd(Process*, char*)+0x151>
c000b450:	85 c0                	test   eax,eax
c000b452:	74 1c                	je     c000b470 <Fs::setcwd(Process*, char*)+0x133>
c000b454:	b8 01 00 00 00       	mov    eax,0x1
c000b459:	85 db                	test   ebx,ebx
c000b45b:	74 31                	je     c000b48e <Fs::setcwd(Process*, char*)+0x151>
c000b45d:	83 ec 0c             	sub    esp,0xc
c000b460:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b462:	53                   	push   ebx
c000b463:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	b8 01 00 00 00       	mov    eax,0x1
c000b46e:	eb 1e                	jmp    c000b48e <Fs::setcwd(Process*, char*)+0x151>
c000b470:	85 db                	test   ebx,ebx
c000b472:	74 0c                	je     c000b480 <Fs::setcwd(Process*, char*)+0x143>
c000b474:	83 ec 0c             	sub    esp,0xc
c000b477:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b479:	53                   	push   ebx
c000b47a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	50                   	push   eax
c000b481:	50                   	push   eax
c000b482:	56                   	push   esi
c000b483:	57                   	push   edi
c000b484:	e8 b7 51 ff ff       	call   c0000640 <strcpy>
c000b489:	83 c4 10             	add    esp,0x10
c000b48c:	31 c0                	xor    eax,eax
c000b48e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b494:	5b                   	pop    ebx
c000b495:	5e                   	pop    esi
c000b496:	5f                   	pop    edi
c000b497:	5d                   	pop    ebp
c000b498:	c3                   	ret    
c000b499:	90                   	nop

c000b49a <Directory::Directory(char const*, Process*)>:
c000b49a:	83 ec 0c             	sub    esp,0xc
c000b49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a1:	83 ec 08             	sub    esp,0x8
c000b4a4:	6a 00                	push   0x0
c000b4a6:	50                   	push   eax
c000b4a7:	e8 22 dd ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c000b4ac:	83 c4 10             	add    esp,0x10
c000b4af:	ba 7c 03 02 c0       	mov    edx,0xc002037c
c000b4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b8:	89 10                	mov    DWORD PTR [eax],edx
c000b4ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b4be:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c8:	83 c0 0d             	add    eax,0xd
c000b4cb:	83 ec 04             	sub    esp,0x4
c000b4ce:	52                   	push   edx
c000b4cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d3:	50                   	push   eax
c000b4d4:	e8 e5 f8 ff ff       	call   c000adbe <Fs::standardiseFiles(char*, char const*, char const*)>
c000b4d9:	83 c4 10             	add    esp,0x10
c000b4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b4e3:	83 e8 41             	sub    eax,0x41
c000b4e6:	88 c2                	mov    dl,al
c000b4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ec:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fe:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b504:	0f b6 c0             	movzx  eax,al
c000b507:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b50e:	85 c0                	test   eax,eax
c000b510:	74 3e                	je     c000b550 <Directory::Directory(char const*, Process*)+0xb6>
c000b512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b516:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b51c:	0f b6 c0             	movzx  eax,al
c000b51f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b526:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b52c:	85 c0                	test   eax,eax
c000b52e:	75 20                	jne    c000b550 <Directory::Directory(char const*, Process*)+0xb6>
c000b530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b534:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b53a:	0f b6 c0             	movzx  eax,al
c000b53d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b544:	83 ec 0c             	sub    esp,0xc
c000b547:	50                   	push   eax
c000b548:	e8 f9 1b 00 00       	call   c000d146 <LogicalDisk::mount()>
c000b54d:	83 c4 10             	add    esp,0x10
c000b550:	90                   	nop
c000b551:	83 c4 0c             	add    esp,0xc
c000b554:	c3                   	ret    
c000b555:	90                   	nop

c000b556 <Directory::open()>:
c000b556:	53                   	push   ebx
c000b557:	b8 0b 00 00 00       	mov    eax,0xb
c000b55c:	83 ec 08             	sub    esp,0x8
c000b55f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b563:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b56a:	83 fa 19             	cmp    edx,0x19
c000b56d:	77 3d                	ja     c000b5ac <Directory::open()+0x56>
c000b56f:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b576:	85 d2                	test   edx,edx
c000b578:	74 32                	je     c000b5ac <Directory::open()+0x56>
c000b57a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b580:	85 d2                	test   edx,edx
c000b582:	74 28                	je     c000b5ac <Directory::open()+0x56>
c000b584:	b8 06 00 00 00       	mov    eax,0x6
c000b589:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b58d:	75 1d                	jne    c000b5ac <Directory::open()+0x56>
c000b58f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b595:	50                   	push   eax
c000b596:	8b 02                	mov    eax,DWORD PTR [edx]
c000b598:	51                   	push   ecx
c000b599:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b59c:	51                   	push   ecx
c000b59d:	52                   	push   edx
c000b59e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b5a1:	83 c4 10             	add    esp,0x10
c000b5a4:	85 c0                	test   eax,eax
c000b5a6:	75 04                	jne    c000b5ac <Directory::open()+0x56>
c000b5a8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b5ac:	83 c4 08             	add    esp,0x8
c000b5af:	5b                   	pop    ebx
c000b5b0:	c3                   	ret    
c000b5b1:	90                   	nop

c000b5b2 <Directory::close()>:
c000b5b2:	53                   	push   ebx
c000b5b3:	b8 0b 00 00 00       	mov    eax,0xb
c000b5b8:	83 ec 08             	sub    esp,0x8
c000b5bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5bf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5c6:	83 f9 19             	cmp    ecx,0x19
c000b5c9:	77 41                	ja     c000b60c <Directory::close()+0x5a>
c000b5cb:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5d2:	85 db                	test   ebx,ebx
c000b5d4:	74 36                	je     c000b60c <Directory::close()+0x5a>
c000b5d6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b5dd:	74 2d                	je     c000b60c <Directory::close()+0x5a>
c000b5df:	b8 05 00 00 00       	mov    eax,0x5
c000b5e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5e8:	74 22                	je     c000b60c <Directory::close()+0x5a>
c000b5ea:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b5ee:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5f5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5fb:	53                   	push   ebx
c000b5fc:	53                   	push   ebx
c000b5fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5ff:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b605:	50                   	push   eax
c000b606:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b609:	83 c4 10             	add    esp,0x10
c000b60c:	83 c4 08             	add    esp,0x8
c000b60f:	5b                   	pop    ebx
c000b610:	c3                   	ret    
c000b611:	90                   	nop

c000b612 <Directory::unlink()>:
c000b612:	83 ec 0c             	sub    esp,0xc
c000b615:	b8 0b 00 00 00       	mov    eax,0xb
c000b61a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b61e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b625:	83 f9 19             	cmp    ecx,0x19
c000b628:	77 2f                	ja     c000b659 <Directory::unlink()+0x47>
c000b62a:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b631:	85 c9                	test   ecx,ecx
c000b633:	74 24                	je     c000b659 <Directory::unlink()+0x47>
c000b635:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b63b:	85 c9                	test   ecx,ecx
c000b63d:	74 1a                	je     c000b659 <Directory::unlink()+0x47>
c000b63f:	b8 06 00 00 00       	mov    eax,0x6
c000b644:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b648:	75 0f                	jne    c000b659 <Directory::unlink()+0x47>
c000b64a:	83 c2 0d             	add    edx,0xd
c000b64d:	50                   	push   eax
c000b64e:	50                   	push   eax
c000b64f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b651:	52                   	push   edx
c000b652:	51                   	push   ecx
c000b653:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b656:	83 c4 10             	add    esp,0x10
c000b659:	83 c4 0c             	add    esp,0xc
c000b65c:	c3                   	ret    
c000b65d:	90                   	nop

c000b65e <Directory::rename(char const*)>:
c000b65e:	83 ec 0c             	sub    esp,0xc
c000b661:	b8 0b 00 00 00       	mov    eax,0xb
c000b666:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b66a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b671:	83 f9 19             	cmp    ecx,0x19
c000b674:	77 32                	ja     c000b6a8 <Directory::rename(char const*)+0x4a>
c000b676:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b67d:	85 c9                	test   ecx,ecx
c000b67f:	74 27                	je     c000b6a8 <Directory::rename(char const*)+0x4a>
c000b681:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b687:	85 c9                	test   ecx,ecx
c000b689:	74 1d                	je     c000b6a8 <Directory::rename(char const*)+0x4a>
c000b68b:	b8 06 00 00 00       	mov    eax,0x6
c000b690:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b694:	75 12                	jne    c000b6a8 <Directory::rename(char const*)+0x4a>
c000b696:	83 c2 0d             	add    edx,0xd
c000b699:	50                   	push   eax
c000b69a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b69c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6a0:	52                   	push   edx
c000b6a1:	51                   	push   ecx
c000b6a2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b6a5:	83 c4 10             	add    esp,0x10
c000b6a8:	83 c4 0c             	add    esp,0xc
c000b6ab:	c3                   	ret    

c000b6ac <Directory::exists()>:
c000b6ac:	83 ec 0c             	sub    esp,0xc
c000b6af:	31 c0                	xor    eax,eax
c000b6b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6bc:	83 f9 19             	cmp    ecx,0x19
c000b6bf:	77 24                	ja     c000b6e5 <Directory::exists()+0x39>
c000b6c1:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6c8:	85 c9                	test   ecx,ecx
c000b6ca:	74 19                	je     c000b6e5 <Directory::exists()+0x39>
c000b6cc:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6d2:	85 c9                	test   ecx,ecx
c000b6d4:	74 0f                	je     c000b6e5 <Directory::exists()+0x39>
c000b6d6:	83 c2 0d             	add    edx,0xd
c000b6d9:	50                   	push   eax
c000b6da:	50                   	push   eax
c000b6db:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6dd:	52                   	push   edx
c000b6de:	51                   	push   ecx
c000b6df:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b6e2:	83 c4 10             	add    esp,0x10
c000b6e5:	83 c4 0c             	add    esp,0xc
c000b6e8:	c3                   	ret    
c000b6e9:	90                   	nop

c000b6ea <Directory::read(dirent*)>:
c000b6ea:	83 ec 1c             	sub    esp,0x1c
c000b6ed:	b8 0b 00 00 00       	mov    eax,0xb
c000b6f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b6f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6fd:	83 f9 19             	cmp    ecx,0x19
c000b700:	77 30                	ja     c000b732 <Directory::read(dirent*)+0x48>
c000b702:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b709:	85 c9                	test   ecx,ecx
c000b70b:	74 25                	je     c000b732 <Directory::read(dirent*)+0x48>
c000b70d:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b714:	74 1c                	je     c000b732 <Directory::read(dirent*)+0x48>
c000b716:	83 ec 0c             	sub    esp,0xc
c000b719:	8b 02                	mov    eax,DWORD PTR [edx]
c000b71b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b71f:	51                   	push   ecx
c000b720:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b724:	6a 00                	push   0x0
c000b726:	68 10 01 00 00       	push   0x110
c000b72b:	52                   	push   edx
c000b72c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b72f:	83 c4 20             	add    esp,0x20
c000b732:	83 c4 1c             	add    esp,0x1c
c000b735:	c3                   	ret    

c000b736 <Directory::create()>:
c000b736:	83 ec 0c             	sub    esp,0xc
c000b739:	b8 0b 00 00 00       	mov    eax,0xb
c000b73e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b742:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b749:	83 f9 19             	cmp    ecx,0x19
c000b74c:	77 2f                	ja     c000b77d <Directory::create()+0x47>
c000b74e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b755:	85 c9                	test   ecx,ecx
c000b757:	74 24                	je     c000b77d <Directory::create()+0x47>
c000b759:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b75f:	85 c9                	test   ecx,ecx
c000b761:	74 1a                	je     c000b77d <Directory::create()+0x47>
c000b763:	b8 06 00 00 00       	mov    eax,0x6
c000b768:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b76c:	75 0f                	jne    c000b77d <Directory::create()+0x47>
c000b76e:	83 c2 0d             	add    edx,0xd
c000b771:	50                   	push   eax
c000b772:	50                   	push   eax
c000b773:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b775:	52                   	push   edx
c000b776:	51                   	push   ecx
c000b777:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	83 c4 0c             	add    esp,0xc
c000b780:	c3                   	ret    
c000b781:	90                   	nop

c000b782 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b782:	b8 0a 00 00 00       	mov    eax,0xa
c000b787:	c3                   	ret    

c000b788 <Bus::Bus(char const*)>:
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b78f:	83 ec 08             	sub    esp,0x8
c000b792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b796:	50                   	push   eax
c000b797:	e8 22 08 00 00       	call   c000bfbe <Device::Device(char const*)>
c000b79c:	83 c4 10             	add    esp,0x10
c000b79f:	ba 98 03 02 c0       	mov    edx,0xc0020398
c000b7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a8:	89 10                	mov    DWORD PTR [eax],edx
c000b7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ae:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b7b8:	90                   	nop
c000b7b9:	83 c4 0c             	add    esp,0xc
c000b7bc:	c3                   	ret    
c000b7bd:	90                   	nop
c000b7be:	66 90                	xchg   ax,ax

c000b7c0 <Bus::~Bus()>:
c000b7c0:	83 ec 0c             	sub    esp,0xc
c000b7c3:	ba 98 03 02 c0       	mov    edx,0xc0020398
c000b7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7cc:	89 10                	mov    DWORD PTR [eax],edx
c000b7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7d2:	83 ec 0c             	sub    esp,0xc
c000b7d5:	50                   	push   eax
c000b7d6:	e8 4d 05 00 00       	call   c000bd28 <Device::~Device()>
c000b7db:	83 c4 10             	add    esp,0x10
c000b7de:	90                   	nop
c000b7df:	83 c4 0c             	add    esp,0xc
c000b7e2:	c3                   	ret    
c000b7e3:	90                   	nop

c000b7e4 <Bus::~Bus()>:
c000b7e4:	83 ec 0c             	sub    esp,0xc
c000b7e7:	83 ec 0c             	sub    esp,0xc
c000b7ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ee:	e8 cd ff ff ff       	call   c000b7c0 <Bus::~Bus()>
c000b7f3:	83 c4 10             	add    esp,0x10
c000b7f6:	83 ec 08             	sub    esp,0x8
c000b7f9:	68 58 01 00 00       	push   0x158
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	e8 bd f0 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000b807:	83 c4 10             	add    esp,0x10
c000b80a:	83 c4 0c             	add    esp,0xc
c000b80d:	c3                   	ret    

c000b80e <beepThread(void*)>:
c000b80e:	83 ec 0c             	sub    esp,0xc
c000b811:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b816:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b81a:	48                   	dec    eax
c000b81b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b820:	75 01                	jne    c000b823 <beepThread(void*)+0x15>
c000b822:	fb                   	sti    
c000b823:	83 ec 0c             	sub    esp,0xc
c000b826:	6b c2 0a             	imul   eax,edx,0xa
c000b829:	50                   	push   eax
c000b82a:	e8 d5 9b 00 00       	call   c0015404 <milliTenthSleep(unsigned int)>
c000b82f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b836:	e8 b4 ba 00 00       	call   c00172ef <HalMakeBeep(int)>
c000b83b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b843:	83 c4 1c             	add    esp,0x1c
c000b846:	e9 9d 9a 00 00       	jmp    c00152e8 <blockTask(TaskState)>

c000b84b <Krnl::beep(int, int, bool)>:
c000b84b:	56                   	push   esi
c000b84c:	53                   	push   ebx
c000b84d:	83 ec 10             	sub    esp,0x10
c000b850:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b854:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85c:	e8 8e ba 00 00       	call   c00172ef <HalMakeBeep(int)>
c000b861:	83 c4 10             	add    esp,0x10
c000b864:	89 f0                	mov    eax,esi
c000b866:	84 c0                	test   al,al
c000b868:	74 1e                	je     c000b888 <Krnl::beep(int, int, bool)+0x3d>
c000b86a:	83 ec 0c             	sub    esp,0xc
c000b86d:	6b db 0a             	imul   ebx,ebx,0xa
c000b870:	53                   	push   ebx
c000b871:	e8 8e 9b 00 00       	call   c0015404 <milliTenthSleep(unsigned int)>
c000b876:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b87e:	83 c4 14             	add    esp,0x14
c000b881:	5b                   	pop    ebx
c000b882:	5e                   	pop    esi
c000b883:	e9 67 ba 00 00       	jmp    c00172ef <HalMakeBeep(int)>
c000b888:	68 e6 00 00 00       	push   0xe6
c000b88d:	53                   	push   ebx
c000b88e:	68 0e b8 00 c0       	push   0xc000b80e
c000b893:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b899:	e8 e6 95 00 00       	call   c0014e84 <Process::createThread(void (*)(void*), void*, int)>
c000b89e:	83 c4 14             	add    esp,0x14
c000b8a1:	5b                   	pop    ebx
c000b8a2:	5e                   	pop    esi
c000b8a3:	c3                   	ret    

c000b8a4 <User::loadClockSettings(int)>:
c000b8a4:	53                   	push   ebx
c000b8a5:	83 ec 14             	sub    esp,0x14
c000b8a8:	68 14 01 00 00       	push   0x114
c000b8ad:	e8 fc c1 ff ff       	call   c0007aae <malloc>
c000b8b2:	83 c4 0c             	add    esp,0xc
c000b8b5:	89 c3                	mov    ebx,eax
c000b8b7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b8bd:	68 bc 03 02 c0       	push   0xc00203bc
c000b8c2:	50                   	push   eax
c000b8c3:	e8 ac f6 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c000b8c8:	58                   	pop    eax
c000b8c9:	5a                   	pop    edx
c000b8ca:	6a 01                	push   0x1
c000b8cc:	53                   	push   ebx
c000b8cd:	e8 5e f7 ff ff       	call   c000b030 <File::open(FileOpenMode)>
c000b8d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8d5:	e8 b4 f7 ff ff       	call   c000b08e <File::close()>
c000b8da:	83 c4 10             	add    esp,0x10
c000b8dd:	85 db                	test   ebx,ebx
c000b8df:	74 0f                	je     c000b8f0 <User::loadClockSettings(int)+0x4c>
c000b8e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b8e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b8e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b8ea:	83 c4 08             	add    esp,0x8
c000b8ed:	5b                   	pop    ebx
c000b8ee:	ff e0                	jmp    eax
c000b8f0:	83 c4 08             	add    esp,0x8
c000b8f3:	5b                   	pop    ebx
c000b8f4:	c3                   	ret    
c000b8f5:	90                   	nop

c000b8f6 <Clock::Clock(char const*)>:
c000b8f6:	83 ec 0c             	sub    esp,0xc
c000b8f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8fd:	83 ec 08             	sub    esp,0x8
c000b900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b904:	50                   	push   eax
c000b905:	e8 b4 06 00 00       	call   c000bfbe <Device::Device(char const*)>
c000b90a:	83 c4 10             	add    esp,0x10
c000b90d:	ba e4 03 02 c0       	mov    edx,0xc00203e4
c000b912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b916:	89 10                	mov    DWORD PTR [eax],edx
c000b918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b91c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b926:	90                   	nop
c000b927:	83 c4 0c             	add    esp,0xc
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <Clock::~Clock()>:
c000b92c:	83 ec 0c             	sub    esp,0xc
c000b92f:	ba e4 03 02 c0       	mov    edx,0xc00203e4
c000b934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b938:	89 10                	mov    DWORD PTR [eax],edx
c000b93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b93e:	83 ec 0c             	sub    esp,0xc
c000b941:	50                   	push   eax
c000b942:	e8 e1 03 00 00       	call   c000bd28 <Device::~Device()>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	90                   	nop
c000b94b:	83 c4 0c             	add    esp,0xc
c000b94e:	c3                   	ret    
c000b94f:	90                   	nop

c000b950 <Clock::~Clock()>:
c000b950:	83 ec 0c             	sub    esp,0xc
c000b953:	83 ec 0c             	sub    esp,0xc
c000b956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b95a:	e8 cd ff ff ff       	call   c000b92c <Clock::~Clock()>
c000b95f:	83 c4 10             	add    esp,0x10
c000b962:	83 ec 08             	sub    esp,0x8
c000b965:	68 58 01 00 00       	push   0x158
c000b96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b96e:	e8 51 ef ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000b973:	83 c4 10             	add    esp,0x10
c000b976:	83 c4 0c             	add    esp,0xc
c000b979:	c3                   	ret    

c000b97a <Clock::timeInSecondsLocal()>:
c000b97a:	53                   	push   ebx
c000b97b:	83 ec 14             	sub    esp,0x14
c000b97e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b982:	8b 10                	mov    edx,DWORD PTR [eax]
c000b984:	50                   	push   eax
c000b985:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b988:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b98f:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b995:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b99b:	89 cb                	mov    ebx,ecx
c000b99d:	c1 fb 1f             	sar    ebx,0x1f
c000b9a0:	01 c8                	add    eax,ecx
c000b9a2:	11 da                	adc    edx,ebx
c000b9a4:	83 c4 10             	add    esp,0x10
c000b9a7:	31 c9                	xor    ecx,ecx
c000b9a9:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9b0:	74 05                	je     c000b9b7 <Clock::timeInSecondsLocal()+0x3d>
c000b9b2:	b9 08 07 00 00       	mov    ecx,0x708
c000b9b7:	31 db                	xor    ebx,ebx
c000b9b9:	01 c8                	add    eax,ecx
c000b9bb:	11 da                	adc    edx,ebx
c000b9bd:	83 c4 08             	add    esp,0x8
c000b9c0:	5b                   	pop    ebx
c000b9c1:	c3                   	ret    

c000b9c2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b9c2:	57                   	push   edi
c000b9c3:	56                   	push   esi
c000b9c4:	53                   	push   ebx
c000b9c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b9d3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b9d6:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b9dd:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b9e3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b9e9:	99                   	cdq    
c000b9ea:	29 c6                	sub    esi,eax
c000b9ec:	19 d7                	sbb    edi,edx
c000b9ee:	89 f0                	mov    eax,esi
c000b9f0:	89 fa                	mov    edx,edi
c000b9f2:	31 f6                	xor    esi,esi
c000b9f4:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9fb:	74 05                	je     c000ba02 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b9fd:	be 08 07 00 00       	mov    esi,0x708
c000ba02:	31 ff                	xor    edi,edi
c000ba04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ba08:	29 f0                	sub    eax,esi
c000ba0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba0e:	19 fa                	sbb    edx,edi
c000ba10:	89 d8                	mov    eax,ebx
c000ba12:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ba16:	5b                   	pop    ebx
c000ba17:	5e                   	pop    esi
c000ba18:	5f                   	pop    edi
c000ba19:	ff e0                	jmp    eax

c000ba1b <datetimeToSeconds(datetime_t)>:
c000ba1b:	55                   	push   ebp
c000ba1c:	57                   	push   edi
c000ba1d:	56                   	push   esi
c000ba1e:	53                   	push   ebx
c000ba1f:	83 ec 0c             	sub    esp,0xc
c000ba22:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba26:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000ba2a:	89 d6                	mov    esi,edx
c000ba2c:	0f b6 c7             	movzx  eax,bh
c000ba2f:	c1 ee 10             	shr    esi,0x10
c000ba32:	6b e8 3c             	imul   ebp,eax,0x3c
c000ba35:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000ba3b:	0f b6 ce             	movzx  ecx,dh
c000ba3e:	89 df                	mov    edi,ebx
c000ba40:	49                   	dec    ecx
c000ba41:	c1 ef 10             	shr    edi,0x10
c000ba44:	0f b6 db             	movzx  ebx,bl
c000ba47:	89 f8                	mov    eax,edi
c000ba49:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000ba4f:	0f b6 f8             	movzx  edi,al
c000ba52:	0f b6 d2             	movzx  edx,dl
c000ba55:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000ba59:	01 d8                	add    eax,ebx
c000ba5b:	0f b7 de             	movzx  ebx,si
c000ba5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba61:	c1 f8 1f             	sar    eax,0x1f
c000ba64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba68:	0f b6 c1             	movzx  eax,cl
c000ba6b:	8b 0c 85 20 04 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfbe0]
c000ba72:	83 f8 01             	cmp    eax,0x1
c000ba75:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ba79:	76 27                	jbe    c000baa2 <datetimeToSeconds(datetime_t)+0x87>
c000ba7b:	83 e6 03             	and    esi,0x3
c000ba7e:	75 22                	jne    c000baa2 <datetimeToSeconds(datetime_t)+0x87>
c000ba80:	31 d2                	xor    edx,edx
c000ba82:	be 64 00 00 00       	mov    esi,0x64
c000ba87:	89 d8                	mov    eax,ebx
c000ba89:	f7 f6                	div    esi
c000ba8b:	85 d2                	test   edx,edx
c000ba8d:	75 12                	jne    c000baa1 <datetimeToSeconds(datetime_t)+0x86>
c000ba8f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba95:	be 90 01 00 00       	mov    esi,0x190
c000ba9a:	99                   	cdq    
c000ba9b:	f7 fe                	idiv   esi
c000ba9d:	85 d2                	test   edx,edx
c000ba9f:	75 01                	jne    c000baa2 <datetimeToSeconds(datetime_t)+0x87>
c000baa1:	41                   	inc    ecx
c000baa2:	83 fb 46             	cmp    ebx,0x46
c000baa5:	76 48                	jbe    c000baef <datetimeToSeconds(datetime_t)+0xd4>
c000baa7:	be 46 00 00 00       	mov    esi,0x46
c000baac:	bf 64 00 00 00       	mov    edi,0x64
c000bab1:	bd 90 01 00 00       	mov    ebp,0x190
c000bab6:	b8 6d 01 00 00       	mov    eax,0x16d
c000babb:	f7 c6 03 00 00 00    	test   esi,0x3
c000bac1:	75 23                	jne    c000bae6 <datetimeToSeconds(datetime_t)+0xcb>
c000bac3:	89 f0                	mov    eax,esi
c000bac5:	99                   	cdq    
c000bac6:	f7 ff                	idiv   edi
c000bac8:	b8 6e 01 00 00       	mov    eax,0x16e
c000bacd:	85 d2                	test   edx,edx
c000bacf:	75 15                	jne    c000bae6 <datetimeToSeconds(datetime_t)+0xcb>
c000bad1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bad7:	99                   	cdq    
c000bad8:	f7 fd                	idiv   ebp
c000bada:	83 fa 01             	cmp    edx,0x1
c000badd:	19 c0                	sbb    eax,eax
c000badf:	f7 d0                	not    eax
c000bae1:	05 6e 01 00 00       	add    eax,0x16e
c000bae6:	01 c1                	add    ecx,eax
c000bae8:	46                   	inc    esi
c000bae9:	39 de                	cmp    esi,ebx
c000baeb:	7c c9                	jl     c000bab6 <datetimeToSeconds(datetime_t)+0x9b>
c000baed:	eb 34                	jmp    c000bb23 <datetimeToSeconds(datetime_t)+0x108>
c000baef:	74 32                	je     c000bb23 <datetimeToSeconds(datetime_t)+0x108>
c000baf1:	b8 45 00 00 00       	mov    eax,0x45
c000baf6:	89 c2                	mov    edx,eax
c000baf8:	83 e2 03             	and    edx,0x3
c000bafb:	39 d8                	cmp    eax,ebx
c000bafd:	7e 0f                	jle    c000bb0e <datetimeToSeconds(datetime_t)+0xf3>
c000baff:	83 fa 01             	cmp    edx,0x1
c000bb02:	19 d2                	sbb    edx,edx
c000bb04:	48                   	dec    eax
c000bb05:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bb0c:	eb e8                	jmp    c000baf6 <datetimeToSeconds(datetime_t)+0xdb>
c000bb0e:	b8 6d 01 00 00       	mov    eax,0x16d
c000bb13:	85 d2                	test   edx,edx
c000bb15:	75 0a                	jne    c000bb21 <datetimeToSeconds(datetime_t)+0x106>
c000bb17:	83 fb 01             	cmp    ebx,0x1
c000bb1a:	19 c0                	sbb    eax,eax
c000bb1c:	05 6e 01 00 00       	add    eax,0x16e
c000bb21:	29 c1                	sub    ecx,eax
c000bb23:	b8 80 51 01 00       	mov    eax,0x15180
c000bb28:	f7 e9                	imul   ecx
c000bb2a:	03 04 24             	add    eax,DWORD PTR [esp]
c000bb2d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bb31:	83 c4 0c             	add    esp,0xc
c000bb34:	5b                   	pop    ebx
c000bb35:	5e                   	pop    esi
c000bb36:	5f                   	pop    edi
c000bb37:	5d                   	pop    ebp
c000bb38:	c3                   	ret    
c000bb39:	90                   	nop

c000bb3a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bb3a:	57                   	push   edi
c000bb3b:	56                   	push   esi
c000bb3c:	53                   	push   ebx
c000bb3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bb41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb43:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bb46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb4e:	e8 c8 fe ff ff       	call   c000ba1b <datetimeToSeconds(datetime_t)>
c000bb53:	59                   	pop    ecx
c000bb54:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb5b:	5b                   	pop    ebx
c000bb5c:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb62:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb68:	89 cb                	mov    ebx,ecx
c000bb6a:	c1 fb 1f             	sar    ebx,0x1f
c000bb6d:	29 c8                	sub    eax,ecx
c000bb6f:	19 da                	sbb    edx,ebx
c000bb71:	31 c9                	xor    ecx,ecx
c000bb73:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb7a:	74 05                	je     c000bb81 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb7c:	b9 08 07 00 00       	mov    ecx,0x708
c000bb81:	31 db                	xor    ebx,ebx
c000bb83:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb87:	29 c8                	sub    eax,ecx
c000bb89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb8d:	19 da                	sbb    edx,ebx
c000bb8f:	89 f8                	mov    eax,edi
c000bb91:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb95:	5b                   	pop    ebx
c000bb96:	5e                   	pop    esi
c000bb97:	5f                   	pop    edi
c000bb98:	ff e0                	jmp    eax

c000bb9a <secondsToDatetime(unsigned long long)>:
c000bb9a:	55                   	push   ebp
c000bb9b:	57                   	push   edi
c000bb9c:	56                   	push   esi
c000bb9d:	53                   	push   ebx
c000bb9e:	83 ec 1c             	sub    esp,0x1c
c000bba1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bba5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bba9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bbad:	6a 00                	push   0x0
c000bbaf:	68 80 51 01 00       	push   0x15180
c000bbb4:	55                   	push   ebp
c000bbb5:	57                   	push   edi
c000bbb6:	e8 b5 2a 01 00       	call   c001e670 <__udivdi3>
c000bbbb:	83 c4 10             	add    esp,0x10
c000bbbe:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bbc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc8:	6a 00                	push   0x0
c000bbca:	68 80 51 01 00       	push   0x15180
c000bbcf:	55                   	push   ebp
c000bbd0:	57                   	push   edi
c000bbd1:	bf 10 0e 00 00       	mov    edi,0xe10
c000bbd6:	e8 95 2b 01 00       	call   c001e770 <__umoddi3>
c000bbdb:	83 c4 10             	add    esp,0x10
c000bbde:	99                   	cdq    
c000bbdf:	f7 ff                	idiv   edi
c000bbe1:	bf 3c 00 00 00       	mov    edi,0x3c
c000bbe6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bbe9:	89 d0                	mov    eax,edx
c000bbeb:	99                   	cdq    
c000bbec:	f7 ff                	idiv   edi
c000bbee:	85 db                	test   ebx,ebx
c000bbf0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bbf3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bbf6:	79 11                	jns    c000bc09 <secondsToDatetime(unsigned long long)+0x6f>
c000bbf8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bbfc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bc02:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bc07:	eb 07                	jmp    c000bc10 <secondsToDatetime(unsigned long long)+0x76>
c000bc09:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bc0e:	89 d8                	mov    eax,ebx
c000bc10:	bf b4 05 00 00       	mov    edi,0x5b4
c000bc15:	99                   	cdq    
c000bc16:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bc1b:	f7 f9                	idiv   ecx
c000bc1d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bc22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc26:	31 d2                	xor    edx,edx
c000bc28:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bc30:	01 c3                	add    ebx,eax
c000bc32:	89 d8                	mov    eax,ebx
c000bc34:	f7 f1                	div    ecx
c000bc36:	31 d2                	xor    edx,edx
c000bc38:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bc3b:	89 d8                	mov    eax,ebx
c000bc3d:	f7 f7                	div    edi
c000bc3f:	31 d2                	xor    edx,edx
c000bc41:	29 c1                	sub    ecx,eax
c000bc43:	89 d8                	mov    eax,ebx
c000bc45:	f7 f5                	div    ebp
c000bc47:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bc4c:	29 c1                	sub    ecx,eax
c000bc4e:	31 d2                	xor    edx,edx
c000bc50:	89 c8                	mov    eax,ecx
c000bc52:	f7 f5                	div    ebp
c000bc54:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bc59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc5d:	31 d2                	xor    edx,edx
c000bc5f:	89 c8                	mov    eax,ecx
c000bc61:	f7 f5                	div    ebp
c000bc63:	31 d2                	xor    edx,edx
c000bc65:	01 c3                	add    ebx,eax
c000bc67:	89 c8                	mov    eax,ecx
c000bc69:	f7 f7                	div    edi
c000bc6b:	bf 99 00 00 00       	mov    edi,0x99
c000bc70:	29 c3                	sub    ebx,eax
c000bc72:	31 d2                	xor    edx,edx
c000bc74:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc7c:	29 c3                	sub    ebx,eax
c000bc7e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc81:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc84:	bb 05 00 00 00       	mov    ebx,0x5
c000bc89:	83 c1 02             	add    ecx,0x2
c000bc8c:	89 c8                	mov    eax,ecx
c000bc8e:	f7 f7                	div    edi
c000bc90:	31 d2                	xor    edx,edx
c000bc92:	89 c7                	mov    edi,eax
c000bc94:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc9a:	83 c0 02             	add    eax,0x2
c000bc9d:	f7 f3                	div    ebx
c000bc9f:	89 eb                	mov    ebx,ebp
c000bca1:	29 c3                	sub    ebx,eax
c000bca3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bca9:	88 1e                	mov    BYTE PTR [esi],bl
c000bcab:	19 c0                	sbb    eax,eax
c000bcad:	31 d2                	xor    edx,edx
c000bcaf:	83 e0 0c             	and    eax,0xc
c000bcb2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bcb6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bcbe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bcc2:	83 f9 01             	cmp    ecx,0x1
c000bcc5:	0f 96 c2             	setbe  dl
c000bcc8:	41                   	inc    ecx
c000bcc9:	01 d0                	add    eax,edx
c000bccb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bcce:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bcd2:	83 c4 1c             	add    esp,0x1c
c000bcd5:	89 f0                	mov    eax,esi
c000bcd7:	5b                   	pop    ebx
c000bcd8:	5e                   	pop    esi
c000bcd9:	5f                   	pop    edi
c000bcda:	5d                   	pop    ebp
c000bcdb:	c2 04 00             	ret    0x4

c000bcde <Clock::timeInDatetimeLocal()>:
c000bcde:	53                   	push   ebx
c000bcdf:	83 ec 14             	sub    esp,0x14
c000bce2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bce6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcea:	e8 8b fc ff ff       	call   c000b97a <Clock::timeInSecondsLocal()>
c000bcef:	83 c4 0c             	add    esp,0xc
c000bcf2:	52                   	push   edx
c000bcf3:	50                   	push   eax
c000bcf4:	53                   	push   ebx
c000bcf5:	e8 a0 fe ff ff       	call   c000bb9a <secondsToDatetime(unsigned long long)>
c000bcfa:	89 d8                	mov    eax,ebx
c000bcfc:	83 c4 14             	add    esp,0x14
c000bcff:	5b                   	pop    ebx
c000bd00:	c2 04 00             	ret    0x4
c000bd03:	90                   	nop

c000bd04 <Device::hibernate()>:
c000bd04:	c3                   	ret    
c000bd05:	90                   	nop

c000bd06 <Device::wake()>:
c000bd06:	c3                   	ret    
c000bd07:	90                   	nop

c000bd08 <Device::detect()>:
c000bd08:	c3                   	ret    
c000bd09:	90                   	nop

c000bd0a <Device::disableLegacy()>:
c000bd0a:	c3                   	ret    
c000bd0b:	90                   	nop

c000bd0c <Device::powerSaving(PowerSavingLevel)>:
c000bd0c:	c3                   	ret    
c000bd0d:	90                   	nop

c000bd0e <DriverlessDevice::close(int, int, void*)>:
c000bd0e:	31 c0                	xor    eax,eax
c000bd10:	c3                   	ret    
c000bd11:	90                   	nop

c000bd12 <DriverlessDevice::detect()>:
c000bd12:	c3                   	ret    
c000bd13:	90                   	nop

c000bd14 <DriverlessDevice::open(int, int, void*)>:
c000bd14:	83 ec 18             	sub    esp,0x18
c000bd17:	68 50 04 02 c0       	push   0xc0020450
c000bd1c:	e8 fe 4b 00 00       	call   c001091f <KePanic(char const*)>
c000bd21:	83 c8 ff             	or     eax,0xffffffff
c000bd24:	83 c4 1c             	add    esp,0x1c
c000bd27:	c3                   	ret    

c000bd28 <Device::~Device()>:
c000bd28:	ba b0 04 02 c0       	mov    edx,0xc00204b0
c000bd2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd31:	89 10                	mov    DWORD PTR [eax],edx
c000bd33:	90                   	nop
c000bd34:	c3                   	ret    
c000bd35:	90                   	nop

c000bd36 <Device::~Device()>:
c000bd36:	83 ec 0c             	sub    esp,0xc
c000bd39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bd3d:	e8 e6 ff ff ff       	call   c000bd28 <Device::~Device()>
c000bd42:	83 c4 04             	add    esp,0x4
c000bd45:	83 ec 08             	sub    esp,0x8
c000bd48:	68 58 01 00 00       	push   0x158
c000bd4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd51:	e8 6e eb ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000bd56:	83 c4 10             	add    esp,0x10
c000bd59:	83 c4 0c             	add    esp,0xc
c000bd5c:	c3                   	ret    
c000bd5d:	90                   	nop

c000bd5e <Device::findAndLoadDriver()>:
c000bd5e:	c7 44 24 04 6e 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc002046e
c000bd66:	e9 86 ec ff ff       	jmp    c000a9f1 <Dbg::kprintf(char const*, ...)>
c000bd6b:	90                   	nop

c000bd6c <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd6c:	57                   	push   edi
c000bd6d:	b9 09 00 00 00       	mov    ecx,0x9
c000bd72:	56                   	push   esi
c000bd73:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd77:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd7b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd85:	81 c7 18 01 00 00    	add    edi,0x118
c000bd8b:	fc                   	cld    
c000bd8c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd8e:	5e                   	pop    esi
c000bd8f:	5f                   	pop    edi
c000bd90:	c3                   	ret    
c000bd91:	90                   	nop

c000bd92 <Device::preOpenACPI(void*, char*, char*)>:
c000bd92:	57                   	push   edi
c000bd93:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd98:	56                   	push   esi
c000bd99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bda1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bdab:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bdb1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bdb7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bdbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdbd:	b9 0e 00 00 00       	mov    ecx,0xe
c000bdc2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bdc8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdcc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdce:	5e                   	pop    esi
c000bdcf:	5f                   	pop    edi
c000bdd0:	c3                   	ret    
c000bdd1:	90                   	nop

c000bdd2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bdd2:	53                   	push   ebx
c000bdd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bddb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bddf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bde3:	0f b6 c0             	movzx  eax,al
c000bde6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bdea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bdee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdf2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdf6:	5b                   	pop    ebx
c000bdf7:	e9 a8 05 00 00       	jmp    c000c3a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bdfc <Device::getParent()>:
c000bdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be00:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000be06:	c3                   	ret    
c000be07:	90                   	nop

c000be08 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000be08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be10:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000be15:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000be1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be21:	e9 e6 06 00 00       	jmp    c000c50c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000be26 <Device::addChild(Device*)>:
c000be26:	53                   	push   ebx
c000be27:	83 ec 08             	sub    esp,0x8
c000be2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be32:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000be38:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000be3e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be40:	85 d2                	test   edx,edx
c000be42:	74 04                	je     c000be48 <Device::addChild(Device*)+0x22>
c000be44:	89 d3                	mov    ebx,edx
c000be46:	eb f6                	jmp    c000be3e <Device::addChild(Device*)+0x18>
c000be48:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000be4b:	83 ec 0c             	sub    esp,0xc
c000be4e:	6a 08                	push   0x8
c000be50:	e8 59 bc ff ff       	call   c0007aae <malloc>
c000be55:	89 03                	mov    DWORD PTR [ebx],eax
c000be57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be5d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be64:	83 c4 18             	add    esp,0x18
c000be67:	5b                   	pop    ebx
c000be68:	c3                   	ret    
c000be69:	90                   	nop

c000be6a <Device::removeAllChildren()>:
c000be6a:	56                   	push   esi
c000be6b:	53                   	push   ebx
c000be6c:	52                   	push   edx
c000be6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be71:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be7a:	74 17                	je     c000be93 <Device::removeAllChildren()+0x29>
c000be7c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be7f:	85 c0                	test   eax,eax
c000be81:	74 0c                	je     c000be8f <Device::removeAllChildren()+0x25>
c000be83:	83 ec 0c             	sub    esp,0xc
c000be86:	8b 10                	mov    edx,DWORD PTR [eax]
c000be88:	50                   	push   eax
c000be89:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be8c:	83 c4 10             	add    esp,0x10
c000be8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be91:	eb e4                	jmp    c000be77 <Device::removeAllChildren()+0xd>
c000be93:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be9f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bea5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000beac:	58                   	pop    eax
c000bead:	5b                   	pop    ebx
c000beae:	5e                   	pop    esi
c000beaf:	c3                   	ret    

c000beb0 <Device::hibernateAll()>:
c000beb0:	53                   	push   ebx
c000beb1:	83 ec 14             	sub    esp,0x14
c000beb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000beb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000beba:	53                   	push   ebx
c000bebb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bebe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beca:	74 0f                	je     c000bedb <Device::hibernateAll()+0x2b>
c000becc:	83 ec 0c             	sub    esp,0xc
c000becf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bed2:	e8 d9 ff ff ff       	call   c000beb0 <Device::hibernateAll()>
c000bed7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bed9:	eb e9                	jmp    c000bec4 <Device::hibernateAll()+0x14>
c000bedb:	83 c4 08             	add    esp,0x8
c000bede:	5b                   	pop    ebx
c000bedf:	c3                   	ret    

c000bee0 <Device::wakeAll()>:
c000bee0:	53                   	push   ebx
c000bee1:	83 ec 14             	sub    esp,0x14
c000bee4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bee8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000beea:	53                   	push   ebx
c000beeb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000beee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bef4:	83 c4 10             	add    esp,0x10
c000bef7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000befa:	74 0f                	je     c000bf0b <Device::wakeAll()+0x2b>
c000befc:	83 ec 0c             	sub    esp,0xc
c000beff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf02:	e8 d9 ff ff ff       	call   c000bee0 <Device::wakeAll()>
c000bf07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf09:	eb e9                	jmp    c000bef4 <Device::wakeAll()+0x14>
c000bf0b:	83 c4 08             	add    esp,0x8
c000bf0e:	5b                   	pop    ebx
c000bf0f:	c3                   	ret    

c000bf10 <Device::detectAll()>:
c000bf10:	53                   	push   ebx
c000bf11:	83 ec 14             	sub    esp,0x14
c000bf14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf18:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf1a:	53                   	push   ebx
c000bf1b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bf1e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf24:	83 c4 10             	add    esp,0x10
c000bf27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf2a:	74 0f                	je     c000bf3b <Device::detectAll()+0x2b>
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf32:	e8 d9 ff ff ff       	call   c000bf10 <Device::detectAll()>
c000bf37:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf39:	eb e9                	jmp    c000bf24 <Device::detectAll()+0x14>
c000bf3b:	83 c4 08             	add    esp,0x8
c000bf3e:	5b                   	pop    ebx
c000bf3f:	c3                   	ret    

c000bf40 <Device::disableLegacyAll()>:
c000bf40:	c3                   	ret    
c000bf41:	90                   	nop

c000bf42 <Device::loadDriversForAll()>:
c000bf42:	c3                   	ret    
c000bf43:	90                   	nop

c000bf44 <Device::closeAll()>:
c000bf44:	53                   	push   ebx
c000bf45:	83 ec 08             	sub    esp,0x8
c000bf48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf4e:	6a 00                	push   0x0
c000bf50:	6a 00                	push   0x0
c000bf52:	6a 00                	push   0x0
c000bf54:	53                   	push   ebx
c000bf55:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf5e:	83 c4 10             	add    esp,0x10
c000bf61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf64:	74 0f                	je     c000bf75 <Device::closeAll()+0x31>
c000bf66:	83 ec 0c             	sub    esp,0xc
c000bf69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf6c:	e8 d3 ff ff ff       	call   c000bf44 <Device::closeAll()>
c000bf71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf73:	eb e9                	jmp    c000bf5e <Device::closeAll()+0x1a>
c000bf75:	83 c4 08             	add    esp,0x8
c000bf78:	5b                   	pop    ebx
c000bf79:	c3                   	ret    

c000bf7a <Device::powerSavingAll(PowerSavingLevel)>:
c000bf7a:	56                   	push   esi
c000bf7b:	53                   	push   ebx
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf83:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf87:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf89:	56                   	push   esi
c000bf8a:	53                   	push   ebx
c000bf8b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf94:	83 c4 10             	add    esp,0x10
c000bf97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf9a:	74 0f                	je     c000bfab <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf9c:	52                   	push   edx
c000bf9d:	52                   	push   edx
c000bf9e:	56                   	push   esi
c000bf9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfa2:	e8 d3 ff ff ff       	call   c000bf7a <Device::powerSavingAll(PowerSavingLevel)>
c000bfa7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bfa9:	eb e9                	jmp    c000bf94 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bfab:	58                   	pop    eax
c000bfac:	5b                   	pop    ebx
c000bfad:	5e                   	pop    esi
c000bfae:	c3                   	ret    
c000bfaf:	90                   	nop

c000bfb0 <Device::setName(char const*)>:
c000bfb0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bfb8:	e9 83 46 ff ff       	jmp    c0000640 <strcpy>
c000bfbd:	90                   	nop

c000bfbe <Device::Device(char const*)>:
c000bfbe:	83 ec 1c             	sub    esp,0x1c
c000bfc1:	ba b0 04 02 c0       	mov    edx,0xc00204b0
c000bfc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfca:	89 10                	mov    DWORD PTR [eax],edx
c000bfcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bfda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfde:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bfe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bffa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c004:	83 ec 08             	sub    esp,0x8
c000c007:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c00b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c00f:	e8 9c ff ff ff       	call   c000bfb0 <Device::setName(char const*)>
c000c014:	83 c4 10             	add    esp,0x10
c000c017:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c01f:	83 ec 0c             	sub    esp,0xc
c000c022:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c026:	e8 83 ba ff ff       	call   c0007aae <malloc>
c000c02b:	83 c4 10             	add    esp,0x10
c000c02e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c034:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c03b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c03f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c049:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c04f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c055:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c059:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c05f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c06a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c075:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c07c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c080:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c08a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c08e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c09c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c0a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0aa:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c0b4:	90                   	nop
c000c0b5:	83 c4 1c             	add    esp,0x1c
c000c0b8:	c3                   	ret    
c000c0b9:	90                   	nop

c000c0ba <Device::getName()>:
c000c0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0be:	05 d0 00 00 00       	add    eax,0xd0
c000c0c3:	c3                   	ret    

c000c0c4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c0c4:	83 ec 0c             	sub    esp,0xc
c000c0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cb:	83 ec 08             	sub    esp,0x8
c000c0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d2:	50                   	push   eax
c000c0d3:	e8 e6 fe ff ff       	call   c000bfbe <Device::Device(char const*)>
c000c0d8:	83 c4 10             	add    esp,0x10
c000c0db:	ba dc 04 02 c0       	mov    edx,0xc00204dc
c000c0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e4:	89 10                	mov    DWORD PTR [eax],edx
c000c0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ea:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c0f4:	90                   	nop
c000c0f5:	83 c4 0c             	add    esp,0xc
c000c0f8:	c3                   	ret    
c000c0f9:	90                   	nop

c000c0fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c0fa:	57                   	push   edi
c000c0fb:	56                   	push   esi
c000c0fc:	53                   	push   ebx
c000c0fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c101:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c105:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c109:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c10f:	75 0c                	jne    c000c11d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c111:	52                   	push   edx
c000c112:	52                   	push   edx
c000c113:	53                   	push   ebx
c000c114:	56                   	push   esi
c000c115:	e8 08 2a 01 00       	call   c001eb22 <LinkedList<Device>::addElement(Device*)>
c000c11a:	83 c4 10             	add    esp,0x10
c000c11d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c123:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c126:	74 12                	je     c000c13a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c128:	50                   	push   eax
c000c129:	57                   	push   edi
c000c12a:	56                   	push   esi
c000c12b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c12e:	e8 c7 ff ff ff       	call   c000c0fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c133:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c135:	83 c4 10             	add    esp,0x10
c000c138:	eb e9                	jmp    c000c123 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c13a:	5b                   	pop    ebx
c000c13b:	5e                   	pop    esi
c000c13c:	5f                   	pop    edi
c000c13d:	c3                   	ret    

c000c13e <getDevicesOfType(DeviceType)>:
c000c13e:	53                   	push   ebx
c000c13f:	83 ec 14             	sub    esp,0x14
c000c142:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c146:	53                   	push   ebx
c000c147:	e8 b2 2a 01 00       	call   c001ebfe <LinkedList<Device>::LinkedList()>
c000c14c:	83 c4 0c             	add    esp,0xc
c000c14f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c153:	53                   	push   ebx
c000c154:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c15a:	e8 9b ff ff ff       	call   c000c0fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c15f:	89 d8                	mov    eax,ebx
c000c161:	83 c4 18             	add    esp,0x18
c000c164:	5b                   	pop    ebx
c000c165:	c2 04 00             	ret    0x4

c000c168 <HardDiskController::HardDiskController(char const*)>:
c000c168:	83 ec 0c             	sub    esp,0xc
c000c16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c16f:	83 ec 08             	sub    esp,0x8
c000c172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c176:	50                   	push   eax
c000c177:	e8 42 fe ff ff       	call   c000bfbe <Device::Device(char const*)>
c000c17c:	83 c4 10             	add    esp,0x10
c000c17f:	ba 08 05 02 c0       	mov    edx,0xc0020508
c000c184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c188:	89 10                	mov    DWORD PTR [eax],edx
c000c18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c18e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c198:	90                   	nop
c000c199:	83 c4 0c             	add    esp,0xc
c000c19c:	c3                   	ret    
c000c19d:	90                   	nop
c000c19e:	66 90                	xchg   ax,ax

c000c1a0 <HardDiskController::~HardDiskController()>:
c000c1a0:	83 ec 0c             	sub    esp,0xc
c000c1a3:	ba 08 05 02 c0       	mov    edx,0xc0020508
c000c1a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ac:	89 10                	mov    DWORD PTR [eax],edx
c000c1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b2:	83 ec 0c             	sub    esp,0xc
c000c1b5:	50                   	push   eax
c000c1b6:	e8 6d fb ff ff       	call   c000bd28 <Device::~Device()>
c000c1bb:	83 c4 10             	add    esp,0x10
c000c1be:	90                   	nop
c000c1bf:	83 c4 0c             	add    esp,0xc
c000c1c2:	c3                   	ret    
c000c1c3:	90                   	nop

c000c1c4 <HardDiskController::~HardDiskController()>:
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	83 ec 0c             	sub    esp,0xc
c000c1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1ce:	e8 cd ff ff ff       	call   c000c1a0 <HardDiskController::~HardDiskController()>
c000c1d3:	83 c4 10             	add    esp,0x10
c000c1d6:	83 ec 08             	sub    esp,0x8
c000c1d9:	68 58 01 00 00       	push   0x158
c000c1de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1e2:	e8 dd e6 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	83 c4 0c             	add    esp,0xc
c000c1ed:	c3                   	ret    

c000c1ee <PhysicalDisk::eject()>:
c000c1ee:	83 c8 ff             	or     eax,0xffffffff
c000c1f1:	c3                   	ret    

c000c1f2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c1f2:	83 ec 0c             	sub    esp,0xc
c000c1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f9:	83 ec 08             	sub    esp,0x8
c000c1fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c200:	50                   	push   eax
c000c201:	e8 b8 fd ff ff       	call   c000bfbe <Device::Device(char const*)>
c000c206:	83 c4 10             	add    esp,0x10
c000c209:	ba 34 05 02 c0       	mov    edx,0xc0020534
c000c20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c212:	89 10                	mov    DWORD PTR [eax],edx
c000c214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c218:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c223:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c22e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c240:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c24a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c254:	90                   	nop
c000c255:	83 c4 0c             	add    esp,0xc
c000c258:	c3                   	ret    
c000c259:	90                   	nop

c000c25a <PhysicalDisk::startCache()>:
c000c25a:	56                   	push   esi
c000c25b:	53                   	push   ebx
c000c25c:	83 ec 10             	sub    esp,0x10
c000c25f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c263:	6a 44                	push   0x44
c000c265:	e8 44 b8 ff ff       	call   c0007aae <malloc>
c000c26a:	89 c6                	mov    esi,eax
c000c26c:	58                   	pop    eax
c000c26d:	5a                   	pop    edx
c000c26e:	53                   	push   ebx
c000c26f:	56                   	push   esi
c000c270:	e8 7b 17 00 00       	call   c000d9f0 <VCache::VCache(PhysicalDisk*)>
c000c275:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c27b:	83 c4 14             	add    esp,0x14
c000c27e:	5b                   	pop    ebx
c000c27f:	5e                   	pop    esi
c000c280:	c3                   	ret    
c000c281:	90                   	nop

c000c282 <PhysicalDisk::~PhysicalDisk()>:
c000c282:	83 ec 0c             	sub    esp,0xc
c000c285:	ba 34 05 02 c0       	mov    edx,0xc0020534
c000c28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c28e:	89 10                	mov    DWORD PTR [eax],edx
c000c290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c294:	83 ec 0c             	sub    esp,0xc
c000c297:	50                   	push   eax
c000c298:	e8 8b fa ff ff       	call   c000bd28 <Device::~Device()>
c000c29d:	83 c4 10             	add    esp,0x10
c000c2a0:	90                   	nop
c000c2a1:	83 c4 0c             	add    esp,0xc
c000c2a4:	c3                   	ret    
c000c2a5:	90                   	nop

c000c2a6 <PhysicalDisk::~PhysicalDisk()>:
c000c2a6:	83 ec 0c             	sub    esp,0xc
c000c2a9:	83 ec 0c             	sub    esp,0xc
c000c2ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2b0:	e8 cd ff ff ff       	call   c000c282 <PhysicalDisk::~PhysicalDisk()>
c000c2b5:	83 c4 10             	add    esp,0x10
c000c2b8:	83 ec 08             	sub    esp,0x8
c000c2bb:	68 6c 01 00 00       	push   0x16c
c000c2c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c4:	e8 fb e5 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000c2c9:	83 c4 10             	add    esp,0x10
c000c2cc:	83 c4 0c             	add    esp,0xc
c000c2cf:	c3                   	ret    

c000c2d0 <int_handler>:
c000c2d0:	55                   	push   ebp
c000c2d1:	57                   	push   edi
c000c2d2:	56                   	push   esi
c000c2d3:	53                   	push   ebx
c000c2d4:	83 ec 0c             	sub    esp,0xc
c000c2d7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c2db:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2e2:	74 0b                	je     c000c2ef <int_handler+0x1f>
c000c2e4:	fa                   	cli    
c000c2e5:	f4                   	hlt    
c000c2e6:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2ed:	75 f5                	jne    c000c2e4 <int_handler+0x14>
c000c2ef:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c2f2:	8d 46 e0             	lea    eax,[esi-0x20]
c000c2f5:	83 f8 17             	cmp    eax,0x17
c000c2f8:	76 40                	jbe    c000c33a <int_handler+0x6a>
c000c2fa:	c1 e6 04             	shl    esi,0x4
c000c2fd:	31 db                	xor    ebx,ebx
c000c2ff:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c305:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c30b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c30f:	85 c0                	test   eax,eax
c000c311:	74 13                	je     c000c326 <int_handler+0x56>
c000c313:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c316:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c31a:	74 2c                	je     c000c348 <int_handler+0x78>
c000c31c:	83 ec 08             	sub    esp,0x8
c000c31f:	52                   	push   edx
c000c320:	57                   	push   edi
c000c321:	ff d0                	call   eax
c000c323:	83 c4 10             	add    esp,0x10
c000c326:	83 c3 01             	add    ebx,0x1
c000c329:	83 fb 04             	cmp    ebx,0x4
c000c32c:	75 dd                	jne    c000c30b <int_handler+0x3b>
c000c32e:	83 c4 0c             	add    esp,0xc
c000c331:	31 c0                	xor    eax,eax
c000c333:	5b                   	pop    ebx
c000c334:	31 d2                	xor    edx,edx
c000c336:	5e                   	pop    esi
c000c337:	5f                   	pop    edi
c000c338:	5d                   	pop    ebp
c000c339:	c3                   	ret    
c000c33a:	83 ec 0c             	sub    esp,0xc
c000c33d:	50                   	push   eax
c000c33e:	e8 e9 af 00 00       	call   c001732c <HalEndOfInterrupt(int)>
c000c343:	83 c4 10             	add    esp,0x10
c000c346:	eb b2                	jmp    c000c2fa <int_handler+0x2a>
c000c348:	83 ec 08             	sub    esp,0x8
c000c34b:	52                   	push   edx
c000c34c:	57                   	push   edi
c000c34d:	ff d0                	call   eax
c000c34f:	83 c4 10             	add    esp,0x10
c000c352:	83 c4 0c             	add    esp,0xc
c000c355:	5b                   	pop    ebx
c000c356:	5e                   	pop    esi
c000c357:	5f                   	pop    edi
c000c358:	5d                   	pop    ebp
c000c359:	c3                   	ret    

c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c35a:	56                   	push   esi
c000c35b:	31 c0                	xor    eax,eax
c000c35d:	53                   	push   ebx
c000c35e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c362:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c366:	89 ca                	mov    edx,ecx
c000c368:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c36c:	c1 e2 04             	shl    edx,0x4
c000c36f:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c377:	74 17                	je     c000c390 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c379:	83 c0 01             	add    eax,0x1
c000c37c:	83 f8 04             	cmp    eax,0x4
c000c37f:	75 ee                	jne    c000c36f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c381:	c7 44 24 0c 64 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020564
c000c389:	5b                   	pop    ebx
c000c38a:	5e                   	pop    esi
c000c38b:	e9 8f 45 00 00       	jmp    c001091f <KePanic(char const*)>
c000c390:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c393:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c39a:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c3a1:	5b                   	pop    ebx
c000c3a2:	5e                   	pop    esi
c000c3a3:	c3                   	ret    

c000c3a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c3a4:	57                   	push   edi
c000c3a5:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c3ab:	56                   	push   esi
c000c3ac:	53                   	push   ebx
c000c3ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c3b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3b5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c3bc:	74 54                	je     c000c412 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000c3be:	89 c7                	mov    edi,eax
c000c3c0:	84 c0                	test   al,al
c000c3c2:	74 1d                	je     c000c3e1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c3c4:	83 fe 0f             	cmp    esi,0xf
c000c3c7:	0f 8f d5 00 00 00    	jg     c000c4a2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000c3cd:	0f b6 b6 e0 1f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde020]
c000c3d4:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c3dc:	d1 ef                	shr    edi,1
c000c3de:	83 e7 01             	and    edi,0x1
c000c3e1:	83 ec 08             	sub    esp,0x8
c000c3e4:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3e9:	31 db                	xor    ebx,ebx
c000c3eb:	50                   	push   eax
c000c3ec:	68 71 05 02 c0       	push   0xc0020571
c000c3f1:	e8 fb e5 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000c3f6:	83 c4 10             	add    esp,0x10
c000c3f9:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3fe:	85 c0                	test   eax,eax
c000c400:	7f 55                	jg     c000c457 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c402:	83 ec 0c             	sub    esp,0xc
c000c405:	68 88 05 02 c0       	push   0xc0020588
c000c40a:	e8 10 45 00 00       	call   c001091f <KePanic(char const*)>
c000c40f:	83 c4 10             	add    esp,0x10
c000c412:	8d 7e 20             	lea    edi,[esi+0x20]
c000c415:	89 f8                	mov    eax,edi
c000c417:	31 d2                	xor    edx,edx
c000c419:	c1 e0 04             	shl    eax,0x4
c000c41c:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c423:	85 c9                	test   ecx,ecx
c000c425:	0f 84 8e 00 00 00    	je     c000c4b9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000c42b:	83 c2 01             	add    edx,0x1
c000c42e:	83 fa 04             	cmp    edx,0x4
c000c431:	75 e9                	jne    c000c41c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c433:	83 ec 0c             	sub    esp,0xc
c000c436:	68 dc 05 02 c0       	push   0xc00205dc
c000c43b:	e8 df 44 00 00       	call   c001091f <KePanic(char const*)>
c000c440:	83 c4 10             	add    esp,0x10
c000c443:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c448:	5b                   	pop    ebx
c000c449:	5e                   	pop    esi
c000c44a:	5f                   	pop    edi
c000c44b:	c3                   	ret    
c000c44c:	83 c3 01             	add    ebx,0x1
c000c44f:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c455:	7e ab                	jle    c000c402 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000c457:	83 ec 08             	sub    esp,0x8
c000c45a:	8b 04 9d 80 8b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7480]
c000c461:	56                   	push   esi
c000c462:	50                   	push   eax
c000c463:	e8 de 15 01 00       	call   c001da46 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c468:	83 c4 10             	add    esp,0x10
c000c46b:	84 c0                	test   al,al
c000c46d:	74 dd                	je     c000c44c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c46f:	83 ec 04             	sub    esp,0x4
c000c472:	89 f8                	mov    eax,edi
c000c474:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c47b:	0f b6 f8             	movzx  edi,al
c000c47e:	57                   	push   edi
c000c47f:	8d 7e 20             	lea    edi,[esi+0x20]
c000c482:	6a 00                	push   0x0
c000c484:	89 f8                	mov    eax,edi
c000c486:	0f b6 c0             	movzx  eax,al
c000c489:	50                   	push   eax
c000c48a:	89 f0                	mov    eax,esi
c000c48c:	6a 00                	push   0x0
c000c48e:	0f b6 c0             	movzx  eax,al
c000c491:	6a 00                	push   0x0
c000c493:	50                   	push   eax
c000c494:	53                   	push   ebx
c000c495:	e8 18 17 01 00       	call   c001dbb2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c49a:	83 c4 20             	add    esp,0x20
c000c49d:	e9 73 ff ff ff       	jmp    c000c415 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000c4a2:	83 ec 0c             	sub    esp,0xc
c000c4a5:	31 ff                	xor    edi,edi
c000c4a7:	68 a4 05 02 c0       	push   0xc00205a4
c000c4ac:	e8 6e 44 00 00       	call   c001091f <KePanic(char const*)>
c000c4b1:	83 c4 10             	add    esp,0x10
c000c4b4:	e9 28 ff ff ff       	jmp    c000c3e1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c4b9:	8d 04 ba             	lea    eax,[edx+edi*4]
c000c4bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c4c0:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c4c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4cb:	5b                   	pop    ebx
c000c4cc:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c4d3:	89 f0                	mov    eax,esi
c000c4d5:	5e                   	pop    esi
c000c4d6:	5f                   	pop    edi
c000c4d7:	c3                   	ret    

c000c4d8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c4d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4e0:	c1 e0 04             	shl    eax,0x4
c000c4e3:	8d 50 10             	lea    edx,[eax+0x10]
c000c4e6:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c4ec:	74 08                	je     c000c4f6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c4ee:	83 c0 04             	add    eax,0x4
c000c4f1:	39 d0                	cmp    eax,edx
c000c4f3:	75 f1                	jne    c000c4e6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c4f5:	c3                   	ret    
c000c4f6:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c500:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c50a:	eb e2                	jmp    c000c4ee <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c50c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c50c:	53                   	push   ebx
c000c50d:	83 ec 08             	sub    esp,0x8
c000c510:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c514:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c519:	74 0e                	je     c000c529 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c51b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c520:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c527:	75 37                	jne    c000c560 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c52d:	83 c0 20             	add    eax,0x20
c000c530:	c1 e0 04             	shl    eax,0x4
c000c533:	8d 50 10             	lea    edx,[eax+0x10]
c000c536:	39 98 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ebx
c000c53c:	74 0c                	je     c000c54a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c53e:	83 c0 04             	add    eax,0x4
c000c541:	39 d0                	cmp    eax,edx
c000c543:	75 f1                	jne    c000c536 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c545:	83 c4 08             	add    esp,0x8
c000c548:	5b                   	pop    ebx
c000c549:	c3                   	ret    
c000c54a:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c554:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c55e:	eb de                	jmp    c000c53e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c560:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c565:	7f 11                	jg     c000c578 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c56b:	0f b6 80 e0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde020]
c000c572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c576:	eb b1                	jmp    c000c529 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c578:	83 ec 0c             	sub    esp,0xc
c000c57b:	68 95 05 02 c0       	push   0xc0020595
c000c580:	e8 9a 43 00 00       	call   c001091f <KePanic(char const*)>
c000c585:	83 c4 10             	add    esp,0x10
c000c588:	eb 9f                	jmp    c000c529 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c58a <setupINTS()>:
c000c58a:	31 c0                	xor    eax,eax
c000c58c:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c596:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c5a0:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c5aa:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c5b4:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c5be:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c5c8:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c5d2:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c5dc:	83 c0 10             	add    eax,0x10
c000c5df:	3d 00 10 00 00       	cmp    eax,0x1000
c000c5e4:	75 a6                	jne    c000c58c <setupINTS()+0x2>
c000c5e6:	c3                   	ret    

c000c5e7 <convertLegacyIRQNumber(int)>:
c000c5e7:	83 ec 0c             	sub    esp,0xc
c000c5ea:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5f4:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5fb:	74 0c                	je     c000c609 <convertLegacyIRQNumber(int)+0x22>
c000c5fd:	83 f8 0f             	cmp    eax,0xf
c000c600:	7f 0b                	jg     c000c60d <convertLegacyIRQNumber(int)+0x26>
c000c602:	0f b6 80 e0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde020]
c000c609:	83 c4 0c             	add    esp,0xc
c000c60c:	c3                   	ret    
c000c60d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c611:	83 ec 0c             	sub    esp,0xc
c000c614:	68 a4 05 02 c0       	push   0xc00205a4
c000c619:	e8 01 43 00 00       	call   c001091f <KePanic(char const*)>
c000c61e:	83 c4 10             	add    esp,0x10
c000c621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c625:	83 c4 0c             	add    esp,0xc
c000c628:	c3                   	ret    
c000c629:	90                   	nop

c000c62a <startGUI(void*)>:
c000c62a:	55                   	push   ebp
c000c62b:	89 e5                	mov    ebp,esp
c000c62d:	53                   	push   ebx
c000c62e:	83 ec 04             	sub    esp,0x4
c000c631:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c636:	83 e8 01             	sub    eax,0x1
c000c639:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c63e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c643:	85 c0                	test   eax,eax
c000c645:	75 01                	jne    c000c648 <startGUI(void*)+0x1e>
c000c647:	fb                   	sti    
c000c648:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c64e:	83 ec 08             	sub    esp,0x8
c000c651:	6a 01                	push   0x1
c000c653:	68 01 06 02 c0       	push   0xc0020601
c000c658:	e8 19 80 00 00       	call   c0014676 <Thr::loadDLL(char const*, bool)>
c000c65d:	83 c4 10             	add    esp,0x10
c000c660:	83 ec 08             	sub    esp,0x8
c000c663:	53                   	push   ebx
c000c664:	50                   	push   eax
c000c665:	e8 3d 82 00 00       	call   c00148a7 <Thr::executeDLL(unsigned long, void*)>
c000c66a:	83 c4 10             	add    esp,0x10
c000c66d:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c673:	83 ec 08             	sub    esp,0x8
c000c676:	6a 01                	push   0x1
c000c678:	68 1b 06 02 c0       	push   0xc002061b
c000c67d:	e8 f4 7f 00 00       	call   c0014676 <Thr::loadDLL(char const*, bool)>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	83 ec 08             	sub    esp,0x8
c000c688:	53                   	push   ebx
c000c689:	50                   	push   eax
c000c68a:	e8 18 82 00 00       	call   c00148a7 <Thr::executeDLL(unsigned long, void*)>
c000c68f:	83 c4 10             	add    esp,0x10
c000c692:	90                   	nop
c000c693:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c696:	c9                   	leave  
c000c697:	c3                   	ret    

c000c698 <startGUIVESA(void*)>:
c000c698:	55                   	push   ebp
c000c699:	89 e5                	mov    ebp,esp
c000c69b:	53                   	push   ebx
c000c69c:	83 ec 04             	sub    esp,0x4
c000c69f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6a4:	83 e8 01             	sub    eax,0x1
c000c6a7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6b1:	85 c0                	test   eax,eax
c000c6b3:	75 01                	jne    c000c6b6 <startGUIVESA(void*)+0x1e>
c000c6b5:	fb                   	sti    
c000c6b6:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6bc:	83 ec 08             	sub    esp,0x8
c000c6bf:	6a 01                	push   0x1
c000c6c1:	68 39 06 02 c0       	push   0xc0020639
c000c6c6:	e8 ab 7f 00 00       	call   c0014676 <Thr::loadDLL(char const*, bool)>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	83 ec 08             	sub    esp,0x8
c000c6d1:	53                   	push   ebx
c000c6d2:	50                   	push   eax
c000c6d3:	e8 cf 81 00 00       	call   c00148a7 <Thr::executeDLL(unsigned long, void*)>
c000c6d8:	83 c4 10             	add    esp,0x10
c000c6db:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6e1:	83 ec 08             	sub    esp,0x8
c000c6e4:	6a 01                	push   0x1
c000c6e6:	68 1b 06 02 c0       	push   0xc002061b
c000c6eb:	e8 86 7f 00 00       	call   c0014676 <Thr::loadDLL(char const*, bool)>
c000c6f0:	83 c4 10             	add    esp,0x10
c000c6f3:	83 ec 08             	sub    esp,0x8
c000c6f6:	53                   	push   ebx
c000c6f7:	50                   	push   eax
c000c6f8:	e8 aa 81 00 00       	call   c00148a7 <Thr::executeDLL(unsigned long, void*)>
c000c6fd:	83 c4 10             	add    esp,0x10
c000c700:	90                   	nop
c000c701:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c704:	c9                   	leave  
c000c705:	c3                   	ret    

c000c706 <sendKeyToTerminal(unsigned char)>:
c000c706:	55                   	push   ebp
c000c707:	89 e5                	mov    ebp,esp
c000c709:	83 ec 28             	sub    esp,0x28
c000c70c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c70f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c712:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c717:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c71b:	83 ec 08             	sub    esp,0x8
c000c71e:	52                   	push   edx
c000c71f:	50                   	push   eax
c000c720:	e8 7b c6 ff ff       	call   c0008da0 <VgaText::receiveKey(unsigned char)>
c000c725:	83 c4 10             	add    esp,0x10
c000c728:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c72c:	83 f8 0a             	cmp    eax,0xa
c000c72f:	74 16                	je     c000c747 <sendKeyToTerminal(unsigned char)+0x41>
c000c731:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c735:	83 f8 03             	cmp    eax,0x3
c000c738:	74 0d                	je     c000c747 <sendKeyToTerminal(unsigned char)+0x41>
c000c73a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c73e:	83 f8 1c             	cmp    eax,0x1c
c000c741:	0f 85 97 00 00 00    	jne    c000c7de <sendKeyToTerminal(unsigned char)+0xd8>
c000c747:	fa                   	cli    
c000c748:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c74d:	83 c0 01             	add    eax,0x1
c000c750:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c755:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c75a:	83 c0 01             	add    eax,0x1
c000c75d:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c762:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c767:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c76a:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c774:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c778:	74 1f                	je     c000c799 <sendKeyToTerminal(unsigned char)+0x93>
c000c77a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c77d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c780:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c783:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c786:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c789:	83 ec 0c             	sub    esp,0xc
c000c78c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c78f:	e8 58 8e 00 00       	call   c00155ec <unblockTask(ThreadControlBlock*)>
c000c794:	83 c4 10             	add    esp,0x10
c000c797:	eb db                	jmp    c000c774 <sendKeyToTerminal(unsigned char)+0x6e>
c000c799:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c79e:	83 e8 01             	sub    eax,0x1
c000c7a1:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c7a6:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c7ab:	85 c0                	test   eax,eax
c000c7ad:	75 18                	jne    c000c7c7 <sendKeyToTerminal(unsigned char)+0xc1>
c000c7af:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c7b4:	85 c0                	test   eax,eax
c000c7b6:	74 0f                	je     c000c7c7 <sendKeyToTerminal(unsigned char)+0xc1>
c000c7b8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c7c2:	e8 0d 89 00 00       	call   c00150d4 <schedule()>
c000c7c7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7cc:	83 e8 01             	sub    eax,0x1
c000c7cf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c7d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7d9:	85 c0                	test   eax,eax
c000c7db:	75 01                	jne    c000c7de <sendKeyToTerminal(unsigned char)+0xd8>
c000c7dd:	fb                   	sti    
c000c7de:	90                   	nop
c000c7df:	c9                   	leave  
c000c7e0:	c3                   	ret    

c000c7e1 <sendKeyboardToken(KeyboardToken)>:
c000c7e1:	55                   	push   ebp
c000c7e2:	89 e5                	mov    ebp,esp
c000c7e4:	83 ec 18             	sub    esp,0x18
c000c7e7:	e8 83 41 00 00       	call   c001096f <Krnl::userIOReceived()>
c000c7ec:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c7ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f2:	0f b7 c0             	movzx  eax,ax
c000c7f5:	83 f2 01             	xor    edx,0x1
c000c7f8:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c7fe:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c803:	85 c0                	test   eax,eax
c000c805:	74 24                	je     c000c82b <sendKeyboardToken(KeyboardToken)+0x4a>
c000c807:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000c80d:	83 ec 04             	sub    esp,0x4
c000c810:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c815:	83 ec 08             	sub    esp,0x8
c000c818:	89 e2                	mov    edx,esp
c000c81a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81d:	89 02                	mov    DWORD PTR [edx],eax
c000c81f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c822:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c826:	ff d1                	call   ecx
c000c828:	83 c4 10             	add    esp,0x10
c000c82b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c82f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c832:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c837:	0f b6 d2             	movzx  edx,dl
c000c83a:	0f b6 c0             	movzx  eax,al
c000c83d:	39 c2                	cmp    edx,eax
c000c83f:	74 1c                	je     c000c85d <sendKeyboardToken(KeyboardToken)+0x7c>
c000c841:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c844:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c849:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c84e:	0f b6 c0             	movzx  eax,al
c000c851:	83 ec 0c             	sub    esp,0xc
c000c854:	50                   	push   eax
c000c855:	e8 92 bc ff ff       	call   c00084ec <setTerminalScrollLock(bool)>
c000c85a:	83 c4 10             	add    esp,0x10
c000c85d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c860:	0f b6 c0             	movzx  eax,al
c000c863:	85 c0                	test   eax,eax
c000c865:	0f 84 da 00 00 00    	je     c000c945 <sendKeyboardToken(KeyboardToken)+0x164>
c000c86b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c86e:	0f b7 c0             	movzx  eax,ax
c000c871:	3d 18 03 00 00       	cmp    eax,0x318
c000c876:	75 06                	jne    c000c87e <sendKeyboardToken(KeyboardToken)+0x9d>
c000c878:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c87e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c881:	0f b7 c0             	movzx  eax,ax
c000c884:	3d 19 03 00 00       	cmp    eax,0x319
c000c889:	75 06                	jne    c000c891 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c88b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c894:	0f b7 c0             	movzx  eax,ax
c000c897:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c89c:	75 06                	jne    c000c8a4 <sendKeyboardToken(KeyboardToken)+0xc3>
c000c89e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c8a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a7:	0f b7 c0             	movzx  eax,ax
c000c8aa:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c8af:	75 06                	jne    c000c8b7 <sendKeyboardToken(KeyboardToken)+0xd6>
c000c8b1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ba:	0f b7 c0             	movzx  eax,ax
c000c8bd:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c8c2:	75 06                	jne    c000c8ca <sendKeyboardToken(KeyboardToken)+0xe9>
c000c8c4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c8ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8cd:	0f b7 c0             	movzx  eax,ax
c000c8d0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c8d5:	75 06                	jne    c000c8dd <sendKeyboardToken(KeyboardToken)+0xfc>
c000c8d7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c8dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8e0:	0f b7 c0             	movzx  eax,ax
c000c8e3:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c8e8:	75 06                	jne    c000c8f0 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c8ea:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c8f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f3:	0f b7 c0             	movzx  eax,ax
c000c8f6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c8fb:	75 06                	jne    c000c903 <sendKeyboardToken(KeyboardToken)+0x122>
c000c8fd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c906:	0f b7 c0             	movzx  eax,ax
c000c909:	3d 20 03 00 00       	cmp    eax,0x320
c000c90e:	75 06                	jne    c000c916 <sendKeyboardToken(KeyboardToken)+0x135>
c000c910:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c919:	0f b7 c0             	movzx  eax,ax
c000c91c:	3d 21 03 00 00       	cmp    eax,0x321
c000c921:	75 06                	jne    c000c929 <sendKeyboardToken(KeyboardToken)+0x148>
c000c923:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c92c:	0f b7 c0             	movzx  eax,ax
c000c92f:	3d 22 03 00 00       	cmp    eax,0x322
c000c934:	0f 85 f1 00 00 00    	jne    c000ca2b <sendKeyboardToken(KeyboardToken)+0x24a>
c000c93a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c940:	e9 e6 00 00 00       	jmp    c000ca2b <sendKeyboardToken(KeyboardToken)+0x24a>
c000c945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c948:	0f b7 c0             	movzx  eax,ax
c000c94b:	3d 18 03 00 00       	cmp    eax,0x318
c000c950:	75 0a                	jne    c000c95c <sendKeyboardToken(KeyboardToken)+0x17b>
c000c952:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c958:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c95c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c95f:	0f b7 c0             	movzx  eax,ax
c000c962:	3d 19 03 00 00       	cmp    eax,0x319
c000c967:	75 0a                	jne    c000c973 <sendKeyboardToken(KeyboardToken)+0x192>
c000c969:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c96f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c976:	0f b7 c0             	movzx  eax,ax
c000c979:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c97e:	75 0a                	jne    c000c98a <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c980:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c986:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c98a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c98d:	0f b7 c0             	movzx  eax,ax
c000c990:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c995:	75 0a                	jne    c000c9a1 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c997:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c99d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	0f b7 c0             	movzx  eax,ax
c000c9a7:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c9ac:	75 0a                	jne    c000c9b8 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c9ae:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c9b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9bb:	0f b7 c0             	movzx  eax,ax
c000c9be:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c9c3:	75 0a                	jne    c000c9cf <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c9c5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c9cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9d2:	0f b7 c0             	movzx  eax,ax
c000c9d5:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c9da:	75 0a                	jne    c000c9e6 <sendKeyboardToken(KeyboardToken)+0x205>
c000c9dc:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c9e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e9:	0f b7 c0             	movzx  eax,ax
c000c9ec:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c9f1:	75 0a                	jne    c000c9fd <sendKeyboardToken(KeyboardToken)+0x21c>
c000c9f3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c9f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca00:	0f b7 c0             	movzx  eax,ax
c000ca03:	3d 20 03 00 00       	cmp    eax,0x320
c000ca08:	75 0a                	jne    c000ca14 <sendKeyboardToken(KeyboardToken)+0x233>
c000ca0a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000ca10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca17:	0f b7 c0             	movzx  eax,ax
c000ca1a:	3d 21 03 00 00       	cmp    eax,0x321
c000ca1f:	75 0a                	jne    c000ca2b <sendKeyboardToken(KeyboardToken)+0x24a>
c000ca21:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ca27:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca2e:	0f b7 c0             	movzx  eax,ax
c000ca31:	3d 00 02 00 00       	cmp    eax,0x200
c000ca36:	75 2f                	jne    c000ca67 <sendKeyboardToken(KeyboardToken)+0x286>
c000ca38:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca3d:	83 f0 01             	xor    eax,0x1
c000ca40:	0f b6 c0             	movzx  eax,al
c000ca43:	85 c0                	test   eax,eax
c000ca45:	74 20                	je     c000ca67 <sendKeyboardToken(KeyboardToken)+0x286>
c000ca47:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca4c:	6a 01                	push   0x1
c000ca4e:	6a 00                	push   0x0
c000ca50:	68 2a c6 00 c0       	push   0xc000c62a
c000ca55:	50                   	push   eax
c000ca56:	e8 29 84 00 00       	call   c0014e84 <Process::createThread(void (*)(void*), void*, int)>
c000ca5b:	83 c4 10             	add    esp,0x10
c000ca5e:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca65:	eb 3a                	jmp    c000caa1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca6a:	0f b7 c0             	movzx  eax,ax
c000ca6d:	3d 01 02 00 00       	cmp    eax,0x201
c000ca72:	75 2d                	jne    c000caa1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca74:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca79:	83 f0 01             	xor    eax,0x1
c000ca7c:	0f b6 c0             	movzx  eax,al
c000ca7f:	85 c0                	test   eax,eax
c000ca81:	74 1e                	je     c000caa1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca83:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca88:	6a 01                	push   0x1
c000ca8a:	6a 00                	push   0x0
c000ca8c:	68 98 c6 00 c0       	push   0xc000c698
c000ca91:	50                   	push   eax
c000ca92:	e8 ed 83 00 00       	call   c0014e84 <Process::createThread(void (*)(void*), void*, int)>
c000ca97:	83 c4 10             	add    esp,0x10
c000ca9a:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000caa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa4:	0f b7 c0             	movzx  eax,ax
c000caa7:	3d 25 03 00 00       	cmp    eax,0x325
c000caac:	75 06                	jne    c000cab4 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000caae:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab7:	0f b7 c0             	movzx  eax,ax
c000caba:	3d 24 03 00 00       	cmp    eax,0x324
c000cabf:	75 06                	jne    c000cac7 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000cac1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caca:	0f b7 c0             	movzx  eax,ax
c000cacd:	3d 23 03 00 00       	cmp    eax,0x323
c000cad2:	75 06                	jne    c000cada <sendKeyboardToken(KeyboardToken)+0x2f9>
c000cad4:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cadd:	0f b7 c0             	movzx  eax,ax
c000cae0:	3d 26 03 00 00       	cmp    eax,0x326
c000cae5:	75 06                	jne    c000caed <sendKeyboardToken(KeyboardToken)+0x30c>
c000cae7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000caed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf0:	0f b7 c0             	movzx  eax,ax
c000caf3:	3d 27 03 00 00       	cmp    eax,0x327
c000caf8:	75 06                	jne    c000cb00 <sendKeyboardToken(KeyboardToken)+0x31f>
c000cafa:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cb00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb03:	0f b7 c0             	movzx  eax,ax
c000cb06:	3d 22 03 00 00       	cmp    eax,0x322
c000cb0b:	75 06                	jne    c000cb13 <sendKeyboardToken(KeyboardToken)+0x332>
c000cb0d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cb13:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cb17:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb1a:	83 f0 01             	xor    eax,0x1
c000cb1d:	0f b6 c0             	movzx  eax,al
c000cb20:	85 c0                	test   eax,eax
c000cb22:	74 7c                	je     c000cba0 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cb24:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cb29:	0f b6 c0             	movzx  eax,al
c000cb2c:	85 c0                	test   eax,eax
c000cb2e:	74 43                	je     c000cb73 <sendKeyboardToken(KeyboardToken)+0x392>
c000cb30:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb34:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cb38:	85 c0                	test   eax,eax
c000cb3a:	74 2b                	je     c000cb67 <sendKeyboardToken(KeyboardToken)+0x386>
c000cb3c:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cb42:	89 d0                	mov    eax,edx
c000cb44:	c1 e0 02             	shl    eax,0x2
c000cb47:	01 d0                	add    eax,edx
c000cb49:	01 c0                	add    eax,eax
c000cb4b:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb53:	0f b7 c0             	movzx  eax,ax
c000cb56:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb59:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb5e:	01 d0                	add    eax,edx
c000cb60:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb65:	eb 71                	jmp    c000cbd8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb67:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb71:	eb 65                	jmp    c000cbd8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb73:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb78:	85 c0                	test   eax,eax
c000cb7a:	74 18                	je     c000cb94 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb7c:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb81:	0f b6 c0             	movzx  eax,al
c000cb84:	83 ec 0c             	sub    esp,0xc
c000cb87:	50                   	push   eax
c000cb88:	e8 79 fb ff ff       	call   c000c706 <sendKeyToTerminal(unsigned char)>
c000cb8d:	83 c4 10             	add    esp,0x10
c000cb90:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb94:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb9e:	eb 38                	jmp    c000cbd8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba3:	0f b7 c0             	movzx  eax,ax
c000cba6:	3d 01 01 00 00       	cmp    eax,0x101
c000cbab:	75 2b                	jne    c000cbd8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cbad:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbb2:	85 c0                	test   eax,eax
c000cbb4:	74 18                	je     c000cbce <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cbb6:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbbb:	0f b6 c0             	movzx  eax,al
c000cbbe:	83 ec 0c             	sub    esp,0xc
c000cbc1:	50                   	push   eax
c000cbc2:	e8 3f fb ff ff       	call   c000c706 <sendKeyToTerminal(unsigned char)>
c000cbc7:	83 c4 10             	add    esp,0x10
c000cbca:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cbce:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cbd8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbdb:	83 f0 01             	xor    eax,0x1
c000cbde:	0f b6 c0             	movzx  eax,al
c000cbe1:	85 c0                	test   eax,eax
c000cbe3:	74 5a                	je     c000cc3f <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbe5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbe8:	83 f0 01             	xor    eax,0x1
c000cbeb:	0f b6 c0             	movzx  eax,al
c000cbee:	85 c0                	test   eax,eax
c000cbf0:	74 4d                	je     c000cc3f <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbf2:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbf7:	83 f0 01             	xor    eax,0x1
c000cbfa:	0f b6 c0             	movzx  eax,al
c000cbfd:	85 c0                	test   eax,eax
c000cbff:	74 3e                	je     c000cc3f <sendKeyboardToken(KeyboardToken)+0x45e>
c000cc01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc04:	0f b7 c0             	movzx  eax,ax
c000cc07:	83 f8 1f             	cmp    eax,0x1f
c000cc0a:	76 0b                	jbe    c000cc17 <sendKeyboardToken(KeyboardToken)+0x436>
c000cc0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc0f:	0f b7 c0             	movzx  eax,ax
c000cc12:	83 f8 7e             	cmp    eax,0x7e
c000cc15:	76 16                	jbe    c000cc2d <sendKeyboardToken(KeyboardToken)+0x44c>
c000cc17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc1a:	0f b7 c0             	movzx  eax,ax
c000cc1d:	83 f8 0a             	cmp    eax,0xa
c000cc20:	74 0b                	je     c000cc2d <sendKeyboardToken(KeyboardToken)+0x44c>
c000cc22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc25:	0f b7 c0             	movzx  eax,ax
c000cc28:	83 f8 08             	cmp    eax,0x8
c000cc2b:	75 12                	jne    c000cc3f <sendKeyboardToken(KeyboardToken)+0x45e>
c000cc2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc30:	0f b6 c0             	movzx  eax,al
c000cc33:	83 ec 0c             	sub    esp,0xc
c000cc36:	50                   	push   eax
c000cc37:	e8 ca fa ff ff       	call   c000c706 <sendKeyToTerminal(unsigned char)>
c000cc3c:	83 c4 10             	add    esp,0x10
c000cc3f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cc42:	83 f0 01             	xor    eax,0x1
c000cc45:	0f b6 c0             	movzx  eax,al
c000cc48:	85 c0                	test   eax,eax
c000cc4a:	74 5d                	je     c000cca9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc4c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc4f:	83 f0 01             	xor    eax,0x1
c000cc52:	0f b6 c0             	movzx  eax,al
c000cc55:	85 c0                	test   eax,eax
c000cc57:	74 50                	je     c000cca9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc59:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cc5e:	0f b6 c0             	movzx  eax,al
c000cc61:	85 c0                	test   eax,eax
c000cc63:	74 44                	je     c000cca9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc68:	0f b7 c0             	movzx  eax,ax
c000cc6b:	83 f8 3f             	cmp    eax,0x3f
c000cc6e:	76 39                	jbe    c000cca9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc73:	0f b7 c0             	movzx  eax,ax
c000cc76:	83 f8 7f             	cmp    eax,0x7f
c000cc79:	77 2e                	ja     c000cca9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc7e:	88 c2                	mov    dl,al
c000cc80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc83:	0f b7 c0             	movzx  eax,ax
c000cc86:	83 f8 5f             	cmp    eax,0x5f
c000cc89:	76 04                	jbe    c000cc8f <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc8b:	b0 20                	mov    al,0x20
c000cc8d:	eb 02                	jmp    c000cc91 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc8f:	b0 00                	mov    al,0x0
c000cc91:	89 d1                	mov    ecx,edx
c000cc93:	29 c1                	sub    ecx,eax
c000cc95:	89 c8                	mov    eax,ecx
c000cc97:	83 e8 40             	sub    eax,0x40
c000cc9a:	0f b6 c0             	movzx  eax,al
c000cc9d:	83 ec 0c             	sub    esp,0xc
c000cca0:	50                   	push   eax
c000cca1:	e8 60 fa ff ff       	call   c000c706 <sendKeyToTerminal(unsigned char)>
c000cca6:	83 c4 10             	add    esp,0x10
c000cca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccac:	0f b7 c0             	movzx  eax,ax
c000ccaf:	3d 00 03 00 00       	cmp    eax,0x300
c000ccb4:	75 12                	jne    c000ccc8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000ccb6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ccb9:	83 f0 01             	xor    eax,0x1
c000ccbc:	0f b6 c0             	movzx  eax,al
c000ccbf:	85 c0                	test   eax,eax
c000ccc1:	74 05                	je     c000ccc8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000ccc3:	e8 25 b8 ff ff       	call   c00084ed <doTerminalCycle()>
c000ccc8:	90                   	nop
c000ccc9:	c9                   	leave  
c000ccca:	c3                   	ret    

c000cccb <clearInternalKeybuffer(VgaText*)>:
c000cccb:	55                   	push   ebp
c000cccc:	89 e5                	mov    ebp,esp
c000ccce:	83 ec 08             	sub    esp,0x8
c000ccd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccd4:	05 02 01 00 00       	add    eax,0x102
c000ccd9:	83 ec 0c             	sub    esp,0xc
c000ccdc:	50                   	push   eax
c000ccdd:	e8 8e 38 ff ff       	call   c0000570 <strlen>
c000cce2:	83 c4 10             	add    esp,0x10
c000cce5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cce8:	81 c2 02 01 00 00    	add    edx,0x102
c000ccee:	83 ec 04             	sub    esp,0x4
c000ccf1:	50                   	push   eax
c000ccf2:	6a 00                	push   0x0
c000ccf4:	52                   	push   edx
c000ccf5:	e8 f6 37 ff ff       	call   c00004f0 <memset>
c000ccfa:	83 c4 10             	add    esp,0x10
c000ccfd:	90                   	nop
c000ccfe:	c9                   	leave  
c000ccff:	c3                   	ret    

c000cd00 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cd00:	55                   	push   ebp
c000cd01:	89 e5                	mov    ebp,esp
c000cd03:	83 ec 18             	sub    esp,0x18
c000cd06:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cd0b:	85 c0                	test   eax,eax
c000cd0d:	74 2a                	je     c000cd39 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cd0f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cd15:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000cd1b:	83 ec 04             	sub    esp,0x4
c000cd1e:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cd23:	83 ec 08             	sub    esp,0x8
c000cd26:	89 e2                	mov    edx,esp
c000cd28:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cd2b:	89 02                	mov    DWORD PTR [edx],eax
c000cd2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd30:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cd34:	ff d1                	call   ecx
c000cd36:	83 c4 10             	add    esp,0x10
c000cd39:	fb                   	sti    
c000cd3a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd41:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd45:	0f 84 0d 01 00 00    	je     c000ce58 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cd4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd4e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd54:	0f be c0             	movsx  eax,al
c000cd57:	85 c0                	test   eax,eax
c000cd59:	75 2c                	jne    c000cd87 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cd5b:	fa                   	cli    
c000cd5c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd61:	83 c0 01             	add    eax,0x1
c000cd64:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd69:	e8 66 83 00 00       	call   c00150d4 <schedule()>
c000cd6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd73:	83 e8 01             	sub    eax,0x1
c000cd76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd7b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd80:	85 c0                	test   eax,eax
c000cd82:	75 c7                	jne    c000cd4b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd84:	fb                   	sti    
c000cd85:	eb c4                	jmp    c000cd4b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd8a:	8d 50 01             	lea    edx,[eax+0x1]
c000cd8d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd90:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd93:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd99:	88 10                	mov    BYTE PTR [eax],dl
c000cd9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd9e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cda4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cda7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdab:	83 f8 03             	cmp    eax,0x3
c000cdae:	75 1e                	jne    c000cdce <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cdb0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cdb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdb7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cdba:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdc0:	83 ec 08             	sub    esp,0x8
c000cdc3:	6a 02                	push   0x2
c000cdc5:	50                   	push   eax
c000cdc6:	e8 f0 3f 00 00       	call   c0010dbb <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdcb:	83 c4 10             	add    esp,0x10
c000cdce:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdd2:	83 f8 1c             	cmp    eax,0x1c
c000cdd5:	75 1e                	jne    c000cdf5 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cdd7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cddc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdde:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cde1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cde7:	83 ec 08             	sub    esp,0x8
c000cdea:	6a 09                	push   0x9
c000cdec:	50                   	push   eax
c000cded:	e8 c9 3f 00 00       	call   c0010dbb <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdf2:	83 c4 10             	add    esp,0x10
c000cdf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdf8:	05 02 01 00 00       	add    eax,0x102
c000cdfd:	83 ec 0c             	sub    esp,0xc
c000ce00:	50                   	push   eax
c000ce01:	e8 6a 37 ff ff       	call   c0000570 <strlen>
c000ce06:	83 c4 10             	add    esp,0x10
c000ce09:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce0c:	81 c2 02 01 00 00    	add    edx,0x102
c000ce12:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ce15:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce18:	81 c2 02 01 00 00    	add    edx,0x102
c000ce1e:	83 ec 04             	sub    esp,0x4
c000ce21:	50                   	push   eax
c000ce22:	51                   	push   ecx
c000ce23:	52                   	push   edx
c000ce24:	e8 a7 35 ff ff       	call   c00003d0 <memmove>
c000ce29:	83 c4 10             	add    esp,0x10
c000ce2c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000ce30:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000ce34:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce38:	83 f8 0a             	cmp    eax,0xa
c000ce3b:	74 16                	je     c000ce53 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce3d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce41:	83 f8 03             	cmp    eax,0x3
c000ce44:	74 0d                	je     c000ce53 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce46:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce4a:	83 f8 1c             	cmp    eax,0x1c
c000ce4d:	0f 85 ee fe ff ff    	jne    c000cd41 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ce53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce56:	eb 03                	jmp    c000ce5b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000ce58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce5b:	c9                   	leave  
c000ce5c:	c3                   	ret    
c000ce5d:	90                   	nop

c000ce5e <Keyboard::Keyboard(char const*)>:
c000ce5e:	83 ec 0c             	sub    esp,0xc
c000ce61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce65:	83 ec 08             	sub    esp,0x8
c000ce68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce6c:	50                   	push   eax
c000ce6d:	e8 4c f1 ff ff       	call   c000bfbe <Device::Device(char const*)>
c000ce72:	83 c4 10             	add    esp,0x10
c000ce75:	ba 5c 06 02 c0       	mov    edx,0xc002065c
c000ce7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce7e:	89 10                	mov    DWORD PTR [eax],edx
c000ce80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce84:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce8e:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce95:	90                   	nop
c000ce96:	83 c4 0c             	add    esp,0xc
c000ce99:	c3                   	ret    

c000ce9a <Keyboard::~Keyboard()>:
c000ce9a:	83 ec 0c             	sub    esp,0xc
c000ce9d:	ba 5c 06 02 c0       	mov    edx,0xc002065c
c000cea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cea6:	89 10                	mov    DWORD PTR [eax],edx
c000cea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceac:	83 ec 0c             	sub    esp,0xc
c000ceaf:	50                   	push   eax
c000ceb0:	e8 73 ee ff ff       	call   c000bd28 <Device::~Device()>
c000ceb5:	83 c4 10             	add    esp,0x10
c000ceb8:	90                   	nop
c000ceb9:	83 c4 0c             	add    esp,0xc
c000cebc:	c3                   	ret    
c000cebd:	90                   	nop

c000cebe <Keyboard::~Keyboard()>:
c000cebe:	83 ec 0c             	sub    esp,0xc
c000cec1:	83 ec 0c             	sub    esp,0xc
c000cec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cec8:	e8 cd ff ff ff       	call   c000ce9a <Keyboard::~Keyboard()>
c000cecd:	83 c4 10             	add    esp,0x10
c000ced0:	83 ec 08             	sub    esp,0x8
c000ced3:	68 5c 01 00 00       	push   0x15c
c000ced8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedc:	e8 e3 d9 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000cee1:	83 c4 10             	add    esp,0x10
c000cee4:	83 c4 0c             	add    esp,0xc
c000cee7:	c3                   	ret    

c000cee8 <LogicalDisk::close(int, int, void*)>:
c000cee8:	83 c8 ff             	or     eax,0xffffffff
c000ceeb:	c3                   	ret    

c000ceec <LogicalDisk::~LogicalDisk()>:
c000ceec:	83 ec 0c             	sub    esp,0xc
c000ceef:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c000cef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cef8:	89 10                	mov    DWORD PTR [eax],edx
c000cefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cefe:	83 ec 0c             	sub    esp,0xc
c000cf01:	50                   	push   eax
c000cf02:	e8 21 ee ff ff       	call   c000bd28 <Device::~Device()>
c000cf07:	83 c4 10             	add    esp,0x10
c000cf0a:	90                   	nop
c000cf0b:	83 c4 0c             	add    esp,0xc
c000cf0e:	c3                   	ret    
c000cf0f:	90                   	nop

c000cf10 <LogicalDisk::~LogicalDisk()>:
c000cf10:	83 ec 0c             	sub    esp,0xc
c000cf13:	83 ec 0c             	sub    esp,0xc
c000cf16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1a:	e8 cd ff ff ff       	call   c000ceec <LogicalDisk::~LogicalDisk()>
c000cf1f:	83 c4 10             	add    esp,0x10
c000cf22:	83 ec 08             	sub    esp,0x8
c000cf25:	68 78 01 00 00       	push   0x178
c000cf2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf2e:	e8 91 d9 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000cf33:	83 c4 10             	add    esp,0x10
c000cf36:	83 c4 0c             	add    esp,0xc
c000cf39:	c3                   	ret    

c000cf3a <LogicalDisk::open(int, int, void*)>:
c000cf3a:	83 ec 18             	sub    esp,0x18
c000cf3d:	68 88 06 02 c0       	push   0xc0020688
c000cf42:	e8 d8 39 00 00       	call   c001091f <KePanic(char const*)>
c000cf47:	83 c8 ff             	or     eax,0xffffffff
c000cf4a:	83 c4 1c             	add    esp,0x1c
c000cf4d:	c3                   	ret    

c000cf4e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf4e:	53                   	push   ebx
c000cf4f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf5b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf61:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf67:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf6d:	77 10                	ja     c000cf7f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf6f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf75:	89 d3                	mov    ebx,edx
c000cf77:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf7d:	72 05                	jb     c000cf84 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf7f:	83 c8 ff             	or     eax,0xffffffff
c000cf82:	89 c2                	mov    edx,eax
c000cf84:	5b                   	pop    ebx
c000cf85:	c3                   	ret    

c000cf86 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf86:	56                   	push   esi
c000cf87:	83 c8 ff             	or     eax,0xffffffff
c000cf8a:	53                   	push   ebx
c000cf8b:	89 c2                	mov    edx,eax
c000cf8d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf91:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf99:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf9f:	77 27                	ja     c000cfc8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cfa1:	89 d8                	mov    eax,ebx
c000cfa3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cfa9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cfaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfb4:	89 c2                	mov    edx,eax
c000cfb6:	73 10                	jae    c000cfc8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cfb8:	89 c8                	mov    eax,ecx
c000cfba:	89 da                	mov    edx,ebx
c000cfbc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cfc2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cfc8:	5b                   	pop    ebx
c000cfc9:	5e                   	pop    esi
c000cfca:	c3                   	ret    
c000cfcb:	90                   	nop

c000cfcc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cfcc:	83 ec 1c             	sub    esp,0x1c
c000cfcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cfdf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cfe3:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfe6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cff2:	83 ec 08             	sub    esp,0x8
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	50                   	push   eax
c000cffa:	e8 bf ef ff ff       	call   c000bfbe <Device::Device(char const*)>
c000cfff:	83 c4 10             	add    esp,0x10
c000d002:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c000d007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d00b:	89 10                	mov    DWORD PTR [eax],edx
c000d00d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d011:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d01c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d023:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d027:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d02e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d032:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d03c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d044:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d048:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d04e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d054:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d058:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d05b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d05f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d065:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d06b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d06f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d073:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d079:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d07d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d087:	90                   	nop
c000d088:	83 c4 1c             	add    esp,0x1c
c000d08b:	c3                   	ret    

c000d08c <LogicalDisk::assignDriveLetter()>:
c000d08c:	55                   	push   ebp
c000d08d:	57                   	push   edi
c000d08e:	56                   	push   esi
c000d08f:	53                   	push   ebx
c000d090:	83 ec 14             	sub    esp,0x14
c000d093:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d097:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d09d:	b0 41                	mov    al,0x41
c000d09f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d0a5:	84 d2                	test   dl,dl
c000d0a7:	75 02                	jne    c000d0ab <LogicalDisk::assignDriveLetter()+0x1f>
c000d0a9:	b0 43                	mov    al,0x43
c000d0ab:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d0b1:	0f b6 ca             	movzx  ecx,dl
c000d0b4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d0b8:	0f be e8             	movsx  ebp,al
c000d0bb:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d0c1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d0c5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d0c9:	3c 43                	cmp    al,0x43
c000d0cb:	75 10                	jne    c000d0dd <LogicalDisk::assignDriveLetter()+0x51>
c000d0cd:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d0d4:	75 5a                	jne    c000d130 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0d6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d0db:	75 53                	jne    c000d130 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0dd:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d0e0:	ba 01 00 00 00       	mov    edx,0x1
c000d0e5:	89 34 24             	mov    DWORD PTR [esp],esi
c000d0e8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d0eb:	d3 e2                	shl    edx,cl
c000d0ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0f1:	89 d7                	mov    edi,edx
c000d0f3:	89 d6                	mov    esi,edx
c000d0f5:	c1 ff 1f             	sar    edi,0x1f
c000d0f8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d0fc:	21 f9                	and    ecx,edi
c000d0fe:	09 d1                	or     ecx,edx
c000d100:	75 2e                	jne    c000d130 <LogicalDisk::assignDriveLetter()+0xa4>
c000d102:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d106:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d10a:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d110:	09 f2                	or     edx,esi
c000d112:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d115:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d11b:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d126:	09 fa                	or     edx,edi
c000d128:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d12e:	eb 0d                	jmp    c000d13d <LogicalDisk::assignDriveLetter()+0xb1>
c000d130:	8d 50 01             	lea    edx,[eax+0x1]
c000d133:	45                   	inc    ebp
c000d134:	88 d0                	mov    al,dl
c000d136:	80 fa 5b             	cmp    dl,0x5b
c000d139:	75 8e                	jne    c000d0c9 <LogicalDisk::assignDriveLetter()+0x3d>
c000d13b:	31 c0                	xor    eax,eax
c000d13d:	83 c4 14             	add    esp,0x14
c000d140:	5b                   	pop    ebx
c000d141:	5e                   	pop    esi
c000d142:	5f                   	pop    edi
c000d143:	5d                   	pop    ebp
c000d144:	c3                   	ret    
c000d145:	90                   	nop

c000d146 <LogicalDisk::mount()>:
c000d146:	56                   	push   esi
c000d147:	53                   	push   ebx
c000d148:	53                   	push   ebx
c000d149:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d14d:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d153:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d15d:	85 db                	test   ebx,ebx
c000d15f:	74 27                	je     c000d188 <LogicalDisk::mount()+0x42>
c000d161:	51                   	push   ecx
c000d162:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d169:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d16b:	83 e8 41             	sub    eax,0x41
c000d16e:	50                   	push   eax
c000d16f:	56                   	push   esi
c000d170:	53                   	push   ebx
c000d171:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d174:	83 c4 10             	add    esp,0x10
c000d177:	84 c0                	test   al,al
c000d179:	74 08                	je     c000d183 <LogicalDisk::mount()+0x3d>
c000d17b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d181:	eb 07                	jmp    c000d18a <LogicalDisk::mount()+0x44>
c000d183:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d186:	eb d5                	jmp    c000d15d <LogicalDisk::mount()+0x17>
c000d188:	31 c0                	xor    eax,eax
c000d18a:	5a                   	pop    edx
c000d18b:	5b                   	pop    ebx
c000d18c:	5e                   	pop    esi
c000d18d:	c3                   	ret    

c000d18e <LogicalDisk::unmount()>:
c000d18e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d192:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d19c:	c3                   	ret    
c000d19d:	90                   	nop

c000d19e <LogicalDisk::eject()>:
c000d19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d1a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d1aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d1ae:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d1b1:	90                   	nop

c000d1b2 <LogicalDisk::unassignDriveLetter()>:
c000d1b2:	57                   	push   edi
c000d1b3:	56                   	push   esi
c000d1b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1b8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d1bf:	85 c9                	test   ecx,ecx
c000d1c1:	75 0f                	jne    c000d1d2 <LogicalDisk::unassignDriveLetter()+0x20>
c000d1c3:	c7 44 24 0c ac 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc00206ac
c000d1cb:	5e                   	pop    esi
c000d1cc:	5f                   	pop    edi
c000d1cd:	e9 4d 37 00 00       	jmp    c001091f <KePanic(char const*)>
c000d1d2:	83 e9 41             	sub    ecx,0x41
c000d1d5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d1dc:	b8 01 00 00 00       	mov    eax,0x1
c000d1e1:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d1ec:	d3 e0                	shl    eax,cl
c000d1ee:	89 c7                	mov    edi,eax
c000d1f0:	f7 d0                	not    eax
c000d1f2:	c1 ff 1f             	sar    edi,0x1f
c000d1f5:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d1fb:	89 fe                	mov    esi,edi
c000d1fd:	f7 d6                	not    esi
c000d1ff:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d205:	5e                   	pop    esi
c000d206:	5f                   	pop    edi
c000d207:	c3                   	ret    

c000d208 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d208:	57                   	push   edi
c000d209:	56                   	push   esi
c000d20a:	53                   	push   ebx
c000d20b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d20f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d213:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d217:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d21b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d221:	77 41                	ja     c000d264 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d223:	99                   	cdq    
c000d224:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d22a:	01 c8                	add    eax,ecx
c000d22c:	11 da                	adc    edx,ebx
c000d22e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d234:	19 d7                	sbb    edi,edx
c000d236:	72 33                	jb     c000d26b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d238:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d23e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d244:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d248:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d24c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d252:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d258:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d25c:	5b                   	pop    ebx
c000d25d:	5e                   	pop    esi
c000d25e:	5f                   	pop    edi
c000d25f:	e9 c6 0a 00 00       	jmp    c000dd2a <VCache::read(unsigned long long, int, void*)>
c000d264:	b8 05 00 00 00       	mov    eax,0x5
c000d269:	eb 05                	jmp    c000d270 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d26b:	b8 07 00 00 00       	mov    eax,0x7
c000d270:	5b                   	pop    ebx
c000d271:	5e                   	pop    esi
c000d272:	5f                   	pop    edi
c000d273:	c3                   	ret    

c000d274 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d274:	57                   	push   edi
c000d275:	56                   	push   esi
c000d276:	53                   	push   ebx
c000d277:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d27b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d27f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d283:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d287:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d28d:	77 41                	ja     c000d2d0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d28f:	99                   	cdq    
c000d290:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d296:	01 c8                	add    eax,ecx
c000d298:	11 da                	adc    edx,ebx
c000d29a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d2a0:	19 d7                	sbb    edi,edx
c000d2a2:	72 33                	jb     c000d2d7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d2a4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d2aa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d2b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d2b4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d2b8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d2be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2c8:	5b                   	pop    ebx
c000d2c9:	5e                   	pop    esi
c000d2ca:	5f                   	pop    edi
c000d2cb:	e9 6c 09 00 00       	jmp    c000dc3c <VCache::write(unsigned long long, int, void*)>
c000d2d0:	b8 05 00 00 00       	mov    eax,0x5
c000d2d5:	eb 05                	jmp    c000d2dc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d2d7:	b8 07 00 00 00       	mov    eax,0x7
c000d2dc:	5b                   	pop    ebx
c000d2dd:	5e                   	pop    esi
c000d2de:	5f                   	pop    edi
c000d2df:	c3                   	ret    

c000d2e0 <Mouse::Mouse(char const*)>:
c000d2e0:	83 ec 0c             	sub    esp,0xc
c000d2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e7:	83 ec 08             	sub    esp,0x8
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	50                   	push   eax
c000d2ef:	e8 ca ec ff ff       	call   c000bfbe <Device::Device(char const*)>
c000d2f4:	83 c4 10             	add    esp,0x10
c000d2f7:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000d2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d300:	89 10                	mov    DWORD PTR [eax],edx
c000d302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d306:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d310:	90                   	nop
c000d311:	83 c4 0c             	add    esp,0xc
c000d314:	c3                   	ret    
c000d315:	90                   	nop
c000d316:	66 90                	xchg   ax,ax

c000d318 <Mouse::~Mouse()>:
c000d318:	83 ec 0c             	sub    esp,0xc
c000d31b:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000d320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d324:	89 10                	mov    DWORD PTR [eax],edx
c000d326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d32a:	83 ec 0c             	sub    esp,0xc
c000d32d:	50                   	push   eax
c000d32e:	e8 f5 e9 ff ff       	call   c000bd28 <Device::~Device()>
c000d333:	83 c4 10             	add    esp,0x10
c000d336:	90                   	nop
c000d337:	83 c4 0c             	add    esp,0xc
c000d33a:	c3                   	ret    
c000d33b:	90                   	nop

c000d33c <Mouse::~Mouse()>:
c000d33c:	83 ec 0c             	sub    esp,0xc
c000d33f:	83 ec 0c             	sub    esp,0xc
c000d342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d346:	e8 cd ff ff ff       	call   c000d318 <Mouse::~Mouse()>
c000d34b:	83 c4 10             	add    esp,0x10
c000d34e:	83 ec 08             	sub    esp,0x8
c000d351:	68 58 01 00 00       	push   0x158
c000d356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35a:	e8 65 d5 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000d35f:	83 c4 10             	add    esp,0x10
c000d362:	83 c4 0c             	add    esp,0xc
c000d365:	c3                   	ret    

c000d366 <NIC::getMAC()>:
c000d366:	31 c0                	xor    eax,eax
c000d368:	31 d2                	xor    edx,edx
c000d36a:	c3                   	ret    
c000d36b:	90                   	nop

c000d36c <NIC::write(int, unsigned char*, int*)>:
c000d36c:	b8 01 00 00 00       	mov    eax,0x1
c000d371:	c3                   	ret    

c000d372 <NIC::NIC(char const*)>:
c000d372:	83 ec 0c             	sub    esp,0xc
c000d375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d379:	83 ec 08             	sub    esp,0x8
c000d37c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d380:	50                   	push   eax
c000d381:	e8 38 ec ff ff       	call   c000bfbe <Device::Device(char const*)>
c000d386:	83 c4 10             	add    esp,0x10
c000d389:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c000d38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d392:	89 10                	mov    DWORD PTR [eax],edx
c000d394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d398:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d3a2:	90                   	nop
c000d3a3:	83 c4 0c             	add    esp,0xc
c000d3a6:	c3                   	ret    
c000d3a7:	90                   	nop

c000d3a8 <NIC::~NIC()>:
c000d3a8:	83 ec 0c             	sub    esp,0xc
c000d3ab:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c000d3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b4:	89 10                	mov    DWORD PTR [eax],edx
c000d3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ba:	83 ec 0c             	sub    esp,0xc
c000d3bd:	50                   	push   eax
c000d3be:	e8 65 e9 ff ff       	call   c000bd28 <Device::~Device()>
c000d3c3:	83 c4 10             	add    esp,0x10
c000d3c6:	90                   	nop
c000d3c7:	83 c4 0c             	add    esp,0xc
c000d3ca:	c3                   	ret    
c000d3cb:	90                   	nop

c000d3cc <NIC::~NIC()>:
c000d3cc:	83 ec 0c             	sub    esp,0xc
c000d3cf:	83 ec 0c             	sub    esp,0xc
c000d3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3d6:	e8 cd ff ff ff       	call   c000d3a8 <NIC::~NIC()>
c000d3db:	83 c4 10             	add    esp,0x10
c000d3de:	83 ec 08             	sub    esp,0x8
c000d3e1:	68 58 01 00 00       	push   0x158
c000d3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ea:	e8 d5 d4 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000d3ef:	83 c4 10             	add    esp,0x10
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	c3                   	ret    

c000d3f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3f6:	55                   	push   ebp
c000d3f7:	57                   	push   edi
c000d3f8:	56                   	push   esi
c000d3f9:	53                   	push   ebx
c000d3fa:	81 ec 28 01 00 00    	sub    esp,0x128
c000d400:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d407:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d40e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d415:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d41c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d420:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d424:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d42b:	e8 8a ec ff ff       	call   c000c0ba <Device::getName()>
c000d430:	5a                   	pop    edx
c000d431:	59                   	pop    ecx
c000d432:	50                   	push   eax
c000d433:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d437:	55                   	push   ebp
c000d438:	e8 03 32 ff ff       	call   c0000640 <strcpy>
c000d43d:	5b                   	pop    ebx
c000d43e:	58                   	pop    eax
c000d43f:	68 58 07 02 c0       	push   0xc0020758
c000d444:	55                   	push   ebp
c000d445:	e8 f6 33 ff ff       	call   c0000840 <strcat>
c000d44a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d451:	e8 58 a6 ff ff       	call   c0007aae <malloc>
c000d456:	83 c4 0c             	add    esp,0xc
c000d459:	89 c3                	mov    ebx,eax
c000d45b:	57                   	push   edi
c000d45c:	56                   	push   esi
c000d45d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d461:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d465:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d46c:	55                   	push   ebp
c000d46d:	50                   	push   eax
c000d46e:	e8 59 fb ff ff       	call   c000cfcc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d473:	83 c4 14             	add    esp,0x14
c000d476:	53                   	push   ebx
c000d477:	e8 10 fc ff ff       	call   c000d08c <LogicalDisk::assignDriveLetter()>
c000d47c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d47f:	e8 c2 fc ff ff       	call   c000d146 <LogicalDisk::mount()>
c000d484:	58                   	pop    eax
c000d485:	5a                   	pop    edx
c000d486:	53                   	push   ebx
c000d487:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d48e:	e8 93 e9 ff ff       	call   c000be26 <Device::addChild(Device*)>
c000d493:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d499:	5b                   	pop    ebx
c000d49a:	5e                   	pop    esi
c000d49b:	5f                   	pop    edi
c000d49c:	5d                   	pop    ebp
c000d49d:	c3                   	ret    

c000d49e <createPartitionsForDisk(PhysicalDisk*)>:
c000d49e:	55                   	push   ebp
c000d49f:	57                   	push   edi
c000d4a0:	56                   	push   esi
c000d4a1:	53                   	push   ebx
c000d4a2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4a8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4af:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4b5:	3d 00 02 00 00       	cmp    eax,0x200
c000d4ba:	74 27                	je     c000d4e3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4bc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4c2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d4c8:	83 ec 10             	sub    esp,0x10
c000d4cb:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d4cf:	99                   	cdq    
c000d4d0:	c1 e6 0a             	shl    esi,0xa
c000d4d3:	52                   	push   edx
c000d4d4:	89 fd                	mov    ebp,edi
c000d4d6:	50                   	push   eax
c000d4d7:	55                   	push   ebp
c000d4d8:	56                   	push   esi
c000d4d9:	e8 92 11 01 00       	call   c001e670 <__udivdi3>
c000d4de:	e9 b9 00 00 00       	jmp    c000d59c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4e3:	83 ec 0c             	sub    esp,0xc
c000d4e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4e8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d4ec:	56                   	push   esi
c000d4ed:	6a 01                	push   0x1
c000d4ef:	6a 00                	push   0x0
c000d4f1:	6a 00                	push   0x0
c000d4f3:	53                   	push   ebx
c000d4f4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d4f7:	83 c4 20             	add    esp,0x20
c000d4fa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d502:	75 0a                	jne    c000d50e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d504:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d50c:	74 2c                	je     c000d53a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d50e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d514:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d51a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d520:	83 ec 10             	sub    esp,0x10
c000d523:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d527:	89 f7                	mov    edi,esi
c000d529:	c1 e0 0a             	shl    eax,0xa
c000d52c:	c1 ff 1f             	sar    edi,0x1f
c000d52f:	57                   	push   edi
c000d530:	56                   	push   esi
c000d531:	52                   	push   edx
c000d532:	50                   	push   eax
c000d533:	e8 38 11 01 00       	call   c001e670 <__udivdi3>
c000d538:	eb 62                	jmp    c000d59c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d53a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d541:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d548:	89 cf                	mov    edi,ecx
c000d54a:	83 e2 7f             	and    edx,0x7f
c000d54d:	83 e7 7f             	and    edi,0x7f
c000d550:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d557:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d55a:	83 e0 7f             	and    eax,0x7f
c000d55d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d560:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d567:	83 e0 7f             	and    eax,0x7f
c000d56a:	01 d0                	add    eax,edx
c000d56c:	89 c5                	mov    ebp,eax
c000d56e:	84 c0                	test   al,al
c000d570:	74 41                	je     c000d5b3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d572:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d578:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d57e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d584:	83 ec 10             	sub    esp,0x10
c000d587:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d58b:	89 f7                	mov    edi,esi
c000d58d:	c1 e0 0a             	shl    eax,0xa
c000d590:	c1 ff 1f             	sar    edi,0x1f
c000d593:	57                   	push   edi
c000d594:	56                   	push   esi
c000d595:	52                   	push   edx
c000d596:	50                   	push   eax
c000d597:	e8 d4 10 01 00       	call   c001e670 <__udivdi3>
c000d59c:	83 c4 14             	add    esp,0x14
c000d59f:	52                   	push   edx
c000d5a0:	50                   	push   eax
c000d5a1:	6a 00                	push   0x0
c000d5a3:	6a 00                	push   0x0
c000d5a5:	53                   	push   ebx
c000d5a6:	e8 4b fe ff ff       	call   c000d3f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5ab:	83 c4 20             	add    esp,0x20
c000d5ae:	e9 73 01 00 00       	jmp    c000d726 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d5b3:	89 f0                	mov    eax,esi
c000d5b5:	31 c9                	xor    ecx,ecx
c000d5b7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5be:	75 02                	jne    c000d5c2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d5c0:	89 cd                	mov    ebp,ecx
c000d5c2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5c9:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d5d0:	c1 e2 08             	shl    edx,0x8
c000d5d3:	c1 e6 10             	shl    esi,0x10
c000d5d6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d5de:	09 f2                	or     edx,esi
c000d5e0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d5e8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000d5ef:	83 c0 10             	add    eax,0x10
c000d5f2:	09 f2                	or     edx,esi
c000d5f4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d5fb:	c1 e6 18             	shl    esi,0x18
c000d5fe:	09 f2                	or     edx,esi
c000d600:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d607:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d60b:	c1 e6 10             	shl    esi,0x10
c000d60e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d615:	c1 e2 08             	shl    edx,0x8
c000d618:	09 f2                	or     edx,esi
c000d61a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d621:	09 f2                	or     edx,esi
c000d623:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d62a:	c1 e6 18             	shl    esi,0x18
c000d62d:	09 f2                	or     edx,esi
c000d62f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d633:	41                   	inc    ecx
c000d634:	83 f9 04             	cmp    ecx,0x4
c000d637:	0f 85 7a ff ff ff    	jne    c000d5b7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d641:	83 f0 01             	xor    eax,0x1
c000d644:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d648:	75 4f                	jne    c000d699 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d64a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d64e:	83 f0 01             	xor    eax,0x1
c000d651:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d655:	75 42                	jne    c000d699 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d657:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d65f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d667:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d66d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d673:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d679:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d67d:	89 f7                	mov    edi,esi
c000d67f:	c1 e0 0a             	shl    eax,0xa
c000d682:	c1 ff 1f             	sar    edi,0x1f
c000d685:	57                   	push   edi
c000d686:	56                   	push   esi
c000d687:	52                   	push   edx
c000d688:	50                   	push   eax
c000d689:	e8 e2 0f 01 00       	call   c001e670 <__udivdi3>
c000d68e:	83 c4 10             	add    esp,0x10
c000d691:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d695:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d699:	89 e8                	mov    eax,ebp
c000d69b:	0f b6 e8             	movzx  ebp,al
c000d69e:	85 ed                	test   ebp,ebp
c000d6a0:	74 50                	je     c000d6f2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d6a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d6a6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d6aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d6b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6ba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6be:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d6c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d6ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6ce:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d6d2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d6d6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6da:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6e2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d6e6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d6ea:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d6ee:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d6f2:	31 ed                	xor    ebp,ebp
c000d6f4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6f8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6fc:	89 f8                	mov    eax,edi
c000d6fe:	09 f0                	or     eax,esi
c000d700:	74 1e                	je     c000d720 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d702:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d706:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d70a:	89 d1                	mov    ecx,edx
c000d70c:	09 c1                	or     ecx,eax
c000d70e:	74 10                	je     c000d720 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d710:	83 ec 0c             	sub    esp,0xc
c000d713:	57                   	push   edi
c000d714:	56                   	push   esi
c000d715:	52                   	push   edx
c000d716:	50                   	push   eax
c000d717:	53                   	push   ebx
c000d718:	e8 d9 fc ff ff       	call   c000d3f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d71d:	83 c4 20             	add    esp,0x20
c000d720:	45                   	inc    ebp
c000d721:	83 fd 04             	cmp    ebp,0x4
c000d724:	75 ce                	jne    c000d6f4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d726:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d72c:	5b                   	pop    ebx
c000d72d:	5e                   	pop    esi
c000d72e:	5f                   	pop    edi
c000d72f:	5d                   	pop    ebp
c000d730:	c3                   	ret    
c000d731:	66 90                	xchg   ax,ax
c000d733:	90                   	nop

c000d734 <Serial::Serial(char const*)>:
c000d734:	83 ec 0c             	sub    esp,0xc
c000d737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73b:	83 ec 08             	sub    esp,0x8
c000d73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d742:	50                   	push   eax
c000d743:	e8 76 e8 ff ff       	call   c000bfbe <Device::Device(char const*)>
c000d748:	83 c4 10             	add    esp,0x10
c000d74b:	ba 6c 07 02 c0       	mov    edx,0xc002076c
c000d750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d754:	89 10                	mov    DWORD PTR [eax],edx
c000d756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d764:	90                   	nop
c000d765:	83 c4 0c             	add    esp,0xc
c000d768:	c3                   	ret    
c000d769:	90                   	nop
c000d76a:	66 90                	xchg   ax,ax

c000d76c <Serial::~Serial()>:
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	ba 6c 07 02 c0       	mov    edx,0xc002076c
c000d774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d778:	89 10                	mov    DWORD PTR [eax],edx
c000d77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77e:	83 ec 0c             	sub    esp,0xc
c000d781:	50                   	push   eax
c000d782:	e8 a1 e5 ff ff       	call   c000bd28 <Device::~Device()>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	90                   	nop
c000d78b:	83 c4 0c             	add    esp,0xc
c000d78e:	c3                   	ret    
c000d78f:	90                   	nop

c000d790 <Serial::~Serial()>:
c000d790:	83 ec 0c             	sub    esp,0xc
c000d793:	83 ec 0c             	sub    esp,0xc
c000d796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79a:	e8 cd ff ff ff       	call   c000d76c <Serial::~Serial()>
c000d79f:	83 c4 10             	add    esp,0x10
c000d7a2:	83 ec 08             	sub    esp,0x8
c000d7a5:	68 58 01 00 00       	push   0x158
c000d7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ae:	e8 11 d1 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000d7b3:	83 c4 10             	add    esp,0x10
c000d7b6:	83 c4 0c             	add    esp,0xc
c000d7b9:	c3                   	ret    
c000d7ba:	66 90                	xchg   ax,ax

c000d7bc <Timer::Timer(char const*)>:
c000d7bc:	83 ec 0c             	sub    esp,0xc
c000d7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c3:	83 ec 08             	sub    esp,0x8
c000d7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ca:	50                   	push   eax
c000d7cb:	e8 ee e7 ff ff       	call   c000bfbe <Device::Device(char const*)>
c000d7d0:	83 c4 10             	add    esp,0x10
c000d7d3:	ba b0 07 02 c0       	mov    edx,0xc00207b0
c000d7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7dc:	89 10                	mov    DWORD PTR [eax],edx
c000d7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d7ec:	90                   	nop
c000d7ed:	83 c4 0c             	add    esp,0xc
c000d7f0:	c3                   	ret    
c000d7f1:	90                   	nop
c000d7f2:	66 90                	xchg   ax,ax

c000d7f4 <Timer::~Timer()>:
c000d7f4:	83 ec 0c             	sub    esp,0xc
c000d7f7:	ba b0 07 02 c0       	mov    edx,0xc00207b0
c000d7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d800:	89 10                	mov    DWORD PTR [eax],edx
c000d802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d806:	83 ec 0c             	sub    esp,0xc
c000d809:	50                   	push   eax
c000d80a:	e8 19 e5 ff ff       	call   c000bd28 <Device::~Device()>
c000d80f:	83 c4 10             	add    esp,0x10
c000d812:	90                   	nop
c000d813:	83 c4 0c             	add    esp,0xc
c000d816:	c3                   	ret    
c000d817:	90                   	nop

c000d818 <Timer::~Timer()>:
c000d818:	83 ec 0c             	sub    esp,0xc
c000d81b:	83 ec 0c             	sub    esp,0xc
c000d81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d822:	e8 cd ff ff ff       	call   c000d7f4 <Timer::~Timer()>
c000d827:	83 c4 10             	add    esp,0x10
c000d82a:	83 ec 08             	sub    esp,0x8
c000d82d:	68 5c 01 00 00       	push   0x15c
c000d832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d836:	e8 89 d0 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000d83b:	83 c4 10             	add    esp,0x10
c000d83e:	83 c4 0c             	add    esp,0xc
c000d841:	c3                   	ret    

c000d842 <Timer::read()>:
c000d842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d846:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d84c:	c3                   	ret    

c000d84d <setupTimer(int)>:
c000d84d:	53                   	push   ebx
c000d84e:	83 ec 14             	sub    esp,0x14
c000d851:	68 5c 01 00 00       	push   0x15c
c000d856:	e8 53 a2 ff ff       	call   c0007aae <malloc>
c000d85b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d85e:	89 c3                	mov    ebx,eax
c000d860:	e8 6b 06 01 00       	call   c001ded0 <PIT::PIT()>
c000d865:	58                   	pop    eax
c000d866:	5a                   	pop    edx
c000d867:	53                   	push   ebx
c000d868:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d86e:	e8 b3 e5 ff ff       	call   c000be26 <Device::addChild(Device*)>
c000d873:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d875:	6a 00                	push   0x0
c000d877:	6a 00                	push   0x0
c000d879:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d87d:	53                   	push   ebx
c000d87e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d881:	89 d8                	mov    eax,ebx
c000d883:	83 c4 28             	add    esp,0x28
c000d886:	5b                   	pop    ebx
c000d887:	c3                   	ret    

c000d888 <timerHandler(unsigned int)>:
c000d888:	56                   	push   esi
c000d889:	53                   	push   ebx
c000d88a:	51                   	push   ecx
c000d88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88f:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d895:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d89c:	0f 84 4a 01 00 00    	je     c000d9ec <timerHandler(unsigned int)+0x164>
c000d8a2:	fa                   	cli    
c000d8a3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d8a9:	83 ec 0c             	sub    esp,0xc
c000d8ac:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d8b2:	68 78 81 02 c0       	push   0xc0028178
c000d8b7:	e8 84 13 01 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	84 c0                	test   al,al
c000d8c1:	0f 85 a1 00 00 00    	jne    c000d968 <timerHandler(unsigned int)+0xe0>
c000d8c7:	83 ec 0c             	sub    esp,0xc
c000d8ca:	68 78 81 02 c0       	push   0xc0028178
c000d8cf:	e8 88 13 01 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8d4:	83 c4 10             	add    esp,0x10
c000d8d7:	89 c6                	mov    esi,eax
c000d8d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8dc:	83 ec 0c             	sub    esp,0xc
c000d8df:	68 78 81 02 c0       	push   0xc0028178
c000d8e4:	e8 73 13 01 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8e9:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d8f0:	89 c3                	mov    ebx,eax
c000d8f2:	e8 6d 13 01 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8f7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d903:	77 23                	ja     c000d928 <timerHandler(unsigned int)+0xa0>
c000d905:	83 ec 0c             	sub    esp,0xc
c000d908:	53                   	push   ebx
c000d909:	e8 de 7c 00 00       	call   c00155ec <unblockTask(ThreadControlBlock*)>
c000d90e:	83 c4 10             	add    esp,0x10
c000d911:	39 de                	cmp    esi,ebx
c000d913:	75 27                	jne    c000d93c <timerHandler(unsigned int)+0xb4>
c000d915:	83 ec 0c             	sub    esp,0xc
c000d918:	68 78 81 02 c0       	push   0xc0028178
c000d91d:	e8 3a 13 01 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d922:	89 c6                	mov    esi,eax
c000d924:	eb 12                	jmp    c000d938 <timerHandler(unsigned int)+0xb0>
c000d926:	66 90                	xchg   ax,ax
c000d928:	52                   	push   edx
c000d929:	52                   	push   edx
c000d92a:	53                   	push   ebx
c000d92b:	68 78 81 02 c0       	push   0xc0028178
c000d930:	e8 eb 13 01 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d935:	8d 76 00             	lea    esi,[esi+0x0]
c000d938:	83 c4 10             	add    esp,0x10
c000d93b:	90                   	nop
c000d93c:	83 ec 0c             	sub    esp,0xc
c000d93f:	68 78 81 02 c0       	push   0xc0028178
c000d944:	e8 f7 12 01 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d949:	83 c4 10             	add    esp,0x10
c000d94c:	84 c0                	test   al,al
c000d94e:	75 18                	jne    c000d968 <timerHandler(unsigned int)+0xe0>
c000d950:	83 ec 0c             	sub    esp,0xc
c000d953:	68 78 81 02 c0       	push   0xc0028178
c000d958:	e8 ff 12 01 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d95d:	83 c4 10             	add    esp,0x10
c000d960:	39 f0                	cmp    eax,esi
c000d962:	0f 85 74 ff ff ff    	jne    c000d8dc <timerHandler(unsigned int)+0x54>
c000d968:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d96d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d971:	74 41                	je     c000d9b4 <timerHandler(unsigned int)+0x12c>
c000d973:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d97a:	74 38                	je     c000d9b4 <timerHandler(unsigned int)+0x12c>
c000d97c:	fa                   	cli    
c000d97d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d983:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d988:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d98e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d991:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d997:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d99a:	72 08                	jb     c000d9a4 <timerHandler(unsigned int)+0x11c>
c000d99c:	e8 33 77 00 00       	call   c00150d4 <schedule()>
c000d9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d9a4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9a9:	48                   	dec    eax
c000d9aa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9af:	75 03                	jne    c000d9b4 <timerHandler(unsigned int)+0x12c>
c000d9b1:	fb                   	sti    
c000d9b2:	66 90                	xchg   ax,ax
c000d9b4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d9b9:	48                   	dec    eax
c000d9ba:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d9bf:	75 1b                	jne    c000d9dc <timerHandler(unsigned int)+0x154>
c000d9c1:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d9c8:	74 12                	je     c000d9dc <timerHandler(unsigned int)+0x154>
c000d9ca:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d9d4:	e8 fb 76 00 00       	call   c00150d4 <schedule()>
c000d9d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9dc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9e1:	48                   	dec    eax
c000d9e2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9e7:	75 03                	jne    c000d9ec <timerHandler(unsigned int)+0x164>
c000d9e9:	fb                   	sti    
c000d9ea:	66 90                	xchg   ax,ax
c000d9ec:	58                   	pop    eax
c000d9ed:	5b                   	pop    ebx
c000d9ee:	5e                   	pop    esi
c000d9ef:	c3                   	ret    

c000d9f0 <VCache::VCache(PhysicalDisk*)>:
c000d9f0:	53                   	push   ebx
c000d9f1:	83 ec 18             	sub    esp,0x18
c000d9f4:	ba e0 07 02 c0       	mov    edx,0xc00207e0
c000d9f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fd:	89 10                	mov    DWORD PTR [eax],edx
c000d9ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da03:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da19:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da20:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da2b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da32:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da48:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da50:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da57:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da62:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da72:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da7a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da81:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da89:	83 ec 0c             	sub    esp,0xc
c000da8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da90:	e8 19 a0 ff ff       	call   c0007aae <malloc>
c000da95:	83 c4 10             	add    esp,0x10
c000da98:	89 c3                	mov    ebx,eax
c000da9a:	83 ec 0c             	sub    esp,0xc
c000da9d:	53                   	push   ebx
c000da9e:	e8 cd 73 00 00       	call   c0014e70 <Mutex::Mutex()>
c000daa3:	83 c4 10             	add    esp,0x10
c000daa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daaa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000daad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dab5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dabc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dac3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dac7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dacd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dad4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dad8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dade:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dae4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dae8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000daeb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000daee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000daf6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dafa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db00:	05 00 02 00 00       	add    eax,0x200
c000db05:	c1 e0 03             	shl    eax,0x3
c000db08:	83 ec 0c             	sub    esp,0xc
c000db0b:	50                   	push   eax
c000db0c:	e8 9d 9f ff ff       	call   c0007aae <malloc>
c000db11:	83 c4 10             	add    esp,0x10
c000db14:	89 c2                	mov    edx,eax
c000db16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db1a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db21:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db34:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db3a:	89 d0                	mov    eax,edx
c000db3c:	c1 e0 02             	shl    eax,0x2
c000db3f:	01 d0                	add    eax,edx
c000db41:	c1 e0 04             	shl    eax,0x4
c000db44:	83 ec 0c             	sub    esp,0xc
c000db47:	50                   	push   eax
c000db48:	e8 61 9f ff ff       	call   c0007aae <malloc>
c000db4d:	83 c4 10             	add    esp,0x10
c000db50:	89 c2                	mov    edx,eax
c000db52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db56:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db59:	90                   	nop
c000db5a:	83 c4 18             	add    esp,0x18
c000db5d:	5b                   	pop    ebx
c000db5e:	c3                   	ret    
c000db5f:	90                   	nop

c000db60 <VCache::invalidateReadBuffer()>:
c000db60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db64:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db6a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db6e:	c3                   	ret    
c000db6f:	90                   	nop

c000db70 <VCache::writeWriteBuffer()>:
c000db70:	53                   	push   ebx
c000db71:	83 ec 08             	sub    esp,0x8
c000db74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db78:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db7c:	74 1e                	je     c000db9c <VCache::writeWriteBuffer()+0x2c>
c000db7e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db81:	83 ec 0c             	sub    esp,0xc
c000db84:	8b 10                	mov    edx,DWORD PTR [eax]
c000db86:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db8c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db8f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db92:	50                   	push   eax
c000db93:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db96:	83 c4 20             	add    esp,0x20
c000db99:	8d 76 00             	lea    esi,[esi+0x0]
c000db9c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dba3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dbaa:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dbae:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbb5:	83 c4 08             	add    esp,0x8
c000dbb8:	5b                   	pop    ebx
c000dbb9:	c3                   	ret    
c000dbba:	66 90                	xchg   ax,ax

c000dbbc <VCache::~VCache()>:
c000dbbc:	83 ec 0c             	sub    esp,0xc
c000dbbf:	ba e0 07 02 c0       	mov    edx,0xc00207e0
c000dbc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc8:	89 10                	mov    DWORD PTR [eax],edx
c000dbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbce:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dbd1:	0f b6 c0             	movzx  eax,al
c000dbd4:	85 c0                	test   eax,eax
c000dbd6:	74 10                	je     c000dbe8 <VCache::~VCache()+0x2c>
c000dbd8:	83 ec 0c             	sub    esp,0xc
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	e8 8c ff ff ff       	call   c000db70 <VCache::writeWriteBuffer()>
c000dbe4:	83 c4 10             	add    esp,0x10
c000dbe7:	90                   	nop
c000dbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dbef:	83 ec 0c             	sub    esp,0xc
c000dbf2:	50                   	push   eax
c000dbf3:	e8 c6 9e ff ff       	call   c0007abe <free>
c000dbf8:	83 c4 10             	add    esp,0x10
c000dbfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dc02:	83 ec 0c             	sub    esp,0xc
c000dc05:	50                   	push   eax
c000dc06:	e8 b3 9e ff ff       	call   c0007abe <free>
c000dc0b:	83 c4 10             	add    esp,0x10
c000dc0e:	90                   	nop
c000dc0f:	83 c4 0c             	add    esp,0xc
c000dc12:	c3                   	ret    
c000dc13:	90                   	nop

c000dc14 <VCache::~VCache()>:
c000dc14:	83 ec 0c             	sub    esp,0xc
c000dc17:	83 ec 0c             	sub    esp,0xc
c000dc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1e:	e8 99 ff ff ff       	call   c000dbbc <VCache::~VCache()>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	83 ec 08             	sub    esp,0x8
c000dc29:	6a 44                	push   0x44
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	e8 90 cc ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000dc34:	83 c4 10             	add    esp,0x10
c000dc37:	83 c4 0c             	add    esp,0xc
c000dc3a:	c3                   	ret    
c000dc3b:	90                   	nop

c000dc3c <VCache::write(unsigned long long, int, void*)>:
c000dc3c:	55                   	push   ebp
c000dc3d:	57                   	push   edi
c000dc3e:	56                   	push   esi
c000dc3f:	53                   	push   ebx
c000dc40:	83 ec 1c             	sub    esp,0x1c
c000dc43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc4b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc53:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dc57:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc5b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc5f:	74 07                	je     c000dc68 <VCache::write(unsigned long long, int, void*)+0x2c>
c000dc61:	53                   	push   ebx
c000dc62:	e8 f9 fe ff ff       	call   c000db60 <VCache::invalidateReadBuffer()>
c000dc67:	58                   	pop    eax
c000dc68:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc6c:	74 62                	je     c000dcd0 <VCache::write(unsigned long long, int, void*)+0x94>
c000dc6e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc75:	99                   	cdq    
c000dc76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc7a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc7d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc80:	31 c1                	xor    ecx,eax
c000dc82:	89 d0                	mov    eax,edx
c000dc84:	89 ca                	mov    edx,ecx
c000dc86:	31 e8                	xor    eax,ebp
c000dc88:	09 c2                	or     edx,eax
c000dc8a:	75 38                	jne    c000dcc4 <VCache::write(unsigned long long, int, void*)+0x88>
c000dc8c:	83 ff 01             	cmp    edi,0x1
c000dc8f:	75 33                	jne    c000dcc4 <VCache::write(unsigned long long, int, void*)+0x88>
c000dc91:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc98:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dc9e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dca1:	0f af c8             	imul   ecx,eax
c000dca4:	01 cf                	add    edi,ecx
c000dca6:	89 c1                	mov    ecx,eax
c000dca8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcaa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dcad:	40                   	inc    eax
c000dcae:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dcb1:	83 f8 50             	cmp    eax,0x50
c000dcb4:	75 6a                	jne    c000dd20 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dcb6:	83 ec 0c             	sub    esp,0xc
c000dcb9:	53                   	push   ebx
c000dcba:	e8 b1 fe ff ff       	call   c000db70 <VCache::writeWriteBuffer()>
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	eb 5c                	jmp    c000dd20 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dcc4:	83 ec 0c             	sub    esp,0xc
c000dcc7:	53                   	push   ebx
c000dcc8:	e8 a3 fe ff ff       	call   c000db70 <VCache::writeWriteBuffer()>
c000dccd:	83 c4 10             	add    esp,0x10
c000dcd0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dcd3:	83 ff 4f             	cmp    edi,0x4f
c000dcd6:	7f 20                	jg     c000dcf8 <VCache::write(unsigned long long, int, void*)+0xbc>
c000dcd8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dcdb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcdf:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dce2:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dce5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dce9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dcec:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcf2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcf4:	eb 2a                	jmp    c000dd20 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dcf6:	66 90                	xchg   ax,ax
c000dcf8:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcfa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dcfe:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dd02:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dd06:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dd0a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd0e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd12:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dd15:	83 c4 1c             	add    esp,0x1c
c000dd18:	5b                   	pop    ebx
c000dd19:	5e                   	pop    esi
c000dd1a:	5f                   	pop    edi
c000dd1b:	5d                   	pop    ebp
c000dd1c:	ff e0                	jmp    eax
c000dd1e:	66 90                	xchg   ax,ax
c000dd20:	83 c4 1c             	add    esp,0x1c
c000dd23:	31 c0                	xor    eax,eax
c000dd25:	5b                   	pop    ebx
c000dd26:	5e                   	pop    esi
c000dd27:	5f                   	pop    edi
c000dd28:	5d                   	pop    ebp
c000dd29:	c3                   	ret    

c000dd2a <VCache::read(unsigned long long, int, void*)>:
c000dd2a:	55                   	push   ebp
c000dd2b:	57                   	push   edi
c000dd2c:	56                   	push   esi
c000dd2d:	53                   	push   ebx
c000dd2e:	83 ec 1c             	sub    esp,0x1c
c000dd31:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dd35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd39:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dd3d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd41:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd49:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dd4d:	74 0d                	je     c000dd5c <VCache::read(unsigned long long, int, void*)+0x32>
c000dd4f:	83 ec 0c             	sub    esp,0xc
c000dd52:	57                   	push   edi
c000dd53:	e8 18 fe ff ff       	call   c000db70 <VCache::writeWriteBuffer()>
c000dd58:	83 c4 10             	add    esp,0x10
c000dd5b:	90                   	nop
c000dd5c:	83 fd 01             	cmp    ebp,0x1
c000dd5f:	0f 85 93 00 00 00    	jne    c000ddf8 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd65:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd68:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd6b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd72:	0f 85 80 00 00 00    	jne    c000ddf8 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd78:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000dd7b:	89 e9                	mov    ecx,ebp
c000dd7d:	f7 d9                	neg    ecx
c000dd7f:	89 c8                	mov    eax,ecx
c000dd81:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd85:	c1 f8 1f             	sar    eax,0x1f
c000dd88:	21 d9                	and    ecx,ebx
c000dd8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd8e:	89 c8                	mov    eax,ecx
c000dd90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd94:	21 f1                	and    ecx,esi
c000dd96:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd9a:	89 ca                	mov    edx,ecx
c000dd9c:	74 2e                	je     c000ddcc <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd9e:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dda1:	75 29                	jne    c000ddcc <VCache::read(unsigned long long, int, void*)+0xa2>
c000dda3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dda6:	75 24                	jne    c000ddcc <VCache::read(unsigned long long, int, void*)+0xa2>
c000dda8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddab:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ddb1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000ddb4:	8d 70 ff             	lea    esi,[eax-0x1]
c000ddb7:	21 f3                	and    ebx,esi
c000ddb9:	0f af d9             	imul   ebx,ecx
c000ddbc:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000ddbf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ddc3:	89 de                	mov    esi,ebx
c000ddc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddc7:	31 c0                	xor    eax,eax
c000ddc9:	eb 61                	jmp    c000de2c <VCache::read(unsigned long long, int, void*)+0x102>
c000ddcb:	90                   	nop
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000ddd3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ddd7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000ddda:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dddd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dddf:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dde2:	55                   	push   ebp
c000dde3:	52                   	push   edx
c000dde4:	50                   	push   eax
c000dde5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dde9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ddec:	83 c4 20             	add    esp,0x20
c000ddef:	85 c0                	test   eax,eax
c000ddf1:	75 39                	jne    c000de2c <VCache::read(unsigned long long, int, void*)+0x102>
c000ddf3:	eb b3                	jmp    c000dda8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ddf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf8:	83 ec 0c             	sub    esp,0xc
c000ddfb:	57                   	push   edi
c000ddfc:	e8 5f fd ff ff       	call   c000db60 <VCache::invalidateReadBuffer()>
c000de01:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de04:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de08:	8b 10                	mov    edx,DWORD PTR [eax]
c000de0a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000de0e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000de12:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000de16:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000de1a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de1e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000de21:	83 c4 2c             	add    esp,0x2c
c000de24:	5b                   	pop    ebx
c000de25:	5e                   	pop    esi
c000de26:	5f                   	pop    edi
c000de27:	5d                   	pop    ebp
c000de28:	ff e0                	jmp    eax
c000de2a:	66 90                	xchg   ax,ax
c000de2c:	83 c4 1c             	add    esp,0x1c
c000de2f:	5b                   	pop    ebx
c000de30:	5e                   	pop    esi
c000de31:	5f                   	pop    edi
c000de32:	5d                   	pop    ebp
c000de33:	c3                   	ret    

c000de34 <Video::putrect(int, int, int, int, unsigned int)>:
c000de34:	55                   	push   ebp
c000de35:	57                   	push   edi
c000de36:	56                   	push   esi
c000de37:	53                   	push   ebx
c000de38:	83 ec 1c             	sub    esp,0x1c
c000de3b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de43:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de47:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de53:	01 df                	add    edi,ebx
c000de55:	39 fb                	cmp    ebx,edi
c000de57:	7d 1f                	jge    c000de78 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de59:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de5d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de61:	7d 12                	jge    c000de75 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de63:	8b 16                	mov    edx,DWORD PTR [esi]
c000de65:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de69:	53                   	push   ebx
c000de6a:	55                   	push   ebp
c000de6b:	45                   	inc    ebp
c000de6c:	56                   	push   esi
c000de6d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de70:	83 c4 10             	add    esp,0x10
c000de73:	eb e8                	jmp    c000de5d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de75:	43                   	inc    ebx
c000de76:	eb dd                	jmp    c000de55 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de78:	83 c4 1c             	add    esp,0x1c
c000de7b:	5b                   	pop    ebx
c000de7c:	5e                   	pop    esi
c000de7d:	5f                   	pop    edi
c000de7e:	5d                   	pop    ebp
c000de7f:	c3                   	ret    

c000de80 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de80:	55                   	push   ebp
c000de81:	57                   	push   edi
c000de82:	31 ff                	xor    edi,edi
c000de84:	56                   	push   esi
c000de85:	53                   	push   ebx
c000de86:	83 ec 1c             	sub    esp,0x1c
c000de89:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de8d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de91:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de98:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dea1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dea5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dea9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000deac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000deb0:	01 f9                	add    ecx,edi
c000deb2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000deb6:	7d 2f                	jge    c000dee7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000deb8:	31 f6                	xor    esi,esi
c000deba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000debe:	01 f2                	add    edx,esi
c000dec0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000dec4:	7d 1a                	jge    c000dee0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000dec6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dec9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000decc:	46                   	inc    esi
c000decd:	51                   	push   ecx
c000dece:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ded2:	52                   	push   edx
c000ded3:	55                   	push   ebp
c000ded4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dede:	eb da                	jmp    c000deba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000dee0:	47                   	inc    edi
c000dee1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000dee5:	eb c5                	jmp    c000deac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000dee7:	83 c4 1c             	add    esp,0x1c
c000deea:	5b                   	pop    ebx
c000deeb:	5e                   	pop    esi
c000deec:	5f                   	pop    edi
c000deed:	5d                   	pop    ebp
c000deee:	c3                   	ret    
c000deef:	90                   	nop

c000def0 <Video::blit(unsigned int*, int, int, int, int)>:
c000def0:	55                   	push   ebp
c000def1:	57                   	push   edi
c000def2:	56                   	push   esi
c000def3:	53                   	push   ebx
c000def4:	83 ec 1c             	sub    esp,0x1c
c000def7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000defb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000deff:	85 c0                	test   eax,eax
c000df01:	79 02                	jns    c000df05 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000df03:	31 c0                	xor    eax,eax
c000df05:	c1 e0 02             	shl    eax,0x2
c000df08:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000df0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df10:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df14:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000df18:	39 d8                	cmp    eax,ebx
c000df1a:	7e 49                	jle    c000df65 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df1c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df22:	7c 41                	jl     c000df65 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df24:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df28:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df2c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df30:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df34:	39 f9                	cmp    ecx,edi
c000df36:	7e 22                	jle    c000df5a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df38:	83 c5 04             	add    ebp,0x4
c000df3b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df41:	7c 14                	jl     c000df57 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df43:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df45:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df48:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df50:	56                   	push   esi
c000df51:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df54:	83 c4 10             	add    esp,0x10
c000df57:	47                   	inc    edi
c000df58:	eb d2                	jmp    c000df2c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df5e:	43                   	inc    ebx
c000df5f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df63:	eb ab                	jmp    c000df10 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df65:	83 c4 1c             	add    esp,0x1c
c000df68:	5b                   	pop    ebx
c000df69:	5e                   	pop    esi
c000df6a:	5f                   	pop    edi
c000df6b:	5d                   	pop    ebp
c000df6c:	c3                   	ret    
c000df6d:	90                   	nop

c000df6e <Video::clearScreen(unsigned int)>:
c000df6e:	57                   	push   edi
c000df6f:	56                   	push   esi
c000df70:	53                   	push   ebx
c000df71:	31 db                	xor    ebx,ebx
c000df73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df77:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df7d:	7e 1f                	jle    c000df9e <Video::clearScreen(unsigned int)+0x30>
c000df7f:	31 ff                	xor    edi,edi
c000df81:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df87:	7e 12                	jle    c000df9b <Video::clearScreen(unsigned int)+0x2d>
c000df89:	8b 06                	mov    eax,DWORD PTR [esi]
c000df8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df8f:	53                   	push   ebx
c000df90:	57                   	push   edi
c000df91:	47                   	inc    edi
c000df92:	56                   	push   esi
c000df93:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df96:	83 c4 10             	add    esp,0x10
c000df99:	eb e6                	jmp    c000df81 <Video::clearScreen(unsigned int)+0x13>
c000df9b:	43                   	inc    ebx
c000df9c:	eb d9                	jmp    c000df77 <Video::clearScreen(unsigned int)+0x9>
c000df9e:	5b                   	pop    ebx
c000df9f:	5e                   	pop    esi
c000dfa0:	5f                   	pop    edi
c000dfa1:	c3                   	ret    

c000dfa2 <Video::putpixel(int, int, unsigned int)>:
c000dfa2:	c7 44 24 04 e8 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc00207e8
c000dfaa:	e9 70 29 00 00       	jmp    c001091f <KePanic(char const*)>
c000dfaf:	90                   	nop

c000dfb0 <Video::readPixelApprox(int, int)>:
c000dfb0:	83 ec 18             	sub    esp,0x18
c000dfb3:	68 09 08 02 c0       	push   0xc0020809
c000dfb8:	e8 62 29 00 00       	call   c001091f <KePanic(char const*)>
c000dfbd:	31 c0                	xor    eax,eax
c000dfbf:	83 c4 1c             	add    esp,0x1c
c000dfc2:	c3                   	ret    
c000dfc3:	90                   	nop

c000dfc4 <Video::Video(char const*)>:
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcb:	83 ec 08             	sub    esp,0x8
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	50                   	push   eax
c000dfd3:	e8 e6 df ff ff       	call   c000bfbe <Device::Device(char const*)>
c000dfd8:	83 c4 10             	add    esp,0x10
c000dfdb:	ba 84 08 02 c0       	mov    edx,0xc0020884
c000dfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe4:	89 10                	mov    DWORD PTR [eax],edx
c000dfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfea:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dff4:	90                   	nop
c000dff5:	83 c4 0c             	add    esp,0xc
c000dff8:	c3                   	ret    
c000dff9:	90                   	nop

c000dffa <Video::~Video()>:
c000dffa:	83 ec 0c             	sub    esp,0xc
c000dffd:	ba 84 08 02 c0       	mov    edx,0xc0020884
c000e002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e006:	89 10                	mov    DWORD PTR [eax],edx
c000e008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	50                   	push   eax
c000e010:	e8 13 dd ff ff       	call   c000bd28 <Device::~Device()>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	90                   	nop
c000e019:	83 c4 0c             	add    esp,0xc
c000e01c:	c3                   	ret    
c000e01d:	90                   	nop

c000e01e <Video::~Video()>:
c000e01e:	83 ec 0c             	sub    esp,0xc
c000e021:	83 ec 0c             	sub    esp,0xc
c000e024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e028:	e8 cd ff ff ff       	call   c000dffa <Video::~Video()>
c000e02d:	83 c4 10             	add    esp,0x10
c000e030:	83 ec 08             	sub    esp,0x8
c000e033:	68 64 01 00 00       	push   0x164
c000e038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03c:	e8 83 c8 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c000e041:	83 c4 10             	add    esp,0x10
c000e044:	83 c4 0c             	add    esp,0xc
c000e047:	c3                   	ret    

c000e048 <Video::isMonochrome()>:
c000e048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e04c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e052:	c3                   	ret    
c000e053:	90                   	nop

c000e054 <Video::getWidth()>:
c000e054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e058:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e05e:	c3                   	ret    
c000e05f:	90                   	nop

c000e060 <Video::getHeight()>:
c000e060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e064:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e06a:	c3                   	ret    
c000e06b:	90                   	nop

c000e06c <Video::drawCursor(int, int, unsigned int*, int)>:
c000e06c:	55                   	push   ebp
c000e06d:	57                   	push   edi
c000e06e:	56                   	push   esi
c000e06f:	53                   	push   ebx
c000e070:	83 ec 2c             	sub    esp,0x2c
c000e073:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e077:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e07b:	83 f8 01             	cmp    eax,0x1
c000e07e:	19 c9                	sbb    ecx,ecx
c000e080:	31 db                	xor    ebx,ebx
c000e082:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e086:	89 cd                	mov    ebp,ecx
c000e088:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e090:	f7 d5                	not    ebp
c000e092:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e098:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e09c:	01 d8                	add    eax,ebx
c000e09e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a2:	56                   	push   esi
c000e0a3:	e8 b8 ff ff ff       	call   c000e060 <Video::getHeight()>
c000e0a8:	59                   	pop    ecx
c000e0a9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e0ad:	7e 70                	jle    c000e11f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e0af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0b3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e0b7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e0ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0c2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0cd:	89 f8                	mov    eax,edi
c000e0cf:	83 c0 20             	add    eax,0x20
c000e0d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0d6:	56                   	push   esi
c000e0d7:	e8 78 ff ff ff       	call   c000e054 <Video::getWidth()>
c000e0dc:	5a                   	pop    edx
c000e0dd:	39 c7                	cmp    edi,eax
c000e0df:	7d 34                	jge    c000e115 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e0e1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0e6:	74 05                	je     c000e0ed <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e0e8:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0ea:	55                   	push   ebp
c000e0eb:	eb 0d                	jmp    c000e0fa <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0ed:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0f2:	74 12                	je     c000e106 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0f4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0fe:	57                   	push   edi
c000e0ff:	56                   	push   esi
c000e100:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e103:	83 c4 10             	add    esp,0x10
c000e106:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e10a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e10e:	47                   	inc    edi
c000e10f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e113:	75 c1                	jne    c000e0d6 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e115:	43                   	inc    ebx
c000e116:	83 fb 20             	cmp    ebx,0x20
c000e119:	0f 85 79 ff ff ff    	jne    c000e098 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e11f:	83 c4 2c             	add    esp,0x2c
c000e122:	5b                   	pop    ebx
c000e123:	5e                   	pop    esi
c000e124:	5f                   	pop    edi
c000e125:	5d                   	pop    ebp
c000e126:	c3                   	ret    
c000e127:	90                   	nop

c000e128 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e128:	55                   	push   ebp
c000e129:	57                   	push   edi
c000e12a:	56                   	push   esi
c000e12b:	53                   	push   ebx
c000e12c:	83 ec 28             	sub    esp,0x28
c000e12f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e133:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e137:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e13b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e13f:	c1 e6 08             	shl    esi,0x8
c000e142:	01 c6                	add    esi,eax
c000e144:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e148:	c1 e0 08             	shl    eax,0x8
c000e14b:	01 d0                	add    eax,edx
c000e14d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e151:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e155:	0f af c6             	imul   eax,esi
c000e158:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e15f:	50                   	push   eax
c000e160:	e8 49 99 ff ff       	call   c0007aae <malloc>
c000e165:	83 c4 10             	add    esp,0x10
c000e168:	89 c7                	mov    edi,eax
c000e16a:	85 c0                	test   eax,eax
c000e16c:	75 10                	jne    c000e17e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e16e:	83 ec 0c             	sub    esp,0xc
c000e171:	68 34 08 02 c0       	push   0xc0020834
c000e176:	e8 a4 27 00 00       	call   c001091f <KePanic(char const*)>
c000e17b:	83 c4 10             	add    esp,0x10
c000e17e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e182:	ba 12 00 00 00       	mov    edx,0x12
c000e187:	85 c0                	test   eax,eax
c000e189:	74 11                	je     c000e19c <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e18b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e18f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e193:	c1 fa 03             	sar    edx,0x3
c000e196:	0f af d1             	imul   edx,ecx
c000e199:	83 c2 12             	add    edx,0x12
c000e19c:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e1a0:	74 04                	je     c000e1a6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e1a2:	85 f6                	test   esi,esi
c000e1a4:	75 12                	jne    c000e1b8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e1a6:	83 ec 0c             	sub    esp,0xc
c000e1a9:	68 44 08 02 c0       	push   0xc0020844
c000e1ae:	e8 3e c8 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000e1b3:	e9 b8 00 00 00       	jmp    c000e270 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e1b8:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e1bc:	83 f9 02             	cmp    ecx,0x2
c000e1bf:	0f 85 96 00 00 00    	jne    c000e25b <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e1c5:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1ca:	75 0e                	jne    c000e1da <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1cc:	85 c0                	test   eax,eax
c000e1ce:	75 0a                	jne    c000e1da <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1d3:	83 e8 18             	sub    eax,0x18
c000e1d6:	a8 f7                	test   al,0xf7
c000e1d8:	74 0a                	je     c000e1e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e1da:	83 ec 0c             	sub    esp,0xc
c000e1dd:	68 59 08 02 c0       	push   0xc0020859
c000e1e2:	eb 7f                	jmp    c000e263 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e1e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1ec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1f4:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e1f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e200:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e204:	75 0c                	jne    c000e212 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e206:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e20b:	c1 e0 18             	shl    eax,0x18
c000e20e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e212:	45                   	inc    ebp
c000e213:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e218:	c1 e1 10             	shl    ecx,0x10
c000e21b:	89 c8                	mov    eax,ecx
c000e21d:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e222:	c1 e1 08             	shl    ecx,0x8
c000e225:	09 c1                	or     ecx,eax
c000e227:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e22b:	09 c1                	or     ecx,eax
c000e22d:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e231:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e235:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e239:	c1 f8 03             	sar    eax,0x3
c000e23c:	01 c2                	add    edx,eax
c000e23e:	89 e8                	mov    eax,ebp
c000e240:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e244:	39 c6                	cmp    esi,eax
c000e246:	7f b0                	jg     c000e1f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e248:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e24c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e250:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e253:	7e 22                	jle    c000e277 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e255:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e259:	eb 99                	jmp    c000e1f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e25b:	50                   	push   eax
c000e25c:	50                   	push   eax
c000e25d:	51                   	push   ecx
c000e25e:	68 67 08 02 c0       	push   0xc0020867
c000e263:	e8 89 c7 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c000e268:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e26b:	e8 4e 98 ff ff       	call   c0007abe <free>
c000e270:	83 c4 10             	add    esp,0x10
c000e273:	31 ff                	xor    edi,edi
c000e275:	eb 0f                	jmp    c000e286 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e277:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e27b:	89 30                	mov    DWORD PTR [eax],esi
c000e27d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e281:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e284:	89 30                	mov    DWORD PTR [eax],esi
c000e286:	83 c4 1c             	add    esp,0x1c
c000e289:	89 f8                	mov    eax,edi
c000e28b:	5b                   	pop    ebx
c000e28c:	5e                   	pop    esi
c000e28d:	5f                   	pop    edi
c000e28e:	5d                   	pop    ebp
c000e28f:	c3                   	ret    

c000e290 <Video::putTGA(int, int, unsigned char*, int)>:
c000e290:	55                   	push   ebp
c000e291:	57                   	push   edi
c000e292:	56                   	push   esi
c000e293:	53                   	push   ebx
c000e294:	83 ec 28             	sub    esp,0x28
c000e297:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e29b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e29f:	50                   	push   eax
c000e2a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2a4:	50                   	push   eax
c000e2a5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2ad:	56                   	push   esi
c000e2ae:	e8 75 fe ff ff       	call   c000e128 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e2b3:	83 c4 20             	add    esp,0x20
c000e2b6:	85 c0                	test   eax,eax
c000e2b8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2bc:	74 35                	je     c000e2f3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2be:	89 c7                	mov    edi,eax
c000e2c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2c4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2c8:	39 d8                	cmp    eax,ebx
c000e2ca:	7e 27                	jle    c000e2f3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2cc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2d4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2d8:	39 e8                	cmp    eax,ebp
c000e2da:	7e 14                	jle    c000e2f0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2dc:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2de:	83 c7 04             	add    edi,0x4
c000e2e1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e2e4:	53                   	push   ebx
c000e2e5:	55                   	push   ebp
c000e2e6:	45                   	inc    ebp
c000e2e7:	56                   	push   esi
c000e2e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e2eb:	83 c4 10             	add    esp,0x10
c000e2ee:	eb e0                	jmp    c000e2d0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2f0:	43                   	inc    ebx
c000e2f1:	eb cd                	jmp    c000e2c0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2f3:	83 c4 1c             	add    esp,0x1c
c000e2f6:	5b                   	pop    ebx
c000e2f7:	5e                   	pop    esi
c000e2f8:	5f                   	pop    edi
c000e2f9:	5d                   	pop    ebp
c000e2fa:	c3                   	ret    
c000e2fb:	90                   	nop

c000e2fc <ACPI::close(int, int, void*)>:
c000e2fc:	83 ec 1c             	sub    esp,0x1c
c000e2ff:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e307:	74 0b                	je     c000e314 <ACPI::close(int, int, void*)+0x18>
c000e309:	b8 00 00 00 00       	mov    eax,0x0
c000e30e:	e9 99 00 00 00       	jmp    c000e3ac <ACPI::close(int, int, void*)+0xb0>
c000e313:	90                   	nop
c000e314:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e319:	75 29                	jne    c000e344 <ACPI::close(int, int, void*)+0x48>
c000e31b:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e320:	85 c0                	test   eax,eax
c000e322:	74 08                	je     c000e32c <ACPI::close(int, int, void*)+0x30>
c000e324:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e329:	ff d0                	call   eax
c000e32b:	90                   	nop
c000e32c:	83 ec 0c             	sub    esp,0xc
c000e32f:	68 c8 08 02 c0       	push   0xc00208c8
c000e334:	e8 e6 25 00 00       	call   c001091f <KePanic(char const*)>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e341:	eb 69                	jmp    c000e3ac <ACPI::close(int, int, void*)+0xb0>
c000e343:	90                   	nop
c000e344:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e349:	75 59                	jne    c000e3a4 <ACPI::close(int, int, void*)+0xa8>
c000e34b:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e350:	85 c0                	test   eax,eax
c000e352:	74 08                	je     c000e35c <ACPI::close(int, int, void*)+0x60>
c000e354:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e359:	ff d0                	call   eax
c000e35b:	90                   	nop
c000e35c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e361:	8d 76 00             	lea    esi,[esi+0x0]
c000e364:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e369:	83 e0 02             	and    eax,0x2
c000e36c:	74 1e                	je     c000e38c <ACPI::close(int, int, void*)+0x90>
c000e36e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e379:	89 c2                	mov    edx,eax
c000e37b:	ec                   	in     al,dx
c000e37c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e380:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e384:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e388:	eb da                	jmp    c000e364 <ACPI::close(int, int, void*)+0x68>
c000e38a:	66 90                	xchg   ax,ax
c000e38c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e393:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e398:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e39c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3a0:	ee                   	out    dx,al
c000e3a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e3a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3ac:	83 c4 1c             	add    esp,0x1c
c000e3af:	c3                   	ret    

c000e3b0 <findRSDP()>:
c000e3b0:	83 ec 1c             	sub    esp,0x1c
c000e3b3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3b8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3be:	83 e0 04             	and    eax,0x4
c000e3c1:	0f b6 c0             	movzx  eax,al
c000e3c4:	85 c0                	test   eax,eax
c000e3c6:	75 08                	jne    c000e3d0 <findRSDP()+0x20>
c000e3c8:	b8 00 00 00 00       	mov    eax,0x0
c000e3cd:	eb 75                	jmp    c000e444 <findRSDP()+0x94>
c000e3cf:	90                   	nop
c000e3d0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e3d5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3da:	7f 1c                	jg     c000e3f8 <findRSDP()+0x48>
c000e3dc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3e1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3e7:	83 e2 fb             	and    edx,0xfffffffb
c000e3ea:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3f0:	b8 00 00 00 00       	mov    eax,0x0
c000e3f5:	eb 4d                	jmp    c000e444 <findRSDP()+0x94>
c000e3f7:	90                   	nop
c000e3f8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e400:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e408:	77 32                	ja     c000e43c <findRSDP()+0x8c>
c000e40a:	83 ec 04             	sub    esp,0x4
c000e40d:	6a 08                	push   0x8
c000e40f:	68 63 09 02 c0       	push   0xc0020963
c000e414:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e418:	e8 63 1f ff ff       	call   c0000380 <memcmp>
c000e41d:	83 c4 10             	add    esp,0x10
c000e420:	85 c0                	test   eax,eax
c000e422:	0f 94 c0             	sete   al
c000e425:	0f b6 c0             	movzx  eax,al
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 08                	je     c000e434 <findRSDP()+0x84>
c000e42c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e430:	eb 12                	jmp    c000e444 <findRSDP()+0x94>
c000e432:	66 90                	xchg   ax,ax
c000e434:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e439:	eb c5                	jmp    c000e400 <findRSDP()+0x50>
c000e43b:	90                   	nop
c000e43c:	b8 00 00 00 00       	mov    eax,0x0
c000e441:	8d 76 00             	lea    esi,[esi+0x0]
c000e444:	83 c4 1c             	add    esp,0x1c
c000e447:	c3                   	ret    

c000e448 <loadACPITables(unsigned char*)>:
c000e448:	57                   	push   edi
c000e449:	56                   	push   esi
c000e44a:	53                   	push   ebx
c000e44b:	83 ec 60             	sub    esp,0x60
c000e44e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e453:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e459:	83 e0 04             	and    eax,0x4
c000e45c:	0f b6 c0             	movzx  eax,al
c000e45f:	85 c0                	test   eax,eax
c000e461:	0f 84 41 02 00 00    	je     c000e6a8 <loadACPITables(unsigned char*)+0x260>
c000e467:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e46c:	0f b6 c0             	movzx  eax,al
c000e46f:	85 c0                	test   eax,eax
c000e471:	74 79                	je     c000e4ec <loadACPITables(unsigned char*)+0xa4>
c000e473:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e477:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e47b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e47f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e482:	83 e8 24             	sub    eax,0x24
c000e485:	c1 e8 03             	shr    eax,0x3
c000e488:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e48c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e494:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e498:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e49c:	0f 8d ba 00 00 00    	jge    c000e55c <loadACPITables(unsigned char*)+0x114>
c000e4a2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4a6:	83 c0 24             	add    eax,0x24
c000e4a9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e4ad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e4b1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e4b5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4b9:	c1 e0 03             	shl    eax,0x3
c000e4bc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e4c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4c9:	89 c1                	mov    ecx,eax
c000e4cb:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4d0:	8d 50 01             	lea    edx,[eax+0x1]
c000e4d3:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4d9:	89 ca                	mov    edx,ecx
c000e4db:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4e2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e4e7:	eb ab                	jmp    c000e494 <loadACPITables(unsigned char*)+0x4c>
c000e4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ec:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4f0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4fb:	83 e8 24             	sub    eax,0x24
c000e4fe:	c1 e8 02             	shr    eax,0x2
c000e501:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e505:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e50d:	8d 76 00             	lea    esi,[esi+0x0]
c000e510:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e514:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e518:	7d 42                	jge    c000e55c <loadACPITables(unsigned char*)+0x114>
c000e51a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e51e:	83 c0 24             	add    eax,0x24
c000e521:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e525:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e529:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e52d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e531:	c1 e0 02             	shl    eax,0x2
c000e534:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e538:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e53c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e53e:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e543:	8d 50 01             	lea    edx,[eax+0x1]
c000e546:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e54c:	89 ca                	mov    edx,ecx
c000e54e:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e555:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e55a:	eb b4                	jmp    c000e510 <loadACPITables(unsigned char*)+0xc8>
c000e55c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e564:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e569:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e56d:	0f 8d 39 01 00 00    	jge    c000e6ac <loadACPITables(unsigned char*)+0x264>
c000e573:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e577:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e57e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e582:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e586:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e58e:	25 ff 0f 00 00       	and    eax,0xfff
c000e593:	89 c6                	mov    esi,eax
c000e595:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e59b:	83 ec 0c             	sub    esp,0xc
c000e59e:	6a 01                	push   0x1
c000e5a0:	e8 78 b0 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e5a5:	83 c4 10             	add    esp,0x10
c000e5a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5b2:	83 ec 0c             	sub    esp,0xc
c000e5b5:	6a 01                	push   0x1
c000e5b7:	6a 01                	push   0x1
c000e5b9:	50                   	push   eax
c000e5ba:	52                   	push   edx
c000e5bb:	53                   	push   ebx
c000e5bc:	e8 57 ba ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5c1:	83 c4 20             	add    esp,0x20
c000e5c4:	09 f0                	or     eax,esi
c000e5c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5ca:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5ce:	c1 e0 03             	shl    eax,0x3
c000e5d1:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e5d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5e2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5fe:	89 c6                	mov    esi,eax
c000e600:	89 d7                	mov    edi,edx
c000e602:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e604:	89 c8                	mov    eax,ecx
c000e606:	89 fa                	mov    edx,edi
c000e608:	89 f3                	mov    ebx,esi
c000e60a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e60e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e612:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e616:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e61a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e61d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e621:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e625:	05 00 10 00 00       	add    eax,0x1000
c000e62a:	c1 e8 0c             	shr    eax,0xc
c000e62d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e631:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e635:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e639:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e63d:	25 ff 0f 00 00       	and    eax,0xfff
c000e642:	89 c6                	mov    esi,eax
c000e644:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e64a:	83 ec 0c             	sub    esp,0xc
c000e64d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e651:	e8 c7 af ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e656:	83 c4 10             	add    esp,0x10
c000e659:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e65d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e663:	83 ec 0c             	sub    esp,0xc
c000e666:	6a 01                	push   0x1
c000e668:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e66c:	50                   	push   eax
c000e66d:	52                   	push   edx
c000e66e:	53                   	push   ebx
c000e66f:	e8 a4 b9 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e674:	83 c4 20             	add    esp,0x20
c000e677:	09 f0                	or     eax,esi
c000e679:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e67d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e681:	83 ec 0c             	sub    esp,0xc
c000e684:	50                   	push   eax
c000e685:	e8 af b2 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000e68a:	83 c4 10             	add    esp,0x10
c000e68d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e691:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e695:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e69c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e6a1:	e9 be fe ff ff       	jmp    c000e564 <loadACPITables(unsigned char*)+0x11c>
c000e6a6:	66 90                	xchg   ax,ax
c000e6a8:	90                   	nop
c000e6a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6ac:	83 c4 60             	add    esp,0x60
c000e6af:	5b                   	pop    ebx
c000e6b0:	5e                   	pop    esi
c000e6b1:	5f                   	pop    edi
c000e6b2:	c3                   	ret    
c000e6b3:	90                   	nop

c000e6b4 <findRSDT(unsigned char*)>:
c000e6b4:	57                   	push   edi
c000e6b5:	56                   	push   esi
c000e6b6:	53                   	push   ebx
c000e6b7:	83 ec 50             	sub    esp,0x50
c000e6ba:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e6bf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6c5:	83 e0 04             	and    eax,0x4
c000e6c8:	0f b6 c0             	movzx  eax,al
c000e6cb:	85 c0                	test   eax,eax
c000e6cd:	75 0d                	jne    c000e6dc <findRSDT(unsigned char*)+0x28>
c000e6cf:	b8 00 00 00 00       	mov    eax,0x0
c000e6d4:	e9 2b 01 00 00       	jmp    c000e804 <findRSDT(unsigned char*)+0x150>
c000e6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6dc:	89 e0                	mov    eax,esp
c000e6de:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6e2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6ea:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e702:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e706:	89 c6                	mov    esi,eax
c000e708:	89 d7                	mov    edi,edx
c000e70a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e70c:	89 c8                	mov    eax,ecx
c000e70e:	89 fa                	mov    edx,edi
c000e710:	89 f3                	mov    ebx,esi
c000e712:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e716:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e71a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e71e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e722:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e726:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e72e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e732:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e736:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e73e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e742:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e746:	25 ff 0f 00 00       	and    eax,0xfff
c000e74b:	89 c6                	mov    esi,eax
c000e74d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e753:	83 ec 0c             	sub    esp,0xc
c000e756:	6a 02                	push   0x2
c000e758:	e8 c0 ae ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e75d:	83 c4 10             	add    esp,0x10
c000e760:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e764:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e76a:	83 ec 0c             	sub    esp,0xc
c000e76d:	6a 01                	push   0x1
c000e76f:	6a 02                	push   0x2
c000e771:	50                   	push   eax
c000e772:	52                   	push   edx
c000e773:	53                   	push   ebx
c000e774:	e8 9f b8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e779:	83 c4 20             	add    esp,0x20
c000e77c:	09 f0                	or     eax,esi
c000e77e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e782:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e786:	25 ff 0f 00 00       	and    eax,0xfff
c000e78b:	89 c6                	mov    esi,eax
c000e78d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e793:	83 ec 0c             	sub    esp,0xc
c000e796:	6a 02                	push   0x2
c000e798:	e8 80 ae ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e79d:	83 c4 10             	add    esp,0x10
c000e7a0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7aa:	83 ec 0c             	sub    esp,0xc
c000e7ad:	6a 01                	push   0x1
c000e7af:	6a 02                	push   0x2
c000e7b1:	50                   	push   eax
c000e7b2:	52                   	push   edx
c000e7b3:	53                   	push   ebx
c000e7b4:	e8 5f b8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7b9:	83 c4 20             	add    esp,0x20
c000e7bc:	09 f0                	or     eax,esi
c000e7be:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7c2:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7c7:	85 c0                	test   eax,eax
c000e7c9:	75 11                	jne    c000e7dc <findRSDT(unsigned char*)+0x128>
c000e7cb:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e7d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7da:	eb 24                	jmp    c000e800 <findRSDT(unsigned char*)+0x14c>
c000e7dc:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7e1:	83 f8 02             	cmp    eax,0x2
c000e7e4:	75 12                	jne    c000e7f8 <findRSDT(unsigned char*)+0x144>
c000e7e6:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7f5:	eb 09                	jmp    c000e800 <findRSDT(unsigned char*)+0x14c>
c000e7f7:	90                   	nop
c000e7f8:	b8 00 00 00 00       	mov    eax,0x0
c000e7fd:	eb 05                	jmp    c000e804 <findRSDT(unsigned char*)+0x150>
c000e7ff:	90                   	nop
c000e800:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e804:	83 c4 50             	add    esp,0x50
c000e807:	5b                   	pop    ebx
c000e808:	5e                   	pop    esi
c000e809:	5f                   	pop    edi
c000e80a:	c3                   	ret    
c000e80b:	90                   	nop

c000e80c <findDataTable(unsigned char*, char*)>:
c000e80c:	83 ec 1c             	sub    esp,0x1c
c000e80f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e814:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e81a:	83 e0 04             	and    eax,0x4
c000e81d:	0f b6 c0             	movzx  eax,al
c000e820:	85 c0                	test   eax,eax
c000e822:	75 08                	jne    c000e82c <findDataTable(unsigned char*, char*)+0x20>
c000e824:	b8 00 00 00 00       	mov    eax,0x0
c000e829:	eb 5d                	jmp    c000e888 <findDataTable(unsigned char*, char*)+0x7c>
c000e82b:	90                   	nop
c000e82c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e834:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e839:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e83d:	7d 41                	jge    c000e880 <findDataTable(unsigned char*, char*)+0x74>
c000e83f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e843:	c1 e0 03             	shl    eax,0x3
c000e846:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e84b:	83 ec 04             	sub    esp,0x4
c000e84e:	6a 04                	push   0x4
c000e850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e854:	50                   	push   eax
c000e855:	e8 26 1b ff ff       	call   c0000380 <memcmp>
c000e85a:	83 c4 10             	add    esp,0x10
c000e85d:	85 c0                	test   eax,eax
c000e85f:	0f 94 c0             	sete   al
c000e862:	0f b6 c0             	movzx  eax,al
c000e865:	85 c0                	test   eax,eax
c000e867:	74 0f                	je     c000e878 <findDataTable(unsigned char*, char*)+0x6c>
c000e869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86d:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e874:	eb 12                	jmp    c000e888 <findDataTable(unsigned char*, char*)+0x7c>
c000e876:	66 90                	xchg   ax,ax
c000e878:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e87d:	eb b5                	jmp    c000e834 <findDataTable(unsigned char*, char*)+0x28>
c000e87f:	90                   	nop
c000e880:	b8 00 00 00 00       	mov    eax,0x0
c000e885:	8d 76 00             	lea    esi,[esi+0x0]
c000e888:	83 c4 1c             	add    esp,0x1c
c000e88b:	c3                   	ret    

c000e88c <scanMADT()>:
c000e88c:	53                   	push   ebx
c000e88d:	83 ec 38             	sub    esp,0x38
c000e890:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e895:	25 00 04 00 00       	and    eax,0x400
c000e89a:	74 14                	je     c000e8b0 <scanMADT()+0x24>
c000e89c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8a1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8a7:	83 e2 fb             	and    edx,0xfffffffb
c000e8aa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8b0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8b5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8bb:	83 e0 04             	and    eax,0x4
c000e8be:	0f b6 c0             	movzx  eax,al
c000e8c1:	85 c0                	test   eax,eax
c000e8c3:	0f 84 6b 04 00 00    	je     c000ed34 <scanMADT()+0x4a8>
c000e8c9:	e8 e2 fa ff ff       	call   c000e3b0 <findRSDP()>
c000e8ce:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e8d3:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8d8:	85 c0                	test   eax,eax
c000e8da:	75 1c                	jne    c000e8f8 <scanMADT()+0x6c>
c000e8dc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8e1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8e7:	83 e2 fb             	and    edx,0xfffffffb
c000e8ea:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8f0:	e9 47 04 00 00       	jmp    c000ed3c <scanMADT()+0x4b0>
c000e8f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8f8:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8fd:	83 ec 0c             	sub    esp,0xc
c000e900:	50                   	push   eax
c000e901:	e8 ae fd ff ff       	call   c000e6b4 <findRSDT(unsigned char*)>
c000e906:	83 c4 10             	add    esp,0x10
c000e909:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e90e:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e913:	85 c0                	test   eax,eax
c000e915:	75 19                	jne    c000e930 <scanMADT()+0xa4>
c000e917:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e91c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e922:	83 e2 fb             	and    edx,0xfffffffb
c000e925:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e92b:	e9 0c 04 00 00       	jmp    c000ed3c <scanMADT()+0x4b0>
c000e930:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e935:	83 ec 0c             	sub    esp,0xc
c000e938:	50                   	push   eax
c000e939:	e8 0a fb ff ff       	call   c000e448 <loadACPITables(unsigned char*)>
c000e93e:	83 c4 10             	add    esp,0x10
c000e941:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e946:	83 ec 08             	sub    esp,0x8
c000e949:	68 6c 09 02 c0       	push   0xc002096c
c000e94e:	50                   	push   eax
c000e94f:	e8 b8 fe ff ff       	call   c000e80c <findDataTable(unsigned char*, char*)>
c000e954:	83 c4 10             	add    esp,0x10
c000e957:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e95b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e960:	75 1a                	jne    c000e97c <scanMADT()+0xf0>
c000e962:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e967:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e96d:	83 e2 fe             	and    edx,0xfffffffe
c000e970:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e976:	e9 c1 03 00 00       	jmp    c000ed3c <scanMADT()+0x4b0>
c000e97b:	90                   	nop
c000e97c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e984:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e988:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e98b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e98f:	0f 87 a7 03 00 00    	ja     c000ed3c <scanMADT()+0x4b0>
c000e995:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e99d:	0f 87 99 03 00 00    	ja     c000ed3c <scanMADT()+0x4b0>
c000e9a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e9ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9af:	8d 50 01             	lea    edx,[eax+0x1]
c000e9b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9ba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9be:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9c6:	8d 50 01             	lea    edx,[eax+0x1]
c000e9c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9d5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9d9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e9de:	83 f8 02             	cmp    eax,0x2
c000e9e1:	0f 86 51 03 00 00    	jbe    c000ed38 <scanMADT()+0x4ac>
c000e9e7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9ec:	85 c0                	test   eax,eax
c000e9ee:	75 58                	jne    c000ea48 <scanMADT()+0x1bc>
c000e9f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9f4:	8d 50 01             	lea    edx,[eax+0x1]
c000e9f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9fb:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ea01:	0f b6 d2             	movzx  edx,dl
c000ea04:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea08:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea0c:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000ea12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea16:	8d 50 01             	lea    edx,[eax+0x1]
c000ea19:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea1d:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ea23:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ea26:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ea2c:	0f b6 d2             	movzx  edx,dl
c000ea2f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea33:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea37:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ea3d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea42:	e9 d9 02 00 00       	jmp    c000ed20 <scanMADT()+0x494>
c000ea47:	90                   	nop
c000ea48:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea4d:	83 f8 01             	cmp    eax,0x1
c000ea50:	0f 85 1a 01 00 00    	jne    c000eb70 <scanMADT()+0x2e4>
c000ea56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea5a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea61:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea67:	0f b6 d2             	movzx  edx,dl
c000ea6a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea6e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea72:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea78:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea85:	01 d0                	add    eax,edx
c000ea87:	83 c0 2c             	add    eax,0x2c
c000ea8a:	8a 00                	mov    al,BYTE PTR [eax]
c000ea8c:	0f b6 d0             	movzx  edx,al
c000ea8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea93:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea9a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea9e:	0f b6 c0             	movzx  eax,al
c000eaa1:	c1 e0 08             	shl    eax,0x8
c000eaa4:	89 d1                	mov    ecx,edx
c000eaa6:	09 c1                	or     ecx,eax
c000eaa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaac:	8d 50 02             	lea    edx,[eax+0x2]
c000eaaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eab3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eab7:	0f b6 c0             	movzx  eax,al
c000eaba:	c1 e0 10             	shl    eax,0x10
c000eabd:	09 c1                	or     ecx,eax
c000eabf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eac3:	8d 50 03             	lea    edx,[eax+0x3]
c000eac6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eace:	0f b6 c0             	movzx  eax,al
c000ead1:	c1 e0 18             	shl    eax,0x18
c000ead4:	09 c1                	or     ecx,eax
c000ead6:	89 ca                	mov    edx,ecx
c000ead8:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eadd:	0f b6 c0             	movzx  eax,al
c000eae0:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000eae7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaf4:	01 d0                	add    eax,edx
c000eaf6:	83 c0 2c             	add    eax,0x2c
c000eaf9:	8a 00                	mov    al,BYTE PTR [eax]
c000eafb:	0f b6 d0             	movzx  edx,al
c000eafe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb02:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb09:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb0d:	0f b6 c0             	movzx  eax,al
c000eb10:	c1 e0 08             	shl    eax,0x8
c000eb13:	89 d1                	mov    ecx,edx
c000eb15:	09 c1                	or     ecx,eax
c000eb17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb1b:	8d 50 02             	lea    edx,[eax+0x2]
c000eb1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb22:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb26:	0f b6 c0             	movzx  eax,al
c000eb29:	c1 e0 10             	shl    eax,0x10
c000eb2c:	09 c1                	or     ecx,eax
c000eb2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb32:	8d 50 03             	lea    edx,[eax+0x3]
c000eb35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb39:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb3d:	0f b6 c0             	movzx  eax,al
c000eb40:	c1 e0 18             	shl    eax,0x18
c000eb43:	09 c1                	or     ecx,eax
c000eb45:	89 ca                	mov    edx,ecx
c000eb47:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb4c:	0f b6 c0             	movzx  eax,al
c000eb4f:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb56:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb5b:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb60:	83 c0 01             	add    eax,0x1
c000eb63:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb68:	e9 b3 01 00 00       	jmp    c000ed20 <scanMADT()+0x494>
c000eb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb70:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb75:	83 f8 02             	cmp    eax,0x2
c000eb78:	0f 85 ea 00 00 00    	jne    c000ec68 <scanMADT()+0x3dc>
c000eb7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb82:	8d 50 01             	lea    edx,[eax+0x1]
c000eb85:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb8d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb91:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb99:	8d 50 01             	lea    edx,[eax+0x1]
c000eb9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eba0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eba4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eba8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ebac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebb4:	01 d0                	add    eax,edx
c000ebb6:	83 c0 2c             	add    eax,0x2c
c000ebb9:	8a 00                	mov    al,BYTE PTR [eax]
c000ebbb:	0f b6 d0             	movzx  edx,al
c000ebbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc2:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebc9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebcd:	0f b6 c0             	movzx  eax,al
c000ebd0:	c1 e0 08             	shl    eax,0x8
c000ebd3:	89 d1                	mov    ecx,edx
c000ebd5:	09 c1                	or     ecx,eax
c000ebd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebdb:	8d 50 02             	lea    edx,[eax+0x2]
c000ebde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebe2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebe6:	0f b6 c0             	movzx  eax,al
c000ebe9:	c1 e0 10             	shl    eax,0x10
c000ebec:	09 c1                	or     ecx,eax
c000ebee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebf2:	8d 50 03             	lea    edx,[eax+0x3]
c000ebf5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebf9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebfd:	0f b6 c0             	movzx  eax,al
c000ec00:	c1 e0 18             	shl    eax,0x18
c000ec03:	09 c8                	or     eax,ecx
c000ec05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec09:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec16:	01 d0                	add    eax,edx
c000ec18:	83 c0 2c             	add    eax,0x2c
c000ec1b:	8a 00                	mov    al,BYTE PTR [eax]
c000ec1d:	0f b6 c0             	movzx  eax,al
c000ec20:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ec24:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec2b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ec2f:	0f b6 d2             	movzx  edx,dl
c000ec32:	c1 e2 08             	shl    edx,0x8
c000ec35:	09 d0                	or     eax,edx
c000ec37:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec3c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec41:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec4a:	88 90 e0 1f 02 c0    	mov    BYTE PTR [eax-0x3ffde020],dl
c000ec50:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000ec55:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec5a:	66 89 84 12 60 77 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd88a0],ax
c000ec62:	e9 b9 00 00 00       	jmp    c000ed20 <scanMADT()+0x494>
c000ec67:	90                   	nop
c000ec68:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec6d:	83 f8 04             	cmp    eax,0x4
c000ec70:	0f 85 9a 00 00 00    	jne    c000ed10 <scanMADT()+0x484>
c000ec76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec7a:	8d 50 01             	lea    edx,[eax+0x1]
c000ec7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec85:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec89:	0f b6 c0             	movzx  eax,al
c000ec8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec98:	01 d0                	add    eax,edx
c000ec9a:	83 c0 2c             	add    eax,0x2c
c000ec9d:	8a 00                	mov    al,BYTE PTR [eax]
c000ec9f:	0f b6 d0             	movzx  edx,al
c000eca2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eca6:	8d 48 01             	lea    ecx,[eax+0x1]
c000eca9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecb1:	0f b6 c0             	movzx  eax,al
c000ecb4:	c1 e0 08             	shl    eax,0x8
c000ecb7:	09 d0                	or     eax,edx
c000ecb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ecbd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ecc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecc6:	8d 50 01             	lea    edx,[eax+0x1]
c000ecc9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eccd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecd1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ecd5:	0f b6 c0             	movzx  eax,al
c000ecd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ece0:	c1 e0 08             	shl    eax,0x8
c000ece3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ece7:	89 c1                	mov    ecx,eax
c000ece9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eced:	c1 e0 18             	shl    eax,0x18
c000ecf0:	89 c3                	mov    ebx,eax
c000ecf2:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ecf7:	8d 50 01             	lea    edx,[eax+0x1]
c000ecfa:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ed00:	09 d9                	or     ecx,ebx
c000ed02:	89 ca                	mov    edx,ecx
c000ed04:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ed0b:	eb 13                	jmp    c000ed20 <scanMADT()+0x494>
c000ed0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed10:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ed15:	83 f8 05             	cmp    eax,0x5
c000ed18:	75 06                	jne    c000ed20 <scanMADT()+0x494>
c000ed1a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed1f:	90                   	nop
c000ed20:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ed25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed29:	01 d0                	add    eax,edx
c000ed2b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed2f:	e9 50 fc ff ff       	jmp    c000e984 <scanMADT()+0xf8>
c000ed34:	90                   	nop
c000ed35:	eb 05                	jmp    c000ed3c <scanMADT()+0x4b0>
c000ed37:	90                   	nop
c000ed38:	90                   	nop
c000ed39:	8d 76 00             	lea    esi,[esi+0x0]
c000ed3c:	83 c4 38             	add    esp,0x38
c000ed3f:	5b                   	pop    ebx
c000ed40:	c3                   	ret    
c000ed41:	90                   	nop
c000ed42:	66 90                	xchg   ax,ax

c000ed44 <ACPI::ACPI()>:
c000ed44:	83 ec 0c             	sub    esp,0xc
c000ed47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed4b:	83 ec 08             	sub    esp,0x8
c000ed4e:	68 71 09 02 c0       	push   0xc0020971
c000ed53:	50                   	push   eax
c000ed54:	e8 65 d2 ff ff       	call   c000bfbe <Device::Device(char const*)>
c000ed59:	83 c4 10             	add    esp,0x10
c000ed5c:	ba e0 0a 02 c0       	mov    edx,0xc0020ae0
c000ed61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed65:	89 10                	mov    DWORD PTR [eax],edx
c000ed67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed6b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed76:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed84:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed8e:	e8 f9 fa ff ff       	call   c000e88c <scanMADT()>
c000ed93:	90                   	nop
c000ed94:	83 c4 0c             	add    esp,0xc
c000ed97:	c3                   	ret    

c000ed98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed98:	83 ec 2c             	sub    esp,0x2c
c000ed9b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eda3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000eda7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000edab:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000edb0:	88 d0                	mov    al,dl
c000edb2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000edb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000edbb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000edc3:	90                   	nop
c000edc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edc8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edce:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000edd2:	0f 8d b0 00 00 00    	jge    c000ee88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000edd8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eddc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ede0:	83 c2 2a             	add    edx,0x2a
c000ede3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ede7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000edec:	0f b7 c0             	movzx  eax,ax
c000edef:	39 c2                	cmp    edx,eax
c000edf1:	0f 85 85 00 00 00    	jne    c000ee7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edff:	83 c2 2a             	add    edx,0x2a
c000ee02:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ee06:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000ee0b:	0f b6 c0             	movzx  eax,al
c000ee0e:	39 c2                	cmp    edx,eax
c000ee10:	75 6a                	jne    c000ee7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ee12:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ee17:	85 c0                	test   eax,eax
c000ee19:	74 3d                	je     c000ee58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000ee1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee23:	83 c2 2a             	add    edx,0x2a
c000ee26:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee31:	39 c2                	cmp    edx,eax
c000ee33:	74 13                	je     c000ee48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ee35:	83 ec 0c             	sub    esp,0xc
c000ee38:	68 ec 08 02 c0       	push   0xc00208ec
c000ee3d:	e8 dd 1a 00 00       	call   c001091f <KePanic(char const*)>
c000ee42:	83 c4 10             	add    esp,0x10
c000ee45:	8d 76 00             	lea    esi,[esi+0x0]
c000ee48:	83 ec 0c             	sub    esp,0xc
c000ee4b:	68 76 09 02 c0       	push   0xc0020976
c000ee50:	e8 ca 1a 00 00       	call   c001091f <KePanic(char const*)>
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee64:	83 c2 2a             	add    edx,0x2a
c000ee67:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee6b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee6d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee70:	89 01                	mov    DWORD PTR [ecx],eax
c000ee72:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee75:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee7a:	66 90                	xchg   ax,ax
c000ee7c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee81:	e9 3e ff ff ff       	jmp    c000edc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee86:	66 90                	xchg   ax,ax
c000ee88:	90                   	nop
c000ee89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee8d:	83 c4 2c             	add    esp,0x2c
c000ee90:	c2 04 00             	ret    0x4
c000ee93:	90                   	nop

c000ee94 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee94:	83 ec 1c             	sub    esp,0x1c
c000ee97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee9b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee9f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eea3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eea8:	88 c8                	mov    al,cl
c000eeaa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eeae:	88 d0                	mov    al,dl
c000eeb0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eeb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eec5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000eec9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000eecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eed7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eedb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000eede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eee2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000eee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeeb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eef1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eef5:	83 c0 01             	add    eax,0x1
c000eef8:	88 c1                	mov    cl,al
c000eefa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eefe:	83 c2 2a             	add    edx,0x2a
c000ef01:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ef05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef09:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef13:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef16:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef1a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef22:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef28:	8d 50 01             	lea    edx,[eax+0x1]
c000ef2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef2f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef39:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef3f:	3d 00 02 00 00       	cmp    eax,0x200
c000ef44:	75 12                	jne    c000ef58 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ef46:	83 ec 0c             	sub    esp,0xc
c000ef49:	68 85 09 02 c0       	push   0xc0020985
c000ef4e:	e8 cc 19 00 00       	call   c001091f <KePanic(char const*)>
c000ef53:	83 c4 10             	add    esp,0x10
c000ef56:	66 90                	xchg   ax,ax
c000ef58:	90                   	nop
c000ef59:	83 c4 1c             	add    esp,0x1c
c000ef5c:	c3                   	ret    
c000ef5d:	90                   	nop
c000ef5e:	66 90                	xchg   ax,ax

c000ef60 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef60:	b8 00 00 00 00       	mov    eax,0x0
c000ef65:	c3                   	ret    
c000ef66:	66 90                	xchg   ax,ax

c000ef68 <ACPI::detectPCI()>:
c000ef68:	53                   	push   ebx
c000ef69:	83 ec 28             	sub    esp,0x28
c000ef6c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef71:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef76:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef7b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef81:	83 e0 04             	and    eax,0x4
c000ef84:	0f b6 c0             	movzx  eax,al
c000ef87:	85 c0                	test   eax,eax
c000ef89:	74 2d                	je     c000efb8 <ACPI::detectPCI()+0x50>
c000ef8b:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef90:	83 ec 08             	sub    esp,0x8
c000ef93:	68 a2 09 02 c0       	push   0xc00209a2
c000ef98:	50                   	push   eax
c000ef99:	e8 6e f8 ff ff       	call   c000e80c <findDataTable(unsigned char*, char*)>
c000ef9e:	83 c4 10             	add    esp,0x10
c000efa1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efa5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efaa:	74 0c                	je     c000efb8 <ACPI::detectPCI()+0x50>
c000efac:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efb1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efb6:	66 90                	xchg   ax,ax
c000efb8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000efc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efc4:	8a 00                	mov    al,BYTE PTR [eax]
c000efc6:	0f b6 c0             	movzx  eax,al
c000efc9:	83 f8 01             	cmp    eax,0x1
c000efcc:	75 0e                	jne    c000efdc <ACPI::detectPCI()+0x74>
c000efce:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efd3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efd8:	eb 2e                	jmp    c000f008 <ACPI::detectPCI()+0xa0>
c000efda:	66 90                	xchg   ax,ax
c000efdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efe0:	8a 00                	mov    al,BYTE PTR [eax]
c000efe2:	0f b6 c0             	movzx  eax,al
c000efe5:	83 f8 02             	cmp    eax,0x2
c000efe8:	75 1e                	jne    c000f008 <ACPI::detectPCI()+0xa0>
c000efea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efef:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000eff4:	85 c0                	test   eax,eax
c000eff6:	74 10                	je     c000f008 <ACPI::detectPCI()+0xa0>
c000eff8:	83 ec 0c             	sub    esp,0xc
c000effb:	68 1c 09 02 c0       	push   0xc002091c
c000f000:	e8 1a 19 00 00       	call   c001091f <KePanic(char const*)>
c000f005:	83 c4 10             	add    esp,0x10
c000f008:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f00c:	83 f0 01             	xor    eax,0x1
c000f00f:	0f b6 c0             	movzx  eax,al
c000f012:	85 c0                	test   eax,eax
c000f014:	74 46                	je     c000f05c <ACPI::detectPCI()+0xf4>
c000f016:	e8 15 11 ff ff       	call   c0000130 <manualPCIProbe>
c000f01b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f01f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f024:	75 0e                	jne    c000f034 <ACPI::detectPCI()+0xcc>
c000f026:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f02b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f030:	eb 2a                	jmp    c000f05c <ACPI::detectPCI()+0xf4>
c000f032:	66 90                	xchg   ax,ax
c000f034:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f039:	75 21                	jne    c000f05c <ACPI::detectPCI()+0xf4>
c000f03b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f040:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f045:	85 c0                	test   eax,eax
c000f047:	74 13                	je     c000f05c <ACPI::detectPCI()+0xf4>
c000f049:	83 ec 0c             	sub    esp,0xc
c000f04c:	68 1c 09 02 c0       	push   0xc002091c
c000f051:	e8 c9 18 00 00       	call   c001091f <KePanic(char const*)>
c000f056:	83 c4 10             	add    esp,0x10
c000f059:	8d 76 00             	lea    esi,[esi+0x0]
c000f05c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f061:	85 c0                	test   eax,eax
c000f063:	0f 84 87 00 00 00    	je     c000f0f0 <ACPI::detectPCI()+0x188>
c000f069:	83 ec 0c             	sub    esp,0xc
c000f06c:	68 a7 09 02 c0       	push   0xc00209a7
c000f071:	e8 2c 12 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c000f076:	83 c4 10             	add    esp,0x10
c000f079:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f081:	83 ec 0c             	sub    esp,0xc
c000f084:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f088:	e8 21 8a ff ff       	call   c0007aae <malloc>
c000f08d:	83 c4 10             	add    esp,0x10
c000f090:	89 c3                	mov    ebx,eax
c000f092:	83 ec 0c             	sub    esp,0xc
c000f095:	53                   	push   ebx
c000f096:	e8 31 b0 00 00       	call   c001a0cc <PCI::PCI()>
c000f09b:	83 c4 10             	add    esp,0x10
c000f09e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0a6:	83 ec 08             	sub    esp,0x8
c000f0a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0ad:	50                   	push   eax
c000f0ae:	e8 73 cd ff ff       	call   c000be26 <Device::addChild(Device*)>
c000f0b3:	83 c4 10             	add    esp,0x10
c000f0b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0bc:	83 c0 08             	add    eax,0x8
c000f0bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0c1:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f0c6:	85 d2                	test   edx,edx
c000f0c8:	74 0a                	je     c000f0d4 <ACPI::detectPCI()+0x16c>
c000f0ca:	ba 01 00 00 00       	mov    edx,0x1
c000f0cf:	eb 0b                	jmp    c000f0dc <ACPI::detectPCI()+0x174>
c000f0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d4:	ba 02 00 00 00       	mov    edx,0x2
c000f0d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0dc:	6a 00                	push   0x0
c000f0de:	6a 00                	push   0x0
c000f0e0:	52                   	push   edx
c000f0e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0e5:	ff d0                	call   eax
c000f0e7:	83 c4 10             	add    esp,0x10
c000f0ea:	e9 91 00 00 00       	jmp    c000f180 <ACPI::detectPCI()+0x218>
c000f0ef:	90                   	nop
c000f0f0:	83 ec 0c             	sub    esp,0xc
c000f0f3:	68 bf 09 02 c0       	push   0xc00209bf
c000f0f8:	e8 a5 11 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c000f0fd:	83 c4 10             	add    esp,0x10
c000f100:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f107:	83 ec 0c             	sub    esp,0xc
c000f10a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f10e:	e8 9b 89 ff ff       	call   c0007aae <malloc>
c000f113:	83 c4 10             	add    esp,0x10
c000f116:	89 c3                	mov    ebx,eax
c000f118:	83 ec 0c             	sub    esp,0xc
c000f11b:	53                   	push   ebx
c000f11c:	e8 45 bb 00 00       	call   c001ac66 <IDE::IDE()>
c000f121:	83 c4 10             	add    esp,0x10
c000f124:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f12c:	83 ec 08             	sub    esp,0x8
c000f12f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f133:	50                   	push   eax
c000f134:	e8 ed cc ff ff       	call   c000be26 <Device::addChild(Device*)>
c000f139:	83 c4 10             	add    esp,0x10
c000f13c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f140:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f14a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f14e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f157:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f15b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f164:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f168:	8b 00                	mov    eax,DWORD PTR [eax]
c000f16a:	83 c0 08             	add    eax,0x8
c000f16d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f16f:	6a 00                	push   0x0
c000f171:	6a 00                	push   0x0
c000f173:	6a 00                	push   0x0
c000f175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f179:	ff d0                	call   eax
c000f17b:	83 c4 10             	add    esp,0x10
c000f17e:	66 90                	xchg   ax,ax
c000f180:	90                   	nop
c000f181:	83 c4 28             	add    esp,0x28
c000f184:	5b                   	pop    ebx
c000f185:	c3                   	ret    
c000f186:	66 90                	xchg   ax,ax

c000f188 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f188:	83 ec 1c             	sub    esp,0x1c
c000f18b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f18f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f192:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f196:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f19b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f1a0:	83 ec 08             	sub    esp,0x8
c000f1a3:	52                   	push   edx
c000f1a4:	50                   	push   eax
c000f1a5:	e8 c6 7f ff ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c000f1aa:	83 c4 10             	add    esp,0x10
c000f1ad:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f1b1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f1b6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f1bb:	83 ec 04             	sub    esp,0x4
c000f1be:	6a 01                	push   0x1
c000f1c0:	52                   	push   edx
c000f1c1:	50                   	push   eax
c000f1c2:	e8 c3 80 ff ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1c7:	83 c4 10             	add    esp,0x10
c000f1ca:	90                   	nop
c000f1cb:	83 c4 1c             	add    esp,0x1c
c000f1ce:	c3                   	ret    
c000f1cf:	90                   	nop

c000f1d0 <ACPI::sleep()>:
c000f1d0:	83 ec 0c             	sub    esp,0xc
c000f1d3:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1d8:	85 c0                	test   eax,eax
c000f1da:	74 08                	je     c000f1e4 <ACPI::sleep()+0x14>
c000f1dc:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1e1:	ff d0                	call   eax
c000f1e3:	90                   	nop
c000f1e4:	90                   	nop
c000f1e5:	83 c4 0c             	add    esp,0xc
c000f1e8:	c3                   	ret    
c000f1e9:	90                   	nop
c000f1ea:	66 90                	xchg   ax,ax

c000f1ec <ACPI::open(int, int, void*)>:
c000f1ec:	57                   	push   edi
c000f1ed:	56                   	push   esi
c000f1ee:	53                   	push   ebx
c000f1ef:	81 ec 70 01 00 00    	sub    esp,0x170
c000f1f5:	83 ec 0c             	sub    esp,0xc
c000f1f8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f1ff:	e8 64 fd ff ff       	call   c000ef68 <ACPI::detectPCI()>
c000f204:	83 c4 10             	add    esp,0x10
c000f207:	83 ec 0c             	sub    esp,0xc
c000f20a:	68 44 09 02 c0       	push   0xc0020944
c000f20f:	e8 8e 10 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c000f214:	83 c4 10             	add    esp,0x10
c000f217:	b8 4c 05 00 00       	mov    eax,0x54c
c000f21c:	8a 00                	mov    al,BYTE PTR [eax]
c000f21e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000f225:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f22d:	83 f8 01             	cmp    eax,0x1
c000f230:	75 12                	jne    c000f244 <ACPI::open(int, int, void*)+0x58>
c000f232:	83 ec 0c             	sub    esp,0xc
c000f235:	68 d4 09 02 c0       	push   0xc00209d4
c000f23a:	e8 bd 49 00 00       	call   c0013bfc <Thr::loadKernelSymbolTable(char const*)>
c000f23f:	83 c4 10             	add    esp,0x10
c000f242:	eb 34                	jmp    c000f278 <ACPI::open(int, int, void*)+0x8c>
c000f244:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f24c:	3d bb 00 00 00       	cmp    eax,0xbb
c000f251:	75 15                	jne    c000f268 <ACPI::open(int, int, void*)+0x7c>
c000f253:	83 ec 0c             	sub    esp,0xc
c000f256:	68 f2 09 02 c0       	push   0xc00209f2
c000f25b:	e8 9c 49 00 00       	call   c0013bfc <Thr::loadKernelSymbolTable(char const*)>
c000f260:	83 c4 10             	add    esp,0x10
c000f263:	eb 13                	jmp    c000f278 <ACPI::open(int, int, void*)+0x8c>
c000f265:	8d 76 00             	lea    esi,[esi+0x0]
c000f268:	83 ec 0c             	sub    esp,0xc
c000f26b:	68 10 0a 02 c0       	push   0xc0020a10
c000f270:	e8 aa 16 00 00       	call   c001091f <KePanic(char const*)>
c000f275:	83 c4 10             	add    esp,0x10
c000f278:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f280:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f28b:	83 ec 0c             	sub    esp,0xc
c000f28e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f295:	e8 14 88 ff ff       	call   c0007aae <malloc>
c000f29a:	83 c4 10             	add    esp,0x10
c000f29d:	89 c3                	mov    ebx,eax
c000f29f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f2a4:	83 ec 04             	sub    esp,0x4
c000f2a7:	50                   	push   eax
c000f2a8:	68 2a 0a 02 c0       	push   0xc0020a2a
c000f2ad:	53                   	push   ebx
c000f2ae:	e8 c1 bc ff ff       	call   c000af74 <File::File(char const*, Process*)>
c000f2b3:	83 c4 10             	add    esp,0x10
c000f2b6:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f2bd:	83 ec 08             	sub    esp,0x8
c000f2c0:	6a 01                	push   0x1
c000f2c2:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2c9:	e8 62 bd ff ff       	call   c000b030 <File::open(FileOpenMode)>
c000f2ce:	83 c4 10             	add    esp,0x10
c000f2d1:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f2d8:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f2e0:	75 16                	jne    c000f2f8 <ACPI::open(int, int, void*)+0x10c>
c000f2e2:	83 ec 0c             	sub    esp,0xc
c000f2e5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2ec:	e8 9d bd ff ff       	call   c000b08e <File::close()>
c000f2f1:	83 c4 10             	add    esp,0x10
c000f2f4:	eb 0a                	jmp    c000f300 <ACPI::open(int, int, void*)+0x114>
c000f2f6:	66 90                	xchg   ax,ax
c000f2f8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f300:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f308:	74 1e                	je     c000f328 <ACPI::open(int, int, void*)+0x13c>
c000f30a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f311:	8b 00                	mov    eax,DWORD PTR [eax]
c000f313:	83 c0 08             	add    eax,0x8
c000f316:	8b 00                	mov    eax,DWORD PTR [eax]
c000f318:	83 ec 0c             	sub    esp,0xc
c000f31b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f322:	ff d0                	call   eax
c000f324:	83 c4 10             	add    esp,0x10
c000f327:	90                   	nop
c000f328:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f32f:	83 f0 01             	xor    eax,0x1
c000f332:	0f b6 c0             	movzx  eax,al
c000f335:	85 c0                	test   eax,eax
c000f337:	74 43                	je     c000f37c <ACPI::open(int, int, void*)+0x190>
c000f339:	83 ec 0c             	sub    esp,0xc
c000f33c:	68 48 0a 02 c0       	push   0xc0020a48
c000f341:	e8 5c 0f 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c000f346:	83 c4 10             	add    esp,0x10
c000f349:	83 ec 04             	sub    esp,0x4
c000f34c:	6a 0c                	push   0xc
c000f34e:	68 63 0a 02 c0       	push   0xc0020a63
c000f353:	68 74 0a 02 c0       	push   0xc0020a74
c000f358:	e8 4b 3c 00 00       	call   c0012fa8 <Reg::readIntWithDefault(char*, char*, int)>
c000f35d:	83 c4 10             	add    esp,0x10
c000f360:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f367:	83 ec 0c             	sub    esp,0xc
c000f36a:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f371:	e8 d6 a4 ff ff       	call   c000984c <Virt::setupPageSwapping(int)>
c000f376:	83 c4 10             	add    esp,0x10
c000f379:	8d 76 00             	lea    esi,[esi+0x0]
c000f37c:	83 ec 0c             	sub    esp,0xc
c000f37f:	68 55 fa 01 c0       	push   0xc001fa55
c000f384:	e8 19 0f 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c000f389:	83 c4 10             	add    esp,0x10
c000f38c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f393:	83 ec 08             	sub    esp,0x8
c000f396:	6a 13                	push   0x13
c000f398:	50                   	push   eax
c000f399:	e8 a0 cd ff ff       	call   c000c13e <getDevicesOfType(DeviceType)>
c000f39e:	83 c4 0c             	add    esp,0xc
c000f3a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f3a4:	83 ec 0c             	sub    esp,0xc
c000f3a7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3ae:	50                   	push   eax
c000f3af:	e8 9c fa 00 00       	call   c001ee50 <LinkedList<Device>::isEmpty()>
c000f3b4:	83 c4 10             	add    esp,0x10
c000f3b7:	83 f0 01             	xor    eax,0x1
c000f3ba:	0f b6 c0             	movzx  eax,al
c000f3bd:	85 c0                	test   eax,eax
c000f3bf:	0f 84 47 01 00 00    	je     c000f50c <ACPI::open(int, int, void*)+0x320>
c000f3c5:	83 ec 0c             	sub    esp,0xc
c000f3c8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3cf:	50                   	push   eax
c000f3d0:	e8 97 fa 00 00       	call   c001ee6c <LinkedList<Device>::getFirstElement()>
c000f3d5:	83 c4 10             	add    esp,0x10
c000f3d8:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f3df:	83 ec 0c             	sub    esp,0xc
c000f3e2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3e9:	50                   	push   eax
c000f3ea:	e8 85 fa 00 00       	call   c001ee74 <LinkedList<Device>::removeFirst()>
c000f3ef:	83 c4 10             	add    esp,0x10
c000f3f2:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f3f9:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f400:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f407:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f40b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f411:	ba 09 00 00 00       	mov    edx,0x9
c000f416:	fc                   	cld    
c000f417:	89 c7                	mov    edi,eax
c000f419:	89 de                	mov    esi,ebx
c000f41b:	89 d1                	mov    ecx,edx
c000f41d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f41f:	83 ec 08             	sub    esp,0x8
c000f422:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f426:	50                   	push   eax
c000f427:	83 ec 24             	sub    esp,0x24
c000f42a:	89 e0                	mov    eax,esp
c000f42c:	89 c3                	mov    ebx,eax
c000f42e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f432:	ba 09 00 00 00       	mov    edx,0x9
c000f437:	89 df                	mov    edi,ebx
c000f439:	89 c6                	mov    esi,eax
c000f43b:	89 d1                	mov    ecx,edx
c000f43d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f43f:	e8 72 b1 00 00       	call   c001a5b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f444:	83 c4 30             	add    esp,0x30
c000f447:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f44e:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f456:	0f 84 48 ff ff ff    	je     c000f3a4 <ACPI::open(int, int, void*)+0x1b8>
c000f45c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f467:	83 ec 0c             	sub    esp,0xc
c000f46a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f471:	e8 38 86 ff ff       	call   c0007aae <malloc>
c000f476:	83 c4 10             	add    esp,0x10
c000f479:	89 c3                	mov    ebx,eax
c000f47b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f480:	83 ec 04             	sub    esp,0x4
c000f483:	50                   	push   eax
c000f484:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f48b:	53                   	push   ebx
c000f48c:	e8 e3 ba ff ff       	call   c000af74 <File::File(char const*, Process*)>
c000f491:	83 c4 10             	add    esp,0x10
c000f494:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f49b:	83 ec 0c             	sub    esp,0xc
c000f49e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f4a5:	e8 f4 bd ff ff       	call   c000b29e <File::exists()>
c000f4aa:	83 c4 10             	add    esp,0x10
c000f4ad:	0f b6 c0             	movzx  eax,al
c000f4b0:	85 c0                	test   eax,eax
c000f4b2:	74 28                	je     c000f4dc <ACPI::open(int, int, void*)+0x2f0>
c000f4b4:	83 ec 08             	sub    esp,0x8
c000f4b7:	6a 01                	push   0x1
c000f4b9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f4c0:	e8 b1 51 00 00       	call   c0014676 <Thr::loadDLL(char const*, bool)>
c000f4c5:	83 c4 10             	add    esp,0x10
c000f4c8:	83 ec 08             	sub    esp,0x8
c000f4cb:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f4d2:	50                   	push   eax
c000f4d3:	e8 cf 53 00 00       	call   c00148a7 <Thr::executeDLL(unsigned long, void*)>
c000f4d8:	83 c4 10             	add    esp,0x10
c000f4db:	90                   	nop
c000f4dc:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f4e4:	0f 84 ba fe ff ff    	je     c000f3a4 <ACPI::open(int, int, void*)+0x1b8>
c000f4ea:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f4f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f3:	83 c0 08             	add    eax,0x8
c000f4f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f8:	83 ec 0c             	sub    esp,0xc
c000f4fb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f502:	ff d0                	call   eax
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	e9 98 fe ff ff       	jmp    c000f3a4 <ACPI::open(int, int, void*)+0x1b8>
c000f50c:	83 ec 0c             	sub    esp,0xc
c000f50f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f516:	50                   	push   eax
c000f517:	e8 30 f9 00 00       	call   c001ee4c <LinkedList<Device>::~LinkedList()>
c000f51c:	83 c4 10             	add    esp,0x10
c000f51f:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f525:	83 ec 08             	sub    esp,0x8
c000f528:	6a 01                	push   0x1
c000f52a:	68 7b 0a 02 c0       	push   0xc0020a7b
c000f52f:	e8 42 51 00 00       	call   c0014676 <Thr::loadDLL(char const*, bool)>
c000f534:	83 c4 10             	add    esp,0x10
c000f537:	83 ec 08             	sub    esp,0x8
c000f53a:	53                   	push   ebx
c000f53b:	50                   	push   eax
c000f53c:	e8 66 53 00 00       	call   c00148a7 <Thr::executeDLL(unsigned long, void*)>
c000f541:	83 c4 10             	add    esp,0x10
c000f544:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f549:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f54f:	83 e0 04             	and    eax,0x4
c000f552:	0f b6 c0             	movzx  eax,al
c000f555:	85 c0                	test   eax,eax
c000f557:	0f 84 1b 01 00 00    	je     c000f678 <ACPI::open(int, int, void*)+0x48c>
c000f55d:	83 ec 0c             	sub    esp,0xc
c000f560:	68 98 0a 02 c0       	push   0xc0020a98
c000f565:	e8 38 0d 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c000f56a:	83 c4 10             	add    esp,0x10
c000f56d:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f578:	83 ec 0c             	sub    esp,0xc
c000f57b:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f582:	e8 27 85 ff ff       	call   c0007aae <malloc>
c000f587:	83 c4 10             	add    esp,0x10
c000f58a:	89 c3                	mov    ebx,eax
c000f58c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f591:	83 ec 04             	sub    esp,0x4
c000f594:	50                   	push   eax
c000f595:	68 b5 0a 02 c0       	push   0xc0020ab5
c000f59a:	53                   	push   ebx
c000f59b:	e8 d4 b9 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c000f5a0:	83 c4 10             	add    esp,0x10
c000f5a3:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f5aa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5b2:	74 20                	je     c000f5d4 <ACPI::open(int, int, void*)+0x3e8>
c000f5b4:	83 ec 0c             	sub    esp,0xc
c000f5b7:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f5be:	e8 db bc ff ff       	call   c000b29e <File::exists()>
c000f5c3:	83 c4 10             	add    esp,0x10
c000f5c6:	0f b6 c0             	movzx  eax,al
c000f5c9:	85 c0                	test   eax,eax
c000f5cb:	74 07                	je     c000f5d4 <ACPI::open(int, int, void*)+0x3e8>
c000f5cd:	b0 01                	mov    al,0x1
c000f5cf:	eb 07                	jmp    c000f5d8 <ACPI::open(int, int, void*)+0x3ec>
c000f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d4:	b0 00                	mov    al,0x0
c000f5d6:	66 90                	xchg   ax,ax
c000f5d8:	0f b6 c0             	movzx  eax,al
c000f5db:	85 c0                	test   eax,eax
c000f5dd:	74 25                	je     c000f604 <ACPI::open(int, int, void*)+0x418>
c000f5df:	83 ec 08             	sub    esp,0x8
c000f5e2:	6a 01                	push   0x1
c000f5e4:	68 b5 0a 02 c0       	push   0xc0020ab5
c000f5e9:	e8 88 50 00 00       	call   c0014676 <Thr::loadDLL(char const*, bool)>
c000f5ee:	83 c4 10             	add    esp,0x10
c000f5f1:	83 ec 08             	sub    esp,0x8
c000f5f4:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f5fb:	50                   	push   eax
c000f5fc:	e8 a6 52 00 00       	call   c00148a7 <Thr::executeDLL(unsigned long, void*)>
c000f601:	83 c4 10             	add    esp,0x10
c000f604:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f60c:	74 2a                	je     c000f638 <ACPI::open(int, int, void*)+0x44c>
c000f60e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f616:	74 20                	je     c000f638 <ACPI::open(int, int, void*)+0x44c>
c000f618:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f61f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f621:	83 c0 08             	add    eax,0x8
c000f624:	8b 00                	mov    eax,DWORD PTR [eax]
c000f626:	83 ec 0c             	sub    esp,0xc
c000f629:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f630:	ff d0                	call   eax
c000f632:	83 c4 10             	add    esp,0x10
c000f635:	8d 76 00             	lea    esi,[esi+0x0]
c000f638:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f63d:	83 ec 08             	sub    esp,0x8
c000f640:	68 d2 0a 02 c0       	push   0xc0020ad2
c000f645:	50                   	push   eax
c000f646:	e8 c1 f1 ff ff       	call   c000e80c <findDataTable(unsigned char*, char*)>
c000f64b:	83 c4 10             	add    esp,0x10
c000f64e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f655:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f65d:	74 19                	je     c000f678 <ACPI::open(int, int, void*)+0x48c>
c000f65f:	83 ec 08             	sub    esp,0x8
c000f662:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f669:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f670:	e8 13 fb ff ff       	call   c000f188 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f675:	83 c4 10             	add    esp,0x10
c000f678:	b8 00 00 00 00       	mov    eax,0x0
c000f67d:	81 c4 70 01 00 00    	add    esp,0x170
c000f683:	5b                   	pop    ebx
c000f684:	5e                   	pop    esi
c000f685:	5f                   	pop    edi
c000f686:	c3                   	ret    
c000f687:	90                   	nop

c000f688 <CPU::close(int, int, void*)>:
c000f688:	31 c0                	xor    eax,eax
c000f68a:	c3                   	ret    
c000f68b:	90                   	nop

c000f68c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f68c:	60                   	pusha  
c000f68d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f691:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f695:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f699:	9c                   	pushf  
c000f69a:	fa                   	cli    
c000f69b:	0f 09                	wbinvd 
c000f69d:	0f 30                	wrmsr  
c000f69f:	9d                   	popf   
c000f6a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f6a4:	89 02                	mov    DWORD PTR [edx],eax
c000f6a6:	61                   	popa   
c000f6a7:	c3                   	ret    

c000f6a8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f6a8:	60                   	pusha  
c000f6a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f6ad:	9c                   	pushf  
c000f6ae:	fa                   	cli    
c000f6af:	0f 09                	wbinvd 
c000f6b1:	31 c0                	xor    eax,eax
c000f6b3:	31 d2                	xor    edx,edx
c000f6b5:	0f 32                	rdmsr  
c000f6b7:	9d                   	popf   
c000f6b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f6bc:	89 02                	mov    DWORD PTR [edx],eax
c000f6be:	61                   	popa   
c000f6bf:	c3                   	ret    

c000f6c0 <CPU::AMD_K6_writeback(int, int, int)>:
c000f6c0:	56                   	push   esi
c000f6c1:	53                   	push   ebx
c000f6c2:	83 ec 10             	sub    esp,0x10
c000f6c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f6ce:	75 5d                	jne    c000f72d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6d0:	83 f8 08             	cmp    eax,0x8
c000f6d3:	75 09                	jne    c000f6de <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f6d5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f6da:	7e 13                	jle    c000f6ef <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f6dc:	eb 30                	jmp    c000f70e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f6de:	83 f8 06             	cmp    eax,0x6
c000f6e1:	7c 4a                	jl     c000f72d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6e3:	83 f8 07             	cmp    eax,0x7
c000f6e6:	7e 07                	jle    c000f6ef <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f6e8:	83 f8 09             	cmp    eax,0x9
c000f6eb:	74 21                	je     c000f70e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f6ed:	eb 3e                	jmp    c000f72d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6ef:	89 e6                	mov    esi,esp
c000f6f1:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f6f7:	56                   	push   esi
c000f6f8:	c1 eb 15             	shr    ebx,0x15
c000f6fb:	68 82 00 00 c0       	push   0xc0000082
c000f700:	83 e3 7e             	and    ebx,0x7e
c000f703:	e8 a0 ff ff ff       	call   c000f6a8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f708:	56                   	push   esi
c000f709:	6a 00                	push   0x0
c000f70b:	53                   	push   ebx
c000f70c:	eb 12                	jmp    c000f720 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f70e:	89 e3                	mov    ebx,esp
c000f710:	53                   	push   ebx
c000f711:	68 82 00 00 c0       	push   0xc0000082
c000f716:	e8 8d ff ff ff       	call   c000f6a8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f71b:	53                   	push   ebx
c000f71c:	6a 00                	push   0x0
c000f71e:	6a 00                	push   0x0
c000f720:	68 82 00 00 c0       	push   0xc0000082
c000f725:	e8 62 ff ff ff       	call   c000f68c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f72a:	83 c4 18             	add    esp,0x18
c000f72d:	83 c4 10             	add    esp,0x10
c000f730:	5b                   	pop    ebx
c000f731:	5e                   	pop    esi
c000f732:	c3                   	ret    
c000f733:	90                   	nop

c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f734:	55                   	push   ebp
c000f735:	57                   	push   edi
c000f736:	56                   	push   esi
c000f737:	53                   	push   ebx
c000f738:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f73c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f740:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f744:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f748:	39 05 f0 1f 02 c0    	cmp    DWORD PTR ds:0xc0021ff0,eax
c000f74e:	75 23                	jne    c000f773 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f750:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f755:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f759:	89 06                	mov    DWORD PTR [esi],eax
c000f75b:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f760:	89 07                	mov    DWORD PTR [edi],eax
c000f762:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f767:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f76a:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f76f:	89 02                	mov    DWORD PTR [edx],eax
c000f771:	eb 3f                	jmp    c000f7b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f773:	31 c9                	xor    ecx,ecx
c000f775:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f779:	0f a2                	cpuid  
c000f77b:	89 06                	mov    DWORD PTR [esi],eax
c000f77d:	89 1f                	mov    DWORD PTR [edi],ebx
c000f77f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f783:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f786:	89 10                	mov    DWORD PTR [eax],edx
c000f788:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f78c:	a3 f0 1f 02 c0       	mov    ds:0xc0021ff0,eax
c000f791:	8b 06                	mov    eax,DWORD PTR [esi]
c000f793:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f798:	8b 07                	mov    eax,DWORD PTR [edi]
c000f79a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f79f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f7a2:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f7a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f7ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7ad:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	90                   	nop

c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>:
c000f7b8:	83 ec 10             	sub    esp,0x10
c000f7bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7bf:	50                   	push   eax
c000f7c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c4:	50                   	push   eax
c000f7c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c9:	50                   	push   eax
c000f7ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ce:	50                   	push   eax
c000f7cf:	6a 01                	push   0x1
c000f7d1:	e8 5e ff ff ff       	call   c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7da:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f7de:	0f 95 c0             	setne  al
c000f7e1:	83 c4 24             	add    esp,0x24
c000f7e4:	c3                   	ret    
c000f7e5:	90                   	nop

c000f7e6 <CPU::cpuidCheckECX(unsigned int)>:
c000f7e6:	83 ec 10             	sub    esp,0x10
c000f7e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ed:	50                   	push   eax
c000f7ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f2:	50                   	push   eax
c000f7f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f7:	50                   	push   eax
c000f7f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7fc:	50                   	push   eax
c000f7fd:	6a 01                	push   0x1
c000f7ff:	e8 30 ff ff ff       	call   c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f804:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f808:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f80c:	0f 95 c0             	setne  al
c000f80f:	83 c4 24             	add    esp,0x24
c000f812:	c3                   	ret    
c000f813:	90                   	nop

c000f814 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f814:	83 ec 10             	sub    esp,0x10
c000f817:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f81b:	50                   	push   eax
c000f81c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f820:	50                   	push   eax
c000f821:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f825:	50                   	push   eax
c000f826:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f82a:	50                   	push   eax
c000f82b:	6a 07                	push   0x7
c000f82d:	e8 02 ff ff ff       	call   c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f832:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f836:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f83a:	0f 95 c0             	setne  al
c000f83d:	83 c4 24             	add    esp,0x24
c000f840:	c3                   	ret    
c000f841:	90                   	nop

c000f842 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f849:	50                   	push   eax
c000f84a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f84e:	50                   	push   eax
c000f84f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f853:	50                   	push   eax
c000f854:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f858:	50                   	push   eax
c000f859:	6a 07                	push   0x7
c000f85b:	e8 d4 fe ff ff       	call   c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f860:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f864:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f868:	0f 95 c0             	setne  al
c000f86b:	83 c4 24             	add    esp,0x24
c000f86e:	c3                   	ret    
c000f86f:	90                   	nop

c000f870 <CPU::CPU()>:
c000f870:	83 ec 0c             	sub    esp,0xc
c000f873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f877:	83 ec 08             	sub    esp,0x8
c000f87a:	68 f5 0b 02 c0       	push   0xc0020bf5
c000f87f:	50                   	push   eax
c000f880:	e8 39 c7 ff ff       	call   c000bfbe <Device::Device(char const*)>
c000f885:	83 c4 10             	add    esp,0x10
c000f888:	ba 7c 0c 02 c0       	mov    edx,0xc0020c7c
c000f88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f891:	89 10                	mov    DWORD PTR [eax],edx
c000f893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f897:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a5:	05 78 01 00 00       	add    eax,0x178
c000f8aa:	83 ec 0c             	sub    esp,0xc
c000f8ad:	50                   	push   eax
c000f8ae:	e8 a1 7a ff ff       	call   c0007354 <GDT::GDT()>
c000f8b3:	83 c4 10             	add    esp,0x10
c000f8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ba:	05 7c 09 00 00       	add    eax,0x97c
c000f8bf:	83 ec 0c             	sub    esp,0xc
c000f8c2:	50                   	push   eax
c000f8c3:	e8 dc 7c ff ff       	call   c00075a4 <IDT::IDT()>
c000f8c8:	83 c4 10             	add    esp,0x10
c000f8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8cf:	05 7c 11 00 00       	add    eax,0x117c
c000f8d4:	83 ec 0c             	sub    esp,0xc
c000f8d7:	50                   	push   eax
c000f8d8:	e8 77 96 ff ff       	call   c0008f54 <TSS::TSS()>
c000f8dd:	83 c4 10             	add    esp,0x10
c000f8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8e4:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ef:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f8f9:	90                   	nop
c000f8fa:	83 c4 0c             	add    esp,0xc
c000f8fd:	c3                   	ret    

c000f8fe <CPU::displayFeatures()>:
c000f8fe:	c3                   	ret    
c000f8ff:	90                   	nop

c000f900 <CPU::detectFeatures()>:
c000f900:	55                   	push   ebp
c000f901:	57                   	push   edi
c000f902:	56                   	push   esi
c000f903:	53                   	push   ebx
c000f904:	83 ec 30             	sub    esp,0x30
c000f907:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f90b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f915:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f91c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f922:	6a 0d                	push   0xd
c000f924:	6a 00                	push   0x0
c000f926:	55                   	push   ebp
c000f927:	e8 c4 0b ff ff       	call   c00004f0 <memset>
c000f92c:	83 c4 10             	add    esp,0x10
c000f92f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f934:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f93b:	0f 84 db 05 00 00    	je     c000ff1c <CPU::detectFeatures()+0x61c>
c000f941:	83 ec 0c             	sub    esp,0xc
c000f944:	89 ef                	mov    edi,ebp
c000f946:	6a 10                	push   0x10
c000f948:	e8 6b fe ff ff       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f94d:	83 e0 01             	and    eax,0x1
c000f950:	8d 14 00             	lea    edx,[eax+eax*1]
c000f953:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f959:	83 e0 fd             	and    eax,0xfffffffd
c000f95c:	09 d0                	or     eax,edx
c000f95e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f964:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f96b:	e8 48 fe ff ff       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f970:	83 e0 01             	and    eax,0x1
c000f973:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f97a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f980:	83 e0 fb             	and    eax,0xfffffffb
c000f983:	09 d0                	or     eax,edx
c000f985:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f98b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f992:	e8 21 fe ff ff       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f997:	83 e0 01             	and    eax,0x1
c000f99a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f9a1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9a7:	83 e0 f7             	and    eax,0xfffffff7
c000f9aa:	09 d0                	or     eax,edx
c000f9ac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9b2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f9b9:	e8 fa fd ff ff       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f9be:	83 e0 01             	and    eax,0x1
c000f9c1:	c1 e0 04             	shl    eax,0x4
c000f9c4:	89 c2                	mov    edx,eax
c000f9c6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9cc:	83 e0 ef             	and    eax,0xffffffef
c000f9cf:	09 d0                	or     eax,edx
c000f9d1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9d7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f9de:	e8 d5 fd ff ff       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f9e3:	83 e0 01             	and    eax,0x1
c000f9e6:	c1 e0 05             	shl    eax,0x5
c000f9e9:	89 c2                	mov    edx,eax
c000f9eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9f1:	83 e0 df             	and    eax,0xffffffdf
c000f9f4:	09 d0                	or     eax,edx
c000f9f6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9fc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000fa03:	e8 b0 fd ff ff       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c000fa08:	83 e0 01             	and    eax,0x1
c000fa0b:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa0e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa14:	83 e0 fd             	and    eax,0xfffffffd
c000fa17:	09 d0                	or     eax,edx
c000fa19:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa1f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000fa26:	e8 8d fd ff ff       	call   c000f7b8 <CPU::cpuidCheckEDX(unsigned int)>
c000fa2b:	83 e0 01             	and    eax,0x1
c000fa2e:	c1 e0 06             	shl    eax,0x6
c000fa31:	89 c2                	mov    edx,eax
c000fa33:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa39:	83 e0 bf             	and    eax,0xffffffbf
c000fa3c:	09 d0                	or     eax,edx
c000fa3e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa44:	58                   	pop    eax
c000fa45:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa49:	50                   	push   eax
c000fa4a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa4e:	50                   	push   eax
c000fa4f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fa53:	56                   	push   esi
c000fa54:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa58:	50                   	push   eax
c000fa59:	6a 00                	push   0x0
c000fa5b:	e8 d4 fc ff ff       	call   c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa60:	b8 04 00 00 00       	mov    eax,0x4
c000fa65:	89 c1                	mov    ecx,eax
c000fa67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa69:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fa6f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fa73:	89 c1                	mov    ecx,eax
c000fa75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa77:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fa7d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fa81:	89 c1                	mov    ecx,eax
c000fa83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa85:	83 c4 18             	add    esp,0x18
c000fa88:	68 04 0b 02 c0       	push   0xc0020b04
c000fa8d:	55                   	push   ebp
c000fa8e:	e8 bd 0c ff ff       	call   c0000750 <strcmp>
c000fa93:	83 c4 10             	add    esp,0x10
c000fa96:	85 c0                	test   eax,eax
c000fa98:	75 0f                	jne    c000faa9 <CPU::detectFeatures()+0x1a9>
c000fa9a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000faa4:	e9 22 02 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000faa9:	50                   	push   eax
c000faaa:	50                   	push   eax
c000faab:	68 11 0b 02 c0       	push   0xc0020b11
c000fab0:	55                   	push   ebp
c000fab1:	e8 9a 0c ff ff       	call   c0000750 <strcmp>
c000fab6:	83 c4 10             	add    esp,0x10
c000fab9:	85 c0                	test   eax,eax
c000fabb:	74 dd                	je     c000fa9a <CPU::detectFeatures()+0x19a>
c000fabd:	50                   	push   eax
c000fabe:	50                   	push   eax
c000fabf:	68 1e 0b 02 c0       	push   0xc0020b1e
c000fac4:	55                   	push   ebp
c000fac5:	e8 86 0c ff ff       	call   c0000750 <strcmp>
c000faca:	83 c4 10             	add    esp,0x10
c000facd:	85 c0                	test   eax,eax
c000facf:	74 2a                	je     c000fafb <CPU::detectFeatures()+0x1fb>
c000fad1:	50                   	push   eax
c000fad2:	50                   	push   eax
c000fad3:	68 2b 0b 02 c0       	push   0xc0020b2b
c000fad8:	55                   	push   ebp
c000fad9:	e8 72 0c ff ff       	call   c0000750 <strcmp>
c000fade:	83 c4 10             	add    esp,0x10
c000fae1:	85 c0                	test   eax,eax
c000fae3:	74 16                	je     c000fafb <CPU::detectFeatures()+0x1fb>
c000fae5:	50                   	push   eax
c000fae6:	50                   	push   eax
c000fae7:	68 38 0b 02 c0       	push   0xc0020b38
c000faec:	55                   	push   ebp
c000faed:	e8 5e 0c ff ff       	call   c0000750 <strcmp>
c000faf2:	83 c4 10             	add    esp,0x10
c000faf5:	85 c0                	test   eax,eax
c000faf7:	74 48                	je     c000fb41 <CPU::detectFeatures()+0x241>
c000faf9:	eb 0f                	jmp    c000fb0a <CPU::detectFeatures()+0x20a>
c000fafb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fb05:	e9 c1 01 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fb0a:	50                   	push   eax
c000fb0b:	50                   	push   eax
c000fb0c:	68 45 0b 02 c0       	push   0xc0020b45
c000fb11:	55                   	push   ebp
c000fb12:	e8 39 0c ff ff       	call   c0000750 <strcmp>
c000fb17:	83 c4 10             	add    esp,0x10
c000fb1a:	85 c0                	test   eax,eax
c000fb1c:	74 23                	je     c000fb41 <CPU::detectFeatures()+0x241>
c000fb1e:	57                   	push   edi
c000fb1f:	57                   	push   edi
c000fb20:	68 52 0b 02 c0       	push   0xc0020b52
c000fb25:	55                   	push   ebp
c000fb26:	e8 25 0c ff ff       	call   c0000750 <strcmp>
c000fb2b:	83 c4 10             	add    esp,0x10
c000fb2e:	85 c0                	test   eax,eax
c000fb30:	75 1e                	jne    c000fb50 <CPU::detectFeatures()+0x250>
c000fb32:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fb3c:	e9 8a 01 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fb41:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fb4b:	e9 7b 01 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fb50:	56                   	push   esi
c000fb51:	56                   	push   esi
c000fb52:	68 5f 0b 02 c0       	push   0xc0020b5f
c000fb57:	55                   	push   ebp
c000fb58:	e8 f3 0b ff ff       	call   c0000750 <strcmp>
c000fb5d:	83 c4 10             	add    esp,0x10
c000fb60:	85 c0                	test   eax,eax
c000fb62:	75 0f                	jne    c000fb73 <CPU::detectFeatures()+0x273>
c000fb64:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fb6e:	e9 58 01 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fb73:	51                   	push   ecx
c000fb74:	51                   	push   ecx
c000fb75:	68 1e 0b 02 c0       	push   0xc0020b1e
c000fb7a:	55                   	push   ebp
c000fb7b:	e8 d0 0b ff ff       	call   c0000750 <strcmp>
c000fb80:	83 c4 10             	add    esp,0x10
c000fb83:	85 c0                	test   eax,eax
c000fb85:	75 0f                	jne    c000fb96 <CPU::detectFeatures()+0x296>
c000fb87:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fb91:	e9 35 01 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fb96:	52                   	push   edx
c000fb97:	52                   	push   edx
c000fb98:	68 6c 0b 02 c0       	push   0xc0020b6c
c000fb9d:	55                   	push   ebp
c000fb9e:	e8 ad 0b ff ff       	call   c0000750 <strcmp>
c000fba3:	83 c4 10             	add    esp,0x10
c000fba6:	85 c0                	test   eax,eax
c000fba8:	75 0f                	jne    c000fbb9 <CPU::detectFeatures()+0x2b9>
c000fbaa:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fbb4:	e9 12 01 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fbb9:	50                   	push   eax
c000fbba:	50                   	push   eax
c000fbbb:	68 79 0b 02 c0       	push   0xc0020b79
c000fbc0:	55                   	push   ebp
c000fbc1:	e8 8a 0b ff ff       	call   c0000750 <strcmp>
c000fbc6:	83 c4 10             	add    esp,0x10
c000fbc9:	85 c0                	test   eax,eax
c000fbcb:	75 0f                	jne    c000fbdc <CPU::detectFeatures()+0x2dc>
c000fbcd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fbd7:	e9 ef 00 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fbdc:	50                   	push   eax
c000fbdd:	50                   	push   eax
c000fbde:	68 86 0b 02 c0       	push   0xc0020b86
c000fbe3:	55                   	push   ebp
c000fbe4:	e8 67 0b ff ff       	call   c0000750 <strcmp>
c000fbe9:	83 c4 10             	add    esp,0x10
c000fbec:	85 c0                	test   eax,eax
c000fbee:	75 0f                	jne    c000fbff <CPU::detectFeatures()+0x2ff>
c000fbf0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fbfa:	e9 cc 00 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fbff:	50                   	push   eax
c000fc00:	50                   	push   eax
c000fc01:	68 93 0b 02 c0       	push   0xc0020b93
c000fc06:	55                   	push   ebp
c000fc07:	e8 44 0b ff ff       	call   c0000750 <strcmp>
c000fc0c:	83 c4 10             	add    esp,0x10
c000fc0f:	85 c0                	test   eax,eax
c000fc11:	75 0f                	jne    c000fc22 <CPU::detectFeatures()+0x322>
c000fc13:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fc1d:	e9 a9 00 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fc22:	50                   	push   eax
c000fc23:	50                   	push   eax
c000fc24:	68 a0 0b 02 c0       	push   0xc0020ba0
c000fc29:	55                   	push   ebp
c000fc2a:	e8 21 0b ff ff       	call   c0000750 <strcmp>
c000fc2f:	83 c4 10             	add    esp,0x10
c000fc32:	85 c0                	test   eax,eax
c000fc34:	75 0f                	jne    c000fc45 <CPU::detectFeatures()+0x345>
c000fc36:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fc40:	e9 86 00 00 00       	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fc45:	50                   	push   eax
c000fc46:	50                   	push   eax
c000fc47:	68 ad 0b 02 c0       	push   0xc0020bad
c000fc4c:	55                   	push   ebp
c000fc4d:	e8 fe 0a ff ff       	call   c0000750 <strcmp>
c000fc52:	83 c4 10             	add    esp,0x10
c000fc55:	85 c0                	test   eax,eax
c000fc57:	75 0c                	jne    c000fc65 <CPU::detectFeatures()+0x365>
c000fc59:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fc63:	eb 66                	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fc65:	50                   	push   eax
c000fc66:	50                   	push   eax
c000fc67:	68 ba 0b 02 c0       	push   0xc0020bba
c000fc6c:	55                   	push   ebp
c000fc6d:	e8 de 0a ff ff       	call   c0000750 <strcmp>
c000fc72:	83 c4 10             	add    esp,0x10
c000fc75:	85 c0                	test   eax,eax
c000fc77:	75 0c                	jne    c000fc85 <CPU::detectFeatures()+0x385>
c000fc79:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fc83:	eb 46                	jmp    c000fccb <CPU::detectFeatures()+0x3cb>
c000fc85:	57                   	push   edi
c000fc86:	57                   	push   edi
c000fc87:	68 c7 0b 02 c0       	push   0xc0020bc7
c000fc8c:	55                   	push   ebp
c000fc8d:	e8 be 0a ff ff       	call   c0000750 <strcmp>
c000fc92:	83 c4 10             	add    esp,0x10
c000fc95:	85 c0                	test   eax,eax
c000fc97:	74 e0                	je     c000fc79 <CPU::detectFeatures()+0x379>
c000fc99:	56                   	push   esi
c000fc9a:	56                   	push   esi
c000fc9b:	68 d4 0b 02 c0       	push   0xc0020bd4
c000fca0:	55                   	push   ebp
c000fca1:	e8 aa 0a ff ff       	call   c0000750 <strcmp>
c000fca6:	83 c4 10             	add    esp,0x10
c000fca9:	85 c0                	test   eax,eax
c000fcab:	74 cc                	je     c000fc79 <CPU::detectFeatures()+0x379>
c000fcad:	51                   	push   ecx
c000fcae:	51                   	push   ecx
c000fcaf:	68 e1 0b 02 c0       	push   0xc0020be1
c000fcb4:	55                   	push   ebp
c000fcb5:	e8 96 0a ff ff       	call   c0000750 <strcmp>
c000fcba:	83 c4 10             	add    esp,0x10
c000fcbd:	85 c0                	test   eax,eax
c000fcbf:	74 b8                	je     c000fc79 <CPU::detectFeatures()+0x379>
c000fcc1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fccb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fcd0:	0f 86 be 00 00 00    	jbe    c000fd94 <CPU::detectFeatures()+0x494>
c000fcd6:	83 ec 0c             	sub    esp,0xc
c000fcd9:	68 80 00 00 00       	push   0x80
c000fcde:	e8 31 fb ff ff       	call   c000f814 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fce3:	83 e0 01             	and    eax,0x1
c000fce6:	c1 e0 06             	shl    eax,0x6
c000fce9:	89 c2                	mov    edx,eax
c000fceb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fcf1:	83 e0 bf             	and    eax,0xffffffbf
c000fcf4:	09 d0                	or     eax,edx
c000fcf6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fcfc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fd03:	e8 0c fb ff ff       	call   c000f814 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fd08:	83 e0 01             	and    eax,0x1
c000fd0b:	c1 e0 04             	shl    eax,0x4
c000fd0e:	89 c2                	mov    edx,eax
c000fd10:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd16:	83 e0 ef             	and    eax,0xffffffef
c000fd19:	09 d0                	or     eax,edx
c000fd1b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd21:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fd28:	e8 e7 fa ff ff       	call   c000f814 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fd2d:	89 c2                	mov    edx,eax
c000fd2f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fd35:	c1 e2 07             	shl    edx,0x7
c000fd38:	83 e0 7f             	and    eax,0x7f
c000fd3b:	09 d0                	or     eax,edx
c000fd3d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fd43:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fd4a:	e8 f3 fa ff ff       	call   c000f842 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd4f:	83 e0 01             	and    eax,0x1
c000fd52:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fd59:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd5f:	83 e0 f7             	and    eax,0xfffffff7
c000fd62:	09 d0                	or     eax,edx
c000fd64:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd6a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fd71:	e8 cc fa ff ff       	call   c000f842 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd76:	83 c4 10             	add    esp,0x10
c000fd79:	83 e0 01             	and    eax,0x1
c000fd7c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd83:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fd89:	83 e0 fb             	and    eax,0xfffffffb
c000fd8c:	09 d0                	or     eax,edx
c000fd8e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fd94:	83 ec 0c             	sub    esp,0xc
c000fd97:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd9b:	50                   	push   eax
c000fd9c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fda0:	50                   	push   eax
c000fda1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fda5:	57                   	push   edi
c000fda6:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fdaa:	56                   	push   esi
c000fdab:	6a 01                	push   0x1
c000fdad:	e8 82 f9 ff ff       	call   c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdb6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fdbc:	89 c1                	mov    ecx,eax
c000fdbe:	83 e2 f0             	and    edx,0xfffffff0
c000fdc1:	83 e1 0f             	and    ecx,0xf
c000fdc4:	09 ca                	or     edx,ecx
c000fdc6:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fdcc:	89 c2                	mov    edx,eax
c000fdce:	c1 ea 04             	shr    edx,0x4
c000fdd1:	83 e2 0f             	and    edx,0xf
c000fdd4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fdd8:	89 d1                	mov    ecx,edx
c000fdda:	83 c4 20             	add    esp,0x20
c000fddd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fde3:	c1 e1 06             	shl    ecx,0x6
c000fde6:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fdec:	09 ca                	or     edx,ecx
c000fdee:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fdf5:	89 c2                	mov    edx,eax
c000fdf7:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fdfd:	c1 ea 08             	shr    edx,0x8
c000fe00:	83 e1 3f             	and    ecx,0x3f
c000fe03:	83 e2 0f             	and    edx,0xf
c000fe06:	89 d5                	mov    ebp,edx
c000fe08:	83 e5 03             	and    ebp,0x3
c000fe0b:	c1 e5 06             	shl    ebp,0x6
c000fe0e:	09 e9                	or     ecx,ebp
c000fe10:	89 d5                	mov    ebp,edx
c000fe12:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fe18:	c1 ed 02             	shr    ebp,0x2
c000fe1b:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fe21:	83 e1 c0             	and    ecx,0xffffffc0
c000fe24:	09 e9                	or     ecx,ebp
c000fe26:	89 c5                	mov    ebp,eax
c000fe28:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fe2e:	c1 ed 08             	shr    ebp,0x8
c000fe31:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fe37:	83 e5 30             	and    ebp,0x30
c000fe3a:	83 e1 cf             	and    ecx,0xffffffcf
c000fe3d:	09 e9                	or     ecx,ebp
c000fe3f:	83 fa 06             	cmp    edx,0x6
c000fe42:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fe48:	74 05                	je     c000fe4f <CPU::detectFeatures()+0x54f>
c000fe4a:	83 fa 0f             	cmp    edx,0xf
c000fe4d:	75 64                	jne    c000feb3 <CPU::detectFeatures()+0x5b3>
c000fe4f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fe55:	89 c1                	mov    ecx,eax
c000fe57:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fe5d:	c1 e9 10             	shr    ecx,0x10
c000fe60:	c1 e1 04             	shl    ecx,0x4
c000fe63:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fe67:	0f b6 c9             	movzx  ecx,cl
c000fe6a:	c1 e1 06             	shl    ecx,0x6
c000fe6d:	09 e9                	or     ecx,ebp
c000fe6f:	83 fa 0f             	cmp    edx,0xf
c000fe72:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fe79:	75 38                	jne    c000feb3 <CPU::detectFeatures()+0x5b3>
c000fe7b:	c1 e8 14             	shr    eax,0x14
c000fe7e:	83 c0 0f             	add    eax,0xf
c000fe81:	0f b6 c0             	movzx  eax,al
c000fe84:	89 c2                	mov    edx,eax
c000fe86:	c1 e8 02             	shr    eax,0x2
c000fe89:	83 e2 03             	and    edx,0x3
c000fe8c:	89 d1                	mov    ecx,edx
c000fe8e:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fe94:	c1 e1 06             	shl    ecx,0x6
c000fe97:	83 e2 3f             	and    edx,0x3f
c000fe9a:	09 ca                	or     edx,ecx
c000fe9c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fea2:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fea8:	83 e2 c0             	and    edx,0xffffffc0
c000feab:	09 d0                	or     eax,edx
c000fead:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000feb3:	83 ec 0c             	sub    esp,0xc
c000feb6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000febc:	83 c8 07             	or     eax,0x7
c000febf:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fec5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fec9:	50                   	push   eax
c000feca:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fece:	55                   	push   ebp
c000fecf:	57                   	push   edi
c000fed0:	56                   	push   esi
c000fed1:	68 00 00 00 80       	push   0x80000000
c000fed6:	e8 59 f8 ff ff       	call   c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fedb:	83 c4 20             	add    esp,0x20
c000fede:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fee6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000feea:	76 1e                	jbe    c000ff0a <CPU::detectFeatures()+0x60a>
c000feec:	83 ec 0c             	sub    esp,0xc
c000feef:	50                   	push   eax
c000fef0:	55                   	push   ebp
c000fef1:	57                   	push   edi
c000fef2:	56                   	push   esi
c000fef3:	68 01 00 00 80       	push   0x80000001
c000fef8:	e8 37 f8 ff ff       	call   c000f734 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fefd:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000ff07:	83 c4 20             	add    esp,0x20
c000ff0a:	52                   	push   edx
c000ff0b:	52                   	push   edx
c000ff0c:	68 ed 0b 02 c0       	push   0xc0020bed
c000ff11:	53                   	push   ebx
c000ff12:	e8 99 c0 ff ff       	call   c000bfb0 <Device::setName(char const*)>
c000ff17:	83 c4 10             	add    esp,0x10
c000ff1a:	eb 69                	jmp    c000ff85 <CPU::detectFeatures()+0x685>
c000ff1c:	50                   	push   eax
c000ff1d:	50                   	push   eax
c000ff1e:	68 52 0b 02 c0       	push   0xc0020b52
c000ff23:	55                   	push   ebp
c000ff24:	e8 17 07 ff ff       	call   c0000640 <strcpy>
c000ff29:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ff33:	e8 8b 02 ff ff       	call   c00001c3 <is486>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff43:	74 1f                	je     c000ff64 <CPU::detectFeatures()+0x664>
c000ff45:	83 c8 07             	or     eax,0x7
c000ff48:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff4e:	0f 20 c0             	mov    eax,cr0
c000ff51:	83 e0 14             	and    eax,0x14
c000ff54:	83 f8 04             	cmp    eax,0x4
c000ff57:	75 10                	jne    c000ff69 <CPU::detectFeatures()+0x669>
c000ff59:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff5f:	83 e0 fd             	and    eax,0xfffffffd
c000ff62:	eb 1b                	jmp    c000ff7f <CPU::detectFeatures()+0x67f>
c000ff64:	83 e0 f8             	and    eax,0xfffffff8
c000ff67:	eb df                	jmp    c000ff48 <CPU::detectFeatures()+0x648>
c000ff69:	e8 30 02 ff ff       	call   c000019e <hasLegacyFPU>
c000ff6e:	83 e0 01             	and    eax,0x1
c000ff71:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff74:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff7a:	83 e0 fd             	and    eax,0xfffffffd
c000ff7d:	09 d0                	or     eax,edx
c000ff7f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff85:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ff8c:	74 17                	je     c000ffa5 <CPU::detectFeatures()+0x6a5>
c000ff8e:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000ff94:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000ff9a:	83 c8 10             	or     eax,0x10
c000ff9d:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000ffa3:	eb 20                	jmp    c000ffc5 <CPU::detectFeatures()+0x6c5>
c000ffa5:	e8 f4 01 ff ff       	call   c000019e <hasLegacyFPU>
c000ffaa:	83 e0 01             	and    eax,0x1
c000ffad:	8d 14 00             	lea    edx,[eax+eax*1]
c000ffb0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ffb6:	83 e0 fd             	and    eax,0xfffffffd
c000ffb9:	09 d0                	or     eax,edx
c000ffbb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ffc1:	a8 02                	test   al,0x2
c000ffc3:	75 c9                	jne    c000ff8e <CPU::detectFeatures()+0x68e>
c000ffc5:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ffcc:	83 c4 2c             	add    esp,0x2c
c000ffcf:	5b                   	pop    ebx
c000ffd0:	5e                   	pop    esi
c000ffd1:	5f                   	pop    edi
c000ffd2:	5d                   	pop    ebp
c000ffd3:	c3                   	ret    

c000ffd4 <CPU::setupSMEP()>:
c000ffd4:	0f 20 e0             	mov    eax,cr4
c000ffd7:	0d 00 00 10 00       	or     eax,0x100000
c000ffdc:	0f 22 e0             	mov    cr4,eax
c000ffdf:	c3                   	ret    

c000ffe0 <CPU::setupUMIP()>:
c000ffe0:	0f 20 e0             	mov    eax,cr4
c000ffe3:	80 cc 08             	or     ah,0x8
c000ffe6:	0f 22 e0             	mov    cr4,eax
c000ffe9:	c3                   	ret    

c000ffea <CPU::setupTSC()>:
c000ffea:	0f 20 e0             	mov    eax,cr4
c000ffed:	83 c8 04             	or     eax,0x4
c000fff0:	0f 22 e0             	mov    cr4,eax
c000fff3:	c3                   	ret    

c000fff4 <CPU::setupLargePages()>:
c000fff4:	0f 20 e0             	mov    eax,cr4
c000fff7:	83 c8 10             	or     eax,0x10
c000fffa:	0f 22 e0             	mov    cr4,eax
c000fffd:	c3                   	ret    

c000fffe <CPU::setupPAT()>:
c000fffe:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010003:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001000a:	74 2c                	je     c0010038 <CPU::setupPAT()+0x3a>
c001000c:	53                   	push   ebx
c001000d:	83 ec 10             	sub    esp,0x10
c0010010:	68 77 02 00 00       	push   0x277
c0010015:	50                   	push   eax
c0010016:	e8 9d 70 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001001b:	83 e2 f8             	and    edx,0xfffffff8
c001001e:	83 ca 01             	or     edx,0x1
c0010021:	52                   	push   edx
c0010022:	50                   	push   eax
c0010023:	68 77 02 00 00       	push   0x277
c0010028:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001002e:	e8 b1 70 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0010033:	83 c4 28             	add    esp,0x28
c0010036:	5b                   	pop    ebx
c0010037:	c3                   	ret    
c0010038:	c3                   	ret    
c0010039:	90                   	nop

c001003a <CPU::setupMTRR()>:
c001003a:	c3                   	ret    
c001003b:	90                   	nop

c001003c <CPU::setupGlobalPages()>:
c001003c:	0f 20 e0             	mov    eax,cr4
c001003f:	0c 80                	or     al,0x80
c0010041:	0f 22 e0             	mov    cr4,eax
c0010044:	c3                   	ret    
c0010045:	90                   	nop

c0010046 <CPU::allowUsermodeDataAccess()>:
c0010046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010051:	74 03                	je     c0010056 <CPU::allowUsermodeDataAccess()+0x10>
c0010053:	0f 01 cb             	stac   
c0010056:	c3                   	ret    
c0010057:	90                   	nop

c0010058 <CPU::prohibitUsermodeDataAccess()>:
c0010058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001005c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010063:	74 03                	je     c0010068 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010065:	0f 01 ca             	clac   
c0010068:	c3                   	ret    
c0010069:	90                   	nop

c001006a <CPU::setupSMAP()>:
c001006a:	0f 20 e0             	mov    eax,cr4
c001006d:	0d 00 00 20 00       	or     eax,0x200000
c0010072:	0f 22 e0             	mov    cr4,eax
c0010075:	eb e1                	jmp    c0010058 <CPU::prohibitUsermodeDataAccess()>
c0010077:	90                   	nop

c0010078 <CPU::setupFeatures()>:
c0010078:	53                   	push   ebx
c0010079:	83 ec 08             	sub    esp,0x8
c001007c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010080:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010087:	74 18                	je     c00100a1 <CPU::setupFeatures()+0x29>
c0010089:	83 ec 0c             	sub    esp,0xc
c001008c:	68 f9 0b 02 c0       	push   0xc0020bf9
c0010091:	e8 5b a9 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0010096:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010099:	e8 42 ff ff ff       	call   c000ffe0 <CPU::setupUMIP()>
c001009e:	83 c4 10             	add    esp,0x10
c00100a1:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00100a8:	74 18                	je     c00100c2 <CPU::setupFeatures()+0x4a>
c00100aa:	83 ec 0c             	sub    esp,0xc
c00100ad:	68 03 0c 02 c0       	push   0xc0020c03
c00100b2:	e8 3a a9 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00100b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100ba:	e8 2b ff ff ff       	call   c000ffea <CPU::setupTSC()>
c00100bf:	83 c4 10             	add    esp,0x10
c00100c2:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00100c9:	74 18                	je     c00100e3 <CPU::setupFeatures()+0x6b>
c00100cb:	83 ec 0c             	sub    esp,0xc
c00100ce:	68 0c 0c 02 c0       	push   0xc0020c0c
c00100d3:	e8 19 a9 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00100d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100db:	e8 14 ff ff ff       	call   c000fff4 <CPU::setupLargePages()>
c00100e0:	83 c4 10             	add    esp,0x10
c00100e3:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00100ea:	74 18                	je     c0010104 <CPU::setupFeatures()+0x8c>
c00100ec:	83 ec 0c             	sub    esp,0xc
c00100ef:	68 15 0c 02 c0       	push   0xc0020c15
c00100f4:	e8 f8 a8 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00100f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100fc:	e8 3b ff ff ff       	call   c001003c <CPU::setupGlobalPages()>
c0010101:	83 c4 10             	add    esp,0x10
c0010104:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001010b:	74 18                	je     c0010125 <CPU::setupFeatures()+0xad>
c001010d:	83 ec 0c             	sub    esp,0xc
c0010110:	68 27 0c 02 c0       	push   0xc0020c27
c0010115:	e8 d7 a8 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001011a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001011d:	e8 dc fe ff ff       	call   c000fffe <CPU::setupPAT()>
c0010122:	83 c4 10             	add    esp,0x10
c0010125:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001012c:	74 11                	je     c001013f <CPU::setupFeatures()+0xc7>
c001012e:	c7 44 24 10 30 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c30
c0010136:	83 c4 08             	add    esp,0x8
c0010139:	5b                   	pop    ebx
c001013a:	e9 b2 a8 ff ff       	jmp    c000a9f1 <Dbg::kprintf(char const*, ...)>
c001013f:	83 c4 08             	add    esp,0x8
c0010142:	5b                   	pop    ebx
c0010143:	c3                   	ret    

c0010144 <CPU::open(int, int, void*)>:
c0010144:	57                   	push   edi
c0010145:	56                   	push   esi
c0010146:	53                   	push   ebx
c0010147:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001014b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001014f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010155:	83 ec 0c             	sub    esp,0xc
c0010158:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001015e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0010164:	50                   	push   eax
c0010165:	e8 4c 72 ff ff       	call   c00073b6 <GDT::setup()>
c001016a:	83 c4 0c             	add    esp,0xc
c001016d:	6a 00                	push   0x0
c001016f:	68 ef be ad de       	push   0xdeadbeef
c0010174:	57                   	push   edi
c0010175:	e8 1e 8e ff ff       	call   c0008f98 <TSS::setup(unsigned long, unsigned long)>
c001017a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001017d:	e8 f6 8d ff ff       	call   c0008f78 <TSS::flush()>
c0010182:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010188:	89 04 24             	mov    DWORD PTR [esp],eax
c001018b:	e8 8a 74 ff ff       	call   c000761a <IDT::setup()>
c0010190:	b8 00 04 00 00       	mov    eax,0x400
c0010195:	0f 23 f8             	mov    db7,eax
c0010198:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00101a2:	e8 0c 7c ff ff       	call   c0007db3 <Phys::allocatePage()>
c00101a7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00101ad:	89 30                	mov    DWORD PTR [eax],esi
c00101af:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00101b5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00101b8:	58                   	pop    eax
c00101b9:	5a                   	pop    edx
c00101ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00101c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101c4:	e8 31 9e ff ff       	call   c0009ffa <VAS::setCPUSpecific(unsigned long)>
c00101c9:	c7 04 24 3a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c3a
c00101d0:	e8 cd 00 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c00101d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101d8:	e8 23 f7 ff ff       	call   c000f900 <CPU::detectFeatures()>
c00101dd:	c7 04 24 5d 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c5d
c00101e4:	e8 b9 00 00 00       	call   c00102a2 <KeSetBootMessage(char const*)>
c00101e9:	e8 4b 6f 00 00       	call   c0017139 <HalInitialise()>
c00101ee:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c00101f3:	83 e0 10             	and    eax,0x10
c00101f6:	83 f8 01             	cmp    eax,0x1
c00101f9:	19 c0                	sbb    eax,eax
c00101fb:	83 e0 46             	and    eax,0x46
c00101fe:	83 c0 1e             	add    eax,0x1e
c0010201:	89 04 24             	mov    DWORD PTR [esp],eax
c0010204:	e8 44 d6 ff ff       	call   c000d84d <setupTimer(int)>
c0010209:	83 c4 10             	add    esp,0x10
c001020c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010212:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010219:	74 0c                	je     c0010227 <CPU::open(int, int, void*)+0xe3>
c001021b:	83 ec 0c             	sub    esp,0xc
c001021e:	53                   	push   ebx
c001021f:	e8 54 fe ff ff       	call   c0010078 <CPU::setupFeatures()>
c0010224:	83 c4 10             	add    esp,0x10
c0010227:	5b                   	pop    ebx
c0010228:	31 c0                	xor    eax,eax
c001022a:	5e                   	pop    esi
c001022b:	5f                   	pop    edi
c001022c:	c3                   	ret    

c001022d <KeDisplaySplashScreen()>:
c001022d:	55                   	push   ebp
c001022e:	bd 05 00 00 00       	mov    ebp,0x5
c0010233:	57                   	push   edi
c0010234:	bf 00 20 02 c0       	mov    edi,0xc0022000
c0010239:	56                   	push   esi
c001023a:	be 0a 00 00 00       	mov    esi,0xa
c001023f:	53                   	push   ebx
c0010240:	31 db                	xor    ebx,ebx
c0010242:	83 ec 0c             	sub    esp,0xc
c0010245:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010248:	89 d0                	mov    eax,edx
c001024a:	85 d2                	test   edx,edx
c001024c:	74 4c                	je     c001029a <KeDisplaySplashScreen()+0x6d>
c001024e:	80 bb 36 20 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffddfca],0xdb
c0010255:	75 13                	jne    c001026a <KeDisplaySplashScreen()+0x3d>
c0010257:	0f b6 8b 35 20 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffddfcb]
c001025e:	83 e1 fe             	and    ecx,0xfffffffe
c0010261:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010267:	75 01                	jne    c001026a <KeDisplaySplashScreen()+0x3d>
c0010269:	46                   	inc    esi
c001026a:	83 fa 0d             	cmp    edx,0xd
c001026d:	74 28                	je     c0010297 <KeDisplaySplashScreen()+0x6a>
c001026f:	83 fa 0a             	cmp    edx,0xa
c0010272:	75 0a                	jne    c001027e <KeDisplaySplashScreen()+0x51>
c0010274:	45                   	inc    ebp
c0010275:	be 0a 00 00 00       	mov    esi,0xa
c001027a:	31 db                	xor    ebx,ebx
c001027c:	eb 19                	jmp    c0010297 <KeDisplaySplashScreen()+0x6a>
c001027e:	83 ec 0c             	sub    esp,0xc
c0010281:	8d 14 33             	lea    edx,[ebx+esi*1]
c0010284:	55                   	push   ebp
c0010285:	0f be c0             	movsx  eax,al
c0010288:	52                   	push   edx
c0010289:	43                   	inc    ebx
c001028a:	6a 00                	push   0x0
c001028c:	6a 0e                	push   0xe
c001028e:	50                   	push   eax
c001028f:	e8 24 7b 00 00       	call   c0017db8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010294:	83 c4 20             	add    esp,0x20
c0010297:	47                   	inc    edi
c0010298:	eb ab                	jmp    c0010245 <KeDisplaySplashScreen()+0x18>
c001029a:	83 c4 0c             	add    esp,0xc
c001029d:	5b                   	pop    ebx
c001029e:	5e                   	pop    esi
c001029f:	5f                   	pop    edi
c00102a0:	5d                   	pop    ebp
c00102a1:	c3                   	ret    

c00102a2 <KeSetBootMessage(char const*)>:
c00102a2:	57                   	push   edi
c00102a3:	56                   	push   esi
c00102a4:	53                   	push   ebx
c00102a5:	81 ec a4 00 00 00    	sub    esp,0xa4
c00102ab:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00102b2:	68 9e 00 00 00       	push   0x9e
c00102b7:	6a 00                	push   0x0
c00102b9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00102bd:	56                   	push   esi
c00102be:	e8 2d 02 ff ff       	call   c00004f0 <memset>
c00102c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102c6:	e8 a5 02 ff ff       	call   c0000570 <strlen>
c00102cb:	ba 50 00 00 00       	mov    edx,0x50
c00102d0:	83 c4 10             	add    esp,0x10
c00102d3:	29 c2                	sub    edx,eax
c00102d5:	31 c9                	xor    ecx,ecx
c00102d7:	83 e2 fe             	and    edx,0xfffffffe
c00102da:	01 f2                	add    edx,esi
c00102dc:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00102e1:	84 c0                	test   al,al
c00102e3:	74 0a                	je     c00102ef <KeSetBootMessage(char const*)+0x4d>
c00102e5:	80 cc 0f             	or     ah,0xf
c00102e8:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00102ec:	41                   	inc    ecx
c00102ed:	eb ed                	jmp    c00102dc <KeSetBootMessage(char const*)+0x3a>
c00102ef:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00102f4:	b9 9e 00 00 00       	mov    ecx,0x9e
c00102f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102fb:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010301:	5b                   	pop    ebx
c0010302:	5e                   	pop    esi
c0010303:	5f                   	pop    edi
c0010304:	c3                   	ret    
c0010305:	90                   	nop

c0010306 <EnvVarContainer::getEnv(char const*)>:
c0010306:	57                   	push   edi
c0010307:	56                   	push   esi
c0010308:	53                   	push   ebx
c0010309:	31 db                	xor    ebx,ebx
c001030b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001030f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010311:	7e 2b                	jle    c001033e <EnvVarContainer::getEnv(char const*)+0x38>
c0010313:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001031a:	50                   	push   eax
c001031b:	50                   	push   eax
c001031c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001031f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010326:	e8 25 04 ff ff       	call   c0000750 <strcmp>
c001032b:	83 c4 10             	add    esp,0x10
c001032e:	85 c0                	test   eax,eax
c0010330:	75 09                	jne    c001033b <EnvVarContainer::getEnv(char const*)+0x35>
c0010332:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010335:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010339:	eb 05                	jmp    c0010340 <EnvVarContainer::getEnv(char const*)+0x3a>
c001033b:	43                   	inc    ebx
c001033c:	eb d1                	jmp    c001030f <EnvVarContainer::getEnv(char const*)+0x9>
c001033e:	31 c0                	xor    eax,eax
c0010340:	5b                   	pop    ebx
c0010341:	5e                   	pop    esi
c0010342:	5f                   	pop    edi
c0010343:	c3                   	ret    

c0010344 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010344:	55                   	push   ebp
c0010345:	57                   	push   edi
c0010346:	56                   	push   esi
c0010347:	53                   	push   ebx
c0010348:	83 ec 28             	sub    esp,0x28
c001034b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001034f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010353:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010357:	56                   	push   esi
c0010358:	e8 13 02 ff ff       	call   c0000570 <strlen>
c001035d:	40                   	inc    eax
c001035e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010361:	e8 48 77 ff ff       	call   c0007aae <malloc>
c0010366:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001036d:	e8 fe 01 ff ff       	call   c0000570 <strlen>
c0010372:	40                   	inc    eax
c0010373:	89 04 24             	mov    DWORD PTR [esp],eax
c0010376:	e8 33 77 ff ff       	call   c0007aae <malloc>
c001037b:	89 34 24             	mov    DWORD PTR [esp],esi
c001037e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010382:	e8 e9 01 ff ff       	call   c0000570 <strlen>
c0010387:	83 c4 0c             	add    esp,0xc
c001038a:	40                   	inc    eax
c001038b:	50                   	push   eax
c001038c:	6a 00                	push   0x0
c001038e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010392:	e8 59 01 ff ff       	call   c00004f0 <memset>
c0010397:	89 34 24             	mov    DWORD PTR [esp],esi
c001039a:	e8 d1 01 ff ff       	call   c0000570 <strlen>
c001039f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00103a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00103a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103ab:	89 de                	mov    esi,ebx
c00103ad:	e8 be 01 ff ff       	call   c0000570 <strlen>
c00103b2:	83 c4 0c             	add    esp,0xc
c00103b5:	40                   	inc    eax
c00103b6:	50                   	push   eax
c00103b7:	6a 00                	push   0x0
c00103b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103bd:	e8 2e 01 ff ff       	call   c00004f0 <memset>
c00103c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103c5:	e8 a6 01 ff ff       	call   c0000570 <strlen>
c00103ca:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00103ce:	8d 48 01             	lea    ecx,[eax+0x1]
c00103d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103d6:	40                   	inc    eax
c00103d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103da:	c1 e0 03             	shl    eax,0x3
c00103dd:	5a                   	pop    edx
c00103de:	59                   	pop    ecx
c00103df:	50                   	push   eax
c00103e0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00103e3:	e8 b2 76 ff ff       	call   c0007a9a <realloc>
c00103e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c00103ec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103ef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00103f2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00103f6:	b9 08 00 00 00       	mov    ecx,0x8
c00103fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103fd:	83 c4 2c             	add    esp,0x2c
c0010400:	5b                   	pop    ebx
c0010401:	5e                   	pop    esi
c0010402:	5f                   	pop    edi
c0010403:	5d                   	pop    ebp
c0010404:	c3                   	ret    
c0010405:	90                   	nop

c0010406 <EnvVarContainer::deleteEnv(char const*)>:
c0010406:	c3                   	ret    
c0010407:	90                   	nop

c0010408 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010408:	55                   	push   ebp
c0010409:	57                   	push   edi
c001040a:	56                   	push   esi
c001040b:	53                   	push   ebx
c001040c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010412:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010419:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010420:	68 14 01 00 00       	push   0x114
c0010425:	e8 84 76 ff ff       	call   c0007aae <malloc>
c001042a:	83 c4 0c             	add    esp,0xc
c001042d:	89 c3                	mov    ebx,eax
c001042f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010432:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010439:	50                   	push   eax
c001043a:	e8 35 ab ff ff       	call   c000af74 <File::File(char const*, Process*)>
c001043f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010442:	e8 57 ae ff ff       	call   c000b29e <File::exists()>
c0010447:	83 c4 10             	add    esp,0x10
c001044a:	84 c0                	test   al,al
c001044c:	75 31                	jne    c001047f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001044e:	50                   	push   eax
c001044f:	50                   	push   eax
c0010450:	6a 12                	push   0x12
c0010452:	53                   	push   ebx
c0010453:	e8 d8 ab ff ff       	call   c000b030 <File::open(FileOpenMode)>
c0010458:	8b 03                	mov    eax,DWORD PTR [ebx]
c001045a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001045d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010460:	e8 0b 01 ff ff       	call   c0000570 <strlen>
c0010465:	5a                   	pop    edx
c0010466:	31 d2                	xor    edx,edx
c0010468:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001046c:	51                   	push   ecx
c001046d:	56                   	push   esi
c001046e:	52                   	push   edx
c001046f:	50                   	push   eax
c0010470:	53                   	push   ebx
c0010471:	ff d7                	call   edi
c0010473:	83 c4 14             	add    esp,0x14
c0010476:	53                   	push   ebx
c0010477:	e8 12 ac ff ff       	call   c000b08e <File::close()>
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	56                   	push   esi
c0010480:	31 f6                	xor    esi,esi
c0010482:	68 00 01 00 00       	push   0x100
c0010487:	6a 00                	push   0x0
c0010489:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001048d:	50                   	push   eax
c001048e:	e8 5d 00 ff ff       	call   c00004f0 <memset>
c0010493:	5f                   	pop    edi
c0010494:	58                   	pop    eax
c0010495:	6a 01                	push   0x1
c0010497:	53                   	push   ebx
c0010498:	e8 93 ab ff ff       	call   c000b030 <File::open(FileOpenMode)>
c001049d:	83 c4 10             	add    esp,0x10
c00104a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104a8:	83 ec 0c             	sub    esp,0xc
c00104ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104ad:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00104b1:	51                   	push   ecx
c00104b2:	8d 54 24 23          	lea    edx,[esp+0x23]
c00104b6:	52                   	push   edx
c00104b7:	6a 00                	push   0x0
c00104b9:	6a 01                	push   0x1
c00104bb:	53                   	push   ebx
c00104bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00104bf:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c00104c4:	83 c4 20             	add    esp,0x20
c00104c7:	89 d0                	mov    eax,edx
c00104c9:	83 fa 0d             	cmp    edx,0xd
c00104cc:	0f 84 0a 01 00 00    	je     c00105dc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104d2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00104d7:	0f 84 f0 00 00 00    	je     c00105cd <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00104dd:	83 fa 0a             	cmp    edx,0xa
c00104e0:	74 13                	je     c00104f5 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00104e2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104e7:	74 0c                	je     c00104f5 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00104e9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00104ef:	0f 8e d8 00 00 00    	jle    c00105cd <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00104f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00104f9:	83 ec 0c             	sub    esp,0xc
c00104fc:	8d 78 01             	lea    edi,[eax+0x1]
c00104ff:	57                   	push   edi
c0010500:	e8 a9 75 ff ff       	call   c0007aae <malloc>
c0010505:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001050d:	8d 56 04             	lea    edx,[esi+0x4]
c0010510:	89 14 24             	mov    DWORD PTR [esp],edx
c0010513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010517:	e8 92 75 ff ff       	call   c0007aae <malloc>
c001051c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010520:	83 c4 0c             	add    esp,0xc
c0010523:	57                   	push   edi
c0010524:	6a 00                	push   0x0
c0010526:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001052a:	e8 c1 ff fe ff       	call   c00004f0 <memset>
c001052f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010533:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010537:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001053b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001053d:	83 c4 0c             	add    esp,0xc
c0010540:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010544:	52                   	push   edx
c0010545:	6a 00                	push   0x0
c0010547:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001054b:	e8 a0 ff fe ff       	call   c00004f0 <memset>
c0010550:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010554:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010558:	89 34 24             	mov    DWORD PTR [esp],esi
c001055b:	e8 10 00 ff ff       	call   c0000570 <strlen>
c0010560:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010564:	89 c1                	mov    ecx,eax
c0010566:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010568:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001056b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001056e:	40                   	inc    eax
c001056f:	83 c4 10             	add    esp,0x10
c0010572:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010575:	85 d2                	test   edx,edx
c0010577:	75 0c                	jne    c0010585 <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c0010579:	83 ec 0c             	sub    esp,0xc
c001057c:	6a 08                	push   0x8
c001057e:	e8 2b 75 ff ff       	call   c0007aae <malloc>
c0010583:	eb 0c                	jmp    c0010591 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c0010585:	c1 e0 03             	shl    eax,0x3
c0010588:	51                   	push   ecx
c0010589:	51                   	push   ecx
c001058a:	50                   	push   eax
c001058b:	52                   	push   edx
c001058c:	e8 09 75 ff ff       	call   c0007a9a <realloc>
c0010591:	83 c4 10             	add    esp,0x10
c0010594:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010597:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001059a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001059d:	8d 74 24 18          	lea    esi,[esp+0x18]
c00105a1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00105a5:	b9 08 00 00 00       	mov    ecx,0x8
c00105aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105ac:	31 f6                	xor    esi,esi
c00105ae:	50                   	push   eax
c00105af:	68 00 01 00 00       	push   0x100
c00105b4:	6a 00                	push   0x0
c00105b6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00105ba:	50                   	push   eax
c00105bb:	e8 30 ff fe ff       	call   c00004f0 <memset>
c00105c0:	83 c4 10             	add    esp,0x10
c00105c3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00105cb:	eb 0f                	jmp    c00105dc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00105cd:	3c 3d                	cmp    al,0x3d
c00105cf:	74 07                	je     c00105d8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00105d1:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00105d5:	46                   	inc    esi
c00105d6:	eb 04                	jmp    c00105dc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00105d8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00105dc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00105e1:	0f 85 c1 fe ff ff    	jne    c00104a8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00105e7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00105ed:	5b                   	pop    ebx
c00105ee:	5e                   	pop    esi
c00105ef:	5f                   	pop    edi
c00105f0:	5d                   	pop    ebp
c00105f1:	c3                   	ret    

c00105f2 <EnvVarContainer::__loadSystem()>:
c00105f2:	83 ec 10             	sub    esp,0x10
c00105f5:	68 60 21 02 c0       	push   0xc0022160
c00105fa:	68 a0 0c 02 c0       	push   0xc0020ca0
c00105ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010603:	e8 00 fe ff ff       	call   c0010408 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010608:	83 c4 1c             	add    esp,0x1c
c001060b:	c3                   	ret    

c001060c <EnvVarContainer::__loadUser()>:
c001060c:	c3                   	ret    
c001060d:	90                   	nop

c001060e <EnvVarContainer::EnvVarContainer(Process*)>:
c001060e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010612:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010620:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010627:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001062e:	90                   	nop
c001062f:	c3                   	ret    

c0010630 <EnvVarContainer::~EnvVarContainer()>:
c0010630:	83 ec 0c             	sub    esp,0xc
c0010633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010637:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001063a:	85 c0                	test   eax,eax
c001063c:	74 1d                	je     c001065b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001063e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010642:	8b 00                	mov    eax,DWORD PTR [eax]
c0010644:	85 c0                	test   eax,eax
c0010646:	74 13                	je     c001065b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001064f:	83 ec 0c             	sub    esp,0xc
c0010652:	50                   	push   eax
c0010653:	e8 66 74 ff ff       	call   c0007abe <free>
c0010658:	83 c4 10             	add    esp,0x10
c001065b:	90                   	nop
c001065c:	83 c4 0c             	add    esp,0xc
c001065f:	c3                   	ret    

c0010660 <Krnl::getEnv(Process*, char const*)>:
c0010660:	53                   	push   ebx
c0010661:	83 ec 08             	sub    esp,0x8
c0010664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010668:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001066c:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010672:	74 04                	je     c0010678 <Krnl::getEnv(Process*, char const*)+0x18>
c0010674:	85 c0                	test   eax,eax
c0010676:	75 0b                	jne    c0010683 <Krnl::getEnv(Process*, char const*)+0x23>
c0010678:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001067d:	85 c0                	test   eax,eax
c001067f:	75 19                	jne    c001069a <Krnl::getEnv(Process*, char const*)+0x3a>
c0010681:	eb 27                	jmp    c00106aa <Krnl::getEnv(Process*, char const*)+0x4a>
c0010683:	52                   	push   edx
c0010684:	52                   	push   edx
c0010685:	53                   	push   ebx
c0010686:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001068c:	e8 75 fc ff ff       	call   c0010306 <EnvVarContainer::getEnv(char const*)>
c0010691:	83 c4 10             	add    esp,0x10
c0010694:	85 c0                	test   eax,eax
c0010696:	75 28                	jne    c00106c0 <Krnl::getEnv(Process*, char const*)+0x60>
c0010698:	eb de                	jmp    c0010678 <Krnl::getEnv(Process*, char const*)+0x18>
c001069a:	52                   	push   edx
c001069b:	52                   	push   edx
c001069c:	53                   	push   ebx
c001069d:	50                   	push   eax
c001069e:	e8 63 fc ff ff       	call   c0010306 <EnvVarContainer::getEnv(char const*)>
c00106a3:	83 c4 10             	add    esp,0x10
c00106a6:	85 c0                	test   eax,eax
c00106a8:	75 16                	jne    c00106c0 <Krnl::getEnv(Process*, char const*)+0x60>
c00106aa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00106ae:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00106b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00106b7:	83 c4 08             	add    esp,0x8
c00106ba:	5b                   	pop    ebx
c00106bb:	e9 46 fc ff ff       	jmp    c0010306 <EnvVarContainer::getEnv(char const*)>
c00106c0:	83 c4 08             	add    esp,0x8
c00106c3:	5b                   	pop    ebx
c00106c4:	c3                   	ret    

c00106c5 <Krnl::setEnvSystem(char const*, char const*)>:
c00106c5:	83 ec 10             	sub    esp,0x10
c00106c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106d0:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00106d6:	e8 69 fc ff ff       	call   c0010344 <EnvVarContainer::setEnv(char const*, char const*)>
c00106db:	83 c4 1c             	add    esp,0x1c
c00106de:	c3                   	ret    

c00106df <Krnl::setEnvUser(char const*, char const*)>:
c00106df:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00106e4:	85 c0                	test   eax,eax
c00106e6:	74 15                	je     c00106fd <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00106e8:	83 ec 10             	sub    esp,0x10
c00106eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106f3:	50                   	push   eax
c00106f4:	e8 4b fc ff ff       	call   c0010344 <EnvVarContainer::setEnv(char const*, char const*)>
c00106f9:	83 c4 1c             	add    esp,0x1c
c00106fc:	c3                   	ret    
c00106fd:	c3                   	ret    

c00106fe <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00106fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010702:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010708:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001070c:	e9 33 fc ff ff       	jmp    c0010344 <EnvVarContainer::setEnv(char const*, char const*)>

c0010711 <Krnl::deleteEnvSystem(char const*)>:
c0010711:	c3                   	ret    

c0010712 <Krnl::deleteEnvUser(char const*)>:
c0010712:	c3                   	ret    

c0010713 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010713:	c3                   	ret    

c0010714 <Krnl::newProcessEnv(Process*)>:
c0010714:	83 ec 28             	sub    esp,0x28
c0010717:	6a 0c                	push   0xc
c0010719:	e8 90 73 ff ff       	call   c0007aae <malloc>
c001071e:	5a                   	pop    edx
c001071f:	59                   	pop    ecx
c0010720:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010724:	50                   	push   eax
c0010725:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010729:	e8 e0 fe ff ff       	call   c001060e <EnvVarContainer::EnvVarContainer(Process*)>
c001072e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010732:	83 c4 2c             	add    esp,0x2c
c0010735:	c3                   	ret    

c0010736 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010736:	57                   	push   edi
c0010737:	56                   	push   esi
c0010738:	53                   	push   ebx
c0010739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073d:	83 ec 0c             	sub    esp,0xc
c0010740:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010746:	6a 0c                	push   0xc
c0010748:	e8 61 73 ff ff       	call   c0007aae <malloc>
c001074d:	89 c3                	mov    ebx,eax
c001074f:	58                   	pop    eax
c0010750:	5a                   	pop    edx
c0010751:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010755:	53                   	push   ebx
c0010756:	e8 b3 fe ff ff       	call   c001060e <EnvVarContainer::EnvVarContainer(Process*)>
c001075b:	8b 07                	mov    eax,DWORD PTR [edi]
c001075d:	89 03                	mov    DWORD PTR [ebx],eax
c001075f:	c1 e0 03             	shl    eax,0x3
c0010762:	89 04 24             	mov    DWORD PTR [esp],eax
c0010765:	e8 44 73 ff ff       	call   c0007aae <malloc>
c001076a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001076d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001076f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010772:	c1 e1 03             	shl    ecx,0x3
c0010775:	89 c7                	mov    edi,eax
c0010777:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010779:	83 c4 10             	add    esp,0x10
c001077c:	89 d8                	mov    eax,ebx
c001077e:	5b                   	pop    ebx
c001077f:	5e                   	pop    esi
c0010780:	5f                   	pop    edi
c0010781:	c3                   	ret    

c0010782 <Krnl::loadSystemEnv()>:
c0010782:	53                   	push   ebx
c0010783:	83 ec 14             	sub    esp,0x14
c0010786:	6a 0c                	push   0xc
c0010788:	e8 21 73 ff ff       	call   c0007aae <malloc>
c001078d:	89 c3                	mov    ebx,eax
c001078f:	58                   	pop    eax
c0010790:	5a                   	pop    edx
c0010791:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010797:	53                   	push   ebx
c0010798:	e8 71 fe ff ff       	call   c001060e <EnvVarContainer::EnvVarContainer(Process*)>
c001079d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107a0:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00107a6:	e8 47 fe ff ff       	call   c00105f2 <EnvVarContainer::__loadSystem()>
c00107ab:	83 c4 18             	add    esp,0x18
c00107ae:	5b                   	pop    ebx
c00107af:	c3                   	ret    

c00107b0 <Krnl::loadUserEnv()>:
c00107b0:	53                   	push   ebx
c00107b1:	83 ec 14             	sub    esp,0x14
c00107b4:	6a 0c                	push   0xc
c00107b6:	e8 f3 72 ff ff       	call   c0007aae <malloc>
c00107bb:	89 c3                	mov    ebx,eax
c00107bd:	58                   	pop    eax
c00107be:	5a                   	pop    edx
c00107bf:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00107c5:	53                   	push   ebx
c00107c6:	e8 43 fe ff ff       	call   c001060e <EnvVarContainer::EnvVarContainer(Process*)>
c00107cb:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00107d1:	83 c4 18             	add    esp,0x18
c00107d4:	5b                   	pop    ebx
c00107d5:	c3                   	ret    

c00107d6 <Krnl::flushEnv()>:
c00107d6:	c3                   	ret    

c00107d7 <Krnl::getProcessTotalEnvCount(Process*)>:
c00107d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107db:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00107e1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00107e7:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00107ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00107ee:	03 01                	add    eax,DWORD PTR [ecx]
c00107f0:	85 d2                	test   edx,edx
c00107f2:	74 02                	je     c00107f6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00107f4:	03 02                	add    eax,DWORD PTR [edx]
c00107f6:	c3                   	ret    

c00107f7 <Krnl::getProcessEnvPair(Process*, int)>:
c00107f7:	57                   	push   edi
c00107f8:	56                   	push   esi
c00107f9:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c00107ff:	53                   	push   ebx
c0010800:	85 f6                	test   esi,esi
c0010802:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010806:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001080a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010810:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010814:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010816:	75 16                	jne    c001082e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010818:	39 c2                	cmp    edx,eax
c001081a:	7c 16                	jl     c0010832 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001081c:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010822:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010824:	01 c6                	add    esi,eax
c0010826:	39 d6                	cmp    esi,edx
c0010828:	7e 3c                	jle    c0010866 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001082a:	29 c2                	sub    edx,eax
c001082c:	eb 04                	jmp    c0010832 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001082e:	39 c2                	cmp    edx,eax
c0010830:	7d 05                	jge    c0010837 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010832:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010835:	eb 20                	jmp    c0010857 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010837:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010839:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001083c:	39 d1                	cmp    ecx,edx
c001083e:	7e 04                	jle    c0010844 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010840:	29 c2                	sub    edx,eax
c0010842:	eb 10                	jmp    c0010854 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010844:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c001084a:	03 0e                	add    ecx,DWORD PTR [esi]
c001084c:	39 d1                	cmp    ecx,edx
c001084e:	7e 16                	jle    c0010866 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010850:	29 c2                	sub    edx,eax
c0010852:	29 fa                	sub    edx,edi
c0010854:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010857:	8d 14 d0             	lea    edx,[eax+edx*8]
c001085a:	8b 02                	mov    eax,DWORD PTR [edx]
c001085c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001085f:	89 03                	mov    DWORD PTR [ebx],eax
c0010861:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010864:	eb 1d                	jmp    c0010883 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010866:	83 ec 0c             	sub    esp,0xc
c0010869:	68 c2 0c 02 c0       	push   0xc0020cc2
c001086e:	e8 ac 00 00 00       	call   c001091f <KePanic(char const*)>
c0010873:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010879:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010880:	83 c4 10             	add    esp,0x10
c0010883:	89 d8                	mov    eax,ebx
c0010885:	5b                   	pop    ebx
c0010886:	5e                   	pop    esi
c0010887:	5f                   	pop    edi
c0010888:	c2 04 00             	ret    0x4

c001088b <CPU::current()>:
c001088b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010890:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010896:	c3                   	ret    

c0010897 <operator new(unsigned long)>:
c0010897:	e9 12 72 ff ff       	jmp    c0007aae <malloc>

c001089c <operator delete(void*)>:
c001089c:	e9 2d 72 ff ff       	jmp    c0007ace <rfree>

c00108a1 <disableIRQs()>:
c00108a1:	fa                   	cli    
c00108a2:	c3                   	ret    

c00108a3 <enableIRQs()>:
c00108a3:	fb                   	sti    
c00108a4:	c3                   	ret    

c00108a5 <lockScheduler()>:
c00108a5:	fa                   	cli    
c00108a6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00108ac:	c3                   	ret    

c00108ad <unlockScheduler()>:
c00108ad:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00108b2:	48                   	dec    eax
c00108b3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00108b8:	75 01                	jne    c00108bb <unlockScheduler()+0xe>
c00108ba:	fb                   	sti    
c00108bb:	c3                   	ret    

c00108bc <lockStuff()>:
c00108bc:	fa                   	cli    
c00108bd:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00108c3:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00108c9:	c3                   	ret    

c00108ca <unlockStuff()>:
c00108ca:	83 ec 0c             	sub    esp,0xc
c00108cd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00108d2:	48                   	dec    eax
c00108d3:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00108d8:	75 18                	jne    c00108f2 <unlockStuff()+0x28>
c00108da:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00108e1:	74 0f                	je     c00108f2 <unlockStuff()+0x28>
c00108e3:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00108ed:	e8 e2 47 00 00       	call   c00150d4 <schedule()>
c00108f2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00108f7:	48                   	dec    eax
c00108f8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00108fd:	75 01                	jne    c0010900 <unlockStuff()+0x36>
c00108ff:	fb                   	sti    
c0010900:	83 c4 0c             	add    esp,0xc
c0010903:	c3                   	ret    

c0010904 <Virt::getAKernelVAS()>:
c0010904:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010909:	c3                   	ret    

c001090a <__not_memcpy>:
c001090a:	57                   	push   edi
c001090b:	56                   	push   esi
c001090c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010910:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010914:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010918:	89 c7                	mov    edi,eax
c001091a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001091c:	5e                   	pop    esi
c001091d:	5f                   	pop    edi
c001091e:	c3                   	ret    

c001091f <KePanic(char const*)>:
c001091f:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c0010926:	e9 e7 66 00 00       	jmp    c0017012 <HalPanic(char const*)>

c001092b <Krnl::powerThread(void*)>:
c001092b:	83 ec 0c             	sub    esp,0xc
c001092e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010933:	48                   	dec    eax
c0010934:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010939:	75 01                	jne    c001093c <Krnl::powerThread(void*)+0x11>
c001093b:	fb                   	sti    
c001093c:	83 ec 0c             	sub    esp,0xc
c001093f:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010946:	6a 0a                	push   0xa
c0010948:	e8 cb 4a 00 00       	call   c0015418 <sleep(unsigned int)>
c001094d:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010954:	83 c4 10             	add    esp,0x10
c0010957:	eb e3                	jmp    c001093c <Krnl::powerThread(void*)+0x11>

c0010959 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010959:	57                   	push   edi
c001095a:	b9 09 00 00 00       	mov    ecx,0x9
c001095f:	56                   	push   esi
c0010960:	bf 60 79 02 c0       	mov    edi,0xc0027960
c0010965:	fc                   	cld    
c0010966:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001096a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001096c:	5e                   	pop    esi
c001096d:	5f                   	pop    edi
c001096e:	c3                   	ret    

c001096f <Krnl::userIOReceived()>:
c001096f:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010979:	c3                   	ret    

c001097a <Krnl::handlePowerButton()>:
c001097a:	83 ec 0c             	sub    esp,0xc
c001097d:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010982:	83 f8 02             	cmp    eax,0x2
c0010985:	75 10                	jne    c0010997 <Krnl::handlePowerButton()+0x1d>
c0010987:	83 ec 0c             	sub    esp,0xc
c001098a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010990:	e8 8b 67 ff ff       	call   c0007120 <Computer::shutdown()>
c0010995:	eb 11                	jmp    c00109a8 <Krnl::handlePowerButton()+0x2e>
c0010997:	48                   	dec    eax
c0010998:	75 11                	jne    c00109ab <Krnl::handlePowerButton()+0x31>
c001099a:	83 ec 0c             	sub    esp,0xc
c001099d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00109a3:	e8 a8 67 ff ff       	call   c0007150 <Computer::sleep()>
c00109a8:	83 c4 10             	add    esp,0x10
c00109ab:	83 c4 0c             	add    esp,0xc
c00109ae:	c3                   	ret    

c00109af <Krnl::handleSleepButton()>:
c00109af:	83 ec 0c             	sub    esp,0xc
c00109b2:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00109b7:	83 f8 02             	cmp    eax,0x2
c00109ba:	75 10                	jne    c00109cc <Krnl::handleSleepButton()+0x1d>
c00109bc:	83 ec 0c             	sub    esp,0xc
c00109bf:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00109c5:	e8 56 67 ff ff       	call   c0007120 <Computer::shutdown()>
c00109ca:	eb 11                	jmp    c00109dd <Krnl::handleSleepButton()+0x2e>
c00109cc:	48                   	dec    eax
c00109cd:	75 11                	jne    c00109e0 <Krnl::handleSleepButton()+0x31>
c00109cf:	83 ec 0c             	sub    esp,0xc
c00109d2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00109d8:	e8 73 67 ff ff       	call   c0007150 <Computer::sleep()>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	83 c4 0c             	add    esp,0xc
c00109e3:	c3                   	ret    

c00109e4 <Krnl::setupPowerManager()>:
c00109e4:	83 ec 0c             	sub    esp,0xc
c00109e7:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00109f1:	68 f0 00 00 00       	push   0xf0
c00109f6:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c00109fd:	6a 00                	push   0x0
c00109ff:	68 2b 09 01 c0       	push   0xc001092b
c0010a04:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010a0a:	e8 75 44 00 00       	call   c0014e84 <Process::createThread(void (*)(void*), void*, int)>
c0010a0f:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010a19:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010a23:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010a2d:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010a37:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010a41:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010a4b:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010a55:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010a5f:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010a69:	83 c4 1c             	add    esp,0x1c
c0010a6c:	c3                   	ret    

c0010a6d <KeRand()>:
c0010a6d:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010a77:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010a81:	53                   	push   ebx
c0010a82:	01 c1                	add    ecx,eax
c0010a84:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010a89:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010a8f:	01 ca                	add    edx,ecx
c0010a91:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010a96:	83 d2 00             	adc    edx,0x0
c0010a99:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010a9e:	0f b7 da             	movzx  ebx,dx
c0010aa1:	89 da                	mov    edx,ebx
c0010aa3:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c0010aa9:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010aad:	5b                   	pop    ebx
c0010aae:	c3                   	ret    

c0010aaf <KeSeedRand(unsigned int)>:
c0010aaf:	53                   	push   ebx
c0010ab0:	83 ec 08             	sub    esp,0x8
c0010ab3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ab7:	e8 6d 68 00 00       	call   c0017329 <HalGetRand()>
c0010abc:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010ac6:	31 d8                	xor    eax,ebx
c0010ac8:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010acd:	e8 9b ff ff ff       	call   c0010a6d <KeRand()>
c0010ad2:	83 c4 08             	add    esp,0x8
c0010ad5:	5b                   	pop    ebx
c0010ad6:	eb 95                	jmp    c0010a6d <KeRand()>

c0010ad8 <KeInitRand()>:
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	e8 3e 66 00 00       	call   c001711e <HalQueryPerformanceCounter()>
c0010ae0:	0f 20 da             	mov    edx,cr3
c0010ae3:	0f 22 da             	mov    cr3,edx
c0010ae6:	0f 20 da             	mov    edx,cr3
c0010ae9:	0f 22 da             	mov    cr3,edx
c0010aec:	0f 20 da             	mov    edx,cr3
c0010aef:	0f 22 da             	mov    cr3,edx
c0010af2:	0f 20 da             	mov    edx,cr3
c0010af5:	0f 22 da             	mov    cr3,edx
c0010af8:	83 ec 0c             	sub    esp,0xc
c0010afb:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010b00:	50                   	push   eax
c0010b01:	e8 a9 ff ff ff       	call   c0010aaf <KeSeedRand(unsigned int)>
c0010b06:	83 c4 1c             	add    esp,0x1c
c0010b09:	c3                   	ret    
c0010b0a:	66 90                	xchg   ax,ax

c0010b0c <KeResolveCompatibilitySymbol(char*)>:
c0010b0c:	83 ec 0c             	sub    esp,0xc
c0010b0f:	83 ec 08             	sub    esp,0x8
c0010b12:	68 dc 0c 02 c0       	push   0xc0020cdc
c0010b17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1b:	e8 30 fc fe ff       	call   c0000750 <strcmp>
c0010b20:	83 c4 10             	add    esp,0x10
c0010b23:	85 c0                	test   eax,eax
c0010b25:	0f 94 c0             	sete   al
c0010b28:	0f b6 c0             	movzx  eax,al
c0010b2b:	85 c0                	test   eax,eax
c0010b2d:	74 0d                	je     c0010b3c <KeResolveCompatibilitySymbol(char*)+0x30>
c0010b2f:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010b34:	e9 8b 01 00 00       	jmp    c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b39:	8d 76 00             	lea    esi,[esi+0x0]
c0010b3c:	83 ec 08             	sub    esp,0x8
c0010b3f:	68 e5 0c 02 c0       	push   0xc0020ce5
c0010b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b48:	e8 03 fc fe ff       	call   c0000750 <strcmp>
c0010b4d:	83 c4 10             	add    esp,0x10
c0010b50:	85 c0                	test   eax,eax
c0010b52:	0f 94 c0             	sete   al
c0010b55:	0f b6 c0             	movzx  eax,al
c0010b58:	85 c0                	test   eax,eax
c0010b5a:	74 0c                	je     c0010b68 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010b5c:	b8 70 e6 01 c0       	mov    eax,0xc001e670
c0010b61:	e9 5e 01 00 00       	jmp    c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b66:	66 90                	xchg   ax,ax
c0010b68:	83 ec 08             	sub    esp,0x8
c0010b6b:	68 ef 0c 02 c0       	push   0xc0020cef
c0010b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b74:	e8 d7 fb fe ff       	call   c0000750 <strcmp>
c0010b79:	83 c4 10             	add    esp,0x10
c0010b7c:	85 c0                	test   eax,eax
c0010b7e:	0f 94 c0             	sete   al
c0010b81:	0f b6 c0             	movzx  eax,al
c0010b84:	85 c0                	test   eax,eax
c0010b86:	74 0c                	je     c0010b94 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010b88:	b8 a4 e3 01 c0       	mov    eax,0xc001e3a4
c0010b8d:	e9 32 01 00 00       	jmp    c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b92:	66 90                	xchg   ax,ax
c0010b94:	83 ec 08             	sub    esp,0x8
c0010b97:	68 f8 0c 02 c0       	push   0xc0020cf8
c0010b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba0:	e8 ab fb fe ff       	call   c0000750 <strcmp>
c0010ba5:	83 c4 10             	add    esp,0x10
c0010ba8:	85 c0                	test   eax,eax
c0010baa:	0f 94 c0             	sete   al
c0010bad:	0f b6 c0             	movzx  eax,al
c0010bb0:	85 c0                	test   eax,eax
c0010bb2:	74 0c                	je     c0010bc0 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010bb4:	b8 1f 09 01 c0       	mov    eax,0xc001091f
c0010bb9:	e9 06 01 00 00       	jmp    c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bbe:	66 90                	xchg   ax,ax
c0010bc0:	83 ec 08             	sub    esp,0x8
c0010bc3:	68 0b 0d 02 c0       	push   0xc0020d0b
c0010bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bcc:	e8 7f fb fe ff       	call   c0000750 <strcmp>
c0010bd1:	83 c4 10             	add    esp,0x10
c0010bd4:	85 c0                	test   eax,eax
c0010bd6:	0f 94 c0             	sete   al
c0010bd9:	0f b6 c0             	movzx  eax,al
c0010bdc:	85 c0                	test   eax,eax
c0010bde:	74 0c                	je     c0010bec <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010be0:	b8 a2 02 01 c0       	mov    eax,0xc00102a2
c0010be5:	e9 da 00 00 00       	jmp    c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bea:	66 90                	xchg   ax,ax
c0010bec:	83 ec 08             	sub    esp,0x8
c0010bef:	68 28 0d 02 c0       	push   0xc0020d28
c0010bf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf8:	e8 53 fb fe ff       	call   c0000750 <strcmp>
c0010bfd:	83 c4 10             	add    esp,0x10
c0010c00:	85 c0                	test   eax,eax
c0010c02:	0f 94 c0             	sete   al
c0010c05:	0f b6 c0             	movzx  eax,al
c0010c08:	85 c0                	test   eax,eax
c0010c0a:	74 0c                	je     c0010c18 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010c0c:	b8 70 e7 01 c0       	mov    eax,0xc001e770
c0010c11:	e9 ae 00 00 00       	jmp    c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c16:	66 90                	xchg   ax,ax
c0010c18:	83 ec 08             	sub    esp,0x8
c0010c1b:	68 32 0d 02 c0       	push   0xc0020d32
c0010c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c24:	e8 27 fb fe ff       	call   c0000750 <strcmp>
c0010c29:	83 c4 10             	add    esp,0x10
c0010c2c:	85 c0                	test   eax,eax
c0010c2e:	0f 94 c0             	sete   al
c0010c31:	0f b6 c0             	movzx  eax,al
c0010c34:	85 c0                	test   eax,eax
c0010c36:	74 0c                	je     c0010c44 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010c38:	b8 f0 e4 01 c0       	mov    eax,0xc001e4f0
c0010c3d:	e9 82 00 00 00       	jmp    c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c42:	66 90                	xchg   ax,ax
c0010c44:	83 ec 08             	sub    esp,0x8
c0010c47:	68 3b 0d 02 c0       	push   0xc0020d3b
c0010c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c50:	e8 fb fa fe ff       	call   c0000750 <strcmp>
c0010c55:	83 c4 10             	add    esp,0x10
c0010c58:	85 c0                	test   eax,eax
c0010c5a:	0f 94 c0             	sete   al
c0010c5d:	0f b6 c0             	movzx  eax,al
c0010c60:	85 c0                	test   eax,eax
c0010c62:	74 08                	je     c0010c6c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010c64:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010c69:	eb 59                	jmp    c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c6b:	90                   	nop
c0010c6c:	83 ec 08             	sub    esp,0x8
c0010c6f:	68 53 0d 02 c0       	push   0xc0020d53
c0010c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c78:	e8 d3 fa fe ff       	call   c0000750 <strcmp>
c0010c7d:	83 c4 10             	add    esp,0x10
c0010c80:	85 c0                	test   eax,eax
c0010c82:	0f 94 c0             	sete   al
c0010c85:	0f b6 c0             	movzx  eax,al
c0010c88:	85 c0                	test   eax,eax
c0010c8a:	74 08                	je     c0010c94 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010c8c:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010c91:	eb 31                	jmp    c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c93:	90                   	nop
c0010c94:	83 ec 08             	sub    esp,0x8
c0010c97:	68 60 0d 02 c0       	push   0xc0020d60
c0010c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ca0:	e8 ab fa fe ff       	call   c0000750 <strcmp>
c0010ca5:	83 c4 10             	add    esp,0x10
c0010ca8:	85 c0                	test   eax,eax
c0010caa:	0f 94 c0             	sete   al
c0010cad:	0f b6 c0             	movzx  eax,al
c0010cb0:	85 c0                	test   eax,eax
c0010cb2:	74 08                	je     c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010cb4:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010cb9:	eb 09                	jmp    c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010cbb:	90                   	nop
c0010cbc:	b8 00 00 00 00       	mov    eax,0x0
c0010cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0010cc4:	83 c4 0c             	add    esp,0xc
c0010cc7:	c3                   	ret    

c0010cc8 <KiSigKill(int)>:
c0010cc8:	83 ec 0c             	sub    esp,0xc
c0010ccb:	6a 00                	push   0x0
c0010ccd:	6a 00                	push   0x0
c0010ccf:	6a ff                	push   0xffffffff
c0010cd1:	6a 01                	push   0x1
c0010cd3:	e8 7a 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010cd8:	83 c4 1c             	add    esp,0x1c
c0010cdb:	c3                   	ret    

c0010cdc <KiDefaultSignalHandlerIgnore(int)>:
c0010cdc:	c3                   	ret    

c0010cdd <KiDefaultSignalHandlerPause(int)>:
c0010cdd:	57                   	push   edi
c0010cde:	b9 07 00 00 00       	mov    ecx,0x7
c0010ce3:	56                   	push   esi
c0010ce4:	be a9 0d 02 c0       	mov    esi,0xc0020da9
c0010ce9:	83 ec 24             	sub    esp,0x24
c0010cec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010cf0:	fc                   	cld    
c0010cf1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010cf3:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010cf7:	50                   	push   eax
c0010cf8:	6a 00                	push   0x0
c0010cfa:	6a 00                	push   0x0
c0010cfc:	6a 27                	push   0x27
c0010cfe:	e8 4f 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010d03:	83 c4 34             	add    esp,0x34
c0010d06:	5e                   	pop    esi
c0010d07:	5f                   	pop    edi
c0010d08:	c3                   	ret    

c0010d09 <KiDefaultSignalHandlerResume(int)>:
c0010d09:	57                   	push   edi
c0010d0a:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010d0f:	56                   	push   esi
c0010d10:	be c5 0d 02 c0       	mov    esi,0xc0020dc5
c0010d15:	83 ec 24             	sub    esp,0x24
c0010d18:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010d1c:	fc                   	cld    
c0010d1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d1f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010d23:	50                   	push   eax
c0010d24:	6a 00                	push   0x0
c0010d26:	6a 00                	push   0x0
c0010d28:	6a 27                	push   0x27
c0010d2a:	e8 23 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010d2f:	83 c4 34             	add    esp,0x34
c0010d32:	5e                   	pop    esi
c0010d33:	5f                   	pop    edi
c0010d34:	c3                   	ret    

c0010d35 <KeDeinitSignals(SigHandlerBlock*)>:
c0010d35:	e9 84 6d ff ff       	jmp    c0007abe <free>

c0010d3a <KeInitSignals()>:
c0010d3a:	53                   	push   ebx
c0010d3b:	83 ec 14             	sub    esp,0x14
c0010d3e:	68 c8 00 00 00       	push   0xc8
c0010d43:	e8 66 6d ff ff       	call   c0007aae <malloc>
c0010d48:	83 c4 0c             	add    esp,0xc
c0010d4b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010d55:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010d5f:	89 c3                	mov    ebx,eax
c0010d61:	6a 20                	push   0x20
c0010d63:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010d69:	6a 00                	push   0x0
c0010d6b:	50                   	push   eax
c0010d6c:	e8 7f f7 fe ff       	call   c00004f0 <memset>
c0010d71:	83 c4 0c             	add    esp,0xc
c0010d74:	6a 44                	push   0x44
c0010d76:	6a 00                	push   0x0
c0010d78:	53                   	push   ebx
c0010d79:	e8 72 f7 fe ff       	call   c00004f0 <memset>
c0010d7e:	89 d8                	mov    eax,ebx
c0010d80:	83 c4 18             	add    esp,0x18
c0010d83:	5b                   	pop    ebx
c0010d84:	c3                   	ret    

c0010d85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010d85:	53                   	push   ebx
c0010d86:	b8 01 00 00 00       	mov    eax,0x1
c0010d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d93:	83 f9 10             	cmp    ecx,0x10
c0010d96:	7f 21                	jg     c0010db9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010d98:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d9f:	89 03                	mov    DWORD PTR [ebx],eax
c0010da1:	b8 01 00 00 00       	mov    eax,0x1
c0010da6:	d3 e0                	shl    eax,cl
c0010da8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010dac:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010daf:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010db7:	31 c0                	xor    eax,eax
c0010db9:	5b                   	pop    ebx
c0010dba:	c3                   	ret    

c0010dbb <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010dbb:	55                   	push   ebp
c0010dbc:	57                   	push   edi
c0010dbd:	bf 08 00 00 00       	mov    edi,0x8
c0010dc2:	56                   	push   esi
c0010dc3:	53                   	push   ebx
c0010dc4:	83 ec 18             	sub    esp,0x18
c0010dc7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dcb:	68 e2 0d 02 c0       	push   0xc0020de2
c0010dd0:	e8 1c 9c ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0010dd5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010ddc:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010de2:	83 c4 10             	add    esp,0x10
c0010de5:	31 c9                	xor    ecx,ecx
c0010de7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010deb:	99                   	cdq    
c0010dec:	f7 ff                	idiv   edi
c0010dee:	8d 42 24             	lea    eax,[edx+0x24]
c0010df1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010df5:	85 f6                	test   esi,esi
c0010df7:	75 1a                	jne    c0010e13 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010df9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010dfd:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010e01:	50                   	push   eax
c0010e02:	50                   	push   eax
c0010e03:	52                   	push   edx
c0010e04:	68 f3 0d 02 c0       	push   0xc0020df3
c0010e09:	e8 e3 9b ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0010e0e:	83 c4 10             	add    esp,0x10
c0010e11:	eb 1b                	jmp    c0010e2e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010e13:	41                   	inc    ecx
c0010e14:	83 f9 08             	cmp    ecx,0x8
c0010e17:	75 ce                	jne    c0010de7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010e19:	83 ec 0c             	sub    esp,0xc
c0010e1c:	be 01 00 00 00       	mov    esi,0x1
c0010e21:	68 14 0e 02 c0       	push   0xc0020e14
c0010e26:	e8 c6 9b ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0010e2b:	83 c4 10             	add    esp,0x10
c0010e2e:	83 c4 0c             	add    esp,0xc
c0010e31:	89 f0                	mov    eax,esi
c0010e33:	5b                   	pop    ebx
c0010e34:	5e                   	pop    esi
c0010e35:	5f                   	pop    edi
c0010e36:	5d                   	pop    ebp
c0010e37:	c3                   	ret    

c0010e38 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010e38:	55                   	push   ebp
c0010e39:	57                   	push   edi
c0010e3a:	56                   	push   esi
c0010e3b:	53                   	push   ebx
c0010e3c:	51                   	push   ecx
c0010e3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e41:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010e48:	0f 84 af 00 00 00    	je     c0010efd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e4e:	31 c9                	xor    ecx,ecx
c0010e50:	bf 08 00 00 00       	mov    edi,0x8
c0010e55:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010e5b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010e5e:	99                   	cdq    
c0010e5f:	f7 ff                	idiv   edi
c0010e61:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010e68:	85 ed                	test   ebp,ebp
c0010e6a:	0f 84 9e 00 00 00    	je     c0010f0e <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010e70:	89 e9                	mov    ecx,ebp
c0010e72:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010e78:	bf 01 00 00 00       	mov    edi,0x1
c0010e7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e80:	d3 e7                	shl    edi,cl
c0010e82:	31 c9                	xor    ecx,ecx
c0010e84:	b8 01 00 00 00       	mov    eax,0x1
c0010e89:	d3 e0                	shl    eax,cl
c0010e8b:	85 04 24             	test   DWORD PTR [esp],eax
c0010e8e:	74 06                	je     c0010e96 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010e90:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010e94:	75 67                	jne    c0010efd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e96:	41                   	inc    ecx
c0010e97:	83 f9 11             	cmp    ecx,0x11
c0010e9a:	75 e8                	jne    c0010e84 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010e9c:	46                   	inc    esi
c0010e9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010ea0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010ea6:	09 f8                	or     eax,edi
c0010ea8:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010eb3:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010eb9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010ec0:	31 c0                	xor    eax,eax
c0010ec2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010eca:	74 09                	je     c0010ed5 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010ecc:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010ed3:	eb 06                	jmp    c0010edb <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010ed5:	40                   	inc    eax
c0010ed6:	83 f8 08             	cmp    eax,0x8
c0010ed9:	75 e7                	jne    c0010ec2 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010edb:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010ede:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010ee2:	83 fd 09             	cmp    ebp,0x9
c0010ee5:	89 2a                	mov    DWORD PTR [edx],ebp
c0010ee7:	75 07                	jne    c0010ef0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010ee9:	b8 c8 0c 01 c0       	mov    eax,0xc0010cc8
c0010eee:	eb 31                	jmp    c0010f21 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010ef0:	83 f8 01             	cmp    eax,0x1
c0010ef3:	75 0c                	jne    c0010f01 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010ef5:	f7 d7                	not    edi
c0010ef7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010efd:	31 c0                	xor    eax,eax
c0010eff:	eb 20                	jmp    c0010f21 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010f01:	85 c0                	test   eax,eax
c0010f03:	75 1c                	jne    c0010f21 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010f05:	8b 04 ad c0 21 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdde40]
c0010f0c:	eb 13                	jmp    c0010f21 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010f0e:	46                   	inc    esi
c0010f0f:	41                   	inc    ecx
c0010f10:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010f16:	83 f9 08             	cmp    ecx,0x8
c0010f19:	0f 85 36 ff ff ff    	jne    c0010e55 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010f1f:	eb dc                	jmp    c0010efd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010f21:	5a                   	pop    edx
c0010f22:	5b                   	pop    ebx
c0010f23:	5e                   	pop    esi
c0010f24:	5f                   	pop    edi
c0010f25:	5d                   	pop    ebp
c0010f26:	c3                   	ret    

c0010f27 <KiCheckSignalZ>:
c0010f27:	83 ec 10             	sub    esp,0x10
c0010f2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010f2e:	50                   	push   eax
c0010f2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f37:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010f3d:	e8 f6 fe ff ff       	call   c0010e38 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010f42:	5a                   	pop    edx
c0010f43:	31 d2                	xor    edx,edx
c0010f45:	59                   	pop    ecx
c0010f46:	85 c0                	test   eax,eax
c0010f48:	74 19                	je     c0010f63 <KiCheckSignalZ+0x3c>
c0010f4a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010f50:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010f53:	89 02                	mov    DWORD PTR [edx],eax
c0010f55:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f60:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010f63:	89 d0                	mov    eax,edx
c0010f65:	83 c4 10             	add    esp,0x10
c0010f68:	c3                   	ret    

c0010f69 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010f69:	56                   	push   esi
c0010f6a:	53                   	push   ebx
c0010f6b:	bb 01 00 00 00       	mov    ebx,0x1
c0010f70:	52                   	push   edx
c0010f71:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010f75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f79:	d3 e3                	shl    ebx,cl
c0010f7b:	83 f9 10             	cmp    ecx,0x10
c0010f7e:	7f 08                	jg     c0010f88 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010f80:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010f86:	75 10                	jne    c0010f98 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010f88:	83 ec 0c             	sub    esp,0xc
c0010f8b:	68 25 0e 02 c0       	push   0xc0020e25
c0010f90:	e8 8a f9 ff ff       	call   c001091f <KePanic(char const*)>
c0010f95:	83 c4 10             	add    esp,0x10
c0010f98:	f7 d3                	not    ebx
c0010f9a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010fa0:	58                   	pop    eax
c0010fa1:	5b                   	pop    ebx
c0010fa2:	5e                   	pop    esi
c0010fa3:	c3                   	ret    

c0010fa4 <KiFinishSignalZ>:
c0010fa4:	53                   	push   ebx
c0010fa5:	83 ec 10             	sub    esp,0x10
c0010fa8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010fac:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010faf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fb4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fb7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010fbd:	e8 a7 ff ff ff       	call   c0010f69 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010fc2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010fc8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010fcf:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010fd6:	83 c4 18             	add    esp,0x18
c0010fd9:	5b                   	pop    ebx
c0010fda:	c3                   	ret    

c0010fdb <SysSeekDir(regs*)>:
c0010fdb:	31 c0                	xor    eax,eax
c0010fdd:	31 d2                	xor    edx,edx
c0010fdf:	c3                   	ret    

c0010fe0 <SysTellDir(regs*)>:
c0010fe0:	31 c0                	xor    eax,eax
c0010fe2:	31 d2                	xor    edx,edx
c0010fe4:	c3                   	ret    

c0010fe5 <SysVerify(regs*)>:
c0010fe5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe9:	31 d2                	xor    edx,edx
c0010feb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fee:	c3                   	ret    

c0010fef <SysGetArgc(regs*)>:
c0010fef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ff4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ff7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010ffd:	89 c2                	mov    edx,eax
c0010fff:	c1 fa 1f             	sar    edx,0x1f
c0011002:	c3                   	ret    

c0011003 <SysTTYName(regs*)>:
c0011003:	b8 01 00 00 00       	mov    eax,0x1
c0011008:	31 d2                	xor    edx,edx
c001100a:	c3                   	ret    

c001100b <SysFormatDisk(regs*)>:
c001100b:	56                   	push   esi
c001100c:	53                   	push   ebx
c001100d:	83 ec 04             	sub    esp,0x4
c0011010:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011014:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c001101a:	eb 28                	jmp    c0011044 <SysFormatDisk(regs*)+0x39>
c001101c:	83 ec 0c             	sub    esp,0xc
c001101f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011022:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011025:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011027:	51                   	push   ecx
c0011028:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001102b:	51                   	push   ecx
c001102c:	50                   	push   eax
c001102d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0011034:	50                   	push   eax
c0011035:	53                   	push   ebx
c0011036:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0011039:	83 c4 20             	add    esp,0x20
c001103c:	83 f8 08             	cmp    eax,0x8
c001103f:	75 14                	jne    c0011055 <SysFormatDisk(regs*)+0x4a>
c0011041:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011044:	85 db                	test   ebx,ebx
c0011046:	75 d4                	jne    c001101c <SysFormatDisk(regs*)+0x11>
c0011048:	83 c4 04             	add    esp,0x4
c001104b:	b8 03 00 00 00       	mov    eax,0x3
c0011050:	31 d2                	xor    edx,edx
c0011052:	5b                   	pop    ebx
c0011053:	5e                   	pop    esi
c0011054:	c3                   	ret    
c0011055:	85 c0                	test   eax,eax
c0011057:	74 1f                	je     c0011078 <SysFormatDisk(regs*)+0x6d>
c0011059:	83 f8 09             	cmp    eax,0x9
c001105c:	74 0d                	je     c001106b <SysFormatDisk(regs*)+0x60>
c001105e:	83 c4 04             	add    esp,0x4
c0011061:	b8 02 00 00 00       	mov    eax,0x2
c0011066:	31 d2                	xor    edx,edx
c0011068:	5b                   	pop    ebx
c0011069:	5e                   	pop    esi
c001106a:	c3                   	ret    
c001106b:	83 c4 04             	add    esp,0x4
c001106e:	b8 01 00 00 00       	mov    eax,0x1
c0011073:	31 d2                	xor    edx,edx
c0011075:	5b                   	pop    ebx
c0011076:	5e                   	pop    esi
c0011077:	c3                   	ret    
c0011078:	83 c4 04             	add    esp,0x4
c001107b:	31 c0                	xor    eax,eax
c001107d:	31 d2                	xor    edx,edx
c001107f:	5b                   	pop    ebx
c0011080:	5e                   	pop    esi
c0011081:	c3                   	ret    

c0011082 <SysSetDiskVolumeLabel(regs*)>:
c0011082:	56                   	push   esi
c0011083:	53                   	push   ebx
c0011084:	83 ec 04             	sub    esp,0x4
c0011087:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001108b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001108e:	83 f8 19             	cmp    eax,0x19
c0011091:	77 33                	ja     c00110c6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011093:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001109a:	85 c9                	test   ecx,ecx
c001109c:	74 28                	je     c00110c6 <SysSetDiskVolumeLabel(regs*)+0x44>
c001109e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00110a1:	85 db                	test   ebx,ebx
c00110a3:	74 21                	je     c00110c6 <SysSetDiskVolumeLabel(regs*)+0x44>
c00110a5:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00110ab:	85 d2                	test   edx,edx
c00110ad:	74 17                	je     c00110c6 <SysSetDiskVolumeLabel(regs*)+0x44>
c00110af:	8b 32                	mov    esi,DWORD PTR [edx]
c00110b1:	53                   	push   ebx
c00110b2:	50                   	push   eax
c00110b3:	51                   	push   ecx
c00110b4:	52                   	push   edx
c00110b5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00110b8:	83 c4 10             	add    esp,0x10
c00110bb:	89 c2                	mov    edx,eax
c00110bd:	83 c4 04             	add    esp,0x4
c00110c0:	c1 fa 1f             	sar    edx,0x1f
c00110c3:	5b                   	pop    ebx
c00110c4:	5e                   	pop    esi
c00110c5:	c3                   	ret    
c00110c6:	83 c4 04             	add    esp,0x4
c00110c9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00110ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110d3:	5b                   	pop    ebx
c00110d4:	5e                   	pop    esi
c00110d5:	c3                   	ret    

c00110d6 <SysGetDiskVolumeLabel(regs*)>:
c00110d6:	57                   	push   edi
c00110d7:	56                   	push   esi
c00110d8:	53                   	push   ebx
c00110d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110dd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00110e0:	83 fa 19             	cmp    edx,0x19
c00110e3:	77 3c                	ja     c0011121 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110e5:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c00110ec:	85 c9                	test   ecx,ecx
c00110ee:	74 31                	je     c0011121 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110f0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110f3:	85 db                	test   ebx,ebx
c00110f5:	74 2a                	je     c0011121 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110f7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00110fa:	85 f6                	test   esi,esi
c00110fc:	74 23                	je     c0011121 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110fe:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011104:	85 c0                	test   eax,eax
c0011106:	74 19                	je     c0011121 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	8b 38                	mov    edi,DWORD PTR [eax]
c001110d:	56                   	push   esi
c001110e:	53                   	push   ebx
c001110f:	52                   	push   edx
c0011110:	51                   	push   ecx
c0011111:	50                   	push   eax
c0011112:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011115:	83 c4 20             	add    esp,0x20
c0011118:	89 c2                	mov    edx,eax
c001111a:	5b                   	pop    ebx
c001111b:	c1 fa 1f             	sar    edx,0x1f
c001111e:	5e                   	pop    esi
c001111f:	5f                   	pop    edi
c0011120:	c3                   	ret    
c0011121:	5b                   	pop    ebx
c0011122:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011127:	ba ff ff ff ff       	mov    edx,0xffffffff
c001112c:	5e                   	pop    esi
c001112d:	5f                   	pop    edi
c001112e:	c3                   	ret    

c001112f <SysShutdown(regs*)>:
c001112f:	83 ec 0c             	sub    esp,0xc
c0011132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011136:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011139:	85 c0                	test   eax,eax
c001113b:	74 18                	je     c0011155 <SysShutdown(regs*)+0x26>
c001113d:	83 f8 01             	cmp    eax,0x1
c0011140:	74 38                	je     c001117a <SysShutdown(regs*)+0x4b>
c0011142:	83 f8 02             	cmp    eax,0x2
c0011145:	74 24                	je     c001116b <SysShutdown(regs*)+0x3c>
c0011147:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001114c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011151:	83 c4 0c             	add    esp,0xc
c0011154:	c3                   	ret    
c0011155:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001115a:	8b 10                	mov    edx,DWORD PTR [eax]
c001115c:	6a 00                	push   0x0
c001115e:	6a 00                	push   0x0
c0011160:	6a 00                	push   0x0
c0011162:	50                   	push   eax
c0011163:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011166:	83 c4 10             	add    esp,0x10
c0011169:	eb dc                	jmp    c0011147 <SysShutdown(regs*)+0x18>
c001116b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011170:	8b 10                	mov    edx,DWORD PTR [eax]
c0011172:	6a 00                	push   0x0
c0011174:	6a 00                	push   0x0
c0011176:	6a 01                	push   0x1
c0011178:	eb e8                	jmp    c0011162 <SysShutdown(regs*)+0x33>
c001117a:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c001117f:	85 c0                	test   eax,eax
c0011181:	74 02                	je     c0011185 <SysShutdown(regs*)+0x56>
c0011183:	ff d0                	call   eax
c0011185:	31 c0                	xor    eax,eax
c0011187:	31 d2                	xor    edx,edx
c0011189:	83 c4 0c             	add    esp,0xc
c001118c:	c3                   	ret    

c001118d <SysRealpath(regs*)>:
c001118d:	83 ec 0c             	sub    esp,0xc
c0011190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011194:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011197:	85 d2                	test   edx,edx
c0011199:	74 07                	je     c00111a2 <SysRealpath(regs*)+0x15>
c001119b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001119e:	85 c0                	test   eax,eax
c00111a0:	75 0b                	jne    c00111ad <SysRealpath(regs*)+0x20>
c00111a2:	b8 01 00 00 00       	mov    eax,0x1
c00111a7:	31 d2                	xor    edx,edx
c00111a9:	83 c4 0c             	add    esp,0xc
c00111ac:	c3                   	ret    
c00111ad:	83 ec 04             	sub    esp,0x4
c00111b0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00111b6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00111b9:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00111bf:	51                   	push   ecx
c00111c0:	52                   	push   edx
c00111c1:	50                   	push   eax
c00111c2:	e8 f7 9b ff ff       	call   c000adbe <Fs::standardiseFiles(char*, char const*, char const*)>
c00111c7:	83 c4 10             	add    esp,0x10
c00111ca:	31 c0                	xor    eax,eax
c00111cc:	31 d2                	xor    edx,edx
c00111ce:	83 c4 0c             	add    esp,0xc
c00111d1:	c3                   	ret    

c00111d2 <SysReadDir(regs*)>:
c00111d2:	53                   	push   ebx
c00111d3:	83 ec 18             	sub    esp,0x18
c00111d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111da:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111dd:	83 f8 02             	cmp    eax,0x2
c00111e0:	76 61                	jbe    c0011243 <SysReadDir(regs*)+0x71>
c00111e2:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00111e9:	77 49                	ja     c0011234 <SysReadDir(regs*)+0x62>
c00111eb:	83 ec 0c             	sub    esp,0xc
c00111ee:	50                   	push   eax
c00111ef:	e8 cf 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00111f4:	83 c4 10             	add    esp,0x10
c00111f7:	85 c0                	test   eax,eax
c00111f9:	74 39                	je     c0011234 <SysReadDir(regs*)+0x62>
c00111fb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011203:	83 ec 0c             	sub    esp,0xc
c0011206:	8b 10                	mov    edx,DWORD PTR [eax]
c0011208:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001120c:	51                   	push   ecx
c001120d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011210:	51                   	push   ecx
c0011211:	6a 00                	push   0x0
c0011213:	68 10 01 00 00       	push   0x110
c0011218:	50                   	push   eax
c0011219:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001121c:	83 c4 20             	add    esp,0x20
c001121f:	85 c0                	test   eax,eax
c0011221:	74 29                	je     c001124c <SysReadDir(regs*)+0x7a>
c0011223:	83 f8 07             	cmp    eax,0x7
c0011226:	74 1b                	je     c0011243 <SysReadDir(regs*)+0x71>
c0011228:	b8 02 00 00 00       	mov    eax,0x2
c001122d:	31 d2                	xor    edx,edx
c001122f:	83 c4 18             	add    esp,0x18
c0011232:	5b                   	pop    ebx
c0011233:	c3                   	ret    
c0011234:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011239:	ba ff ff ff ff       	mov    edx,0xffffffff
c001123e:	83 c4 18             	add    esp,0x18
c0011241:	5b                   	pop    ebx
c0011242:	c3                   	ret    
c0011243:	b8 01 00 00 00       	mov    eax,0x1
c0011248:	31 d2                	xor    edx,edx
c001124a:	eb e3                	jmp    c001122f <SysReadDir(regs*)+0x5d>
c001124c:	31 c0                	xor    eax,eax
c001124e:	31 d2                	xor    edx,edx
c0011250:	eb dd                	jmp    c001122f <SysReadDir(regs*)+0x5d>

c0011252 <SysIsATTY(regs*)>:
c0011252:	83 ec 0c             	sub    esp,0xc
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001125c:	83 f8 02             	cmp    eax,0x2
c001125f:	76 07                	jbe    c0011268 <SysIsATTY(regs*)+0x16>
c0011261:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011266:	75 26                	jne    c001128e <SysIsATTY(regs*)+0x3c>
c0011268:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001126d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011270:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011276:	85 c0                	test   eax,eax
c0011278:	74 24                	je     c001129e <SysIsATTY(regs*)+0x4c>
c001127a:	83 ec 0c             	sub    esp,0xc
c001127d:	8b 10                	mov    edx,DWORD PTR [eax]
c001127f:	50                   	push   eax
c0011280:	ff 12                	call   DWORD PTR [edx]
c0011282:	31 d2                	xor    edx,edx
c0011284:	0f b6 c0             	movzx  eax,al
c0011287:	83 c4 10             	add    esp,0x10
c001128a:	83 c4 0c             	add    esp,0xc
c001128d:	c3                   	ret    
c001128e:	83 ec 0c             	sub    esp,0xc
c0011291:	50                   	push   eax
c0011292:	e8 2c 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0011297:	83 c4 10             	add    esp,0x10
c001129a:	85 c0                	test   eax,eax
c001129c:	75 dc                	jne    c001127a <SysIsATTY(regs*)+0x28>
c001129e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112a8:	83 c4 0c             	add    esp,0xc
c00112ab:	c3                   	ret    

c00112ac <SysSeek(regs*)>:
c00112ac:	53                   	push   ebx
c00112ad:	83 ec 08             	sub    esp,0x8
c00112b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112b7:	8d 50 fd             	lea    edx,[eax-0x3]
c00112ba:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00112c0:	77 32                	ja     c00112f4 <SysSeek(regs*)+0x48>
c00112c2:	83 ec 0c             	sub    esp,0xc
c00112c5:	50                   	push   eax
c00112c6:	e8 f8 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00112cb:	83 c4 0c             	add    esp,0xc
c00112ce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00112d1:	31 db                	xor    ebx,ebx
c00112d3:	53                   	push   ebx
c00112d4:	51                   	push   ecx
c00112d5:	50                   	push   eax
c00112d6:	e8 13 9e ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c00112db:	83 c4 10             	add    esp,0x10
c00112de:	85 c0                	test   eax,eax
c00112e0:	0f 95 c0             	setne  al
c00112e3:	31 d2                	xor    edx,edx
c00112e5:	0f b6 c0             	movzx  eax,al
c00112e8:	f7 d8                	neg    eax
c00112ea:	83 d2 00             	adc    edx,0x0
c00112ed:	83 c4 08             	add    esp,0x8
c00112f0:	f7 da                	neg    edx
c00112f2:	5b                   	pop    ebx
c00112f3:	c3                   	ret    
c00112f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112fe:	83 c4 08             	add    esp,0x8
c0011301:	5b                   	pop    ebx
c0011302:	c3                   	ret    

c0011303 <SysTell(regs*)>:
c0011303:	53                   	push   ebx
c0011304:	83 ec 08             	sub    esp,0x8
c0011307:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001130b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001130e:	83 f8 02             	cmp    eax,0x2
c0011311:	76 4e                	jbe    c0011361 <SysTell(regs*)+0x5e>
c0011313:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011318:	76 19                	jbe    c0011333 <SysTell(regs*)+0x30>
c001131a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001131d:	31 d2                	xor    edx,edx
c001131f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011325:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001132c:	31 c0                	xor    eax,eax
c001132e:	83 c4 08             	add    esp,0x8
c0011331:	5b                   	pop    ebx
c0011332:	c3                   	ret    
c0011333:	83 ec 0c             	sub    esp,0xc
c0011336:	50                   	push   eax
c0011337:	e8 87 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001133c:	5a                   	pop    edx
c001133d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011340:	59                   	pop    ecx
c0011341:	53                   	push   ebx
c0011342:	50                   	push   eax
c0011343:	e8 fc 9d ff ff       	call   c000b144 <File::tell(unsigned long long*)>
c0011348:	83 c4 10             	add    esp,0x10
c001134b:	85 c0                	test   eax,eax
c001134d:	0f 95 c0             	setne  al
c0011350:	31 d2                	xor    edx,edx
c0011352:	0f b6 c0             	movzx  eax,al
c0011355:	f7 d8                	neg    eax
c0011357:	83 d2 00             	adc    edx,0x0
c001135a:	83 c4 08             	add    esp,0x8
c001135d:	f7 da                	neg    edx
c001135f:	5b                   	pop    ebx
c0011360:	c3                   	ret    
c0011361:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011366:	ba ff ff ff ff       	mov    edx,0xffffffff
c001136b:	83 c4 08             	add    esp,0x8
c001136e:	5b                   	pop    ebx
c001136f:	c3                   	ret    

c0011370 <SysSize(regs*)>:
c0011370:	53                   	push   ebx
c0011371:	83 ec 18             	sub    esp,0x18
c0011374:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011378:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001137b:	83 f8 02             	cmp    eax,0x2
c001137e:	76 54                	jbe    c00113d4 <SysSize(regs*)+0x64>
c0011380:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011385:	76 19                	jbe    c00113a0 <SysSize(regs*)+0x30>
c0011387:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001138a:	31 d2                	xor    edx,edx
c001138c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011392:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011399:	31 c0                	xor    eax,eax
c001139b:	83 c4 18             	add    esp,0x18
c001139e:	5b                   	pop    ebx
c001139f:	c3                   	ret    
c00113a0:	83 ec 0c             	sub    esp,0xc
c00113a3:	50                   	push   eax
c00113a4:	e8 1a 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00113a9:	83 c4 0c             	add    esp,0xc
c00113ac:	8d 54 24 13          	lea    edx,[esp+0x13]
c00113b0:	52                   	push   edx
c00113b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113b4:	52                   	push   edx
c00113b5:	50                   	push   eax
c00113b6:	e8 21 9f ff ff       	call   c000b2dc <File::stat(unsigned long long*, bool*)>
c00113bb:	83 c4 10             	add    esp,0x10
c00113be:	85 c0                	test   eax,eax
c00113c0:	0f 95 c0             	setne  al
c00113c3:	31 d2                	xor    edx,edx
c00113c5:	0f b6 c0             	movzx  eax,al
c00113c8:	f7 d8                	neg    eax
c00113ca:	83 d2 00             	adc    edx,0x0
c00113cd:	83 c4 18             	add    esp,0x18
c00113d0:	f7 da                	neg    edx
c00113d2:	5b                   	pop    ebx
c00113d3:	c3                   	ret    
c00113d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113de:	83 c4 18             	add    esp,0x18
c00113e1:	5b                   	pop    ebx
c00113e2:	c3                   	ret    

c00113e3 <SysSizeFromFilename(regs*)>:
c00113e3:	57                   	push   edi
c00113e4:	56                   	push   esi
c00113e5:	53                   	push   ebx
c00113e6:	83 ec 20             	sub    esp,0x20
c00113e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113ed:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00113f0:	83 fb 02             	cmp    ebx,0x2
c00113f3:	0f 86 8a 00 00 00    	jbe    c0011483 <SysSizeFromFilename(regs*)+0xa0>
c00113f9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00113ff:	76 1b                	jbe    c001141c <SysSizeFromFilename(regs*)+0x39>
c0011401:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011404:	31 d2                	xor    edx,edx
c0011406:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001140c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011413:	83 c4 20             	add    esp,0x20
c0011416:	31 c0                	xor    eax,eax
c0011418:	5b                   	pop    ebx
c0011419:	5e                   	pop    esi
c001141a:	5f                   	pop    edi
c001141b:	c3                   	ret    
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	68 14 01 00 00       	push   0x114
c0011424:	e8 85 66 ff ff       	call   c0007aae <malloc>
c0011429:	83 c4 0c             	add    esp,0xc
c001142c:	89 c7                	mov    edi,eax
c001142e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011433:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011436:	50                   	push   eax
c0011437:	53                   	push   ebx
c0011438:	57                   	push   edi
c0011439:	e8 36 9b ff ff       	call   c000af74 <File::File(char const*, Process*)>
c001143e:	83 c4 0c             	add    esp,0xc
c0011441:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011445:	50                   	push   eax
c0011446:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011449:	52                   	push   edx
c001144a:	57                   	push   edi
c001144b:	e8 8c 9e ff ff       	call   c000b2dc <File::stat(unsigned long long*, bool*)>
c0011450:	83 c4 10             	add    esp,0x10
c0011453:	85 ff                	test   edi,edi
c0011455:	74 14                	je     c001146b <SysSizeFromFilename(regs*)+0x88>
c0011457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001145b:	8b 17                	mov    edx,DWORD PTR [edi]
c001145d:	83 ec 0c             	sub    esp,0xc
c0011460:	57                   	push   edi
c0011461:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011464:	83 c4 10             	add    esp,0x10
c0011467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001146b:	85 c0                	test   eax,eax
c001146d:	0f 95 c0             	setne  al
c0011470:	31 d2                	xor    edx,edx
c0011472:	0f b6 c0             	movzx  eax,al
c0011475:	f7 d8                	neg    eax
c0011477:	83 d2 00             	adc    edx,0x0
c001147a:	83 c4 20             	add    esp,0x20
c001147d:	f7 da                	neg    edx
c001147f:	5b                   	pop    ebx
c0011480:	5e                   	pop    esi
c0011481:	5f                   	pop    edi
c0011482:	c3                   	ret    
c0011483:	83 c4 20             	add    esp,0x20
c0011486:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001148b:	5b                   	pop    ebx
c001148c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011491:	5e                   	pop    esi
c0011492:	5f                   	pop    edi
c0011493:	c3                   	ret    

c0011494 <SysClose(regs*)>:
c0011494:	53                   	push   ebx
c0011495:	83 ec 08             	sub    esp,0x8
c0011498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001149c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001149f:	83 f8 02             	cmp    eax,0x2
c00114a2:	76 41                	jbe    c00114e5 <SysClose(regs*)+0x51>
c00114a4:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00114aa:	83 fa 01             	cmp    edx,0x1
c00114ad:	76 2d                	jbe    c00114dc <SysClose(regs*)+0x48>
c00114af:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00114b4:	77 2f                	ja     c00114e5 <SysClose(regs*)+0x51>
c00114b6:	83 ec 0c             	sub    esp,0xc
c00114b9:	50                   	push   eax
c00114ba:	e8 04 80 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00114bf:	89 c3                	mov    ebx,eax
c00114c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00114c4:	e8 c5 9b ff ff       	call   c000b08e <File::close()>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	85 db                	test   ebx,ebx
c00114ce:	74 0c                	je     c00114dc <SysClose(regs*)+0x48>
c00114d0:	83 ec 0c             	sub    esp,0xc
c00114d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114d5:	53                   	push   ebx
c00114d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114d9:	83 c4 10             	add    esp,0x10
c00114dc:	31 c0                	xor    eax,eax
c00114de:	31 d2                	xor    edx,edx
c00114e0:	83 c4 08             	add    esp,0x8
c00114e3:	5b                   	pop    ebx
c00114e4:	c3                   	ret    
c00114e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114ef:	83 c4 08             	add    esp,0x8
c00114f2:	5b                   	pop    ebx
c00114f3:	c3                   	ret    

c00114f4 <SysOpenDir(regs*)>:
c00114f4:	56                   	push   esi
c00114f5:	53                   	push   ebx
c00114f6:	83 ec 04             	sub    esp,0x4
c00114f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114fd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011500:	85 c9                	test   ecx,ecx
c0011502:	74 5d                	je     c0011561 <SysOpenDir(regs*)+0x6d>
c0011504:	83 ec 0c             	sub    esp,0xc
c0011507:	68 14 01 00 00       	push   0x114
c001150c:	e8 9d 65 ff ff       	call   c0007aae <malloc>
c0011511:	83 c4 0c             	add    esp,0xc
c0011514:	89 c6                	mov    esi,eax
c0011516:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001151b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001151e:	50                   	push   eax
c001151f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011522:	52                   	push   edx
c0011523:	56                   	push   esi
c0011524:	e8 71 9f ff ff       	call   c000b49a <Directory::Directory(char const*, Process*)>
c0011529:	83 c4 10             	add    esp,0x10
c001152c:	85 f6                	test   esi,esi
c001152e:	74 31                	je     c0011561 <SysOpenDir(regs*)+0x6d>
c0011530:	83 ec 0c             	sub    esp,0xc
c0011533:	56                   	push   esi
c0011534:	e8 1d a0 ff ff       	call   c000b556 <Directory::open()>
c0011539:	83 c4 10             	add    esp,0x10
c001153c:	85 c0                	test   eax,eax
c001153e:	75 21                	jne    c0011561 <SysOpenDir(regs*)+0x6d>
c0011540:	83 ec 0c             	sub    esp,0xc
c0011543:	56                   	push   esi
c0011544:	e8 7d 7c ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011549:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001154c:	83 c4 10             	add    esp,0x10
c001154f:	89 02                	mov    DWORD PTR [edx],eax
c0011551:	c1 f8 1f             	sar    eax,0x1f
c0011554:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011557:	83 c4 04             	add    esp,0x4
c001155a:	31 c0                	xor    eax,eax
c001155c:	31 d2                	xor    edx,edx
c001155e:	5b                   	pop    ebx
c001155f:	5e                   	pop    esi
c0011560:	c3                   	ret    
c0011561:	83 c4 04             	add    esp,0x4
c0011564:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011569:	ba ff ff ff ff       	mov    edx,0xffffffff
c001156e:	5b                   	pop    ebx
c001156f:	5e                   	pop    esi
c0011570:	c3                   	ret    

c0011571 <SysMakeDir(regs*)>:
c0011571:	56                   	push   esi
c0011572:	53                   	push   ebx
c0011573:	83 ec 10             	sub    esp,0x10
c0011576:	68 14 01 00 00       	push   0x114
c001157b:	e8 2e 65 ff ff       	call   c0007aae <malloc>
c0011580:	83 c4 0c             	add    esp,0xc
c0011583:	89 c3                	mov    ebx,eax
c0011585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001158a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001158d:	50                   	push   eax
c001158e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011592:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011595:	52                   	push   edx
c0011596:	53                   	push   ebx
c0011597:	e8 fe 9e ff ff       	call   c000b49a <Directory::Directory(char const*, Process*)>
c001159c:	83 c4 10             	add    esp,0x10
c001159f:	85 db                	test   ebx,ebx
c00115a1:	74 2c                	je     c00115cf <SysMakeDir(regs*)+0x5e>
c00115a3:	83 ec 0c             	sub    esp,0xc
c00115a6:	53                   	push   ebx
c00115a7:	e8 8a a1 ff ff       	call   c000b736 <Directory::create()>
c00115ac:	89 c6                	mov    esi,eax
c00115ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115b6:	83 c4 10             	add    esp,0x10
c00115b9:	31 c0                	xor    eax,eax
c00115bb:	85 f6                	test   esi,esi
c00115bd:	0f 95 c0             	setne  al
c00115c0:	31 d2                	xor    edx,edx
c00115c2:	f7 d8                	neg    eax
c00115c4:	83 d2 00             	adc    edx,0x0
c00115c7:	83 c4 04             	add    esp,0x4
c00115ca:	f7 da                	neg    edx
c00115cc:	5b                   	pop    ebx
c00115cd:	5e                   	pop    esi
c00115ce:	c3                   	ret    
c00115cf:	83 c4 04             	add    esp,0x4
c00115d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115dc:	5b                   	pop    ebx
c00115dd:	5e                   	pop    esi
c00115de:	c3                   	ret    

c00115df <SysCloseDir(regs*)>:
c00115df:	53                   	push   ebx
c00115e0:	83 ec 08             	sub    esp,0x8
c00115e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115e7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00115ea:	8d 50 fd             	lea    edx,[eax-0x3]
c00115ed:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115f3:	77 2f                	ja     c0011624 <SysCloseDir(regs*)+0x45>
c00115f5:	83 ec 0c             	sub    esp,0xc
c00115f8:	50                   	push   eax
c00115f9:	e8 c5 7e ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00115fe:	89 c3                	mov    ebx,eax
c0011600:	89 04 24             	mov    DWORD PTR [esp],eax
c0011603:	e8 aa 9f ff ff       	call   c000b5b2 <Directory::close()>
c0011608:	83 c4 10             	add    esp,0x10
c001160b:	85 db                	test   ebx,ebx
c001160d:	74 0c                	je     c001161b <SysCloseDir(regs*)+0x3c>
c001160f:	83 ec 0c             	sub    esp,0xc
c0011612:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011614:	53                   	push   ebx
c0011615:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011618:	83 c4 10             	add    esp,0x10
c001161b:	31 c0                	xor    eax,eax
c001161d:	31 d2                	xor    edx,edx
c001161f:	83 c4 08             	add    esp,0x8
c0011622:	5b                   	pop    ebx
c0011623:	c3                   	ret    
c0011624:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011629:	ba ff ff ff ff       	mov    edx,0xffffffff
c001162e:	83 c4 08             	add    esp,0x8
c0011631:	5b                   	pop    ebx
c0011632:	c3                   	ret    

c0011633 <SysWait(regs*)>:
c0011633:	83 ec 10             	sub    esp,0x10
c0011636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001163a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001163d:	52                   	push   edx
c001163e:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011641:	51                   	push   ecx
c0011642:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011645:	50                   	push   eax
c0011646:	e8 d5 3c 00 00       	call   c0015320 <waitTask(int, int*, int)>
c001164b:	83 c4 1c             	add    esp,0x1c
c001164e:	89 c2                	mov    edx,eax
c0011650:	c1 fa 1f             	sar    edx,0x1f
c0011653:	c3                   	ret    

c0011654 <SysNotImpl(regs*)>:
c0011654:	83 ec 18             	sub    esp,0x18
c0011657:	68 36 0e 02 c0       	push   0xc0020e36
c001165c:	e8 be f2 ff ff       	call   c001091f <KePanic(char const*)>
c0011661:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011666:	ba ff ff ff ff       	mov    edx,0xffffffff
c001166b:	83 c4 1c             	add    esp,0x1c
c001166e:	c3                   	ret    

c001166f <SysPanic(regs*)>:
c001166f:	83 ec 18             	sub    esp,0x18
c0011672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011676:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011679:	50                   	push   eax
c001167a:	e8 a0 f2 ff ff       	call   c001091f <KePanic(char const*)>
c001167f:	b8 01 00 00 00       	mov    eax,0x1
c0011684:	31 d2                	xor    edx,edx
c0011686:	83 c4 1c             	add    esp,0x1c
c0011689:	c3                   	ret    

c001168a <SysRmdir(regs*)>:
c001168a:	56                   	push   esi
c001168b:	53                   	push   ebx
c001168c:	83 ec 20             	sub    esp,0x20
c001168f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011693:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011696:	68 14 01 00 00       	push   0x114
c001169b:	e8 0e 64 ff ff       	call   c0007aae <malloc>
c00116a0:	83 c4 0c             	add    esp,0xc
c00116a3:	89 c3                	mov    ebx,eax
c00116a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116ad:	50                   	push   eax
c00116ae:	56                   	push   esi
c00116af:	53                   	push   ebx
c00116b0:	e8 bf 98 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c00116b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b8:	e8 eb 9a ff ff       	call   c000b1a8 <File::unlink()>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	85 db                	test   ebx,ebx
c00116c2:	74 14                	je     c00116d8 <SysRmdir(regs*)+0x4e>
c00116c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116c8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00116ca:	83 ec 0c             	sub    esp,0xc
c00116cd:	53                   	push   ebx
c00116ce:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00116d1:	83 c4 10             	add    esp,0x10
c00116d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116d8:	85 c0                	test   eax,eax
c00116da:	0f 95 c0             	setne  al
c00116dd:	31 d2                	xor    edx,edx
c00116df:	0f b6 c0             	movzx  eax,al
c00116e2:	f7 d8                	neg    eax
c00116e4:	83 d2 00             	adc    edx,0x0
c00116e7:	83 c4 14             	add    esp,0x14
c00116ea:	f7 da                	neg    edx
c00116ec:	5b                   	pop    ebx
c00116ed:	5e                   	pop    esi
c00116ee:	c3                   	ret    

c00116ef <SysUnlink(regs*)>:
c00116ef:	56                   	push   esi
c00116f0:	53                   	push   ebx
c00116f1:	83 ec 20             	sub    esp,0x20
c00116f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00116f8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00116fb:	68 14 01 00 00       	push   0x114
c0011700:	e8 a9 63 ff ff       	call   c0007aae <malloc>
c0011705:	83 c4 0c             	add    esp,0xc
c0011708:	89 c3                	mov    ebx,eax
c001170a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001170f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011712:	50                   	push   eax
c0011713:	56                   	push   esi
c0011714:	53                   	push   ebx
c0011715:	e8 5a 98 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c001171a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001171d:	e8 86 9a ff ff       	call   c000b1a8 <File::unlink()>
c0011722:	83 c4 10             	add    esp,0x10
c0011725:	85 db                	test   ebx,ebx
c0011727:	74 14                	je     c001173d <SysUnlink(regs*)+0x4e>
c0011729:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001172f:	83 ec 0c             	sub    esp,0xc
c0011732:	53                   	push   ebx
c0011733:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011736:	83 c4 10             	add    esp,0x10
c0011739:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001173d:	85 c0                	test   eax,eax
c001173f:	0f 95 c0             	setne  al
c0011742:	31 d2                	xor    edx,edx
c0011744:	0f b6 c0             	movzx  eax,al
c0011747:	f7 d8                	neg    eax
c0011749:	83 d2 00             	adc    edx,0x0
c001174c:	83 c4 14             	add    esp,0x14
c001174f:	f7 da                	neg    edx
c0011751:	5b                   	pop    ebx
c0011752:	5e                   	pop    esi
c0011753:	c3                   	ret    

c0011754 <SysGetArgv(regs*)>:
c0011754:	83 ec 0c             	sub    esp,0xc
c0011757:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001175b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001175e:	85 c0                	test   eax,eax
c0011760:	78 2c                	js     c001178e <SysGetArgv(regs*)+0x3a>
c0011762:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011768:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001176b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011771:	7d 1b                	jge    c001178e <SysGetArgv(regs*)+0x3a>
c0011773:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001177a:	85 c0                	test   eax,eax
c001177c:	74 18                	je     c0011796 <SysGetArgv(regs*)+0x42>
c001177e:	83 ec 08             	sub    esp,0x8
c0011781:	50                   	push   eax
c0011782:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011785:	50                   	push   eax
c0011786:	e8 b5 ee fe ff       	call   c0000640 <strcpy>
c001178b:	83 c4 10             	add    esp,0x10
c001178e:	31 c0                	xor    eax,eax
c0011790:	31 d2                	xor    edx,edx
c0011792:	83 c4 0c             	add    esp,0xc
c0011795:	c3                   	ret    
c0011796:	b8 01 00 00 00       	mov    eax,0x1
c001179b:	31 d2                	xor    edx,edx
c001179d:	83 c4 0c             	add    esp,0xc
c00117a0:	c3                   	ret    

c00117a1 <SysUSleep(regs*)>:
c00117a1:	83 ec 1c             	sub    esp,0x1c
c00117a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00117a8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00117ab:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00117ae:	6a 00                	push   0x0
c00117b0:	6a 64                	push   0x64
c00117b2:	52                   	push   edx
c00117b3:	50                   	push   eax
c00117b4:	e8 b7 ce 00 00       	call   c001e670 <__udivdi3>
c00117b9:	83 c4 14             	add    esp,0x14
c00117bc:	50                   	push   eax
c00117bd:	e8 42 3c 00 00       	call   c0015404 <milliTenthSleep(unsigned int)>
c00117c2:	31 c0                	xor    eax,eax
c00117c4:	31 d2                	xor    edx,edx
c00117c6:	83 c4 1c             	add    esp,0x1c
c00117c9:	c3                   	ret    

c00117ca <SysSpawn(regs*)>:
c00117ca:	56                   	push   esi
c00117cb:	53                   	push   ebx
c00117cc:	83 ec 04             	sub    esp,0x4
c00117cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117d3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00117d6:	85 f6                	test   esi,esi
c00117d8:	75 0a                	jne    c00117e4 <SysSpawn(regs*)+0x1a>
c00117da:	83 c4 04             	add    esp,0x4
c00117dd:	31 c0                	xor    eax,eax
c00117df:	31 d2                	xor    edx,edx
c00117e1:	5b                   	pop    ebx
c00117e2:	5e                   	pop    esi
c00117e3:	c3                   	ret    
c00117e4:	83 ec 0c             	sub    esp,0xc
c00117e7:	68 24 07 00 00       	push   0x724
c00117ec:	e8 bd 62 ff ff       	call   c0007aae <malloc>
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117f7:	89 c6                	mov    esi,eax
c00117f9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117fc:	85 c9                	test   ecx,ecx
c00117fe:	75 39                	jne    c0011839 <SysSpawn(regs*)+0x6f>
c0011800:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011805:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011808:	52                   	push   edx
c0011809:	50                   	push   eax
c001180a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001180d:	50                   	push   eax
c001180e:	56                   	push   esi
c001180f:	e8 40 32 00 00       	call   c0014a54 <Process::Process(char const*, Process*, char**)>
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001181e:	75 ba                	jne    c00117da <SysSpawn(regs*)+0x10>
c0011820:	83 ec 0c             	sub    esp,0xc
c0011823:	56                   	push   esi
c0011824:	e8 67 37 00 00       	call   c0014f90 <Process::createUserThread()>
c0011829:	8b 06                	mov    eax,DWORD PTR [esi]
c001182b:	83 c4 10             	add    esp,0x10
c001182e:	89 c2                	mov    edx,eax
c0011830:	83 c4 04             	add    esp,0x4
c0011833:	c1 fa 1f             	sar    edx,0x1f
c0011836:	5b                   	pop    ebx
c0011837:	5e                   	pop    esi
c0011838:	c3                   	ret    
c0011839:	31 c0                	xor    eax,eax
c001183b:	eb cb                	jmp    c0011808 <SysSpawn(regs*)+0x3e>

c001183d <SysGetEnv(regs*)>:
c001183d:	57                   	push   edi
c001183e:	56                   	push   esi
c001183f:	53                   	push   ebx
c0011840:	83 ec 1c             	sub    esp,0x1c
c0011843:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011847:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001184c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001184f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011852:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011855:	51                   	push   ecx
c0011856:	e8 7c ef ff ff       	call   c00107d7 <Krnl::getProcessTotalEnvCount(Process*)>
c001185b:	83 c4 10             	add    esp,0x10
c001185e:	39 c7                	cmp    edi,eax
c0011860:	7c 14                	jl     c0011876 <SysGetEnv(regs*)+0x39>
c0011862:	85 f6                	test   esi,esi
c0011864:	75 0b                	jne    c0011871 <SysGetEnv(regs*)+0x34>
c0011866:	83 c4 10             	add    esp,0x10
c0011869:	31 c0                	xor    eax,eax
c001186b:	5b                   	pop    ebx
c001186c:	31 d2                	xor    edx,edx
c001186e:	5e                   	pop    esi
c001186f:	5f                   	pop    edi
c0011870:	c3                   	ret    
c0011871:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011874:	eb f0                	jmp    c0011866 <SysGetEnv(regs*)+0x29>
c0011876:	8d 44 24 08          	lea    eax,[esp+0x8]
c001187a:	83 ec 04             	sub    esp,0x4
c001187d:	57                   	push   edi
c001187e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011884:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011887:	57                   	push   edi
c0011888:	50                   	push   eax
c0011889:	e8 69 ef ff ff       	call   c00107f7 <Krnl::getProcessEnvPair(Process*, int)>
c001188e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011891:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011895:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011899:	83 c4 0c             	add    esp,0xc
c001189c:	85 d2                	test   edx,edx
c001189e:	75 23                	jne    c00118c3 <SysGetEnv(regs*)+0x86>
c00118a0:	83 ec 0c             	sub    esp,0xc
c00118a3:	50                   	push   eax
c00118a4:	e8 c7 ec fe ff       	call   c0000570 <strlen>
c00118a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118ac:	89 c3                	mov    ebx,eax
c00118ae:	e8 bd ec fe ff       	call   c0000570 <strlen>
c00118b3:	83 c4 10             	add    esp,0x10
c00118b6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00118ba:	83 c4 10             	add    esp,0x10
c00118bd:	31 d2                	xor    edx,edx
c00118bf:	5b                   	pop    ebx
c00118c0:	5e                   	pop    esi
c00118c1:	5f                   	pop    edi
c00118c2:	c3                   	ret    
c00118c3:	83 ec 08             	sub    esp,0x8
c00118c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00118c9:	50                   	push   eax
c00118ca:	56                   	push   esi
c00118cb:	e8 70 ed fe ff       	call   c0000640 <strcpy>
c00118d0:	58                   	pop    eax
c00118d1:	5a                   	pop    edx
c00118d2:	68 50 0e 02 c0       	push   0xc0020e50
c00118d7:	56                   	push   esi
c00118d8:	e8 63 ef fe ff       	call   c0000840 <strcat>
c00118dd:	59                   	pop    ecx
c00118de:	5b                   	pop    ebx
c00118df:	57                   	push   edi
c00118e0:	56                   	push   esi
c00118e1:	e8 5a ef fe ff       	call   c0000840 <strcat>
c00118e6:	83 c4 10             	add    esp,0x10
c00118e9:	e9 78 ff ff ff       	jmp    c0011866 <SysGetEnv(regs*)+0x29>

c00118ee <SysSetFatAttrib(regs*)>:
c00118ee:	57                   	push   edi
c00118ef:	56                   	push   esi
c00118f0:	53                   	push   ebx
c00118f1:	83 ec 1c             	sub    esp,0x1c
c00118f4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00118f8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00118fb:	68 14 01 00 00       	push   0x114
c0011900:	e8 a9 61 ff ff       	call   c0007aae <malloc>
c0011905:	83 c4 0c             	add    esp,0xc
c0011908:	89 c3                	mov    ebx,eax
c001190a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001190f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011912:	50                   	push   eax
c0011913:	57                   	push   edi
c0011914:	53                   	push   ebx
c0011915:	e8 5a 96 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c001191a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001191d:	83 c4 0c             	add    esp,0xc
c0011920:	0f b6 d4             	movzx  edx,ah
c0011923:	0f b6 c0             	movzx  eax,al
c0011926:	52                   	push   edx
c0011927:	50                   	push   eax
c0011928:	53                   	push   ebx
c0011929:	e8 14 99 ff ff       	call   c000b242 <File::chfatattr(unsigned char, unsigned char)>
c001192e:	83 c4 10             	add    esp,0x10
c0011931:	85 db                	test   ebx,ebx
c0011933:	74 14                	je     c0011949 <SysSetFatAttrib(regs*)+0x5b>
c0011935:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011939:	8b 13                	mov    edx,DWORD PTR [ebx]
c001193b:	83 ec 0c             	sub    esp,0xc
c001193e:	53                   	push   ebx
c001193f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011949:	85 c0                	test   eax,eax
c001194b:	0f 95 c0             	setne  al
c001194e:	31 d2                	xor    edx,edx
c0011950:	0f b6 c0             	movzx  eax,al
c0011953:	f7 d8                	neg    eax
c0011955:	83 d2 00             	adc    edx,0x0
c0011958:	83 c4 10             	add    esp,0x10
c001195b:	f7 da                	neg    edx
c001195d:	5b                   	pop    ebx
c001195e:	5e                   	pop    esi
c001195f:	5f                   	pop    edi
c0011960:	c3                   	ret    

c0011961 <SysPipe(regs*)>:
c0011961:	57                   	push   edi
c0011962:	56                   	push   esi
c0011963:	53                   	push   ebx
c0011964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011968:	83 ec 0c             	sub    esp,0xc
c001196b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001196e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011971:	6a 20                	push   0x20
c0011973:	e8 36 61 ff ff       	call   c0007aae <malloc>
c0011978:	89 c3                	mov    ebx,eax
c001197a:	58                   	pop    eax
c001197b:	5a                   	pop    edx
c001197c:	68 00 50 00 00       	push   0x5000
c0011981:	53                   	push   ebx
c0011982:	e8 8b 6a ff ff       	call   c0008412 <Pipe::Pipe(int)>
c0011987:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001198a:	e8 37 78 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c001198f:	89 07                	mov    DWORD PTR [edi],eax
c0011991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011994:	e8 2d 78 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	89 06                	mov    DWORD PTR [esi],eax
c001199e:	31 d2                	xor    edx,edx
c00119a0:	5b                   	pop    ebx
c00119a1:	31 c0                	xor    eax,eax
c00119a3:	5e                   	pop    esi
c00119a4:	5f                   	pop    edi
c00119a5:	c3                   	ret    

c00119a6 <SysGetUnixTime(regs*)>:
c00119a6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00119ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00119b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119b5:	e9 c0 9f ff ff       	jmp    c000b97a <Clock::timeInSecondsLocal()>

c00119ba <string_ends_with(char const*, char const*)>:
c00119ba:	57                   	push   edi
c00119bb:	56                   	push   esi
c00119bc:	53                   	push   ebx
c00119bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119c1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00119c5:	83 ec 0c             	sub    esp,0xc
c00119c8:	53                   	push   ebx
c00119c9:	e8 a2 eb fe ff       	call   c0000570 <strlen>
c00119ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119d1:	89 c6                	mov    esi,eax
c00119d3:	e8 98 eb fe ff       	call   c0000570 <strlen>
c00119d8:	83 c4 10             	add    esp,0x10
c00119db:	39 c6                	cmp    esi,eax
c00119dd:	7d 06                	jge    c00119e5 <string_ends_with(char const*, char const*)+0x2b>
c00119df:	5b                   	pop    ebx
c00119e0:	31 c0                	xor    eax,eax
c00119e2:	5e                   	pop    esi
c00119e3:	5f                   	pop    edi
c00119e4:	c3                   	ret    
c00119e5:	83 ec 08             	sub    esp,0x8
c00119e8:	29 c6                	sub    esi,eax
c00119ea:	57                   	push   edi
c00119eb:	01 f3                	add    ebx,esi
c00119ed:	53                   	push   ebx
c00119ee:	e8 5d ed fe ff       	call   c0000750 <strcmp>
c00119f3:	83 c4 10             	add    esp,0x10
c00119f6:	85 c0                	test   eax,eax
c00119f8:	5b                   	pop    ebx
c00119f9:	0f 94 c0             	sete   al
c00119fc:	5e                   	pop    esi
c00119fd:	0f b6 c0             	movzx  eax,al
c0011a00:	5f                   	pop    edi
c0011a01:	c3                   	ret    

c0011a02 <SysOpen(regs*)>:
c0011a02:	56                   	push   esi
c0011a03:	53                   	push   ebx
c0011a04:	81 ec 04 01 00 00    	sub    esp,0x104
c0011a0a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011a11:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a14:	85 c0                	test   eax,eax
c0011a16:	0f 84 bd 01 00 00    	je     c0011bd9 <SysOpen(regs*)+0x1d7>
c0011a1c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a1f:	85 c0                	test   eax,eax
c0011a21:	0f 84 b2 01 00 00    	je     c0011bd9 <SysOpen(regs*)+0x1d7>
c0011a27:	83 ec 04             	sub    esp,0x4
c0011a2a:	68 52 0e 02 c0       	push   0xc0020e52
c0011a2f:	50                   	push   eax
c0011a30:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011a34:	56                   	push   esi
c0011a35:	e8 84 93 ff ff       	call   c000adbe <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a3a:	89 34 24             	mov    DWORD PTR [esp],esi
c0011a3d:	e8 2e eb fe ff       	call   c0000570 <strlen>
c0011a42:	83 c4 10             	add    esp,0x10
c0011a45:	83 e8 01             	sub    eax,0x1
c0011a48:	74 21                	je     c0011a6b <SysOpen(regs*)+0x69>
c0011a4a:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011a4e:	eb 12                	jmp    c0011a62 <SysOpen(regs*)+0x60>
c0011a50:	83 fa 3a             	cmp    edx,0x3a
c0011a53:	74 12                	je     c0011a67 <SysOpen(regs*)+0x65>
c0011a55:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011a59:	83 e8 01             	sub    eax,0x1
c0011a5c:	74 0d                	je     c0011a6b <SysOpen(regs*)+0x69>
c0011a5e:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011a62:	83 fa 2e             	cmp    edx,0x2e
c0011a65:	75 e9                	jne    c0011a50 <SysOpen(regs*)+0x4e>
c0011a67:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011a6b:	83 ec 08             	sub    esp,0x8
c0011a6e:	68 56 0e 02 c0       	push   0xc0020e56
c0011a73:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a76:	50                   	push   eax
c0011a77:	e8 3e ff ff ff       	call   c00119ba <string_ends_with(char const*, char const*)>
c0011a7c:	83 c4 10             	add    esp,0x10
c0011a7f:	85 c0                	test   eax,eax
c0011a81:	74 1d                	je     c0011aa0 <SysOpen(regs*)+0x9e>
c0011a83:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a86:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011a8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a93:	81 c4 04 01 00 00    	add    esp,0x104
c0011a99:	31 c0                	xor    eax,eax
c0011a9b:	31 d2                	xor    edx,edx
c0011a9d:	5b                   	pop    ebx
c0011a9e:	5e                   	pop    esi
c0011a9f:	c3                   	ret    
c0011aa0:	83 ec 08             	sub    esp,0x8
c0011aa3:	68 5b 0e 02 c0       	push   0xc0020e5b
c0011aa8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011aab:	50                   	push   eax
c0011aac:	e8 09 ff ff ff       	call   c00119ba <string_ends_with(char const*, char const*)>
c0011ab1:	83 c4 10             	add    esp,0x10
c0011ab4:	85 c0                	test   eax,eax
c0011ab6:	75 cb                	jne    c0011a83 <SysOpen(regs*)+0x81>
c0011ab8:	83 ec 08             	sub    esp,0x8
c0011abb:	68 57 0e 02 c0       	push   0xc0020e57
c0011ac0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ac3:	50                   	push   eax
c0011ac4:	e8 87 ec fe ff       	call   c0000750 <strcmp>
c0011ac9:	83 c4 10             	add    esp,0x10
c0011acc:	85 c0                	test   eax,eax
c0011ace:	74 b3                	je     c0011a83 <SysOpen(regs*)+0x81>
c0011ad0:	83 ec 08             	sub    esp,0x8
c0011ad3:	68 56 0e 02 c0       	push   0xc0020e56
c0011ad8:	56                   	push   esi
c0011ad9:	e8 dc fe ff ff       	call   c00119ba <string_ends_with(char const*, char const*)>
c0011ade:	83 c4 10             	add    esp,0x10
c0011ae1:	85 c0                	test   eax,eax
c0011ae3:	75 9e                	jne    c0011a83 <SysOpen(regs*)+0x81>
c0011ae5:	83 ec 08             	sub    esp,0x8
c0011ae8:	68 60 0e 02 c0       	push   0xc0020e60
c0011aed:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011af0:	50                   	push   eax
c0011af1:	e8 c4 fe ff ff       	call   c00119ba <string_ends_with(char const*, char const*)>
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	85 c0                	test   eax,eax
c0011afb:	0f 85 eb 00 00 00    	jne    c0011bec <SysOpen(regs*)+0x1ea>
c0011b01:	83 ec 08             	sub    esp,0x8
c0011b04:	68 65 0e 02 c0       	push   0xc0020e65
c0011b09:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011b0c:	50                   	push   eax
c0011b0d:	e8 a8 fe ff ff       	call   c00119ba <string_ends_with(char const*, char const*)>
c0011b12:	83 c4 10             	add    esp,0x10
c0011b15:	85 c0                	test   eax,eax
c0011b17:	0f 85 cf 00 00 00    	jne    c0011bec <SysOpen(regs*)+0x1ea>
c0011b1d:	83 ec 08             	sub    esp,0x8
c0011b20:	68 61 0e 02 c0       	push   0xc0020e61
c0011b25:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011b28:	51                   	push   ecx
c0011b29:	e8 22 ec fe ff       	call   c0000750 <strcmp>
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	85 c0                	test   eax,eax
c0011b33:	0f 84 b3 00 00 00    	je     c0011bec <SysOpen(regs*)+0x1ea>
c0011b39:	83 ec 08             	sub    esp,0x8
c0011b3c:	68 60 0e 02 c0       	push   0xc0020e60
c0011b41:	56                   	push   esi
c0011b42:	e8 73 fe ff ff       	call   c00119ba <string_ends_with(char const*, char const*)>
c0011b47:	83 c4 10             	add    esp,0x10
c0011b4a:	85 c0                	test   eax,eax
c0011b4c:	0f 85 9a 00 00 00    	jne    c0011bec <SysOpen(regs*)+0x1ea>
c0011b52:	83 ec 0c             	sub    esp,0xc
c0011b55:	68 14 01 00 00       	push   0x114
c0011b5a:	e8 4f 5f ff ff       	call   c0007aae <malloc>
c0011b5f:	83 c4 0c             	add    esp,0xc
c0011b62:	89 c6                	mov    esi,eax
c0011b64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b6c:	50                   	push   eax
c0011b6d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011b70:	52                   	push   edx
c0011b71:	56                   	push   esi
c0011b72:	e8 fd 93 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c0011b77:	83 c4 10             	add    esp,0x10
c0011b7a:	85 f6                	test   esi,esi
c0011b7c:	74 5b                	je     c0011bd9 <SysOpen(regs*)+0x1d7>
c0011b7e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b81:	0f b6 c2             	movzx  eax,dl
c0011b84:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011b87:	89 d0                	mov    eax,edx
c0011b89:	83 e0 01             	and    eax,0x1
c0011b8c:	f6 c2 02             	test   dl,0x2
c0011b8f:	74 03                	je     c0011b94 <SysOpen(regs*)+0x192>
c0011b91:	83 c8 02             	or     eax,0x2
c0011b94:	f6 c2 04             	test   dl,0x4
c0011b97:	74 03                	je     c0011b9c <SysOpen(regs*)+0x19a>
c0011b99:	83 c8 04             	or     eax,0x4
c0011b9c:	f6 c2 08             	test   dl,0x8
c0011b9f:	74 03                	je     c0011ba4 <SysOpen(regs*)+0x1a2>
c0011ba1:	83 c8 0a             	or     eax,0xa
c0011ba4:	80 e2 10             	and    dl,0x10
c0011ba7:	74 03                	je     c0011bac <SysOpen(regs*)+0x1aa>
c0011ba9:	83 c8 12             	or     eax,0x12
c0011bac:	83 ec 08             	sub    esp,0x8
c0011baf:	50                   	push   eax
c0011bb0:	56                   	push   esi
c0011bb1:	e8 7a 94 ff ff       	call   c000b030 <File::open(FileOpenMode)>
c0011bb6:	83 c4 10             	add    esp,0x10
c0011bb9:	85 c0                	test   eax,eax
c0011bbb:	75 1c                	jne    c0011bd9 <SysOpen(regs*)+0x1d7>
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	56                   	push   esi
c0011bc1:	e8 00 76 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011bc6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011bc9:	83 c4 10             	add    esp,0x10
c0011bcc:	89 02                	mov    DWORD PTR [edx],eax
c0011bce:	c1 f8 1f             	sar    eax,0x1f
c0011bd1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011bd4:	e9 ba fe ff ff       	jmp    c0011a93 <SysOpen(regs*)+0x91>
c0011bd9:	81 c4 04 01 00 00    	add    esp,0x104
c0011bdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011be4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011be9:	5b                   	pop    ebx
c0011bea:	5e                   	pop    esi
c0011beb:	c3                   	ret    
c0011bec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bef:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011bf5:	e9 92 fe ff ff       	jmp    c0011a8c <SysOpen(regs*)+0x8a>

c0011bfa <KeSystemCall(regs*, void*)>:
c0011bfa:	53                   	push   ebx
c0011bfb:	83 ec 08             	sub    esp,0x8
c0011bfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c02:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011c05:	83 f8 3b             	cmp    eax,0x3b
c0011c08:	77 16                	ja     c0011c20 <KeSystemCall(regs*, void*)+0x26>
c0011c0a:	8b 14 85 20 22 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddde0]
c0011c11:	85 d2                	test   edx,edx
c0011c13:	74 0b                	je     c0011c20 <KeSystemCall(regs*, void*)+0x26>
c0011c15:	83 ec 0c             	sub    esp,0xc
c0011c18:	53                   	push   ebx
c0011c19:	ff d2                	call   edx
c0011c1b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011c1e:	eb 0d                	jmp    c0011c2d <KeSystemCall(regs*, void*)+0x33>
c0011c20:	52                   	push   edx
c0011c21:	52                   	push   edx
c0011c22:	50                   	push   eax
c0011c23:	68 6a 0e 02 c0       	push   0xc0020e6a
c0011c28:	e8 c4 8d ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011c35:	31 d2                	xor    edx,edx
c0011c37:	83 c4 08             	add    esp,0x8
c0011c3a:	5b                   	pop    ebx
c0011c3b:	c3                   	ret    

c0011c3c <KeSwitchEndian16(unsigned short)>:
c0011c3c:	83 ec 04             	sub    esp,0x4
c0011c3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c43:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011c47:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c4b:	c1 f8 08             	sar    eax,0x8
c0011c4e:	89 c2                	mov    edx,eax
c0011c50:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c54:	c1 e0 08             	shl    eax,0x8
c0011c57:	09 d0                	or     eax,edx
c0011c59:	83 c4 04             	add    esp,0x4
c0011c5c:	c3                   	ret    
c0011c5d:	8d 76 00             	lea    esi,[esi+0x0]

c0011c60 <KeSwitchEndian32(unsigned int)>:
c0011c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c64:	c1 e8 18             	shr    eax,0x18
c0011c67:	89 c2                	mov    edx,eax
c0011c69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c6d:	c1 e0 08             	shl    eax,0x8
c0011c70:	25 00 00 ff 00       	and    eax,0xff0000
c0011c75:	09 c2                	or     edx,eax
c0011c77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c7b:	c1 e8 08             	shr    eax,0x8
c0011c7e:	25 00 ff 00 00       	and    eax,0xff00
c0011c83:	09 c2                	or     edx,eax
c0011c85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c89:	c1 e0 18             	shl    eax,0x18
c0011c8c:	09 d0                	or     eax,edx
c0011c8e:	c3                   	ret    
c0011c8f:	90                   	nop

c0011c90 <EthernetCRC32(unsigned char*, int)>:
c0011c90:	83 ec 10             	sub    esp,0x10
c0011c93:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011c98:	75 0a                	jne    c0011ca4 <EthernetCRC32(unsigned char*, int)+0x14>
c0011c9a:	b8 00 00 00 00       	mov    eax,0x0
c0011c9f:	e9 8c 00 00 00       	jmp    c0011d30 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011ca4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011ca9:	7f 09                	jg     c0011cb4 <EthernetCRC32(unsigned char*, int)+0x24>
c0011cab:	b8 00 00 00 00       	mov    eax,0x0
c0011cb0:	eb 7e                	jmp    c0011d30 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011cb2:	66 90                	xchg   ax,ax
c0011cb4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011cbc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011cc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cc8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011ccc:	7d 5a                	jge    c0011d28 <EthernetCRC32(unsigned char*, int)+0x98>
c0011cce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011cd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011cd6:	01 d0                	add    eax,edx
c0011cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0011cda:	0f b6 c0             	movzx  eax,al
c0011cdd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011ce1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0011cec:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011cf1:	7f 2d                	jg     c0011d20 <EthernetCRC32(unsigned char*, int)+0x90>
c0011cf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cf7:	83 e0 01             	and    eax,0x1
c0011cfa:	74 10                	je     c0011d0c <EthernetCRC32(unsigned char*, int)+0x7c>
c0011cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d00:	d1 e8                	shr    eax,1
c0011d02:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011d07:	eb 0b                	jmp    c0011d14 <EthernetCRC32(unsigned char*, int)+0x84>
c0011d09:	8d 76 00             	lea    esi,[esi+0x0]
c0011d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d10:	d1 e8                	shr    eax,1
c0011d12:	66 90                	xchg   ax,ax
c0011d14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d18:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011d1d:	eb cd                	jmp    c0011cec <EthernetCRC32(unsigned char*, int)+0x5c>
c0011d1f:	90                   	nop
c0011d20:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011d25:	eb 9d                	jmp    c0011cc4 <EthernetCRC32(unsigned char*, int)+0x34>
c0011d27:	90                   	nop
c0011d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d2c:	f7 d0                	not    eax
c0011d2e:	66 90                	xchg   ax,ax
c0011d30:	83 c4 10             	add    esp,0x10
c0011d33:	c3                   	ret    

c0011d34 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011d34:	83 ec 2c             	sub    esp,0x2c
c0011d37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d3b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011d40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d4f:	0f b7 c0             	movzx  eax,ax
c0011d52:	3d 06 08 00 00       	cmp    eax,0x806
c0011d57:	75 13                	jne    c0011d6c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011d59:	83 ec 0c             	sub    esp,0xc
c0011d5c:	68 7e 0e 02 c0       	push   0xc0020e7e
c0011d61:	e8 8b 8c ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0011d66:	83 c4 10             	add    esp,0x10
c0011d69:	eb 25                	jmp    c0011d90 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011d6b:	90                   	nop
c0011d6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d73:	0f b7 c0             	movzx  eax,ax
c0011d76:	3d 00 08 00 00       	cmp    eax,0x800
c0011d7b:	75 13                	jne    c0011d90 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011d7d:	83 ec 0c             	sub    esp,0xc
c0011d80:	68 94 0e 02 c0       	push   0xc0020e94
c0011d85:	e8 67 8c ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0011d8a:	83 c4 10             	add    esp,0x10
c0011d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0011d90:	90                   	nop
c0011d91:	83 c4 2c             	add    esp,0x2c
c0011d94:	c3                   	ret    

c0011d95 <CmOpen(char const*)>:
c0011d95:	57                   	push   edi
c0011d96:	56                   	push   esi
c0011d97:	53                   	push   ebx
c0011d98:	83 ec 1c             	sub    esp,0x1c
c0011d9b:	6a 30                	push   0x30
c0011d9d:	e8 0c 5d ff ff       	call   c0007aae <malloc>
c0011da2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011da9:	89 c3                	mov    ebx,eax
c0011dab:	e8 fe 5c ff ff       	call   c0007aae <malloc>
c0011db0:	83 c4 0c             	add    esp,0xc
c0011db3:	89 c6                	mov    esi,eax
c0011db5:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011dbb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011dbf:	50                   	push   eax
c0011dc0:	e8 af 91 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c0011dc5:	83 c4 0c             	add    esp,0xc
c0011dc8:	89 33                	mov    DWORD PTR [ebx],esi
c0011dca:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011dce:	50                   	push   eax
c0011dcf:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011dd3:	50                   	push   eax
c0011dd4:	56                   	push   esi
c0011dd5:	e8 02 95 ff ff       	call   c000b2dc <File::stat(unsigned long long*, bool*)>
c0011dda:	5a                   	pop    edx
c0011ddb:	59                   	pop    ecx
c0011ddc:	6a 01                	push   0x1
c0011dde:	ff 33                	push   DWORD PTR [ebx]
c0011de0:	e8 4b 92 ff ff       	call   c000b030 <File::open(FileOpenMode)>
c0011de5:	5e                   	pop    esi
c0011de6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011dea:	e8 bf 5c ff ff       	call   c0007aae <malloc>
c0011def:	5a                   	pop    edx
c0011df0:	89 c7                	mov    edi,eax
c0011df2:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011df6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011df8:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dfa:	56                   	push   esi
c0011dfb:	57                   	push   edi
c0011dfc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e04:	50                   	push   eax
c0011e05:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e08:	83 c4 14             	add    esp,0x14
c0011e0b:	ff 33                	push   DWORD PTR [ebx]
c0011e0d:	e8 7c 92 ff ff       	call   c000b08e <File::close()>
c0011e12:	59                   	pop    ecx
c0011e13:	58                   	pop    eax
c0011e14:	6a 13                	push   0x13
c0011e16:	ff 33                	push   DWORD PTR [ebx]
c0011e18:	e8 13 92 ff ff       	call   c000b030 <File::open(FileOpenMode)>
c0011e1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e21:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e24:	57                   	push   edi
c0011e25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e29:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e2d:	50                   	push   eax
c0011e2e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011e31:	83 c4 14             	add    esp,0x14
c0011e34:	57                   	push   edi
c0011e35:	e8 84 5c ff ff       	call   c0007abe <free>
c0011e3a:	83 c4 10             	add    esp,0x10
c0011e3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011e40:	75 10                	jne    c0011e52 <CmOpen(char const*)+0xbd>
c0011e42:	83 ec 0c             	sub    esp,0xc
c0011e45:	68 a9 0e 02 c0       	push   0xc0020ea9
c0011e4a:	e8 d0 ea ff ff       	call   c001091f <KePanic(char const*)>
c0011e4f:	83 c4 10             	add    esp,0x10
c0011e52:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011e55:	50                   	push   eax
c0011e56:	6a 00                	push   0x0
c0011e58:	6a 00                	push   0x0
c0011e5a:	ff 33                	push   DWORD PTR [ebx]
c0011e5c:	e8 8d 92 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0011e61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e63:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e65:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e68:	57                   	push   edi
c0011e69:	6a 00                	push   0x0
c0011e6b:	6a 2b                	push   0x2b
c0011e6d:	50                   	push   eax
c0011e6e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e71:	83 c4 1c             	add    esp,0x1c
c0011e74:	6a 00                	push   0x0
c0011e76:	6a 00                	push   0x0
c0011e78:	ff 33                	push   DWORD PTR [ebx]
c0011e7a:	e8 6f 92 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0011e7f:	83 c4 0c             	add    esp,0xc
c0011e82:	6a 08                	push   0x8
c0011e84:	68 ba 0e 02 c0       	push   0xc0020eba
c0011e89:	57                   	push   edi
c0011e8a:	e8 f1 e4 fe ff       	call   c0000380 <memcmp>
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	85 c0                	test   eax,eax
c0011e94:	74 10                	je     c0011ea6 <CmOpen(char const*)+0x111>
c0011e96:	83 ec 0c             	sub    esp,0xc
c0011e99:	68 c3 0e 02 c0       	push   0xc0020ec3
c0011e9e:	e8 7c ea ff ff       	call   c001091f <KePanic(char const*)>
c0011ea3:	83 c4 10             	add    esp,0x10
c0011ea6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011eaa:	89 d8                	mov    eax,ebx
c0011eac:	83 c4 10             	add    esp,0x10
c0011eaf:	5b                   	pop    ebx
c0011eb0:	5e                   	pop    esi
c0011eb1:	5f                   	pop    edi
c0011eb2:	c3                   	ret    

c0011eb3 <CmClose(Reghive_Tag*)>:
c0011eb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eb7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011ebb:	74 0b                	je     c0011ec8 <CmClose(Reghive_Tag*)+0x15>
c0011ebd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ebf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ec3:	e9 c6 91 ff ff       	jmp    c000b08e <File::close()>
c0011ec8:	c3                   	ret    

c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011ec9:	53                   	push   ebx
c0011eca:	83 ec 18             	sub    esp,0x18
c0011ecd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ed1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011ed5:	74 29                	je     c0011f00 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011ed7:	50                   	push   eax
c0011ed8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011edd:	99                   	cdq    
c0011ede:	52                   	push   edx
c0011edf:	50                   	push   eax
c0011ee0:	ff 33                	push   DWORD PTR [ebx]
c0011ee2:	e8 07 92 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0011ee7:	5a                   	pop    edx
c0011ee8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eea:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011eee:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ef0:	51                   	push   ecx
c0011ef1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011ef5:	6a 00                	push   0x0
c0011ef7:	6a 2b                	push   0x2b
c0011ef9:	50                   	push   eax
c0011efa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011efd:	83 c4 20             	add    esp,0x20
c0011f00:	83 c4 18             	add    esp,0x18
c0011f03:	5b                   	pop    ebx
c0011f04:	c3                   	ret    

c0011f05 <CmGetString(Reghive_Tag*, int, char*)>:
c0011f05:	55                   	push   ebp
c0011f06:	57                   	push   edi
c0011f07:	56                   	push   esi
c0011f08:	53                   	push   ebx
c0011f09:	31 db                	xor    ebx,ebx
c0011f0b:	83 ec 70             	sub    esp,0x70
c0011f0e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011f15:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011f19:	50                   	push   eax
c0011f1a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011f21:	55                   	push   ebp
c0011f22:	e8 a2 ff ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f27:	83 c4 10             	add    esp,0x10
c0011f2a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011f2f:	c1 e0 08             	shl    eax,0x8
c0011f32:	89 c2                	mov    edx,eax
c0011f34:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011f39:	09 d0                	or     eax,edx
c0011f3b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011f40:	c1 e0 08             	shl    eax,0x8
c0011f43:	09 d0                	or     eax,edx
c0011f45:	74 25                	je     c0011f6c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011f47:	6b fb 0d             	imul   edi,ebx,0xd
c0011f4a:	52                   	push   edx
c0011f4b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011f4f:	52                   	push   edx
c0011f50:	50                   	push   eax
c0011f51:	55                   	push   ebp
c0011f52:	e8 72 ff ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f57:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011f5b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011f62:	b9 27 00 00 00       	mov    ecx,0x27
c0011f67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f69:	83 c4 10             	add    esp,0x10
c0011f6c:	83 c3 03             	add    ebx,0x3
c0011f6f:	83 fb 15             	cmp    ebx,0x15
c0011f72:	75 b6                	jne    c0011f2a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011f74:	83 c4 6c             	add    esp,0x6c
c0011f77:	5b                   	pop    ebx
c0011f78:	5e                   	pop    esi
c0011f79:	5f                   	pop    edi
c0011f7a:	5d                   	pop    ebp
c0011f7b:	c3                   	ret    

c0011f7c <CmEnterDirectory(Reghive_Tag*, int)>:
c0011f7c:	83 ec 40             	sub    esp,0x40
c0011f7f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f83:	50                   	push   eax
c0011f84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f88:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f8c:	e8 38 ff ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f91:	83 c4 10             	add    esp,0x10
c0011f94:	83 c8 ff             	or     eax,0xffffffff
c0011f97:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011f9c:	75 19                	jne    c0011fb7 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011f9e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011fa3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011fa8:	c1 e0 08             	shl    eax,0x8
c0011fab:	09 c2                	or     edx,eax
c0011fad:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011fb2:	c1 e0 10             	shl    eax,0x10
c0011fb5:	09 d0                	or     eax,edx
c0011fb7:	83 c4 3c             	add    esp,0x3c
c0011fba:	c3                   	ret    

c0011fbb <CmGetNext(Reghive_Tag*, int)>:
c0011fbb:	83 ec 40             	sub    esp,0x40
c0011fbe:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011fc2:	50                   	push   eax
c0011fc3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fc7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fcb:	e8 f9 fe ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011fd0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011fd5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011fda:	c1 e0 08             	shl    eax,0x8
c0011fdd:	09 c2                	or     edx,eax
c0011fdf:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011fe4:	83 c4 4c             	add    esp,0x4c
c0011fe7:	c1 e0 10             	shl    eax,0x10
c0011fea:	09 d0                	or     eax,edx
c0011fec:	c3                   	ret    

c0011fed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011fed:	53                   	push   ebx
c0011fee:	83 ec 18             	sub    esp,0x18
c0011ff1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ff5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011ff9:	74 29                	je     c0012024 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011ffb:	50                   	push   eax
c0011ffc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012001:	99                   	cdq    
c0012002:	52                   	push   edx
c0012003:	50                   	push   eax
c0012004:	ff 33                	push   DWORD PTR [ebx]
c0012006:	e8 e3 90 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c001200b:	5a                   	pop    edx
c001200c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001200e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012012:	8b 10                	mov    edx,DWORD PTR [eax]
c0012014:	51                   	push   ecx
c0012015:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012019:	6a 00                	push   0x0
c001201b:	6a 2b                	push   0x2b
c001201d:	50                   	push   eax
c001201e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012021:	83 c4 20             	add    esp,0x20
c0012024:	83 c4 18             	add    esp,0x18
c0012027:	5b                   	pop    ebx
c0012028:	c3                   	ret    

c0012029 <CmFreeExtent(Reghive_Tag*, int)>:
c0012029:	53                   	push   ebx
c001202a:	83 ec 3c             	sub    esp,0x3c
c001202d:	6a 2b                	push   0x2b
c001202f:	6a 00                	push   0x0
c0012031:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012035:	53                   	push   ebx
c0012036:	e8 b5 e4 fe ff       	call   c00004f0 <memset>
c001203b:	83 c4 0c             	add    esp,0xc
c001203e:	53                   	push   ebx
c001203f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012043:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012047:	e8 a1 ff ff ff       	call   c0011fed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001204c:	83 c4 48             	add    esp,0x48
c001204f:	5b                   	pop    ebx
c0012050:	c3                   	ret    

c0012051 <CmUpdateHeader(Reghive_Tag*)>:
c0012051:	83 ec 0c             	sub    esp,0xc
c0012054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012058:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001205c:	74 10                	je     c001206e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001205e:	52                   	push   edx
c001205f:	8d 50 05             	lea    edx,[eax+0x5]
c0012062:	52                   	push   edx
c0012063:	6a 00                	push   0x0
c0012065:	50                   	push   eax
c0012066:	e8 82 ff ff ff       	call   c0011fed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	83 c4 0c             	add    esp,0xc
c0012071:	c3                   	ret    

c0012072 <CmExpand(Reghive_Tag*, int)>:
c0012072:	57                   	push   edi
c0012073:	56                   	push   esi
c0012074:	83 ce ff             	or     esi,0xffffffff
c0012077:	53                   	push   ebx
c0012078:	83 ec 30             	sub    esp,0x30
c001207b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001207f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012083:	74 5f                	je     c00120e4 <CmExpand(Reghive_Tag*, int)+0x72>
c0012085:	31 d2                	xor    edx,edx
c0012087:	31 f6                	xor    esi,esi
c0012089:	50                   	push   eax
c001208a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001208e:	52                   	push   edx
c001208f:	50                   	push   eax
c0012090:	ff 33                	push   DWORD PTR [ebx]
c0012092:	e8 57 90 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0012097:	83 c4 0c             	add    esp,0xc
c001209a:	6a 2b                	push   0x2b
c001209c:	6a 00                	push   0x0
c001209e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00120a2:	57                   	push   edi
c00120a3:	e8 48 e4 fe ff       	call   c00004f0 <memset>
c00120a8:	83 c4 10             	add    esp,0x10
c00120ab:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00120af:	7d 1b                	jge    c00120cc <CmExpand(Reghive_Tag*, int)+0x5a>
c00120b1:	83 ec 0c             	sub    esp,0xc
c00120b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120b6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00120ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00120bc:	46                   	inc    esi
c00120bd:	51                   	push   ecx
c00120be:	57                   	push   edi
c00120bf:	6a 00                	push   0x0
c00120c1:	6a 2b                	push   0x2b
c00120c3:	50                   	push   eax
c00120c4:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00120c7:	83 c4 20             	add    esp,0x20
c00120ca:	eb df                	jmp    c00120ab <CmExpand(Reghive_Tag*, int)+0x39>
c00120cc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00120d0:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00120d3:	83 ec 0c             	sub    esp,0xc
c00120d6:	01 f2                	add    edx,esi
c00120d8:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00120db:	53                   	push   ebx
c00120dc:	e8 70 ff ff ff       	call   c0012051 <CmUpdateHeader(Reghive_Tag*)>
c00120e1:	83 c4 10             	add    esp,0x10
c00120e4:	83 c4 30             	add    esp,0x30
c00120e7:	89 f0                	mov    eax,esi
c00120e9:	5b                   	pop    ebx
c00120ea:	5e                   	pop    esi
c00120eb:	5f                   	pop    edi
c00120ec:	c3                   	ret    

c00120ed <CmFindUnusedExtent(Reghive_Tag*)>:
c00120ed:	55                   	push   ebp
c00120ee:	57                   	push   edi
c00120ef:	56                   	push   esi
c00120f0:	53                   	push   ebx
c00120f1:	83 cb ff             	or     ebx,0xffffffff
c00120f4:	83 ec 1c             	sub    esp,0x1c
c00120f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00120fb:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00120ff:	74 68                	je     c0012169 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012101:	be 2b 00 00 00       	mov    esi,0x2b
c0012106:	51                   	push   ecx
c0012107:	31 ff                	xor    edi,edi
c0012109:	6a 00                	push   0x0
c001210b:	31 db                	xor    ebx,ebx
c001210d:	6a 00                	push   0x0
c001210f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012112:	e8 d7 8f ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0012117:	83 c4 10             	add    esp,0x10
c001211a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001211d:	76 3b                	jbe    c001215a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001211f:	83 ec 0c             	sub    esp,0xc
c0012122:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012125:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012129:	8b 10                	mov    edx,DWORD PTR [eax]
c001212b:	51                   	push   ecx
c001212c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012130:	51                   	push   ecx
c0012131:	6a 00                	push   0x0
c0012133:	6a 01                	push   0x1
c0012135:	50                   	push   eax
c0012136:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012139:	83 c4 20             	add    esp,0x20
c001213c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012141:	74 26                	je     c0012169 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012143:	43                   	inc    ebx
c0012144:	52                   	push   edx
c0012145:	57                   	push   edi
c0012146:	56                   	push   esi
c0012147:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001214a:	e8 9f 8f ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c001214f:	83 c6 2b             	add    esi,0x2b
c0012152:	83 d7 00             	adc    edi,0x0
c0012155:	83 c4 10             	add    esp,0x10
c0012158:	eb c0                	jmp    c001211a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001215a:	50                   	push   eax
c001215b:	50                   	push   eax
c001215c:	6a 40                	push   0x40
c001215e:	55                   	push   ebp
c001215f:	e8 0e ff ff ff       	call   c0012072 <CmExpand(Reghive_Tag*, int)>
c0012164:	83 c4 10             	add    esp,0x10
c0012167:	89 c3                	mov    ebx,eax
c0012169:	83 c4 1c             	add    esp,0x1c
c001216c:	89 d8                	mov    eax,ebx
c001216e:	5b                   	pop    ebx
c001216f:	5e                   	pop    esi
c0012170:	5f                   	pop    edi
c0012171:	5d                   	pop    ebp
c0012172:	c3                   	ret    

c0012173 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012173:	55                   	push   ebp
c0012174:	57                   	push   edi
c0012175:	56                   	push   esi
c0012176:	53                   	push   ebx
c0012177:	81 ec 88 00 00 00    	sub    esp,0x88
c001217d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012184:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001218b:	e8 5d ff ff ff       	call   c00120ed <CmFindUnusedExtent(Reghive_Tag*)>
c0012190:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012194:	83 c4 0c             	add    esp,0xc
c0012197:	6a 2b                	push   0x2b
c0012199:	6a 00                	push   0x0
c001219b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001219f:	55                   	push   ebp
c00121a0:	e8 4b e3 fe ff       	call   c00004f0 <memset>
c00121a5:	83 c4 10             	add    esp,0x10
c00121a8:	85 db                	test   ebx,ebx
c00121aa:	74 12                	je     c00121be <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00121ac:	51                   	push   ecx
c00121ad:	55                   	push   ebp
c00121ae:	53                   	push   ebx
c00121af:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121b6:	e8 0e fd ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121bb:	83 c4 10             	add    esp,0x10
c00121be:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00121c2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00121c9:	b9 2b 00 00 00       	mov    ecx,0x2b
c00121ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121d0:	85 db                	test   ebx,ebx
c00121d2:	74 49                	je     c001221d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00121d4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00121d9:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00121de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121e2:	c1 e0 08             	shl    eax,0x8
c00121e5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00121eb:	09 c8                	or     eax,ecx
c00121ed:	74 11                	je     c0012200 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00121ef:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00121f3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00121f7:	c1 e8 10             	shr    eax,0x10
c00121fa:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00121fe:	eb 0f                	jmp    c001220f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012200:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012205:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001220a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001220f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012213:	c1 ea 08             	shr    edx,0x8
c0012216:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001221b:	eb 0f                	jmp    c001222c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001221d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012222:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012227:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001222c:	52                   	push   edx
c001222d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012231:	50                   	push   eax
c0012232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012236:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001223d:	e8 ab fd ff ff       	call   c0011fed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012242:	83 c4 10             	add    esp,0x10
c0012245:	85 db                	test   ebx,ebx
c0012247:	74 12                	je     c001225b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012249:	50                   	push   eax
c001224a:	55                   	push   ebp
c001224b:	53                   	push   ebx
c001224c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012253:	e8 95 fd ff ff       	call   c0011fed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012258:	83 c4 10             	add    esp,0x10
c001225b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001225f:	83 c4 7c             	add    esp,0x7c
c0012262:	5b                   	pop    ebx
c0012263:	5e                   	pop    esi
c0012264:	5f                   	pop    edi
c0012265:	5d                   	pop    ebp
c0012266:	c3                   	ret    

c0012267 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012267:	55                   	push   ebp
c0012268:	57                   	push   edi
c0012269:	56                   	push   esi
c001226a:	53                   	push   ebx
c001226b:	bb 27 00 00 00       	mov    ebx,0x27
c0012270:	81 ec 88 00 00 00    	sub    esp,0x88
c0012276:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001227d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012284:	e8 e7 e2 fe ff       	call   c0000570 <strlen>
c0012289:	8d 48 26             	lea    ecx,[eax+0x26]
c001228c:	89 c8                	mov    eax,ecx
c001228e:	99                   	cdq    
c001228f:	f7 fb                	idiv   ebx
c0012291:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012295:	83 c4 10             	add    esp,0x10
c0012298:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001229e:	7e 10                	jle    c00122b0 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00122a0:	83 ec 0c             	sub    esp,0xc
c00122a3:	68 d4 0e 02 c0       	push   0xc0020ed4
c00122a8:	e8 72 e6 ff ff       	call   c001091f <KePanic(char const*)>
c00122ad:	83 c4 10             	add    esp,0x10
c00122b0:	31 ff                	xor    edi,edi
c00122b2:	50                   	push   eax
c00122b3:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00122b7:	53                   	push   ebx
c00122b8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122bf:	56                   	push   esi
c00122c0:	e8 04 fc ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00122c5:	83 c4 10             	add    esp,0x10
c00122c8:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00122cc:	89 d0                	mov    eax,edx
c00122ce:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00122d2:	c1 e0 08             	shl    eax,0x8
c00122d5:	09 c2                	or     edx,eax
c00122d7:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00122db:	c1 e2 08             	shl    edx,0x8
c00122de:	09 c2                	or     edx,eax
c00122e0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00122e4:	7e 76                	jle    c001235c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00122e6:	85 d2                	test   edx,edx
c00122e8:	75 25                	jne    c001230f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00122ea:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00122ef:	8d 44 24 45          	lea    eax,[esp+0x45]
c00122f3:	50                   	push   eax
c00122f4:	6a 00                	push   0x0
c00122f6:	6a 00                	push   0x0
c00122f8:	56                   	push   esi
c00122f9:	e8 75 fe ff ff       	call   c0012173 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00122fe:	83 c4 10             	add    esp,0x10
c0012301:	89 c2                	mov    edx,eax
c0012303:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012306:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012309:	c1 f8 10             	sar    eax,0x10
c001230c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001230f:	55                   	push   ebp
c0012310:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012314:	55                   	push   ebp
c0012315:	52                   	push   edx
c0012316:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001231a:	56                   	push   esi
c001231b:	e8 a9 fb ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012320:	83 c4 0c             	add    esp,0xc
c0012323:	6a 27                	push   0x27
c0012325:	6a 00                	push   0x0
c0012327:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001232b:	51                   	push   ecx
c001232c:	e8 bf e1 fe ff       	call   c00004f0 <memset>
c0012331:	83 c4 0c             	add    esp,0xc
c0012334:	6b c7 27             	imul   eax,edi,0x27
c0012337:	6a 27                	push   0x27
c0012339:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012340:	50                   	push   eax
c0012341:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012345:	51                   	push   ecx
c0012346:	e8 35 e3 fe ff       	call   c0000680 <strncpy>
c001234b:	83 c4 0c             	add    esp,0xc
c001234e:	55                   	push   ebp
c001234f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012353:	52                   	push   edx
c0012354:	56                   	push   esi
c0012355:	e8 93 fc ff ff       	call   c0011fed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001235a:	eb 19                	jmp    c0012375 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001235c:	85 d2                	test   edx,edx
c001235e:	74 18                	je     c0012378 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012360:	51                   	push   ecx
c0012361:	51                   	push   ecx
c0012362:	52                   	push   edx
c0012363:	56                   	push   esi
c0012364:	e8 c0 fc ff ff       	call   c0012029 <CmFreeExtent(Reghive_Tag*, int)>
c0012369:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001236d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012371:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012375:	83 c4 10             	add    esp,0x10
c0012378:	47                   	inc    edi
c0012379:	83 c3 03             	add    ebx,0x3
c001237c:	83 ff 07             	cmp    edi,0x7
c001237f:	0f 85 43 ff ff ff    	jne    c00122c8 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012385:	50                   	push   eax
c0012386:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001238a:	50                   	push   eax
c001238b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012392:	56                   	push   esi
c0012393:	e8 55 fc ff ff       	call   c0011fed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012398:	81 c4 8c 00 00 00    	add    esp,0x8c
c001239e:	5b                   	pop    ebx
c001239f:	5e                   	pop    esi
c00123a0:	5f                   	pop    edi
c00123a1:	5d                   	pop    ebp
c00123a2:	c3                   	ret    

c00123a3 <CmGetMatch(char*, char*, bool, bool*)>:
c00123a3:	56                   	push   esi
c00123a4:	53                   	push   ebx
c00123a5:	50                   	push   eax
c00123a6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00123aa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00123af:	74 25                	je     c00123d6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00123b1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123b4:	31 db                	xor    ebx,ebx
c00123b6:	50                   	push   eax
c00123b7:	50                   	push   eax
c00123b8:	8d 04 9d 20 23 02 c0 	lea    eax,[ebx*4-0x3ffddce0]
c00123bf:	50                   	push   eax
c00123c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123c4:	e8 87 e3 fe ff       	call   c0000750 <strcmp>
c00123c9:	83 c4 10             	add    esp,0x10
c00123cc:	85 c0                	test   eax,eax
c00123ce:	74 2e                	je     c00123fe <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123d0:	43                   	inc    ebx
c00123d1:	83 fb 3f             	cmp    ebx,0x3f
c00123d4:	75 e0                	jne    c00123b6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00123d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123d9:	31 db                	xor    ebx,ebx
c00123db:	8d 04 9d 20 23 02 c0 	lea    eax,[ebx*4-0x3ffddce0]
c00123e2:	51                   	push   ecx
c00123e3:	51                   	push   ecx
c00123e4:	50                   	push   eax
c00123e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123e9:	e8 62 e3 fe ff       	call   c0000750 <strcmp>
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	85 c0                	test   eax,eax
c00123f3:	74 09                	je     c00123fe <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123f5:	43                   	inc    ebx
c00123f6:	83 fb 3f             	cmp    ebx,0x3f
c00123f9:	75 e0                	jne    c00123db <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00123fb:	83 cb ff             	or     ebx,0xffffffff
c00123fe:	89 d8                	mov    eax,ebx
c0012400:	5a                   	pop    edx
c0012401:	5b                   	pop    ebx
c0012402:	5e                   	pop    esi
c0012403:	c3                   	ret    

c0012404 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012404:	55                   	push   ebp
c0012405:	31 c0                	xor    eax,eax
c0012407:	57                   	push   edi
c0012408:	56                   	push   esi
c0012409:	53                   	push   ebx
c001240a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001240e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012412:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012414:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012418:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001241b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001241f:	83 fd 1f             	cmp    ebp,0x1f
c0012422:	7f 0b                	jg     c001242f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012424:	0f b6 c2             	movzx  eax,dl
c0012427:	d3 e0                	shl    eax,cl
c0012429:	09 07                	or     DWORD PTR [edi],eax
c001242b:	b0 01                	mov    al,0x1
c001242d:	01 33                	add    DWORD PTR [ebx],esi
c001242f:	5b                   	pop    ebx
c0012430:	5e                   	pop    esi
c0012431:	5f                   	pop    edi
c0012432:	5d                   	pop    ebp
c0012433:	c3                   	ret    

c0012434 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012434:	57                   	push   edi
c0012435:	56                   	push   esi
c0012436:	53                   	push   ebx
c0012437:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001243b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001243f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012443:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012447:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012449:	7c 17                	jl     c0012462 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001244b:	8b 17                	mov    edx,DWORD PTR [edi]
c001244d:	b8 01 00 00 00       	mov    eax,0x1
c0012452:	d3 e0                	shl    eax,cl
c0012454:	48                   	dec    eax
c0012455:	21 d0                	and    eax,edx
c0012457:	d3 ea                	shr    edx,cl
c0012459:	89 17                	mov    DWORD PTR [edi],edx
c001245b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001245d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012460:	eb 05                	jmp    c0012467 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012462:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012465:	31 c0                	xor    eax,eax
c0012467:	5b                   	pop    ebx
c0012468:	5e                   	pop    esi
c0012469:	5f                   	pop    edi
c001246a:	c3                   	ret    

c001246b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001246b:	83 ec 40             	sub    esp,0x40
c001246e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012472:	50                   	push   eax
c0012473:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012477:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001247b:	e8 49 fa ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012480:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012484:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012488:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001248c:	89 10                	mov    DWORD PTR [eax],edx
c001248e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012491:	83 c4 4c             	add    esp,0x4c
c0012494:	c3                   	ret    

c0012495 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012495:	55                   	push   ebp
c0012496:	57                   	push   edi
c0012497:	56                   	push   esi
c0012498:	53                   	push   ebx
c0012499:	83 ec 40             	sub    esp,0x40
c001249c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00124a0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00124a4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00124a8:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00124ac:	53                   	push   ebx
c00124ad:	56                   	push   esi
c00124ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00124b2:	e8 12 fa ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124b7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00124bb:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00124bf:	83 c4 0c             	add    esp,0xc
c00124c2:	53                   	push   ebx
c00124c3:	56                   	push   esi
c00124c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00124c8:	e8 20 fb ff ff       	call   c0011fed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124cd:	83 c4 4c             	add    esp,0x4c
c00124d0:	5b                   	pop    ebx
c00124d1:	5e                   	pop    esi
c00124d2:	5f                   	pop    edi
c00124d3:	5d                   	pop    ebp
c00124d4:	c3                   	ret    

c00124d5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00124d5:	55                   	push   ebp
c00124d6:	57                   	push   edi
c00124d7:	56                   	push   esi
c00124d8:	31 f6                	xor    esi,esi
c00124da:	53                   	push   ebx
c00124db:	31 db                	xor    ebx,ebx
c00124dd:	83 ec 40             	sub    esp,0x40
c00124e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00124e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124f0:	6a 12                	push   0x12
c00124f2:	68 ee 00 00 00       	push   0xee
c00124f7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124fb:	e8 f0 df fe ff       	call   c00004f0 <memset>
c0012500:	83 c4 10             	add    esp,0x10
c0012503:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012507:	6a 08                	push   0x8
c0012509:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001250d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012511:	50                   	push   eax
c0012512:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012516:	55                   	push   ebp
c0012517:	57                   	push   edi
c0012518:	e8 e7 fe ff ff       	call   c0012404 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001251d:	83 c4 10             	add    esp,0x10
c0012520:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012524:	50                   	push   eax
c0012525:	6a 06                	push   0x6
c0012527:	55                   	push   ebp
c0012528:	57                   	push   edi
c0012529:	e8 06 ff ff ff       	call   c0012434 <CmGetShift(unsigned int*, int*, int, bool*)>
c001252e:	83 c4 10             	add    esp,0x10
c0012531:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012536:	74 07                	je     c001253f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012538:	46                   	inc    esi
c0012539:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001253d:	eb e1                	jmp    c0012520 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001253f:	43                   	inc    ebx
c0012540:	83 fb 12             	cmp    ebx,0x12
c0012543:	75 c2                	jne    c0012507 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012545:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012549:	31 db                	xor    ebx,ebx
c001254b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001254e:	50                   	push   eax
c001254f:	50                   	push   eax
c0012550:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012555:	43                   	inc    ebx
c0012556:	8d 04 85 20 23 02 c0 	lea    eax,[eax*4-0x3ffddce0]
c001255d:	50                   	push   eax
c001255e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012562:	e8 d9 e2 fe ff       	call   c0000840 <strcat>
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	83 fb 18             	cmp    ebx,0x18
c001256d:	75 df                	jne    c001254e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001256f:	83 c4 3c             	add    esp,0x3c
c0012572:	31 c0                	xor    eax,eax
c0012574:	5b                   	pop    ebx
c0012575:	5e                   	pop    esi
c0012576:	5f                   	pop    edi
c0012577:	5d                   	pop    ebp
c0012578:	c3                   	ret    

c0012579 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012579:	83 ec 40             	sub    esp,0x40
c001257c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012580:	50                   	push   eax
c0012581:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012585:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012589:	e8 3b f9 ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001258e:	58                   	pop    eax
c001258f:	5a                   	pop    edx
c0012590:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012594:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012598:	50                   	push   eax
c0012599:	e8 37 ff ff ff       	call   c00124d5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001259e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00125a3:	83 c4 4c             	add    esp,0x4c
c00125a6:	c3                   	ret    

c00125a7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00125a7:	55                   	push   ebp
c00125a8:	57                   	push   edi
c00125a9:	56                   	push   esi
c00125aa:	53                   	push   ebx
c00125ab:	31 db                	xor    ebx,ebx
c00125ad:	83 ec 70             	sub    esp,0x70
c00125b0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00125b7:	6a 30                	push   0x30
c00125b9:	6a 00                	push   0x0
c00125bb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00125bf:	56                   	push   esi
c00125c0:	e8 2b df fe ff       	call   c00004f0 <memset>
c00125c5:	83 c4 10             	add    esp,0x10
c00125c8:	83 ec 0c             	sub    esp,0xc
c00125cb:	57                   	push   edi
c00125cc:	e8 9f df fe ff       	call   c0000570 <strlen>
c00125d1:	83 c4 10             	add    esp,0x10
c00125d4:	39 d8                	cmp    eax,ebx
c00125d6:	76 16                	jbe    c00125ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00125d8:	83 ec 0c             	sub    esp,0xc
c00125db:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00125df:	50                   	push   eax
c00125e0:	e8 4b e3 fe ff       	call   c0000930 <toupper>
c00125e5:	83 c4 10             	add    esp,0x10
c00125e8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00125eb:	43                   	inc    ebx
c00125ec:	eb da                	jmp    c00125c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00125ee:	31 f6                	xor    esi,esi
c00125f0:	52                   	push   edx
c00125f1:	31 ff                	xor    edi,edi
c00125f3:	6a 18                	push   0x18
c00125f5:	6a 3f                	push   0x3f
c00125f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125fb:	50                   	push   eax
c00125fc:	e8 ef de fe ff       	call   c00004f0 <memset>
c0012601:	83 c4 10             	add    esp,0x10
c0012604:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012608:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001260c:	84 c0                	test   al,al
c001260e:	0f 84 b0 00 00 00    	je     c00126c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012614:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012618:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c001261d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012621:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012626:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012629:	83 ec 0c             	sub    esp,0xc
c001262c:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012630:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012634:	53                   	push   ebx
c0012635:	e8 36 df fe ff       	call   c0000570 <strlen>
c001263a:	83 c4 10             	add    esp,0x10
c001263d:	85 c0                	test   eax,eax
c001263f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012643:	74 0b                	je     c0012650 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012645:	50                   	push   eax
c0012646:	6a 01                	push   0x1
c0012648:	53                   	push   ebx
c0012649:	8d 44 24 20          	lea    eax,[esp+0x20]
c001264d:	50                   	push   eax
c001264e:	eb 0a                	jmp    c001265a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012650:	50                   	push   eax
c0012651:	6a 00                	push   0x0
c0012653:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012657:	50                   	push   eax
c0012658:	6a 00                	push   0x0
c001265a:	e8 44 fd ff ff       	call   c00123a3 <CmGetMatch(char*, char*, bool, bool*)>
c001265f:	83 c4 10             	add    esp,0x10
c0012662:	83 f8 ff             	cmp    eax,0xffffffff
c0012665:	75 1a                	jne    c0012681 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012667:	83 ec 0c             	sub    esp,0xc
c001266a:	68 e9 0e 02 c0       	push   0xc0020ee9
c001266f:	e8 ab e2 ff ff       	call   c001091f <KePanic(char const*)>
c0012674:	83 c4 10             	add    esp,0x10
c0012677:	b8 02 00 00 00       	mov    eax,0x2
c001267c:	e9 bc 00 00 00       	jmp    c001273d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012681:	83 ff 18             	cmp    edi,0x18
c0012684:	75 1a                	jne    c00126a0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012686:	83 ec 0c             	sub    esp,0xc
c0012689:	68 fe 0e 02 c0       	push   0xc0020efe
c001268e:	e8 8c e2 ff ff       	call   c001091f <KePanic(char const*)>
c0012693:	83 c4 10             	add    esp,0x10
c0012696:	b8 01 00 00 00       	mov    eax,0x1
c001269b:	e9 9d 00 00 00       	jmp    c001273d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00126a0:	47                   	inc    edi
c00126a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00126a6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00126aa:	74 02                	je     c00126ae <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00126ac:	89 ee                	mov    esi,ebp
c00126ae:	83 ec 0c             	sub    esp,0xc
c00126b1:	53                   	push   ebx
c00126b2:	e8 b9 de fe ff       	call   c0000570 <strlen>
c00126b7:	83 c4 10             	add    esp,0x10
c00126ba:	85 c0                	test   eax,eax
c00126bc:	74 06                	je     c00126c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00126be:	46                   	inc    esi
c00126bf:	e9 40 ff ff ff       	jmp    c0012604 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00126c4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00126cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126d4:	31 f6                	xor    esi,esi
c00126d6:	50                   	push   eax
c00126d7:	31 ff                	xor    edi,edi
c00126d9:	6a 12                	push   0x12
c00126db:	68 ee 00 00 00       	push   0xee
c00126e0:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00126e7:	e8 04 de fe ff       	call   c00004f0 <memset>
c00126ec:	83 c4 10             	add    esp,0x10
c00126ef:	83 fe 17             	cmp    esi,0x17
c00126f2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00126f6:	7e 26                	jle    c001271e <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00126f8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00126fc:	50                   	push   eax
c00126fd:	6a 08                	push   0x8
c00126ff:	55                   	push   ebp
c0012700:	53                   	push   ebx
c0012701:	e8 2e fd ff ff       	call   c0012434 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001270e:	74 26                	je     c0012736 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0012710:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012717:	4e                   	dec    esi
c0012718:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001271b:	47                   	inc    edi
c001271c:	eb 1c                	jmp    c001273a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001271e:	6a 06                	push   0x6
c0012720:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0012725:	50                   	push   eax
c0012726:	55                   	push   ebp
c0012727:	53                   	push   ebx
c0012728:	e8 d7 fc ff ff       	call   c0012404 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001272d:	83 c4 10             	add    esp,0x10
c0012730:	84 c0                	test   al,al
c0012732:	75 06                	jne    c001273a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012734:	eb c2                	jmp    c00126f8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0012736:	31 c0                	xor    eax,eax
c0012738:	eb 03                	jmp    c001273d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001273a:	46                   	inc    esi
c001273b:	eb b2                	jmp    c00126ef <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001273d:	83 c4 6c             	add    esp,0x6c
c0012740:	5b                   	pop    ebx
c0012741:	5e                   	pop    esi
c0012742:	5f                   	pop    edi
c0012743:	5d                   	pop    ebp
c0012744:	c3                   	ret    

c0012745 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012745:	53                   	push   ebx
c0012746:	83 ec 3c             	sub    esp,0x3c
c0012749:	6a 2b                	push   0x2b
c001274b:	6a 00                	push   0x0
c001274d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012751:	53                   	push   ebx
c0012752:	e8 99 dd fe ff       	call   c00004f0 <memset>
c0012757:	58                   	pop    eax
c0012758:	5a                   	pop    edx
c0012759:	8d 44 24 11          	lea    eax,[esp+0x11]
c001275d:	50                   	push   eax
c001275e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012762:	e8 40 fe ff ff       	call   c00125a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012767:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001276c:	83 c4 0c             	add    esp,0xc
c001276f:	6a 15                	push   0x15
c0012771:	6a 00                	push   0x0
c0012773:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012777:	50                   	push   eax
c0012778:	e8 73 dd fe ff       	call   c00004f0 <memset>
c001277d:	53                   	push   ebx
c001277e:	6a 00                	push   0x0
c0012780:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012784:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012788:	e8 e6 f9 ff ff       	call   c0012173 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001278d:	83 c4 58             	add    esp,0x58
c0012790:	5b                   	pop    ebx
c0012791:	c3                   	ret    

c0012792 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012792:	56                   	push   esi
c0012793:	53                   	push   ebx
c0012794:	83 ec 48             	sub    esp,0x48
c0012797:	6a 12                	push   0x12
c0012799:	68 ff 00 00 00       	push   0xff
c001279e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00127a2:	56                   	push   esi
c00127a3:	e8 48 dd fe ff       	call   c00004f0 <memset>
c00127a8:	5a                   	pop    edx
c00127a9:	59                   	pop    ecx
c00127aa:	56                   	push   esi
c00127ab:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127af:	e8 f3 fd ff ff       	call   c00125a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127b4:	83 c4 10             	add    esp,0x10
c00127b7:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127bb:	85 db                	test   ebx,ebx
c00127bd:	74 42                	je     c0012801 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00127bf:	50                   	push   eax
c00127c0:	8d 44 24 19          	lea    eax,[esp+0x19]
c00127c4:	50                   	push   eax
c00127c5:	53                   	push   ebx
c00127c6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127ca:	e8 fa f6 ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127cf:	83 c4 0c             	add    esp,0xc
c00127d2:	6a 12                	push   0x12
c00127d4:	8d 44 24 21          	lea    eax,[esp+0x21]
c00127d8:	50                   	push   eax
c00127d9:	56                   	push   esi
c00127da:	e8 a1 db fe ff       	call   c0000380 <memcmp>
c00127df:	83 c4 10             	add    esp,0x10
c00127e2:	85 c0                	test   eax,eax
c00127e4:	74 1e                	je     c0012804 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00127e6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00127eb:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00127f0:	c1 e3 08             	shl    ebx,0x8
c00127f3:	09 d8                	or     eax,ebx
c00127f5:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00127fa:	c1 e3 10             	shl    ebx,0x10
c00127fd:	09 c3                	or     ebx,eax
c00127ff:	eb ba                	jmp    c00127bb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012801:	83 cb ff             	or     ebx,0xffffffff
c0012804:	89 d8                	mov    eax,ebx
c0012806:	83 c4 44             	add    esp,0x44
c0012809:	5b                   	pop    ebx
c001280a:	5e                   	pop    esi
c001280b:	c3                   	ret    

c001280c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001280c:	57                   	push   edi
c001280d:	56                   	push   esi
c001280e:	53                   	push   ebx
c001280f:	83 ec 34             	sub    esp,0x34
c0012812:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012816:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001281a:	6a 2b                	push   0x2b
c001281c:	6a 00                	push   0x0
c001281e:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012822:	53                   	push   ebx
c0012823:	e8 c8 dc fe ff       	call   c00004f0 <memset>
c0012828:	58                   	pop    eax
c0012829:	5a                   	pop    edx
c001282a:	8d 44 24 11          	lea    eax,[esp+0x11]
c001282e:	50                   	push   eax
c001282f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012833:	e8 6f fd ff ff       	call   c00125a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012838:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001283c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012840:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012844:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012848:	53                   	push   ebx
c0012849:	6a 00                	push   0x0
c001284b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001284f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012853:	e8 1b f9 ff ff       	call   c0012173 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012858:	83 c4 50             	add    esp,0x50
c001285b:	5b                   	pop    ebx
c001285c:	5e                   	pop    esi
c001285d:	5f                   	pop    edi
c001285e:	c3                   	ret    

c001285f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001285f:	55                   	push   ebp
c0012860:	57                   	push   edi
c0012861:	56                   	push   esi
c0012862:	53                   	push   ebx
c0012863:	83 ec 40             	sub    esp,0x40
c0012866:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001286a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001286e:	6a 2b                	push   0x2b
c0012870:	6a 00                	push   0x0
c0012872:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012876:	56                   	push   esi
c0012877:	e8 74 dc fe ff       	call   c00004f0 <memset>
c001287c:	5f                   	pop    edi
c001287d:	89 ef                	mov    edi,ebp
c001287f:	58                   	pop    eax
c0012880:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012884:	50                   	push   eax
c0012885:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012889:	e8 19 fd ff ff       	call   c00125a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001288e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012893:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012898:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001289d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00128a2:	83 c4 10             	add    esp,0x10
c00128a5:	85 ed                	test   ebp,ebp
c00128a7:	74 14                	je     c00128bd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00128a9:	51                   	push   ecx
c00128aa:	51                   	push   ecx
c00128ab:	57                   	push   edi
c00128ac:	53                   	push   ebx
c00128ad:	e8 09 f7 ff ff       	call   c0011fbb <CmGetNext(Reghive_Tag*, int)>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	85 c0                	test   eax,eax
c00128b7:	74 04                	je     c00128bd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00128b9:	89 c7                	mov    edi,eax
c00128bb:	eb e8                	jmp    c00128a5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00128bd:	56                   	push   esi
c00128be:	6a 00                	push   0x0
c00128c0:	57                   	push   edi
c00128c1:	53                   	push   ebx
c00128c2:	e8 ac f8 ff ff       	call   c0012173 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00128c7:	83 c4 0c             	add    esp,0xc
c00128ca:	89 c7                	mov    edi,eax
c00128cc:	56                   	push   esi
c00128cd:	50                   	push   eax
c00128ce:	53                   	push   ebx
c00128cf:	e8 f5 f5 ff ff       	call   c0011ec9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128d4:	58                   	pop    eax
c00128d5:	5a                   	pop    edx
c00128d6:	6a 6c                	push   0x6c
c00128d8:	6a 00                	push   0x0
c00128da:	6a 00                	push   0x0
c00128dc:	68 0f 0f 02 c0       	push   0xc0020f0f
c00128e1:	57                   	push   edi
c00128e2:	53                   	push   ebx
c00128e3:	e8 24 ff ff ff       	call   c001280c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00128e8:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00128ec:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00128f0:	c1 e8 10             	shr    eax,0x10
c00128f3:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00128f7:	83 c4 1c             	add    esp,0x1c
c00128fa:	56                   	push   esi
c00128fb:	57                   	push   edi
c00128fc:	53                   	push   ebx
c00128fd:	e8 eb f6 ff ff       	call   c0011fed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012902:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012907:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001290c:	c1 e0 08             	shl    eax,0x8
c001290f:	09 c2                	or     edx,eax
c0012911:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012916:	83 c4 4c             	add    esp,0x4c
c0012919:	c1 e0 10             	shl    eax,0x10
c001291c:	5b                   	pop    ebx
c001291d:	09 d0                	or     eax,edx
c001291f:	5e                   	pop    esi
c0012920:	5f                   	pop    edi
c0012921:	5d                   	pop    ebp
c0012922:	c3                   	ret    

c0012923 <zStrtok(char*, char const*)>:
c0012923:	55                   	push   ebp
c0012924:	57                   	push   edi
c0012925:	56                   	push   esi
c0012926:	53                   	push   ebx
c0012927:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001292b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001292f:	85 db                	test   ebx,ebx
c0012931:	74 2f                	je     c0012962 <zStrtok(char*, char const*)+0x3f>
c0012933:	85 c0                	test   eax,eax
c0012935:	75 09                	jne    c0012940 <zStrtok(char*, char const*)+0x1d>
c0012937:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001293c:	85 c0                	test   eax,eax
c001293e:	74 50                	je     c0012990 <zStrtok(char*, char const*)+0x6d>
c0012940:	31 c9                	xor    ecx,ecx
c0012942:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012946:	74 03                	je     c001294b <zStrtok(char*, char const*)+0x28>
c0012948:	41                   	inc    ecx
c0012949:	eb f7                	jmp    c0012942 <zStrtok(char*, char const*)+0x1f>
c001294b:	31 d2                	xor    edx,edx
c001294d:	39 ca                	cmp    edx,ecx
c001294f:	74 15                	je     c0012966 <zStrtok(char*, char const*)+0x43>
c0012951:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012955:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012958:	8d 3c 10             	lea    edi,[eax+edx*1]
c001295b:	39 ee                	cmp    esi,ebp
c001295d:	74 13                	je     c0012972 <zStrtok(char*, char const*)+0x4f>
c001295f:	42                   	inc    edx
c0012960:	eb eb                	jmp    c001294d <zStrtok(char*, char const*)+0x2a>
c0012962:	31 c0                	xor    eax,eax
c0012964:	eb 2a                	jmp    c0012990 <zStrtok(char*, char const*)+0x6d>
c0012966:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012970:	eb 1e                	jmp    c0012990 <zStrtok(char*, char const*)+0x6d>
c0012972:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012975:	39 ce                	cmp    esi,ecx
c0012977:	75 0a                	jne    c0012983 <zStrtok(char*, char const*)+0x60>
c0012979:	40                   	inc    eax
c001297a:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c001297f:	89 d8                	mov    eax,ebx
c0012981:	eb 0d                	jmp    c0012990 <zStrtok(char*, char const*)+0x6d>
c0012983:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012987:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001298a:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012990:	5b                   	pop    ebx
c0012991:	5e                   	pop    esi
c0012992:	5f                   	pop    edi
c0012993:	5d                   	pop    ebp
c0012994:	c3                   	ret    

c0012995 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012995:	57                   	push   edi
c0012996:	56                   	push   esi
c0012997:	53                   	push   ebx
c0012998:	81 ec 08 01 00 00    	sub    esp,0x108
c001299e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00129a5:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00129ac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00129b0:	53                   	push   ebx
c00129b1:	e8 8a dc fe ff       	call   c0000640 <strcpy>
c00129b6:	59                   	pop    ecx
c00129b7:	5e                   	pop    esi
c00129b8:	68 73 12 02 c0       	push   0xc0021273
c00129bd:	53                   	push   ebx
c00129be:	bb 01 00 00 00       	mov    ebx,0x1
c00129c3:	e8 5b ff ff ff       	call   c0012923 <zStrtok(char*, char const*)>
c00129c8:	83 c4 10             	add    esp,0x10
c00129cb:	85 c0                	test   eax,eax
c00129cd:	74 3b                	je     c0012a0a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129cf:	52                   	push   edx
c00129d0:	50                   	push   eax
c00129d1:	6a 01                	push   0x1
c00129d3:	57                   	push   edi
c00129d4:	e8 b9 fd ff ff       	call   c0012792 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00129d9:	59                   	pop    ecx
c00129da:	89 c3                	mov    ebx,eax
c00129dc:	5e                   	pop    esi
c00129dd:	68 73 12 02 c0       	push   0xc0021273
c00129e2:	6a 00                	push   0x0
c00129e4:	e8 3a ff ff ff       	call   c0012923 <zStrtok(char*, char const*)>
c00129e9:	83 c4 10             	add    esp,0x10
c00129ec:	89 c6                	mov    esi,eax
c00129ee:	85 c0                	test   eax,eax
c00129f0:	74 18                	je     c0012a0a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129f2:	52                   	push   edx
c00129f3:	52                   	push   edx
c00129f4:	53                   	push   ebx
c00129f5:	57                   	push   edi
c00129f6:	e8 81 f5 ff ff       	call   c0011f7c <CmEnterDirectory(Reghive_Tag*, int)>
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	89 c3                	mov    ebx,eax
c0012a00:	83 f8 ff             	cmp    eax,0xffffffff
c0012a03:	74 05                	je     c0012a0a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012a05:	50                   	push   eax
c0012a06:	56                   	push   esi
c0012a07:	53                   	push   ebx
c0012a08:	eb c9                	jmp    c00129d3 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012a0a:	81 c4 00 01 00 00    	add    esp,0x100
c0012a10:	89 d8                	mov    eax,ebx
c0012a12:	5b                   	pop    ebx
c0012a13:	5e                   	pop    esi
c0012a14:	5f                   	pop    edi
c0012a15:	c3                   	ret    

c0012a16 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012a16:	55                   	push   ebp
c0012a17:	57                   	push   edi
c0012a18:	56                   	push   esi
c0012a19:	53                   	push   ebx
c0012a1a:	83 ec 5c             	sub    esp,0x5c
c0012a1d:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012a21:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012a25:	85 db                	test   ebx,ebx
c0012a27:	0f 8e 84 00 00 00    	jle    c0012ab1 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012a2d:	31 ed                	xor    ebp,ebp
c0012a2f:	57                   	push   edi
c0012a30:	6a 32                	push   0x32
c0012a32:	6a 00                	push   0x0
c0012a34:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012a38:	57                   	push   edi
c0012a39:	e8 b2 da fe ff       	call   c00004f0 <memset>
c0012a3e:	83 c4 0c             	add    esp,0xc
c0012a41:	57                   	push   edi
c0012a42:	53                   	push   ebx
c0012a43:	56                   	push   esi
c0012a44:	e8 30 fb ff ff       	call   c0012579 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012a49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a4d:	83 c4 10             	add    esp,0x10
c0012a50:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012a54:	7d 13                	jge    c0012a69 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012a56:	83 ec 0c             	sub    esp,0xc
c0012a59:	45                   	inc    ebp
c0012a5a:	68 e4 15 02 c0       	push   0xc00215e4
c0012a5f:	e8 8d 7f ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0012a64:	83 c4 10             	add    esp,0x10
c0012a67:	eb e7                	jmp    c0012a50 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012a69:	51                   	push   ecx
c0012a6a:	57                   	push   edi
c0012a6b:	53                   	push   ebx
c0012a6c:	68 15 0f 02 c0       	push   0xc0020f15
c0012a71:	e8 7b 7f ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0012a76:	83 c4 10             	add    esp,0x10
c0012a79:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012a7e:	75 1e                	jne    c0012a9e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012a80:	52                   	push   edx
c0012a81:	52                   	push   edx
c0012a82:	53                   	push   ebx
c0012a83:	56                   	push   esi
c0012a84:	e8 f3 f4 ff ff       	call   c0011f7c <CmEnterDirectory(Reghive_Tag*, int)>
c0012a89:	83 c4 0c             	add    esp,0xc
c0012a8c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012a90:	8d 51 04             	lea    edx,[ecx+0x4]
c0012a93:	52                   	push   edx
c0012a94:	50                   	push   eax
c0012a95:	56                   	push   esi
c0012a96:	e8 7b ff ff ff       	call   c0012a16 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012a9b:	83 c4 10             	add    esp,0x10
c0012a9e:	50                   	push   eax
c0012a9f:	50                   	push   eax
c0012aa0:	53                   	push   ebx
c0012aa1:	56                   	push   esi
c0012aa2:	e8 14 f5 ff ff       	call   c0011fbb <CmGetNext(Reghive_Tag*, int)>
c0012aa7:	83 c4 10             	add    esp,0x10
c0012aaa:	89 c3                	mov    ebx,eax
c0012aac:	e9 74 ff ff ff       	jmp    c0012a25 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012ab1:	83 c4 5c             	add    esp,0x5c
c0012ab4:	5b                   	pop    ebx
c0012ab5:	5e                   	pop    esi
c0012ab6:	5f                   	pop    edi
c0012ab7:	5d                   	pop    ebp
c0012ab8:	c3                   	ret    

c0012ab9 <CmSplitFinalSlashInPlace(char*)>:
c0012ab9:	53                   	push   ebx
c0012aba:	83 ec 14             	sub    esp,0x14
c0012abd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012ac1:	53                   	push   ebx
c0012ac2:	e8 a9 da fe ff       	call   c0000570 <strlen>
c0012ac7:	83 c4 10             	add    esp,0x10
c0012aca:	48                   	dec    eax
c0012acb:	85 c0                	test   eax,eax
c0012acd:	74 15                	je     c0012ae4 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012acf:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012ad2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ad6:	75 09                	jne    c0012ae1 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012ad8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012adb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012adf:	eb 05                	jmp    c0012ae6 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012ae1:	48                   	dec    eax
c0012ae2:	eb e7                	jmp    c0012acb <CmSplitFinalSlashInPlace(char*)+0x12>
c0012ae4:	31 c0                	xor    eax,eax
c0012ae6:	83 c4 08             	add    esp,0x8
c0012ae9:	5b                   	pop    ebx
c0012aea:	c3                   	ret    

c0012aeb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012aeb:	55                   	push   ebp
c0012aec:	57                   	push   edi
c0012aed:	56                   	push   esi
c0012aee:	53                   	push   ebx
c0012aef:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012af5:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012afc:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012afe:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012b01:	80 fa 40             	cmp    dl,0x40
c0012b04:	75 1c                	jne    c0012b22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0012b06:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0012b09:	85 c9                	test   ecx,ecx
c0012b0b:	0f 84 09 01 00 00    	je     c0012c1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b11:	8d 43 01             	lea    eax,[ebx+0x1]
c0012b14:	83 f9 3a             	cmp    ecx,0x3a
c0012b17:	74 04                	je     c0012b1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0012b19:	89 c3                	mov    ebx,eax
c0012b1b:	eb e9                	jmp    c0012b06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012b1d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012b20:	89 c3                	mov    ebx,eax
c0012b22:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012b26:	50                   	push   eax
c0012b27:	6a 40                	push   0x40
c0012b29:	6a 00                	push   0x0
c0012b2b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b2f:	50                   	push   eax
c0012b30:	e8 bb d9 fe ff       	call   c00004f0 <memset>
c0012b35:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012b3c:	31 c0                	xor    eax,eax
c0012b3e:	83 c4 10             	add    esp,0x10
c0012b41:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012b46:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012b49:	89 d1                	mov    ecx,edx
c0012b4b:	85 d2                	test   edx,edx
c0012b4d:	0f 84 c7 00 00 00    	je     c0012c1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b53:	3d c7 00 00 00       	cmp    eax,0xc7
c0012b58:	0f 8f bc 00 00 00    	jg     c0012c1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b5e:	83 fa 0a             	cmp    edx,0xa
c0012b61:	0f 85 a4 00 00 00    	jne    c0012c0b <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0012b67:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012b6c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012b71:	89 c8                	mov    eax,ecx
c0012b73:	a8 df                	test   al,0xdf
c0012b75:	0f 94 c2             	sete   dl
c0012b78:	83 f9 23             	cmp    ecx,0x23
c0012b7b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b80:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0012b84:	80 e2 01             	and    dl,0x1
c0012b87:	75 4a                	jne    c0012bd3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b89:	83 e8 09             	sub    eax,0x9
c0012b8c:	3c 01                	cmp    al,0x1
c0012b8e:	76 43                	jbe    c0012bd3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b90:	83 f9 5b             	cmp    ecx,0x5b
c0012b93:	75 42                	jne    c0012bd7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012b95:	83 fe 40             	cmp    esi,0x40
c0012b98:	75 39                	jne    c0012bd3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012ba1:	52                   	push   edx
c0012ba2:	e8 c9 d9 fe ff       	call   c0000570 <strlen>
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	83 f8 3f             	cmp    eax,0x3f
c0012bad:	77 6b                	ja     c0012c1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012baf:	50                   	push   eax
c0012bb0:	50                   	push   eax
c0012bb1:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012bb5:	52                   	push   edx
c0012bb6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012bba:	52                   	push   edx
c0012bbb:	e8 80 da fe ff       	call   c0000640 <strcpy>
c0012bc0:	58                   	pop    eax
c0012bc1:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012bc5:	52                   	push   edx
c0012bc6:	e8 a5 d9 fe ff       	call   c0000570 <strlen>
c0012bcb:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012bd0:	83 c4 10             	add    esp,0x10
c0012bd3:	31 d2                	xor    edx,edx
c0012bd5:	eb 3b                	jmp    c0012c12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0012bd7:	83 fe 40             	cmp    esi,0x40
c0012bda:	74 06                	je     c0012be2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0012bdc:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012be0:	eb 20                	jmp    c0012c02 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012be2:	50                   	push   eax
c0012be3:	50                   	push   eax
c0012be4:	55                   	push   ebp
c0012be5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012be9:	50                   	push   eax
c0012bea:	e8 61 db fe ff       	call   c0000750 <strcmp>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	85 c0                	test   eax,eax
c0012bf4:	75 dd                	jne    c0012bd3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012bf6:	eb e4                	jmp    c0012bdc <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012bf8:	8d 50 01             	lea    edx,[eax+0x1]
c0012bfb:	83 f9 3d             	cmp    ecx,0x3d
c0012bfe:	74 1e                	je     c0012c1e <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0012c00:	89 d0                	mov    eax,edx
c0012c02:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012c05:	85 c9                	test   ecx,ecx
c0012c07:	75 ef                	jne    c0012bf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0012c09:	eb 0f                	jmp    c0012c1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012c0b:	8d 50 01             	lea    edx,[eax+0x1]
c0012c0e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012c12:	47                   	inc    edi
c0012c13:	89 d0                	mov    eax,edx
c0012c15:	e9 2c ff ff ff       	jmp    c0012b46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0012c1a:	31 c0                	xor    eax,eax
c0012c1c:	eb 33                	jmp    c0012c51 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0012c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c22:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012c25:	50                   	push   eax
c0012c26:	50                   	push   eax
c0012c27:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012c2b:	50                   	push   eax
c0012c2c:	53                   	push   ebx
c0012c2d:	e8 1e db fe ff       	call   c0000750 <strcmp>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	85 c0                	test   eax,eax
c0012c37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c3b:	75 96                	jne    c0012bd3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012c3d:	51                   	push   ecx
c0012c3e:	51                   	push   ecx
c0012c3f:	52                   	push   edx
c0012c40:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012c47:	e8 f4 d9 fe ff       	call   c0000640 <strcpy>
c0012c4c:	83 c4 10             	add    esp,0x10
c0012c4f:	b0 01                	mov    al,0x1
c0012c51:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012c57:	5b                   	pop    ebx
c0012c58:	5e                   	pop    esi
c0012c59:	5f                   	pop    edi
c0012c5a:	5d                   	pop    ebp
c0012c5b:	c3                   	ret    

c0012c5c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012c5c:	57                   	push   edi
c0012c5d:	56                   	push   esi
c0012c5e:	53                   	push   ebx
c0012c5f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012c65:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012c6c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012c73:	53                   	push   ebx
c0012c74:	e8 f7 d8 fe ff       	call   c0000570 <strlen>
c0012c79:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c7c:	89 c7                	mov    edi,eax
c0012c7e:	e8 ed d8 fe ff       	call   c0000570 <strlen>
c0012c83:	83 c4 10             	add    esp,0x10
c0012c86:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012c8a:	3d ff 00 00 00       	cmp    eax,0xff
c0012c8f:	0f 87 d3 00 00 00    	ja     c0012d68 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c95:	57                   	push   edi
c0012c96:	57                   	push   edi
c0012c97:	56                   	push   esi
c0012c98:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012c9c:	56                   	push   esi
c0012c9d:	e8 9e d9 fe ff       	call   c0000640 <strcpy>
c0012ca2:	58                   	pop    eax
c0012ca3:	5a                   	pop    edx
c0012ca4:	68 73 12 02 c0       	push   0xc0021273
c0012ca9:	56                   	push   esi
c0012caa:	e8 91 db fe ff       	call   c0000840 <strcat>
c0012caf:	59                   	pop    ecx
c0012cb0:	5f                   	pop    edi
c0012cb1:	53                   	push   ebx
c0012cb2:	56                   	push   esi
c0012cb3:	e8 88 db fe ff       	call   c0000840 <strcat>
c0012cb8:	58                   	pop    eax
c0012cb9:	5a                   	pop    edx
c0012cba:	68 1f 0f 02 c0       	push   0xc0020f1f
c0012cbf:	56                   	push   esi
c0012cc0:	e8 7b db fe ff       	call   c0000840 <strcat>
c0012cc5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012ccc:	e8 dd 4d ff ff       	call   c0007aae <malloc>
c0012cd1:	83 c4 0c             	add    esp,0xc
c0012cd4:	89 c3                	mov    ebx,eax
c0012cd6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012cdc:	56                   	push   esi
c0012cdd:	50                   	push   eax
c0012cde:	e8 91 82 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c0012ce3:	83 c4 10             	add    esp,0x10
c0012ce6:	85 db                	test   ebx,ebx
c0012ce8:	74 7e                	je     c0012d68 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012cea:	51                   	push   ecx
c0012ceb:	51                   	push   ecx
c0012cec:	6a 01                	push   0x1
c0012cee:	53                   	push   ebx
c0012cef:	e8 3c 83 ff ff       	call   c000b030 <File::open(FileOpenMode)>
c0012cf4:	83 c4 10             	add    esp,0x10
c0012cf7:	85 c0                	test   eax,eax
c0012cf9:	74 08                	je     c0012d03 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012cfb:	83 ec 0c             	sub    esp,0xc
c0012cfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d00:	53                   	push   ebx
c0012d01:	eb 5f                	jmp    c0012d62 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012d03:	52                   	push   edx
c0012d04:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012d08:	50                   	push   eax
c0012d09:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012d0d:	50                   	push   eax
c0012d0e:	53                   	push   ebx
c0012d0f:	e8 c8 85 ff ff       	call   c000b2dc <File::stat(unsigned long long*, bool*)>
c0012d14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d18:	83 c4 10             	add    esp,0x10
c0012d1b:	89 c1                	mov    ecx,eax
c0012d1d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012d21:	74 31                	je     c0012d54 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d23:	83 ec 0c             	sub    esp,0xc
c0012d26:	50                   	push   eax
c0012d27:	e8 82 4d ff ff       	call   c0007aae <malloc>
c0012d2c:	89 c6                	mov    esi,eax
c0012d2e:	58                   	pop    eax
c0012d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012d35:	52                   	push   edx
c0012d36:	56                   	push   esi
c0012d37:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d3b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d3f:	53                   	push   ebx
c0012d40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012d43:	83 c4 20             	add    esp,0x20
c0012d46:	85 c0                	test   eax,eax
c0012d48:	75 0a                	jne    c0012d54 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012d4e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012d52:	74 18                	je     c0012d6c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012d54:	83 ec 0c             	sub    esp,0xc
c0012d57:	53                   	push   ebx
c0012d58:	e8 31 83 ff ff       	call   c000b08e <File::close()>
c0012d5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d65:	83 c4 10             	add    esp,0x10
c0012d68:	31 c0                	xor    eax,eax
c0012d6a:	eb 3b                	jmp    c0012da7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012d6c:	83 ec 0c             	sub    esp,0xc
c0012d6f:	53                   	push   ebx
c0012d70:	e8 19 83 ff ff       	call   c000b08e <File::close()>
c0012d75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d7d:	83 c4 0c             	add    esp,0xc
c0012d80:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d87:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d8e:	56                   	push   esi
c0012d8f:	e8 57 fd ff ff       	call   c0012aeb <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012d94:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d97:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012d9b:	e8 1e 4d ff ff       	call   c0007abe <free>
c0012da0:	83 c4 10             	add    esp,0x10
c0012da3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012da7:	81 c4 20 01 00 00    	add    esp,0x120
c0012dad:	5b                   	pop    ebx
c0012dae:	5e                   	pop    esi
c0012daf:	5f                   	pop    edi
c0012db0:	c3                   	ret    

c0012db1 <Reg::getLine(char*, char*, char*)>:
c0012db1:	57                   	push   edi
c0012db2:	56                   	push   esi
c0012db3:	53                   	push   ebx
c0012db4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012db8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012dbc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012dc0:	57                   	push   edi
c0012dc1:	56                   	push   esi
c0012dc2:	53                   	push   ebx
c0012dc3:	68 24 0f 02 c0       	push   0xc0020f24
c0012dc8:	e8 8f fe ff ff       	call   c0012c5c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012dcd:	83 c4 10             	add    esp,0x10
c0012dd0:	84 c0                	test   al,al
c0012dd2:	75 10                	jne    c0012de4 <Reg::getLine(char*, char*, char*)+0x33>
c0012dd4:	57                   	push   edi
c0012dd5:	56                   	push   esi
c0012dd6:	53                   	push   ebx
c0012dd7:	68 49 0f 02 c0       	push   0xc0020f49
c0012ddc:	e8 7b fe ff ff       	call   c0012c5c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012de1:	83 c4 10             	add    esp,0x10
c0012de4:	5b                   	pop    ebx
c0012de5:	5e                   	pop    esi
c0012de6:	5f                   	pop    edi
c0012de7:	c3                   	ret    

c0012de8 <Reg::readInt(char*, char*, int*)>:
c0012de8:	55                   	push   ebp
c0012de9:	57                   	push   edi
c0012dea:	56                   	push   esi
c0012deb:	53                   	push   ebx
c0012dec:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012df2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012df6:	55                   	push   ebp
c0012df7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012dfe:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012e05:	e8 a7 ff ff ff       	call   c0012db1 <Reg::getLine(char*, char*, char*)>
c0012e0a:	83 c4 10             	add    esp,0x10
c0012e0d:	84 c0                	test   al,al
c0012e0f:	0f 84 b6 00 00 00    	je     c0012ecb <Reg::readInt(char*, char*, int*)+0xe3>
c0012e15:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012e1a:	83 fa 2b             	cmp    edx,0x2b
c0012e1d:	74 0c                	je     c0012e2b <Reg::readInt(char*, char*, int*)+0x43>
c0012e1f:	83 fa 2d             	cmp    edx,0x2d
c0012e22:	75 0e                	jne    c0012e32 <Reg::readInt(char*, char*, int*)+0x4a>
c0012e24:	ba 01 00 00 00       	mov    edx,0x1
c0012e29:	eb 0b                	jmp    c0012e36 <Reg::readInt(char*, char*, int*)+0x4e>
c0012e2b:	ba 01 00 00 00       	mov    edx,0x1
c0012e30:	eb 02                	jmp    c0012e34 <Reg::readInt(char*, char*, int*)+0x4c>
c0012e32:	31 d2                	xor    edx,edx
c0012e34:	31 c0                	xor    eax,eax
c0012e36:	be 0a 00 00 00       	mov    esi,0xa
c0012e3b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012e40:	75 21                	jne    c0012e63 <Reg::readInt(char*, char*, int*)+0x7b>
c0012e42:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012e47:	83 f9 78             	cmp    ecx,0x78
c0012e4a:	75 0a                	jne    c0012e56 <Reg::readInt(char*, char*, int*)+0x6e>
c0012e4c:	83 c2 02             	add    edx,0x2
c0012e4f:	be 10 00 00 00       	mov    esi,0x10
c0012e54:	eb 0d                	jmp    c0012e63 <Reg::readInt(char*, char*, int*)+0x7b>
c0012e56:	83 f9 62             	cmp    ecx,0x62
c0012e59:	75 08                	jne    c0012e63 <Reg::readInt(char*, char*, int*)+0x7b>
c0012e5b:	83 c2 02             	add    edx,0x2
c0012e5e:	be 02 00 00 00       	mov    esi,0x2
c0012e63:	01 d5                	add    ebp,edx
c0012e65:	31 d2                	xor    edx,edx
c0012e67:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012e6b:	83 f9 0d             	cmp    ecx,0xd
c0012e6e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012e72:	0f 94 c3             	sete   bl
c0012e75:	85 c9                	test   ecx,ecx
c0012e77:	89 df                	mov    edi,ebx
c0012e79:	0f 94 c3             	sete   bl
c0012e7c:	09 df                	or     edi,ebx
c0012e7e:	89 fb                	mov    ebx,edi
c0012e80:	83 e7 01             	and    edi,0x1
c0012e83:	75 35                	jne    c0012eba <Reg::readInt(char*, char*, int*)+0xd2>
c0012e85:	0f af d6             	imul   edx,esi
c0012e88:	83 fe 10             	cmp    esi,0x10
c0012e8b:	75 26                	jne    c0012eb3 <Reg::readInt(char*, char*, int*)+0xcb>
c0012e8d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012e91:	83 ef 41             	sub    edi,0x41
c0012e94:	89 fb                	mov    ebx,edi
c0012e96:	80 fb 05             	cmp    bl,0x5
c0012e99:	77 06                	ja     c0012ea1 <Reg::readInt(char*, char*, int*)+0xb9>
c0012e9b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012e9f:	eb 16                	jmp    c0012eb7 <Reg::readInt(char*, char*, int*)+0xcf>
c0012ea1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ea5:	83 eb 61             	sub    ebx,0x61
c0012ea8:	80 fb 05             	cmp    bl,0x5
c0012eab:	77 06                	ja     c0012eb3 <Reg::readInt(char*, char*, int*)+0xcb>
c0012ead:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012eb1:	eb 04                	jmp    c0012eb7 <Reg::readInt(char*, char*, int*)+0xcf>
c0012eb3:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012eb7:	45                   	inc    ebp
c0012eb8:	eb ad                	jmp    c0012e67 <Reg::readInt(char*, char*, int*)+0x7f>
c0012eba:	84 c0                	test   al,al
c0012ebc:	74 02                	je     c0012ec0 <Reg::readInt(char*, char*, int*)+0xd8>
c0012ebe:	f7 da                	neg    edx
c0012ec0:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012ec7:	89 10                	mov    DWORD PTR [eax],edx
c0012ec9:	88 d8                	mov    al,bl
c0012ecb:	81 c4 ec 00 00 00    	add    esp,0xec
c0012ed1:	5b                   	pop    ebx
c0012ed2:	5e                   	pop    esi
c0012ed3:	5f                   	pop    edi
c0012ed4:	5d                   	pop    ebp
c0012ed5:	c3                   	ret    

c0012ed6 <Reg::readString(char*, char*, char*, int)>:
c0012ed6:	57                   	push   edi
c0012ed7:	56                   	push   esi
c0012ed8:	53                   	push   ebx
c0012ed9:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012edf:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012ee6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012eea:	57                   	push   edi
c0012eeb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012ef2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012ef9:	e8 b3 fe ff ff       	call   c0012db1 <Reg::getLine(char*, char*, char*)>
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	89 c6                	mov    esi,eax
c0012f03:	84 c0                	test   al,al
c0012f05:	74 44                	je     c0012f4b <Reg::readString(char*, char*, char*, int)+0x75>
c0012f07:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012f0e:	31 c0                	xor    eax,eax
c0012f10:	4a                   	dec    edx
c0012f11:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012f14:	84 c9                	test   cl,cl
c0012f16:	74 0f                	je     c0012f27 <Reg::readString(char*, char*, char*, int)+0x51>
c0012f18:	39 c2                	cmp    edx,eax
c0012f1a:	7e 0b                	jle    c0012f27 <Reg::readString(char*, char*, char*, int)+0x51>
c0012f1c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012f1f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012f24:	40                   	inc    eax
c0012f25:	eb ea                	jmp    c0012f11 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012f27:	83 ec 0c             	sub    esp,0xc
c0012f2a:	53                   	push   ebx
c0012f2b:	e8 40 d6 fe ff       	call   c0000570 <strlen>
c0012f30:	83 c4 10             	add    esp,0x10
c0012f33:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012f38:	75 11                	jne    c0012f4b <Reg::readString(char*, char*, char*, int)+0x75>
c0012f3a:	83 ec 0c             	sub    esp,0xc
c0012f3d:	53                   	push   ebx
c0012f3e:	e8 2d d6 fe ff       	call   c0000570 <strlen>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012f4b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012f51:	89 f0                	mov    eax,esi
c0012f53:	5b                   	pop    ebx
c0012f54:	5e                   	pop    esi
c0012f55:	5f                   	pop    edi
c0012f56:	c3                   	ret    

c0012f57 <Reg::readBool(char*, char*, bool*)>:
c0012f57:	83 ec 20             	sub    esp,0x20
c0012f5a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f5e:	50                   	push   eax
c0012f5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f67:	e8 7c fe ff ff       	call   c0012de8 <Reg::readInt(char*, char*, int*)>
c0012f6c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f71:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012f75:	0f 95 02             	setne  BYTE PTR [edx]
c0012f78:	83 c4 2c             	add    esp,0x2c
c0012f7b:	c3                   	ret    

c0012f7c <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012f7c:	53                   	push   ebx
c0012f7d:	83 ec 1c             	sub    esp,0x1c
c0012f80:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012f84:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012f88:	50                   	push   eax
c0012f89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f91:	e8 c1 ff ff ff       	call   c0012f57 <Reg::readBool(char*, char*, bool*)>
c0012f96:	83 c4 10             	add    esp,0x10
c0012f99:	84 c0                	test   al,al
c0012f9b:	74 04                	je     c0012fa1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012f9d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012fa1:	88 d8                	mov    al,bl
c0012fa3:	83 c4 18             	add    esp,0x18
c0012fa6:	5b                   	pop    ebx
c0012fa7:	c3                   	ret    

c0012fa8 <Reg::readIntWithDefault(char*, char*, int)>:
c0012fa8:	53                   	push   ebx
c0012fa9:	83 ec 1c             	sub    esp,0x1c
c0012fac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012fb0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012fb4:	50                   	push   eax
c0012fb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fbd:	e8 26 fe ff ff       	call   c0012de8 <Reg::readInt(char*, char*, int*)>
c0012fc2:	83 c4 10             	add    esp,0x10
c0012fc5:	84 c0                	test   al,al
c0012fc7:	74 04                	je     c0012fcd <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012fc9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fcd:	89 d8                	mov    eax,ebx
c0012fcf:	83 c4 18             	add    esp,0x18
c0012fd2:	5b                   	pop    ebx
c0012fd3:	c3                   	ret    

c0012fd4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012fd4:	57                   	push   edi
c0012fd5:	56                   	push   esi
c0012fd6:	56                   	push   esi
c0012fd7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012fdb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012fdf:	56                   	push   esi
c0012fe0:	57                   	push   edi
c0012fe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe9:	e8 e8 fe ff ff       	call   c0012ed6 <Reg::readString(char*, char*, char*, int)>
c0012fee:	83 c4 10             	add    esp,0x10
c0012ff1:	84 c0                	test   al,al
c0012ff3:	75 1a                	jne    c001300f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012ff5:	51                   	push   ecx
c0012ff6:	56                   	push   esi
c0012ff7:	6a 00                	push   0x0
c0012ff9:	57                   	push   edi
c0012ffa:	e8 f1 d4 fe ff       	call   c00004f0 <memset>
c0012fff:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013002:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013006:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013008:	83 c4 10             	add    esp,0x10
c001300b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001300f:	89 f8                	mov    eax,edi
c0013011:	5a                   	pop    edx
c0013012:	5e                   	pop    esi
c0013013:	5f                   	pop    edi
c0013014:	c3                   	ret    

c0013015 <SysEject(regs*)>:
c0013015:	83 ec 0c             	sub    esp,0xc
c0013018:	83 ca ff             	or     edx,0xffffffff
c001301b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013022:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013027:	83 e9 41             	sub    ecx,0x41
c001302a:	83 f9 19             	cmp    ecx,0x19
c001302d:	77 18                	ja     c0013047 <SysEject(regs*)+0x32>
c001302f:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0013036:	85 c9                	test   ecx,ecx
c0013038:	74 0d                	je     c0013047 <SysEject(regs*)+0x32>
c001303a:	83 ec 0c             	sub    esp,0xc
c001303d:	51                   	push   ecx
c001303e:	e8 5b a1 ff ff       	call   c000d19e <LogicalDisk::eject()>
c0013043:	83 c4 10             	add    esp,0x10
c0013046:	99                   	cdq    
c0013047:	83 c4 0c             	add    esp,0xc
c001304a:	c3                   	ret    

c001304b <SysExit(regs*)>:
c001304b:	83 ec 18             	sub    esp,0x18
c001304e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013052:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013055:	e8 1a 2a 00 00       	call   c0015a74 <terminateTask(int)>
c001305a:	83 c8 ff             	or     eax,0xffffffff
c001305d:	83 c4 1c             	add    esp,0x1c
c0013060:	89 c2                	mov    edx,eax
c0013062:	c3                   	ret    

c0013063 <SysGetCwd(regs*)>:
c0013063:	83 ec 10             	sub    esp,0x10
c0013066:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001306a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001306d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013075:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013078:	e8 ed 7c ff ff       	call   c000ad6a <Fs::getcwd(Process*, char*, int)>
c001307d:	83 c4 1c             	add    esp,0x1c
c0013080:	99                   	cdq    
c0013081:	c3                   	ret    

c0013082 <SysGetPID(regs*)>:
c0013082:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013087:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001308a:	8b 00                	mov    eax,DWORD PTR [eax]
c001308c:	99                   	cdq    
c001308d:	c3                   	ret    

c001308e <SysGetRAMData(regs*)>:
c001308e:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0013094:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c001309e:	99                   	cdq    
c001309f:	f7 f9                	idiv   ecx
c00130a1:	c1 e0 18             	shl    eax,0x18
c00130a4:	09 c8                	or     eax,ecx
c00130a6:	99                   	cdq    
c00130a7:	c3                   	ret    

c00130a8 <SysGetVGAPtr(regs*)>:
c00130a8:	55                   	push   ebp
c00130a9:	57                   	push   edi
c00130aa:	56                   	push   esi
c00130ab:	53                   	push   ebx
c00130ac:	83 ec 18             	sub    esp,0x18
c00130af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00130b3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130b6:	e8 85 24 00 00       	call   c0015540 <Thr::processFromPID(int)>
c00130bb:	83 c4 10             	add    esp,0x10
c00130be:	89 c1                	mov    ecx,eax
c00130c0:	b8 01 00 00 00       	mov    eax,0x1
c00130c5:	85 c9                	test   ecx,ecx
c00130c7:	74 57                	je     c0013120 <SysGetVGAPtr(regs*)+0x78>
c00130c9:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00130cf:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00130d3:	74 0c                	je     c00130e1 <SysGetVGAPtr(regs*)+0x39>
c00130d5:	83 ec 0c             	sub    esp,0xc
c00130d8:	55                   	push   ebp
c00130d9:	e8 65 56 ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c00130de:	83 c4 10             	add    esp,0x10
c00130e1:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00130e4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00130e7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00130ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130ee:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00130f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130f4:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00130fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130fd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013100:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013106:	50                   	push   eax
c0013107:	50                   	push   eax
c0013108:	68 64 0f 02 c0       	push   0xc0020f64
c001310d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013110:	05 a8 0f 00 00       	add    eax,0xfa8
c0013115:	50                   	push   eax
c0013116:	e8 25 d5 fe ff       	call   c0000640 <strcpy>
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	31 c0                	xor    eax,eax
c0013120:	83 c4 0c             	add    esp,0xc
c0013123:	31 d2                	xor    edx,edx
c0013125:	5b                   	pop    ebx
c0013126:	5e                   	pop    esi
c0013127:	5f                   	pop    edi
c0013128:	5d                   	pop    ebp
c0013129:	c3                   	ret    
c001312a:	66 90                	xchg   ax,ax

c001312c <SysKill(regs*)>:
c001312c:	53                   	push   ebx
c001312d:	83 ec 08             	sub    esp,0x8
c0013130:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013134:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013138:	75 16                	jne    c0013150 <SysKill(regs*)+0x24>
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	68 6e 0f 02 c0       	push   0xc0020f6e
c0013142:	e8 d8 d7 ff ff       	call   c001091f <KePanic(char const*)>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	e9 89 00 00 00       	jmp    c00131d8 <SysKill(regs*)+0xac>
c001314f:	90                   	nop
c0013150:	83 ec 0c             	sub    esp,0xc
c0013153:	68 84 81 02 c0       	push   0xc0028184
c0013158:	e8 ff ba 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001315d:	8d 76 00             	lea    esi,[esi+0x0]
c0013160:	83 c4 10             	add    esp,0x10
c0013163:	85 c0                	test   eax,eax
c0013165:	74 19                	je     c0013180 <SysKill(regs*)+0x54>
c0013167:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001316a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001316d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001316f:	74 33                	je     c00131a4 <SysKill(regs*)+0x78>
c0013171:	52                   	push   edx
c0013172:	52                   	push   edx
c0013173:	50                   	push   eax
c0013174:	68 84 81 02 c0       	push   0xc0028184
c0013179:	e8 fe bd 00 00       	call   c001ef7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001317e:	eb e0                	jmp    c0013160 <SysKill(regs*)+0x34>
c0013180:	83 ec 0c             	sub    esp,0xc
c0013183:	68 78 81 02 c0       	push   0xc0028178
c0013188:	e8 cf ba 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001318d:	8d 76 00             	lea    esi,[esi+0x0]
c0013190:	83 c4 10             	add    esp,0x10
c0013193:	85 c0                	test   eax,eax
c0013195:	74 41                	je     c00131d8 <SysKill(regs*)+0xac>
c0013197:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001319a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001319d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001319f:	75 27                	jne    c00131c8 <SysKill(regs*)+0x9c>
c00131a1:	8d 76 00             	lea    esi,[esi+0x0]
c00131a4:	51                   	push   ecx
c00131a5:	51                   	push   ecx
c00131a6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00131a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131b1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00131b7:	e8 ff db ff ff       	call   c0010dbb <KeRaiseSignal(SigHandlerBlock*, int)>
c00131bc:	83 c4 10             	add    esp,0x10
c00131bf:	31 c0                	xor    eax,eax
c00131c1:	31 d2                	xor    edx,edx
c00131c3:	eb 1b                	jmp    c00131e0 <SysKill(regs*)+0xb4>
c00131c5:	8d 76 00             	lea    esi,[esi+0x0]
c00131c8:	52                   	push   edx
c00131c9:	52                   	push   edx
c00131ca:	50                   	push   eax
c00131cb:	68 78 81 02 c0       	push   0xc0028178
c00131d0:	e8 a7 bd 00 00       	call   c001ef7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00131d5:	eb b9                	jmp    c0013190 <SysKill(regs*)+0x64>
c00131d7:	90                   	nop
c00131d8:	83 c8 ff             	or     eax,0xffffffff
c00131db:	89 c2                	mov    edx,eax
c00131dd:	8d 76 00             	lea    esi,[esi+0x0]
c00131e0:	83 c4 08             	add    esp,0x8
c00131e3:	5b                   	pop    ebx
c00131e4:	c3                   	ret    

c00131e5 <SysLoadDLL(regs*)>:
c00131e5:	56                   	push   esi
c00131e6:	53                   	push   ebx
c00131e7:	31 d2                	xor    edx,edx
c00131e9:	51                   	push   ecx
c00131ea:	b8 01 00 00 00       	mov    eax,0x1
c00131ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131f3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00131f7:	0f 84 8c 00 00 00    	je     c0013289 <SysLoadDLL(regs*)+0xa4>
c00131fd:	83 ec 0c             	sub    esp,0xc
c0013200:	68 14 01 00 00       	push   0x114
c0013205:	e8 a4 48 ff ff       	call   c0007aae <malloc>
c001320a:	83 c4 0c             	add    esp,0xc
c001320d:	89 c3                	mov    ebx,eax
c001320f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013214:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013217:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001321a:	53                   	push   ebx
c001321b:	e8 54 7d ff ff       	call   c000af74 <File::File(char const*, Process*)>
c0013220:	83 c4 10             	add    esp,0x10
c0013223:	31 d2                	xor    edx,edx
c0013225:	b8 02 00 00 00       	mov    eax,0x2
c001322a:	85 db                	test   ebx,ebx
c001322c:	74 5b                	je     c0013289 <SysLoadDLL(regs*)+0xa4>
c001322e:	83 ec 0c             	sub    esp,0xc
c0013231:	53                   	push   ebx
c0013232:	e8 67 80 ff ff       	call   c000b29e <File::exists()>
c0013237:	83 c4 10             	add    esp,0x10
c001323a:	84 c0                	test   al,al
c001323c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001323e:	75 11                	jne    c0013251 <SysLoadDLL(regs*)+0x6c>
c0013240:	83 ec 0c             	sub    esp,0xc
c0013243:	53                   	push   ebx
c0013244:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013247:	83 c4 10             	add    esp,0x10
c001324a:	b8 03 00 00 00       	mov    eax,0x3
c001324f:	eb 36                	jmp    c0013287 <SysLoadDLL(regs*)+0xa2>
c0013251:	83 ec 0c             	sub    esp,0xc
c0013254:	53                   	push   ebx
c0013255:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013258:	58                   	pop    eax
c0013259:	5a                   	pop    edx
c001325a:	6a 00                	push   0x0
c001325c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001325f:	e8 12 14 00 00       	call   c0014676 <Thr::loadDLL(char const*, bool)>
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	89 c1                	mov    ecx,eax
c0013269:	31 d2                	xor    edx,edx
c001326b:	b8 04 00 00 00       	mov    eax,0x4
c0013270:	85 c9                	test   ecx,ecx
c0013272:	74 15                	je     c0013289 <SysLoadDLL(regs*)+0xa4>
c0013274:	53                   	push   ebx
c0013275:	53                   	push   ebx
c0013276:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001327c:	51                   	push   ecx
c001327d:	e8 25 16 00 00       	call   c00148a7 <Thr::executeDLL(unsigned long, void*)>
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	31 c0                	xor    eax,eax
c0013287:	31 d2                	xor    edx,edx
c0013289:	59                   	pop    ecx
c001328a:	5b                   	pop    ebx
c001328b:	5e                   	pop    esi
c001328c:	c3                   	ret    

c001328d <SysRead(regs*)>:
c001328d:	57                   	push   edi
c001328e:	56                   	push   esi
c001328f:	53                   	push   ebx
c0013290:	83 ec 10             	sub    esp,0x10
c0013293:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013297:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001329a:	83 f8 02             	cmp    eax,0x2
c001329d:	77 10                	ja     c00132af <SysRead(regs*)+0x22>
c001329f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132a7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00132ad:	eb 0e                	jmp    c00132bd <SysRead(regs*)+0x30>
c00132af:	83 ec 0c             	sub    esp,0xc
c00132b2:	50                   	push   eax
c00132b3:	e8 0b 62 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00132b8:	83 c4 10             	add    esp,0x10
c00132bb:	89 c1                	mov    ecx,eax
c00132bd:	83 c8 ff             	or     eax,0xffffffff
c00132c0:	85 c9                	test   ecx,ecx
c00132c2:	89 c2                	mov    edx,eax
c00132c4:	74 28                	je     c00132ee <SysRead(regs*)+0x61>
c00132c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00132ce:	31 ff                	xor    edi,edi
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132d9:	52                   	push   edx
c00132da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132dd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00132e0:	57                   	push   edi
c00132e1:	56                   	push   esi
c00132e2:	51                   	push   ecx
c00132e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00132ea:	83 c4 20             	add    esp,0x20
c00132ed:	99                   	cdq    
c00132ee:	83 c4 10             	add    esp,0x10
c00132f1:	5b                   	pop    ebx
c00132f2:	5e                   	pop    esi
c00132f3:	5f                   	pop    edi
c00132f4:	c3                   	ret    

c00132f5 <SysRegisterSignal(regs*)>:
c00132f5:	83 ec 18             	sub    esp,0x18
c00132f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132fc:	6a 00                	push   0x0
c00132fe:	6a 00                	push   0x0
c0013300:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013303:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013306:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001330b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001330e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013314:	e8 6c da ff ff       	call   c0010d85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013319:	83 c4 2c             	add    esp,0x2c
c001331c:	99                   	cdq    
c001331d:	c3                   	ret    

c001331e <SysRegistryGetTypeFromPath(regs*)>:
c001331e:	57                   	push   edi
c001331f:	56                   	push   esi
c0013320:	53                   	push   ebx
c0013321:	81 ec 38 01 00 00    	sub    esp,0x138
c0013327:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001332e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013331:	68 8f 0f 02 c0       	push   0xc0020f8f
c0013336:	e8 b6 76 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001333b:	5a                   	pop    edx
c001333c:	59                   	pop    ecx
c001333d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013340:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013343:	e8 4d f6 ff ff       	call   c0012995 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013348:	5f                   	pop    edi
c0013349:	89 c6                	mov    esi,eax
c001334b:	5a                   	pop    edx
c001334c:	50                   	push   eax
c001334d:	68 af 0f 02 c0       	push   0xc0020faf
c0013352:	e8 9a 76 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0013357:	83 c4 10             	add    esp,0x10
c001335a:	85 f6                	test   esi,esi
c001335c:	74 28                	je     c0013386 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001335e:	50                   	push   eax
c001335f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013363:	57                   	push   edi
c0013364:	56                   	push   esi
c0013365:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013368:	e8 0c f2 ff ff       	call   c0012579 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001336d:	83 c4 0c             	add    esp,0xc
c0013370:	89 c3                	mov    ebx,eax
c0013372:	57                   	push   edi
c0013373:	50                   	push   eax
c0013374:	68 b7 0f 02 c0       	push   0xc0020fb7
c0013379:	e8 73 76 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001337e:	89 d8                	mov    eax,ebx
c0013380:	83 c4 10             	add    esp,0x10
c0013383:	99                   	cdq    
c0013384:	eb 05                	jmp    c001338b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013386:	83 c8 ff             	or     eax,0xffffffff
c0013389:	89 c2                	mov    edx,eax
c001338b:	81 c4 30 01 00 00    	add    esp,0x130
c0013391:	5b                   	pop    ebx
c0013392:	5e                   	pop    esi
c0013393:	5f                   	pop    edi
c0013394:	c3                   	ret    

c0013395 <SysRegistryReadExtent(regs*)>:
c0013395:	83 ec 1c             	sub    esp,0x1c
c0013398:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001339c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001339f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00133a2:	85 c0                	test   eax,eax
c00133a4:	79 1f                	jns    c00133c5 <SysRegistryReadExtent(regs*)+0x30>
c00133a6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00133ab:	52                   	push   edx
c00133ac:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00133b0:	52                   	push   edx
c00133b1:	50                   	push   eax
c00133b2:	51                   	push   ecx
c00133b3:	e8 b3 f0 ff ff       	call   c001246b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00133b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00133c0:	83 c4 10             	add    esp,0x10
c00133c3:	eb 14                	jmp    c00133d9 <SysRegistryReadExtent(regs*)+0x44>
c00133c5:	83 ec 04             	sub    esp,0x4
c00133c8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00133cb:	50                   	push   eax
c00133cc:	51                   	push   ecx
c00133cd:	e8 33 eb ff ff       	call   c0011f05 <CmGetString(Reghive_Tag*, int, char*)>
c00133d2:	83 c4 10             	add    esp,0x10
c00133d5:	31 c0                	xor    eax,eax
c00133d7:	31 d2                	xor    edx,edx
c00133d9:	83 c4 1c             	add    esp,0x1c
c00133dc:	c3                   	ret    

c00133dd <SysRegistryPathToExtentLookup(regs*)>:
c00133dd:	53                   	push   ebx
c00133de:	83 ec 10             	sub    esp,0x10
c00133e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133e8:	68 cd 0f 02 c0       	push   0xc0020fcd
c00133ed:	e8 ff 75 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00133f2:	58                   	pop    eax
c00133f3:	5a                   	pop    edx
c00133f4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133f7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133fa:	e8 96 f5 ff ff       	call   c0012995 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00133ff:	83 c4 18             	add    esp,0x18
c0013402:	99                   	cdq    
c0013403:	5b                   	pop    ebx
c0013404:	c3                   	ret    

c0013405 <SysRegistryEnterDirectory(regs*)>:
c0013405:	53                   	push   ebx
c0013406:	83 ec 10             	sub    esp,0x10
c0013409:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001340d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013410:	68 f0 0f 02 c0       	push   0xc0020ff0
c0013415:	e8 d7 75 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001341a:	58                   	pop    eax
c001341b:	5a                   	pop    edx
c001341c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001341f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013422:	e8 55 eb ff ff       	call   c0011f7c <CmEnterDirectory(Reghive_Tag*, int)>
c0013427:	83 c4 18             	add    esp,0x18
c001342a:	99                   	cdq    
c001342b:	5b                   	pop    ebx
c001342c:	c3                   	ret    

c001342d <SysRegistryGetNext(regs*)>:
c001342d:	53                   	push   ebx
c001342e:	83 ec 10             	sub    esp,0x10
c0013431:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013435:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013438:	68 0e 10 02 c0       	push   0xc002100e
c001343d:	e8 af 75 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0013442:	58                   	pop    eax
c0013443:	5a                   	pop    edx
c0013444:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013447:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001344a:	e8 6c eb ff ff       	call   c0011fbb <CmGetNext(Reghive_Tag*, int)>
c001344f:	83 c4 18             	add    esp,0x18
c0013452:	99                   	cdq    
c0013453:	5b                   	pop    ebx
c0013454:	c3                   	ret    

c0013455 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013455:	57                   	push   edi
c0013456:	56                   	push   esi
c0013457:	53                   	push   ebx
c0013458:	81 ec 34 01 00 00    	sub    esp,0x134
c001345e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013465:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013469:	57                   	push   edi
c001346a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001346d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013470:	e8 04 f1 ff ff       	call   c0012579 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013475:	89 c3                	mov    ebx,eax
c0013477:	58                   	pop    eax
c0013478:	5a                   	pop    edx
c0013479:	57                   	push   edi
c001347a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001347d:	e8 be d1 fe ff       	call   c0000640 <strcpy>
c0013482:	89 d8                	mov    eax,ebx
c0013484:	81 c4 40 01 00 00    	add    esp,0x140
c001348a:	99                   	cdq    
c001348b:	5b                   	pop    ebx
c001348c:	5e                   	pop    esi
c001348d:	5f                   	pop    edi
c001348e:	c3                   	ret    

c001348f <SysRegistryOpen(regs*)>:
c001348f:	83 ec 18             	sub    esp,0x18
c0013492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013496:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013499:	e8 f7 e8 ff ff       	call   c0011d95 <CmOpen(char const*)>
c001349e:	83 c4 1c             	add    esp,0x1c
c00134a1:	99                   	cdq    
c00134a2:	c3                   	ret    

c00134a3 <SysRegistryClose(regs*)>:
c00134a3:	83 ec 18             	sub    esp,0x18
c00134a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134ad:	e8 01 ea ff ff       	call   c0011eb3 <CmClose(Reghive_Tag*)>
c00134b2:	31 c0                	xor    eax,eax
c00134b4:	31 d2                	xor    edx,edx
c00134b6:	83 c4 1c             	add    esp,0x1c
c00134b9:	c3                   	ret    

c00134ba <SysSbrk(regs*)>:
c00134ba:	56                   	push   esi
c00134bb:	53                   	push   ebx
c00134bc:	50                   	push   eax
c00134bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134c9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00134cc:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00134d2:	85 db                	test   ebx,ebx
c00134d4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00134d7:	74 02                	je     c00134db <SysSbrk(regs*)+0x21>
c00134d9:	79 06                	jns    c00134e1 <SysSbrk(regs*)+0x27>
c00134db:	89 f0                	mov    eax,esi
c00134dd:	31 d2                	xor    edx,edx
c00134df:	eb 2a                	jmp    c001350b <SysSbrk(regs*)+0x51>
c00134e1:	83 c8 ff             	or     eax,0xffffffff
c00134e4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00134ea:	89 c2                	mov    edx,eax
c00134ec:	77 1d                	ja     c001350b <SysSbrk(regs*)+0x51>
c00134ee:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00134f4:	50                   	push   eax
c00134f5:	c1 ea 0c             	shr    edx,0xc
c00134f8:	68 07 0c 00 00       	push   0xc07
c00134fd:	52                   	push   edx
c00134fe:	51                   	push   ecx
c00134ff:	e8 06 69 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c0013504:	89 f0                	mov    eax,esi
c0013506:	31 d2                	xor    edx,edx
c0013508:	83 c4 10             	add    esp,0x10
c001350b:	59                   	pop    ecx
c001350c:	5b                   	pop    ebx
c001350d:	5e                   	pop    esi
c001350e:	c3                   	ret    

c001350f <SysSetCwd(regs*)>:
c001350f:	83 ec 14             	sub    esp,0x14
c0013512:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013516:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013519:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001351e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013521:	e8 17 7e ff ff       	call   c000b33d <Fs::setcwd(Process*, char*)>
c0013526:	83 c4 1c             	add    esp,0x1c
c0013529:	99                   	cdq    
c001352a:	c3                   	ret    

c001352b <SysSetTime(regs*)>:
c001352b:	55                   	push   ebp
c001352c:	31 c9                	xor    ecx,ecx
c001352e:	57                   	push   edi
c001352f:	bd 0c 00 00 00       	mov    ebp,0xc
c0013534:	56                   	push   esi
c0013535:	53                   	push   ebx
c0013536:	31 db                	xor    ebx,ebx
c0013538:	83 ec 10             	sub    esp,0x10
c001353b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001353f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013542:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013545:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013548:	89 c2                	mov    edx,eax
c001354a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013550:	83 e2 1f             	and    edx,0x1f
c0013553:	c1 e7 10             	shl    edi,0x10
c0013556:	42                   	inc    edx
c0013557:	c1 e8 05             	shr    eax,0x5
c001355a:	88 d1                	mov    cl,dl
c001355c:	31 d2                	xor    edx,edx
c001355e:	f7 f5                	div    ebp
c0013560:	89 dd                	mov    ebp,ebx
c0013562:	88 d5                	mov    ch,dl
c0013564:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001356a:	0f b7 c1             	movzx  eax,cx
c001356d:	31 d2                	xor    edx,edx
c001356f:	09 f8                	or     eax,edi
c0013571:	bf 3c 00 00 00       	mov    edi,0x3c
c0013576:	89 c1                	mov    ecx,eax
c0013578:	89 f0                	mov    eax,esi
c001357a:	f7 f7                	div    edi
c001357c:	c1 e2 10             	shl    edx,0x10
c001357f:	09 d5                	or     ebp,edx
c0013581:	31 d2                	xor    edx,edx
c0013583:	89 eb                	mov    ebx,ebp
c0013585:	f7 f7                	div    edi
c0013587:	bf 10 0e 00 00       	mov    edi,0xe10
c001358c:	88 d7                	mov    bh,dl
c001358e:	89 f0                	mov    eax,esi
c0013590:	31 d2                	xor    edx,edx
c0013592:	f7 f7                	div    edi
c0013594:	bf 18 00 00 00       	mov    edi,0x18
c0013599:	31 d2                	xor    edx,edx
c001359b:	f7 f7                	div    edi
c001359d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00135a2:	88 d3                	mov    bl,dl
c00135a4:	53                   	push   ebx
c00135a5:	51                   	push   ecx
c00135a6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00135ac:	e8 89 85 ff ff       	call   c000bb3a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00135b1:	83 c4 1c             	add    esp,0x1c
c00135b4:	83 f0 01             	xor    eax,0x1
c00135b7:	5b                   	pop    ebx
c00135b8:	0f b6 c0             	movzx  eax,al
c00135bb:	5e                   	pop    esi
c00135bc:	31 d2                	xor    edx,edx
c00135be:	5f                   	pop    edi
c00135bf:	5d                   	pop    ebp
c00135c0:	c3                   	ret    

c00135c1 <SysTimezone(regs*)>:
c00135c1:	53                   	push   ebx
c00135c2:	83 ec 08             	sub    esp,0x8
c00135c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135c9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00135cd:	75 17                	jne    c00135e6 <SysTimezone(regs*)+0x25>
c00135cf:	83 ec 0c             	sub    esp,0xc
c00135d2:	68 25 10 02 c0       	push   0xc0021025
c00135d7:	e8 15 74 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00135dc:	83 c8 ff             	or     eax,0xffffffff
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	89 c2                	mov    edx,eax
c00135e4:	eb 20                	jmp    c0013606 <SysTimezone(regs*)+0x45>
c00135e6:	83 ec 0c             	sub    esp,0xc
c00135e9:	68 3a 10 02 c0       	push   0xc002103a
c00135ee:	e8 fe 73 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00135f3:	58                   	pop    eax
c00135f4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135f7:	e8 a8 82 ff ff       	call   c000b8a4 <User::loadClockSettings(int)>
c00135fc:	83 c4 10             	add    esp,0x10
c00135ff:	b8 01 00 00 00       	mov    eax,0x1
c0013604:	31 d2                	xor    edx,edx
c0013606:	83 c4 08             	add    esp,0x8
c0013609:	5b                   	pop    ebx
c001360a:	c3                   	ret    

c001360b <SysWrite(regs*)>:
c001360b:	57                   	push   edi
c001360c:	56                   	push   esi
c001360d:	53                   	push   ebx
c001360e:	83 ec 10             	sub    esp,0x10
c0013611:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013615:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013618:	83 f8 02             	cmp    eax,0x2
c001361b:	77 10                	ja     c001362d <SysWrite(regs*)+0x22>
c001361d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013622:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013625:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001362b:	eb 0e                	jmp    c001363b <SysWrite(regs*)+0x30>
c001362d:	83 ec 0c             	sub    esp,0xc
c0013630:	50                   	push   eax
c0013631:	e8 8d 5e ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0013636:	83 c4 10             	add    esp,0x10
c0013639:	89 c1                	mov    ecx,eax
c001363b:	83 c8 ff             	or     eax,0xffffffff
c001363e:	85 c9                	test   ecx,ecx
c0013640:	89 c2                	mov    edx,eax
c0013642:	74 28                	je     c001366c <SysWrite(regs*)+0x61>
c0013644:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001364c:	31 ff                	xor    edi,edi
c001364e:	83 ec 0c             	sub    esp,0xc
c0013651:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013653:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013657:	52                   	push   edx
c0013658:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001365b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001365e:	57                   	push   edi
c001365f:	56                   	push   esi
c0013660:	51                   	push   ecx
c0013661:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013664:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013668:	83 c4 20             	add    esp,0x20
c001366b:	99                   	cdq    
c001366c:	83 c4 10             	add    esp,0x10
c001366f:	5b                   	pop    ebx
c0013670:	5e                   	pop    esi
c0013671:	5f                   	pop    edi
c0013672:	c3                   	ret    

c0013673 <SysWsbe(regs*)>:
c0013673:	57                   	push   edi
c0013674:	b9 0b 00 00 00       	mov    ecx,0xb
c0013679:	56                   	push   esi
c001367a:	be 79 10 02 c0       	mov    esi,0xc0021079
c001367f:	53                   	push   ebx
c0013680:	83 ec 30             	sub    esp,0x30
c0013683:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013687:	fc                   	cld    
c0013688:	83 ec 0c             	sub    esp,0xc
c001368b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001368d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013691:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013696:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013699:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001369f:	8b 06                	mov    eax,DWORD PTR [esi]
c00136a1:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00136a4:	57                   	push   edi
c00136a5:	e8 c6 ce fe ff       	call   c0000570 <strlen>
c00136aa:	5a                   	pop    edx
c00136ab:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00136af:	52                   	push   edx
c00136b0:	31 d2                	xor    edx,edx
c00136b2:	57                   	push   edi
c00136b3:	52                   	push   edx
c00136b4:	50                   	push   eax
c00136b5:	56                   	push   esi
c00136b6:	ff d3                	call   ebx
c00136b8:	83 c4 14             	add    esp,0x14
c00136bb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00136bf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00136c2:	e8 ad 23 00 00       	call   c0015a74 <terminateTask(int)>
c00136c7:	83 c4 40             	add    esp,0x40
c00136ca:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00136cf:	5b                   	pop    ebx
c00136d0:	31 d2                	xor    edx,edx
c00136d2:	5e                   	pop    esi
c00136d3:	5f                   	pop    edi
c00136d4:	c3                   	ret    

c00136d5 <SysYield(regs*)>:
c00136d5:	83 ec 0c             	sub    esp,0xc
c00136d8:	fa                   	cli    
c00136d9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00136df:	e8 f0 19 00 00       	call   c00150d4 <schedule()>
c00136e4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00136e9:	48                   	dec    eax
c00136ea:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00136ef:	75 01                	jne    c00136f2 <SysYield(regs*)+0x1d>
c00136f1:	fb                   	sti    
c00136f2:	31 c0                	xor    eax,eax
c00136f4:	31 d2                	xor    edx,edx
c00136f6:	83 c4 0c             	add    esp,0xc
c00136f9:	c3                   	ret    

c00136fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00136fa:	55                   	push   ebp
c00136fb:	57                   	push   edi
c00136fc:	56                   	push   esi
c00136fd:	53                   	push   ebx
c00136fe:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013704:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001370c:	0f 95 c0             	setne  al
c001370f:	31 d2                	xor    edx,edx
c0013711:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013719:	0f 94 c2             	sete   dl
c001371c:	85 c2                	test   edx,eax
c001371e:	74 34                	je     c0013754 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013720:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001372b:	74 27                	je     c0013754 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001372d:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013734:	05 00 10 00 00       	add    eax,0x1000
c0013739:	89 c1                	mov    ecx,eax
c001373b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013740:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013746:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001374d:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013754:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001375b:	83 ec 0c             	sub    esp,0xc
c001375e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013764:	6a 01                	push   0x1
c0013766:	e8 b2 5e ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001376b:	83 c4 10             	add    esp,0x10
c001376e:	89 c3                	mov    ebx,eax
c0013770:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013776:	0f 86 25 01 00 00    	jbe    c00138a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001377c:	c1 ee 0c             	shr    esi,0xc
c001377f:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013786:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001378a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013792:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013799:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001379d:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00137a4:	29 ef                	sub    edi,ebp
c00137a6:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00137aa:	0f 83 f8 00 00 00    	jae    c00138a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00137b0:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00137b6:	76 05                	jbe    c00137bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00137b8:	bf 00 10 00 00       	mov    edi,0x1000
c00137bd:	83 ec 0c             	sub    esp,0xc
c00137c0:	31 d2                	xor    edx,edx
c00137c2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137c9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00137cb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00137cf:	50                   	push   eax
c00137d0:	8d 74 24 30          	lea    esi,[esp+0x30]
c00137d4:	56                   	push   esi
c00137d5:	52                   	push   edx
c00137d6:	57                   	push   edi
c00137d7:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00137de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00137e1:	83 c4 20             	add    esp,0x20
c00137e4:	85 c0                	test   eax,eax
c00137e6:	75 06                	jne    c00137ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00137e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00137ec:	74 13                	je     c0013801 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00137ee:	83 ec 0c             	sub    esp,0xc
c00137f1:	53                   	push   ebx
c00137f2:	e8 42 61 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c00137f7:	83 c4 10             	add    esp,0x10
c00137fa:	31 c0                	xor    eax,eax
c00137fc:	e9 7c 01 00 00       	jmp    c001397d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0013801:	fa                   	cli    
c0013802:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013808:	e8 a6 45 ff ff       	call   c0007db3 <Phys::allocatePage()>
c001380d:	6a 07                	push   0x7
c001380f:	89 c7                	mov    edi,eax
c0013811:	53                   	push   ebx
c0013812:	50                   	push   eax
c0013813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013818:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001381b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013821:	e8 de 64 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013826:	83 c4 0c             	add    esp,0xc
c0013829:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013830:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013836:	6a 00                	push   0x0
c0013838:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001383d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013840:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013846:	e8 1f 63 ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c001384b:	58                   	pop    eax
c001384c:	5a                   	pop    edx
c001384d:	68 07 0c 00 00       	push   0xc07
c0013852:	55                   	push   ebp
c0013853:	57                   	push   edi
c0013854:	89 df                	mov    edi,ebx
c0013856:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001385d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013863:	6a 00                	push   0x0
c0013865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001386a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001386d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013873:	e8 76 68 ff ff       	call   c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013878:	b9 00 10 00 00       	mov    ecx,0x1000
c001387d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001387f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013884:	83 c4 20             	add    esp,0x20
c0013887:	48                   	dec    eax
c0013888:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001388d:	85 c0                	test   eax,eax
c001388f:	75 01                	jne    c0013892 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0013891:	fb                   	sti    
c0013892:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013898:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001389c:	e9 f1 fe ff ff       	jmp    c0013792 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00138a1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00138a8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00138af:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00138b5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00138bb:	0f 86 ae 00 00 00    	jbe    c001396f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00138c1:	fa                   	cli    
c00138c2:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00138c8:	c1 ee 0c             	shr    esi,0xc
c00138cb:	51                   	push   ecx
c00138cc:	31 ff                	xor    edi,edi
c00138ce:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00138d5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138db:	6a 00                	push   0x0
c00138dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138e5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138eb:	e8 7a 62 ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c00138f0:	83 c4 10             	add    esp,0x10
c00138f3:	e8 bb 44 ff ff       	call   c0007db3 <Phys::allocatePage()>
c00138f8:	47                   	inc    edi
c00138f9:	6a 07                	push   0x7
c00138fb:	53                   	push   ebx
c00138fc:	50                   	push   eax
c00138fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013901:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013907:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001390a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013910:	e8 ef 63 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013915:	58                   	pop    eax
c0013916:	5a                   	pop    edx
c0013917:	68 07 0c 00 00       	push   0xc07
c001391c:	55                   	push   ebp
c001391d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013923:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013927:	50                   	push   eax
c0013928:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001392f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013935:	6a 00                	push   0x0
c0013937:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001393c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001393f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013945:	e8 a4 67 ff ff       	call   c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001394a:	83 c4 1c             	add    esp,0x1c
c001394d:	68 00 10 00 00       	push   0x1000
c0013952:	6a 00                	push   0x0
c0013954:	53                   	push   ebx
c0013955:	e8 96 cb fe ff       	call   c00004f0 <memset>
c001395a:	83 c4 10             	add    esp,0x10
c001395d:	39 fe                	cmp    esi,edi
c001395f:	77 92                	ja     c00138f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0013961:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013966:	48                   	dec    eax
c0013967:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001396c:	75 01                	jne    c001396f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001396e:	fb                   	sti    
c001396f:	83 ec 0c             	sub    esp,0xc
c0013972:	53                   	push   ebx
c0013973:	e8 c1 5f ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0013978:	83 c4 10             	add    esp,0x10
c001397b:	b0 01                	mov    al,0x1
c001397d:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013983:	5b                   	pop    ebx
c0013984:	5e                   	pop    esi
c0013985:	5f                   	pop    edi
c0013986:	5d                   	pop    ebp
c0013987:	c3                   	ret    

c0013988 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013988:	55                   	push   ebp
c0013989:	57                   	push   edi
c001398a:	56                   	push   esi
c001398b:	53                   	push   ebx
c001398c:	83 ec 48             	sub    esp,0x48
c001398f:	68 14 01 00 00       	push   0x114
c0013994:	e8 15 41 ff ff       	call   c0007aae <malloc>
c0013999:	83 c4 0c             	add    esp,0xc
c001399c:	89 c6                	mov    esi,eax
c001399e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00139a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00139a6:	50                   	push   eax
c00139a7:	e8 c8 75 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c00139ac:	58                   	pop    eax
c00139ad:	5a                   	pop    edx
c00139ae:	6a 01                	push   0x1
c00139b0:	56                   	push   esi
c00139b1:	e8 7a 76 ff ff       	call   c000b030 <File::open(FileOpenMode)>
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	85 c0                	test   eax,eax
c00139bb:	0f 85 43 01 00 00    	jne    c0013b04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139c1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00139c9:	83 ec 0c             	sub    esp,0xc
c00139cc:	6a 34                	push   0x34
c00139ce:	e8 db 40 ff ff       	call   c0007aae <malloc>
c00139d3:	89 c3                	mov    ebx,eax
c00139d5:	58                   	pop    eax
c00139d6:	8b 06                	mov    eax,DWORD PTR [esi]
c00139d8:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00139dc:	57                   	push   edi
c00139dd:	53                   	push   ebx
c00139de:	6a 00                	push   0x0
c00139e0:	6a 34                	push   0x34
c00139e2:	56                   	push   esi
c00139e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139e6:	83 c4 20             	add    esp,0x20
c00139e9:	85 c0                	test   eax,eax
c00139eb:	0f 85 13 01 00 00    	jne    c0013b04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139f1:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00139f7:	0f 85 07 01 00 00    	jne    c0013b04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a00:	85 c0                	test   eax,eax
c0013a02:	0f 84 fc 00 00 00    	je     c0013b04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a08:	31 d2                	xor    edx,edx
c0013a0a:	55                   	push   ebp
c0013a0b:	52                   	push   edx
c0013a0c:	50                   	push   eax
c0013a0d:	56                   	push   esi
c0013a0e:	e8 db 76 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0013a13:	83 c4 10             	add    esp,0x10
c0013a16:	85 c0                	test   eax,eax
c0013a18:	0f 85 e6 00 00 00    	jne    c0013b04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a1e:	83 ec 0c             	sub    esp,0xc
c0013a21:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013a24:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013a2c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a30:	0f af c2             	imul   eax,edx
c0013a33:	50                   	push   eax
c0013a34:	e8 75 40 ff ff       	call   c0007aae <malloc>
c0013a39:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013a3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a3f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a46:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a4a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a4e:	0f af c2             	imul   eax,edx
c0013a51:	99                   	cdq    
c0013a52:	52                   	push   edx
c0013a53:	50                   	push   eax
c0013a54:	56                   	push   esi
c0013a55:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a58:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013a5b:	83 c4 20             	add    esp,0x20
c0013a5e:	85 c0                	test   eax,eax
c0013a60:	0f 84 9e 00 00 00    	je     c0013b04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a66:	31 d2                	xor    edx,edx
c0013a68:	51                   	push   ecx
c0013a69:	52                   	push   edx
c0013a6a:	50                   	push   eax
c0013a6b:	56                   	push   esi
c0013a6c:	e8 7d 76 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0013a71:	83 c4 10             	add    esp,0x10
c0013a74:	85 c0                	test   eax,eax
c0013a76:	0f 85 88 00 00 00    	jne    c0013b04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a7c:	83 ec 0c             	sub    esp,0xc
c0013a7f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a83:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a87:	31 ed                	xor    ebp,ebp
c0013a89:	0f af c2             	imul   eax,edx
c0013a8c:	50                   	push   eax
c0013a8d:	e8 1c 40 ff ff       	call   c0007aae <malloc>
c0013a92:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013a94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a98:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a9f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013aa3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013aa7:	0f af c2             	imul   eax,edx
c0013aaa:	99                   	cdq    
c0013aab:	52                   	push   edx
c0013aac:	50                   	push   eax
c0013aad:	56                   	push   esi
c0013aae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ab1:	83 c4 20             	add    esp,0x20
c0013ab4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013abc:	0f b7 fd             	movzx  edi,bp
c0013abf:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013ac3:	73 7d                	jae    c0013b42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013ac5:	c1 e7 05             	shl    edi,0x5
c0013ac8:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013acc:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013acf:	75 6b                	jne    c0013b3c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013ad1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013ad4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ad8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013adb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013adf:	52                   	push   edx
c0013ae0:	31 d2                	xor    edx,edx
c0013ae2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013ae5:	52                   	push   edx
c0013ae6:	50                   	push   eax
c0013ae7:	56                   	push   esi
c0013ae8:	e8 01 76 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0013aed:	83 c4 10             	add    esp,0x10
c0013af0:	85 c0                	test   eax,eax
c0013af2:	74 17                	je     c0013b0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013af4:	83 ec 0c             	sub    esp,0xc
c0013af7:	68 a5 10 02 c0       	push   0xc00210a5
c0013afc:	e8 f0 6e ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0013b01:	83 c4 10             	add    esp,0x10
c0013b04:	31 c0                	xor    eax,eax
c0013b06:	e9 87 00 00 00       	jmp    c0013b92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013b0b:	83 ec 0c             	sub    esp,0xc
c0013b0e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013b11:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013b14:	50                   	push   eax
c0013b15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013b19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b1d:	56                   	push   esi
c0013b1e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013b22:	e8 d3 fb ff ff       	call   c00136fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013b27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013b2b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013b2f:	83 c4 20             	add    esp,0x20
c0013b32:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013b36:	73 04                	jae    c0013b3c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013b38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b3c:	45                   	inc    ebp
c0013b3d:	e9 7a ff ff ff       	jmp    c0013abc <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013b42:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013b46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b4e:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013b54:	83 ec 0c             	sub    esp,0xc
c0013b57:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013b5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b62:	05 00 10 00 00       	add    eax,0x1000
c0013b67:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b6e:	e8 4b 3f ff ff       	call   c0007abe <free>
c0013b73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b76:	e8 43 3f ff ff       	call   c0007abe <free>
c0013b7b:	58                   	pop    eax
c0013b7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b80:	e8 39 3f ff ff       	call   c0007abe <free>
c0013b85:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b88:	e8 01 75 ff ff       	call   c000b08e <File::close()>
c0013b8d:	83 c4 10             	add    esp,0x10
c0013b90:	b0 01                	mov    al,0x1
c0013b92:	83 c4 3c             	add    esp,0x3c
c0013b95:	5b                   	pop    ebx
c0013b96:	5e                   	pop    esi
c0013b97:	5f                   	pop    edi
c0013b98:	5d                   	pop    ebp
c0013b99:	c3                   	ret    

c0013b9a <Thr::runtimeReferenceHelper()>:
c0013b9a:	83 ec 18             	sub    esp,0x18
c0013b9d:	68 ad 10 02 c0       	push   0xc00210ad
c0013ba2:	e8 4a 6e ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0013ba7:	fa                   	cli    
c0013ba8:	83 c4 10             	add    esp,0x10
c0013bab:	eb fe                	jmp    c0013bab <Thr::runtimeReferenceHelper()+0x11>

c0013bad <Thr::getAddressOfKernelSymbol(char const*)>:
c0013bad:	57                   	push   edi
c0013bae:	56                   	push   esi
c0013baf:	53                   	push   ebx
c0013bb0:	31 db                	xor    ebx,ebx
c0013bb2:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013bb8:	7e 3c                	jle    c0013bf6 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013bba:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013bc1:	31 ff                	xor    edi,edi
c0013bc3:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013bca:	7e 27                	jle    c0013bf3 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013bcc:	50                   	push   eax
c0013bcd:	50                   	push   eax
c0013bce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bd2:	8b 06                	mov    eax,DWORD PTR [esi]
c0013bd4:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013bdb:	50                   	push   eax
c0013bdc:	e8 6f cb fe ff       	call   c0000750 <strcmp>
c0013be1:	83 c4 10             	add    esp,0x10
c0013be4:	85 c0                	test   eax,eax
c0013be6:	75 05                	jne    c0013bed <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013be8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013beb:	eb 0b                	jmp    c0013bf8 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013bed:	83 c6 10             	add    esi,0x10
c0013bf0:	47                   	inc    edi
c0013bf1:	eb d0                	jmp    c0013bc3 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013bf3:	43                   	inc    ebx
c0013bf4:	eb bc                	jmp    c0013bb2 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013bf6:	31 c0                	xor    eax,eax
c0013bf8:	5b                   	pop    ebx
c0013bf9:	5e                   	pop    esi
c0013bfa:	5f                   	pop    edi
c0013bfb:	c3                   	ret    

c0013bfc <Thr::loadKernelSymbolTable(char const*)>:
c0013bfc:	55                   	push   ebp
c0013bfd:	57                   	push   edi
c0013bfe:	56                   	push   esi
c0013bff:	53                   	push   ebx
c0013c00:	83 ec 68             	sub    esp,0x68
c0013c03:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013c09:	68 14 01 00 00       	push   0x114
c0013c0e:	e8 9b 3e ff ff       	call   c0007aae <malloc>
c0013c13:	83 c4 0c             	add    esp,0xc
c0013c16:	89 c3                	mov    ebx,eax
c0013c18:	56                   	push   esi
c0013c19:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013c1d:	50                   	push   eax
c0013c1e:	e8 51 73 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c0013c23:	5e                   	pop    esi
c0013c24:	5f                   	pop    edi
c0013c25:	6a 01                	push   0x1
c0013c27:	53                   	push   ebx
c0013c28:	e8 03 74 ff ff       	call   c000b030 <File::open(FileOpenMode)>
c0013c2d:	83 c4 10             	add    esp,0x10
c0013c30:	85 c0                	test   eax,eax
c0013c32:	74 0a                	je     c0013c3e <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013c34:	83 ec 0c             	sub    esp,0xc
c0013c37:	68 cf 10 02 c0       	push   0xc00210cf
c0013c3c:	eb 34                	jmp    c0013c72 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013c3e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013c46:	83 ec 0c             	sub    esp,0xc
c0013c49:	6a 34                	push   0x34
c0013c4b:	e8 5e 3e ff ff       	call   c0007aae <malloc>
c0013c50:	59                   	pop    ecx
c0013c51:	89 c7                	mov    edi,eax
c0013c53:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013c57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c59:	56                   	push   esi
c0013c5a:	57                   	push   edi
c0013c5b:	6a 00                	push   0x0
c0013c5d:	6a 34                	push   0x34
c0013c5f:	53                   	push   ebx
c0013c60:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c63:	83 c4 20             	add    esp,0x20
c0013c66:	85 c0                	test   eax,eax
c0013c68:	74 17                	je     c0013c81 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013c6a:	83 ec 0c             	sub    esp,0xc
c0013c6d:	68 e6 10 02 c0       	push   0xc00210e6
c0013c72:	e8 a8 cc ff ff       	call   c001091f <KePanic(char const*)>
c0013c77:	83 c4 10             	add    esp,0x10
c0013c7a:	31 c0                	xor    eax,eax
c0013c7c:	e9 31 02 00 00       	jmp    c0013eb2 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013c81:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013c87:	75 e1                	jne    c0013c6a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c89:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013c8c:	85 c0                	test   eax,eax
c0013c8e:	74 da                	je     c0013c6a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c90:	52                   	push   edx
c0013c91:	31 d2                	xor    edx,edx
c0013c93:	52                   	push   edx
c0013c94:	50                   	push   eax
c0013c95:	53                   	push   ebx
c0013c96:	e8 53 74 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0013c9b:	83 c4 10             	add    esp,0x10
c0013c9e:	85 c0                	test   eax,eax
c0013ca0:	75 c8                	jne    c0013c6a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ca2:	83 ec 0c             	sub    esp,0xc
c0013ca5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013ca9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013cad:	31 ed                	xor    ebp,ebp
c0013caf:	0f af c2             	imul   eax,edx
c0013cb2:	50                   	push   eax
c0013cb3:	e8 f6 3d ff ff       	call   c0007aae <malloc>
c0013cb8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013cba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013cbe:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cc5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013cc9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ccd:	0f af c2             	imul   eax,edx
c0013cd0:	99                   	cdq    
c0013cd1:	52                   	push   edx
c0013cd2:	50                   	push   eax
c0013cd3:	53                   	push   ebx
c0013cd4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cd7:	83 c4 20             	add    esp,0x20
c0013cda:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013ce2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013cea:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013cf2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013cfa:	0f b7 f5             	movzx  esi,bp
c0013cfd:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013d01:	0f 83 a7 00 00 00    	jae    c0013dae <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013d07:	6b f6 28             	imul   esi,esi,0x28
c0013d0a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013d0e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013d11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d15:	50                   	push   eax
c0013d16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d1a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013d1e:	8b 16                	mov    edx,DWORD PTR [esi]
c0013d20:	6b c0 28             	imul   eax,eax,0x28
c0013d23:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013d27:	89 d0                	mov    eax,edx
c0013d29:	31 d2                	xor    edx,edx
c0013d2b:	52                   	push   edx
c0013d2c:	50                   	push   eax
c0013d2d:	53                   	push   ebx
c0013d2e:	e8 bb 73 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0013d33:	83 c4 0c             	add    esp,0xc
c0013d36:	6a 20                	push   0x20
c0013d38:	6a 00                	push   0x0
c0013d3a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d3e:	52                   	push   edx
c0013d3f:	e8 ac c7 fe ff       	call   c00004f0 <memset>
c0013d44:	58                   	pop    eax
c0013d45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d47:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013d4b:	51                   	push   ecx
c0013d4c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013d50:	52                   	push   edx
c0013d51:	6a 00                	push   0x0
c0013d53:	6a 1f                	push   0x1f
c0013d55:	53                   	push   ebx
c0013d56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d59:	83 c4 18             	add    esp,0x18
c0013d5c:	68 fd 10 02 c0       	push   0xc00210fd
c0013d61:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d65:	52                   	push   edx
c0013d66:	e8 e5 c9 fe ff       	call   c0000750 <strcmp>
c0013d6b:	83 c4 10             	add    esp,0x10
c0013d6e:	85 c0                	test   eax,eax
c0013d70:	75 0f                	jne    c0013d81 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013d72:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d81:	50                   	push   eax
c0013d82:	50                   	push   eax
c0013d83:	68 05 11 02 c0       	push   0xc0021105
c0013d88:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013d8c:	50                   	push   eax
c0013d8d:	e8 be c9 fe ff       	call   c0000750 <strcmp>
c0013d92:	83 c4 10             	add    esp,0x10
c0013d95:	85 c0                	test   eax,eax
c0013d97:	75 0f                	jne    c0013da8 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013d99:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013da0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013da4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013da8:	45                   	inc    ebp
c0013da9:	e9 4c ff ff ff       	jmp    c0013cfa <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013dae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013db3:	75 10                	jne    c0013dc5 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013db5:	83 ec 0c             	sub    esp,0xc
c0013db8:	68 0d 11 02 c0       	push   0xc002110d
c0013dbd:	e8 5d cb ff ff       	call   c001091f <KePanic(char const*)>
c0013dc2:	83 c4 10             	add    esp,0x10
c0013dc5:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013dca:	75 10                	jne    c0013ddc <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013dcc:	83 ec 0c             	sub    esp,0xc
c0013dcf:	68 0d 11 02 c0       	push   0xc002110d
c0013dd4:	e8 46 cb ff ff       	call   c001091f <KePanic(char const*)>
c0013dd9:	83 c4 10             	add    esp,0x10
c0013ddc:	31 d2                	xor    edx,edx
c0013dde:	50                   	push   eax
c0013ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de3:	52                   	push   edx
c0013de4:	50                   	push   eax
c0013de5:	53                   	push   ebx
c0013de6:	e8 03 73 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0013deb:	5a                   	pop    edx
c0013dec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013df0:	e8 b9 3c ff ff       	call   c0007aae <malloc>
c0013df5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013df9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dfd:	31 c9                	xor    ecx,ecx
c0013dff:	5e                   	pop    esi
c0013e00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e02:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013e06:	55                   	push   ebp
c0013e07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e0b:	51                   	push   ecx
c0013e0c:	52                   	push   edx
c0013e0d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013e11:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013e15:	53                   	push   ebx
c0013e16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e19:	83 c4 14             	add    esp,0x14
c0013e1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e20:	e8 89 3c ff ff       	call   c0007aae <malloc>
c0013e25:	89 c6                	mov    esi,eax
c0013e27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e29:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e2c:	56                   	push   esi
c0013e2d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e31:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013e35:	51                   	push   ecx
c0013e36:	52                   	push   edx
c0013e37:	53                   	push   ebx
c0013e38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e3f:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013e45:	83 c4 1c             	add    esp,0x1c
c0013e48:	c1 e8 04             	shr    eax,0x4
c0013e4b:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013e52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e56:	31 d2                	xor    edx,edx
c0013e58:	52                   	push   edx
c0013e59:	50                   	push   eax
c0013e5a:	53                   	push   ebx
c0013e5b:	e8 8e 72 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0013e60:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013e62:	31 d2                	xor    edx,edx
c0013e64:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e67:	56                   	push   esi
c0013e68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e6c:	52                   	push   edx
c0013e6d:	50                   	push   eax
c0013e6e:	53                   	push   ebx
c0013e6f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e72:	83 c4 14             	add    esp,0x14
c0013e75:	53                   	push   ebx
c0013e76:	e8 13 72 ff ff       	call   c000b08e <File::close()>
c0013e7b:	5d                   	pop    ebp
c0013e7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e80:	e8 39 3c ff ff       	call   c0007abe <free>
c0013e85:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e88:	e8 31 3c ff ff       	call   c0007abe <free>
c0013e8d:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013e92:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013e96:	8d 50 01             	lea    edx,[eax+0x1]
c0013e99:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013ea0:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013ea7:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013ead:	83 c4 10             	add    esp,0x10
c0013eb0:	b0 01                	mov    al,0x1
c0013eb2:	83 c4 5c             	add    esp,0x5c
c0013eb5:	5b                   	pop    ebx
c0013eb6:	5e                   	pop    esi
c0013eb7:	5f                   	pop    edi
c0013eb8:	5d                   	pop    ebp
c0013eb9:	c3                   	ret    

c0013eba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013eba:	55                   	push   ebp
c0013ebb:	57                   	push   edi
c0013ebc:	56                   	push   esi
c0013ebd:	53                   	push   ebx
c0013ebe:	81 ec 68 03 00 00    	sub    esp,0x368
c0013ec4:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013ecb:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013ed1:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0013ed5:	68 14 01 00 00       	push   0x114
c0013eda:	e8 cf 3b ff ff       	call   c0007aae <malloc>
c0013edf:	83 c4 0c             	add    esp,0xc
c0013ee2:	89 c5                	mov    ebp,eax
c0013ee4:	53                   	push   ebx
c0013ee5:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013eec:	50                   	push   eax
c0013eed:	e8 82 70 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c0013ef2:	5e                   	pop    esi
c0013ef3:	5f                   	pop    edi
c0013ef4:	6a 01                	push   0x1
c0013ef6:	55                   	push   ebp
c0013ef7:	e8 34 71 ff ff       	call   c000b030 <File::open(FileOpenMode)>
c0013efc:	83 c4 10             	add    esp,0x10
c0013eff:	85 c0                	test   eax,eax
c0013f01:	0f 85 aa 06 00 00    	jne    c00145b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f07:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013f0f:	83 ec 0c             	sub    esp,0xc
c0013f12:	6a 34                	push   0x34
c0013f14:	e8 95 3b ff ff       	call   c0007aae <malloc>
c0013f19:	5b                   	pop    ebx
c0013f1a:	89 c7                	mov    edi,eax
c0013f1c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013f20:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013f23:	53                   	push   ebx
c0013f24:	57                   	push   edi
c0013f25:	6a 00                	push   0x0
c0013f27:	6a 34                	push   0x34
c0013f29:	55                   	push   ebp
c0013f2a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f2d:	83 c4 20             	add    esp,0x20
c0013f30:	85 c0                	test   eax,eax
c0013f32:	0f 85 79 06 00 00    	jne    c00145b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f38:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013f3e:	0f 85 6d 06 00 00    	jne    c00145b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f44:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013f47:	85 c0                	test   eax,eax
c0013f49:	0f 84 62 06 00 00    	je     c00145b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f4f:	31 d2                	xor    edx,edx
c0013f51:	51                   	push   ecx
c0013f52:	52                   	push   edx
c0013f53:	50                   	push   eax
c0013f54:	55                   	push   ebp
c0013f55:	e8 94 71 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0013f5a:	83 c4 10             	add    esp,0x10
c0013f5d:	85 c0                	test   eax,eax
c0013f5f:	0f 85 4c 06 00 00    	jne    c00145b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f65:	83 ec 0c             	sub    esp,0xc
c0013f68:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013f6b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013f73:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f77:	0f af c2             	imul   eax,edx
c0013f7a:	50                   	push   eax
c0013f7b:	e8 2e 3b ff ff       	call   c0007aae <malloc>
c0013f80:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f8e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f92:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f96:	0f af c2             	imul   eax,edx
c0013f99:	99                   	cdq    
c0013f9a:	52                   	push   edx
c0013f9b:	50                   	push   eax
c0013f9c:	55                   	push   ebp
c0013f9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fa0:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013fa3:	83 c4 20             	add    esp,0x20
c0013fa6:	85 c0                	test   eax,eax
c0013fa8:	0f 84 03 06 00 00    	je     c00145b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013fae:	52                   	push   edx
c0013faf:	31 d2                	xor    edx,edx
c0013fb1:	52                   	push   edx
c0013fb2:	50                   	push   eax
c0013fb3:	55                   	push   ebp
c0013fb4:	e8 35 71 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0013fb9:	83 c4 10             	add    esp,0x10
c0013fbc:	85 c0                	test   eax,eax
c0013fbe:	0f 85 ed 05 00 00    	jne    c00145b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013fcb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013fcf:	31 f6                	xor    esi,esi
c0013fd1:	0f af c2             	imul   eax,edx
c0013fd4:	50                   	push   eax
c0013fd5:	e8 d4 3a ff ff       	call   c0007aae <malloc>
c0013fda:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013fdd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013fe1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fe4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013fe8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013fec:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013ff0:	0f af c2             	imul   eax,edx
c0013ff3:	99                   	cdq    
c0013ff4:	52                   	push   edx
c0013ff5:	50                   	push   eax
c0013ff6:	55                   	push   ebp
c0013ff7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ffa:	83 c4 20             	add    esp,0x20
c0013ffd:	0f b7 de             	movzx  ebx,si
c0014000:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014004:	0f 83 87 00 00 00    	jae    c0014091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001400a:	c1 e3 05             	shl    ebx,0x5
c001400d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014011:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014014:	75 75                	jne    c001408b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014016:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014019:	31 d2                	xor    edx,edx
c001401b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001401f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014022:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014026:	50                   	push   eax
c0014027:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001402a:	52                   	push   edx
c001402b:	50                   	push   eax
c001402c:	55                   	push   ebp
c001402d:	e8 bc 70 ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0014032:	83 c4 10             	add    esp,0x10
c0014035:	85 c0                	test   eax,eax
c0014037:	0f 85 74 05 00 00    	jne    c00145b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001403d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014044:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014047:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001404b:	31 d2                	xor    edx,edx
c001404d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014051:	83 ec 0c             	sub    esp,0xc
c0014054:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014058:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001405f:	50                   	push   eax
c0014060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014068:	52                   	push   edx
c0014069:	50                   	push   eax
c001406a:	55                   	push   ebp
c001406b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001406e:	83 c4 1c             	add    esp,0x1c
c0014071:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014074:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014077:	50                   	push   eax
c0014078:	6a 00                	push   0x0
c001407a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001407e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014082:	50                   	push   eax
c0014083:	e8 68 c4 fe ff       	call   c00004f0 <memset>
c0014088:	83 c4 10             	add    esp,0x10
c001408b:	46                   	inc    esi
c001408c:	e9 6c ff ff ff       	jmp    c0013ffd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014091:	53                   	push   ebx
c0014092:	31 db                	xor    ebx,ebx
c0014094:	68 00 01 00 00       	push   0x100
c0014099:	6a 00                	push   0x0
c001409b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001409f:	50                   	push   eax
c00140a0:	e8 4b c4 fe ff       	call   c00004f0 <memset>
c00140a5:	83 c4 0c             	add    esp,0xc
c00140a8:	68 00 01 00 00       	push   0x100
c00140ad:	6a 00                	push   0x0
c00140af:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00140b6:	50                   	push   eax
c00140b7:	e8 34 c4 fe ff       	call   c00004f0 <memset>
c00140bc:	83 c4 10             	add    esp,0x10
c00140bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00140c7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00140cf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00140d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00140df:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00140e7:	0f b7 f3             	movzx  esi,bx
c00140ea:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00140ee:	0f 83 2d 01 00 00    	jae    c0014221 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00140f4:	6b f6 28             	imul   esi,esi,0x28
c00140f7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00140fb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00140fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014102:	52                   	push   edx
c0014103:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014107:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001410b:	8b 06                	mov    eax,DWORD PTR [esi]
c001410d:	6b d2 28             	imul   edx,edx,0x28
c0014110:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014114:	31 d2                	xor    edx,edx
c0014116:	52                   	push   edx
c0014117:	50                   	push   eax
c0014118:	55                   	push   ebp
c0014119:	e8 d0 6f ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c001411e:	83 c4 0c             	add    esp,0xc
c0014121:	6a 20                	push   0x20
c0014123:	6a 00                	push   0x0
c0014125:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001412c:	51                   	push   ecx
c001412d:	e8 be c3 fe ff       	call   c00004f0 <memset>
c0014132:	59                   	pop    ecx
c0014133:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014136:	8d 54 24 58          	lea    edx,[esp+0x58]
c001413a:	52                   	push   edx
c001413b:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014142:	51                   	push   ecx
c0014143:	6a 00                	push   0x0
c0014145:	6a 1f                	push   0x1f
c0014147:	55                   	push   ebp
c0014148:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001414b:	83 c4 1c             	add    esp,0x1c
c001414e:	6a 09                	push   0x9
c0014150:	68 27 11 02 c0       	push   0xc0021127
c0014155:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001415c:	51                   	push   ecx
c001415d:	e8 1e c2 fe ff       	call   c0000380 <memcmp>
c0014162:	83 c4 10             	add    esp,0x10
c0014165:	85 c0                	test   eax,eax
c0014167:	75 21                	jne    c001418a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001416d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014171:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014175:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014179:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001417c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014183:	89 d0                	mov    eax,edx
c0014185:	40                   	inc    eax
c0014186:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001418a:	50                   	push   eax
c001418b:	6a 09                	push   0x9
c001418d:	68 31 11 02 c0       	push   0xc0021131
c0014192:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014199:	50                   	push   eax
c001419a:	e8 e1 c1 fe ff       	call   c0000380 <memcmp>
c001419f:	83 c4 10             	add    esp,0x10
c00141a2:	85 c0                	test   eax,eax
c00141a4:	75 21                	jne    c00141c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00141a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00141ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141b2:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00141b6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00141b9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00141c0:	89 d0                	mov    eax,edx
c00141c2:	40                   	inc    eax
c00141c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141c7:	50                   	push   eax
c00141c8:	50                   	push   eax
c00141c9:	68 fd 10 02 c0       	push   0xc00210fd
c00141ce:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141d5:	50                   	push   eax
c00141d6:	e8 75 c5 fe ff       	call   c0000750 <strcmp>
c00141db:	83 c4 10             	add    esp,0x10
c00141de:	85 c0                	test   eax,eax
c00141e0:	75 0f                	jne    c00141f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00141e2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00141e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141f1:	50                   	push   eax
c00141f2:	50                   	push   eax
c00141f3:	68 05 11 02 c0       	push   0xc0021105
c00141f8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141ff:	50                   	push   eax
c0014200:	e8 4b c5 fe ff       	call   c0000750 <strcmp>
c0014205:	83 c4 10             	add    esp,0x10
c0014208:	85 c0                	test   eax,eax
c001420a:	75 0f                	jne    c001421b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001420c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001420f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014217:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001421b:	43                   	inc    ebx
c001421c:	e9 c6 fe ff ff       	jmp    c00140e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014221:	31 d2                	xor    edx,edx
c0014223:	50                   	push   eax
c0014224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014228:	52                   	push   edx
c0014229:	50                   	push   eax
c001422a:	55                   	push   ebp
c001422b:	e8 be 6e ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0014230:	58                   	pop    eax
c0014231:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014235:	e8 74 38 ff ff       	call   c0007aae <malloc>
c001423a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001423d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014241:	31 d2                	xor    edx,edx
c0014243:	58                   	pop    eax
c0014244:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014248:	53                   	push   ebx
c0014249:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001424d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014251:	52                   	push   edx
c0014252:	50                   	push   eax
c0014253:	55                   	push   ebp
c0014254:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014257:	83 c4 14             	add    esp,0x14
c001425a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001425e:	e8 4b 38 ff ff       	call   c0007aae <malloc>
c0014263:	31 d2                	xor    edx,edx
c0014265:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014269:	83 c4 0c             	add    esp,0xc
c001426c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014270:	52                   	push   edx
c0014271:	50                   	push   eax
c0014272:	55                   	push   ebp
c0014273:	e8 76 6e ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c0014278:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001427b:	31 d2                	xor    edx,edx
c001427d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014280:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014284:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014288:	52                   	push   edx
c0014289:	50                   	push   eax
c001428a:	55                   	push   ebp
c001428b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001428e:	83 c4 20             	add    esp,0x20
c0014291:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014296:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001429e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00142a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142a6:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00142aa:	0f 84 05 03 00 00    	je     c00145b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00142b0:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00142b7:	31 d2                	xor    edx,edx
c00142b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142bd:	c1 e8 03             	shr    eax,0x3
c00142c0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00142c4:	51                   	push   ecx
c00142c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142c9:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00142cd:	52                   	push   edx
c00142ce:	50                   	push   eax
c00142cf:	55                   	push   ebp
c00142d0:	e8 19 6e ff ff       	call   c000b0ee <File::seek(unsigned long long)>
c00142d5:	5b                   	pop    ebx
c00142d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142da:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00142e1:	e8 c8 37 ff ff       	call   c0007aae <malloc>
c00142e6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142ed:	31 d2                	xor    edx,edx
c00142ef:	5e                   	pop    esi
c00142f0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00142f4:	50                   	push   eax
c00142f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142fd:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014304:	52                   	push   edx
c0014305:	50                   	push   eax
c0014306:	55                   	push   ebp
c0014307:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001430a:	83 c4 20             	add    esp,0x20
c001430d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014315:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014319:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c001431d:	0f 8d 76 02 00 00    	jge    c0014599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014323:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014327:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001432b:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014330:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014337:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001433b:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c001433f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014343:	c1 e8 08             	shr    eax,0x8
c0014346:	89 c6                	mov    esi,eax
c0014348:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001434c:	c1 e6 04             	shl    esi,0x4
c001434f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014353:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014356:	85 db                	test   ebx,ebx
c0014358:	0f 85 b3 00 00 00    	jne    c0014411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001435e:	83 ec 0c             	sub    esp,0xc
c0014361:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014365:	03 06                	add    eax,DWORD PTR [esi]
c0014367:	50                   	push   eax
c0014368:	e8 40 f8 ff ff       	call   c0013bad <Thr::getAddressOfKernelSymbol(char const*)>
c001436d:	83 c4 10             	add    esp,0x10
c0014370:	89 c3                	mov    ebx,eax
c0014372:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014377:	85 c0                	test   eax,eax
c0014379:	0f 85 92 00 00 00    	jne    c0014411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001437f:	83 ec 0c             	sub    esp,0xc
c0014382:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014386:	03 06                	add    eax,DWORD PTR [esi]
c0014388:	50                   	push   eax
c0014389:	e8 7e c7 ff ff       	call   c0010b0c <KeResolveCompatibilitySymbol(char*)>
c001438e:	83 c4 10             	add    esp,0x10
c0014391:	89 c3                	mov    ebx,eax
c0014393:	85 c0                	test   eax,eax
c0014395:	75 7a                	jne    c0014411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014397:	51                   	push   ecx
c0014398:	51                   	push   ecx
c0014399:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001439d:	03 06                	add    eax,DWORD PTR [esi]
c001439f:	50                   	push   eax
c00143a0:	68 3b 11 02 c0       	push   0xc002113b
c00143a5:	e8 47 66 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00143aa:	58                   	pop    eax
c00143ab:	5a                   	pop    edx
c00143ac:	68 55 11 02 c0       	push   0xc0021155
c00143b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143b8:	50                   	push   eax
c00143b9:	e8 82 c2 fe ff       	call   c0000640 <strcpy>
c00143be:	59                   	pop    ecx
c00143bf:	58                   	pop    eax
c00143c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00143c4:	03 06                	add    eax,DWORD PTR [esi]
c00143c6:	50                   	push   eax
c00143c7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143ce:	50                   	push   eax
c00143cf:	e8 6c c4 fe ff       	call   c0000840 <strcat>
c00143d4:	58                   	pop    eax
c00143d5:	5a                   	pop    edx
c00143d6:	68 eb 11 02 c0       	push   0xc00211eb
c00143db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143e2:	50                   	push   eax
c00143e3:	e8 58 c4 fe ff       	call   c0000840 <strcat>
c00143e8:	83 c4 10             	add    esp,0x10
c00143eb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00143f0:	0f 84 5d 01 00 00    	je     c0014553 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014400:	50                   	push   eax
c0014401:	e8 19 c5 ff ff       	call   c001091f <KePanic(char const*)>
c0014406:	83 c4 10             	add    esp,0x10
c0014409:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001440d:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014411:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014416:	83 f8 01             	cmp    eax,0x1
c0014419:	0f 85 8f 00 00 00    	jne    c00144ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c001441f:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014426:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001442a:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001442e:	01 ce                	add    esi,ecx
c0014430:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014438:	0f 94 c0             	sete   al
c001443b:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014443:	0f 94 c2             	sete   dl
c0014446:	09 c2                	or     edx,eax
c0014448:	8b 06                	mov    eax,DWORD PTR [esi]
c001444a:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001444f:	0f b6 d2             	movzx  edx,dl
c0014452:	74 41                	je     c0014495 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014454:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014457:	85 d2                	test   edx,edx
c0014459:	75 15                	jne    c0014470 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001445b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001445f:	66 83 f8 0c          	cmp    ax,0xc
c0014463:	76 05                	jbe    c001446a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014465:	b8 0c 00 00 00       	mov    eax,0xc
c001446a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001446e:	76 37                	jbe    c00144a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014470:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014474:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014479:	0f 84 d4 00 00 00    	je     c0014553 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001447f:	83 ec 0c             	sub    esp,0xc
c0014482:	68 6c 11 02 c0       	push   0xc002116c
c0014487:	e8 93 c4 ff ff       	call   c001091f <KePanic(char const*)>
c001448c:	83 c4 10             	add    esp,0x10
c001448f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014493:	eb 12                	jmp    c00144a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014495:	01 c1                	add    ecx,eax
c0014497:	85 d2                	test   edx,edx
c0014499:	75 0c                	jne    c00144a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001449b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001449f:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144a3:	77 02                	ja     c00144a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00144a5:	01 d9                	add    ecx,ebx
c00144a7:	89 0e                	mov    DWORD PTR [esi],ecx
c00144a9:	e9 e2 00 00 00       	jmp    c0014590 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00144ae:	83 f8 02             	cmp    eax,0x2
c00144b1:	75 77                	jne    c001452a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00144b3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00144ba:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00144be:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00144c2:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00144ca:	74 21                	je     c00144ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00144cc:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00144d4:	74 17                	je     c00144ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00144d6:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00144da:	b8 0a 00 00 00       	mov    eax,0xa
c00144df:	83 fa 0e             	cmp    edx,0xe
c00144e2:	77 03                	ja     c00144e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00144e4:	8d 42 fc             	lea    eax,[edx-0x4]
c00144e7:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144eb:	76 17                	jbe    c0014504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00144ed:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00144f2:	74 5f                	je     c0014553 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00144f4:	83 ec 0c             	sub    esp,0xc
c00144f7:	68 88 11 02 c0       	push   0xc0021188
c00144fc:	e8 1e c4 ff ff       	call   c001091f <KePanic(char const*)>
c0014501:	83 c4 10             	add    esp,0x10
c0014504:	8b 06                	mov    eax,DWORD PTR [esi]
c0014506:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001450b:	74 13                	je     c0014520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c001450d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014511:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014518:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c001451c:	01 d0                	add    eax,edx
c001451e:	eb 04                	jmp    c0014524 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014520:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014524:	01 c3                	add    ebx,eax
c0014526:	89 1e                	mov    DWORD PTR [esi],ebx
c0014528:	eb 66                	jmp    c0014590 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001452a:	52                   	push   edx
c001452b:	52                   	push   edx
c001452c:	50                   	push   eax
c001452d:	68 a4 11 02 c0       	push   0xc00211a4
c0014532:	e8 ba 64 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0014537:	83 c4 10             	add    esp,0x10
c001453a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001453f:	74 12                	je     c0014553 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014541:	83 ec 0c             	sub    esp,0xc
c0014544:	68 af 11 02 c0       	push   0xc00211af
c0014549:	e8 d1 c3 ff ff       	call   c001091f <KePanic(char const*)>
c001454e:	83 c4 10             	add    esp,0x10
c0014551:	eb 3d                	jmp    c0014590 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014553:	83 ec 0c             	sub    esp,0xc
c0014556:	55                   	push   ebp
c0014557:	e8 32 6b ff ff       	call   c000b08e <File::close()>
c001455c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001455f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014562:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014565:	59                   	pop    ecx
c0014566:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001456a:	e8 4f 35 ff ff       	call   c0007abe <free>
c001456f:	5b                   	pop    ebx
c0014570:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014574:	e8 45 35 ff ff       	call   c0007abe <free>
c0014579:	89 3c 24             	mov    DWORD PTR [esp],edi
c001457c:	e8 3d 35 ff ff       	call   c0007abe <free>
c0014581:	5e                   	pop    esi
c0014582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014586:	e8 33 35 ff ff       	call   c0007abe <free>
c001458b:	83 c4 10             	add    esp,0x10
c001458e:	eb 21                	jmp    c00145b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014590:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014594:	e9 7c fd ff ff       	jmp    c0014315 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014599:	83 ec 0c             	sub    esp,0xc
c001459c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145a0:	e8 19 35 ff ff       	call   c0007abe <free>
c00145a5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00145a9:	83 c4 10             	add    esp,0x10
c00145ac:	e9 f1 fc ff ff       	jmp    c00142a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00145b1:	31 c0                	xor    eax,eax
c00145b3:	eb 33                	jmp    c00145e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00145b5:	83 ec 0c             	sub    esp,0xc
c00145b8:	55                   	push   ebp
c00145b9:	e8 d0 6a ff ff       	call   c000b08e <File::close()>
c00145be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00145c1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00145c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145c7:	58                   	pop    eax
c00145c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00145cc:	e8 ed 34 ff ff       	call   c0007abe <free>
c00145d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145d4:	e8 e5 34 ff ff       	call   c0007abe <free>
c00145d9:	5a                   	pop    edx
c00145da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145de:	e8 db 34 ff ff       	call   c0007abe <free>
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	b0 01                	mov    al,0x1
c00145e8:	81 c4 5c 03 00 00    	add    esp,0x35c
c00145ee:	5b                   	pop    ebx
c00145ef:	5e                   	pop    esi
c00145f0:	5f                   	pop    edi
c00145f1:	5d                   	pop    ebp
c00145f2:	c3                   	ret    

c00145f3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00145f3:	56                   	push   esi
c00145f4:	31 d2                	xor    edx,edx
c00145f6:	53                   	push   ebx
c00145f7:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00145fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014601:	39 d3                	cmp    ebx,edx
c0014603:	7e 1b                	jle    c0014620 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014605:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c001460c:	39 c8                	cmp    eax,ecx
c001460e:	77 0d                	ja     c001461d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014610:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c0014617:	01 c6                	add    esi,eax
c0014619:	39 ce                	cmp    esi,ecx
c001461b:	77 05                	ja     c0014622 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001461d:	42                   	inc    edx
c001461e:	eb e1                	jmp    c0014601 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014620:	31 c0                	xor    eax,eax
c0014622:	5b                   	pop    ebx
c0014623:	5e                   	pop    esi
c0014624:	c3                   	ret    

c0014625 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014625:	53                   	push   ebx
c0014626:	31 c0                	xor    eax,eax
c0014628:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001462c:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014632:	39 c3                	cmp    ebx,eax
c0014634:	7e 22                	jle    c0014658 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014636:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c001463d:	39 ca                	cmp    edx,ecx
c001463f:	77 14                	ja     c0014655 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014641:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c0014648:	39 ca                	cmp    edx,ecx
c001464a:	76 09                	jbe    c0014655 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001464c:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c0014653:	eb 05                	jmp    c001465a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014655:	40                   	inc    eax
c0014656:	eb da                	jmp    c0014632 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014658:	31 c0                	xor    eax,eax
c001465a:	5b                   	pop    ebx
c001465b:	c3                   	ret    

c001465c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001465c:	53                   	push   ebx
c001465d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014661:	53                   	push   ebx
c0014662:	e8 8c ff ff ff       	call   c00145f3 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014667:	5a                   	pop    edx
c0014668:	31 d2                	xor    edx,edx
c001466a:	85 c0                	test   eax,eax
c001466c:	74 04                	je     c0014672 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001466e:	89 da                	mov    edx,ebx
c0014670:	29 c2                	sub    edx,eax
c0014672:	89 d0                	mov    eax,edx
c0014674:	5b                   	pop    ebx
c0014675:	c3                   	ret    

c0014676 <Thr::loadDLL(char const*, bool)>:
c0014676:	55                   	push   ebp
c0014677:	57                   	push   edi
c0014678:	56                   	push   esi
c0014679:	53                   	push   ebx
c001467a:	81 ec 34 01 00 00    	sub    esp,0x134
c0014680:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014687:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001468e:	56                   	push   esi
c001468f:	68 c7 11 02 c0       	push   0xc00211c7
c0014694:	e8 58 63 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0014699:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00146a0:	e8 09 34 ff ff       	call   c0007aae <malloc>
c00146a5:	83 c4 0c             	add    esp,0xc
c00146a8:	89 c3                	mov    ebx,eax
c00146aa:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00146b0:	56                   	push   esi
c00146b1:	50                   	push   eax
c00146b2:	e8 bd 68 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c00146b7:	83 c4 10             	add    esp,0x10
c00146ba:	85 db                	test   ebx,ebx
c00146bc:	75 3c                	jne    c00146fa <Thr::loadDLL(char const*, bool)+0x84>
c00146be:	89 f8                	mov    eax,edi
c00146c0:	84 c0                	test   al,al
c00146c2:	0f 84 d2 01 00 00    	je     c001489a <Thr::loadDLL(char const*, bool)+0x224>
c00146c8:	55                   	push   ebp
c00146c9:	55                   	push   ebp
c00146ca:	68 d8 11 02 c0       	push   0xc00211d8
c00146cf:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00146d3:	55                   	push   ebp
c00146d4:	e8 67 bf fe ff       	call   c0000640 <strcpy>
c00146d9:	58                   	pop    eax
c00146da:	5a                   	pop    edx
c00146db:	56                   	push   esi
c00146dc:	55                   	push   ebp
c00146dd:	e8 5e c1 fe ff       	call   c0000840 <strcat>
c00146e2:	59                   	pop    ecx
c00146e3:	58                   	pop    eax
c00146e4:	68 eb 11 02 c0       	push   0xc00211eb
c00146e9:	55                   	push   ebp
c00146ea:	e8 51 c1 fe ff       	call   c0000840 <strcat>
c00146ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00146f2:	e8 28 c2 ff ff       	call   c001091f <KePanic(char const*)>
c00146f7:	83 c4 10             	add    esp,0x10
c00146fa:	51                   	push   ecx
c00146fb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00146ff:	50                   	push   eax
c0014700:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014704:	50                   	push   eax
c0014705:	53                   	push   ebx
c0014706:	e8 d1 6b ff ff       	call   c000b2dc <File::stat(unsigned long long*, bool*)>
c001470b:	83 c4 10             	add    esp,0x10
c001470e:	85 db                	test   ebx,ebx
c0014710:	74 0c                	je     c001471e <Thr::loadDLL(char const*, bool)+0xa8>
c0014712:	83 ec 0c             	sub    esp,0xc
c0014715:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014717:	53                   	push   ebx
c0014718:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001471b:	83 c4 10             	add    esp,0x10
c001471e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014723:	75 0a                	jne    c001472f <Thr::loadDLL(char const*, bool)+0xb9>
c0014725:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014729:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001472d:	75 3c                	jne    c001476b <Thr::loadDLL(char const*, bool)+0xf5>
c001472f:	89 f8                	mov    eax,edi
c0014731:	84 c0                	test   al,al
c0014733:	0f 84 49 01 00 00    	je     c0014882 <Thr::loadDLL(char const*, bool)+0x20c>
c0014739:	51                   	push   ecx
c001473a:	51                   	push   ecx
c001473b:	68 d8 11 02 c0       	push   0xc00211d8
c0014740:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014744:	53                   	push   ebx
c0014745:	e8 f6 be fe ff       	call   c0000640 <strcpy>
c001474a:	5d                   	pop    ebp
c001474b:	58                   	pop    eax
c001474c:	56                   	push   esi
c001474d:	53                   	push   ebx
c001474e:	e8 ed c0 fe ff       	call   c0000840 <strcat>
c0014753:	58                   	pop    eax
c0014754:	5a                   	pop    edx
c0014755:	68 eb 11 02 c0       	push   0xc00211eb
c001475a:	53                   	push   ebx
c001475b:	e8 e0 c0 fe ff       	call   c0000840 <strcat>
c0014760:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014763:	e8 b7 c1 ff ff       	call   c001091f <KePanic(char const*)>
c0014768:	83 c4 10             	add    esp,0x10
c001476b:	52                   	push   edx
c001476c:	6a 03                	push   0x3
c001476e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014772:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014776:	05 ff 0f 00 00       	add    eax,0xfff
c001477b:	83 d2 00             	adc    edx,0x0
c001477e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014782:	50                   	push   eax
c0014783:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014789:	e8 7c 56 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c001478e:	59                   	pop    ecx
c001478f:	89 c3                	mov    ebx,eax
c0014791:	5d                   	pop    ebp
c0014792:	50                   	push   eax
c0014793:	68 f2 fc 01 c0       	push   0xc001fcf2
c0014798:	e8 54 62 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001479d:	89 34 24             	mov    DWORD PTR [esp],esi
c00147a0:	e8 cb bd fe ff       	call   c0000570 <strlen>
c00147a5:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c00147ab:	40                   	inc    eax
c00147ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00147af:	e8 fa 32 ff ff       	call   c0007aae <malloc>
c00147b4:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c00147bb:	58                   	pop    eax
c00147bc:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00147c1:	5a                   	pop    edx
c00147c2:	56                   	push   esi
c00147c3:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c00147ca:	e8 71 be fe ff       	call   c0000640 <strcpy>
c00147cf:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00147d4:	8d 50 01             	lea    edx,[eax+0x1]
c00147d7:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c00147de:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c00147e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00147e8:	83 c4 0c             	add    esp,0xc
c00147eb:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c00147f2:	6a 01                	push   0x1
c00147f4:	53                   	push   ebx
c00147f5:	56                   	push   esi
c00147f6:	e8 bf f6 ff ff       	call   c0013eba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00147fb:	83 c4 10             	add    esp,0x10
c00147fe:	0f b6 c0             	movzx  eax,al
c0014801:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014805:	85 c0                	test   eax,eax
c0014807:	0f 85 89 00 00 00    	jne    c0014896 <Thr::loadDLL(char const*, bool)+0x220>
c001480d:	89 f8                	mov    eax,edi
c001480f:	84 c0                	test   al,al
c0014811:	74 73                	je     c0014886 <Thr::loadDLL(char const*, bool)+0x210>
c0014813:	83 ec 0c             	sub    esp,0xc
c0014816:	68 ed 11 02 c0       	push   0xc00211ed
c001481b:	e8 ff c0 ff ff       	call   c001091f <KePanic(char const*)>
c0014820:	83 c4 10             	add    esp,0x10
c0014823:	eb 61                	jmp    c0014886 <Thr::loadDLL(char const*, bool)+0x210>
c0014825:	50                   	push   eax
c0014826:	50                   	push   eax
c0014827:	89 e8                	mov    eax,ebp
c0014829:	c1 e0 0c             	shl    eax,0xc
c001482c:	01 d8                	add    eax,ebx
c001482e:	50                   	push   eax
c001482f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014835:	e8 e0 50 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c001483a:	83 c4 10             	add    esp,0x10
c001483d:	8b 00                	mov    eax,DWORD PTR [eax]
c001483f:	a8 60                	test   al,0x60
c0014841:	75 11                	jne    c0014854 <Thr::loadDLL(char const*, bool)+0x1de>
c0014843:	83 ec 0c             	sub    esp,0xc
c0014846:	25 00 f0 ff ff       	and    eax,0xfffff000
c001484b:	50                   	push   eax
c001484c:	e8 f9 34 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0014851:	83 c4 10             	add    esp,0x10
c0014854:	45                   	inc    ebp
c0014855:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014859:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001485d:	05 ff 0f 00 00       	add    eax,0xfff
c0014862:	bf 00 00 00 00       	mov    edi,0x0
c0014867:	83 d2 00             	adc    edx,0x0
c001486a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001486e:	c1 ea 0c             	shr    edx,0xc
c0014871:	39 c5                	cmp    ebp,eax
c0014873:	89 d1                	mov    ecx,edx
c0014875:	89 f8                	mov    eax,edi
c0014877:	19 c8                	sbb    eax,ecx
c0014879:	72 aa                	jb     c0014825 <Thr::loadDLL(char const*, bool)+0x1af>
c001487b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014880:	75 18                	jne    c001489a <Thr::loadDLL(char const*, bool)+0x224>
c0014882:	31 db                	xor    ebx,ebx
c0014884:	eb 14                	jmp    c001489a <Thr::loadDLL(char const*, bool)+0x224>
c0014886:	83 ec 0c             	sub    esp,0xc
c0014889:	68 0c 12 02 c0       	push   0xc002120c
c001488e:	e8 8c c0 ff ff       	call   c001091f <KePanic(char const*)>
c0014893:	83 c4 10             	add    esp,0x10
c0014896:	31 ed                	xor    ebp,ebp
c0014898:	eb bb                	jmp    c0014855 <Thr::loadDLL(char const*, bool)+0x1df>
c001489a:	81 c4 2c 01 00 00    	add    esp,0x12c
c00148a0:	89 d8                	mov    eax,ebx
c00148a2:	5b                   	pop    ebx
c00148a3:	5e                   	pop    esi
c00148a4:	5f                   	pop    edi
c00148a5:	5d                   	pop    ebp
c00148a6:	c3                   	ret    

c00148a7 <Thr::executeDLL(unsigned long, void*)>:
c00148a7:	56                   	push   esi
c00148a8:	53                   	push   ebx
c00148a9:	52                   	push   edx
c00148aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00148b2:	85 db                	test   ebx,ebx
c00148b4:	75 10                	jne    c00148c6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00148b6:	83 ec 0c             	sub    esp,0xc
c00148b9:	68 28 12 02 c0       	push   0xc0021228
c00148be:	e8 5c c0 ff ff       	call   c001091f <KePanic(char const*)>
c00148c3:	83 c4 10             	add    esp,0x10
c00148c6:	50                   	push   eax
c00148c7:	50                   	push   eax
c00148c8:	53                   	push   ebx
c00148c9:	68 52 12 02 c0       	push   0xc0021252
c00148ce:	e8 1e 61 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00148d3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00148d7:	89 d8                	mov    eax,ebx
c00148d9:	83 c4 14             	add    esp,0x14
c00148dc:	5b                   	pop    ebx
c00148dd:	5e                   	pop    esi
c00148de:	ff e0                	jmp    eax

c00148e0 <userModeEntryPoint(void*)>:
c00148e0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00148e5:	83 e8 01             	sub    eax,0x1
c00148e8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00148ed:	75 01                	jne    c00148f0 <userModeEntryPoint(void*)+0x10>
c00148ef:	fb                   	sti    
c00148f0:	fb                   	sti    
c00148f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148f9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00148ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014903:	e9 37 b9 fe ff       	jmp    c000023f <goToUsermode>

c0014908 <changeTSS>:
c0014908:	83 ec 14             	sub    esp,0x14
c001490b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014910:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014913:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014918:	c1 e2 15             	shl    edx,0x15
c001491b:	29 d0                	sub    eax,edx
c001491d:	50                   	push   eax
c001491e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014923:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014929:	05 7c 11 00 00       	add    eax,0x117c
c001492e:	50                   	push   eax
c001492f:	e8 30 46 ff ff       	call   c0008f64 <TSS::setESP(unsigned long)>
c0014934:	83 c4 1c             	add    esp,0x1c
c0014937:	c3                   	ret    

c0014938 <switchToThread(ThreadControlBlock*)>:
c0014938:	57                   	push   edi
c0014939:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001493f:	56                   	push   esi
c0014940:	85 c9                	test   ecx,ecx
c0014942:	53                   	push   ebx
c0014943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014947:	0f 85 8b 00 00 00    	jne    c00149d8 <switchToThread(ThreadControlBlock*)+0xa0>
c001494d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014951:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014957:	74 7b                	je     c00149d4 <switchToThread(ThreadControlBlock*)+0x9c>
c0014959:	b8 00 04 00 00       	mov    eax,0x400
c001495e:	29 d0                	sub    eax,edx
c0014960:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014963:	d1 f8                	sar    eax,1
c0014965:	01 d0                	add    eax,edx
c0014967:	90                   	nop
c0014968:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001496b:	e8 ae 27 00 00       	call   c001711e <HalQueryPerformanceCounter()>
c0014970:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c0014975:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c001497b:	89 c6                	mov    esi,eax
c001497d:	89 d7                	mov    edi,edx
c001497f:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0014985:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c001498a:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014990:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014996:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c001499c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149a2:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c00149a8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00149ab:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00149ae:	01 c6                	add    esi,eax
c00149b0:	11 d7                	adc    edi,edx
c00149b2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00149b5:	83 ec 0c             	sub    esp,0xc
c00149b8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00149bb:	53                   	push   ebx
c00149bc:	e8 b6 b8 fe ff       	call   c0000277 <switchToThreadASM>
c00149c1:	0f 20 c0             	mov    eax,cr0
c00149c4:	83 c8 08             	or     eax,0x8
c00149c7:	0f 22 c0             	mov    cr0,eax
c00149ca:	83 c4 10             	add    esp,0x10
c00149cd:	5b                   	pop    ebx
c00149ce:	5e                   	pop    esi
c00149cf:	5f                   	pop    edi
c00149d0:	c3                   	ret    
c00149d1:	8d 76 00             	lea    esi,[esi+0x0]
c00149d4:	31 c0                	xor    eax,eax
c00149d6:	eb 90                	jmp    c0014968 <switchToThread(ThreadControlBlock*)+0x30>
c00149d8:	5b                   	pop    ebx
c00149d9:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00149e3:	5e                   	pop    esi
c00149e4:	5f                   	pop    edi
c00149e5:	c3                   	ret    
c00149e6:	66 90                	xchg   ax,ax

c00149e8 <Process::addArgs(char**)>:
c00149e8:	57                   	push   edi
c00149e9:	56                   	push   esi
c00149ea:	53                   	push   ebx
c00149eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00149f3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00149fd:	85 ff                	test   edi,edi
c00149ff:	74 4f                	je     c0014a50 <Process::addArgs(char**)+0x68>
c0014a01:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a03:	85 c0                	test   eax,eax
c0014a05:	74 49                	je     c0014a50 <Process::addArgs(char**)+0x68>
c0014a07:	31 db                	xor    ebx,ebx
c0014a09:	8d 76 00             	lea    esi,[esi+0x0]
c0014a0c:	83 ec 0c             	sub    esp,0xc
c0014a0f:	50                   	push   eax
c0014a10:	e8 5b bb fe ff       	call   c0000570 <strlen>
c0014a15:	83 c0 01             	add    eax,0x1
c0014a18:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a1b:	e8 8e 30 ff ff       	call   c0007aae <malloc>
c0014a20:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014a27:	5a                   	pop    edx
c0014a28:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014a2b:	59                   	pop    ecx
c0014a2c:	83 c3 01             	add    ebx,0x1
c0014a2f:	52                   	push   edx
c0014a30:	50                   	push   eax
c0014a31:	e8 0a bc fe ff       	call   c0000640 <strcpy>
c0014a36:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014a3c:	83 c4 10             	add    esp,0x10
c0014a3f:	83 c1 01             	add    ecx,0x1
c0014a42:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014a48:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014a4b:	85 c0                	test   eax,eax
c0014a4d:	75 bd                	jne    c0014a0c <Process::addArgs(char**)+0x24>
c0014a4f:	90                   	nop
c0014a50:	5b                   	pop    ebx
c0014a51:	5e                   	pop    esi
c0014a52:	5f                   	pop    edi
c0014a53:	c3                   	ret    

c0014a54 <Process::Process(char const*, Process*, char**)>:
c0014a54:	56                   	push   esi
c0014a55:	53                   	push   ebx
c0014a56:	83 ec 14             	sub    esp,0x14
c0014a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a5d:	05 0c 02 00 00       	add    eax,0x20c
c0014a62:	bb 07 00 00 00       	mov    ebx,0x7
c0014a67:	89 c6                	mov    esi,eax
c0014a69:	8d 76 00             	lea    esi,[esi+0x0]
c0014a6c:	85 db                	test   ebx,ebx
c0014a6e:	78 14                	js     c0014a84 <Process::Process(char const*, Process*, char**)+0x30>
c0014a70:	83 ec 0c             	sub    esp,0xc
c0014a73:	56                   	push   esi
c0014a74:	e8 0f a5 00 00       	call   c001ef88 <ThreadControlBlock::ThreadControlBlock()>
c0014a79:	83 c4 10             	add    esp,0x10
c0014a7c:	83 c6 5f             	add    esi,0x5f
c0014a7f:	83 eb 01             	sub    ebx,0x1
c0014a82:	eb e8                	jmp    c0014a6c <Process::Process(char const*, Process*, char**)+0x18>
c0014a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a88:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a93:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014a9a:	83 ec 0c             	sub    esp,0xc
c0014a9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014aa1:	e8 6e bc ff ff       	call   c0010714 <Krnl::newProcessEnv(Process*)>
c0014aa6:	83 c4 10             	add    esp,0x10
c0014aa9:	89 c2                	mov    edx,eax
c0014aab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aaf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014ac2:	a1 20 24 02 c0       	mov    eax,ds:0xc0022420
c0014ac7:	8d 50 01             	lea    edx,[eax+0x1]
c0014aca:	89 15 20 24 02 c0    	mov    DWORD PTR ds:0xc0022420,edx
c0014ad0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ad4:	89 02                	mov    DWORD PTR [edx],eax
c0014ad6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014ade:	83 ec 0c             	sub    esp,0xc
c0014ae1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ae5:	e8 c4 2f ff ff       	call   c0007aae <malloc>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	89 c3                	mov    ebx,eax
c0014aef:	83 ec 08             	sub    esp,0x8
c0014af2:	6a 00                	push   0x0
c0014af4:	53                   	push   ebx
c0014af5:	e8 ea 56 ff ff       	call   c000a1e4 <VAS::VAS(bool)>
c0014afa:	83 c4 10             	add    esp,0x10
c0014afd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b01:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014b07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b0b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014b15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b1d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014b23:	e8 12 c2 ff ff       	call   c0010d3a <KeInitSignals()>
c0014b28:	89 c2                	mov    edx,eax
c0014b2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b2e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b3e:	85 c0                	test   eax,eax
c0014b40:	74 42                	je     c0014b84 <Process::Process(char const*, Process*, char**)+0x130>
c0014b42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b46:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b4c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b56:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b60:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b70:	05 0c 01 00 00       	add    eax,0x10c
c0014b75:	83 ec 08             	sub    esp,0x8
c0014b78:	52                   	push   edx
c0014b79:	50                   	push   eax
c0014b7a:	e8 c1 ba fe ff       	call   c0000640 <strcpy>
c0014b7f:	83 c4 10             	add    esp,0x10
c0014b82:	eb 64                	jmp    c0014be8 <Process::Process(char const*, Process*, char**)+0x194>
c0014b84:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014b8c:	83 ec 0c             	sub    esp,0xc
c0014b8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b93:	e8 16 2f ff ff       	call   c0007aae <malloc>
c0014b98:	83 c4 10             	add    esp,0x10
c0014b9b:	89 c3                	mov    ebx,eax
c0014b9d:	83 ec 08             	sub    esp,0x8
c0014ba0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ba4:	53                   	push   ebx
c0014ba5:	e8 a6 40 ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0014baa:	83 c4 10             	add    esp,0x10
c0014bad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bb1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014bb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bbb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bc1:	83 ec 0c             	sub    esp,0xc
c0014bc4:	50                   	push   eax
c0014bc5:	e8 24 39 ff ff       	call   c00084ee <addToTerminalCycle(VgaText*)>
c0014bca:	83 c4 10             	add    esp,0x10
c0014bcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bd1:	05 0c 01 00 00       	add    eax,0x10c
c0014bd6:	83 ec 08             	sub    esp,0x8
c0014bd9:	68 71 12 02 c0       	push   0xc0021271
c0014bde:	50                   	push   eax
c0014bdf:	e8 5c ba fe ff       	call   c0000640 <strcpy>
c0014be4:	83 c4 10             	add    esp,0x10
c0014be7:	90                   	nop
c0014be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bec:	83 c0 0c             	add    eax,0xc
c0014bef:	83 ec 08             	sub    esp,0x8
c0014bf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bf6:	50                   	push   eax
c0014bf7:	e8 44 ba fe ff       	call   c0000640 <strcpy>
c0014bfc:	83 c4 10             	add    esp,0x10
c0014bff:	83 ec 08             	sub    esp,0x8
c0014c02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014c06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c0a:	e8 d9 fd ff ff       	call   c00149e8 <Process::addArgs(char**)>
c0014c0f:	83 c4 10             	add    esp,0x10
c0014c12:	83 ec 08             	sub    esp,0x8
c0014c15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c1d:	e8 66 ed ff ff       	call   c0013988 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014c22:	83 c4 10             	add    esp,0x10
c0014c25:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014c29:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014c2d:	83 f0 01             	xor    eax,0x1
c0014c30:	88 c2                	mov    dl,al
c0014c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c36:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014c3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014c41:	83 ec 04             	sub    esp,0x4
c0014c44:	50                   	push   eax
c0014c45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c49:	68 c8 12 02 c0       	push   0xc00212c8
c0014c4e:	e8 9e 5d ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0014c53:	83 c4 10             	add    esp,0x10
c0014c56:	90                   	nop
c0014c57:	83 c4 14             	add    esp,0x14
c0014c5a:	5b                   	pop    ebx
c0014c5b:	5e                   	pop    esi
c0014c5c:	c3                   	ret    
c0014c5d:	90                   	nop
c0014c5e:	66 90                	xchg   ax,ax

c0014c60 <Process::Process(bool, char const*, Process*, char**)>:
c0014c60:	56                   	push   esi
c0014c61:	53                   	push   ebx
c0014c62:	83 ec 24             	sub    esp,0x24
c0014c65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c69:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014c6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c71:	05 0c 02 00 00       	add    eax,0x20c
c0014c76:	bb 07 00 00 00       	mov    ebx,0x7
c0014c7b:	89 c6                	mov    esi,eax
c0014c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c80:	85 db                	test   ebx,ebx
c0014c82:	78 14                	js     c0014c98 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014c84:	83 ec 0c             	sub    esp,0xc
c0014c87:	56                   	push   esi
c0014c88:	e8 fb a2 00 00       	call   c001ef88 <ThreadControlBlock::ThreadControlBlock()>
c0014c8d:	83 c4 10             	add    esp,0x10
c0014c90:	83 c6 5f             	add    esi,0x5f
c0014c93:	83 eb 01             	sub    ebx,0x1
c0014c96:	eb e8                	jmp    c0014c80 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014c98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c9c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014ca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ca7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014cae:	83 ec 0c             	sub    esp,0xc
c0014cb1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014cb5:	e8 5a ba ff ff       	call   c0010714 <Krnl::newProcessEnv(Process*)>
c0014cba:	83 c4 10             	add    esp,0x10
c0014cbd:	89 c2                	mov    edx,eax
c0014cbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ccd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014cd6:	a1 20 24 02 c0       	mov    eax,ds:0xc0022420
c0014cdb:	8d 50 01             	lea    edx,[eax+0x1]
c0014cde:	89 15 20 24 02 c0    	mov    DWORD PTR ds:0xc0022420,edx
c0014ce4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014ce8:	89 02                	mov    DWORD PTR [edx],eax
c0014cea:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014cf2:	83 ec 0c             	sub    esp,0xc
c0014cf5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014cf9:	e8 b0 2d ff ff       	call   c0007aae <malloc>
c0014cfe:	83 c4 10             	add    esp,0x10
c0014d01:	89 c3                	mov    ebx,eax
c0014d03:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014d08:	83 ec 08             	sub    esp,0x8
c0014d0b:	50                   	push   eax
c0014d0c:	53                   	push   ebx
c0014d0d:	e8 d2 54 ff ff       	call   c000a1e4 <VAS::VAS(bool)>
c0014d12:	83 c4 10             	add    esp,0x10
c0014d15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d19:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014d1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d23:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014d2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d35:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014d3b:	e8 fa bf ff ff       	call   c0010d3a <KeInitSignals()>
c0014d40:	89 c2                	mov    edx,eax
c0014d42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d46:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014d4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d50:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d56:	85 c0                	test   eax,eax
c0014d58:	74 42                	je     c0014d9c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014d5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d5e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d64:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014d6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d6e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014d74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d78:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d7e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014d84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d88:	05 0c 01 00 00       	add    eax,0x10c
c0014d8d:	83 ec 08             	sub    esp,0x8
c0014d90:	52                   	push   edx
c0014d91:	50                   	push   eax
c0014d92:	e8 a9 b8 fe ff       	call   c0000640 <strcpy>
c0014d97:	83 c4 10             	add    esp,0x10
c0014d9a:	eb 64                	jmp    c0014e00 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014d9c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014da4:	83 ec 0c             	sub    esp,0xc
c0014da7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014dab:	e8 fe 2c ff ff       	call   c0007aae <malloc>
c0014db0:	83 c4 10             	add    esp,0x10
c0014db3:	89 c3                	mov    ebx,eax
c0014db5:	83 ec 08             	sub    esp,0x8
c0014db8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014dbc:	53                   	push   ebx
c0014dbd:	e8 8e 3e ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0014dc2:	83 c4 10             	add    esp,0x10
c0014dc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dc9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014dcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dd9:	83 ec 0c             	sub    esp,0xc
c0014ddc:	50                   	push   eax
c0014ddd:	e8 0c 37 ff ff       	call   c00084ee <addToTerminalCycle(VgaText*)>
c0014de2:	83 c4 10             	add    esp,0x10
c0014de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014de9:	05 0c 01 00 00       	add    eax,0x10c
c0014dee:	83 ec 08             	sub    esp,0x8
c0014df1:	68 71 12 02 c0       	push   0xc0021271
c0014df6:	50                   	push   eax
c0014df7:	e8 44 b8 fe ff       	call   c0000640 <strcpy>
c0014dfc:	83 c4 10             	add    esp,0x10
c0014dff:	90                   	nop
c0014e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e04:	83 c0 0c             	add    eax,0xc
c0014e07:	83 ec 08             	sub    esp,0x8
c0014e0a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e0e:	50                   	push   eax
c0014e0f:	e8 2c b8 fe ff       	call   c0000640 <strcpy>
c0014e14:	83 c4 10             	add    esp,0x10
c0014e17:	83 ec 08             	sub    esp,0x8
c0014e1a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014e1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014e22:	e8 c1 fb ff ff       	call   c00149e8 <Process::addArgs(char**)>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	90                   	nop
c0014e2b:	83 c4 24             	add    esp,0x24
c0014e2e:	5b                   	pop    ebx
c0014e2f:	5e                   	pop    esi
c0014e30:	c3                   	ret    
c0014e31:	8d 76 00             	lea    esi,[esi+0x0]

c0014e34 <taskStartupFunction>:
c0014e34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e39:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014e3c:	c3                   	ret    
c0014e3d:	90                   	nop
c0014e3e:	66 90                	xchg   ax,ax

c0014e40 <Semaphore::Semaphore(int)>:
c0014e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e48:	89 10                	mov    DWORD PTR [eax],edx
c0014e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e4e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014e55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014e60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014e6b:	90                   	nop
c0014e6c:	c3                   	ret    
c0014e6d:	90                   	nop
c0014e6e:	66 90                	xchg   ax,ax

c0014e70 <Mutex::Mutex()>:
c0014e70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e74:	6a 01                	push   0x1
c0014e76:	50                   	push   eax
c0014e77:	e8 c4 ff ff ff       	call   c0014e40 <Semaphore::Semaphore(int)>
c0014e7c:	83 c4 08             	add    esp,0x8
c0014e7f:	90                   	nop
c0014e80:	c3                   	ret    
c0014e81:	90                   	nop
c0014e82:	66 90                	xchg   ax,ax

c0014e84 <Process::createThread(void (*)(void*), void*, int)>:
c0014e84:	57                   	push   edi
c0014e85:	31 c9                	xor    ecx,ecx
c0014e87:	56                   	push   esi
c0014e88:	53                   	push   ebx
c0014e89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e8d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014e94:	89 f2                	mov    edx,esi
c0014e96:	66 90                	xchg   ax,ax
c0014e98:	0f b7 c2             	movzx  eax,dx
c0014e9b:	80 e2 01             	and    dl,0x1
c0014e9e:	74 14                	je     c0014eb4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014ea0:	d1 f8                	sar    eax,1
c0014ea2:	83 c1 01             	add    ecx,0x1
c0014ea5:	89 c2                	mov    edx,eax
c0014ea7:	83 f9 10             	cmp    ecx,0x10
c0014eaa:	75 ec                	jne    c0014e98 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014eac:	31 db                	xor    ebx,ebx
c0014eae:	89 d8                	mov    eax,ebx
c0014eb0:	5b                   	pop    ebx
c0014eb1:	5e                   	pop    esi
c0014eb2:	5f                   	pop    edi
c0014eb3:	c3                   	ret    
c0014eb4:	b8 01 00 00 00       	mov    eax,0x1
c0014eb9:	d3 e0                	shl    eax,cl
c0014ebb:	09 c6                	or     esi,eax
c0014ebd:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014ec0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014ec7:	01 c0                	add    eax,eax
c0014ec9:	01 c8                	add    eax,ecx
c0014ecb:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ece:	01 d8                	add    eax,ebx
c0014ed0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014ed7:	75 0b                	jne    c0014ee4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014ed9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014ee3:	90                   	nop
c0014ee4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014eea:	83 ec 0c             	sub    esp,0xc
c0014eed:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014ef0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014ef3:	01 c0                	add    eax,eax
c0014ef5:	01 c8                	add    eax,ecx
c0014ef7:	8d 3c 80             	lea    edi,[eax+eax*4]
c0014efa:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0014efd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014f03:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0014f09:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f0d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014f13:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014f19:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014f1f:	89 ca                	mov    edx,ecx
c0014f21:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014f28:	f7 da                	neg    edx
c0014f2a:	c1 e2 15             	shl    edx,0x15
c0014f2d:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014f33:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014f39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014f3d:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014f47:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014f4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014f51:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014f57:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014f61:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014f6b:	68 00 01 00 00       	push   0x100
c0014f70:	e8 39 2b ff ff       	call   c0007aae <malloc>
c0014f75:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014f78:	58                   	pop    eax
c0014f79:	5a                   	pop    edx
c0014f7a:	53                   	push   ebx
c0014f7b:	68 84 81 02 c0       	push   0xc0028184
c0014f80:	e8 9b 9d 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f85:	83 c4 10             	add    esp,0x10
c0014f88:	89 d8                	mov    eax,ebx
c0014f8a:	5b                   	pop    ebx
c0014f8b:	5e                   	pop    esi
c0014f8c:	5f                   	pop    edi
c0014f8d:	c3                   	ret    
c0014f8e:	66 90                	xchg   ax,ax

c0014f90 <Process::createUserThread()>:
c0014f90:	83 ec 0c             	sub    esp,0xc
c0014f93:	68 80 00 00 00       	push   0x80
c0014f98:	6a 00                	push   0x0
c0014f9a:	68 e0 48 01 c0       	push   0xc00148e0
c0014f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014fa3:	50                   	push   eax
c0014fa4:	e8 db fe ff ff       	call   c0014e84 <Process::createThread(void (*)(void*), void*, int)>
c0014fa9:	83 c4 1c             	add    esp,0x1c
c0014fac:	c3                   	ret    
c0014fad:	8d 76 00             	lea    esi,[esi+0x0]

c0014fb0 <setupMultitasking(void (*)())>:
c0014fb0:	56                   	push   esi
c0014fb1:	53                   	push   ebx
c0014fb2:	83 ec 04             	sub    esp,0x4
c0014fb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014fb9:	eb 11                	jmp    c0014fcc <setupMultitasking(void (*)())+0x1c>
c0014fbb:	90                   	nop
c0014fbc:	83 ec 0c             	sub    esp,0xc
c0014fbf:	68 84 81 02 c0       	push   0xc0028184
c0014fc4:	e8 9b 9c 00 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014fc9:	83 c4 10             	add    esp,0x10
c0014fcc:	83 ec 0c             	sub    esp,0xc
c0014fcf:	68 84 81 02 c0       	push   0xc0028184
c0014fd4:	e8 67 9c 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014fd9:	83 c4 10             	add    esp,0x10
c0014fdc:	84 c0                	test   al,al
c0014fde:	74 dc                	je     c0014fbc <setupMultitasking(void (*)())+0xc>
c0014fe0:	83 ec 0c             	sub    esp,0xc
c0014fe3:	68 24 07 00 00       	push   0x724
c0014fe8:	e8 c1 2a ff ff       	call   c0007aae <malloc>
c0014fed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ff4:	89 c3                	mov    ebx,eax
c0014ff6:	6a 00                	push   0x0
c0014ff8:	68 75 12 02 c0       	push   0xc0021275
c0014ffd:	6a 01                	push   0x1
c0014fff:	50                   	push   eax
c0015000:	e8 5b fc ff ff       	call   c0014c60 <Process::Process(bool, char const*, Process*, char**)>
c0015005:	83 c4 14             	add    esp,0x14
c0015008:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001500e:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0015014:	50                   	push   eax
c0015015:	e8 29 37 ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c001501a:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015021:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001502b:	83 c8 01             	or     eax,0x1
c001502e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015035:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001503b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001503e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015048:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001504e:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015054:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001505e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015068:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015072:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015078:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015082:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015088:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015092:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015099:	e8 10 2a ff ff       	call   c0007aae <malloc>
c001509e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00150a4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00150aa:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00150b0:	5a                   	pop    edx
c00150b1:	59                   	pop    ecx
c00150b2:	68 71 12 02 c0       	push   0xc0021271
c00150b7:	50                   	push   eax
c00150b8:	e8 83 b5 fe ff       	call   c0000640 <strcpy>
c00150bd:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00150c4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00150c8:	83 c4 14             	add    esp,0x14
c00150cb:	5b                   	pop    ebx
c00150cc:	5e                   	pop    esi
c00150cd:	e9 97 b1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00150d2:	66 90                	xchg   ax,ax

c00150d4 <schedule()>:
c00150d4:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c00150da:	85 d2                	test   edx,edx
c00150dc:	74 0e                	je     c00150ec <schedule()+0x18>
c00150de:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00150e8:	c3                   	ret    
c00150e9:	8d 76 00             	lea    esi,[esi+0x0]
c00150ec:	53                   	push   ebx
c00150ed:	83 ec 14             	sub    esp,0x14
c00150f0:	68 84 81 02 c0       	push   0xc0028184
c00150f5:	e8 46 9b 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00150fa:	83 c4 10             	add    esp,0x10
c00150fd:	84 c0                	test   al,al
c00150ff:	75 3f                	jne    c0015140 <schedule()+0x6c>
c0015101:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015106:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015109:	83 fa 01             	cmp    edx,0x1
c001510c:	74 3a                	je     c0015148 <schedule()+0x74>
c001510e:	66 90                	xchg   ax,ax
c0015110:	83 ec 0c             	sub    esp,0xc
c0015113:	68 84 81 02 c0       	push   0xc0028184
c0015118:	e8 3f 9b 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001511d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015124:	89 c3                	mov    ebx,eax
c0015126:	e8 39 9b 00 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001512b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015132:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015135:	e8 fe f7 ff ff       	call   c0014938 <switchToThread(ThreadControlBlock*)>
c001513a:	83 c4 10             	add    esp,0x10
c001513d:	8d 76 00             	lea    esi,[esi+0x0]
c0015140:	83 c4 08             	add    esp,0x8
c0015143:	5b                   	pop    ebx
c0015144:	c3                   	ret    
c0015145:	8d 76 00             	lea    esi,[esi+0x0]
c0015148:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001514f:	83 ec 08             	sub    esp,0x8
c0015152:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015157:	50                   	push   eax
c0015158:	68 84 81 02 c0       	push   0xc0028184
c001515d:	e8 be 9b 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015162:	83 c4 10             	add    esp,0x10
c0015165:	eb a9                	jmp    c0015110 <schedule()+0x3c>
c0015167:	90                   	nop

c0015168 <Semaphore::tryAcquire()>:
c0015168:	53                   	push   ebx
c0015169:	83 ec 08             	sub    esp,0x8
c001516c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015170:	fa                   	cli    
c0015171:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015176:	8d 50 01             	lea    edx,[eax+0x1]
c0015179:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001517f:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015185:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015188:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c001518e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015191:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015193:	7c 33                	jl     c00151c8 <Semaphore::tryAcquire()+0x60>
c0015195:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c001519b:	85 d2                	test   edx,edx
c001519d:	75 0d                	jne    c00151ac <Semaphore::tryAcquire()+0x44>
c001519f:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00151a5:	85 d2                	test   edx,edx
c00151a7:	75 6f                	jne    c0015218 <Semaphore::tryAcquire()+0xb0>
c00151a9:	8d 76 00             	lea    esi,[esi+0x0]
c00151ac:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151b1:	85 c0                	test   eax,eax
c00151b3:	74 0b                	je     c00151c0 <Semaphore::tryAcquire()+0x58>
c00151b5:	8d 76 00             	lea    esi,[esi+0x0]
c00151b8:	31 c0                	xor    eax,eax
c00151ba:	83 c4 08             	add    esp,0x8
c00151bd:	5b                   	pop    ebx
c00151be:	c3                   	ret    
c00151bf:	90                   	nop
c00151c0:	fb                   	sti    
c00151c1:	83 c4 08             	add    esp,0x8
c00151c4:	5b                   	pop    ebx
c00151c5:	c3                   	ret    
c00151c6:	66 90                	xchg   ax,ax
c00151c8:	83 c3 01             	add    ebx,0x1
c00151cb:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c00151d1:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00151d4:	85 d2                	test   edx,edx
c00151d6:	75 24                	jne    c00151fc <Semaphore::tryAcquire()+0x94>
c00151d8:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c00151de:	85 c9                	test   ecx,ecx
c00151e0:	74 1a                	je     c00151fc <Semaphore::tryAcquire()+0x94>
c00151e2:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00151ec:	e8 e3 fe ff ff       	call   c00150d4 <schedule()>
c00151f1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151f6:	83 e8 01             	sub    eax,0x1
c00151f9:	8d 76 00             	lea    esi,[esi+0x0]
c00151fc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015201:	85 c0                	test   eax,eax
c0015203:	75 0b                	jne    c0015210 <Semaphore::tryAcquire()+0xa8>
c0015205:	fb                   	sti    
c0015206:	b0 01                	mov    al,0x1
c0015208:	83 c4 08             	add    esp,0x8
c001520b:	5b                   	pop    ebx
c001520c:	c3                   	ret    
c001520d:	8d 76 00             	lea    esi,[esi+0x0]
c0015210:	b0 01                	mov    al,0x1
c0015212:	83 c4 08             	add    esp,0x8
c0015215:	5b                   	pop    ebx
c0015216:	c3                   	ret    
c0015217:	90                   	nop
c0015218:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015222:	e8 ad fe ff ff       	call   c00150d4 <schedule()>
c0015227:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001522c:	83 e8 01             	sub    eax,0x1
c001522f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015234:	85 c0                	test   eax,eax
c0015236:	75 80                	jne    c00151b8 <Semaphore::tryAcquire()+0x50>
c0015238:	eb 86                	jmp    c00151c0 <Semaphore::tryAcquire()+0x58>
c001523a:	66 90                	xchg   ax,ax

c001523c <Semaphore::assertLocked(char const*)>:
c001523c:	83 ec 0c             	sub    esp,0xc
c001523f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015243:	fa                   	cli    
c0015244:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001524a:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001524f:	83 c1 01             	add    ecx,0x1
c0015252:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015258:	8d 48 01             	lea    ecx,[eax+0x1]
c001525b:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015261:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015263:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015266:	7c 28                	jl     c0015290 <Semaphore::assertLocked(char const*)+0x54>
c0015268:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001526d:	85 c0                	test   eax,eax
c001526f:	75 0b                	jne    c001527c <Semaphore::assertLocked(char const*)+0x40>
c0015271:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015276:	85 c0                	test   eax,eax
c0015278:	75 32                	jne    c00152ac <Semaphore::assertLocked(char const*)+0x70>
c001527a:	66 90                	xchg   ax,ax
c001527c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015281:	83 e8 01             	sub    eax,0x1
c0015284:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015289:	75 01                	jne    c001528c <Semaphore::assertLocked(char const*)+0x50>
c001528b:	fb                   	sti    
c001528c:	83 c4 0c             	add    esp,0xc
c001528f:	c3                   	ret    
c0015290:	83 ec 0c             	sub    esp,0xc
c0015293:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015297:	52                   	push   edx
c0015298:	e8 82 b6 ff ff       	call   c001091f <KePanic(char const*)>
c001529d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00152a2:	83 c4 10             	add    esp,0x10
c00152a5:	83 e8 01             	sub    eax,0x1
c00152a8:	eb be                	jmp    c0015268 <Semaphore::assertLocked(char const*)+0x2c>
c00152aa:	66 90                	xchg   ax,ax
c00152ac:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00152b6:	e8 19 fe ff ff       	call   c00150d4 <schedule()>
c00152bb:	eb bf                	jmp    c001527c <Semaphore::assertLocked(char const*)+0x40>
c00152bd:	8d 76 00             	lea    esi,[esi+0x0]

c00152c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00152c0:	83 ec 0c             	sub    esp,0xc
c00152c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00152cf:	e8 00 fe ff ff       	call   c00150d4 <schedule()>
c00152d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152d9:	83 e8 01             	sub    eax,0x1
c00152dc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152e1:	75 01                	jne    c00152e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00152e3:	fb                   	sti    
c00152e4:	83 c4 0c             	add    esp,0xc
c00152e7:	c3                   	ret    

c00152e8 <blockTask(TaskState)>:
c00152e8:	83 ec 0c             	sub    esp,0xc
c00152eb:	fa                   	cli    
c00152ec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152f5:	83 c0 01             	add    eax,0x1
c00152f8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015302:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015305:	e8 ca fd ff ff       	call   c00150d4 <schedule()>
c001530a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001530f:	83 e8 01             	sub    eax,0x1
c0015312:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015317:	75 03                	jne    c001531c <blockTask(TaskState)+0x34>
c0015319:	fb                   	sti    
c001531a:	66 90                	xchg   ax,ax
c001531c:	83 c4 0c             	add    esp,0xc
c001531f:	c3                   	ret    

c0015320 <waitTask(int, int*, int)>:
c0015320:	83 ec 18             	sub    esp,0x18
c0015323:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015328:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001532c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001532f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015338:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001533b:	6a 07                	push   0x7
c001533d:	e8 a6 ff ff ff       	call   c00152e8 <blockTask(TaskState)>
c0015342:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001534d:	85 d2                	test   edx,edx
c001534f:	74 0b                	je     c001535c <waitTask(int, int*, int)+0x3c>
c0015351:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015354:	89 02                	mov    DWORD PTR [edx],eax
c0015356:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001535b:	90                   	nop
c001535c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001535f:	83 c4 0c             	add    esp,0xc
c0015362:	c3                   	ret    
c0015363:	90                   	nop

c0015364 <milliTenthSleepUntil(unsigned int)>:
c0015364:	83 ec 0c             	sub    esp,0xc
c0015367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001536b:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c0015371:	76 05                	jbe    c0015378 <milliTenthSleepUntil(unsigned int)+0x14>
c0015373:	90                   	nop
c0015374:	83 c4 0c             	add    esp,0xc
c0015377:	c3                   	ret    
c0015378:	fa                   	cli    
c0015379:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001537f:	83 ec 08             	sub    esp,0x8
c0015382:	83 c2 01             	add    edx,0x1
c0015385:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001538b:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015391:	83 c1 01             	add    ecx,0x1
c0015394:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001539a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00153a0:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00153a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a8:	50                   	push   eax
c00153a9:	68 78 81 02 c0       	push   0xc0028178
c00153ae:	e8 6d 99 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00153b3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00153ba:	e8 29 ff ff ff       	call   c00152e8 <blockTask(TaskState)>
c00153bf:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153c4:	83 c4 10             	add    esp,0x10
c00153c7:	83 e8 01             	sub    eax,0x1
c00153ca:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153cf:	85 c0                	test   eax,eax
c00153d1:	75 09                	jne    c00153dc <milliTenthSleepUntil(unsigned int)+0x78>
c00153d3:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153d8:	85 c0                	test   eax,eax
c00153da:	75 14                	jne    c00153f0 <milliTenthSleepUntil(unsigned int)+0x8c>
c00153dc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153e1:	83 e8 01             	sub    eax,0x1
c00153e4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153e9:	75 89                	jne    c0015374 <milliTenthSleepUntil(unsigned int)+0x10>
c00153eb:	fb                   	sti    
c00153ec:	83 c4 0c             	add    esp,0xc
c00153ef:	c3                   	ret    
c00153f0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00153fa:	e8 d5 fc ff ff       	call   c00150d4 <schedule()>
c00153ff:	eb db                	jmp    c00153dc <milliTenthSleepUntil(unsigned int)+0x78>
c0015401:	8d 76 00             	lea    esi,[esi+0x0]

c0015404 <milliTenthSleep(unsigned int)>:
c0015404:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015408:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c001540d:	01 c2                	add    edx,eax
c001540f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015413:	e9 4c ff ff ff       	jmp    c0015364 <milliTenthSleepUntil(unsigned int)>

c0015418 <sleep(unsigned int)>:
c0015418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001541c:	8d 04 80             	lea    eax,[eax+eax*4]
c001541f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015422:	8d 04 80             	lea    eax,[eax+eax*4]
c0015425:	8d 04 80             	lea    eax,[eax+eax*4]
c0015428:	c1 e0 04             	shl    eax,0x4
c001542b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001542f:	eb d3                	jmp    c0015404 <milliTenthSleep(unsigned int)>
c0015431:	90                   	nop
c0015432:	66 90                	xchg   ax,ax

c0015434 <Semaphore::acquire()>:
c0015434:	83 ec 0c             	sub    esp,0xc
c0015437:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001543b:	fa                   	cli    
c001543c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015441:	83 c0 01             	add    eax,0x1
c0015444:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015449:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001544e:	8d 48 01             	lea    ecx,[eax+0x1]
c0015451:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015457:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001545a:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001545c:	7d 2e                	jge    c001548c <Semaphore::acquire()+0x58>
c001545e:	83 c1 01             	add    ecx,0x1
c0015461:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015464:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015469:	85 c0                	test   eax,eax
c001546b:	75 0b                	jne    c0015478 <Semaphore::acquire()+0x44>
c001546d:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015472:	85 c0                	test   eax,eax
c0015474:	75 66                	jne    c00154dc <Semaphore::acquire()+0xa8>
c0015476:	66 90                	xchg   ax,ax
c0015478:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001547d:	83 e8 01             	sub    eax,0x1
c0015480:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015485:	75 01                	jne    c0015488 <Semaphore::acquire()+0x54>
c0015487:	fb                   	sti    
c0015488:	83 c4 0c             	add    esp,0xc
c001548b:	c3                   	ret    
c001548c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015491:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015498:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001549b:	85 c9                	test   ecx,ecx
c001549d:	74 51                	je     c00154f0 <Semaphore::acquire()+0xbc>
c001549f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00154a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00154a8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00154ab:	90                   	nop
c00154ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b1:	83 ec 0c             	sub    esp,0xc
c00154b4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00154b7:	68 f4 12 02 c0       	push   0xc00212f4
c00154bc:	e8 30 55 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00154c1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00154c8:	e8 1b fe ff ff       	call   c00152e8 <blockTask(TaskState)>
c00154cd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00154d2:	83 c4 10             	add    esp,0x10
c00154d5:	83 e8 01             	sub    eax,0x1
c00154d8:	eb 8a                	jmp    c0015464 <Semaphore::acquire()+0x30>
c00154da:	66 90                	xchg   ax,ax
c00154dc:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00154e6:	e8 e9 fb ff ff       	call   c00150d4 <schedule()>
c00154eb:	eb 8b                	jmp    c0015478 <Semaphore::acquire()+0x44>
c00154ed:	8d 76 00             	lea    esi,[esi+0x0]
c00154f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00154f8:	eb b2                	jmp    c00154ac <Semaphore::acquire()+0x78>
c00154fa:	66 90                	xchg   ax,ax

c00154fc <taskReturned>:
c00154fc:	83 ec 18             	sub    esp,0x18
c00154ff:	68 14 13 02 c0       	push   0xc0021314
c0015504:	e8 16 b4 ff ff       	call   c001091f <KePanic(char const*)>
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	83 ec 0c             	sub    esp,0xc
c001550f:	6a 02                	push   0x2
c0015511:	e8 d2 fd ff ff       	call   c00152e8 <blockTask(TaskState)>
c0015516:	fa                   	cli    
c0015517:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001551c:	83 c0 01             	add    eax,0x1
c001551f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015524:	e8 ab fb ff ff       	call   c00150d4 <schedule()>
c0015529:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001552e:	83 c4 10             	add    esp,0x10
c0015531:	83 e8 01             	sub    eax,0x1
c0015534:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015539:	85 c0                	test   eax,eax
c001553b:	75 cf                	jne    c001550c <taskReturned+0x10>
c001553d:	fb                   	sti    
c001553e:	eb cc                	jmp    c001550c <taskReturned+0x10>

c0015540 <Thr::processFromPID(int)>:
c0015540:	57                   	push   edi
c0015541:	56                   	push   esi
c0015542:	53                   	push   ebx
c0015543:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015547:	fa                   	cli    
c0015548:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001554e:	83 ec 0c             	sub    esp,0xc
c0015551:	83 c1 01             	add    ecx,0x1
c0015554:	68 84 81 02 c0       	push   0xc0028184
c0015559:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c001555f:	e8 f8 96 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015564:	83 c4 10             	add    esp,0x10
c0015567:	89 c7                	mov    edi,eax
c0015569:	eb 15                	jmp    c0015580 <Thr::processFromPID(int)+0x40>
c001556b:	90                   	nop
c001556c:	83 ec 0c             	sub    esp,0xc
c001556f:	68 84 81 02 c0       	push   0xc0028184
c0015574:	e8 e3 96 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	39 f8                	cmp    eax,edi
c001557e:	74 50                	je     c00155d0 <Thr::processFromPID(int)+0x90>
c0015580:	83 ec 0c             	sub    esp,0xc
c0015583:	68 84 81 02 c0       	push   0xc0028184
c0015588:	e8 cf 96 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001558d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015594:	89 c3                	mov    ebx,eax
c0015596:	e8 c9 96 00 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001559b:	58                   	pop    eax
c001559c:	5a                   	pop    edx
c001559d:	53                   	push   ebx
c001559e:	68 84 81 02 c0       	push   0xc0028184
c00155a3:	e8 78 97 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155ab:	83 c4 10             	add    esp,0x10
c00155ae:	39 30                	cmp    DWORD PTR [eax],esi
c00155b0:	75 ba                	jne    c001556c <Thr::processFromPID(int)+0x2c>
c00155b2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155b7:	83 e8 01             	sub    eax,0x1
c00155ba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155bf:	74 0b                	je     c00155cc <Thr::processFromPID(int)+0x8c>
c00155c1:	8d 76 00             	lea    esi,[esi+0x0]
c00155c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155c7:	5b                   	pop    ebx
c00155c8:	5e                   	pop    esi
c00155c9:	5f                   	pop    edi
c00155ca:	c3                   	ret    
c00155cb:	90                   	nop
c00155cc:	fb                   	sti    
c00155cd:	eb f5                	jmp    c00155c4 <Thr::processFromPID(int)+0x84>
c00155cf:	90                   	nop
c00155d0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155d5:	83 e8 01             	sub    eax,0x1
c00155d8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155dd:	75 05                	jne    c00155e4 <Thr::processFromPID(int)+0xa4>
c00155df:	fb                   	sti    
c00155e0:	5b                   	pop    ebx
c00155e1:	5e                   	pop    esi
c00155e2:	5f                   	pop    edi
c00155e3:	c3                   	ret    
c00155e4:	5b                   	pop    ebx
c00155e5:	31 c0                	xor    eax,eax
c00155e7:	5e                   	pop    esi
c00155e8:	5f                   	pop    edi
c00155e9:	c3                   	ret    
c00155ea:	66 90                	xchg   ax,ax

c00155ec <unblockTask(ThreadControlBlock*)>:
c00155ec:	53                   	push   ebx
c00155ed:	83 ec 08             	sub    esp,0x8
c00155f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155f4:	fa                   	cli    
c00155f5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155fa:	83 c0 01             	add    eax,0x1
c00155fd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015602:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015605:	85 c0                	test   eax,eax
c0015607:	74 67                	je     c0015670 <unblockTask(ThreadControlBlock*)+0x84>
c0015609:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001560c:	83 f8 01             	cmp    eax,0x1
c001560f:	74 37                	je     c0015648 <unblockTask(ThreadControlBlock*)+0x5c>
c0015611:	83 ec 0c             	sub    esp,0xc
c0015614:	68 84 81 02 c0       	push   0xc0028184
c0015619:	e8 3e 96 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001561e:	83 c4 10             	add    esp,0x10
c0015621:	85 c0                	test   eax,eax
c0015623:	75 1b                	jne    c0015640 <unblockTask(ThreadControlBlock*)+0x54>
c0015625:	eb 5d                	jmp    c0015684 <unblockTask(ThreadControlBlock*)+0x98>
c0015627:	90                   	nop
c0015628:	83 ec 08             	sub    esp,0x8
c001562b:	50                   	push   eax
c001562c:	68 84 81 02 c0       	push   0xc0028184
c0015631:	e8 46 99 00 00       	call   c001ef7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	85 c0                	test   eax,eax
c001563b:	74 47                	je     c0015684 <unblockTask(ThreadControlBlock*)+0x98>
c001563d:	8d 76 00             	lea    esi,[esi+0x0]
c0015640:	39 c3                	cmp    ebx,eax
c0015642:	75 e4                	jne    c0015628 <unblockTask(ThreadControlBlock*)+0x3c>
c0015644:	eb 12                	jmp    c0015658 <unblockTask(ThreadControlBlock*)+0x6c>
c0015646:	66 90                	xchg   ax,ax
c0015648:	83 ec 0c             	sub    esp,0xc
c001564b:	68 93 12 02 c0       	push   0xc0021293
c0015650:	e8 9c 53 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0015655:	83 c4 10             	add    esp,0x10
c0015658:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001565d:	83 e8 01             	sub    eax,0x1
c0015660:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015665:	75 01                	jne    c0015668 <unblockTask(ThreadControlBlock*)+0x7c>
c0015667:	fb                   	sti    
c0015668:	83 c4 08             	add    esp,0x8
c001566b:	5b                   	pop    ebx
c001566c:	c3                   	ret    
c001566d:	8d 76 00             	lea    esi,[esi+0x0]
c0015670:	83 ec 0c             	sub    esp,0xc
c0015673:	68 7c 12 02 c0       	push   0xc002127c
c0015678:	e8 74 53 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001567d:	83 c4 10             	add    esp,0x10
c0015680:	eb d6                	jmp    c0015658 <unblockTask(ThreadControlBlock*)+0x6c>
c0015682:	66 90                	xchg   ax,ax
c0015684:	83 ec 08             	sub    esp,0x8
c0015687:	53                   	push   ebx
c0015688:	68 84 81 02 c0       	push   0xc0028184
c001568d:	e8 8e 96 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015692:	83 c4 10             	add    esp,0x10
c0015695:	eb c1                	jmp    c0015658 <unblockTask(ThreadControlBlock*)+0x6c>
c0015697:	90                   	nop

c0015698 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015698:	55                   	push   ebp
c0015699:	57                   	push   edi
c001569a:	56                   	push   esi
c001569b:	53                   	push   ebx
c001569c:	83 ec 1c             	sub    esp,0x1c
c001569f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00156a3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156a6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00156ac:	85 ed                	test   ebp,ebp
c00156ae:	7e 28                	jle    c00156d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00156b0:	31 f6                	xor    esi,esi
c00156b2:	66 90                	xchg   ax,ax
c00156b4:	83 ec 0c             	sub    esp,0xc
c00156b7:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00156be:	83 c6 01             	add    esi,0x1
c00156c1:	57                   	push   edi
c00156c2:	e8 f7 23 ff ff       	call   c0007abe <free>
c00156c7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156ca:	83 c4 10             	add    esp,0x10
c00156cd:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00156d3:	7f df                	jg     c00156b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00156d5:	8d 76 00             	lea    esi,[esi+0x0]
c00156d8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156e2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156e7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00156ea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00156ed:	d3 c0                	rol    eax,cl
c00156ef:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00156f6:	21 c8                	and    eax,ecx
c00156f8:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00156ff:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015702:	89 f7                	mov    edi,esi
c0015704:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001570c:	0f 85 72 01 00 00    	jne    c0015884 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015712:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015718:	85 ed                	test   ebp,ebp
c001571a:	74 1c                	je     c0015738 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001571c:	83 ec 0c             	sub    esp,0xc
c001571f:	55                   	push   ebp
c0015720:	e8 0b af ff ff       	call   c0010630 <EnvVarContainer::~EnvVarContainer()>
c0015725:	59                   	pop    ecx
c0015726:	5e                   	pop    esi
c0015727:	6a 0c                	push   0xc
c0015729:	55                   	push   ebp
c001572a:	e8 95 51 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001572f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015732:	83 c4 10             	add    esp,0x10
c0015735:	89 f7                	mov    edi,esi
c0015737:	90                   	nop
c0015738:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001573e:	85 c0                	test   eax,eax
c0015740:	0f 84 b2 00 00 00    	je     c00157f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015746:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015749:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001574d:	31 c9                	xor    ecx,ecx
c001574f:	eb 17                	jmp    c0015768 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015751:	8d 76 00             	lea    esi,[esi+0x0]
c0015754:	83 c1 01             	add    ecx,0x1
c0015757:	83 f9 10             	cmp    ecx,0x10
c001575a:	0f 84 98 00 00 00    	je     c00157f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015760:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015766:	66 90                	xchg   ax,ax
c0015768:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001576f:	d3 fa                	sar    edx,cl
c0015771:	80 e2 01             	and    dl,0x1
c0015774:	74 de                	je     c0015754 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015776:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015779:	01 d2                	add    edx,edx
c001577b:	01 ca                	add    edx,ecx
c001577d:	8d 14 92             	lea    edx,[edx+edx*4]
c0015780:	01 d0                	add    eax,edx
c0015782:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015788:	83 fd 07             	cmp    ebp,0x7
c001578b:	75 c7                	jne    c0015754 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001578d:	05 40 02 00 00       	add    eax,0x240
c0015792:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015795:	83 fd ff             	cmp    ebp,0xffffffff
c0015798:	0f 8c ee 00 00 00    	jl     c001588c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001579e:	0f 84 ac 01 00 00    	je     c0015950 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00157a4:	85 ed                	test   ebp,ebp
c00157a6:	0f 84 90 01 00 00    	je     c001593c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00157ac:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00157ae:	75 a4                	jne    c0015754 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00157b0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00157b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00157ba:	01 d0                	add    eax,edx
c00157bc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00157c0:	83 ec 0c             	sub    esp,0xc
c00157c3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00157c9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157cc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157d2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00157d9:	50                   	push   eax
c00157da:	e8 0d fe ff ff       	call   c00155ec <unblockTask(ThreadControlBlock*)>
c00157df:	83 c4 10             	add    esp,0x10
c00157e2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157e9:	89 f7                	mov    edi,esi
c00157eb:	83 c1 01             	add    ecx,0x1
c00157ee:	83 f9 10             	cmp    ecx,0x10
c00157f1:	0f 85 69 ff ff ff    	jne    c0015760 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00157f7:	90                   	nop
c00157f8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00157fe:	85 c0                	test   eax,eax
c0015800:	74 62                	je     c0015864 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015802:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015808:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001580e:	74 54                	je     c0015864 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015810:	83 ec 0c             	sub    esp,0xc
c0015813:	68 84 81 02 c0       	push   0xc0028184
c0015818:	e8 3f 94 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001581d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015824:	89 c7                	mov    edi,eax
c0015826:	e8 15 94 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001582b:	83 c4 10             	add    esp,0x10
c001582e:	84 c0                	test   al,al
c0015830:	0f 84 ce 00 00 00    	je     c0015904 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015836:	66 90                	xchg   ax,ax
c0015838:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001583b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015841:	85 d2                	test   edx,edx
c0015843:	74 0f                	je     c0015854 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015845:	83 ec 0c             	sub    esp,0xc
c0015848:	8b 02                	mov    eax,DWORD PTR [edx]
c001584a:	52                   	push   edx
c001584b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001584e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015851:	83 c4 10             	add    esp,0x10
c0015854:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001585e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015861:	8d 76 00             	lea    esi,[esi+0x0]
c0015864:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001586a:	85 db                	test   ebx,ebx
c001586c:	74 16                	je     c0015884 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001586e:	83 ec 0c             	sub    esp,0xc
c0015871:	53                   	push   ebx
c0015872:	e8 1f 43 ff ff       	call   c0009b96 <VAS::~VAS()>
c0015877:	58                   	pop    eax
c0015878:	5a                   	pop    edx
c0015879:	6a 14                	push   0x14
c001587b:	53                   	push   ebx
c001587c:	e8 43 50 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c0015881:	83 c4 10             	add    esp,0x10
c0015884:	83 c4 1c             	add    esp,0x1c
c0015887:	5b                   	pop    ebx
c0015888:	5e                   	pop    esi
c0015889:	5f                   	pop    edi
c001588a:	5d                   	pop    ebp
c001588b:	c3                   	ret    
c001588c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015890:	83 ec 0c             	sub    esp,0xc
c0015893:	68 48 13 02 c0       	push   0xc0021348
c0015898:	e8 82 b0 ff ff       	call   c001091f <KePanic(char const*)>
c001589d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158a0:	83 c4 10             	add    esp,0x10
c00158a3:	89 f7                	mov    edi,esi
c00158a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158a9:	e9 a6 fe ff ff       	jmp    c0015754 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00158ae:	66 90                	xchg   ax,ax
c00158b0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158b6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00158bc:	75 1e                	jne    c00158dc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00158be:	83 ec 0c             	sub    esp,0xc
c00158c1:	68 b0 13 02 c0       	push   0xc00213b0
c00158c6:	e8 26 51 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00158cb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00158d2:	e8 11 fa ff ff       	call   c00152e8 <blockTask(TaskState)>
c00158d7:	83 c4 10             	add    esp,0x10
c00158da:	66 90                	xchg   ax,ax
c00158dc:	83 ec 08             	sub    esp,0x8
c00158df:	56                   	push   esi
c00158e0:	68 84 81 02 c0       	push   0xc0028184
c00158e5:	e8 36 94 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158ea:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00158f1:	e8 66 93 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158f6:	83 c4 10             	add    esp,0x10
c00158f9:	39 f8                	cmp    eax,edi
c00158fb:	0f 84 37 ff ff ff    	je     c0015838 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015901:	8d 76 00             	lea    esi,[esi+0x0]
c0015904:	83 ec 0c             	sub    esp,0xc
c0015907:	68 84 81 02 c0       	push   0xc0028184
c001590c:	e8 4b 93 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015911:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015918:	89 c6                	mov    esi,eax
c001591a:	e8 45 93 00 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001591f:	83 c4 10             	add    esp,0x10
c0015922:	39 f3                	cmp    ebx,esi
c0015924:	74 b6                	je     c00158dc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015926:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015929:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001592c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015932:	75 a8                	jne    c00158dc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015934:	e9 77 ff ff ff       	jmp    c00158b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015939:	8d 76 00             	lea    esi,[esi+0x0]
c001593c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015940:	83 ec 0c             	sub    esp,0xc
c0015943:	68 7c 13 02 c0       	push   0xc002137c
c0015948:	e9 4b ff ff ff       	jmp    c0015898 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c001594d:	8d 76 00             	lea    esi,[esi+0x0]
c0015950:	8b 36                	mov    esi,DWORD PTR [esi]
c0015952:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015956:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015959:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001595c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015962:	01 d7                	add    edi,edx
c0015964:	89 f8                	mov    eax,edi
c0015966:	e9 51 fe ff ff       	jmp    c00157bc <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001596b:	90                   	nop

c001596c <cleanerTaskFunction(void*)>:
c001596c:	53                   	push   ebx
c001596d:	83 ec 08             	sub    esp,0x8
c0015970:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015975:	83 e8 01             	sub    eax,0x1
c0015978:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001597d:	75 01                	jne    c0015980 <cleanerTaskFunction(void*)+0x14>
c001597f:	fb                   	sti    
c0015980:	fa                   	cli    
c0015981:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015986:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c001598d:	8d 50 01             	lea    edx,[eax+0x1]
c0015990:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015996:	0f 84 c4 00 00 00    	je     c0015a60 <cleanerTaskFunction(void*)+0xf4>
c001599c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159a1:	85 c0                	test   eax,eax
c00159a3:	75 03                	jne    c00159a8 <cleanerTaskFunction(void*)+0x3c>
c00159a5:	fb                   	sti    
c00159a6:	66 90                	xchg   ax,ax
c00159a8:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c00159af:	fa                   	cli    
c00159b0:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159b6:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159bc:	83 c2 01             	add    edx,0x1
c00159bf:	83 c1 01             	add    ecx,0x1
c00159c2:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159c8:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159ce:	fa                   	cli    
c00159cf:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c00159d5:	83 c3 01             	add    ebx,0x1
c00159d8:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c00159de:	eb 28                	jmp    c0015a08 <cleanerTaskFunction(void*)+0x9c>
c00159e0:	83 ec 0c             	sub    esp,0xc
c00159e3:	68 6c 81 02 c0       	push   0xc002816c
c00159e8:	e8 6f 92 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159ed:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00159f4:	89 c3                	mov    ebx,eax
c00159f6:	e8 69 92 00 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00159fe:	e8 95 fc ff ff       	call   c0015698 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015a03:	83 c4 10             	add    esp,0x10
c0015a06:	66 90                	xchg   ax,ax
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	68 6c 81 02 c0       	push   0xc002816c
c0015a10:	e8 2b 92 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a15:	83 c4 10             	add    esp,0x10
c0015a18:	84 c0                	test   al,al
c0015a1a:	74 c4                	je     c00159e0 <cleanerTaskFunction(void*)+0x74>
c0015a1c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a21:	83 e8 01             	sub    eax,0x1
c0015a24:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a29:	75 01                	jne    c0015a2c <cleanerTaskFunction(void*)+0xc0>
c0015a2b:	fb                   	sti    
c0015a2c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a31:	83 e8 01             	sub    eax,0x1
c0015a34:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a39:	0f 85 31 ff ff ff    	jne    c0015970 <cleanerTaskFunction(void*)+0x4>
c0015a3f:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015a44:	85 c0                	test   eax,eax
c0015a46:	0f 84 24 ff ff ff    	je     c0015970 <cleanerTaskFunction(void*)+0x4>
c0015a4c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a56:	e8 79 f6 ff ff       	call   c00150d4 <schedule()>
c0015a5b:	e9 10 ff ff ff       	jmp    c0015970 <cleanerTaskFunction(void*)+0x4>
c0015a60:	83 ec 0c             	sub    esp,0xc
c0015a63:	6a 02                	push   0x2
c0015a65:	e8 56 f8 ff ff       	call   c00152c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015a6a:	83 c4 10             	add    esp,0x10
c0015a6d:	e9 36 ff ff ff       	jmp    c00159a8 <cleanerTaskFunction(void*)+0x3c>
c0015a72:	66 90                	xchg   ax,ax

c0015a74 <terminateTask(int)>:
c0015a74:	83 ec 14             	sub    esp,0x14
c0015a77:	fa                   	cli    
c0015a78:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015a7e:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015a84:	83 c2 01             	add    edx,0x1
c0015a87:	83 c1 01             	add    ecx,0x1
c0015a8a:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015a90:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a96:	fa                   	cli    
c0015a97:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015aa0:	83 c0 01             	add    eax,0x1
c0015aa3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015aa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aad:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015ab0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ab5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015ab8:	50                   	push   eax
c0015ab9:	68 6c 81 02 c0       	push   0xc002816c
c0015abe:	e8 5d 92 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ac3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ac8:	83 c4 10             	add    esp,0x10
c0015acb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015ad2:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015ad7:	85 c0                	test   eax,eax
c0015ad9:	74 65                	je     c0015b40 <terminateTask(int)+0xcc>
c0015adb:	83 ec 0c             	sub    esp,0xc
c0015ade:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015ae5:	50                   	push   eax
c0015ae6:	e8 01 fb ff ff       	call   c00155ec <unblockTask(ThreadControlBlock*)>
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	66 90                	xchg   ax,ax
c0015af0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015af5:	83 e8 01             	sub    eax,0x1
c0015af8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015afd:	75 01                	jne    c0015b00 <terminateTask(int)+0x8c>
c0015aff:	fb                   	sti    
c0015b00:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b05:	83 e8 01             	sub    eax,0x1
c0015b08:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b0d:	75 09                	jne    c0015b18 <terminateTask(int)+0xa4>
c0015b0f:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015b16:	75 3c                	jne    c0015b54 <terminateTask(int)+0xe0>
c0015b18:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b1d:	83 e8 01             	sub    eax,0x1
c0015b20:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b25:	75 01                	jne    c0015b28 <terminateTask(int)+0xb4>
c0015b27:	fb                   	sti    
c0015b28:	fa                   	cli    
c0015b29:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b2e:	83 c0 01             	add    eax,0x1
c0015b31:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b36:	66 90                	xchg   ax,ax
c0015b38:	e8 97 f5 ff ff       	call   c00150d4 <schedule()>
c0015b3d:	eb d9                	jmp    c0015b18 <terminateTask(int)+0xa4>
c0015b3f:	90                   	nop
c0015b40:	83 ec 0c             	sub    esp,0xc
c0015b43:	68 aa 12 02 c0       	push   0xc00212aa
c0015b48:	e8 a4 4e ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	eb 9e                	jmp    c0015af0 <terminateTask(int)+0x7c>
c0015b52:	66 90                	xchg   ax,ax
c0015b54:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b5e:	eb d8                	jmp    c0015b38 <terminateTask(int)+0xc4>

c0015b60 <Thr::terminateFromIRQ(int)>:
c0015b60:	83 ec 18             	sub    esp,0x18
c0015b63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b67:	50                   	push   eax
c0015b68:	e8 07 ff ff ff       	call   c0015a74 <terminateTask(int)>
c0015b6d:	90                   	nop
c0015b6e:	66 90                	xchg   ax,ax

c0015b70 <Semaphore::release()>:
c0015b70:	83 ec 0c             	sub    esp,0xc
c0015b73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b77:	fa                   	cli    
c0015b78:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b7d:	83 c0 01             	add    eax,0x1
c0015b80:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b85:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0015b8d:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015b93:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015b96:	85 c9                	test   ecx,ecx
c0015b98:	74 42                	je     c0015bdc <Semaphore::release()+0x6c>
c0015b9a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015b9d:	83 ec 0c             	sub    esp,0xc
c0015ba0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ba3:	51                   	push   ecx
c0015ba4:	e8 43 fa ff ff       	call   c00155ec <unblockTask(ThreadControlBlock*)>
c0015ba9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	83 e8 01             	sub    eax,0x1
c0015bb4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015bb9:	85 c0                	test   eax,eax
c0015bbb:	75 0b                	jne    c0015bc8 <Semaphore::release()+0x58>
c0015bbd:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015bc2:	85 c0                	test   eax,eax
c0015bc4:	75 22                	jne    c0015be8 <Semaphore::release()+0x78>
c0015bc6:	66 90                	xchg   ax,ax
c0015bc8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015bcd:	83 e8 01             	sub    eax,0x1
c0015bd0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015bd5:	75 01                	jne    c0015bd8 <Semaphore::release()+0x68>
c0015bd7:	fb                   	sti    
c0015bd8:	83 c4 0c             	add    esp,0xc
c0015bdb:	c3                   	ret    
c0015bdc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015bdf:	83 e9 01             	sub    ecx,0x1
c0015be2:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015be5:	eb cd                	jmp    c0015bb4 <Semaphore::release()+0x44>
c0015be7:	90                   	nop
c0015be8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015bf2:	e8 dd f4 ff ff       	call   c00150d4 <schedule()>
c0015bf7:	eb cf                	jmp    c0015bc8 <Semaphore::release()+0x58>
c0015bf9:	8d 76 00             	lea    esi,[esi+0x0]

c0015bfc <__static_initialization_and_destruction_0(int, int)>:
c0015bfc:	83 ec 0c             	sub    esp,0xc
c0015bff:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015c04:	0f 85 8e 00 00 00    	jne    c0015c98 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015c0a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015c12:	0f 85 80 00 00 00    	jne    c0015c98 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015c18:	83 ec 0c             	sub    esp,0xc
c0015c1b:	68 84 81 02 c0       	push   0xc0028184
c0015c20:	e8 af 93 00 00       	call   c001efd4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c25:	83 c4 10             	add    esp,0x10
c0015c28:	83 ec 04             	sub    esp,0x4
c0015c2b:	68 44 1f 02 c0       	push   0xc0021f44
c0015c30:	68 84 81 02 c0       	push   0xc0028184
c0015c35:	68 84 ef 01 c0       	push   0xc001ef84
c0015c3a:	e8 35 4c ff ff       	call   c000a874 <__cxa_atexit>
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	83 ec 0c             	sub    esp,0xc
c0015c45:	68 78 81 02 c0       	push   0xc0028178
c0015c4a:	e8 85 93 00 00       	call   c001efd4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c4f:	83 c4 10             	add    esp,0x10
c0015c52:	83 ec 04             	sub    esp,0x4
c0015c55:	68 44 1f 02 c0       	push   0xc0021f44
c0015c5a:	68 78 81 02 c0       	push   0xc0028178
c0015c5f:	68 84 ef 01 c0       	push   0xc001ef84
c0015c64:	e8 0b 4c ff ff       	call   c000a874 <__cxa_atexit>
c0015c69:	83 c4 10             	add    esp,0x10
c0015c6c:	83 ec 0c             	sub    esp,0xc
c0015c6f:	68 6c 81 02 c0       	push   0xc002816c
c0015c74:	e8 5b 93 00 00       	call   c001efd4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c79:	83 c4 10             	add    esp,0x10
c0015c7c:	83 ec 04             	sub    esp,0x4
c0015c7f:	68 44 1f 02 c0       	push   0xc0021f44
c0015c84:	68 6c 81 02 c0       	push   0xc002816c
c0015c89:	68 84 ef 01 c0       	push   0xc001ef84
c0015c8e:	e8 e1 4b ff ff       	call   c000a874 <__cxa_atexit>
c0015c93:	83 c4 10             	add    esp,0x10
c0015c96:	66 90                	xchg   ax,ax
c0015c98:	90                   	nop
c0015c99:	83 c4 0c             	add    esp,0xc
c0015c9c:	c3                   	ret    
c0015c9d:	8d 76 00             	lea    esi,[esi+0x0]

c0015ca0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015ca0:	83 ec 0c             	sub    esp,0xc
c0015ca3:	83 ec 08             	sub    esp,0x8
c0015ca6:	68 ff ff 00 00       	push   0xffff
c0015cab:	6a 01                	push   0x1
c0015cad:	e8 4a ff ff ff       	call   c0015bfc <__static_initialization_and_destruction_0(int, int)>
c0015cb2:	83 c4 10             	add    esp,0x10
c0015cb5:	83 c4 0c             	add    esp,0xc
c0015cb8:	c3                   	ret    

c0015cb9 <Vm::inbv(unsigned short)>:
c0015cb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cbd:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015cc2:	75 06                	jne    c0015cca <Vm::inbv(unsigned short)+0x11>
c0015cc4:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015cc9:	c3                   	ret    
c0015cca:	ec                   	in     al,dx
c0015ccb:	c3                   	ret    

c0015ccc <Vm::outbv(unsigned short, unsigned char)>:
c0015ccc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cd4:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015cd9:	75 25                	jne    c0015d00 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015cdb:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015ce1:	8d 51 01             	lea    edx,[ecx+0x1]
c0015ce4:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015cea:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015cf0:	83 fa 20             	cmp    edx,0x20
c0015cf3:	75 0c                	jne    c0015d01 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015cf5:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015cff:	c3                   	ret    
c0015d00:	ee                   	out    dx,al
c0015d01:	c3                   	ret    

c0015d02 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015d02:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015d07:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015d0c:	c1 e0 04             	shl    eax,0x4
c0015d0f:	01 d0                	add    eax,edx
c0015d11:	c3                   	ret    

c0015d12 <Vm::getSegment(unsigned int)>:
c0015d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d16:	c1 e8 10             	shr    eax,0x10
c0015d19:	c3                   	ret    

c0015d1a <Vm::getOffset(unsigned int)>:
c0015d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d1e:	c3                   	ret    

c0015d1f <Vm::mainloop2()>:
c0015d1f:	83 ec 18             	sub    esp,0x18
c0015d22:	fa                   	cli    
c0015d23:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d29:	6a 02                	push   0x2
c0015d2b:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015d32:	e8 89 f5 ff ff       	call   c00152c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d3c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015d40:	52                   	push   edx
c0015d41:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015d45:	52                   	push   edx
c0015d46:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015d4a:	52                   	push   edx
c0015d4b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015d4f:	50                   	push   eax
c0015d50:	e8 ba a4 fe ff       	call   c000020f <goToVM86>
c0015d55:	83 c4 2c             	add    esp,0x2c
c0015d58:	c3                   	ret    

c0015d59 <Vm::mainVm8086Loop(void*)>:
c0015d59:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d5e:	48                   	dec    eax
c0015d5f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d64:	75 01                	jne    c0015d67 <Vm::mainVm8086Loop(void*)+0xe>
c0015d66:	fb                   	sti    
c0015d67:	eb b6                	jmp    c0015d1f <Vm::mainloop2()>

c0015d69 <Vm::mainloop3(unsigned long)>:
c0015d69:	83 ec 18             	sub    esp,0x18
c0015d6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d70:	fa                   	cli    
c0015d71:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d77:	6a 02                	push   0x2
c0015d79:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015d80:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015d85:	e8 36 f5 ff ff       	call   c00152c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d8a:	83 c4 1c             	add    esp,0x1c
c0015d8d:	eb 90                	jmp    c0015d1f <Vm::mainloop2()>

c0015d8f <Vm::initialise8086()>:
c0015d8f:	83 ec 0c             	sub    esp,0xc
c0015d92:	68 80 00 00 00       	push   0x80
c0015d97:	6a 00                	push   0x0
c0015d99:	68 59 5d 01 c0       	push   0xc0015d59
c0015d9e:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015da4:	e8 db f0 ff ff       	call   c0014e84 <Process::createThread(void (*)(void*), void*, int)>
c0015da9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015db0:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015db5:	68 00 01 00 00       	push   0x100
c0015dba:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015dbf:	6a 00                	push   0x0
c0015dc1:	6a 00                	push   0x0
c0015dc3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015dc9:	e8 4a 42 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015dce:	83 c4 2c             	add    esp,0x2c
c0015dd1:	c3                   	ret    

c0015dd2 <Vm::finish8086()>:
c0015dd2:	53                   	push   ebx
c0015dd3:	83 ec 08             	sub    esp,0x8
c0015dd6:	fa                   	cli    
c0015dd7:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ddd:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015de4:	75 15                	jne    c0015dfb <Vm::finish8086()+0x29>
c0015de6:	e8 e9 f2 ff ff       	call   c00150d4 <schedule()>
c0015deb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015df0:	48                   	dec    eax
c0015df1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015df6:	75 de                	jne    c0015dd6 <Vm::finish8086()+0x4>
c0015df8:	fb                   	sti    
c0015df9:	eb db                	jmp    c0015dd6 <Vm::finish8086()+0x4>
c0015dfb:	83 ec 0c             	sub    esp,0xc
c0015dfe:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015e04:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e0a:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015e11:	e8 d6 f7 ff ff       	call   c00155ec <unblockTask(ThreadControlBlock*)>
c0015e16:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e1b:	83 c4 10             	add    esp,0x10
c0015e1e:	8d 50 ff             	lea    edx,[eax-0x1]
c0015e21:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015e27:	85 d2                	test   edx,edx
c0015e29:	75 01                	jne    c0015e2c <Vm::finish8086()+0x5a>
c0015e2b:	fb                   	sti    
c0015e2c:	89 d8                	mov    eax,ebx
c0015e2e:	83 c4 08             	add    esp,0x8
c0015e31:	5b                   	pop    ebx
c0015e32:	c3                   	ret    

c0015e33 <Vm::getOutput8086(unsigned char*)>:
c0015e33:	57                   	push   edi
c0015e34:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015e3a:	56                   	push   esi
c0015e3b:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015e40:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015e44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e46:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015e4b:	5e                   	pop    esi
c0015e4c:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e56:	5f                   	pop    edi
c0015e57:	c3                   	ret    

c0015e58 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e58:	55                   	push   ebp
c0015e59:	57                   	push   edi
c0015e5a:	56                   	push   esi
c0015e5b:	53                   	push   ebx
c0015e5c:	83 ec 0c             	sub    esp,0xc
c0015e5f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015e63:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015e67:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015e6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015e6f:	fa                   	cli    
c0015e70:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e76:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015e7d:	75 15                	jne    c0015e94 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015e7f:	e8 50 f2 ff ff       	call   c00150d4 <schedule()>
c0015e84:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e89:	48                   	dec    eax
c0015e8a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e8f:	75 de                	jne    c0015e6f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e91:	fb                   	sti    
c0015e92:	eb db                	jmp    c0015e6f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e94:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e99:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015ea3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015ea7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015eab:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015eaf:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015eb3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015eb7:	0f b7 ff             	movzx  edi,di
c0015eba:	0f b7 f6             	movzx  esi,si
c0015ebd:	50                   	push   eax
c0015ebe:	6a 20                	push   0x20
c0015ec0:	6a 00                	push   0x0
c0015ec2:	68 e0 81 02 c0       	push   0xc00281e0
c0015ec7:	e8 24 a6 fe ff       	call   c00004f0 <memset>
c0015ecc:	5a                   	pop    edx
c0015ecd:	59                   	pop    ecx
c0015ece:	57                   	push   edi
c0015ecf:	56                   	push   esi
c0015ed0:	e8 2d fe ff ff       	call   c0015d02 <Vm::realToLinear(unsigned short, unsigned short)>
c0015ed5:	83 c4 10             	add    esp,0x10
c0015ed8:	89 c7                	mov    edi,eax
c0015eda:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015ede:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015ee2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015ee4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ee9:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015ef0:	48                   	dec    eax
c0015ef1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ef6:	75 01                	jne    c0015ef9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015ef8:	fb                   	sti    
c0015ef9:	83 ec 0c             	sub    esp,0xc
c0015efc:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015f02:	e8 e5 f6 ff ff       	call   c00155ec <unblockTask(ThreadControlBlock*)>
c0015f07:	83 c4 1c             	add    esp,0x1c
c0015f0a:	b0 01                	mov    al,0x1
c0015f0c:	5b                   	pop    ebx
c0015f0d:	5e                   	pop    esi
c0015f0e:	5f                   	pop    edi
c0015f0f:	5d                   	pop    ebp
c0015f10:	c3                   	ret    

c0015f11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015f11:	55                   	push   ebp
c0015f12:	57                   	push   edi
c0015f13:	56                   	push   esi
c0015f14:	53                   	push   ebx
c0015f15:	83 ec 2c             	sub    esp,0x2c
c0015f18:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015f1c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015f20:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015f24:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015f28:	fa                   	cli    
c0015f29:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015f2f:	0f b6 35 c5 81 02 c0 	movzx  esi,BYTE PTR ds:0xc00281c5
c0015f36:	89 f0                	mov    eax,esi
c0015f38:	84 c0                	test   al,al
c0015f3a:	75 1d                	jne    c0015f59 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015f3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015f40:	e8 8f f1 ff ff       	call   c00150d4 <schedule()>
c0015f45:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f4e:	48                   	dec    eax
c0015f4f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f54:	75 d2                	jne    c0015f28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015f56:	fb                   	sti    
c0015f57:	eb cf                	jmp    c0015f28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015f59:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015f5e:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015f68:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015f6c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015f70:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015f74:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015f78:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015f7c:	50                   	push   eax
c0015f7d:	6a 20                	push   0x20
c0015f7f:	6a 00                	push   0x0
c0015f81:	68 e0 81 02 c0       	push   0xc00281e0
c0015f86:	e8 65 a5 fe ff       	call   c00004f0 <memset>
c0015f8b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f92:	e8 17 1b ff ff       	call   c0007aae <malloc>
c0015f97:	83 c4 0c             	add    esp,0xc
c0015f9a:	89 c3                	mov    ebx,eax
c0015f9c:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015fa2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015fa6:	50                   	push   eax
c0015fa7:	e8 c8 4f ff ff       	call   c000af74 <File::File(char const*, Process*)>
c0015fac:	83 c4 10             	add    esp,0x10
c0015faf:	85 db                	test   ebx,ebx
c0015fb1:	75 0a                	jne    c0015fbd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015fb3:	83 ec 0c             	sub    esp,0xc
c0015fb6:	68 d8 13 02 c0       	push   0xc00213d8
c0015fbb:	eb 2b                	jmp    c0015fe8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd7>
c0015fbd:	50                   	push   eax
c0015fbe:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015fc2:	50                   	push   eax
c0015fc3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015fc7:	50                   	push   eax
c0015fc8:	53                   	push   ebx
c0015fc9:	e8 0e 53 ff ff       	call   c000b2dc <File::stat(unsigned long long*, bool*)>
c0015fce:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015fd2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fd6:	83 c4 10             	add    esp,0x10
c0015fd9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015fde:	74 27                	je     c0016007 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf6>
c0015fe0:	83 ec 0c             	sub    esp,0xc
c0015fe3:	68 ec 13 02 c0       	push   0xc00213ec
c0015fe8:	e8 32 a9 ff ff       	call   c001091f <KePanic(char const*)>
c0015fed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ff2:	83 c4 10             	add    esp,0x10
c0015ff5:	48                   	dec    eax
c0015ff6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ffb:	85 c0                	test   eax,eax
c0015ffd:	75 01                	jne    c0016000 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015fff:	fb                   	sti    
c0016000:	31 f6                	xor    esi,esi
c0016002:	e9 8f 00 00 00       	jmp    c0016096 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0016007:	51                   	push   ecx
c0016008:	51                   	push   ecx
c0016009:	6a 01                	push   0x1
c001600b:	53                   	push   ebx
c001600c:	e8 1f 50 ff ff       	call   c000b030 <File::open(FileOpenMode)>
c0016011:	83 c4 10             	add    esp,0x10
c0016014:	85 c0                	test   eax,eax
c0016016:	74 26                	je     c001603e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12d>
c0016018:	83 ec 0c             	sub    esp,0xc
c001601b:	68 05 14 02 c0       	push   0xc0021405
c0016020:	e8 fa a8 ff ff       	call   c001091f <KePanic(char const*)>
c0016025:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001602a:	83 c4 10             	add    esp,0x10
c001602d:	48                   	dec    eax
c001602e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016033:	85 c0                	test   eax,eax
c0016035:	75 c9                	jne    c0016000 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0016037:	fb                   	sti    
c0016038:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001603c:	eb 58                	jmp    c0016096 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c001603e:	0f b7 ed             	movzx  ebp,bp
c0016041:	50                   	push   eax
c0016042:	0f b7 ff             	movzx  edi,di
c0016045:	50                   	push   eax
c0016046:	55                   	push   ebp
c0016047:	57                   	push   edi
c0016048:	e8 b5 fc ff ff       	call   c0015d02 <Vm::realToLinear(unsigned short, unsigned short)>
c001604d:	5a                   	pop    edx
c001604e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016050:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016054:	51                   	push   ecx
c0016055:	50                   	push   eax
c0016056:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001605a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001605e:	53                   	push   ebx
c001605f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016062:	83 c4 14             	add    esp,0x14
c0016065:	53                   	push   ebx
c0016066:	e8 23 50 ff ff       	call   c000b08e <File::close()>
c001606b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016070:	83 c4 10             	add    esp,0x10
c0016073:	48                   	dec    eax
c0016074:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c001607b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016080:	85 c0                	test   eax,eax
c0016082:	75 01                	jne    c0016085 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x174>
c0016084:	fb                   	sti    
c0016085:	83 ec 0c             	sub    esp,0xc
c0016088:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c001608e:	e8 59 f5 ff ff       	call   c00155ec <unblockTask(ThreadControlBlock*)>
c0016093:	83 c4 10             	add    esp,0x10
c0016096:	83 c4 2c             	add    esp,0x2c
c0016099:	89 f0                	mov    eax,esi
c001609b:	5b                   	pop    ebx
c001609c:	5e                   	pop    esi
c001609d:	5f                   	pop    edi
c001609e:	5d                   	pop    ebp
c001609f:	c3                   	ret    

c00160a0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00160a0:	57                   	push   edi
c00160a1:	56                   	push   esi
c00160a2:	53                   	push   ebx
c00160a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00160af:	83 e8 06             	sub    eax,0x6
c00160b2:	0f b7 c0             	movzx  eax,ax
c00160b5:	50                   	push   eax
c00160b6:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00160bb:	50                   	push   eax
c00160bc:	e8 41 fc ff ff       	call   c0015d02 <Vm::realToLinear(unsigned short, unsigned short)>
c00160c1:	5a                   	pop    edx
c00160c2:	5e                   	pop    esi
c00160c3:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00160c6:	8d 56 fa             	lea    edx,[esi-0x6]
c00160c9:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c00160cc:	81 e2 ff ff 00 00    	and    edx,0xffff
c00160d2:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00160d5:	8d 56 02             	lea    edx,[esi+0x2]
c00160d8:	66 89 10             	mov    WORD PTR [eax],dx
c00160db:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00160de:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00160e2:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00160e5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00160e9:	89 d6                	mov    esi,edx
c00160eb:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00160f1:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c00160f7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00160fb:	74 05                	je     c0016102 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c00160fd:	80 ce 02             	or     dh,0x2
c0016100:	89 d6                	mov    esi,edx
c0016102:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0016106:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001610b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001610f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016117:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001611a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0016122:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0016125:	5b                   	pop    ebx
c0016126:	5e                   	pop    esi
c0016127:	5f                   	pop    edi
c0016128:	c3                   	ret    

c0016129 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016129:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001612e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016133:	c1 e0 04             	shl    eax,0x4
c0016136:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016139:	c3                   	ret    

c001613a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001613a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001613f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016144:	c1 e0 04             	shl    eax,0x4
c0016147:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001614b:	c3                   	ret    

c001614c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001614c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016151:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016156:	c1 e0 04             	shl    eax,0x4
c0016159:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001615c:	c3                   	ret    

c001615d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001615d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016162:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016167:	c1 e0 04             	shl    eax,0x4
c001616a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001616e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016171:	c3                   	ret    

c0016172 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016172:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016177:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001617c:	c1 e0 04             	shl    eax,0x4
c001617f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016183:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016187:	c3                   	ret    

c0016188 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016188:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001618d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016192:	c1 e0 04             	shl    eax,0x4
c0016195:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016199:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001619c:	c3                   	ret    

c001619d <Vm::faultHandler(regs*)>:
c001619d:	55                   	push   ebp
c001619e:	57                   	push   edi
c001619f:	56                   	push   esi
c00161a0:	53                   	push   ebx
c00161a1:	83 ec 2c             	sub    esp,0x2c
c00161a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00161a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161ab:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00161af:	0f b7 f8             	movzx  edi,ax
c00161b2:	52                   	push   edx
c00161b3:	0f b7 c0             	movzx  eax,ax
c00161b6:	50                   	push   eax
c00161b7:	e8 46 fb ff ff       	call   c0015d02 <Vm::realToLinear(unsigned short, unsigned short)>
c00161bc:	5a                   	pop    edx
c00161bd:	59                   	pop    ecx
c00161be:	89 c1                	mov    ecx,eax
c00161c0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00161c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161c7:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00161cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00161d0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00161d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161d7:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00161dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00161e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00161e8:	e8 15 fb ff ff       	call   c0015d02 <Vm::realToLinear(unsigned short, unsigned short)>
c00161ed:	5e                   	pop    esi
c00161ee:	be 06 00 00 00       	mov    esi,0x6
c00161f3:	5d                   	pop    ebp
c00161f4:	31 ed                	xor    ebp,ebp
c00161f6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00161fb:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00161fe:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016204:	0f 84 54 02 00 00    	je     c001645e <Vm::faultHandler(regs*)+0x2c1>
c001620a:	0f 87 94 00 00 00    	ja     c00162a4 <Vm::faultHandler(regs*)+0x107>
c0016210:	83 fa 66             	cmp    edx,0x66
c0016213:	0f 84 c2 01 00 00    	je     c00163db <Vm::faultHandler(regs*)+0x23e>
c0016219:	77 47                	ja     c0016262 <Vm::faultHandler(regs*)+0xc5>
c001621b:	83 fa 36             	cmp    edx,0x36
c001621e:	0f 84 aa 01 00 00    	je     c00163ce <Vm::faultHandler(regs*)+0x231>
c0016224:	77 1a                	ja     c0016240 <Vm::faultHandler(regs*)+0xa3>
c0016226:	83 fa 26             	cmp    edx,0x26
c0016229:	0f 84 78 01 00 00    	je     c00163a7 <Vm::faultHandler(regs*)+0x20a>
c001622f:	83 fa 2e             	cmp    edx,0x2e
c0016232:	0f 85 01 06 00 00    	jne    c0016839 <Vm::faultHandler(regs*)+0x69c>
c0016238:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001623b:	31 f6                	xor    esi,esi
c001623d:	41                   	inc    ecx
c001623e:	eb bb                	jmp    c00161fb <Vm::faultHandler(regs*)+0x5e>
c0016240:	83 fa 64             	cmp    edx,0x64
c0016243:	0f 84 6b 01 00 00    	je     c00163b4 <Vm::faultHandler(regs*)+0x217>
c0016249:	0f 87 72 01 00 00    	ja     c00163c1 <Vm::faultHandler(regs*)+0x224>
c001624f:	83 fa 3e             	cmp    edx,0x3e
c0016252:	0f 85 e1 05 00 00    	jne    c0016839 <Vm::faultHandler(regs*)+0x69c>
c0016258:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001625b:	be 01 00 00 00       	mov    esi,0x1
c0016260:	eb db                	jmp    c001623d <Vm::faultHandler(regs*)+0xa0>
c0016262:	83 fa 6d             	cmp    edx,0x6d
c0016265:	0f 84 14 03 00 00    	je     c001657f <Vm::faultHandler(regs*)+0x3e2>
c001626b:	77 17                	ja     c0016284 <Vm::faultHandler(regs*)+0xe7>
c001626d:	83 fa 67             	cmp    edx,0x67
c0016270:	0f 84 72 01 00 00    	je     c00163e8 <Vm::faultHandler(regs*)+0x24b>
c0016276:	83 fa 6c             	cmp    edx,0x6c
c0016279:	0f 84 91 02 00 00    	je     c0016510 <Vm::faultHandler(regs*)+0x373>
c001627f:	e9 b5 05 00 00       	jmp    c0016839 <Vm::faultHandler(regs*)+0x69c>
c0016284:	83 fa 6f             	cmp    edx,0x6f
c0016287:	0f 84 1d 04 00 00    	je     c00166aa <Vm::faultHandler(regs*)+0x50d>
c001628d:	0f 82 7f 03 00 00    	jb     c0016612 <Vm::faultHandler(regs*)+0x475>
c0016293:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016299:	0f 84 56 01 00 00    	je     c00163f5 <Vm::faultHandler(regs*)+0x258>
c001629f:	e9 95 05 00 00       	jmp    c0016839 <Vm::faultHandler(regs*)+0x69c>
c00162a4:	81 fa ec 00 00 00    	cmp    edx,0xec
c00162aa:	0f 84 31 05 00 00    	je     c00167e1 <Vm::faultHandler(regs*)+0x644>
c00162b0:	0f 87 89 00 00 00    	ja     c001633f <Vm::faultHandler(regs*)+0x1a2>
c00162b6:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00162bc:	0f 84 b0 04 00 00    	je     c0016772 <Vm::faultHandler(regs*)+0x5d5>
c00162c2:	77 58                	ja     c001631c <Vm::faultHandler(regs*)+0x17f>
c00162c4:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00162ca:	0f 84 ee 01 00 00    	je     c00164be <Vm::faultHandler(regs*)+0x321>
c00162d0:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00162d6:	0f 85 5d 05 00 00    	jne    c0016839 <Vm::faultHandler(regs*)+0x69c>
c00162dc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00162df:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00162e2:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00162e6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00162e9:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00162ed:	81 ca 00 02 02 00    	or     edx,0x20200
c00162f3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00162f6:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c00162fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016300:	c1 e8 09             	shr    eax,0x9
c0016303:	83 e0 01             	and    eax,0x1
c0016306:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016309:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001630c:	83 c0 06             	add    eax,0x6
c001630f:	25 ff ff 00 00       	and    eax,0xffff
c0016314:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016317:	e9 19 05 00 00       	jmp    c0016835 <Vm::faultHandler(regs*)+0x698>
c001631c:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016322:	0f 84 8f 04 00 00    	je     c00167b7 <Vm::faultHandler(regs*)+0x61a>
c0016328:	0f 82 60 04 00 00    	jb     c001678e <Vm::faultHandler(regs*)+0x5f1>
c001632e:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016334:	0f 84 94 04 00 00    	je     c00167ce <Vm::faultHandler(regs*)+0x631>
c001633a:	e9 fa 04 00 00       	jmp    c0016839 <Vm::faultHandler(regs*)+0x69c>
c001633f:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016345:	0f 84 d7 04 00 00    	je     c0016822 <Vm::faultHandler(regs*)+0x685>
c001634b:	77 2e                	ja     c001637b <Vm::faultHandler(regs*)+0x1de>
c001634d:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016353:	0f 84 a4 04 00 00    	je     c00167fd <Vm::faultHandler(regs*)+0x660>
c0016359:	81 fa ee 00 00 00    	cmp    edx,0xee
c001635f:	0f 85 d4 04 00 00    	jne    c0016839 <Vm::faultHandler(regs*)+0x69c>
c0016365:	50                   	push   eax
c0016366:	50                   	push   eax
c0016367:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001636b:	50                   	push   eax
c001636c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016370:	50                   	push   eax
c0016371:	e8 56 f9 ff ff       	call   c0015ccc <Vm::outbv(unsigned short, unsigned char)>
c0016376:	e9 9f 04 00 00       	jmp    c001681a <Vm::faultHandler(regs*)+0x67d>
c001637b:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016381:	0f 84 6d 01 00 00    	je     c00164f4 <Vm::faultHandler(regs*)+0x357>
c0016387:	81 fa fb 00 00 00    	cmp    edx,0xfb
c001638d:	0f 84 6f 01 00 00    	je     c0016502 <Vm::faultHandler(regs*)+0x365>
c0016393:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016399:	0f 85 9a 04 00 00    	jne    c0016839 <Vm::faultHandler(regs*)+0x69c>
c001639f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163a2:	e9 96 fe ff ff       	jmp    c001623d <Vm::faultHandler(regs*)+0xa0>
c00163a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163aa:	be 02 00 00 00       	mov    esi,0x2
c00163af:	e9 89 fe ff ff       	jmp    c001623d <Vm::faultHandler(regs*)+0xa0>
c00163b4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163b7:	be 03 00 00 00       	mov    esi,0x3
c00163bc:	e9 7c fe ff ff       	jmp    c001623d <Vm::faultHandler(regs*)+0xa0>
c00163c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163c4:	be 04 00 00 00       	mov    esi,0x4
c00163c9:	e9 6f fe ff ff       	jmp    c001623d <Vm::faultHandler(regs*)+0xa0>
c00163ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163d1:	be 05 00 00 00       	mov    esi,0x5
c00163d6:	e9 62 fe ff ff       	jmp    c001623d <Vm::faultHandler(regs*)+0xa0>
c00163db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163de:	bd 01 00 00 00       	mov    ebp,0x1
c00163e3:	e9 55 fe ff ff       	jmp    c001623d <Vm::faultHandler(regs*)+0xa0>
c00163e8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163eb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00163f0:	e9 48 fe ff ff       	jmp    c001623d <Vm::faultHandler(regs*)+0xa0>
c00163f5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00163f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00163fc:	83 e5 01             	and    ebp,0x1
c00163ff:	74 30                	je     c0016431 <Vm::faultHandler(regs*)+0x294>
c0016401:	83 e9 04             	sub    ecx,0x4
c0016404:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001640a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016410:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016413:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016416:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001641c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016420:	0f 84 0c 04 00 00    	je     c0016832 <Vm::faultHandler(regs*)+0x695>
c0016426:	80 ce 02             	or     dh,0x2
c0016429:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001642c:	e9 01 04 00 00       	jmp    c0016832 <Vm::faultHandler(regs*)+0x695>
c0016431:	83 e9 02             	sub    ecx,0x2
c0016434:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001643a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001643d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016441:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016447:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001644b:	74 05                	je     c0016452 <Vm::faultHandler(regs*)+0x2b5>
c001644d:	80 ce 02             	or     dh,0x2
c0016450:	eb 03                	jmp    c0016455 <Vm::faultHandler(regs*)+0x2b8>
c0016452:	80 e6 fd             	and    dh,0xfd
c0016455:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016459:	e9 d4 03 00 00       	jmp    c0016832 <Vm::faultHandler(regs*)+0x695>
c001645e:	83 e5 01             	and    ebp,0x1
c0016461:	74 2a                	je     c001648d <Vm::faultHandler(regs*)+0x2f0>
c0016463:	8b 10                	mov    edx,DWORD PTR [eax]
c0016465:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001646b:	81 ca 00 02 02 00    	or     edx,0x20200
c0016471:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016474:	8b 00                	mov    eax,DWORD PTR [eax]
c0016476:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001647c:	c1 e8 09             	shr    eax,0x9
c001647f:	83 e0 01             	and    eax,0x1
c0016482:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016485:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016488:	83 c0 04             	add    eax,0x4
c001648b:	eb 24                	jmp    c00164b1 <Vm::faultHandler(regs*)+0x314>
c001648d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016490:	81 ca 00 02 02 00    	or     edx,0x20200
c0016496:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016499:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001649c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00164a2:	c1 e8 09             	shr    eax,0x9
c00164a5:	83 e0 01             	and    eax,0x1
c00164a8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00164ab:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00164ae:	83 c0 02             	add    eax,0x2
c00164b1:	25 ff ff 00 00       	and    eax,0xffff
c00164b6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00164b9:	e9 74 03 00 00       	jmp    c0016832 <Vm::faultHandler(regs*)+0x695>
c00164be:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164c2:	3d ee 00 00 00       	cmp    eax,0xee
c00164c7:	75 10                	jne    c00164d9 <Vm::faultHandler(regs*)+0x33c>
c00164c9:	83 ec 0c             	sub    esp,0xc
c00164cc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00164cf:	e8 95 f8 ff ff       	call   c0015d69 <Vm::mainloop3(unsigned long)>
c00164d4:	e9 44 03 00 00       	jmp    c001681d <Vm::faultHandler(regs*)+0x680>
c00164d9:	83 ec 0c             	sub    esp,0xc
c00164dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00164e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164e4:	51                   	push   ecx
c00164e5:	50                   	push   eax
c00164e6:	53                   	push   ebx
c00164e7:	e8 b4 fb ff ff       	call   c00160a0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00164ec:	83 c4 20             	add    esp,0x20
c00164ef:	e9 41 03 00 00       	jmp    c0016835 <Vm::faultHandler(regs*)+0x698>
c00164f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00164fd:	e9 30 03 00 00       	jmp    c0016832 <Vm::faultHandler(regs*)+0x695>
c0016502:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016507:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001650b:	e9 22 03 00 00       	jmp    c0016832 <Vm::faultHandler(regs*)+0x695>
c0016510:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016513:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016518:	74 2b                	je     c0016545 <Vm::faultHandler(regs*)+0x3a8>
c001651a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016521:	76 22                	jbe    c0016545 <Vm::faultHandler(regs*)+0x3a8>
c0016523:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016527:	50                   	push   eax
c0016528:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001652c:	50                   	push   eax
c001652d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016531:	50                   	push   eax
c0016532:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016536:	50                   	push   eax
c0016537:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001653b:	50                   	push   eax
c001653c:	6a 6c                	push   0x6c
c001653e:	6a 6c                	push   0x6c
c0016540:	e9 bd 01 00 00       	jmp    c0016702 <Vm::faultHandler(regs*)+0x565>
c0016545:	83 ec 0c             	sub    esp,0xc
c0016548:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001654c:	0f b7 f6             	movzx  esi,si
c001654f:	50                   	push   eax
c0016550:	e8 64 f7 ff ff       	call   c0015cb9 <Vm::inbv(unsigned short)>
c0016555:	83 c4 0c             	add    esp,0xc
c0016558:	0f b6 c0             	movzx  eax,al
c001655b:	50                   	push   eax
c001655c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016560:	50                   	push   eax
c0016561:	56                   	push   esi
c0016562:	e8 f6 fb ff ff       	call   c001615d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016567:	83 c4 10             	add    esp,0x10
c001656a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001656d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016571:	74 03                	je     c0016576 <Vm::faultHandler(regs*)+0x3d9>
c0016573:	48                   	dec    eax
c0016574:	eb 01                	jmp    c0016577 <Vm::faultHandler(regs*)+0x3da>
c0016576:	40                   	inc    eax
c0016577:	0f b7 c0             	movzx  eax,ax
c001657a:	e9 8b 00 00 00       	jmp    c001660a <Vm::faultHandler(regs*)+0x46d>
c001657f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016582:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016585:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001658a:	74 29                	je     c00165b5 <Vm::faultHandler(regs*)+0x418>
c001658c:	3d ff ff 00 00       	cmp    eax,0xffff
c0016591:	76 22                	jbe    c00165b5 <Vm::faultHandler(regs*)+0x418>
c0016593:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016597:	50                   	push   eax
c0016598:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001659c:	50                   	push   eax
c001659d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165a1:	50                   	push   eax
c00165a2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165a6:	50                   	push   eax
c00165a7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165ab:	50                   	push   eax
c00165ac:	6a 6d                	push   0x6d
c00165ae:	6a 6d                	push   0x6d
c00165b0:	e9 4d 01 00 00       	jmp    c0016702 <Vm::faultHandler(regs*)+0x565>
c00165b5:	0f b7 c8             	movzx  ecx,ax
c00165b8:	0f b7 f6             	movzx  esi,si
c00165bb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00165be:	83 e5 01             	and    ebp,0x1
c00165c1:	74 20                	je     c00165e3 <Vm::faultHandler(regs*)+0x446>
c00165c3:	ed                   	in     eax,dx
c00165c4:	55                   	push   ebp
c00165c5:	50                   	push   eax
c00165c6:	51                   	push   ecx
c00165c7:	56                   	push   esi
c00165c8:	e8 bb fb ff ff       	call   c0016188 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00165cd:	83 c4 10             	add    esp,0x10
c00165d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00165d3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165d7:	74 05                	je     c00165de <Vm::faultHandler(regs*)+0x441>
c00165d9:	83 e8 04             	sub    eax,0x4
c00165dc:	eb 27                	jmp    c0016605 <Vm::faultHandler(regs*)+0x468>
c00165de:	83 c0 04             	add    eax,0x4
c00165e1:	eb 22                	jmp    c0016605 <Vm::faultHandler(regs*)+0x468>
c00165e3:	66 ed                	in     ax,dx
c00165e5:	0f b7 c0             	movzx  eax,ax
c00165e8:	57                   	push   edi
c00165e9:	50                   	push   eax
c00165ea:	51                   	push   ecx
c00165eb:	56                   	push   esi
c00165ec:	e8 81 fb ff ff       	call   c0016172 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00165f1:	83 c4 10             	add    esp,0x10
c00165f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00165f7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165fb:	74 05                	je     c0016602 <Vm::faultHandler(regs*)+0x465>
c00165fd:	83 e8 02             	sub    eax,0x2
c0016600:	eb 03                	jmp    c0016605 <Vm::faultHandler(regs*)+0x468>
c0016602:	83 c0 02             	add    eax,0x2
c0016605:	25 ff ff 00 00       	and    eax,0xffff
c001660a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001660d:	e9 20 02 00 00       	jmp    c0016832 <Vm::faultHandler(regs*)+0x695>
c0016612:	8d 46 ff             	lea    eax,[esi-0x1]
c0016615:	0f b6 f0             	movzx  esi,al
c0016618:	83 fe 05             	cmp    esi,0x5
c001661b:	77 23                	ja     c0016640 <Vm::faultHandler(regs*)+0x4a3>
c001661d:	ff 24 b5 78 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdeb88]
c0016624:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016629:	eb 15                	jmp    c0016640 <Vm::faultHandler(regs*)+0x4a3>
c001662b:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001662f:	eb 0f                	jmp    c0016640 <Vm::faultHandler(regs*)+0x4a3>
c0016631:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016635:	eb 09                	jmp    c0016640 <Vm::faultHandler(regs*)+0x4a3>
c0016637:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001663b:	eb 03                	jmp    c0016640 <Vm::faultHandler(regs*)+0x4a3>
c001663d:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016640:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016643:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016648:	74 29                	je     c0016673 <Vm::faultHandler(regs*)+0x4d6>
c001664a:	3d ff ff 00 00       	cmp    eax,0xffff
c001664f:	76 22                	jbe    c0016673 <Vm::faultHandler(regs*)+0x4d6>
c0016651:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016655:	50                   	push   eax
c0016656:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001665a:	50                   	push   eax
c001665b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001665f:	50                   	push   eax
c0016660:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016664:	50                   	push   eax
c0016665:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016669:	50                   	push   eax
c001666a:	6a 6e                	push   0x6e
c001666c:	6a 6e                	push   0x6e
c001666e:	e9 8f 00 00 00       	jmp    c0016702 <Vm::faultHandler(regs*)+0x565>
c0016673:	0f b7 c0             	movzx  eax,ax
c0016676:	52                   	push   edx
c0016677:	52                   	push   edx
c0016678:	50                   	push   eax
c0016679:	57                   	push   edi
c001667a:	e8 aa fa ff ff       	call   c0016129 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001667f:	59                   	pop    ecx
c0016680:	0f b6 c0             	movzx  eax,al
c0016683:	5e                   	pop    esi
c0016684:	50                   	push   eax
c0016685:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016689:	50                   	push   eax
c001668a:	e8 3d f6 ff ff       	call   c0015ccc <Vm::outbv(unsigned short, unsigned char)>
c001668f:	83 c4 10             	add    esp,0x10
c0016692:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016695:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016699:	74 03                	je     c001669e <Vm::faultHandler(regs*)+0x501>
c001669b:	48                   	dec    eax
c001669c:	eb 01                	jmp    c001669f <Vm::faultHandler(regs*)+0x502>
c001669e:	40                   	inc    eax
c001669f:	0f b7 c0             	movzx  eax,ax
c00166a2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00166a5:	e9 88 01 00 00       	jmp    c0016832 <Vm::faultHandler(regs*)+0x695>
c00166aa:	8d 46 ff             	lea    eax,[esi-0x1]
c00166ad:	0f b6 f0             	movzx  esi,al
c00166b0:	83 fe 05             	cmp    esi,0x5
c00166b3:	77 1e                	ja     c00166d3 <Vm::faultHandler(regs*)+0x536>
c00166b5:	ff 24 b5 90 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdeb70]
c00166bc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00166c0:	eb 11                	jmp    c00166d3 <Vm::faultHandler(regs*)+0x536>
c00166c2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00166c5:	eb 0c                	jmp    c00166d3 <Vm::faultHandler(regs*)+0x536>
c00166c7:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00166ca:	eb 07                	jmp    c00166d3 <Vm::faultHandler(regs*)+0x536>
c00166cc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00166cf:	eb 02                	jmp    c00166d3 <Vm::faultHandler(regs*)+0x536>
c00166d1:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00166d3:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00166d6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00166db:	74 37                	je     c0016714 <Vm::faultHandler(regs*)+0x577>
c00166dd:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00166e3:	76 2f                	jbe    c0016714 <Vm::faultHandler(regs*)+0x577>
c00166e5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00166e9:	50                   	push   eax
c00166ea:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00166ee:	50                   	push   eax
c00166ef:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00166f3:	50                   	push   eax
c00166f4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00166f8:	50                   	push   eax
c00166f9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166fd:	50                   	push   eax
c00166fe:	6a 6f                	push   0x6f
c0016700:	6a 6f                	push   0x6f
c0016702:	68 1e 14 02 c0       	push   0xc002141e
c0016707:	e8 e5 42 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001670c:	83 c4 20             	add    esp,0x20
c001670f:	e9 83 01 00 00       	jmp    c0016897 <Vm::faultHandler(regs*)+0x6fa>
c0016714:	0f b7 d7             	movzx  edx,di
c0016717:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001671a:	0f b7 c6             	movzx  eax,si
c001671d:	81 e1 00 04 00 00    	and    ecx,0x400
c0016723:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016726:	83 e5 01             	and    ebp,0x1
c0016729:	74 1d                	je     c0016748 <Vm::faultHandler(regs*)+0x5ab>
c001672b:	55                   	push   ebp
c001672c:	55                   	push   ebp
c001672d:	50                   	push   eax
c001672e:	52                   	push   edx
c001672f:	e8 18 fa ff ff       	call   c001614c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016734:	83 c4 10             	add    esp,0x10
c0016737:	89 fa                	mov    edx,edi
c0016739:	ef                   	out    dx,eax
c001673a:	85 c9                	test   ecx,ecx
c001673c:	74 05                	je     c0016743 <Vm::faultHandler(regs*)+0x5a6>
c001673e:	83 ee 04             	sub    esi,0x4
c0016741:	eb 21                	jmp    c0016764 <Vm::faultHandler(regs*)+0x5c7>
c0016743:	83 c6 04             	add    esi,0x4
c0016746:	eb 1c                	jmp    c0016764 <Vm::faultHandler(regs*)+0x5c7>
c0016748:	55                   	push   ebp
c0016749:	55                   	push   ebp
c001674a:	50                   	push   eax
c001674b:	52                   	push   edx
c001674c:	e8 e9 f9 ff ff       	call   c001613a <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016751:	83 c4 10             	add    esp,0x10
c0016754:	89 fa                	mov    edx,edi
c0016756:	66 ef                	out    dx,ax
c0016758:	85 c9                	test   ecx,ecx
c001675a:	74 05                	je     c0016761 <Vm::faultHandler(regs*)+0x5c4>
c001675c:	83 ee 02             	sub    esi,0x2
c001675f:	eb 03                	jmp    c0016764 <Vm::faultHandler(regs*)+0x5c7>
c0016761:	83 c6 02             	add    esi,0x2
c0016764:	81 e6 ff ff 00 00    	and    esi,0xffff
c001676a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001676d:	e9 c0 00 00 00       	jmp    c0016832 <Vm::faultHandler(regs*)+0x695>
c0016772:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016779:	83 ec 0c             	sub    esp,0xc
c001677c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016780:	50                   	push   eax
c0016781:	e8 33 f5 ff ff       	call   c0015cb9 <Vm::inbv(unsigned short)>
c0016786:	0f b6 c0             	movzx  eax,al
c0016789:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001678c:	eb 3a                	jmp    c00167c8 <Vm::faultHandler(regs*)+0x62b>
c001678e:	83 e5 01             	and    ebp,0x1
c0016791:	74 07                	je     c001679a <Vm::faultHandler(regs*)+0x5fd>
c0016793:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016797:	ed                   	in     eax,dx
c0016798:	eb 14                	jmp    c00167ae <Vm::faultHandler(regs*)+0x611>
c001679a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001679d:	66 31 f6             	xor    si,si
c00167a0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00167a3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00167a7:	66 ed                	in     ax,dx
c00167a9:	0f b7 c0             	movzx  eax,ax
c00167ac:	09 f0                	or     eax,esi
c00167ae:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00167b1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00167b5:	eb 7e                	jmp    c0016835 <Vm::faultHandler(regs*)+0x698>
c00167b7:	52                   	push   edx
c00167b8:	52                   	push   edx
c00167b9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00167bd:	50                   	push   eax
c00167be:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167c2:	50                   	push   eax
c00167c3:	e8 04 f5 ff ff       	call   c0015ccc <Vm::outbv(unsigned short, unsigned char)>
c00167c8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00167cc:	eb 4f                	jmp    c001681d <Vm::faultHandler(regs*)+0x680>
c00167ce:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00167d1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00167d5:	83 e5 01             	and    ebp,0x1
c00167d8:	74 03                	je     c00167dd <Vm::faultHandler(regs*)+0x640>
c00167da:	ef                   	out    dx,eax
c00167db:	eb d4                	jmp    c00167b1 <Vm::faultHandler(regs*)+0x614>
c00167dd:	66 ef                	out    dx,ax
c00167df:	eb d0                	jmp    c00167b1 <Vm::faultHandler(regs*)+0x614>
c00167e1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00167e8:	83 ec 0c             	sub    esp,0xc
c00167eb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167ef:	50                   	push   eax
c00167f0:	e8 c4 f4 ff ff       	call   c0015cb9 <Vm::inbv(unsigned short)>
c00167f5:	0f b6 c0             	movzx  eax,al
c00167f8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00167fb:	eb 1d                	jmp    c001681a <Vm::faultHandler(regs*)+0x67d>
c00167fd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016800:	83 e5 01             	and    ebp,0x1
c0016803:	74 03                	je     c0016808 <Vm::faultHandler(regs*)+0x66b>
c0016805:	ed                   	in     eax,dx
c0016806:	eb 0d                	jmp    c0016815 <Vm::faultHandler(regs*)+0x678>
c0016808:	66 ed                	in     ax,dx
c001680a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001680d:	0f b7 c0             	movzx  eax,ax
c0016810:	66 31 d2             	xor    dx,dx
c0016813:	09 d0                	or     eax,edx
c0016815:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016818:	eb 18                	jmp    c0016832 <Vm::faultHandler(regs*)+0x695>
c001681a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001681d:	83 c4 10             	add    esp,0x10
c0016820:	eb 13                	jmp    c0016835 <Vm::faultHandler(regs*)+0x698>
c0016822:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016825:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016828:	83 e5 01             	and    ebp,0x1
c001682b:	74 03                	je     c0016830 <Vm::faultHandler(regs*)+0x693>
c001682d:	ef                   	out    dx,eax
c001682e:	eb 02                	jmp    c0016832 <Vm::faultHandler(regs*)+0x695>
c0016830:	66 ef                	out    dx,ax
c0016832:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016835:	b0 01                	mov    al,0x1
c0016837:	eb 60                	jmp    c0016899 <Vm::faultHandler(regs*)+0x6fc>
c0016839:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001683d:	50                   	push   eax
c001683e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016842:	50                   	push   eax
c0016843:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016847:	50                   	push   eax
c0016848:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001684c:	50                   	push   eax
c001684d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016851:	50                   	push   eax
c0016852:	52                   	push   edx
c0016853:	52                   	push   edx
c0016854:	68 4b 14 02 c0       	push   0xc002144b
c0016859:	e8 93 41 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001685e:	83 c4 20             	add    esp,0x20
c0016861:	83 ec 0c             	sub    esp,0xc
c0016864:	6a 60                	push   0x60
c0016866:	e8 4e f4 ff ff       	call   c0015cb9 <Vm::inbv(unsigned short)>
c001686b:	83 c4 10             	add    esp,0x10
c001686e:	0f b6 d0             	movzx  edx,al
c0016871:	83 fa 1c             	cmp    edx,0x1c
c0016874:	74 05                	je     c001687b <Vm::faultHandler(regs*)+0x6de>
c0016876:	83 fa 5a             	cmp    edx,0x5a
c0016879:	75 e6                	jne    c0016861 <Vm::faultHandler(regs*)+0x6c4>
c001687b:	0f b6 c0             	movzx  eax,al
c001687e:	83 f8 1c             	cmp    eax,0x1c
c0016881:	74 05                	je     c0016888 <Vm::faultHandler(regs*)+0x6eb>
c0016883:	83 f8 5a             	cmp    eax,0x5a
c0016886:	75 0f                	jne    c0016897 <Vm::faultHandler(regs*)+0x6fa>
c0016888:	83 ec 0c             	sub    esp,0xc
c001688b:	6a 60                	push   0x60
c001688d:	e8 27 f4 ff ff       	call   c0015cb9 <Vm::inbv(unsigned short)>
c0016892:	83 c4 10             	add    esp,0x10
c0016895:	eb e4                	jmp    c001687b <Vm::faultHandler(regs*)+0x6de>
c0016897:	31 c0                	xor    eax,eax
c0016899:	83 c4 2c             	add    esp,0x2c
c001689c:	5b                   	pop    ebx
c001689d:	5e                   	pop    esi
c001689e:	5f                   	pop    edi
c001689f:	5d                   	pop    ebp
c00168a0:	c3                   	ret    

c00168a1 <noCopro(unsigned long)>:
c00168a1:	c3                   	ret    

c00168a2 <nmiHandler(regs*, void*)>:
c00168a2:	83 ec 0c             	sub    esp,0xc
c00168a5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00168aa:	83 ec 0c             	sub    esp,0xc
c00168ad:	50                   	push   eax
c00168ae:	e8 fb 09 ff ff       	call   c00072ae <Computer::handleNMI()>
c00168b3:	83 c4 10             	add    esp,0x10
c00168b6:	90                   	nop
c00168b7:	83 c4 0c             	add    esp,0xc
c00168ba:	c3                   	ret    

c00168bb <doubleFault(regs*, void*)>:
c00168bb:	55                   	push   ebp
c00168bc:	89 e5                	mov    ebp,esp
c00168be:	83 ec 08             	sub    esp,0x8
c00168c1:	83 ec 0c             	sub    esp,0xc
c00168c4:	68 a8 14 02 c0       	push   0xc00214a8
c00168c9:	e8 51 a0 ff ff       	call   c001091f <KePanic(char const*)>
c00168ce:	83 c4 10             	add    esp,0x10
c00168d1:	90                   	nop
c00168d2:	c9                   	leave  
c00168d3:	c3                   	ret    

c00168d4 <displayDebugInfo(regs*)>:
c00168d4:	83 ec 1c             	sub    esp,0x1c
c00168d7:	0f 20 c0             	mov    eax,cr0
c00168da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168de:	0f 20 d0             	mov    eax,cr2
c00168e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00168e5:	0f 20 d8             	mov    eax,cr3
c00168e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00168ec:	0f 20 e0             	mov    eax,cr4
c00168ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00168f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00168f9:	83 ec 08             	sub    esp,0x8
c00168fc:	50                   	push   eax
c00168fd:	68 c4 14 02 c0       	push   0xc00214c4
c0016902:	e8 ea 40 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001690e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016911:	83 ec 08             	sub    esp,0x8
c0016914:	50                   	push   eax
c0016915:	68 b5 14 02 c0       	push   0xc00214b5
c001691a:	e8 d2 40 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016926:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016929:	83 ec 08             	sub    esp,0x8
c001692c:	50                   	push   eax
c001692d:	68 c0 14 02 c0       	push   0xc00214c0
c0016932:	e8 ba 40 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001693e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016941:	83 ec 08             	sub    esp,0x8
c0016944:	50                   	push   eax
c0016945:	68 cf 14 02 c0       	push   0xc00214cf
c001694a:	e8 a2 40 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001694f:	83 c4 10             	add    esp,0x10
c0016952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016956:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016959:	83 ec 08             	sub    esp,0x8
c001695c:	50                   	push   eax
c001695d:	68 da 14 02 c0       	push   0xc00214da
c0016962:	e8 8a 40 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0016967:	83 c4 10             	add    esp,0x10
c001696a:	83 ec 08             	sub    esp,0x8
c001696d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016971:	68 e5 14 02 c0       	push   0xc00214e5
c0016976:	e8 76 40 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001697b:	83 c4 10             	add    esp,0x10
c001697e:	83 ec 08             	sub    esp,0x8
c0016981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016985:	68 f0 14 02 c0       	push   0xc00214f0
c001698a:	e8 62 40 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001698f:	83 c4 10             	add    esp,0x10
c0016992:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016997:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001699d:	83 ec 0c             	sub    esp,0xc
c00169a0:	50                   	push   eax
c00169a1:	e8 9d 1d ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c00169a6:	83 c4 10             	add    esp,0x10
c00169a9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169b4:	83 ec 08             	sub    esp,0x8
c00169b7:	68 fb 14 02 c0       	push   0xc00214fb
c00169bc:	50                   	push   eax
c00169bd:	e8 ce 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00169c2:	83 c4 10             	add    esp,0x10
c00169c5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169d4:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00169d7:	83 ec 08             	sub    esp,0x8
c00169da:	52                   	push   edx
c00169db:	50                   	push   eax
c00169dc:	e8 69 20 ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c00169e1:	83 c4 10             	add    esp,0x10
c00169e4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169ef:	83 ec 08             	sub    esp,0x8
c00169f2:	68 09 15 02 c0       	push   0xc0021509
c00169f7:	50                   	push   eax
c00169f8:	e8 93 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00169fd:	83 c4 10             	add    esp,0x10
c0016a00:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a05:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a0b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016a10:	8b 12                	mov    edx,DWORD PTR [edx]
c0016a12:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a15:	83 c2 0c             	add    edx,0xc
c0016a18:	83 ec 08             	sub    esp,0x8
c0016a1b:	52                   	push   edx
c0016a1c:	50                   	push   eax
c0016a1d:	e8 6e 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a22:	83 c4 10             	add    esp,0x10
c0016a25:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a30:	83 ec 08             	sub    esp,0x8
c0016a33:	68 12 15 02 c0       	push   0xc0021512
c0016a38:	50                   	push   eax
c0016a39:	e8 52 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a3e:	83 c4 10             	add    esp,0x10
c0016a41:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a50:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016a53:	83 ec 08             	sub    esp,0x8
c0016a56:	52                   	push   edx
c0016a57:	50                   	push   eax
c0016a58:	e8 ed 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016a5d:	83 c4 10             	add    esp,0x10
c0016a60:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a6b:	83 ec 08             	sub    esp,0x8
c0016a6e:	68 1a 15 02 c0       	push   0xc002151a
c0016a73:	50                   	push   eax
c0016a74:	e8 17 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a79:	83 c4 10             	add    esp,0x10
c0016a7c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a8b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016a8e:	83 ec 08             	sub    esp,0x8
c0016a91:	52                   	push   edx
c0016a92:	50                   	push   eax
c0016a93:	e8 b2 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016a98:	83 c4 10             	add    esp,0x10
c0016a9b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aa0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aa6:	83 ec 08             	sub    esp,0x8
c0016aa9:	68 22 15 02 c0       	push   0xc0021522
c0016aae:	50                   	push   eax
c0016aaf:	e8 dc 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016ab4:	83 c4 10             	add    esp,0x10
c0016ab7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016abc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ac2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ac6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016ac9:	83 ec 08             	sub    esp,0x8
c0016acc:	52                   	push   edx
c0016acd:	50                   	push   eax
c0016ace:	e8 77 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016adb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ae1:	83 ec 08             	sub    esp,0x8
c0016ae4:	68 2a 15 02 c0       	push   0xc002152a
c0016ae9:	50                   	push   eax
c0016aea:	e8 a1 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016af7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016afd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b01:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016b04:	83 ec 08             	sub    esp,0x8
c0016b07:	52                   	push   edx
c0016b08:	50                   	push   eax
c0016b09:	e8 3c 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b0e:	83 c4 10             	add    esp,0x10
c0016b11:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b1c:	83 ec 08             	sub    esp,0x8
c0016b1f:	68 32 15 02 c0       	push   0xc0021532
c0016b24:	50                   	push   eax
c0016b25:	e8 66 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b2a:	83 c4 10             	add    esp,0x10
c0016b2d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b3c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016b3f:	83 ec 08             	sub    esp,0x8
c0016b42:	52                   	push   edx
c0016b43:	50                   	push   eax
c0016b44:	e8 01 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b49:	83 c4 10             	add    esp,0x10
c0016b4c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b57:	83 ec 08             	sub    esp,0x8
c0016b5a:	68 3a 15 02 c0       	push   0xc002153a
c0016b5f:	50                   	push   eax
c0016b60:	e8 2b 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b6d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b77:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016b7a:	83 ec 08             	sub    esp,0x8
c0016b7d:	52                   	push   edx
c0016b7e:	50                   	push   eax
c0016b7f:	e8 c6 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b84:	83 c4 10             	add    esp,0x10
c0016b87:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b92:	83 ec 08             	sub    esp,0x8
c0016b95:	68 42 15 02 c0       	push   0xc0021542
c0016b9a:	50                   	push   eax
c0016b9b:	e8 f0 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016ba0:	83 c4 10             	add    esp,0x10
c0016ba3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ba8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bae:	83 ec 08             	sub    esp,0x8
c0016bb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016bb5:	50                   	push   eax
c0016bb6:	e8 8f 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016bbb:	83 c4 10             	add    esp,0x10
c0016bbe:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016bc3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bc9:	83 ec 08             	sub    esp,0x8
c0016bcc:	68 4b 15 02 c0       	push   0xc002154b
c0016bd1:	50                   	push   eax
c0016bd2:	e8 b9 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016bd7:	83 c4 10             	add    esp,0x10
c0016bda:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016bdf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016be5:	83 ec 08             	sub    esp,0x8
c0016be8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016bec:	50                   	push   eax
c0016bed:	e8 58 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016bf2:	83 c4 10             	add    esp,0x10
c0016bf5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016bfa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c00:	83 ec 08             	sub    esp,0x8
c0016c03:	68 53 15 02 c0       	push   0xc0021553
c0016c08:	50                   	push   eax
c0016c09:	e8 82 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016c0e:	83 c4 10             	add    esp,0x10
c0016c11:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016c16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c1c:	83 ec 08             	sub    esp,0x8
c0016c1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016c23:	50                   	push   eax
c0016c24:	e8 21 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016c29:	83 c4 10             	add    esp,0x10
c0016c2c:	fa                   	cli    
c0016c2d:	f4                   	hlt    
c0016c2e:	eb fe                	jmp    c0016c2e <displayDebugInfo(regs*)+0x35a>

c0016c30 <HalSystemIdle()>:
c0016c30:	56                   	push   esi
c0016c31:	53                   	push   ebx
c0016c32:	83 ec 14             	sub    esp,0x14
c0016c35:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c3a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c40:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016c46:	83 e0 04             	and    eax,0x4
c0016c49:	0f b6 c0             	movzx  eax,al
c0016c4c:	85 c0                	test   eax,eax
c0016c4e:	0f 95 c0             	setne  al
c0016c51:	0f b6 c0             	movzx  eax,al
c0016c54:	85 c0                	test   eax,eax
c0016c56:	74 4c                	je     c0016ca4 <HalSystemIdle()+0x74>
c0016c58:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c5d:	83 ec 08             	sub    esp,0x8
c0016c60:	68 e1 00 00 00       	push   0xe1
c0016c65:	50                   	push   eax
c0016c66:	e8 4d 04 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0016c6b:	83 c4 10             	add    esp,0x10
c0016c6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c76:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c7f:	83 e2 02             	and    edx,0x2
c0016c82:	89 d3                	mov    ebx,edx
c0016c84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c88:	83 e2 00             	and    edx,0x0
c0016c8b:	89 d6                	mov    esi,edx
c0016c8d:	56                   	push   esi
c0016c8e:	53                   	push   ebx
c0016c8f:	68 e1 00 00 00       	push   0xe1
c0016c94:	50                   	push   eax
c0016c95:	e8 4a 04 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016c9a:	83 c4 10             	add    esp,0x10
c0016c9d:	e8 f2 94 fe ff       	call   c0000194 <doTPAUSE>
c0016ca2:	eb 01                	jmp    c0016ca5 <HalSystemIdle()+0x75>
c0016ca4:	f4                   	hlt    
c0016ca5:	90                   	nop
c0016ca6:	83 c4 14             	add    esp,0x14
c0016ca9:	5b                   	pop    ebx
c0016caa:	5e                   	pop    esi
c0016cab:	c3                   	ret    

c0016cac <displayProgramFault(char const*)>:
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	83 ec 0c             	sub    esp,0xc
c0016cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb6:	e8 36 3d ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0016cbb:	83 c4 10             	add    esp,0x10
c0016cbe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016cc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cc5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cc8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cce:	85 c0                	test   eax,eax
c0016cd0:	74 21                	je     c0016cf3 <displayProgramFault(char const*)+0x47>
c0016cd2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cd9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cdc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ce2:	6a 04                	push   0x4
c0016ce4:	6a 0f                	push   0xf
c0016ce6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016cea:	50                   	push   eax
c0016ceb:	e8 12 1e ff ff       	call   c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016cf0:	83 c4 10             	add    esp,0x10
c0016cf3:	90                   	nop
c0016cf4:	83 c4 0c             	add    esp,0xc
c0016cf7:	c3                   	ret    

c0016cf8 <gpFault(regs*, void*)>:
c0016cf8:	83 ec 1c             	sub    esp,0x1c
c0016cfb:	c7 05 14 82 02 c0 9d 61 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc001619d
c0016d05:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016d0a:	85 c0                	test   eax,eax
c0016d0c:	74 1e                	je     c0016d2c <gpFault(regs*, void*)+0x34>
c0016d0e:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016d13:	83 ec 0c             	sub    esp,0xc
c0016d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d1a:	ff d0                	call   eax
c0016d1c:	83 c4 10             	add    esp,0x10
c0016d1f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016d23:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016d28:	85 c0                	test   eax,eax
c0016d2a:	75 2e                	jne    c0016d5a <gpFault(regs*, void*)+0x62>
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	68 5b 15 02 c0       	push   0xc002155b
c0016d34:	e8 73 ff ff ff       	call   c0016cac <displayProgramFault(char const*)>
c0016d39:	83 c4 10             	add    esp,0x10
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d43:	e8 8c fb ff ff       	call   c00168d4 <displayDebugInfo(regs*)>
c0016d48:	83 c4 10             	add    esp,0x10
c0016d4b:	83 ec 0c             	sub    esp,0xc
c0016d4e:	6a 00                	push   0x0
c0016d50:	e8 0b ee ff ff       	call   c0015b60 <Thr::terminateFromIRQ(int)>
c0016d55:	83 c4 10             	add    esp,0x10
c0016d58:	eb 01                	jmp    c0016d5b <gpFault(regs*, void*)+0x63>
c0016d5a:	90                   	nop
c0016d5b:	83 c4 1c             	add    esp,0x1c
c0016d5e:	c3                   	ret    

c0016d5f <pgFault(regs*, void*)>:
c0016d5f:	83 ec 1c             	sub    esp,0x1c
c0016d62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d66:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016d69:	0f 20 d0             	mov    eax,cr2
c0016d6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d74:	83 ec 04             	sub    esp,0x4
c0016d77:	52                   	push   edx
c0016d78:	50                   	push   eax
c0016d79:	68 38 16 02 c0       	push   0xc0021638
c0016d7e:	e8 6e 3c ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0016d83:	83 c4 10             	add    esp,0x10
c0016d86:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016d8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d90:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016d96:	0f 20 d2             	mov    edx,cr2
c0016d99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016d9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016da1:	83 ec 08             	sub    esp,0x8
c0016da4:	52                   	push   edx
c0016da5:	50                   	push   eax
c0016da6:	e8 a9 37 ff ff       	call   c000a554 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	0f b6 c0             	movzx  eax,al
c0016db1:	85 c0                	test   eax,eax
c0016db3:	75 2e                	jne    c0016de3 <pgFault(regs*, void*)+0x84>
c0016db5:	83 ec 0c             	sub    esp,0xc
c0016db8:	68 74 15 02 c0       	push   0xc0021574
c0016dbd:	e8 ea fe ff ff       	call   c0016cac <displayProgramFault(char const*)>
c0016dc2:	83 c4 10             	add    esp,0x10
c0016dc5:	83 ec 0c             	sub    esp,0xc
c0016dc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dcc:	e8 03 fb ff ff       	call   c00168d4 <displayDebugInfo(regs*)>
c0016dd1:	83 c4 10             	add    esp,0x10
c0016dd4:	83 ec 0c             	sub    esp,0xc
c0016dd7:	6a 00                	push   0x0
c0016dd9:	e8 82 ed ff ff       	call   c0015b60 <Thr::terminateFromIRQ(int)>
c0016dde:	83 c4 10             	add    esp,0x10
c0016de1:	eb 01                	jmp    c0016de4 <pgFault(regs*, void*)+0x85>
c0016de3:	90                   	nop
c0016de4:	83 c4 1c             	add    esp,0x1c
c0016de7:	c3                   	ret    

c0016de8 <otherISRHandler(regs*, void*)>:
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	83 ec 0c             	sub    esp,0xc
c0016dee:	68 60 16 02 c0       	push   0xc0021660
c0016df3:	e8 b4 fe ff ff       	call   c0016cac <displayProgramFault(char const*)>
c0016df8:	83 c4 10             	add    esp,0x10
c0016dfb:	83 ec 0c             	sub    esp,0xc
c0016dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e02:	e8 cd fa ff ff       	call   c00168d4 <displayDebugInfo(regs*)>
c0016e07:	83 c4 10             	add    esp,0x10
c0016e0a:	83 ec 0c             	sub    esp,0xc
c0016e0d:	6a 00                	push   0x0
c0016e0f:	e8 4c ed ff ff       	call   c0015b60 <Thr::terminateFromIRQ(int)>
c0016e14:	83 c4 10             	add    esp,0x10
c0016e17:	90                   	nop
c0016e18:	83 c4 0c             	add    esp,0xc
c0016e1b:	c3                   	ret    

c0016e1c <opcodeFault(regs*, void*)>:
c0016e1c:	55                   	push   ebp
c0016e1d:	89 e5                	mov    ebp,esp
c0016e1f:	83 ec 08             	sub    esp,0x8
c0016e22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e28:	83 ec 08             	sub    esp,0x8
c0016e2b:	50                   	push   eax
c0016e2c:	68 7f 15 02 c0       	push   0xc002157f
c0016e31:	e8 bb 3b ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0016e36:	83 c4 10             	add    esp,0x10
c0016e39:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016e3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e44:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016e4a:	0f b6 c0             	movzx  eax,al
c0016e4d:	85 c0                	test   eax,eax
c0016e4f:	74 21                	je     c0016e72 <opcodeFault(regs*, void*)+0x56>
c0016e51:	83 ec 0c             	sub    esp,0xc
c0016e54:	68 88 16 02 c0       	push   0xc0021688
c0016e59:	e8 93 3b ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0016e5e:	83 c4 10             	add    esp,0x10
c0016e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e64:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e67:	8d 50 19             	lea    edx,[eax+0x19]
c0016e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e6d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016e70:	eb 2b                	jmp    c0016e9d <opcodeFault(regs*, void*)+0x81>
c0016e72:	83 ec 0c             	sub    esp,0xc
c0016e75:	68 8d 15 02 c0       	push   0xc002158d
c0016e7a:	e8 2d fe ff ff       	call   c0016cac <displayProgramFault(char const*)>
c0016e7f:	83 c4 10             	add    esp,0x10
c0016e82:	83 ec 0c             	sub    esp,0xc
c0016e85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016e88:	e8 47 fa ff ff       	call   c00168d4 <displayDebugInfo(regs*)>
c0016e8d:	83 c4 10             	add    esp,0x10
c0016e90:	83 ec 0c             	sub    esp,0xc
c0016e93:	6a 00                	push   0x0
c0016e95:	e8 c6 ec ff ff       	call   c0015b60 <Thr::terminateFromIRQ(int)>
c0016e9a:	83 c4 10             	add    esp,0x10
c0016e9d:	c9                   	leave  
c0016e9e:	c3                   	ret    

c0016e9f <i386SaveCoprocessor(void*)>:
c0016e9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ea3:	83 c0 3f             	add    eax,0x3f
c0016ea6:	83 e0 c0             	and    eax,0xffffffc0
c0016ea9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ead:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c0016eb3 <i386LoadCoprocessor(void*)>:
c0016eb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eb7:	83 c0 3f             	add    eax,0x3f
c0016eba:	83 e0 c0             	and    eax,0xffffffc0
c0016ebd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ec1:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016ec7 <x87EmulHandler(regs*, void*)>:
c0016ec7:	53                   	push   ebx
c0016ec8:	83 ec 08             	sub    esp,0x8
c0016ecb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016ed4:	74 10                	je     c0016ee6 <x87EmulHandler(regs*, void*)+0x1f>
c0016ed6:	83 ec 0c             	sub    esp,0xc
c0016ed9:	68 9a 15 02 c0       	push   0xc002159a
c0016ede:	e8 3c 9a ff ff       	call   c001091f <KePanic(char const*)>
c0016ee3:	83 c4 10             	add    esp,0x10
c0016ee6:	0f 20 c0             	mov    eax,cr0
c0016ee9:	a8 08                	test   al,0x8
c0016eeb:	74 59                	je     c0016f46 <x87EmulHandler(regs*, void*)+0x7f>
c0016eed:	0f 06                	clts   
c0016eef:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016ef4:	85 c0                	test   eax,eax
c0016ef6:	74 0e                	je     c0016f06 <x87EmulHandler(regs*, void*)+0x3f>
c0016ef8:	83 ec 0c             	sub    esp,0xc
c0016efb:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016efe:	e8 9c ff ff ff       	call   c0016e9f <i386SaveCoprocessor(void*)>
c0016f03:	83 c4 10             	add    esp,0x10
c0016f06:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016f0c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016f10:	75 12                	jne    c0016f24 <x87EmulHandler(regs*, void*)+0x5d>
c0016f12:	83 ec 0c             	sub    esp,0xc
c0016f15:	68 40 02 00 00       	push   0x240
c0016f1a:	e8 8f 0b ff ff       	call   c0007aae <malloc>
c0016f1f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016f22:	eb 10                	jmp    c0016f34 <x87EmulHandler(regs*, void*)+0x6d>
c0016f24:	83 ec 0c             	sub    esp,0xc
c0016f27:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016f2c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016f2f:	e8 7f ff ff ff       	call   c0016eb3 <i386LoadCoprocessor(void*)>
c0016f34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f39:	83 c4 10             	add    esp,0x10
c0016f3c:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c0016f41:	83 c4 08             	add    esp,0x8
c0016f44:	5b                   	pop    ebx
c0016f45:	c3                   	ret    
c0016f46:	83 ec 0c             	sub    esp,0xc
c0016f49:	68 ae 15 02 c0       	push   0xc00215ae
c0016f4e:	e8 9e 3a ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0016f53:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f5b:	83 c4 18             	add    esp,0x18
c0016f5e:	5b                   	pop    ebx
c0016f5f:	e9 fc eb ff ff       	jmp    c0015b60 <Thr::terminateFromIRQ(int)>

c0016f64 <HalInitialiseCoprocessor()>:
c0016f64:	83 ec 10             	sub    esp,0x10
c0016f67:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0016f71:	6a 00                	push   0x0
c0016f73:	68 c7 6e 01 c0       	push   0xc0016ec7
c0016f78:	6a 07                	push   0x7
c0016f7a:	e8 db 53 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f7f:	e8 dc 6f 00 00       	call   c001df60 <avxDetect>
c0016f84:	83 c4 10             	add    esp,0x10
c0016f87:	85 c0                	test   eax,eax
c0016f89:	74 1c                	je     c0016fa7 <HalInitialiseCoprocessor()+0x43>
c0016f8b:	c7 05 10 82 02 c0 8a df 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001df8a
c0016f95:	c7 05 0c 82 02 c0 9b df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001df9b
c0016f9f:	83 c4 0c             	add    esp,0xc
c0016fa2:	e9 05 70 00 00       	jmp    c001dfac <avxInit>
c0016fa7:	e8 44 73 00 00       	call   c001e2f0 <absolutelyNoChanceInHell>
c0016fac:	85 c0                	test   eax,eax
c0016fae:	74 1c                	je     c0016fcc <HalInitialiseCoprocessor()+0x68>
c0016fb0:	c7 05 10 82 02 c0 08 e3 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e308
c0016fba:	c7 05 0c 82 02 c0 10 e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e310
c0016fc4:	83 c4 0c             	add    esp,0xc
c0016fc7:	e9 4c 73 00 00       	jmp    c001e318 <sseInit>
c0016fcc:	e8 65 73 00 00       	call   c001e336 <x87Detect>
c0016fd1:	85 c0                	test   eax,eax
c0016fd3:	74 1c                	je     c0016ff1 <HalInitialiseCoprocessor()+0x8d>
c0016fd5:	c7 05 10 82 02 c0 51 e3 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e351
c0016fdf:	c7 05 0c 82 02 c0 58 e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e358
c0016fe9:	83 c4 0c             	add    esp,0xc
c0016fec:	e9 6e 73 00 00       	jmp    c001e35f <x87Init>
c0016ff1:	c7 05 10 82 02 c0 a1 68 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00168a1
c0016ffb:	c7 05 0c 82 02 c0 a1 68 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc00168a1
c0017005:	0f 20 c0             	mov    eax,cr0
c0017008:	83 c8 04             	or     eax,0x4
c001700b:	0f 22 c0             	mov    cr0,eax
c001700e:	83 c4 0c             	add    esp,0xc
c0017011:	c3                   	ret    

c0017012 <HalPanic(char const*)>:
c0017012:	53                   	push   ebx
c0017013:	83 ec 10             	sub    esp,0x10
c0017016:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001701a:	fa                   	cli    
c001701b:	53                   	push   ebx
c001701c:	68 c4 15 02 c0       	push   0xc00215c4
c0017021:	e8 cb 39 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0017026:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c001702b:	83 c4 10             	add    esp,0x10
c001702e:	85 c0                	test   eax,eax
c0017030:	74 09                	je     c001703b <HalPanic(char const*)+0x29>
c0017032:	83 ec 0c             	sub    esp,0xc
c0017035:	53                   	push   ebx
c0017036:	ff d0                	call   eax
c0017038:	83 c4 10             	add    esp,0x10
c001703b:	50                   	push   eax
c001703c:	6a 01                	push   0x1
c001703e:	6a 0f                	push   0xf
c0017040:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017046:	e8 53 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001704b:	5a                   	pop    edx
c001704c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017052:	e8 37 17 ff ff       	call   c000878e <VgaText::clearScreen()>
c0017057:	59                   	pop    ecx
c0017058:	58                   	pop    eax
c0017059:	68 a4 fd 01 c0       	push   0xc001fda4
c001705e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017064:	e8 6d 15 ff ff       	call   c00085d6 <VgaText::setTitle(char*)>
c0017069:	83 c4 0c             	add    esp,0xc
c001706c:	6a 01                	push   0x1
c001706e:	6a 0f                	push   0xf
c0017070:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017076:	e8 23 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001707b:	58                   	pop    eax
c001707c:	5a                   	pop    edx
c001707d:	68 dd 15 02 c0       	push   0xc00215dd
c0017082:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017088:	e8 03 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c001708d:	83 c4 0c             	add    esp,0xc
c0017090:	6a 0f                	push   0xf
c0017092:	6a 01                	push   0x1
c0017094:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001709a:	e8 ff 14 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001709f:	59                   	pop    ecx
c00170a0:	58                   	pop    eax
c00170a1:	68 e6 15 02 c0       	push   0xc00215e6
c00170a6:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170ac:	e8 df 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170b1:	83 c4 0c             	add    esp,0xc
c00170b4:	6a 01                	push   0x1
c00170b6:	6a 0f                	push   0xf
c00170b8:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170be:	e8 db 14 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00170c3:	58                   	pop    eax
c00170c4:	5a                   	pop    edx
c00170c5:	68 2a 16 02 c0       	push   0xc002162a
c00170ca:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170d0:	e8 bb 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170d5:	59                   	pop    ecx
c00170d6:	58                   	pop    eax
c00170d7:	68 f3 15 02 c0       	push   0xc00215f3
c00170dc:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170e2:	e8 a9 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170e7:	58                   	pop    eax
c00170e8:	5a                   	pop    edx
c00170e9:	68 2d 16 02 c0       	push   0xc002162d
c00170ee:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170f4:	e8 97 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170f9:	59                   	pop    ecx
c00170fa:	58                   	pop    eax
c00170fb:	53                   	push   ebx
c00170fc:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017102:	e8 89 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017107:	58                   	pop    eax
c0017108:	5a                   	pop    edx
c0017109:	68 2a 16 02 c0       	push   0xc002162a
c001710e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017114:	e8 77 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017119:	83 c4 10             	add    esp,0x10
c001711c:	eb fe                	jmp    c001711c <HalPanic(char const*)+0x10a>

c001711e <HalQueryPerformanceCounter()>:
c001711e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017123:	31 d2                	xor    edx,edx
c0017125:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001712b:	31 c0                	xor    eax,eax
c001712d:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017134:	74 02                	je     c0017138 <HalQueryPerformanceCounter()+0x1a>
c0017136:	0f 31                	rdtsc  
c0017138:	c3                   	ret    

c0017139 <HalInitialise()>:
c0017139:	53                   	push   ebx
c001713a:	83 ec 08             	sub    esp,0x8
c001713d:	e8 48 54 ff ff       	call   c000c58a <setupINTS()>
c0017142:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017149:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001714e:	75 0f                	jne    c001715f <HalInitialise()+0x26>
c0017150:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017156:	83 e2 fe             	and    edx,0xfffffffe
c0017159:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001715f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017165:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c001716c:	83 e2 fe             	and    edx,0xfffffffe
c001716f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017175:	e8 9e 02 00 00       	call   c0017418 <picOpen()>
c001717a:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017181:	74 0a                	je     c001718d <HalInitialise()+0x54>
c0017183:	e8 e0 01 00 00       	call   c0017368 <picDisable()>
c0017188:	e8 3d 67 00 00       	call   c001d8ca <apicOpen()>
c001718d:	bb 0f 00 00 00       	mov    ebx,0xf
c0017192:	50                   	push   eax
c0017193:	6a 00                	push   0x0
c0017195:	68 e8 6d 01 c0       	push   0xc0016de8
c001719a:	6a 00                	push   0x0
c001719c:	e8 b9 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171a1:	83 c4 0c             	add    esp,0xc
c00171a4:	6a 00                	push   0x0
c00171a6:	68 e8 6d 01 c0       	push   0xc0016de8
c00171ab:	6a 01                	push   0x1
c00171ad:	e8 a8 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171b2:	83 c4 0c             	add    esp,0xc
c00171b5:	6a 00                	push   0x0
c00171b7:	68 a2 68 01 c0       	push   0xc00168a2
c00171bc:	6a 02                	push   0x2
c00171be:	e8 97 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171c3:	83 c4 0c             	add    esp,0xc
c00171c6:	6a 00                	push   0x0
c00171c8:	68 e8 6d 01 c0       	push   0xc0016de8
c00171cd:	6a 03                	push   0x3
c00171cf:	e8 86 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171d4:	83 c4 0c             	add    esp,0xc
c00171d7:	6a 00                	push   0x0
c00171d9:	68 e8 6d 01 c0       	push   0xc0016de8
c00171de:	6a 04                	push   0x4
c00171e0:	e8 75 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171e5:	83 c4 0c             	add    esp,0xc
c00171e8:	6a 00                	push   0x0
c00171ea:	68 e8 6d 01 c0       	push   0xc0016de8
c00171ef:	6a 05                	push   0x5
c00171f1:	e8 64 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171f6:	83 c4 0c             	add    esp,0xc
c00171f9:	6a 00                	push   0x0
c00171fb:	68 1c 6e 01 c0       	push   0xc0016e1c
c0017200:	6a 06                	push   0x6
c0017202:	e8 53 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017207:	83 c4 0c             	add    esp,0xc
c001720a:	6a 00                	push   0x0
c001720c:	68 bb 68 01 c0       	push   0xc00168bb
c0017211:	6a 08                	push   0x8
c0017213:	e8 42 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017218:	83 c4 0c             	add    esp,0xc
c001721b:	6a 00                	push   0x0
c001721d:	68 e8 6d 01 c0       	push   0xc0016de8
c0017222:	6a 09                	push   0x9
c0017224:	e8 31 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017229:	83 c4 0c             	add    esp,0xc
c001722c:	6a 00                	push   0x0
c001722e:	68 e8 6d 01 c0       	push   0xc0016de8
c0017233:	6a 0a                	push   0xa
c0017235:	e8 20 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001723a:	83 c4 0c             	add    esp,0xc
c001723d:	6a 00                	push   0x0
c001723f:	68 e8 6d 01 c0       	push   0xc0016de8
c0017244:	6a 0b                	push   0xb
c0017246:	e8 0f 51 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001724b:	83 c4 0c             	add    esp,0xc
c001724e:	6a 00                	push   0x0
c0017250:	68 f8 6c 01 c0       	push   0xc0016cf8
c0017255:	6a 0d                	push   0xd
c0017257:	e8 fe 50 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001725c:	83 c4 0c             	add    esp,0xc
c001725f:	6a 00                	push   0x0
c0017261:	68 5f 6d 01 c0       	push   0xc0016d5f
c0017266:	6a 0e                	push   0xe
c0017268:	e8 ed 50 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001726d:	83 c4 10             	add    esp,0x10
c0017270:	50                   	push   eax
c0017271:	6a 00                	push   0x0
c0017273:	68 e8 6d 01 c0       	push   0xc0016de8
c0017278:	53                   	push   ebx
c0017279:	43                   	inc    ebx
c001727a:	e8 db 50 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001727f:	83 c4 10             	add    esp,0x10
c0017282:	83 fb 1e             	cmp    ebx,0x1e
c0017285:	75 e9                	jne    c0017270 <HalInitialise()+0x137>
c0017287:	50                   	push   eax
c0017288:	6a 00                	push   0x0
c001728a:	68 fa 1b 01 c0       	push   0xc0011bfa
c001728f:	6a 60                	push   0x60
c0017291:	e8 c4 50 ff ff       	call   c000c35a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017296:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001729b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00172a5:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00172ac:	e8 fd 07 ff ff       	call   c0007aae <malloc>
c00172b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00172b4:	89 c3                	mov    ebx,eax
c00172b6:	e8 3b 09 00 00       	call   c0017bf6 <RTC::RTC()>
c00172bb:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00172c5:	5a                   	pop    edx
c00172c6:	59                   	pop    ecx
c00172c7:	53                   	push   ebx
c00172c8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00172ce:	e8 53 4b ff ff       	call   c000be26 <Device::addChild(Device*)>
c00172d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00172d5:	6a 00                	push   0x0
c00172d7:	6a 00                	push   0x0
c00172d9:	6a 00                	push   0x0
c00172db:	53                   	push   ebx
c00172dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00172df:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00172e4:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00172ea:	83 c4 28             	add    esp,0x28
c00172ed:	5b                   	pop    ebx
c00172ee:	c3                   	ret    

c00172ef <HalMakeBeep(int)>:
c00172ef:	53                   	push   ebx
c00172f0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00172f4:	85 db                	test   ebx,ebx
c00172f6:	75 07                	jne    c00172ff <HalMakeBeep(int)+0x10>
c00172f8:	e4 61                	in     al,0x61
c00172fa:	83 e0 fc             	and    eax,0xfffffffc
c00172fd:	eb 26                	jmp    c0017325 <HalMakeBeep(int)+0x36>
c00172ff:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017304:	99                   	cdq    
c0017305:	f7 fb                	idiv   ebx
c0017307:	89 c1                	mov    ecx,eax
c0017309:	b0 b6                	mov    al,0xb6
c001730b:	e6 43                	out    0x43,al
c001730d:	88 c8                	mov    al,cl
c001730f:	e6 42                	out    0x42,al
c0017311:	89 c8                	mov    eax,ecx
c0017313:	c1 e8 08             	shr    eax,0x8
c0017316:	e6 42                	out    0x42,al
c0017318:	e4 61                	in     al,0x61
c001731a:	89 c2                	mov    edx,eax
c001731c:	83 ca 03             	or     edx,0x3
c001731f:	38 d0                	cmp    al,dl
c0017321:	74 04                	je     c0017327 <HalMakeBeep(int)+0x38>
c0017323:	88 d0                	mov    al,dl
c0017325:	e6 61                	out    0x61,al
c0017327:	5b                   	pop    ebx
c0017328:	c3                   	ret    

c0017329 <HalGetRand()>:
c0017329:	31 c0                	xor    eax,eax
c001732b:	c3                   	ret    

c001732c <HalEndOfInterrupt(int)>:
c001732c:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017333:	74 23                	je     c0017358 <HalEndOfInterrupt(int)+0x2c>
c0017335:	83 ec 14             	sub    esp,0x14
c0017338:	6a 1b                	push   0x1b
c001733a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017340:	e8 73 fd fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0017345:	25 00 f0 ff ff       	and    eax,0xfffff000
c001734a:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017354:	83 c4 1c             	add    esp,0x1c
c0017357:	c3                   	ret    
c0017358:	e9 3f 02 00 00       	jmp    c001759c <picEOI(int)>

c001735d <HalRestart()>:
c001735d:	c3                   	ret    

c001735e <HalShutdown()>:
c001735e:	c3                   	ret    

c001735f <HalSleep()>:
c001735f:	c3                   	ret    

c0017360 <picIoWait()>:
c0017360:	eb 00                	jmp    c0017362 <picIoWait()+0x2>
c0017362:	eb 00                	jmp    c0017364 <picIoWait()+0x4>
c0017364:	90                   	nop
c0017365:	c3                   	ret    
c0017366:	66 90                	xchg   ax,ax

c0017368 <picDisable()>:
c0017368:	83 ec 10             	sub    esp,0x10
c001736b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017372:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017377:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001737b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017380:	ee                   	out    dx,al
c0017381:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017388:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001738d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017391:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017396:	ee                   	out    dx,al
c0017397:	90                   	nop
c0017398:	83 c4 10             	add    esp,0x10
c001739b:	c3                   	ret    

c001739c <picGetIRQReg(int)>:
c001739c:	83 ec 10             	sub    esp,0x10
c001739f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173a3:	0f b6 c0             	movzx  eax,al
c00173a6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00173ad:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00173b1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00173b5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00173ba:	ee                   	out    dx,al
c00173bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173bf:	0f b6 c0             	movzx  eax,al
c00173c2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00173c9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00173cd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00173d1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00173d6:	ee                   	out    dx,al
c00173d7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00173de:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00173e3:	89 c2                	mov    edx,eax
c00173e5:	ec                   	in     al,dx
c00173e6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00173ea:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00173ee:	0f b6 c0             	movzx  eax,al
c00173f1:	c1 e0 08             	shl    eax,0x8
c00173f4:	89 c1                	mov    ecx,eax
c00173f6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00173fd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017402:	89 c2                	mov    edx,eax
c0017404:	ec                   	in     al,dx
c0017405:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017409:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001740d:	0f b6 c0             	movzx  eax,al
c0017410:	09 c8                	or     eax,ecx
c0017412:	83 c4 10             	add    esp,0x10
c0017415:	c3                   	ret    
c0017416:	66 90                	xchg   ax,ax

c0017418 <picOpen()>:
c0017418:	83 ec 50             	sub    esp,0x50
c001741b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017422:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017427:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001742b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001742f:	ee                   	out    dx,al
c0017430:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017437:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001743c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017440:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017444:	ee                   	out    dx,al
c0017445:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001744d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017455:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001745c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017460:	89 c2                	mov    edx,eax
c0017462:	ec                   	in     al,dx
c0017463:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017467:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001746b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001746f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017476:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001747a:	89 c2                	mov    edx,eax
c001747c:	ec                   	in     al,dx
c001747d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017481:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017485:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017489:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017490:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017495:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017499:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001749d:	ee                   	out    dx,al
c001749e:	e8 bd fe ff ff       	call   c0017360 <picIoWait()>
c00174a3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00174aa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00174af:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00174b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00174b7:	ee                   	out    dx,al
c00174b8:	e8 a3 fe ff ff       	call   c0017360 <picIoWait()>
c00174bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174c1:	0f b6 c0             	movzx  eax,al
c00174c4:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00174cb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00174cf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00174d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174d7:	ee                   	out    dx,al
c00174d8:	e8 83 fe ff ff       	call   c0017360 <picIoWait()>
c00174dd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174e1:	0f b6 c0             	movzx  eax,al
c00174e4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00174eb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00174ef:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00174f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174f7:	ee                   	out    dx,al
c00174f8:	e8 63 fe ff ff       	call   c0017360 <picIoWait()>
c00174fd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017504:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017509:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001750d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017511:	ee                   	out    dx,al
c0017512:	e8 49 fe ff ff       	call   c0017360 <picIoWait()>
c0017517:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001751e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017523:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017527:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001752b:	ee                   	out    dx,al
c001752c:	e8 2f fe ff ff       	call   c0017360 <picIoWait()>
c0017531:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017538:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001753d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017541:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017545:	ee                   	out    dx,al
c0017546:	e8 15 fe ff ff       	call   c0017360 <picIoWait()>
c001754b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017552:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017557:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001755b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001755f:	ee                   	out    dx,al
c0017560:	e8 fb fd ff ff       	call   c0017360 <picIoWait()>
c0017565:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001756a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017571:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017575:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017579:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001757d:	ee                   	out    dx,al
c001757e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017583:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001758a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001758e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017592:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017596:	ee                   	out    dx,al
c0017597:	90                   	nop
c0017598:	83 c4 50             	add    esp,0x50
c001759b:	c3                   	ret    

c001759c <picEOI(int)>:
c001759c:	83 ec 10             	sub    esp,0x10
c001759f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00175a4:	75 1e                	jne    c00175c4 <picEOI(int)+0x28>
c00175a6:	6a 0b                	push   0xb
c00175a8:	e8 ef fd ff ff       	call   c001739c <picGetIRQReg(int)>
c00175ad:	83 c4 04             	add    esp,0x4
c00175b0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00175b5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00175ba:	25 80 00 00 00       	and    eax,0x80
c00175bf:	74 73                	je     c0017634 <picEOI(int)+0x98>
c00175c1:	8d 76 00             	lea    esi,[esi+0x0]
c00175c4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00175c9:	75 31                	jne    c00175fc <picEOI(int)+0x60>
c00175cb:	6a 0b                	push   0xb
c00175cd:	e8 ca fd ff ff       	call   c001739c <picGetIRQReg(int)>
c00175d2:	83 c4 04             	add    esp,0x4
c00175d5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00175da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175de:	98                   	cwde   
c00175df:	85 c0                	test   eax,eax
c00175e1:	78 19                	js     c00175fc <picEOI(int)+0x60>
c00175e3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00175ea:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00175ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00175f3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00175f8:	ee                   	out    dx,al
c00175f9:	eb 3d                	jmp    c0017638 <picEOI(int)+0x9c>
c00175fb:	90                   	nop
c00175fc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017601:	7e 19                	jle    c001761c <picEOI(int)+0x80>
c0017603:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001760a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001760f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017613:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017618:	ee                   	out    dx,al
c0017619:	8d 76 00             	lea    esi,[esi+0x0]
c001761c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017623:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017628:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001762c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017631:	ee                   	out    dx,al
c0017632:	eb 04                	jmp    c0017638 <picEOI(int)+0x9c>
c0017634:	90                   	nop
c0017635:	8d 76 00             	lea    esi,[esi+0x0]
c0017638:	83 c4 10             	add    esp,0x10
c001763b:	c3                   	ret    

c001763c <RTC::open(int, int, void*)>:
c001763c:	31 c0                	xor    eax,eax
c001763e:	c3                   	ret    
c001763f:	90                   	nop

c0017640 <RTC::close(int, int, void*)>:
c0017640:	31 c0                	xor    eax,eax
c0017642:	c3                   	ret    
c0017643:	90                   	nop

c0017644 <RTC::timeInSecondsUTC()>:
c0017644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017648:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001764e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017654:	c3                   	ret    
c0017655:	90                   	nop

c0017656 <RTC::timeInDatetimeUTC()>:
c0017656:	53                   	push   ebx
c0017657:	83 ec 14             	sub    esp,0x14
c001765a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001765e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017662:	8b 10                	mov    edx,DWORD PTR [eax]
c0017664:	50                   	push   eax
c0017665:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017668:	83 c4 0c             	add    esp,0xc
c001766b:	52                   	push   edx
c001766c:	50                   	push   eax
c001766d:	53                   	push   ebx
c001766e:	e8 27 45 ff ff       	call   c000bb9a <secondsToDatetime(unsigned long long)>
c0017673:	89 d8                	mov    eax,ebx
c0017675:	83 c4 14             	add    esp,0x14
c0017678:	5b                   	pop    ebx
c0017679:	c2 04 00             	ret    0x4

c001767c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001767c:	56                   	push   esi
c001767d:	53                   	push   ebx
c001767e:	83 ec 14             	sub    esp,0x14
c0017681:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017685:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017687:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001768a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001768e:	52                   	push   edx
c001768f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017693:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017697:	50                   	push   eax
c0017698:	e8 fd 44 ff ff       	call   c000bb9a <secondsToDatetime(unsigned long long)>
c001769d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176a9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00176ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00176b1:	89 f0                	mov    eax,esi
c00176b3:	83 c4 20             	add    esp,0x20
c00176b6:	5b                   	pop    ebx
c00176b7:	5e                   	pop    esi
c00176b8:	ff e0                	jmp    eax

c00176ba <RTC::~RTC()>:
c00176ba:	83 ec 0c             	sub    esp,0xc
c00176bd:	ba c8 16 02 c0       	mov    edx,0xc00216c8
c00176c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176c6:	89 10                	mov    DWORD PTR [eax],edx
c00176c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176cc:	83 ec 0c             	sub    esp,0xc
c00176cf:	50                   	push   eax
c00176d0:	e8 57 42 ff ff       	call   c000b92c <Clock::~Clock()>
c00176d5:	83 c4 10             	add    esp,0x10
c00176d8:	90                   	nop
c00176d9:	83 c4 0c             	add    esp,0xc
c00176dc:	c3                   	ret    
c00176dd:	90                   	nop

c00176de <RTC::~RTC()>:
c00176de:	83 ec 0c             	sub    esp,0xc
c00176e1:	83 ec 0c             	sub    esp,0xc
c00176e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176e8:	e8 cd ff ff ff       	call   c00176ba <RTC::~RTC()>
c00176ed:	83 c4 10             	add    esp,0x10
c00176f0:	83 ec 08             	sub    esp,0x8
c00176f3:	68 60 01 00 00       	push   0x160
c00176f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176fc:	e8 c3 31 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c0017701:	83 c4 10             	add    esp,0x10
c0017704:	83 c4 0c             	add    esp,0xc
c0017707:	c3                   	ret    

c0017708 <RTC::get_update_in_progress_flag()>:
c0017708:	83 ec 14             	sub    esp,0x14
c001770b:	6a 0a                	push   0xa
c001770d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017713:	e8 58 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017718:	83 c4 1c             	add    esp,0x1c
c001771b:	0f b6 c0             	movzx  eax,al
c001771e:	c1 e8 07             	shr    eax,0x7
c0017721:	c3                   	ret    

c0017722 <RTC::completeRTCRefresh()>:
c0017722:	55                   	push   ebp
c0017723:	57                   	push   edi
c0017724:	56                   	push   esi
c0017725:	53                   	push   ebx
c0017726:	83 ec 3c             	sub    esp,0x3c
c0017729:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c001772f:	83 ec 0c             	sub    esp,0xc
c0017732:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017736:	e8 cd ff ff ff       	call   c0017708 <RTC::get_update_in_progress_flag()>
c001773b:	83 c4 10             	add    esp,0x10
c001773e:	84 c0                	test   al,al
c0017740:	74 0e                	je     c0017750 <RTC::completeRTCRefresh()+0x2e>
c0017742:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017748:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001774e:	73 df                	jae    c001772f <RTC::completeRTCRefresh()+0xd>
c0017750:	51                   	push   ecx
c0017751:	51                   	push   ecx
c0017752:	6a 00                	push   0x0
c0017754:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001775a:	e8 11 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001775f:	5b                   	pop    ebx
c0017760:	89 c7                	mov    edi,eax
c0017762:	5e                   	pop    esi
c0017763:	6a 02                	push   0x2
c0017765:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001776b:	e8 00 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017770:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017774:	5d                   	pop    ebp
c0017775:	58                   	pop    eax
c0017776:	6a 04                	push   0x4
c0017778:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001777e:	e8 ed f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017783:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017787:	58                   	pop    eax
c0017788:	5a                   	pop    edx
c0017789:	6a 07                	push   0x7
c001778b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017791:	e8 da f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017796:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001779a:	59                   	pop    ecx
c001779b:	5b                   	pop    ebx
c001779c:	6a 08                	push   0x8
c001779e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177a4:	e8 c7 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177a9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00177ad:	5e                   	pop    esi
c00177ae:	5d                   	pop    ebp
c00177af:	6a 09                	push   0x9
c00177b1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177b7:	e8 b4 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177bc:	0f b6 c0             	movzx  eax,al
c00177bf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177c3:	83 c4 10             	add    esp,0x10
c00177c6:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00177cc:	83 ec 0c             	sub    esp,0xc
c00177cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00177d3:	e8 30 ff ff ff       	call   c0017708 <RTC::get_update_in_progress_flag()>
c00177d8:	83 c4 10             	add    esp,0x10
c00177db:	84 c0                	test   al,al
c00177dd:	74 0e                	je     c00177ed <RTC::completeRTCRefresh()+0xcb>
c00177df:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00177e5:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00177eb:	73 df                	jae    c00177cc <RTC::completeRTCRefresh()+0xaa>
c00177ed:	51                   	push   ecx
c00177ee:	51                   	push   ecx
c00177ef:	6a 00                	push   0x0
c00177f1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177f7:	e8 74 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177fc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017800:	5b                   	pop    ebx
c0017801:	5e                   	pop    esi
c0017802:	6a 02                	push   0x2
c0017804:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001780a:	e8 61 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001780f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017813:	5d                   	pop    ebp
c0017814:	58                   	pop    eax
c0017815:	6a 04                	push   0x4
c0017817:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001781d:	e8 4e f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017822:	88 c3                	mov    bl,al
c0017824:	58                   	pop    eax
c0017825:	5a                   	pop    edx
c0017826:	6a 07                	push   0x7
c0017828:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001782e:	e8 3d f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017833:	59                   	pop    ecx
c0017834:	89 c6                	mov    esi,eax
c0017836:	5d                   	pop    ebp
c0017837:	6a 08                	push   0x8
c0017839:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001783f:	e8 2c f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017844:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017848:	58                   	pop    eax
c0017849:	5a                   	pop    edx
c001784a:	6a 09                	push   0x9
c001784c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017852:	e8 19 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017857:	89 f9                	mov    ecx,edi
c0017859:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001785d:	0f b6 e8             	movzx  ebp,al
c0017860:	83 c4 10             	add    esp,0x10
c0017863:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017867:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001786c:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0017871:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017875:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017879:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c001787d:	0f 94 c0             	sete   al
c0017880:	0f b6 fb             	movzx  edi,bl
c0017883:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0017887:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001788c:	0f 94 c2             	sete   dl
c001788f:	21 d0                	and    eax,edx
c0017891:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017895:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017899:	0f 94 c2             	sete   dl
c001789c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00178a0:	21 c2                	and    edx,eax
c00178a2:	89 f0                	mov    eax,esi
c00178a4:	0f b6 c0             	movzx  eax,al
c00178a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178ab:	89 f0                	mov    eax,esi
c00178ad:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00178b1:	0f 94 c0             	sete   al
c00178b4:	21 d0                	and    eax,edx
c00178b6:	31 d2                	xor    edx,edx
c00178b8:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00178bc:	0f 94 c2             	sete   dl
c00178bf:	85 c2                	test   edx,eax
c00178c1:	75 27                	jne    c00178ea <RTC::completeRTCRefresh()+0x1c8>
c00178c3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00178c7:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00178cb:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00178cf:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00178d3:	89 f0                	mov    eax,esi
c00178d5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00178d9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00178dd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00178e1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00178e5:	e9 dc fe ff ff       	jmp    c00177c6 <RTC::completeRTCRefresh()+0xa4>
c00178ea:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00178ee:	75 d3                	jne    c00178c3 <RTC::completeRTCRefresh()+0x1a1>
c00178f0:	52                   	push   edx
c00178f1:	52                   	push   edx
c00178f2:	6a 0b                	push   0xb
c00178f4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178fa:	e8 71 f8 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00178ff:	83 c4 10             	add    esp,0x10
c0017902:	a8 04                	test   al,0x4
c0017904:	75 7a                	jne    c0017980 <RTC::completeRTCRefresh()+0x25e>
c0017906:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001790a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001790e:	83 e1 0f             	and    ecx,0xf
c0017911:	c1 ea 04             	shr    edx,0x4
c0017914:	c1 ef 04             	shr    edi,0x4
c0017917:	6b d2 0a             	imul   edx,edx,0xa
c001791a:	83 e6 0f             	and    esi,0xf
c001791d:	01 d1                	add    ecx,edx
c001791f:	c1 ed 04             	shr    ebp,0x4
c0017922:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0017926:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001792a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001792e:	c1 ea 04             	shr    edx,0x4
c0017931:	83 e1 0f             	and    ecx,0xf
c0017934:	6b d2 0a             	imul   edx,edx,0xa
c0017937:	6b ed 0a             	imul   ebp,ebp,0xa
c001793a:	01 d1                	add    ecx,edx
c001793c:	89 fa                	mov    edx,edi
c001793e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017942:	83 e2 07             	and    edx,0x7
c0017945:	89 d9                	mov    ecx,ebx
c0017947:	6b d2 0a             	imul   edx,edx,0xa
c001794a:	83 e1 0f             	and    ecx,0xf
c001794d:	83 e3 80             	and    ebx,0xffffff80
c0017950:	01 d1                	add    ecx,edx
c0017952:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017956:	09 cb                	or     ebx,ecx
c0017958:	c1 ea 04             	shr    edx,0x4
c001795b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001795f:	6b d2 0a             	imul   edx,edx,0xa
c0017962:	83 e1 0f             	and    ecx,0xf
c0017965:	01 d6                	add    esi,edx
c0017967:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001796b:	c1 ea 04             	shr    edx,0x4
c001796e:	6b d2 0a             	imul   edx,edx,0xa
c0017971:	01 d1                	add    ecx,edx
c0017973:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017977:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001797b:	83 e2 0f             	and    edx,0xf
c001797e:	01 d5                	add    ebp,edx
c0017980:	a8 02                	test   al,0x2
c0017982:	75 15                	jne    c0017999 <RTC::completeRTCRefresh()+0x277>
c0017984:	f6 c3 80             	test   bl,0x80
c0017987:	74 10                	je     c0017999 <RTC::completeRTCRefresh()+0x277>
c0017989:	83 e3 7f             	and    ebx,0x7f
c001798c:	b9 18 00 00 00       	mov    ecx,0x18
c0017991:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017994:	99                   	cdq    
c0017995:	f7 f9                	idiv   ecx
c0017997:	88 d3                	mov    bl,dl
c0017999:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001799f:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00179a5:	77 06                	ja     c00179ad <RTC::completeRTCRefresh()+0x28b>
c00179a7:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00179ad:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00179b2:	31 c9                	xor    ecx,ecx
c00179b4:	c1 e0 10             	shl    eax,0x10
c00179b7:	89 cd                	mov    ebp,ecx
c00179b9:	c1 e7 10             	shl    edi,0x10
c00179bc:	31 d2                	xor    edx,edx
c00179be:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00179c4:	09 c5                	or     ebp,eax
c00179c6:	89 f0                	mov    eax,esi
c00179c8:	89 e9                	mov    ecx,ebp
c00179ca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00179ce:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00179d2:	88 c2                	mov    dl,al
c00179d4:	88 d9                	mov    cl,bl
c00179d6:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00179da:	0f b7 c2             	movzx  eax,dx
c00179dd:	09 f8                	or     eax,edi
c00179df:	89 c2                	mov    edx,eax
c00179e1:	50                   	push   eax
c00179e2:	50                   	push   eax
c00179e3:	51                   	push   ecx
c00179e4:	52                   	push   edx
c00179e5:	e8 31 40 ff ff       	call   c000ba1b <datetimeToSeconds(datetime_t)>
c00179ea:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00179ee:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00179f4:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00179fa:	83 c4 4c             	add    esp,0x4c
c00179fd:	5b                   	pop    ebx
c00179fe:	5e                   	pop    esi
c00179ff:	5f                   	pop    edi
c0017a00:	5d                   	pop    ebp
c0017a01:	c3                   	ret    

c0017a02 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017a02:	55                   	push   ebp
c0017a03:	57                   	push   edi
c0017a04:	56                   	push   esi
c0017a05:	53                   	push   ebx
c0017a06:	83 ec 30             	sub    esp,0x30
c0017a09:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017a0d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017a11:	6a 00                	push   0x0
c0017a13:	6a 00                	push   0x0
c0017a15:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a1b:	e8 6a f8 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a20:	83 c4 0c             	add    esp,0xc
c0017a23:	6a 00                	push   0x0
c0017a25:	6a 02                	push   0x2
c0017a27:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a2d:	e8 58 f8 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a32:	31 d2                	xor    edx,edx
c0017a34:	89 f9                	mov    ecx,edi
c0017a36:	89 f8                	mov    eax,edi
c0017a38:	c1 e9 10             	shr    ecx,0x10
c0017a3b:	0f b6 c4             	movzx  eax,ah
c0017a3e:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017a42:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017a46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a4a:	b9 64 00 00 00       	mov    ecx,0x64
c0017a4f:	89 f0                	mov    eax,esi
c0017a51:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017a55:	89 f0                	mov    eax,esi
c0017a57:	0f b6 c4             	movzx  eax,ah
c0017a5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a5e:	89 f0                	mov    eax,esi
c0017a60:	c1 e8 10             	shr    eax,0x10
c0017a63:	f7 f1                	div    ecx
c0017a65:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017a69:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017a6d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017a71:	59                   	pop    ecx
c0017a72:	5b                   	pop    ebx
c0017a73:	89 fb                	mov    ebx,edi
c0017a75:	6a 0b                	push   0xb
c0017a77:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a7d:	e8 ee f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017a82:	83 c4 10             	add    esp,0x10
c0017a85:	89 c5                	mov    ebp,eax
c0017a87:	a8 04                	test   al,0x4
c0017a89:	75 6e                	jne    c0017af9 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017a8b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a8f:	31 d2                	xor    edx,edx
c0017a91:	0f b6 c1             	movzx  eax,cl
c0017a94:	b9 0a 00 00 00       	mov    ecx,0xa
c0017a99:	f7 f1                	div    ecx
c0017a9b:	c1 e0 04             	shl    eax,0x4
c0017a9e:	09 d0                	or     eax,edx
c0017aa0:	31 d2                	xor    edx,edx
c0017aa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017aa6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017aab:	f7 f1                	div    ecx
c0017aad:	c1 e0 04             	shl    eax,0x4
c0017ab0:	09 d0                	or     eax,edx
c0017ab2:	31 d2                	xor    edx,edx
c0017ab4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ab8:	0f b6 c3             	movzx  eax,bl
c0017abb:	f7 f1                	div    ecx
c0017abd:	c1 e0 04             	shl    eax,0x4
c0017ac0:	09 d0                	or     eax,edx
c0017ac2:	31 d2                	xor    edx,edx
c0017ac4:	89 c3                	mov    ebx,eax
c0017ac6:	89 f0                	mov    eax,esi
c0017ac8:	0f b6 c0             	movzx  eax,al
c0017acb:	f7 f1                	div    ecx
c0017acd:	c1 e0 04             	shl    eax,0x4
c0017ad0:	09 d0                	or     eax,edx
c0017ad2:	31 d2                	xor    edx,edx
c0017ad4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ad8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017add:	f7 f1                	div    ecx
c0017adf:	c1 e0 04             	shl    eax,0x4
c0017ae2:	09 d0                	or     eax,edx
c0017ae4:	31 d2                	xor    edx,edx
c0017ae6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017aea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017aee:	f7 f1                	div    ecx
c0017af0:	c1 e0 04             	shl    eax,0x4
c0017af3:	09 d0                	or     eax,edx
c0017af5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017af9:	83 e5 02             	and    ebp,0x2
c0017afc:	75 1e                	jne    c0017b1c <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017afe:	0f b6 c3             	movzx  eax,bl
c0017b01:	83 f8 0b             	cmp    eax,0xb
c0017b04:	76 10                	jbe    c0017b16 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017b06:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017b09:	88 d3                	mov    bl,dl
c0017b0b:	84 d2                	test   dl,dl
c0017b0d:	75 02                	jne    c0017b11 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017b0f:	b3 0c                	mov    bl,0xc
c0017b11:	83 cb 80             	or     ebx,0xffffff80
c0017b14:	eb 06                	jmp    c0017b1c <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017b16:	85 c0                	test   eax,eax
c0017b18:	75 02                	jne    c0017b1c <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017b1a:	b3 0c                	mov    bl,0xc
c0017b1c:	0f b6 db             	movzx  ebx,bl
c0017b1f:	50                   	push   eax
c0017b20:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017b25:	52                   	push   edx
c0017b26:	6a 00                	push   0x0
c0017b28:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b2e:	e8 57 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b33:	83 c4 0c             	add    esp,0xc
c0017b36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017b3b:	50                   	push   eax
c0017b3c:	6a 02                	push   0x2
c0017b3e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b44:	e8 41 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b49:	83 c4 0c             	add    esp,0xc
c0017b4c:	53                   	push   ebx
c0017b4d:	6a 04                	push   0x4
c0017b4f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b55:	e8 30 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b5a:	83 c4 0c             	add    esp,0xc
c0017b5d:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017b62:	52                   	push   edx
c0017b63:	6a 07                	push   0x7
c0017b65:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b6b:	e8 1a f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b70:	83 c4 0c             	add    esp,0xc
c0017b73:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b78:	50                   	push   eax
c0017b79:	6a 08                	push   0x8
c0017b7b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b81:	e8 04 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b86:	83 c4 0c             	add    esp,0xc
c0017b89:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017b8e:	55                   	push   ebp
c0017b8f:	6a 09                	push   0x9
c0017b91:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b97:	e8 ee f6 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b9c:	5a                   	pop    edx
c0017b9d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017ba1:	e8 7c fb ff ff       	call   c0017722 <RTC::completeRTCRefresh()>
c0017ba6:	83 c4 3c             	add    esp,0x3c
c0017ba9:	b0 01                	mov    al,0x1
c0017bab:	5b                   	pop    ebx
c0017bac:	5e                   	pop    esi
c0017bad:	5f                   	pop    edi
c0017bae:	5d                   	pop    ebp
c0017baf:	c3                   	ret    

c0017bb0 <rtcIRQHandler(regs*, void*)>:
c0017bb0:	53                   	push   ebx
c0017bb1:	83 ec 10             	sub    esp,0x10
c0017bb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017bb8:	6a 0c                	push   0xc
c0017bba:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017bc0:	e8 ab f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bc5:	83 c4 10             	add    esp,0x10
c0017bc8:	a8 80                	test   al,0x80
c0017bca:	74 24                	je     c0017bf0 <rtcIRQHandler(regs*, void*)+0x40>
c0017bcc:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017bd3:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017bda:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017be1:	75 0d                	jne    c0017bf0 <rtcIRQHandler(regs*, void*)+0x40>
c0017be3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017be7:	83 c4 08             	add    esp,0x8
c0017bea:	5b                   	pop    ebx
c0017beb:	e9 32 fb ff ff       	jmp    c0017722 <RTC::completeRTCRefresh()>
c0017bf0:	83 c4 08             	add    esp,0x8
c0017bf3:	5b                   	pop    ebx
c0017bf4:	c3                   	ret    
c0017bf5:	90                   	nop

c0017bf6 <RTC::RTC()>:
c0017bf6:	83 ec 1c             	sub    esp,0x1c
c0017bf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bfd:	83 ec 08             	sub    esp,0x8
c0017c00:	68 ab 16 02 c0       	push   0xc00216ab
c0017c05:	50                   	push   eax
c0017c06:	e8 eb 3c ff ff       	call   c000b8f6 <Clock::Clock(char const*)>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	ba c8 16 02 c0       	mov    edx,0xc00216c8
c0017c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c17:	89 10                	mov    DWORD PTR [eax],edx
c0017c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c1d:	83 ec 0c             	sub    esp,0xc
c0017c20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c24:	6a 01                	push   0x1
c0017c26:	68 b0 7b 01 c0       	push   0xc0017bb0
c0017c2b:	6a 08                	push   0x8
c0017c2d:	50                   	push   eax
c0017c2e:	e8 9f 41 ff ff       	call   c000bdd2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017c33:	83 c4 20             	add    esp,0x20
c0017c36:	89 c2                	mov    edx,eax
c0017c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c3c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017c42:	fa                   	cli    
c0017c43:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c48:	83 c0 01             	add    eax,0x1
c0017c4b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017c50:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017c55:	83 ec 08             	sub    esp,0x8
c0017c58:	6a 0b                	push   0xb
c0017c5a:	50                   	push   eax
c0017c5b:	e8 10 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c60:	83 c4 10             	add    esp,0x10
c0017c63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017c67:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017c6c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017c70:	83 ca 10             	or     edx,0x10
c0017c73:	0f b6 d2             	movzx  edx,dl
c0017c76:	83 ec 04             	sub    esp,0x4
c0017c79:	52                   	push   edx
c0017c7a:	6a 0b                	push   0xb
c0017c7c:	50                   	push   eax
c0017c7d:	e8 08 f6 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017c82:	83 c4 10             	add    esp,0x10
c0017c85:	83 ec 0c             	sub    esp,0xc
c0017c88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c8c:	e8 91 fa ff ff       	call   c0017722 <RTC::completeRTCRefresh()>
c0017c91:	83 c4 10             	add    esp,0x10
c0017c94:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c99:	83 e8 01             	sub    eax,0x1
c0017c9c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017ca1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017ca6:	85 c0                	test   eax,eax
c0017ca8:	75 01                	jne    c0017cab <RTC::RTC()+0xb5>
c0017caa:	fb                   	sti    
c0017cab:	90                   	nop
c0017cac:	83 c4 1c             	add    esp,0x1c
c0017caf:	c3                   	ret    

c0017cb0 <HalConsoleScroll(int, int)>:
c0017cb0:	83 ec 10             	sub    esp,0x10
c0017cb3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017cbb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017cc3:	90                   	nop
c0017cc4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017cc9:	0f 8f e1 00 00 00    	jg     c0017db0 <HalConsoleScroll(int, int)+0x100>
c0017ccf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017cd7:	90                   	nop
c0017cd8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017ce0:	0f 8f be 00 00 00    	jg     c0017da4 <HalConsoleScroll(int, int)+0xf4>
c0017ce6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cea:	89 d0                	mov    eax,edx
c0017cec:	c1 e0 02             	shl    eax,0x2
c0017cef:	01 d0                	add    eax,edx
c0017cf1:	c1 e0 05             	shl    eax,0x5
c0017cf4:	89 c2                	mov    edx,eax
c0017cf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cfa:	01 d0                	add    eax,edx
c0017cfc:	89 c2                	mov    edx,eax
c0017cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d02:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017d05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d09:	89 d0                	mov    eax,edx
c0017d0b:	c1 e0 02             	shl    eax,0x2
c0017d0e:	01 d0                	add    eax,edx
c0017d10:	c1 e0 05             	shl    eax,0x5
c0017d13:	89 c2                	mov    edx,eax
c0017d15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d19:	01 d0                	add    eax,edx
c0017d1b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017d21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d25:	01 c2                	add    edx,eax
c0017d27:	8a 01                	mov    al,BYTE PTR [ecx]
c0017d29:	88 02                	mov    BYTE PTR [edx],al
c0017d2b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017d30:	75 66                	jne    c0017d98 <HalConsoleScroll(int, int)+0xe8>
c0017d32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d36:	83 e0 01             	and    eax,0x1
c0017d39:	74 39                	je     c0017d74 <HalConsoleScroll(int, int)+0xc4>
c0017d3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d3f:	83 e0 0f             	and    eax,0xf
c0017d42:	88 c2                	mov    dl,al
c0017d44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d48:	c1 e0 04             	shl    eax,0x4
c0017d4b:	09 d0                	or     eax,edx
c0017d4d:	88 c1                	mov    cl,al
c0017d4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d53:	89 d0                	mov    eax,edx
c0017d55:	c1 e0 02             	shl    eax,0x2
c0017d58:	01 d0                	add    eax,edx
c0017d5a:	c1 e0 05             	shl    eax,0x5
c0017d5d:	89 c2                	mov    edx,eax
c0017d5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d63:	01 d0                	add    eax,edx
c0017d65:	89 c2                	mov    edx,eax
c0017d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d6b:	01 d0                	add    eax,edx
c0017d6d:	88 ca                	mov    dl,cl
c0017d6f:	88 10                	mov    BYTE PTR [eax],dl
c0017d71:	eb 25                	jmp    c0017d98 <HalConsoleScroll(int, int)+0xe8>
c0017d73:	90                   	nop
c0017d74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d78:	89 d0                	mov    eax,edx
c0017d7a:	c1 e0 02             	shl    eax,0x2
c0017d7d:	01 d0                	add    eax,edx
c0017d7f:	c1 e0 05             	shl    eax,0x5
c0017d82:	89 c2                	mov    edx,eax
c0017d84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d88:	01 d0                	add    eax,edx
c0017d8a:	89 c2                	mov    edx,eax
c0017d8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d90:	01 d0                	add    eax,edx
c0017d92:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017d95:	8d 76 00             	lea    esi,[esi+0x0]
c0017d98:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017d9d:	e9 36 ff ff ff       	jmp    c0017cd8 <HalConsoleScroll(int, int)+0x28>
c0017da2:	66 90                	xchg   ax,ax
c0017da4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017da9:	e9 16 ff ff ff       	jmp    c0017cc4 <HalConsoleScroll(int, int)+0x14>
c0017dae:	66 90                	xchg   ax,ax
c0017db0:	90                   	nop
c0017db1:	83 c4 10             	add    esp,0x10
c0017db4:	c3                   	ret    
c0017db5:	8d 76 00             	lea    esi,[esi+0x0]

c0017db8 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017db8:	83 ec 14             	sub    esp,0x14
c0017dbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017dbf:	88 04 24             	mov    BYTE PTR [esp],al
c0017dc2:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017dc5:	0f b6 c0             	movzx  eax,al
c0017dc8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dcc:	89 d1                	mov    ecx,edx
c0017dce:	83 e1 0f             	and    ecx,0xf
c0017dd1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017dd5:	c1 e2 04             	shl    edx,0x4
c0017dd8:	0f b6 d2             	movzx  edx,dl
c0017ddb:	09 ca                	or     edx,ecx
c0017ddd:	c1 e2 08             	shl    edx,0x8
c0017de0:	09 d0                	or     eax,edx
c0017de2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017de7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017def:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017df3:	89 d0                	mov    eax,edx
c0017df5:	c1 e0 02             	shl    eax,0x2
c0017df8:	01 d0                	add    eax,edx
c0017dfa:	c1 e0 04             	shl    eax,0x4
c0017dfd:	89 c2                	mov    edx,eax
c0017dff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e03:	01 d0                	add    eax,edx
c0017e05:	01 c0                	add    eax,eax
c0017e07:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017e0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e0f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017e14:	66 89 02             	mov    WORD PTR [edx],ax
c0017e17:	90                   	nop
c0017e18:	83 c4 14             	add    esp,0x14
c0017e1b:	c3                   	ret    

c0017e1c <HalConsoleCursorUpdate(int, int)>:
c0017e1c:	83 ec 20             	sub    esp,0x20
c0017e1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e23:	89 c2                	mov    edx,eax
c0017e25:	c1 e2 02             	shl    edx,0x2
c0017e28:	01 d0                	add    eax,edx
c0017e2a:	c1 e0 04             	shl    eax,0x4
c0017e2d:	89 c2                	mov    edx,eax
c0017e2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e33:	01 d0                	add    eax,edx
c0017e35:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017e3a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017e41:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017e46:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e4e:	ee                   	out    dx,al
c0017e4f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017e54:	0f b6 c0             	movzx  eax,al
c0017e57:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017e5e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017e62:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e6a:	ee                   	out    dx,al
c0017e6b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017e72:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017e77:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017e7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e7f:	ee                   	out    dx,al
c0017e80:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017e85:	c1 e8 08             	shr    eax,0x8
c0017e88:	0f b6 c0             	movzx  eax,al
c0017e8b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017e92:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017e96:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017e9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e9e:	ee                   	out    dx,al
c0017e9f:	90                   	nop
c0017ea0:	83 c4 20             	add    esp,0x20
c0017ea3:	c3                   	ret    

c0017ea4 <FAT::getName()>:
c0017ea4:	b8 fc 16 02 c0       	mov    eax,0xc00216fc
c0017ea9:	c3                   	ret    
c0017eaa:	66 90                	xchg   ax,ax

c0017eac <FAT::tell(void*, unsigned long long*)>:
c0017eac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017eb1:	75 09                	jne    c0017ebc <FAT::tell(void*, unsigned long long*)+0x10>
c0017eb3:	b8 04 00 00 00       	mov    eax,0x4
c0017eb8:	c3                   	ret    
c0017eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ebc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ec1:	75 09                	jne    c0017ecc <FAT::tell(void*, unsigned long long*)+0x20>
c0017ec3:	b8 04 00 00 00       	mov    eax,0x4
c0017ec8:	c3                   	ret    
c0017ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ed0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017ed3:	ba 00 00 00 00       	mov    edx,0x0
c0017ed8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017edc:	89 01                	mov    DWORD PTR [ecx],eax
c0017ede:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ee1:	b8 00 00 00 00       	mov    eax,0x0
c0017ee6:	c3                   	ret    
c0017ee7:	90                   	nop

c0017ee8 <FAT::stat(void*, unsigned long long*)>:
c0017ee8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017eed:	75 09                	jne    c0017ef8 <FAT::stat(void*, unsigned long long*)+0x10>
c0017eef:	b8 04 00 00 00       	mov    eax,0x4
c0017ef4:	c3                   	ret    
c0017ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ef8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017efd:	75 09                	jne    c0017f08 <FAT::stat(void*, unsigned long long*)+0x20>
c0017eff:	b8 04 00 00 00       	mov    eax,0x4
c0017f04:	c3                   	ret    
c0017f05:	8d 76 00             	lea    esi,[esi+0x0]
c0017f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017f0f:	ba 00 00 00 00       	mov    edx,0x0
c0017f14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017f18:	89 01                	mov    DWORD PTR [ecx],eax
c0017f1a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017f1d:	b8 00 00 00 00       	mov    eax,0x0
c0017f22:	c3                   	ret    
c0017f23:	90                   	nop

c0017f24 <FAT::~FAT()>:
c0017f24:	83 ec 0c             	sub    esp,0xc
c0017f27:	ba 48 17 02 c0       	mov    edx,0xc0021748
c0017f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f30:	89 10                	mov    DWORD PTR [eax],edx
c0017f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f36:	83 ec 0c             	sub    esp,0xc
c0017f39:	50                   	push   eax
c0017f3a:	e8 f9 2d ff ff       	call   c000ad38 <Filesystem::~Filesystem()>
c0017f3f:	83 c4 10             	add    esp,0x10
c0017f42:	90                   	nop
c0017f43:	83 c4 0c             	add    esp,0xc
c0017f46:	c3                   	ret    
c0017f47:	90                   	nop

c0017f48 <FAT::~FAT()>:
c0017f48:	83 ec 0c             	sub    esp,0xc
c0017f4b:	83 ec 0c             	sub    esp,0xc
c0017f4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f52:	e8 cd ff ff ff       	call   c0017f24 <FAT::~FAT()>
c0017f57:	83 c4 10             	add    esp,0x10
c0017f5a:	83 ec 08             	sub    esp,0x8
c0017f5d:	6a 08                	push   0x8
c0017f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f63:	e8 5c 29 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c0017f68:	83 c4 10             	add    esp,0x10
c0017f6b:	83 c4 0c             	add    esp,0xc
c0017f6e:	c3                   	ret    
c0017f6f:	90                   	nop

c0017f70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017f70:	83 ec 1c             	sub    esp,0x1c
c0017f73:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017f7a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f83:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f8a:	83 f8 ff             	cmp    eax,0xffffffff
c0017f8d:	75 35                	jne    c0017fc4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017f8f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f93:	88 c2                	mov    dl,al
c0017f95:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f9a:	01 d0                	add    eax,edx
c0017f9c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017fa0:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017fa6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017faa:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017fb1:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fba:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fc1:	eb 19                	jmp    c0017fdc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017fc3:	90                   	nop
c0017fc4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017fc8:	88 c2                	mov    dl,al
c0017fca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fce:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fd5:	01 d0                	add    eax,edx
c0017fd7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017fdb:	90                   	nop
c0017fdc:	83 ec 04             	sub    esp,0x4
c0017fdf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017fe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017fe7:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017feb:	50                   	push   eax
c0017fec:	e8 de cf fe ff       	call   c0004fcf <f_getlabel>
c0017ff1:	83 c4 10             	add    esp,0x10
c0017ff4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ff8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ffd:	75 09                	jne    c0018008 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017fff:	b8 00 00 00 00       	mov    eax,0x0
c0018004:	eb 0a                	jmp    c0018010 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018006:	66 90                	xchg   ax,ax
c0018008:	b8 01 00 00 00       	mov    eax,0x1
c001800d:	8d 76 00             	lea    esi,[esi+0x0]
c0018010:	83 c4 1c             	add    esp,0x1c
c0018013:	c3                   	ret    

c0018014 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018014:	57                   	push   edi
c0018015:	83 ec 58             	sub    esp,0x58
c0018018:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018020:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018024:	b8 00 00 00 00       	mov    eax,0x0
c0018029:	b9 0f 00 00 00       	mov    ecx,0xf
c001802e:	fc                   	cld    
c001802f:	89 d7                	mov    edi,edx
c0018031:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018033:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018037:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001803e:	83 f8 ff             	cmp    eax,0xffffffff
c0018041:	75 35                	jne    c0018078 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018043:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018047:	88 c2                	mov    dl,al
c0018049:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001804e:	01 d0                	add    eax,edx
c0018050:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018054:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001805a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001805e:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018065:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001806a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001806e:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018075:	eb 19                	jmp    c0018090 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018077:	90                   	nop
c0018078:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001807c:	88 c2                	mov    dl,al
c001807e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018082:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018089:	01 d0                	add    eax,edx
c001808b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001808f:	90                   	nop
c0018090:	83 ec 08             	sub    esp,0x8
c0018093:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018097:	8d 44 24 18          	lea    eax,[esp+0x18]
c001809b:	50                   	push   eax
c001809c:	e8 9f 87 fe ff       	call   c0000840 <strcat>
c00180a1:	83 c4 10             	add    esp,0x10
c00180a4:	83 ec 0c             	sub    esp,0xc
c00180a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00180ab:	50                   	push   eax
c00180ac:	e8 6f d0 fe ff       	call   c0005120 <f_setlabel>
c00180b1:	83 c4 10             	add    esp,0x10
c00180b4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00180b8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00180bd:	75 09                	jne    c00180c8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00180bf:	b8 00 00 00 00       	mov    eax,0x0
c00180c4:	eb 0a                	jmp    c00180d0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00180c6:	66 90                	xchg   ax,ax
c00180c8:	b8 01 00 00 00       	mov    eax,0x1
c00180cd:	8d 76 00             	lea    esi,[esi+0x0]
c00180d0:	83 c4 58             	add    esp,0x58
c00180d3:	5f                   	pop    edi
c00180d4:	c3                   	ret    
c00180d5:	90                   	nop
c00180d6:	66 90                	xchg   ax,ax

c00180d8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00180d8:	83 ec 2c             	sub    esp,0x2c
c00180db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00180e3:	83 ec 08             	sub    esp,0x8
c00180e6:	68 20 17 02 c0       	push   0xc0021720
c00180eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180ef:	e8 5c 86 fe ff       	call   c0000750 <strcmp>
c00180f4:	83 c4 10             	add    esp,0x10
c00180f7:	85 c0                	test   eax,eax
c00180f9:	0f 94 c0             	sete   al
c00180fc:	0f b6 c0             	movzx  eax,al
c00180ff:	85 c0                	test   eax,eax
c0018101:	74 0d                	je     c0018110 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018103:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001810b:	e9 c0 00 00 00       	jmp    c00181d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018110:	83 ec 08             	sub    esp,0x8
c0018113:	68 12 17 02 c0       	push   0xc0021712
c0018118:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001811c:	e8 2f 86 fe ff       	call   c0000750 <strcmp>
c0018121:	83 c4 10             	add    esp,0x10
c0018124:	85 c0                	test   eax,eax
c0018126:	0f 94 c0             	sete   al
c0018129:	0f b6 c0             	movzx  eax,al
c001812c:	85 c0                	test   eax,eax
c001812e:	74 10                	je     c0018140 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018130:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018138:	e9 93 00 00 00       	jmp    c00181d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001813d:	8d 76 00             	lea    esi,[esi+0x0]
c0018140:	83 ec 08             	sub    esp,0x8
c0018143:	68 18 17 02 c0       	push   0xc0021718
c0018148:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001814c:	e8 ff 85 fe ff       	call   c0000750 <strcmp>
c0018151:	83 c4 10             	add    esp,0x10
c0018154:	85 c0                	test   eax,eax
c0018156:	0f 94 c0             	sete   al
c0018159:	0f b6 c0             	movzx  eax,al
c001815c:	85 c0                	test   eax,eax
c001815e:	74 0c                	je     c001816c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018160:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018168:	eb 66                	jmp    c00181d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001816a:	66 90                	xchg   ax,ax
c001816c:	83 ec 08             	sub    esp,0x8
c001816f:	68 5c f4 01 c0       	push   0xc001f45c
c0018174:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018178:	e8 d3 85 fe ff       	call   c0000750 <strcmp>
c001817d:	83 c4 10             	add    esp,0x10
c0018180:	85 c0                	test   eax,eax
c0018182:	0f 94 c0             	sete   al
c0018185:	0f b6 c0             	movzx  eax,al
c0018188:	85 c0                	test   eax,eax
c001818a:	74 0c                	je     c0018198 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001818c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018194:	eb 3a                	jmp    c00181d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018196:	66 90                	xchg   ax,ax
c0018198:	83 ec 08             	sub    esp,0x8
c001819b:	68 1e 17 02 c0       	push   0xc002171e
c00181a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00181a4:	e8 a7 85 fe ff       	call   c0000750 <strcmp>
c00181a9:	83 c4 10             	add    esp,0x10
c00181ac:	85 c0                	test   eax,eax
c00181ae:	0f 94 c0             	sete   al
c00181b1:	0f b6 c0             	movzx  eax,al
c00181b4:	85 c0                	test   eax,eax
c00181b6:	74 0c                	je     c00181c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00181b8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00181c0:	eb 0e                	jmp    c00181d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00181c2:	66 90                	xchg   ax,ax
c00181c4:	b8 08 00 00 00       	mov    eax,0x8
c00181c9:	e9 ea 00 00 00       	jmp    c00182b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181ce:	66 90                	xchg   ax,ax
c00181d0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00181d7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00181dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00181e0:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00181e7:	83 f8 ff             	cmp    eax,0xffffffff
c00181ea:	75 34                	jne    c0018220 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00181ec:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00181f0:	88 c2                	mov    dl,al
c00181f2:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181f7:	01 d0                	add    eax,edx
c00181f9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00181fd:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018203:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018207:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001820e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018213:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018217:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001821e:	eb 18                	jmp    c0018238 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018220:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018224:	88 c2                	mov    dl,al
c0018226:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001822a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018231:	01 d0                	add    eax,edx
c0018233:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018237:	90                   	nop
c0018238:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001823c:	88 04 24             	mov    BYTE PTR [esp],al
c001823f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018243:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018247:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001824f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018254:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001825c:	83 ec 0c             	sub    esp,0xc
c001825f:	68 00 20 00 00       	push   0x2000
c0018264:	e8 45 f8 fe ff       	call   c0007aae <malloc>
c0018269:	83 c4 10             	add    esp,0x10
c001826c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018270:	68 00 20 00 00       	push   0x2000
c0018275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018279:	8d 44 24 08          	lea    eax,[esp+0x8]
c001827d:	50                   	push   eax
c001827e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018282:	50                   	push   eax
c0018283:	e8 95 d1 fe ff       	call   c000541d <f_mkfs>
c0018288:	83 c4 10             	add    esp,0x10
c001828b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001828f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018294:	75 0a                	jne    c00182a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018296:	b8 00 00 00 00       	mov    eax,0x0
c001829b:	eb 1b                	jmp    c00182b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001829d:	8d 76 00             	lea    esi,[esi+0x0]
c00182a0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00182a5:	75 09                	jne    c00182b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00182a7:	b8 09 00 00 00       	mov    eax,0x9
c00182ac:	eb 0a                	jmp    c00182b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00182ae:	66 90                	xchg   ax,ax
c00182b0:	b8 01 00 00 00       	mov    eax,0x1
c00182b5:	8d 76 00             	lea    esi,[esi+0x0]
c00182b8:	83 c4 2c             	add    esp,0x2c
c00182bb:	c3                   	ret    

c00182bc <FAT::tryMount(LogicalDisk*, int)>:
c00182bc:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00182c2:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182c7:	83 f8 14             	cmp    eax,0x14
c00182ca:	75 18                	jne    c00182e4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00182cc:	83 ec 0c             	sub    esp,0xc
c00182cf:	68 24 17 02 c0       	push   0xc0021724
c00182d4:	e8 46 86 ff ff       	call   c001091f <KePanic(char const*)>
c00182d9:	83 c4 10             	add    esp,0x10
c00182dc:	b0 00                	mov    al,0x0
c00182de:	e9 ed 01 00 00       	jmp    c00184d0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182e3:	90                   	nop
c00182e4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00182eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00182f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00182f7:	3d 00 02 00 00       	cmp    eax,0x200
c00182fc:	74 0a                	je     c0018308 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00182fe:	b0 00                	mov    al,0x0
c0018300:	e9 cb 01 00 00       	jmp    c00184d0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018305:	8d 76 00             	lea    esi,[esi+0x0]
c0018308:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018310:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018317:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001831e:	83 f8 ff             	cmp    eax,0xffffffff
c0018321:	74 09                	je     c001832c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018323:	b0 01                	mov    al,0x1
c0018325:	e9 a6 01 00 00       	jmp    c00184d0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001832a:	66 90                	xchg   ax,ax
c001832c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018336:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001833e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018345:	88 c2                	mov    dl,al
c0018347:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001834c:	01 d0                	add    eax,edx
c001834e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018355:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001835b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018362:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018369:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001836e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018375:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001837c:	83 ec 0c             	sub    esp,0xc
c001837f:	68 34 02 00 00       	push   0x234
c0018384:	e8 25 f7 fe ff       	call   c0007aae <malloc>
c0018389:	83 c4 10             	add    esp,0x10
c001838c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018393:	83 ec 04             	sub    esp,0x4
c0018396:	6a 00                	push   0x0
c0018398:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001839f:	50                   	push   eax
c00183a0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183a7:	e8 4c b8 fe ff       	call   c0003bf8 <f_mount>
c00183ac:	83 c4 10             	add    esp,0x10
c00183af:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00183b6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00183be:	74 1c                	je     c00183dc <FAT::tryMount(LogicalDisk*, int)+0x120>
c00183c0:	83 ec 0c             	sub    esp,0xc
c00183c3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183ca:	e8 ff f6 fe ff       	call   c0007ace <rfree>
c00183cf:	83 c4 10             	add    esp,0x10
c00183d2:	b0 00                	mov    al,0x0
c00183d4:	e9 f7 00 00 00       	jmp    c00184d0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183d9:	8d 76 00             	lea    esi,[esi+0x0]
c00183dc:	83 ec 04             	sub    esp,0x4
c00183df:	68 00 01 00 00       	push   0x100
c00183e4:	6a 00                	push   0x0
c00183e6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00183ed:	50                   	push   eax
c00183ee:	e8 fd 80 fe ff       	call   c00004f0 <memset>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	83 ec 08             	sub    esp,0x8
c00183f9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018400:	50                   	push   eax
c0018401:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018408:	50                   	push   eax
c0018409:	e8 32 84 fe ff       	call   c0000840 <strcat>
c001840e:	83 c4 10             	add    esp,0x10
c0018411:	83 ec 08             	sub    esp,0x8
c0018414:	68 32 17 02 c0       	push   0xc0021732
c0018419:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018420:	50                   	push   eax
c0018421:	e8 1a 84 fe ff       	call   c0000840 <strcat>
c0018426:	83 c4 10             	add    esp,0x10
c0018429:	83 ec 04             	sub    esp,0x4
c001842c:	6a 01                	push   0x1
c001842e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018435:	50                   	push   eax
c0018436:	8d 44 24 14          	lea    eax,[esp+0x14]
c001843a:	50                   	push   eax
c001843b:	e8 1a b8 fe ff       	call   c0003c5a <f_open>
c0018440:	83 c4 10             	add    esp,0x10
c0018443:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001844a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018451:	85 c0                	test   eax,eax
c0018453:	74 0b                	je     c0018460 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018455:	78 31                	js     c0018488 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018457:	83 e8 04             	sub    eax,0x4
c001845a:	83 f8 01             	cmp    eax,0x1
c001845d:	77 29                	ja     c0018488 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001845f:	90                   	nop
c0018460:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018468:	83 ec 0c             	sub    esp,0xc
c001846b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001846f:	50                   	push   eax
c0018470:	e8 b4 bf fe ff       	call   c0004429 <f_close>
c0018475:	83 c4 10             	add    esp,0x10
c0018478:	90                   	nop
c0018479:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018481:	85 c0                	test   eax,eax
c0018483:	74 43                	je     c00184c8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018485:	eb 31                	jmp    c00184b8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018487:	90                   	nop
c0018488:	83 ec 0c             	sub    esp,0xc
c001848b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018492:	e8 37 f6 fe ff       	call   c0007ace <rfree>
c0018497:	83 c4 10             	add    esp,0x10
c001849a:	83 ec 04             	sub    esp,0x4
c001849d:	6a 00                	push   0x0
c001849f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00184a6:	50                   	push   eax
c00184a7:	6a 00                	push   0x0
c00184a9:	e8 4a b7 fe ff       	call   c0003bf8 <f_mount>
c00184ae:	83 c4 10             	add    esp,0x10
c00184b1:	b0 00                	mov    al,0x0
c00184b3:	eb 1b                	jmp    c00184d0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00184b5:	8d 76 00             	lea    esi,[esi+0x0]
c00184b8:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00184bd:	83 c0 01             	add    eax,0x1
c00184c0:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00184c5:	8d 76 00             	lea    esi,[esi+0x0]
c00184c8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00184cf:	90                   	nop
c00184d0:	81 c4 4c 03 00 00    	add    esp,0x34c
c00184d6:	c3                   	ret    
c00184d7:	90                   	nop

c00184d8 <FAT::allocateSwapfile(char const*, int)>:
c00184d8:	55                   	push   ebp
c00184d9:	57                   	push   edi
c00184da:	56                   	push   esi
c00184db:	53                   	push   ebx
c00184dc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00184e2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00184ed:	83 ec 0c             	sub    esp,0xc
c00184f0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00184f7:	e8 b2 f5 fe ff       	call   c0007aae <malloc>
c00184fc:	83 c4 10             	add    esp,0x10
c00184ff:	89 c7                	mov    edi,eax
c0018501:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0018506:	83 ec 04             	sub    esp,0x4
c0018509:	50                   	push   eax
c001850a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018511:	57                   	push   edi
c0018512:	e8 5d 2a ff ff       	call   c000af74 <File::File(char const*, Process*)>
c0018517:	83 c4 10             	add    esp,0x10
c001851a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018521:	83 ec 04             	sub    esp,0x4
c0018524:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018528:	50                   	push   eax
c0018529:	8d 44 24 18          	lea    eax,[esp+0x18]
c001852d:	50                   	push   eax
c001852e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018535:	e8 a2 2d ff ff       	call   c000b2dc <File::stat(unsigned long long*, bool*)>
c001853a:	83 c4 10             	add    esp,0x10
c001853d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018544:	c1 e0 14             	shl    eax,0x14
c0018547:	89 c7                	mov    edi,eax
c0018549:	89 c5                	mov    ebp,eax
c001854b:	c1 fd 1f             	sar    ebp,0x1f
c001854e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018552:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018556:	89 f9                	mov    ecx,edi
c0018558:	31 c1                	xor    ecx,eax
c001855a:	89 cb                	mov    ebx,ecx
c001855c:	89 e9                	mov    ecx,ebp
c001855e:	31 d1                	xor    ecx,edx
c0018560:	89 ce                	mov    esi,ecx
c0018562:	89 f0                	mov    eax,esi
c0018564:	09 d8                	or     eax,ebx
c0018566:	0f 84 9c 00 00 00    	je     c0018608 <FAT::allocateSwapfile(char const*, int)+0x130>
c001856c:	83 ec 0c             	sub    esp,0xc
c001856f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018576:	e8 2d 2c ff ff       	call   c000b1a8 <File::unlink()>
c001857b:	83 c4 10             	add    esp,0x10
c001857e:	83 ec 08             	sub    esp,0x8
c0018581:	6a 12                	push   0x12
c0018583:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001858a:	e8 a1 2a ff ff       	call   c000b030 <File::open(FileOpenMode)>
c001858f:	83 c4 10             	add    esp,0x10
c0018592:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018599:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001859f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00185a6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00185ad:	c1 e0 14             	shl    eax,0x14
c00185b0:	83 ec 04             	sub    esp,0x4
c00185b3:	6a 01                	push   0x1
c00185b5:	50                   	push   eax
c00185b6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00185bd:	e8 ee cc fe ff       	call   c00052b0 <f_expand>
c00185c2:	83 c4 10             	add    esp,0x10
c00185c5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00185ce:	83 c0 10             	add    eax,0x10
c00185d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00185d3:	83 ec 0c             	sub    esp,0xc
c00185d6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00185da:	52                   	push   edx
c00185db:	8d 54 24 30          	lea    edx,[esp+0x30]
c00185df:	52                   	push   edx
c00185e0:	6a 00                	push   0x0
c00185e2:	68 00 04 00 00       	push   0x400
c00185e7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00185ee:	ff d0                	call   eax
c00185f0:	83 c4 20             	add    esp,0x20
c00185f3:	83 ec 0c             	sub    esp,0xc
c00185f6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185fd:	e8 8c 2a ff ff       	call   c000b08e <File::close()>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	8d 76 00             	lea    esi,[esi+0x0]
c0018608:	83 ec 08             	sub    esp,0x8
c001860b:	6a 01                	push   0x1
c001860d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018614:	e8 17 2a ff ff       	call   c000b030 <File::open(FileOpenMode)>
c0018619:	83 c4 10             	add    esp,0x10
c001861c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018623:	8b 00                	mov    eax,DWORD PTR [eax]
c0018625:	83 c0 0c             	add    eax,0xc
c0018628:	8b 00                	mov    eax,DWORD PTR [eax]
c001862a:	83 ec 0c             	sub    esp,0xc
c001862d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018631:	52                   	push   edx
c0018632:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0018636:	52                   	push   edx
c0018637:	6a 00                	push   0x0
c0018639:	6a 04                	push   0x4
c001863b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018642:	ff d0                	call   eax
c0018644:	83 c4 20             	add    esp,0x20
c0018647:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001864e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018654:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001865b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0018662:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018665:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001866c:	83 ec 0c             	sub    esp,0xc
c001866f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018676:	e8 13 2a ff ff       	call   c000b08e <File::close()>
c001867b:	83 c4 10             	add    esp,0x10
c001867e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0018685:	ba 00 00 00 00       	mov    edx,0x0
c001868a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018690:	5b                   	pop    ebx
c0018691:	5e                   	pop    esi
c0018692:	5f                   	pop    edi
c0018693:	5d                   	pop    ebp
c0018694:	c3                   	ret    
c0018695:	90                   	nop
c0018696:	66 90                	xchg   ax,ax

c0018698 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018698:	57                   	push   edi
c0018699:	56                   	push   esi
c001869a:	53                   	push   ebx
c001869b:	81 ec 50 02 00 00    	sub    esp,0x250
c00186a1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00186a9:	74 0d                	je     c00186b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00186ab:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00186b3:	75 0f                	jne    c00186c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00186b5:	8d 76 00             	lea    esi,[esi+0x0]
c00186b8:	b8 04 00 00 00       	mov    eax,0x4
c00186bd:	e9 3a 01 00 00       	jmp    c00187fc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00186c2:	66 90                	xchg   ax,ax
c00186c4:	83 ec 08             	sub    esp,0x8
c00186c7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00186ce:	50                   	push   eax
c00186cf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00186d6:	e8 1b c0 fe ff       	call   c00046f6 <f_readdir>
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00186e5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00186ec:	83 ec 0c             	sub    esp,0xc
c00186ef:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00186f6:	83 c0 16             	add    eax,0x16
c00186f9:	50                   	push   eax
c00186fa:	e8 71 7e fe ff       	call   c0000570 <strlen>
c00186ff:	83 c4 10             	add    esp,0x10
c0018702:	ba 00 00 00 00       	mov    edx,0x0
c0018707:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001870b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001870f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018716:	0f b6 c0             	movzx  eax,al
c0018719:	83 e0 10             	and    eax,0x10
c001871c:	74 0a                	je     c0018728 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001871e:	b8 02 00 00 00       	mov    eax,0x2
c0018723:	eb 0b                	jmp    c0018730 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018725:	8d 76 00             	lea    esi,[esi+0x0]
c0018728:	b8 01 00 00 00       	mov    eax,0x1
c001872d:	8d 76 00             	lea    esi,[esi+0x0]
c0018730:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018734:	83 ec 08             	sub    esp,0x8
c0018737:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001873e:	83 c0 16             	add    eax,0x16
c0018741:	50                   	push   eax
c0018742:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018746:	83 c0 10             	add    eax,0x10
c0018749:	50                   	push   eax
c001874a:	e8 f1 7e fe ff       	call   c0000640 <strcpy>
c001874f:	83 c4 10             	add    esp,0x10
c0018752:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018759:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018760:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018764:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001876b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018772:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018779:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018780:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018787:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001878e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018795:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001879c:	89 c6                	mov    esi,eax
c001879e:	89 d7                	mov    edi,edx
c00187a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00187a2:	89 c8                	mov    eax,ecx
c00187a4:	89 fa                	mov    edx,edi
c00187a6:	89 f3                	mov    ebx,esi
c00187a8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00187af:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00187b6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00187bd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00187c4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00187ca:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00187d1:	0f be c0             	movsx  eax,al
c00187d4:	85 c0                	test   eax,eax
c00187d6:	75 08                	jne    c00187e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00187d8:	b8 07 00 00 00       	mov    eax,0x7
c00187dd:	eb 1d                	jmp    c00187fc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00187df:	90                   	nop
c00187e0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00187e7:	85 c0                	test   eax,eax
c00187e9:	75 09                	jne    c00187f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00187eb:	b8 00 00 00 00       	mov    eax,0x0
c00187f0:	eb 0a                	jmp    c00187fc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00187f2:	66 90                	xchg   ax,ax
c00187f4:	b8 01 00 00 00       	mov    eax,0x1
c00187f9:	8d 76 00             	lea    esi,[esi+0x0]
c00187fc:	81 c4 50 02 00 00    	add    esp,0x250
c0018802:	5b                   	pop    ebx
c0018803:	5e                   	pop    esi
c0018804:	5f                   	pop    edi
c0018805:	c3                   	ret    
c0018806:	66 90                	xchg   ax,ax

c0018808 <FAT::read(void*, unsigned long, void*, int*)>:
c0018808:	83 ec 1c             	sub    esp,0x1c
c001880b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018810:	74 0a                	je     c001881c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018812:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018817:	75 0b                	jne    c0018824 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018819:	8d 76 00             	lea    esi,[esi+0x0]
c001881c:	b8 04 00 00 00       	mov    eax,0x4
c0018821:	eb 41                	jmp    c0018864 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018823:	90                   	nop
c0018824:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018828:	50                   	push   eax
c0018829:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001882d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018831:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018835:	e8 e3 b6 fe ff       	call   c0003f1d <f_read>
c001883a:	83 c4 10             	add    esp,0x10
c001883d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018845:	89 c2                	mov    edx,eax
c0018847:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001884b:	89 10                	mov    DWORD PTR [eax],edx
c001884d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018851:	85 c0                	test   eax,eax
c0018853:	75 07                	jne    c001885c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018855:	b8 00 00 00 00       	mov    eax,0x0
c001885a:	eb 08                	jmp    c0018864 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001885c:	b8 01 00 00 00       	mov    eax,0x1
c0018861:	8d 76 00             	lea    esi,[esi+0x0]
c0018864:	83 c4 1c             	add    esp,0x1c
c0018867:	c3                   	ret    

c0018868 <FAT::write(void*, unsigned long, void*, int*)>:
c0018868:	83 ec 1c             	sub    esp,0x1c
c001886b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018870:	74 0a                	je     c001887c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018872:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018877:	75 0b                	jne    c0018884 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018879:	8d 76 00             	lea    esi,[esi+0x0]
c001887c:	b8 04 00 00 00       	mov    eax,0x4
c0018881:	eb 41                	jmp    c00188c4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018883:	90                   	nop
c0018884:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018888:	50                   	push   eax
c0018889:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001888d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018891:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018895:	e8 82 b8 fe ff       	call   c000411c <f_write>
c001889a:	83 c4 10             	add    esp,0x10
c001889d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188a5:	89 c2                	mov    edx,eax
c00188a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188ab:	89 10                	mov    DWORD PTR [eax],edx
c00188ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188b1:	85 c0                	test   eax,eax
c00188b3:	75 07                	jne    c00188bc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00188b5:	b8 00 00 00 00       	mov    eax,0x0
c00188ba:	eb 08                	jmp    c00188c4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00188bc:	b8 01 00 00 00       	mov    eax,0x1
c00188c1:	8d 76 00             	lea    esi,[esi+0x0]
c00188c4:	83 c4 1c             	add    esp,0x1c
c00188c7:	c3                   	ret    

c00188c8 <FAT::close(void*)>:
c00188c8:	83 ec 1c             	sub    esp,0x1c
c00188cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00188d0:	75 0a                	jne    c00188dc <FAT::close(void*)+0x14>
c00188d2:	b8 04 00 00 00       	mov    eax,0x4
c00188d7:	eb 3f                	jmp    c0018918 <FAT::close(void*)+0x50>
c00188d9:	8d 76 00             	lea    esi,[esi+0x0]
c00188dc:	83 ec 0c             	sub    esp,0xc
c00188df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188e3:	e8 41 bb fe ff       	call   c0004429 <f_close>
c00188e8:	83 c4 10             	add    esp,0x10
c00188eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188ef:	83 ec 0c             	sub    esp,0xc
c00188f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188f6:	e8 c3 f1 fe ff       	call   c0007abe <free>
c00188fb:	83 c4 10             	add    esp,0x10
c00188fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018902:	85 c0                	test   eax,eax
c0018904:	75 0a                	jne    c0018910 <FAT::close(void*)+0x48>
c0018906:	b8 00 00 00 00       	mov    eax,0x0
c001890b:	eb 0b                	jmp    c0018918 <FAT::close(void*)+0x50>
c001890d:	8d 76 00             	lea    esi,[esi+0x0]
c0018910:	b8 01 00 00 00       	mov    eax,0x1
c0018915:	8d 76 00             	lea    esi,[esi+0x0]
c0018918:	83 c4 1c             	add    esp,0x1c
c001891b:	c3                   	ret    

c001891c <FAT::closeDir(void*)>:
c001891c:	83 ec 1c             	sub    esp,0x1c
c001891f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018924:	75 0a                	jne    c0018930 <FAT::closeDir(void*)+0x14>
c0018926:	b8 04 00 00 00       	mov    eax,0x4
c001892b:	eb 3f                	jmp    c001896c <FAT::closeDir(void*)+0x50>
c001892d:	8d 76 00             	lea    esi,[esi+0x0]
c0018930:	83 ec 0c             	sub    esp,0xc
c0018933:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018937:	e8 98 bd fe ff       	call   c00046d4 <f_closedir>
c001893c:	83 c4 10             	add    esp,0x10
c001893f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018943:	83 ec 0c             	sub    esp,0xc
c0018946:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001894a:	e8 6f f1 fe ff       	call   c0007abe <free>
c001894f:	83 c4 10             	add    esp,0x10
c0018952:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018956:	85 c0                	test   eax,eax
c0018958:	75 0a                	jne    c0018964 <FAT::closeDir(void*)+0x48>
c001895a:	b8 00 00 00 00       	mov    eax,0x0
c001895f:	eb 0b                	jmp    c001896c <FAT::closeDir(void*)+0x50>
c0018961:	8d 76 00             	lea    esi,[esi+0x0]
c0018964:	b8 01 00 00 00       	mov    eax,0x1
c0018969:	8d 76 00             	lea    esi,[esi+0x0]
c001896c:	83 c4 1c             	add    esp,0x1c
c001896f:	c3                   	ret    

c0018970 <FAT::seek(void*, unsigned long long)>:
c0018970:	83 ec 2c             	sub    esp,0x2c
c0018973:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018977:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001897b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001897f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018983:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018988:	75 0a                	jne    c0018994 <FAT::seek(void*, unsigned long long)+0x24>
c001898a:	b8 04 00 00 00       	mov    eax,0x4
c001898f:	eb 33                	jmp    c00189c4 <FAT::seek(void*, unsigned long long)+0x54>
c0018991:	8d 76 00             	lea    esi,[esi+0x0]
c0018994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018998:	83 ec 08             	sub    esp,0x8
c001899b:	50                   	push   eax
c001899c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00189a0:	e8 b3 ba fe ff       	call   c0004458 <f_lseek>
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00189b0:	85 c0                	test   eax,eax
c00189b2:	75 08                	jne    c00189bc <FAT::seek(void*, unsigned long long)+0x4c>
c00189b4:	b8 00 00 00 00       	mov    eax,0x0
c00189b9:	eb 09                	jmp    c00189c4 <FAT::seek(void*, unsigned long long)+0x54>
c00189bb:	90                   	nop
c00189bc:	b8 01 00 00 00       	mov    eax,0x1
c00189c1:	8d 76 00             	lea    esi,[esi+0x0]
c00189c4:	83 c4 2c             	add    esp,0x2c
c00189c7:	c3                   	ret    

c00189c8 <fatWrapperReadDisk>:
c00189c8:	53                   	push   ebx
c00189c9:	83 ec 18             	sub    esp,0x18
c00189cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189d9:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00189e0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00189e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189e8:	ba 00 00 00 00       	mov    edx,0x0
c00189ed:	83 ec 0c             	sub    esp,0xc
c00189f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189f4:	53                   	push   ebx
c00189f5:	52                   	push   edx
c00189f6:	50                   	push   eax
c00189f7:	51                   	push   ecx
c00189f8:	e8 0b 48 ff ff       	call   c000d208 <LogicalDisk::read(unsigned long long, int, void*)>
c00189fd:	83 c4 20             	add    esp,0x20
c0018a00:	83 c4 18             	add    esp,0x18
c0018a03:	5b                   	pop    ebx
c0018a04:	c3                   	ret    
c0018a05:	8d 76 00             	lea    esi,[esi+0x0]

c0018a08 <fatWrapperWriteDisk>:
c0018a08:	53                   	push   ebx
c0018a09:	83 ec 18             	sub    esp,0x18
c0018a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a19:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018a20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018a24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a28:	ba 00 00 00 00       	mov    edx,0x0
c0018a2d:	83 ec 0c             	sub    esp,0xc
c0018a30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a34:	53                   	push   ebx
c0018a35:	52                   	push   edx
c0018a36:	50                   	push   eax
c0018a37:	51                   	push   ecx
c0018a38:	e8 37 48 ff ff       	call   c000d274 <LogicalDisk::write(unsigned long long, int, void*)>
c0018a3d:	83 c4 20             	add    esp,0x20
c0018a40:	83 c4 18             	add    esp,0x18
c0018a43:	5b                   	pop    ebx
c0018a44:	c3                   	ret    
c0018a45:	8d 76 00             	lea    esi,[esi+0x0]

c0018a48 <fatWrapperIoctl>:
c0018a48:	53                   	push   ebx
c0018a49:	83 ec 28             	sub    esp,0x28
c0018a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018a54:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018a58:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018a5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a61:	83 f8 02             	cmp    eax,0x2
c0018a64:	75 32                	jne    c0018a98 <fatWrapperIoctl+0x50>
c0018a66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a6e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a73:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a7a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a80:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018a86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a8a:	66 89 02             	mov    WORD PTR [edx],ax
c0018a8d:	b8 00 00 00 00       	mov    eax,0x0
c0018a92:	e9 c5 00 00 00       	jmp    c0018b5c <fatWrapperIoctl+0x114>
c0018a97:	90                   	nop
c0018a98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a9d:	83 f8 01             	cmp    eax,0x1
c0018aa0:	75 6a                	jne    c0018b0c <fatWrapperIoctl+0xc4>
c0018aa2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018aa6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018aaa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018aaf:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018ab6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018abc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018ac2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018ac8:	89 c8                	mov    eax,ecx
c0018aca:	89 da                	mov    edx,ebx
c0018acc:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018ad0:	c1 e0 0a             	shl    eax,0xa
c0018ad3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018ad8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018adf:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018ae5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018aeb:	89 cb                	mov    ebx,ecx
c0018aed:	c1 fb 1f             	sar    ebx,0x1f
c0018af0:	53                   	push   ebx
c0018af1:	51                   	push   ecx
c0018af2:	52                   	push   edx
c0018af3:	50                   	push   eax
c0018af4:	e8 77 5b 00 00       	call   c001e670 <__udivdi3>
c0018af9:	83 c4 10             	add    esp,0x10
c0018afc:	89 c2                	mov    edx,eax
c0018afe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b02:	89 10                	mov    DWORD PTR [eax],edx
c0018b04:	b8 00 00 00 00       	mov    eax,0x0
c0018b09:	eb 51                	jmp    c0018b5c <fatWrapperIoctl+0x114>
c0018b0b:	90                   	nop
c0018b0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b11:	85 c0                	test   eax,eax
c0018b13:	75 07                	jne    c0018b1c <fatWrapperIoctl+0xd4>
c0018b15:	b8 00 00 00 00       	mov    eax,0x0
c0018b1a:	eb 40                	jmp    c0018b5c <fatWrapperIoctl+0x114>
c0018b1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b21:	83 f8 03             	cmp    eax,0x3
c0018b24:	75 1a                	jne    c0018b40 <fatWrapperIoctl+0xf8>
c0018b26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018b2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b32:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018b38:	b8 00 00 00 00       	mov    eax,0x0
c0018b3d:	eb 1d                	jmp    c0018b5c <fatWrapperIoctl+0x114>
c0018b3f:	90                   	nop
c0018b40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b45:	83 f8 04             	cmp    eax,0x4
c0018b48:	75 0a                	jne    c0018b54 <fatWrapperIoctl+0x10c>
c0018b4a:	b8 00 00 00 00       	mov    eax,0x0
c0018b4f:	eb 0b                	jmp    c0018b5c <fatWrapperIoctl+0x114>
c0018b51:	8d 76 00             	lea    esi,[esi+0x0]
c0018b54:	b8 04 00 00 00       	mov    eax,0x4
c0018b59:	8d 76 00             	lea    esi,[esi+0x0]
c0018b5c:	83 c4 28             	add    esp,0x28
c0018b5f:	5b                   	pop    ebx
c0018b60:	c3                   	ret    
c0018b61:	90                   	nop
c0018b62:	66 90                	xchg   ax,ax

c0018b64 <FAT::FAT()>:
c0018b64:	83 ec 1c             	sub    esp,0x1c
c0018b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b6b:	83 ec 0c             	sub    esp,0xc
c0018b6e:	50                   	push   eax
c0018b6f:	e8 a0 21 ff ff       	call   c000ad14 <Filesystem::Filesystem()>
c0018b74:	83 c4 10             	add    esp,0x10
c0018b77:	ba 48 17 02 c0       	mov    edx,0xc0021748
c0018b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b80:	89 10                	mov    DWORD PTR [eax],edx
c0018b82:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018b8c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018b94:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018b99:	7f 19                	jg     c0018bb4 <FAT::FAT()+0x50>
c0018b9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b9f:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018baa:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018baf:	eb e3                	jmp    c0018b94 <FAT::FAT()+0x30>
c0018bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb4:	90                   	nop
c0018bb5:	83 c4 1c             	add    esp,0x1c
c0018bb8:	c3                   	ret    
c0018bb9:	90                   	nop
c0018bba:	66 90                	xchg   ax,ax

c0018bbc <FAT::fixFilepath(char*)>:
c0018bbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bc0:	8a 00                	mov    al,BYTE PTR [eax]
c0018bc2:	0f be c0             	movsx  eax,al
c0018bc5:	83 f8 40             	cmp    eax,0x40
c0018bc8:	7e 2e                	jle    c0018bf8 <FAT::fixFilepath(char*)+0x3c>
c0018bca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bce:	8a 00                	mov    al,BYTE PTR [eax]
c0018bd0:	83 e8 41             	sub    eax,0x41
c0018bd3:	88 c2                	mov    dl,al
c0018bd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bd9:	88 10                	mov    BYTE PTR [eax],dl
c0018bdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bdf:	8a 00                	mov    al,BYTE PTR [eax]
c0018be1:	0f be c0             	movsx  eax,al
c0018be4:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018beb:	83 c0 30             	add    eax,0x30
c0018bee:	88 c2                	mov    dl,al
c0018bf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bf4:	88 10                	mov    BYTE PTR [eax],dl
c0018bf6:	66 90                	xchg   ax,ax
c0018bf8:	90                   	nop
c0018bf9:	c3                   	ret    
c0018bfa:	66 90                	xchg   ax,ax

c0018bfc <FAT::open(char const*, void**, FileOpenMode)>:
c0018bfc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018c02:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018c0a:	74 0c                	je     c0018c18 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018c0c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018c14:	75 0e                	jne    c0018c24 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018c16:	66 90                	xchg   ax,ax
c0018c18:	b8 04 00 00 00       	mov    eax,0x4
c0018c1d:	e9 46 01 00 00       	jmp    c0018d68 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018c22:	66 90                	xchg   ax,ax
c0018c24:	83 ec 08             	sub    esp,0x8
c0018c27:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018c32:	50                   	push   eax
c0018c33:	e8 08 7a fe ff       	call   c0000640 <strcpy>
c0018c38:	83 c4 10             	add    esp,0x10
c0018c3b:	83 ec 08             	sub    esp,0x8
c0018c3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c42:	50                   	push   eax
c0018c43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c4a:	e8 6d ff ff ff       	call   c0018bbc <FAT::fixFilepath(char*)>
c0018c4f:	83 c4 10             	add    esp,0x10
c0018c52:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018c5a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c61:	83 e0 01             	and    eax,0x1
c0018c64:	74 12                	je     c0018c78 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018c66:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c6d:	83 c8 01             	or     eax,0x1
c0018c70:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c77:	90                   	nop
c0018c78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c7f:	83 e0 04             	and    eax,0x4
c0018c82:	74 24                	je     c0018ca8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018c84:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c8b:	83 c8 30             	or     eax,0x30
c0018c8e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c95:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c9c:	83 c8 02             	or     eax,0x2
c0018c9f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018ca6:	66 90                	xchg   ax,ax
c0018ca8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018caf:	83 e0 02             	and    eax,0x2
c0018cb2:	74 14                	je     c0018cc8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018cb4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018cbb:	83 c8 02             	or     eax,0x2
c0018cbe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cc8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018ccf:	83 e0 08             	and    eax,0x8
c0018cd2:	74 14                	je     c0018ce8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018cd4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018cdb:	83 c8 04             	or     eax,0x4
c0018cde:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ce8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018cef:	83 e0 10             	and    eax,0x10
c0018cf2:	74 14                	je     c0018d08 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018cf4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018cfb:	83 c8 08             	or     eax,0x8
c0018cfe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018d05:	8d 76 00             	lea    esi,[esi+0x0]
c0018d08:	83 ec 0c             	sub    esp,0xc
c0018d0b:	68 28 02 00 00       	push   0x228
c0018d10:	e8 99 ed fe ff       	call   c0007aae <malloc>
c0018d15:	83 c4 10             	add    esp,0x10
c0018d18:	89 c2                	mov    edx,eax
c0018d1a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d21:	89 10                	mov    DWORD PTR [eax],edx
c0018d23:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018d2b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d32:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d34:	83 ec 04             	sub    esp,0x4
c0018d37:	52                   	push   edx
c0018d38:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018d3c:	52                   	push   edx
c0018d3d:	50                   	push   eax
c0018d3e:	e8 17 af fe ff       	call   c0003c5a <f_open>
c0018d43:	83 c4 10             	add    esp,0x10
c0018d46:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018d4d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018d55:	74 09                	je     c0018d60 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018d57:	b8 01 00 00 00       	mov    eax,0x1
c0018d5c:	eb 0a                	jmp    c0018d68 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018d5e:	66 90                	xchg   ax,ax
c0018d60:	b8 00 00 00 00       	mov    eax,0x0
c0018d65:	8d 76 00             	lea    esi,[esi+0x0]
c0018d68:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d6e:	c3                   	ret    
c0018d6f:	90                   	nop

c0018d70 <FAT::openDir(char const*, void**)>:
c0018d70:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018d76:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018d7e:	74 0c                	je     c0018d8c <FAT::openDir(char const*, void**)+0x1c>
c0018d80:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018d88:	75 0e                	jne    c0018d98 <FAT::openDir(char const*, void**)+0x28>
c0018d8a:	66 90                	xchg   ax,ax
c0018d8c:	b8 04 00 00 00       	mov    eax,0x4
c0018d91:	e9 82 00 00 00       	jmp    c0018e18 <FAT::openDir(char const*, void**)+0xa8>
c0018d96:	66 90                	xchg   ax,ax
c0018d98:	83 ec 08             	sub    esp,0x8
c0018d9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018da2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018da6:	50                   	push   eax
c0018da7:	e8 94 78 fe ff       	call   c0000640 <strcpy>
c0018dac:	83 c4 10             	add    esp,0x10
c0018daf:	83 ec 08             	sub    esp,0x8
c0018db2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018db6:	50                   	push   eax
c0018db7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018dbe:	e8 f9 fd ff ff       	call   c0018bbc <FAT::fixFilepath(char*)>
c0018dc3:	83 c4 10             	add    esp,0x10
c0018dc6:	83 ec 0c             	sub    esp,0xc
c0018dc9:	6a 30                	push   0x30
c0018dcb:	e8 de ec fe ff       	call   c0007aae <malloc>
c0018dd0:	83 c4 10             	add    esp,0x10
c0018dd3:	89 c2                	mov    edx,eax
c0018dd5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018ddc:	89 10                	mov    DWORD PTR [eax],edx
c0018dde:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018de5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018de7:	83 ec 08             	sub    esp,0x8
c0018dea:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018dee:	52                   	push   edx
c0018def:	50                   	push   eax
c0018df0:	e8 14 b8 fe ff       	call   c0004609 <f_opendir>
c0018df5:	83 c4 10             	add    esp,0x10
c0018df8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018dff:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018e07:	74 07                	je     c0018e10 <FAT::openDir(char const*, void**)+0xa0>
c0018e09:	b8 01 00 00 00       	mov    eax,0x1
c0018e0e:	eb 08                	jmp    c0018e18 <FAT::openDir(char const*, void**)+0xa8>
c0018e10:	b8 00 00 00 00       	mov    eax,0x0
c0018e15:	8d 76 00             	lea    esi,[esi+0x0]
c0018e18:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018e1e:	c3                   	ret    
c0018e1f:	90                   	nop

c0018e20 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018e20:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018e26:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018e2e:	75 0c                	jne    c0018e3c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018e30:	b8 04 00 00 00       	mov    eax,0x4
c0018e35:	e9 d6 00 00 00       	jmp    c0018f10 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e3a:	66 90                	xchg   ax,ax
c0018e3c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018e44:	75 0a                	jne    c0018e50 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018e46:	b8 04 00 00 00       	mov    eax,0x4
c0018e4b:	e9 c0 00 00 00       	jmp    c0018f10 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e50:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018e58:	75 0a                	jne    c0018e64 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018e5a:	b8 04 00 00 00       	mov    eax,0x4
c0018e5f:	e9 ac 00 00 00       	jmp    c0018f10 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e64:	83 ec 08             	sub    esp,0x8
c0018e67:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e6e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e75:	50                   	push   eax
c0018e76:	e8 c5 77 fe ff       	call   c0000640 <strcpy>
c0018e7b:	83 c4 10             	add    esp,0x10
c0018e7e:	83 ec 08             	sub    esp,0x8
c0018e81:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018e88:	50                   	push   eax
c0018e89:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e90:	e8 27 fd ff ff       	call   c0018bbc <FAT::fixFilepath(char*)>
c0018e95:	83 c4 10             	add    esp,0x10
c0018e98:	83 ec 08             	sub    esp,0x8
c0018e9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e9f:	50                   	push   eax
c0018ea0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018ea7:	50                   	push   eax
c0018ea8:	e8 db b8 fe ff       	call   c0004788 <f_stat>
c0018ead:	83 c4 10             	add    esp,0x10
c0018eb0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018eb7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018ebe:	85 c0                	test   eax,eax
c0018ec0:	74 0a                	je     c0018ecc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018ec2:	83 f8 04             	cmp    eax,0x4
c0018ec5:	74 39                	je     c0018f00 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018ec7:	eb 3f                	jmp    c0018f08 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ecc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ed0:	0f b6 c0             	movzx  eax,al
c0018ed3:	83 e0 10             	and    eax,0x10
c0018ed6:	0f 95 c2             	setne  dl
c0018ed9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018ee0:	88 10                	mov    BYTE PTR [eax],dl
c0018ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ee6:	ba 00 00 00 00       	mov    edx,0x0
c0018eeb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018ef2:	89 01                	mov    DWORD PTR [ecx],eax
c0018ef4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ef7:	b8 00 00 00 00       	mov    eax,0x0
c0018efc:	eb 12                	jmp    c0018f10 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018efe:	66 90                	xchg   ax,ax
c0018f00:	b8 02 00 00 00       	mov    eax,0x2
c0018f05:	eb 09                	jmp    c0018f10 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018f07:	90                   	nop
c0018f08:	b8 01 00 00 00       	mov    eax,0x1
c0018f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f10:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018f16:	c3                   	ret    
c0018f17:	90                   	nop

c0018f18 <FAT::unlink(char const*)>:
c0018f18:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018f1e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018f26:	75 08                	jne    c0018f30 <FAT::unlink(char const*)+0x18>
c0018f28:	b8 04 00 00 00       	mov    eax,0x4
c0018f2d:	eb 61                	jmp    c0018f90 <FAT::unlink(char const*)+0x78>
c0018f2f:	90                   	nop
c0018f30:	83 ec 08             	sub    esp,0x8
c0018f33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f3a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f3e:	50                   	push   eax
c0018f3f:	e8 fc 76 fe ff       	call   c0000640 <strcpy>
c0018f44:	83 c4 10             	add    esp,0x10
c0018f47:	83 ec 08             	sub    esp,0x8
c0018f4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f4e:	50                   	push   eax
c0018f4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f56:	e8 61 fc ff ff       	call   c0018bbc <FAT::fixFilepath(char*)>
c0018f5b:	83 c4 10             	add    esp,0x10
c0018f5e:	83 ec 0c             	sub    esp,0xc
c0018f61:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f65:	50                   	push   eax
c0018f66:	e8 8f ba fe ff       	call   c00049fa <f_unlink>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018f75:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018f7c:	85 c0                	test   eax,eax
c0018f7e:	75 08                	jne    c0018f88 <FAT::unlink(char const*)+0x70>
c0018f80:	b8 00 00 00 00       	mov    eax,0x0
c0018f85:	eb 09                	jmp    c0018f90 <FAT::unlink(char const*)+0x78>
c0018f87:	90                   	nop
c0018f88:	b8 01 00 00 00       	mov    eax,0x1
c0018f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f90:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018f96:	c3                   	ret    
c0018f97:	90                   	nop

c0018f98 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018f98:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018f9e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018fa5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018fac:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018fb0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018fb4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018fbc:	75 0a                	jne    c0018fc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018fbe:	b8 04 00 00 00       	mov    eax,0x4
c0018fc3:	e9 7c 01 00 00       	jmp    c0019144 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0018fc8:	83 ec 08             	sub    esp,0x8
c0018fcb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018fd2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018fd6:	50                   	push   eax
c0018fd7:	e8 64 76 fe ff       	call   c0000640 <strcpy>
c0018fdc:	83 c4 10             	add    esp,0x10
c0018fdf:	83 ec 08             	sub    esp,0x8
c0018fe2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018fe6:	50                   	push   eax
c0018fe7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018fee:	e8 c9 fb ff ff       	call   c0018bbc <FAT::fixFilepath(char*)>
c0018ff3:	83 c4 10             	add    esp,0x10
c0018ff6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018ffe:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019006:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001900b:	83 e0 01             	and    eax,0x1
c001900e:	74 14                	je     c0019024 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019010:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019017:	83 c8 01             	or     eax,0x1
c001901a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019021:	8d 76 00             	lea    esi,[esi+0x0]
c0019024:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019029:	83 e0 02             	and    eax,0x2
c001902c:	74 12                	je     c0019040 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001902e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019035:	83 c8 20             	or     eax,0x20
c0019038:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001903f:	90                   	nop
c0019040:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019045:	83 e0 04             	and    eax,0x4
c0019048:	74 12                	je     c001905c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001904a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019051:	83 c8 04             	or     eax,0x4
c0019054:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001905b:	90                   	nop
c001905c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019061:	83 e0 08             	and    eax,0x8
c0019064:	74 12                	je     c0019078 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019066:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001906d:	83 c8 02             	or     eax,0x2
c0019070:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019077:	90                   	nop
c0019078:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001907d:	83 e0 01             	and    eax,0x1
c0019080:	74 12                	je     c0019094 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019082:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019089:	83 c8 01             	or     eax,0x1
c001908c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019093:	90                   	nop
c0019094:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019099:	83 e0 02             	and    eax,0x2
c001909c:	74 12                	je     c00190b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001909e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00190a5:	83 c8 20             	or     eax,0x20
c00190a8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190af:	90                   	nop
c00190b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00190b5:	83 e0 04             	and    eax,0x4
c00190b8:	74 12                	je     c00190cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c00190ba:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00190c1:	83 c8 04             	or     eax,0x4
c00190c4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190cb:	90                   	nop
c00190cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00190d1:	83 e0 08             	and    eax,0x8
c00190d4:	74 12                	je     c00190e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c00190d6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00190dd:	83 c8 02             	or     eax,0x2
c00190e0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190e7:	90                   	nop
c00190e8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00190ef:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00190f6:	09 d0                	or     eax,edx
c00190f8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190ff:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019107:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001910f:	83 ec 04             	sub    esp,0x4
c0019112:	52                   	push   edx
c0019113:	50                   	push   eax
c0019114:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019118:	50                   	push   eax
c0019119:	e8 51 bd fe ff       	call   c0004e6f <f_chmod>
c001911e:	83 c4 10             	add    esp,0x10
c0019121:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019128:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001912f:	85 c0                	test   eax,eax
c0019131:	75 09                	jne    c001913c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019133:	b8 00 00 00 00       	mov    eax,0x0
c0019138:	eb 0a                	jmp    c0019144 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001913a:	66 90                	xchg   ax,ax
c001913c:	b8 01 00 00 00       	mov    eax,0x1
c0019141:	8d 76 00             	lea    esi,[esi+0x0]
c0019144:	81 c4 2c 01 00 00    	add    esp,0x12c
c001914a:	c3                   	ret    
c001914b:	90                   	nop

c001914c <FAT::rename(char const*, char const*)>:
c001914c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019152:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001915a:	74 0c                	je     c0019168 <FAT::rename(char const*, char const*)+0x1c>
c001915c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019164:	75 0e                	jne    c0019174 <FAT::rename(char const*, char const*)+0x28>
c0019166:	66 90                	xchg   ax,ax
c0019168:	b8 04 00 00 00       	mov    eax,0x4
c001916d:	e9 9e 00 00 00       	jmp    c0019210 <FAT::rename(char const*, char const*)+0xc4>
c0019172:	66 90                	xchg   ax,ax
c0019174:	83 ec 08             	sub    esp,0x8
c0019177:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001917e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019185:	50                   	push   eax
c0019186:	e8 b5 74 fe ff       	call   c0000640 <strcpy>
c001918b:	83 c4 10             	add    esp,0x10
c001918e:	83 ec 08             	sub    esp,0x8
c0019191:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019198:	50                   	push   eax
c0019199:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00191a0:	e8 17 fa ff ff       	call   c0018bbc <FAT::fixFilepath(char*)>
c00191a5:	83 c4 10             	add    esp,0x10
c00191a8:	83 ec 08             	sub    esp,0x8
c00191ab:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00191b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191b6:	50                   	push   eax
c00191b7:	e8 84 74 fe ff       	call   c0000640 <strcpy>
c00191bc:	83 c4 10             	add    esp,0x10
c00191bf:	83 ec 08             	sub    esp,0x8
c00191c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191c6:	50                   	push   eax
c00191c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00191ce:	e8 e9 f9 ff ff       	call   c0018bbc <FAT::fixFilepath(char*)>
c00191d3:	83 c4 10             	add    esp,0x10
c00191d6:	83 ec 08             	sub    esp,0x8
c00191d9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191dd:	50                   	push   eax
c00191de:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00191e5:	50                   	push   eax
c00191e6:	e8 cc ba fe ff       	call   c0004cb7 <f_rename>
c00191eb:	83 c4 10             	add    esp,0x10
c00191ee:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00191f5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00191fc:	85 c0                	test   eax,eax
c00191fe:	75 08                	jne    c0019208 <FAT::rename(char const*, char const*)+0xbc>
c0019200:	b8 00 00 00 00       	mov    eax,0x0
c0019205:	eb 09                	jmp    c0019210 <FAT::rename(char const*, char const*)+0xc4>
c0019207:	90                   	nop
c0019208:	b8 01 00 00 00       	mov    eax,0x1
c001920d:	8d 76 00             	lea    esi,[esi+0x0]
c0019210:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019216:	c3                   	ret    
c0019217:	90                   	nop

c0019218 <FAT::mkdir(char const*)>:
c0019218:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001921e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019226:	75 08                	jne    c0019230 <FAT::mkdir(char const*)+0x18>
c0019228:	b8 04 00 00 00       	mov    eax,0x4
c001922d:	eb 61                	jmp    c0019290 <FAT::mkdir(char const*)+0x78>
c001922f:	90                   	nop
c0019230:	83 ec 08             	sub    esp,0x8
c0019233:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001923a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001923e:	50                   	push   eax
c001923f:	e8 fc 73 fe ff       	call   c0000640 <strcpy>
c0019244:	83 c4 10             	add    esp,0x10
c0019247:	83 ec 08             	sub    esp,0x8
c001924a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001924e:	50                   	push   eax
c001924f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019256:	e8 61 f9 ff ff       	call   c0018bbc <FAT::fixFilepath(char*)>
c001925b:	83 c4 10             	add    esp,0x10
c001925e:	83 ec 0c             	sub    esp,0xc
c0019261:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019265:	50                   	push   eax
c0019266:	e8 b1 b8 fe ff       	call   c0004b1c <f_mkdir>
c001926b:	83 c4 10             	add    esp,0x10
c001926e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019275:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001927c:	85 c0                	test   eax,eax
c001927e:	75 08                	jne    c0019288 <FAT::mkdir(char const*)+0x70>
c0019280:	b8 00 00 00 00       	mov    eax,0x0
c0019285:	eb 09                	jmp    c0019290 <FAT::mkdir(char const*)+0x78>
c0019287:	90                   	nop
c0019288:	b8 01 00 00 00       	mov    eax,0x1
c001928d:	8d 76 00             	lea    esi,[esi+0x0]
c0019290:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019296:	c3                   	ret    
c0019297:	90                   	nop

c0019298 <FAT::exists(char const*)>:
c0019298:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001929e:	83 ec 08             	sub    esp,0x8
c00192a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00192a8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192ac:	50                   	push   eax
c00192ad:	e8 8e 73 fe ff       	call   c0000640 <strcpy>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	83 ec 08             	sub    esp,0x8
c00192b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192bc:	50                   	push   eax
c00192bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00192c4:	e8 f3 f8 ff ff       	call   c0018bbc <FAT::fixFilepath(char*)>
c00192c9:	83 c4 10             	add    esp,0x10
c00192cc:	83 ec 08             	sub    esp,0x8
c00192cf:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00192d6:	50                   	push   eax
c00192d7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192db:	50                   	push   eax
c00192dc:	e8 a7 b4 fe ff       	call   c0004788 <f_stat>
c00192e1:	83 c4 10             	add    esp,0x10
c00192e4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00192eb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00192f2:	85 c0                	test   eax,eax
c00192f4:	75 06                	jne    c00192fc <FAT::exists(char const*)+0x64>
c00192f6:	b0 01                	mov    al,0x1
c00192f8:	eb 06                	jmp    c0019300 <FAT::exists(char const*)+0x68>
c00192fa:	66 90                	xchg   ax,ax
c00192fc:	b0 00                	mov    al,0x0
c00192fe:	66 90                	xchg   ax,ax
c0019300:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019306:	c3                   	ret    
c0019307:	90                   	nop

c0019308 <isoReadDiscSectorHelper>:
c0019308:	83 ec 2c             	sub    esp,0x2c
c001930b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001930f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019313:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019318:	83 e8 41             	sub    eax,0x41
c001931b:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0019322:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019326:	ba 00 00 00 00       	mov    edx,0x0
c001932b:	83 ec 0c             	sub    esp,0xc
c001932e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019332:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019336:	52                   	push   edx
c0019337:	50                   	push   eax
c0019338:	51                   	push   ecx
c0019339:	e8 ca 3e ff ff       	call   c000d208 <LogicalDisk::read(unsigned long long, int, void*)>
c001933e:	83 c4 20             	add    esp,0x20
c0019341:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019345:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001934a:	74 0c                	je     c0019358 <isoReadDiscSectorHelper+0x50>
c001934c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019350:	c1 e0 0b             	shl    eax,0xb
c0019353:	eb 0b                	jmp    c0019360 <isoReadDiscSectorHelper+0x58>
c0019355:	8d 76 00             	lea    esi,[esi+0x0]
c0019358:	b8 00 00 00 00       	mov    eax,0x0
c001935d:	8d 76 00             	lea    esi,[esi+0x0]
c0019360:	83 c4 2c             	add    esp,0x2c
c0019363:	c3                   	ret    

c0019364 <iso_kprintf>:
c0019364:	83 ec 0c             	sub    esp,0xc
c0019367:	83 ec 08             	sub    esp,0x8
c001936a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001936e:	68 51 11 02 c0       	push   0xc0021151
c0019373:	e8 79 16 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0019378:	83 c4 10             	add    esp,0x10
c001937b:	90                   	nop
c001937c:	83 c4 0c             	add    esp,0xc
c001937f:	c3                   	ret    

c0019380 <iso_kprintfd>:
c0019380:	83 ec 0c             	sub    esp,0xc
c0019383:	83 ec 08             	sub    esp,0x8
c0019386:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001938a:	68 3e 01 02 c0       	push   0xc002013e
c001938f:	e8 5d 16 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c0019394:	83 c4 10             	add    esp,0x10
c0019397:	90                   	nop
c0019398:	83 c4 0c             	add    esp,0xc
c001939b:	c3                   	ret    

c001939c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001939c:	b8 08 00 00 00       	mov    eax,0x8
c00193a1:	c3                   	ret    

c00193a2 <ISO9660::getName()>:
c00193a2:	b8 a8 17 02 c0       	mov    eax,0xc00217a8
c00193a7:	c3                   	ret    

c00193a8 <ISO9660::closeDir(void*)>:
c00193a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00193ae:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00193b1:	90                   	nop

c00193b2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00193b2:	b8 01 00 00 00       	mov    eax,0x1
c00193b7:	c3                   	ret    

c00193b8 <ISO9660::unlink(char const*)>:
c00193b8:	b8 01 00 00 00       	mov    eax,0x1
c00193bd:	c3                   	ret    

c00193be <ISO9660::write(void*, unsigned long, void*, int*)>:
c00193be:	b8 03 00 00 00       	mov    eax,0x3
c00193c3:	c3                   	ret    

c00193c4 <ISO9660::rename(char const*, char const*)>:
c00193c4:	b8 01 00 00 00       	mov    eax,0x1
c00193c9:	c3                   	ret    

c00193ca <ISO9660::mkdir(char const*)>:
c00193ca:	b8 01 00 00 00       	mov    eax,0x1
c00193cf:	c3                   	ret    

c00193d0 <ISO9660::~ISO9660()>:
c00193d0:	83 ec 0c             	sub    esp,0xc
c00193d3:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c00193d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193dc:	89 10                	mov    DWORD PTR [eax],edx
c00193de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193e2:	83 ec 0c             	sub    esp,0xc
c00193e5:	50                   	push   eax
c00193e6:	e8 4d 19 ff ff       	call   c000ad38 <Filesystem::~Filesystem()>
c00193eb:	83 c4 10             	add    esp,0x10
c00193ee:	90                   	nop
c00193ef:	83 c4 0c             	add    esp,0xc
c00193f2:	c3                   	ret    
c00193f3:	90                   	nop

c00193f4 <ISO9660::~ISO9660()>:
c00193f4:	83 ec 0c             	sub    esp,0xc
c00193f7:	83 ec 0c             	sub    esp,0xc
c00193fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193fe:	e8 cd ff ff ff       	call   c00193d0 <ISO9660::~ISO9660()>
c0019403:	83 c4 10             	add    esp,0x10
c0019406:	83 ec 08             	sub    esp,0x8
c0019409:	6a 08                	push   0x8
c001940b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001940f:	e8 b0 14 ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c0019414:	83 c4 10             	add    esp,0x10
c0019417:	83 c4 0c             	add    esp,0xc
c001941a:	c3                   	ret    
c001941b:	90                   	nop

c001941c <ISO9660::exists(char const*)>:
c001941c:	83 ec 18             	sub    esp,0x18
c001941f:	68 c3 17 02 c0       	push   0xc00217c3
c0019424:	e8 f6 74 ff ff       	call   c001091f <KePanic(char const*)>
c0019429:	31 c0                	xor    eax,eax
c001942b:	83 c4 1c             	add    esp,0x1c
c001942e:	c3                   	ret    
c001942f:	90                   	nop

c0019430 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019430:	56                   	push   esi
c0019431:	53                   	push   ebx
c0019432:	53                   	push   ebx
c0019433:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019437:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001943b:	85 db                	test   ebx,ebx
c001943d:	0f 84 ca 00 00 00    	je     c001950d <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019443:	85 f6                	test   esi,esi
c0019445:	0f 84 c2 00 00 00    	je     c001950d <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001944b:	b8 03 00 00 00       	mov    eax,0x3
c0019450:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019455:	0f 85 b7 00 00 00    	jne    c0019512 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001945b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001945d:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019464:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001946a:	74 1b                	je     c0019487 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001946c:	85 c0                	test   eax,eax
c001946e:	74 10                	je     c0019480 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019470:	83 ec 0c             	sub    esp,0xc
c0019473:	68 e1 17 02 c0       	push   0xc00217e1
c0019478:	e8 a2 74 ff ff       	call   c001091f <KePanic(char const*)>
c001947d:	83 c4 10             	add    esp,0x10
c0019480:	8a 03                	mov    al,BYTE PTR [ebx]
c0019482:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019487:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001948a:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019491:	85 c0                	test   eax,eax
c0019493:	74 09                	je     c001949e <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019495:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001949c:	74 48                	je     c00194e6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001949e:	83 ec 0c             	sub    esp,0xc
c00194a1:	68 f1 17 02 c0       	push   0xc00217f1
c00194a6:	e8 46 15 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00194ab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194ae:	83 c4 10             	add    esp,0x10
c00194b1:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00194b8:	85 c0                	test   eax,eax
c00194ba:	74 17                	je     c00194d3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00194bc:	83 ec 0c             	sub    esp,0xc
c00194bf:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00194c6:	68 11 18 02 c0       	push   0xc0021811
c00194cb:	e8 21 15 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	83 ec 0c             	sub    esp,0xc
c00194d6:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00194dd:	50                   	push   eax
c00194de:	e8 63 d5 fe ff       	call   c0006a46 <init_percd>
c00194e3:	83 c4 10             	add    esp,0x10
c00194e6:	83 c3 03             	add    ebx,0x3
c00194e9:	51                   	push   ecx
c00194ea:	51                   	push   ecx
c00194eb:	6a 00                	push   0x0
c00194ed:	53                   	push   ebx
c00194ee:	e8 1a d0 fe ff       	call   c000650d <iso_open>
c00194f3:	83 c4 10             	add    esp,0x10
c00194f6:	89 c2                	mov    edx,eax
c00194f8:	b8 01 00 00 00       	mov    eax,0x1
c00194fd:	83 fa ff             	cmp    edx,0xffffffff
c0019500:	74 10                	je     c0019512 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019502:	83 c2 32             	add    edx,0x32
c0019505:	31 c0                	xor    eax,eax
c0019507:	01 d2                	add    edx,edx
c0019509:	89 16                	mov    DWORD PTR [esi],edx
c001950b:	eb 05                	jmp    c0019512 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001950d:	b8 04 00 00 00       	mov    eax,0x4
c0019512:	5a                   	pop    edx
c0019513:	5b                   	pop    ebx
c0019514:	5e                   	pop    esi
c0019515:	c3                   	ret    

c0019516 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019516:	53                   	push   ebx
c0019517:	83 ec 08             	sub    esp,0x8
c001951a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001951e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019522:	85 c0                	test   eax,eax
c0019524:	74 2d                	je     c0019553 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019526:	85 db                	test   ebx,ebx
c0019528:	74 29                	je     c0019553 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001952a:	b9 02 00 00 00       	mov    ecx,0x2
c001952f:	52                   	push   edx
c0019530:	99                   	cdq    
c0019531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019535:	f7 f9                	idiv   ecx
c0019537:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001953b:	83 e8 32             	sub    eax,0x32
c001953e:	50                   	push   eax
c001953f:	e8 71 d0 fe ff       	call   c00065b5 <iso_read>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	89 03                	mov    DWORD PTR [ebx],eax
c0019549:	09 d0                	or     eax,edx
c001954b:	0f 94 c0             	sete   al
c001954e:	0f b6 c0             	movzx  eax,al
c0019551:	eb 05                	jmp    c0019558 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0019553:	b8 04 00 00 00       	mov    eax,0x4
c0019558:	83 c4 08             	add    esp,0x8
c001955b:	5b                   	pop    ebx
c001955c:	c3                   	ret    
c001955d:	90                   	nop

c001955e <ISO9660::seek(void*, unsigned long long)>:
c001955e:	57                   	push   edi
c001955f:	56                   	push   esi
c0019560:	b8 04 00 00 00       	mov    eax,0x4
c0019565:	51                   	push   ecx
c0019566:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001956a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001956e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019572:	85 d2                	test   edx,edx
c0019574:	74 26                	je     c001959c <ISO9660::seek(void*, unsigned long long)+0x3e>
c0019576:	6a 00                	push   0x0
c0019578:	b9 02 00 00 00       	mov    ecx,0x2
c001957d:	57                   	push   edi
c001957e:	89 d0                	mov    eax,edx
c0019580:	56                   	push   esi
c0019581:	99                   	cdq    
c0019582:	f7 f9                	idiv   ecx
c0019584:	83 e8 32             	sub    eax,0x32
c0019587:	50                   	push   eax
c0019588:	e8 3e d1 fe ff       	call   c00066cb <iso_seek>
c001958d:	83 c4 10             	add    esp,0x10
c0019590:	31 f0                	xor    eax,esi
c0019592:	31 fa                	xor    edx,edi
c0019594:	09 d0                	or     eax,edx
c0019596:	0f 95 c0             	setne  al
c0019599:	0f b6 c0             	movzx  eax,al
c001959c:	5a                   	pop    edx
c001959d:	5e                   	pop    esi
c001959e:	5f                   	pop    edi
c001959f:	c3                   	ret    

c00195a0 <ISO9660::tell(void*, unsigned long long*)>:
c00195a0:	53                   	push   ebx
c00195a1:	83 ec 08             	sub    esp,0x8
c00195a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00195ac:	85 c0                	test   eax,eax
c00195ae:	74 24                	je     c00195d4 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00195b0:	85 db                	test   ebx,ebx
c00195b2:	74 20                	je     c00195d4 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	b9 02 00 00 00       	mov    ecx,0x2
c00195bc:	99                   	cdq    
c00195bd:	f7 f9                	idiv   ecx
c00195bf:	83 e8 32             	sub    eax,0x32
c00195c2:	50                   	push   eax
c00195c3:	e8 87 d1 fe ff       	call   c000674f <iso_tell>
c00195c8:	83 c4 10             	add    esp,0x10
c00195cb:	89 03                	mov    DWORD PTR [ebx],eax
c00195cd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00195d0:	31 c0                	xor    eax,eax
c00195d2:	eb 05                	jmp    c00195d9 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00195d4:	b8 04 00 00 00       	mov    eax,0x4
c00195d9:	83 c4 08             	add    esp,0x8
c00195dc:	5b                   	pop    ebx
c00195dd:	c3                   	ret    

c00195de <ISO9660::stat(void*, unsigned long long*)>:
c00195de:	53                   	push   ebx
c00195df:	83 ec 14             	sub    esp,0x14
c00195e2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00195e6:	68 35 18 02 c0       	push   0xc0021835
c00195eb:	e8 01 14 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00195f0:	83 c4 10             	add    esp,0x10
c00195f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195f8:	74 2c                	je     c0019626 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00195fa:	85 db                	test   ebx,ebx
c00195fc:	74 28                	je     c0019626 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00195fe:	83 ec 0c             	sub    esp,0xc
c0019601:	b9 02 00 00 00       	mov    ecx,0x2
c0019606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001960a:	99                   	cdq    
c001960b:	f7 f9                	idiv   ecx
c001960d:	83 e8 32             	sub    eax,0x32
c0019610:	50                   	push   eax
c0019611:	e8 6a d1 fe ff       	call   c0006780 <iso_total>
c0019616:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001961d:	89 03                	mov    DWORD PTR [ebx],eax
c001961f:	83 c4 10             	add    esp,0x10
c0019622:	31 c0                	xor    eax,eax
c0019624:	eb 05                	jmp    c001962b <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0019626:	b8 04 00 00 00       	mov    eax,0x4
c001962b:	83 c4 08             	add    esp,0x8
c001962e:	5b                   	pop    ebx
c001962f:	c3                   	ret    

c0019630 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019630:	55                   	push   ebp
c0019631:	57                   	push   edi
c0019632:	56                   	push   esi
c0019633:	53                   	push   ebx
c0019634:	83 ec 18             	sub    esp,0x18
c0019637:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001963b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001963f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019643:	68 3d 18 02 c0       	push   0xc002183d
c0019648:	e8 a4 13 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001964d:	83 c4 10             	add    esp,0x10
c0019650:	85 ff                	test   edi,edi
c0019652:	0f 94 c0             	sete   al
c0019655:	85 f6                	test   esi,esi
c0019657:	0f 94 c2             	sete   dl
c001965a:	09 d0                	or     eax,edx
c001965c:	a8 01                	test   al,0x1
c001965e:	0f 85 dd 00 00 00    	jne    c0019741 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019664:	85 db                	test   ebx,ebx
c0019666:	0f 84 d5 00 00 00    	je     c0019741 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001966c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001966f:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019675:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001967c:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019683:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019685:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001968b:	74 1b                	je     c00196a8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001968d:	85 c0                	test   eax,eax
c001968f:	74 10                	je     c00196a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019691:	83 ec 0c             	sub    esp,0xc
c0019694:	68 e1 17 02 c0       	push   0xc00217e1
c0019699:	e8 81 72 ff ff       	call   c001091f <KePanic(char const*)>
c001969e:	83 c4 10             	add    esp,0x10
c00196a1:	8a 03                	mov    al,BYTE PTR [ebx]
c00196a3:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00196a8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196ab:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00196b2:	85 c0                	test   eax,eax
c00196b4:	74 09                	je     c00196bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00196b6:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00196bd:	74 51                	je     c0019710 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00196bf:	83 ec 0c             	sub    esp,0xc
c00196c2:	68 45 18 02 c0       	push   0xc0021845
c00196c7:	e8 25 13 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00196cc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196cf:	83 c4 10             	add    esp,0x10
c00196d2:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00196da:	74 21                	je     c00196fd <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00196dc:	83 ec 0c             	sub    esp,0xc
c00196df:	68 65 18 02 c0       	push   0xc0021865
c00196e4:	e8 08 13 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00196e9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196ec:	83 c4 10             	add    esp,0x10
c00196ef:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00196f6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00196fd:	83 ec 0c             	sub    esp,0xc
c0019700:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019707:	50                   	push   eax
c0019708:	e8 39 d3 fe ff       	call   c0006a46 <init_percd>
c001970d:	83 c4 10             	add    esp,0x10
c0019710:	83 c3 03             	add    ebx,0x3
c0019713:	52                   	push   edx
c0019714:	52                   	push   edx
c0019715:	6a 00                	push   0x0
c0019717:	53                   	push   ebx
c0019718:	e8 f0 cd fe ff       	call   c000650d <iso_open>
c001971d:	83 c4 10             	add    esp,0x10
c0019720:	89 c5                	mov    ebp,eax
c0019722:	83 f8 ff             	cmp    eax,0xffffffff
c0019725:	75 21                	jne    c0019748 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0019727:	50                   	push   eax
c0019728:	50                   	push   eax
c0019729:	6a 01                	push   0x1
c001972b:	53                   	push   ebx
c001972c:	e8 dc cd fe ff       	call   c000650d <iso_open>
c0019731:	83 c4 10             	add    esp,0x10
c0019734:	ba 02 00 00 00       	mov    edx,0x2
c0019739:	40                   	inc    eax
c001973a:	74 2b                	je     c0019767 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001973c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001973f:	eb 24                	jmp    c0019765 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019741:	ba 04 00 00 00       	mov    edx,0x4
c0019746:	eb 1f                	jmp    c0019767 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019748:	83 ec 0c             	sub    esp,0xc
c001974b:	50                   	push   eax
c001974c:	e8 2f d0 fe ff       	call   c0006780 <iso_total>
c0019751:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019758:	89 07                	mov    DWORD PTR [edi],eax
c001975a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001975d:	e8 35 ce fe ff       	call   c0006597 <iso_close>
c0019762:	83 c4 10             	add    esp,0x10
c0019765:	31 d2                	xor    edx,edx
c0019767:	83 c4 0c             	add    esp,0xc
c001976a:	89 d0                	mov    eax,edx
c001976c:	5b                   	pop    ebx
c001976d:	5e                   	pop    esi
c001976e:	5f                   	pop    edi
c001976f:	5d                   	pop    ebp
c0019770:	c3                   	ret    
c0019771:	90                   	nop

c0019772 <ISO9660::close(void*)>:
c0019772:	83 ec 0c             	sub    esp,0xc
c0019775:	b8 04 00 00 00       	mov    eax,0x4
c001977a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001977e:	85 d2                	test   edx,edx
c0019780:	74 1b                	je     c001979d <ISO9660::close(void*)+0x2b>
c0019782:	83 ec 0c             	sub    esp,0xc
c0019785:	b9 02 00 00 00       	mov    ecx,0x2
c001978a:	89 d0                	mov    eax,edx
c001978c:	99                   	cdq    
c001978d:	f7 f9                	idiv   ecx
c001978f:	83 e8 32             	sub    eax,0x32
c0019792:	50                   	push   eax
c0019793:	e8 ff cd fe ff       	call   c0006597 <iso_close>
c0019798:	83 c4 10             	add    esp,0x10
c001979b:	31 c0                	xor    eax,eax
c001979d:	83 c4 0c             	add    esp,0xc
c00197a0:	c3                   	ret    
c00197a1:	90                   	nop

c00197a2 <ISO9660::openDir(char const*, void**)>:
c00197a2:	56                   	push   esi
c00197a3:	53                   	push   ebx
c00197a4:	50                   	push   eax
c00197a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00197ad:	85 db                	test   ebx,ebx
c00197af:	0f 84 bd 00 00 00    	je     c0019872 <ISO9660::openDir(char const*, void**)+0xd0>
c00197b5:	85 f6                	test   esi,esi
c00197b7:	0f 84 b5 00 00 00    	je     c0019872 <ISO9660::openDir(char const*, void**)+0xd0>
c00197bd:	8a 13                	mov    dl,BYTE PTR [ebx]
c00197bf:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00197c6:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c00197cc:	74 1b                	je     c00197e9 <ISO9660::openDir(char const*, void**)+0x47>
c00197ce:	85 c0                	test   eax,eax
c00197d0:	74 10                	je     c00197e2 <ISO9660::openDir(char const*, void**)+0x40>
c00197d2:	83 ec 0c             	sub    esp,0xc
c00197d5:	68 e1 17 02 c0       	push   0xc00217e1
c00197da:	e8 40 71 ff ff       	call   c001091f <KePanic(char const*)>
c00197df:	83 c4 10             	add    esp,0x10
c00197e2:	8a 03                	mov    al,BYTE PTR [ebx]
c00197e4:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00197e9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00197ec:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00197f3:	85 c0                	test   eax,eax
c00197f5:	74 10                	je     c0019807 <ISO9660::openDir(char const*, void**)+0x65>
c00197f7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00197fe:	74 1a                	je     c001981a <ISO9660::openDir(char const*, void**)+0x78>
c0019800:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019807:	83 ec 0c             	sub    esp,0xc
c001980a:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019811:	50                   	push   eax
c0019812:	e8 2f d2 fe ff       	call   c0006a46 <init_percd>
c0019817:	83 c4 10             	add    esp,0x10
c001981a:	83 c3 03             	add    ebx,0x3
c001981d:	50                   	push   eax
c001981e:	50                   	push   eax
c001981f:	6a 01                	push   0x1
c0019821:	53                   	push   ebx
c0019822:	e8 e6 cc fe ff       	call   c000650d <iso_open>
c0019827:	83 c4 10             	add    esp,0x10
c001982a:	89 c3                	mov    ebx,eax
c001982c:	83 f8 ff             	cmp    eax,0xffffffff
c001982f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019834:	75 1c                	jne    c0019852 <ISO9660::openDir(char const*, void**)+0xb0>
c0019836:	53                   	push   ebx
c0019837:	53                   	push   ebx
c0019838:	68 89 18 02 c0       	push   0xc0021889
c001983d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019843:	e8 48 f2 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019848:	83 c4 10             	add    esp,0x10
c001984b:	b8 01 00 00 00       	mov    eax,0x1
c0019850:	eb 25                	jmp    c0019877 <ISO9660::openDir(char const*, void**)+0xd5>
c0019852:	01 db                	add    ebx,ebx
c0019854:	51                   	push   ecx
c0019855:	83 c3 65             	add    ebx,0x65
c0019858:	51                   	push   ecx
c0019859:	68 9c 18 02 c0       	push   0xc002189c
c001985e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019864:	e8 27 f2 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019869:	89 1e                	mov    DWORD PTR [esi],ebx
c001986b:	83 c4 10             	add    esp,0x10
c001986e:	31 c0                	xor    eax,eax
c0019870:	eb 05                	jmp    c0019877 <ISO9660::openDir(char const*, void**)+0xd5>
c0019872:	b8 04 00 00 00       	mov    eax,0x4
c0019877:	5a                   	pop    edx
c0019878:	5b                   	pop    ebx
c0019879:	5e                   	pop    esi
c001987a:	c3                   	ret    
c001987b:	90                   	nop

c001987c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001987c:	55                   	push   ebp
c001987d:	57                   	push   edi
c001987e:	56                   	push   esi
c001987f:	53                   	push   ebx
c0019880:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019886:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001988d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019894:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001989c:	0f 84 e7 00 00 00    	je     c0019989 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00198a2:	85 db                	test   ebx,ebx
c00198a4:	0f 84 df 00 00 00    	je     c0019989 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00198aa:	83 ec 0c             	sub    esp,0xc
c00198ad:	68 af 18 02 c0       	push   0xc00218af
c00198b2:	e8 3a 11 ff ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c00198b7:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00198be:	b9 02 00 00 00       	mov    ecx,0x2
c00198c3:	99                   	cdq    
c00198c4:	f7 f9                	idiv   ecx
c00198c6:	83 e8 32             	sub    eax,0x32
c00198c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00198cc:	e8 01 cf fe ff       	call   c00067d2 <iso_readdir>
c00198d1:	83 c4 10             	add    esp,0x10
c00198d4:	89 c6                	mov    esi,eax
c00198d6:	85 c0                	test   eax,eax
c00198d8:	75 37                	jne    c0019911 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c00198da:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00198df:	56                   	push   esi
c00198e0:	56                   	push   esi
c00198e1:	68 ba 18 02 c0       	push   0xc00218ba
c00198e6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198ec:	e8 9f f1 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c00198f1:	83 c4 0c             	add    esp,0xc
c00198f4:	68 10 01 00 00       	push   0x110
c00198f9:	6a 00                	push   0x0
c00198fb:	57                   	push   edi
c00198fc:	e8 ef 6b fe ff       	call   c00004f0 <memset>
c0019901:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019907:	83 c4 10             	add    esp,0x10
c001990a:	b8 01 00 00 00       	mov    eax,0x1
c001990f:	eb 7d                	jmp    c001998e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019911:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019917:	8d 68 08             	lea    ebp,[eax+0x8]
c001991a:	83 ec 0c             	sub    esp,0xc
c001991d:	55                   	push   ebp
c001991e:	e8 4d 6c fe ff       	call   c0000570 <strlen>
c0019923:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001992b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001992f:	83 c4 10             	add    esp,0x10
c0019932:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0019936:	75 0a                	jne    c0019942 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019938:	b8 02 00 00 00       	mov    eax,0x2
c001993d:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019940:	74 05                	je     c0019947 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0019942:	b8 01 00 00 00       	mov    eax,0x1
c0019947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001994b:	50                   	push   eax
c001994c:	50                   	push   eax
c001994d:	55                   	push   ebp
c001994e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019952:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019956:	50                   	push   eax
c0019957:	e8 e4 6c fe ff       	call   c0000640 <strcpy>
c001995c:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019963:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019965:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001996b:	5a                   	pop    edx
c001996c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019971:	59                   	pop    ecx
c0019972:	68 cd 18 02 c0       	push   0xc00218cd
c0019977:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001997d:	e8 0e f1 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019982:	83 c4 10             	add    esp,0x10
c0019985:	31 c0                	xor    eax,eax
c0019987:	eb 05                	jmp    c001998e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019989:	b8 04 00 00 00       	mov    eax,0x4
c001998e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019994:	5b                   	pop    ebx
c0019995:	5e                   	pop    esi
c0019996:	5f                   	pop    edi
c0019997:	5d                   	pop    ebp
c0019998:	c3                   	ret    

c0019999 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019999:	57                   	push   edi
c001999a:	56                   	push   esi
c001999b:	53                   	push   ebx
c001999c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00199a0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00199a4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00199a8:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00199ae:	0f be cb             	movsx  ecx,bl
c00199b1:	75 0b                	jne    c00199be <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00199b3:	0f be 05 24 24 02 c0 	movsx  eax,BYTE PTR ds:0xc0022424
c00199ba:	39 c8                	cmp    eax,ecx
c00199bc:	74 47                	je     c0019a05 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00199be:	83 ec 0c             	sub    esp,0xc
c00199c1:	31 d2                	xor    edx,edx
c00199c3:	68 40 83 02 c0       	push   0xc0028340
c00199c8:	6a 01                	push   0x1
c00199ca:	52                   	push   edx
c00199cb:	56                   	push   esi
c00199cc:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c00199d3:	e8 30 38 ff ff       	call   c000d208 <LogicalDisk::read(unsigned long long, int, void*)>
c00199d8:	83 c4 20             	add    esp,0x20
c00199db:	85 c0                	test   eax,eax
c00199dd:	75 0e                	jne    c00199ed <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00199df:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c00199e5:	88 1d 24 24 02 c0    	mov    BYTE PTR ds:0xc0022424,bl
c00199eb:	eb 18                	jmp    c0019a05 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00199ed:	50                   	push   eax
c00199ee:	68 00 08 00 00       	push   0x800
c00199f3:	6a 00                	push   0x0
c00199f5:	57                   	push   edi
c00199f6:	e8 f5 6a fe ff       	call   c00004f0 <memset>
c00199fb:	83 c4 10             	add    esp,0x10
c00199fe:	b8 01 00 00 00       	mov    eax,0x1
c0019a03:	eb 0e                	jmp    c0019a13 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019a05:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019a0a:	b9 00 08 00 00       	mov    ecx,0x800
c0019a0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a11:	31 c0                	xor    eax,eax
c0019a13:	5b                   	pop    ebx
c0019a14:	5e                   	pop    esi
c0019a15:	5f                   	pop    edi
c0019a16:	c3                   	ret    
c0019a17:	90                   	nop

c0019a18 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019a18:	53                   	push   ebx
c0019a19:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019a1f:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019a29:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019a30:	8d 58 41             	lea    ebx,[eax+0x41]
c0019a33:	0f be db             	movsx  ebx,bl
c0019a36:	53                   	push   ebx
c0019a37:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a3b:	50                   	push   eax
c0019a3c:	6a 10                	push   0x10
c0019a3e:	e8 56 ff ff ff       	call   c0019999 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019a43:	83 c4 10             	add    esp,0x10
c0019a46:	31 d2                	xor    edx,edx
c0019a48:	85 c0                	test   eax,eax
c0019a4a:	75 33                	jne    c0019a7f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a4c:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019a51:	75 2c                	jne    c0019a7f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a53:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019a58:	75 25                	jne    c0019a7f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a5a:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019a5f:	75 1e                	jne    c0019a7f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a61:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019a66:	75 17                	jne    c0019a7f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a68:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019a6d:	75 10                	jne    c0019a7f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a6f:	83 ec 0c             	sub    esp,0xc
c0019a72:	53                   	push   ebx
c0019a73:	e8 ce cf fe ff       	call   c0006a46 <init_percd>
c0019a78:	83 c4 10             	add    esp,0x10
c0019a7b:	40                   	inc    eax
c0019a7c:	0f 95 c2             	setne  dl
c0019a7f:	88 d0                	mov    al,dl
c0019a81:	81 c4 08 08 00 00    	add    esp,0x808
c0019a87:	5b                   	pop    ebx
c0019a88:	c3                   	ret    
c0019a89:	90                   	nop

c0019a8a <ISO9660::ISO9660()>:
c0019a8a:	83 ec 0c             	sub    esp,0xc
c0019a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a91:	83 ec 0c             	sub    esp,0xc
c0019a94:	50                   	push   eax
c0019a95:	e8 7a 12 ff ff       	call   c000ad14 <Filesystem::Filesystem()>
c0019a9a:	83 c4 10             	add    esp,0x10
c0019a9d:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c0019aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aa6:	89 10                	mov    DWORD PTR [eax],edx
c0019aa8:	e8 ab d0 fe ff       	call   c0006b58 <fs_iso9660_init>
c0019aad:	90                   	nop
c0019aae:	83 c4 0c             	add    esp,0xc
c0019ab1:	c3                   	ret    

c0019ab2 <SoundCard::beginPlayback()>:
c0019ab2:	c7 44 24 04 48 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021948
c0019aba:	e9 60 6e ff ff       	jmp    c001091f <KePanic(char const*)>
c0019abf:	90                   	nop

c0019ac0 <SoundCard::stopPlayback()>:
c0019ac0:	c7 44 24 04 48 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021948
c0019ac8:	e9 52 6e ff ff       	jmp    c001091f <KePanic(char const*)>
c0019acd:	90                   	nop

c0019ace <SoundCard::SoundCard(char const*)>:
c0019ace:	83 ec 1c             	sub    esp,0x1c
c0019ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ad5:	83 ec 08             	sub    esp,0x8
c0019ad8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019adc:	50                   	push   eax
c0019add:	e8 dc 24 ff ff       	call   c000bfbe <Device::Device(char const*)>
c0019ae2:	83 c4 10             	add    esp,0x10
c0019ae5:	ba 94 19 02 c0       	mov    edx,0xc0021994
c0019aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aee:	89 10                	mov    DWORD PTR [eax],edx
c0019af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019af4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019afb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aff:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019b09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b0d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019b17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b1b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b29:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019b33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b3b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019b40:	7f 1a                	jg     c0019b5c <SoundCard::SoundCard(char const*)+0x8e>
c0019b42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b4a:	83 c2 54             	add    edx,0x54
c0019b4d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019b55:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019b5a:	eb df                	jmp    c0019b3b <SoundCard::SoundCard(char const*)+0x6d>
c0019b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b60:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019b67:	90                   	nop
c0019b68:	83 c4 1c             	add    esp,0x1c
c0019b6b:	c3                   	ret    

c0019b6c <SoundCard::~SoundCard()>:
c0019b6c:	83 ec 0c             	sub    esp,0xc
c0019b6f:	ba 94 19 02 c0       	mov    edx,0xc0021994
c0019b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b78:	89 10                	mov    DWORD PTR [eax],edx
c0019b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b7e:	83 ec 0c             	sub    esp,0xc
c0019b81:	50                   	push   eax
c0019b82:	e8 a1 21 ff ff       	call   c000bd28 <Device::~Device()>
c0019b87:	83 c4 10             	add    esp,0x10
c0019b8a:	90                   	nop
c0019b8b:	83 c4 0c             	add    esp,0xc
c0019b8e:	c3                   	ret    
c0019b8f:	90                   	nop

c0019b90 <SoundCard::~SoundCard()>:
c0019b90:	83 ec 0c             	sub    esp,0xc
c0019b93:	83 ec 0c             	sub    esp,0xc
c0019b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b9a:	e8 cd ff ff ff       	call   c0019b6c <SoundCard::~SoundCard()>
c0019b9f:	83 c4 10             	add    esp,0x10
c0019ba2:	83 ec 08             	sub    esp,0x8
c0019ba5:	68 e8 01 00 00       	push   0x1e8
c0019baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bae:	e8 11 0d ff ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c0019bb3:	83 c4 10             	add    esp,0x10
c0019bb6:	83 c4 0c             	add    esp,0xc
c0019bb9:	c3                   	ret    

c0019bba <SoundCard::configureRates(int, int, int)>:
c0019bba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019bbe:	31 c0                	xor    eax,eax
c0019bc0:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019bc7:	75 20                	jne    c0019be9 <SoundCard::configureRates(int, int, int)+0x2f>
c0019bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bcd:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019bd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bd7:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be1:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019be7:	b0 01                	mov    al,0x1
c0019be9:	c3                   	ret    

c0019bea <SoundCard::getSamples16(int, short*)>:
c0019bea:	55                   	push   ebp
c0019beb:	57                   	push   edi
c0019bec:	31 ff                	xor    edi,edi
c0019bee:	56                   	push   esi
c0019bef:	53                   	push   ebx
c0019bf0:	31 db                	xor    ebx,ebx
c0019bf2:	83 ec 10             	sub    esp,0x10
c0019bf5:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019bf9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019bfd:	8d 04 36             	lea    eax,[esi+esi*1]
c0019c00:	50                   	push   eax
c0019c01:	6a 00                	push   0x0
c0019c03:	55                   	push   ebp
c0019c04:	e8 e7 68 fe ff       	call   c00004f0 <memset>
c0019c09:	83 c4 10             	add    esp,0x10
c0019c0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c10:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019c17:	85 c0                	test   eax,eax
c0019c19:	74 1b                	je     c0019c36 <SoundCard::getSamples16(int, short*)+0x4c>
c0019c1b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019c1f:	75 15                	jne    c0019c36 <SoundCard::getSamples16(int, short*)+0x4c>
c0019c21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c25:	55                   	push   ebp
c0019c26:	56                   	push   esi
c0019c27:	50                   	push   eax
c0019c28:	e8 f3 02 00 00       	call   c0019f20 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019c2d:	83 c4 10             	add    esp,0x10
c0019c30:	39 c7                	cmp    edi,eax
c0019c32:	7d 02                	jge    c0019c36 <SoundCard::getSamples16(int, short*)+0x4c>
c0019c34:	89 c7                	mov    edi,eax
c0019c36:	43                   	inc    ebx
c0019c37:	83 fb 20             	cmp    ebx,0x20
c0019c3a:	75 d0                	jne    c0019c0c <SoundCard::getSamples16(int, short*)+0x22>
c0019c3c:	83 c4 0c             	add    esp,0xc
c0019c3f:	89 f8                	mov    eax,edi
c0019c41:	5b                   	pop    ebx
c0019c42:	5e                   	pop    esi
c0019c43:	5f                   	pop    edi
c0019c44:	5d                   	pop    ebp
c0019c45:	c3                   	ret    

c0019c46 <SoundCard::getSamples32(int, int*)>:
c0019c46:	55                   	push   ebp
c0019c47:	57                   	push   edi
c0019c48:	31 ff                	xor    edi,edi
c0019c4a:	56                   	push   esi
c0019c4b:	31 f6                	xor    esi,esi
c0019c4d:	53                   	push   ebx
c0019c4e:	83 ec 10             	sub    esp,0x10
c0019c51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c55:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019c59:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019c5d:	c1 e0 02             	shl    eax,0x2
c0019c60:	50                   	push   eax
c0019c61:	6a 00                	push   0x0
c0019c63:	55                   	push   ebp
c0019c64:	e8 87 68 fe ff       	call   c00004f0 <memset>
c0019c69:	83 c4 10             	add    esp,0x10
c0019c6c:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019c73:	85 c0                	test   eax,eax
c0019c75:	74 1b                	je     c0019c92 <SoundCard::getSamples32(int, int*)+0x4c>
c0019c77:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019c7b:	75 15                	jne    c0019c92 <SoundCard::getSamples32(int, int*)+0x4c>
c0019c7d:	53                   	push   ebx
c0019c7e:	55                   	push   ebp
c0019c7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c83:	50                   	push   eax
c0019c84:	e8 63 03 00 00       	call   c0019fec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019c89:	83 c4 10             	add    esp,0x10
c0019c8c:	39 c6                	cmp    esi,eax
c0019c8e:	7d 02                	jge    c0019c92 <SoundCard::getSamples32(int, int*)+0x4c>
c0019c90:	89 c6                	mov    esi,eax
c0019c92:	47                   	inc    edi
c0019c93:	83 ff 20             	cmp    edi,0x20
c0019c96:	75 d4                	jne    c0019c6c <SoundCard::getSamples32(int, int*)+0x26>
c0019c98:	85 f6                	test   esi,esi
c0019c9a:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019ca1:	75 0f                	jne    c0019cb2 <SoundCard::getSamples32(int, int*)+0x6c>
c0019ca3:	85 c0                	test   eax,eax
c0019ca5:	74 1b                	je     c0019cc2 <SoundCard::getSamples32(int, int*)+0x7c>
c0019ca7:	83 ec 0c             	sub    esp,0xc
c0019caa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cac:	53                   	push   ebx
c0019cad:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019cb0:	eb 0d                	jmp    c0019cbf <SoundCard::getSamples32(int, int*)+0x79>
c0019cb2:	85 c0                	test   eax,eax
c0019cb4:	75 0c                	jne    c0019cc2 <SoundCard::getSamples32(int, int*)+0x7c>
c0019cb6:	83 ec 0c             	sub    esp,0xc
c0019cb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cbb:	53                   	push   ebx
c0019cbc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019cbf:	83 c4 10             	add    esp,0x10
c0019cc2:	83 c4 0c             	add    esp,0xc
c0019cc5:	89 f0                	mov    eax,esi
c0019cc7:	5b                   	pop    ebx
c0019cc8:	5e                   	pop    esi
c0019cc9:	5f                   	pop    edi
c0019cca:	5d                   	pop    ebp
c0019ccb:	c3                   	ret    

c0019ccc <SoundCard::addChannel(SoundPort*)>:
c0019ccc:	83 ec 0c             	sub    esp,0xc
c0019ccf:	31 c0                	xor    eax,eax
c0019cd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019cd5:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019cdd:	74 1b                	je     c0019cfa <SoundCard::addChannel(SoundPort*)+0x2e>
c0019cdf:	40                   	inc    eax
c0019ce0:	83 f8 20             	cmp    eax,0x20
c0019ce3:	75 f0                	jne    c0019cd5 <SoundCard::addChannel(SoundPort*)+0x9>
c0019ce5:	83 ec 0c             	sub    esp,0xc
c0019ce8:	68 6d 19 02 c0       	push   0xc002196d
c0019ced:	e8 2d 6c ff ff       	call   c001091f <KePanic(char const*)>
c0019cf2:	83 c4 10             	add    esp,0x10
c0019cf5:	83 c8 ff             	or     eax,0xffffffff
c0019cf8:	eb 0b                	jmp    c0019d05 <SoundCard::addChannel(SoundPort*)+0x39>
c0019cfa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019cfe:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019d05:	83 c4 0c             	add    esp,0xc
c0019d08:	c3                   	ret    
c0019d09:	90                   	nop

c0019d0a <SoundCard::removeChannel(int)>:
c0019d0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d12:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019d1d:	c3                   	ret    
c0019d1e:	66 90                	xchg   ax,ax

c0019d20 <SoundPort::SoundPort(int, int, int, int)>:
c0019d20:	83 ec 0c             	sub    esp,0xc
c0019d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d27:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d32:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d3e:	89 10                	mov    DWORD PTR [eax],edx
c0019d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019d56:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019d5b:	75 13                	jne    c0019d70 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d61:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d63:	05 a0 0f 00 00       	add    eax,0xfa0
c0019d68:	01 c0                	add    eax,eax
c0019d6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019d6e:	66 90                	xchg   ax,ax
c0019d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019d78:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d7f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d8a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d8d:	c1 e0 02             	shl    eax,0x2
c0019d90:	83 ec 0c             	sub    esp,0xc
c0019d93:	50                   	push   eax
c0019d94:	e8 15 dd fe ff       	call   c0007aae <malloc>
c0019d99:	83 c4 10             	add    esp,0x10
c0019d9c:	89 c2                	mov    edx,eax
c0019d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019da2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019da5:	90                   	nop
c0019da6:	83 c4 0c             	add    esp,0xc
c0019da9:	c3                   	ret    
c0019daa:	66 90                	xchg   ax,ax

c0019dac <SoundPort::~SoundPort()>:
c0019dac:	83 ec 0c             	sub    esp,0xc
c0019daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019db6:	85 c0                	test   eax,eax
c0019db8:	74 1e                	je     c0019dd8 <SoundPort::~SoundPort()+0x2c>
c0019dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dbe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019dc1:	83 ec 0c             	sub    esp,0xc
c0019dc4:	50                   	push   eax
c0019dc5:	e8 f4 dc fe ff       	call   c0007abe <free>
c0019dca:	83 c4 10             	add    esp,0x10
c0019dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dd1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019dd8:	90                   	nop
c0019dd9:	83 c4 0c             	add    esp,0xc
c0019ddc:	c3                   	ret    
c0019ddd:	90                   	nop
c0019dde:	66 90                	xchg   ax,ax

c0019de0 <SoundPort::unpause()>:
c0019de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019de8:	c3                   	ret    
c0019de9:	90                   	nop
c0019dea:	66 90                	xchg   ax,ax

c0019dec <SoundPort::pause()>:
c0019dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019df0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019df4:	c3                   	ret    
c0019df5:	90                   	nop
c0019df6:	66 90                	xchg   ax,ax

c0019df8 <SoundPort::getBufferUsed()>:
c0019df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dfc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019dff:	c3                   	ret    

c0019e00 <SoundPort::getBufferSize()>:
c0019e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e04:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019e07:	c3                   	ret    

c0019e08 <SoundPort::buffer16(short*, int)>:
c0019e08:	55                   	push   ebp
c0019e09:	57                   	push   edi
c0019e0a:	56                   	push   esi
c0019e0b:	53                   	push   ebx
c0019e0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019e10:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019e14:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019e17:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019e1a:	74 68                	je     c0019e84 <SoundPort::buffer16(short*, int)+0x7c>
c0019e1c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e20:	85 c9                	test   ecx,ecx
c0019e22:	7e 60                	jle    c0019e84 <SoundPort::buffer16(short*, int)+0x7c>
c0019e24:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019e28:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019e2b:	c1 e1 0f             	shl    ecx,0xf
c0019e2e:	8d 70 01             	lea    esi,[eax+0x1]
c0019e31:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e34:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019e37:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e3a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e3d:	74 4d                	je     c0019e8c <SoundPort::buffer16(short*, int)+0x84>
c0019e3f:	31 f6                	xor    esi,esi
c0019e41:	eb 21                	jmp    c0019e64 <SoundPort::buffer16(short*, int)+0x5c>
c0019e43:	90                   	nop
c0019e44:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019e49:	8d 79 01             	lea    edi,[ecx+0x1]
c0019e4c:	c1 e3 0f             	shl    ebx,0xf
c0019e4f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019e52:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019e55:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019e58:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e5b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e5e:	74 1c                	je     c0019e7c <SoundPort::buffer16(short*, int)+0x74>
c0019e60:	89 c6                	mov    esi,eax
c0019e62:	66 90                	xchg   ax,ax
c0019e64:	8d 46 01             	lea    eax,[esi+0x1]
c0019e67:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019e6b:	75 d7                	jne    c0019e44 <SoundPort::buffer16(short*, int)+0x3c>
c0019e6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e71:	8d 76 00             	lea    esi,[esi+0x0]
c0019e74:	5b                   	pop    ebx
c0019e75:	5e                   	pop    esi
c0019e76:	5f                   	pop    edi
c0019e77:	5d                   	pop    ebp
c0019e78:	c3                   	ret    
c0019e79:	8d 76 00             	lea    esi,[esi+0x0]
c0019e7c:	5b                   	pop    ebx
c0019e7d:	8d 46 02             	lea    eax,[esi+0x2]
c0019e80:	5e                   	pop    esi
c0019e81:	5f                   	pop    edi
c0019e82:	5d                   	pop    ebp
c0019e83:	c3                   	ret    
c0019e84:	5b                   	pop    ebx
c0019e85:	31 c0                	xor    eax,eax
c0019e87:	5e                   	pop    esi
c0019e88:	5f                   	pop    edi
c0019e89:	5d                   	pop    ebp
c0019e8a:	c3                   	ret    
c0019e8b:	90                   	nop
c0019e8c:	b8 01 00 00 00       	mov    eax,0x1
c0019e91:	eb e1                	jmp    c0019e74 <SoundPort::buffer16(short*, int)+0x6c>
c0019e93:	90                   	nop

c0019e94 <SoundPort::buffer32(int*, int)>:
c0019e94:	55                   	push   ebp
c0019e95:	57                   	push   edi
c0019e96:	56                   	push   esi
c0019e97:	53                   	push   ebx
c0019e98:	83 ec 04             	sub    esp,0x4
c0019e9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ea3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019ea6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019eaa:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ead:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019eb0:	74 5a                	je     c0019f0c <SoundPort::buffer32(int*, int)+0x78>
c0019eb2:	85 c0                	test   eax,eax
c0019eb4:	7e 56                	jle    c0019f0c <SoundPort::buffer32(int*, int)+0x78>
c0019eb6:	8d 71 01             	lea    esi,[ecx+0x1]
c0019eb9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019ebc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019ebf:	8b 37                	mov    esi,DWORD PTR [edi]
c0019ec1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019ec4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019ec7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019eca:	74 4c                	je     c0019f18 <SoundPort::buffer32(int*, int)+0x84>
c0019ecc:	31 f6                	xor    esi,esi
c0019ece:	eb 1c                	jmp    c0019eec <SoundPort::buffer32(int*, int)+0x58>
c0019ed0:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019ed3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019ed6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019ed9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019edc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019ee0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019ee3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019ee6:	74 18                	je     c0019f00 <SoundPort::buffer32(int*, int)+0x6c>
c0019ee8:	89 de                	mov    esi,ebx
c0019eea:	66 90                	xchg   ax,ax
c0019eec:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019eef:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019ef2:	75 dc                	jne    c0019ed0 <SoundPort::buffer32(int*, int)+0x3c>
c0019ef4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019ef7:	90                   	nop
c0019ef8:	83 c4 04             	add    esp,0x4
c0019efb:	5b                   	pop    ebx
c0019efc:	5e                   	pop    esi
c0019efd:	5f                   	pop    edi
c0019efe:	5d                   	pop    ebp
c0019eff:	c3                   	ret    
c0019f00:	83 c4 04             	add    esp,0x4
c0019f03:	8d 46 02             	lea    eax,[esi+0x2]
c0019f06:	5b                   	pop    ebx
c0019f07:	5e                   	pop    esi
c0019f08:	5f                   	pop    edi
c0019f09:	5d                   	pop    ebp
c0019f0a:	c3                   	ret    
c0019f0b:	90                   	nop
c0019f0c:	83 c4 04             	add    esp,0x4
c0019f0f:	31 c0                	xor    eax,eax
c0019f11:	5b                   	pop    ebx
c0019f12:	5e                   	pop    esi
c0019f13:	5f                   	pop    edi
c0019f14:	5d                   	pop    ebp
c0019f15:	c3                   	ret    
c0019f16:	66 90                	xchg   ax,ax
c0019f18:	b8 01 00 00 00       	mov    eax,0x1
c0019f1d:	eb d9                	jmp    c0019ef8 <SoundPort::buffer32(int*, int)+0x64>
c0019f1f:	90                   	nop

c0019f20 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019f20:	57                   	push   edi
c0019f21:	56                   	push   esi
c0019f22:	53                   	push   ebx
c0019f23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019f2b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019f31:	39 03                	cmp    DWORD PTR [ebx],eax
c0019f33:	74 13                	je     c0019f48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019f35:	83 ec 0c             	sub    esp,0xc
c0019f38:	68 c0 19 02 c0       	push   0xc00219c0
c0019f3d:	e8 dd 69 ff ff       	call   c001091f <KePanic(char const*)>
c0019f42:	83 c4 10             	add    esp,0x10
c0019f45:	8d 76 00             	lea    esi,[esi+0x0]
c0019f48:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0019f4e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019f51:	74 11                	je     c0019f64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0019f53:	83 ec 0c             	sub    esp,0xc
c0019f56:	68 ff 19 02 c0       	push   0xc00219ff
c0019f5b:	e8 bf 69 ff ff       	call   c001091f <KePanic(char const*)>
c0019f60:	83 c4 10             	add    esp,0x10
c0019f63:	90                   	nop
c0019f64:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0019f6a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f6d:	74 11                	je     c0019f80 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019f6f:	83 ec 0c             	sub    esp,0xc
c0019f72:	68 ff 19 02 c0       	push   0xc00219ff
c0019f77:	e8 a3 69 ff ff       	call   c001091f <KePanic(char const*)>
c0019f7c:	83 c4 10             	add    esp,0x10
c0019f7f:	90                   	nop
c0019f80:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019f83:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019f87:	7e 07                	jle    c0019f90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019f89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f90:	85 f6                	test   esi,esi
c0019f92:	7e 2c                	jle    c0019fc0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0019f94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019f98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0019f9b:	31 c9                	xor    ecx,ecx
c0019f9d:	01 d7                	add    edi,edx
c0019f9f:	90                   	nop
c0019fa0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0019fa3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0019fa6:	85 c0                	test   eax,eax
c0019fa8:	79 06                	jns    c0019fb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019faa:	05 ff 7f 00 00       	add    eax,0x7fff
c0019faf:	90                   	nop
c0019fb0:	c1 f8 0f             	sar    eax,0xf
c0019fb3:	83 c1 04             	add    ecx,0x4
c0019fb6:	66 01 02             	add    WORD PTR [edx],ax
c0019fb9:	83 c2 02             	add    edx,0x2
c0019fbc:	39 d7                	cmp    edi,edx
c0019fbe:	75 e0                	jne    c0019fa0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019fc0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019fc3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019fc6:	83 ec 04             	sub    esp,0x4
c0019fc9:	29 f0                	sub    eax,esi
c0019fcb:	c1 e0 02             	shl    eax,0x2
c0019fce:	50                   	push   eax
c0019fcf:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019fd2:	50                   	push   eax
c0019fd3:	52                   	push   edx
c0019fd4:	e8 f7 63 fe ff       	call   c00003d0 <memmove>
c0019fd9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019fdc:	83 c4 10             	add    esp,0x10
c0019fdf:	29 f0                	sub    eax,esi
c0019fe1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019fe4:	89 f0                	mov    eax,esi
c0019fe6:	5b                   	pop    ebx
c0019fe7:	5e                   	pop    esi
c0019fe8:	5f                   	pop    edi
c0019fe9:	c3                   	ret    
c0019fea:	66 90                	xchg   ax,ax

c0019fec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019fec:	57                   	push   edi
c0019fed:	56                   	push   esi
c0019fee:	53                   	push   ebx
c0019fef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ff3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ff7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ffb:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001a001:	39 06                	cmp    DWORD PTR [esi],eax
c001a003:	74 13                	je     c001a018 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001a005:	83 ec 0c             	sub    esp,0xc
c001a008:	68 e0 19 02 c0       	push   0xc00219e0
c001a00d:	e8 0d 69 ff ff       	call   c001091f <KePanic(char const*)>
c001a012:	83 c4 10             	add    esp,0x10
c001a015:	8d 76 00             	lea    esi,[esi+0x0]
c001a018:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001a01e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001a021:	74 11                	je     c001a034 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001a023:	83 ec 0c             	sub    esp,0xc
c001a026:	68 1b 1a 02 c0       	push   0xc0021a1b
c001a02b:	e8 ef 68 ff ff       	call   c001091f <KePanic(char const*)>
c001a030:	83 c4 10             	add    esp,0x10
c001a033:	90                   	nop
c001a034:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001a03a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001a03d:	74 11                	je     c001a050 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001a03f:	83 ec 0c             	sub    esp,0xc
c001a042:	68 1b 1a 02 c0       	push   0xc0021a1b
c001a047:	e8 d3 68 ff ff       	call   c001091f <KePanic(char const*)>
c001a04c:	83 c4 10             	add    esp,0x10
c001a04f:	90                   	nop
c001a050:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a053:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001a057:	7e 07                	jle    c001a060 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001a059:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a05d:	8d 76 00             	lea    esi,[esi+0x0]
c001a060:	85 ff                	test   edi,edi
c001a062:	7e 1c                	jle    c001a080 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001a064:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a06b:	31 c0                	xor    eax,eax
c001a06d:	8d 76 00             	lea    esi,[esi+0x0]
c001a070:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a073:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a076:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001a079:	83 c0 04             	add    eax,0x4
c001a07c:	39 c1                	cmp    ecx,eax
c001a07e:	75 f0                	jne    c001a070 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001a080:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a083:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a086:	83 ec 04             	sub    esp,0x4
c001a089:	29 f8                	sub    eax,edi
c001a08b:	c1 e0 02             	shl    eax,0x2
c001a08e:	50                   	push   eax
c001a08f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a092:	50                   	push   eax
c001a093:	52                   	push   edx
c001a094:	e8 37 63 fe ff       	call   c00003d0 <memmove>
c001a099:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a09c:	83 c4 10             	add    esp,0x10
c001a09f:	29 f8                	sub    eax,edi
c001a0a1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001a0a4:	89 f8                	mov    eax,edi
c001a0a6:	5b                   	pop    ebx
c001a0a7:	5e                   	pop    esi
c001a0a8:	5f                   	pop    edi
c001a0a9:	c3                   	ret    

c001a0aa <PCI::open(int, int, void*)>:
c001a0aa:	83 ec 18             	sub    esp,0x18
c001a0ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a0b5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a0bb:	8b 10                	mov    edx,DWORD PTR [eax]
c001a0bd:	50                   	push   eax
c001a0be:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a0c1:	31 c0                	xor    eax,eax
c001a0c3:	83 c4 1c             	add    esp,0x1c
c001a0c6:	c3                   	ret    
c001a0c7:	90                   	nop

c001a0c8 <PCI::close(int, int, void*)>:
c001a0c8:	31 c0                	xor    eax,eax
c001a0ca:	c3                   	ret    
c001a0cb:	90                   	nop

c001a0cc <PCI::PCI()>:
c001a0cc:	83 ec 0c             	sub    esp,0xc
c001a0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0d3:	83 ec 08             	sub    esp,0x8
c001a0d6:	68 37 1a 02 c0       	push   0xc0021a37
c001a0db:	50                   	push   eax
c001a0dc:	e8 a7 16 ff ff       	call   c000b788 <Bus::Bus(char const*)>
c001a0e1:	83 c4 10             	add    esp,0x10
c001a0e4:	ba e0 1a 02 c0       	mov    edx,0xc0021ae0
c001a0e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ed:	89 10                	mov    DWORD PTR [eax],edx
c001a0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0f3:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a0fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a101:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a10a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a110:	0f b6 d0             	movzx  edx,al
c001a113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a117:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a122:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a128:	0f b6 d0             	movzx  edx,al
c001a12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a12f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a138:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a13e:	8d 50 01             	lea    edx,[eax+0x1]
c001a141:	88 d1                	mov    cl,dl
c001a143:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a147:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a14d:	0f b6 d0             	movzx  edx,al
c001a150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a154:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a158:	83 c9 c0             	or     ecx,0xffffffc0
c001a15b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a15f:	90                   	nop
c001a160:	83 c4 0c             	add    esp,0xc
c001a163:	c3                   	ret    

c001a164 <PCI::readBAR8(unsigned int, int)>:
c001a164:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a168:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a16c:	f6 c2 01             	test   dl,0x1
c001a16f:	74 07                	je     c001a178 <PCI::readBAR8(unsigned int, int)+0x14>
c001a171:	83 e2 fc             	and    edx,0xfffffffc
c001a174:	01 c2                	add    edx,eax
c001a176:	ec                   	in     al,dx
c001a177:	c3                   	ret    
c001a178:	83 e2 f0             	and    edx,0xfffffff0
c001a17b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a17e:	c3                   	ret    
c001a17f:	90                   	nop

c001a180 <PCI::readBAR16(unsigned int, int)>:
c001a180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a188:	f6 c2 01             	test   dl,0x1
c001a18b:	74 08                	je     c001a195 <PCI::readBAR16(unsigned int, int)+0x15>
c001a18d:	83 e2 fc             	and    edx,0xfffffffc
c001a190:	01 c2                	add    edx,eax
c001a192:	66 ed                	in     ax,dx
c001a194:	c3                   	ret    
c001a195:	83 e2 f0             	and    edx,0xfffffff0
c001a198:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a19c:	c3                   	ret    
c001a19d:	90                   	nop

c001a19e <PCI::readBAR32(unsigned int, int)>:
c001a19e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1a6:	f6 c2 01             	test   dl,0x1
c001a1a9:	74 07                	je     c001a1b2 <PCI::readBAR32(unsigned int, int)+0x14>
c001a1ab:	83 e2 fc             	and    edx,0xfffffffc
c001a1ae:	01 c2                	add    edx,eax
c001a1b0:	ed                   	in     eax,dx
c001a1b1:	c3                   	ret    
c001a1b2:	83 e2 f0             	and    edx,0xfffffff0
c001a1b5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a1b8:	c3                   	ret    
c001a1b9:	90                   	nop

c001a1ba <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a1ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1c6:	f6 c2 01             	test   dl,0x1
c001a1c9:	74 07                	je     c001a1d2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a1cb:	83 e2 fc             	and    edx,0xfffffffc
c001a1ce:	01 ca                	add    edx,ecx
c001a1d0:	ee                   	out    dx,al
c001a1d1:	c3                   	ret    
c001a1d2:	83 e2 f0             	and    edx,0xfffffff0
c001a1d5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a1d8:	c3                   	ret    
c001a1d9:	90                   	nop

c001a1da <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a1da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1e6:	f6 c2 01             	test   dl,0x1
c001a1e9:	74 08                	je     c001a1f3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a1eb:	83 e2 fc             	and    edx,0xfffffffc
c001a1ee:	01 ca                	add    edx,ecx
c001a1f0:	66 ef                	out    dx,ax
c001a1f2:	c3                   	ret    
c001a1f3:	83 e2 f0             	and    edx,0xfffffff0
c001a1f6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a1fa:	c3                   	ret    
c001a1fb:	90                   	nop

c001a1fc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a1fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a200:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a204:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a208:	f6 c2 01             	test   dl,0x1
c001a20b:	74 07                	je     c001a214 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a20d:	83 e2 fc             	and    edx,0xfffffffc
c001a210:	01 ca                	add    edx,ecx
c001a212:	ef                   	out    dx,eax
c001a213:	c3                   	ret    
c001a214:	83 e2 f0             	and    edx,0xfffffff0
c001a217:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a21a:	c3                   	ret    
c001a21b:	90                   	nop

c001a21c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a21c:	55                   	push   ebp
c001a21d:	57                   	push   edi
c001a21e:	56                   	push   esi
c001a21f:	53                   	push   ebx
c001a220:	83 ec 0c             	sub    esp,0xc
c001a223:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a228:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a22c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a230:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a234:	83 fe 07             	cmp    esi,0x7
c001a237:	76 10                	jbe    c001a249 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a239:	83 ec 0c             	sub    esp,0xc
c001a23c:	68 3f 1a 02 c0       	push   0xc0021a3f
c001a241:	e8 d9 66 ff ff       	call   c001091f <KePanic(char const*)>
c001a246:	83 c4 10             	add    esp,0x10
c001a249:	0f b6 db             	movzx  ebx,bl
c001a24c:	83 fb 0f             	cmp    ebx,0xf
c001a24f:	76 10                	jbe    c001a261 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a251:	83 ec 0c             	sub    esp,0xc
c001a254:	68 6f 1a 02 c0       	push   0xc0021a6f
c001a259:	e8 c1 66 ff ff       	call   c001091f <KePanic(char const*)>
c001a25e:	83 c4 10             	add    esp,0x10
c001a261:	8d 04 36             	lea    eax,[esi+esi*1]
c001a264:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a269:	83 c8 f0             	or     eax,0xfffffff0
c001a26c:	ee                   	out    dx,al
c001a26d:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a272:	89 e8                	mov    eax,ebp
c001a274:	ee                   	out    dx,al
c001a275:	83 c4 0c             	add    esp,0xc
c001a278:	89 d8                	mov    eax,ebx
c001a27a:	89 f9                	mov    ecx,edi
c001a27c:	c1 e0 08             	shl    eax,0x8
c001a27f:	0f b6 d9             	movzx  ebx,cl
c001a282:	83 e3 fc             	and    ebx,0xfffffffc
c001a285:	09 d8                	or     eax,ebx
c001a287:	5b                   	pop    ebx
c001a288:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a28d:	5e                   	pop    esi
c001a28e:	5f                   	pop    edi
c001a28f:	5d                   	pop    ebp
c001a290:	c3                   	ret    
c001a291:	90                   	nop

c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a292:	57                   	push   edi
c001a293:	56                   	push   esi
c001a294:	53                   	push   ebx
c001a295:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a299:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a29d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a2a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a2a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a2ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a2af:	83 ff 01             	cmp    edi,0x1
c001a2b2:	75 3f                	jne    c001a2f3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a2b4:	89 de                	mov    esi,ebx
c001a2b6:	0f b6 c0             	movzx  eax,al
c001a2b9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a2bf:	c1 e0 10             	shl    eax,0x10
c001a2c2:	0f b6 c9             	movzx  ecx,cl
c001a2c5:	09 f0                	or     eax,esi
c001a2c7:	c1 e1 08             	shl    ecx,0x8
c001a2ca:	0f b6 d2             	movzx  edx,dl
c001a2cd:	09 c8                	or     eax,ecx
c001a2cf:	c1 e2 0b             	shl    edx,0xb
c001a2d2:	09 d0                	or     eax,edx
c001a2d4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a2d9:	0d 00 00 00 80       	or     eax,0x80000000
c001a2de:	ef                   	out    dx,eax
c001a2df:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a2e4:	ed                   	in     eax,dx
c001a2e5:	83 e3 02             	and    ebx,0x2
c001a2e8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a2ef:	d3 e8                	shr    eax,cl
c001a2f1:	eb 44                	jmp    c001a337 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a2f3:	83 ff 02             	cmp    edi,0x2
c001a2f6:	75 2d                	jne    c001a325 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a2f8:	83 ec 0c             	sub    esp,0xc
c001a2fb:	0f b6 c9             	movzx  ecx,cl
c001a2fe:	0f b6 d2             	movzx  edx,dl
c001a301:	0f b6 fb             	movzx  edi,bl
c001a304:	0f b6 c0             	movzx  eax,al
c001a307:	57                   	push   edi
c001a308:	51                   	push   ecx
c001a309:	52                   	push   edx
c001a30a:	50                   	push   eax
c001a30b:	56                   	push   esi
c001a30c:	e8 0b ff ff ff       	call   c001a21c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a311:	89 c2                	mov    edx,eax
c001a313:	ed                   	in     eax,dx
c001a314:	83 e3 02             	and    ebx,0x2
c001a317:	83 c4 20             	add    esp,0x20
c001a31a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a321:	d3 e8                	shr    eax,cl
c001a323:	eb 12                	jmp    c001a337 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a325:	83 ec 0c             	sub    esp,0xc
c001a328:	68 9f 1a 02 c0       	push   0xc0021a9f
c001a32d:	e8 ed 65 ff ff       	call   c001091f <KePanic(char const*)>
c001a332:	83 c4 10             	add    esp,0x10
c001a335:	31 c0                	xor    eax,eax
c001a337:	5b                   	pop    ebx
c001a338:	5e                   	pop    esi
c001a339:	5f                   	pop    edi
c001a33a:	c3                   	ret    
c001a33b:	90                   	nop

c001a33c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a33c:	83 ec 18             	sub    esp,0x18
c001a33f:	6a 00                	push   0x0
c001a341:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a346:	50                   	push   eax
c001a347:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a34c:	50                   	push   eax
c001a34d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a352:	50                   	push   eax
c001a353:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a357:	e8 36 ff ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a35c:	83 c4 2c             	add    esp,0x2c
c001a35f:	c3                   	ret    

c001a360 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a360:	83 ec 18             	sub    esp,0x18
c001a363:	6a 0e                	push   0xe
c001a365:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a36a:	50                   	push   eax
c001a36b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a370:	50                   	push   eax
c001a371:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a376:	50                   	push   eax
c001a377:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a37b:	e8 12 ff ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a380:	83 c4 2c             	add    esp,0x2c
c001a383:	0f b6 c0             	movzx  eax,al
c001a386:	c3                   	ret    
c001a387:	90                   	nop

c001a388 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a388:	55                   	push   ebp
c001a389:	57                   	push   edi
c001a38a:	56                   	push   esi
c001a38b:	53                   	push   ebx
c001a38c:	83 ec 18             	sub    esp,0x18
c001a38f:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a394:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a399:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a39e:	6a 0a                	push   0xa
c001a3a0:	56                   	push   esi
c001a3a1:	55                   	push   ebp
c001a3a2:	57                   	push   edi
c001a3a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3a7:	e8 e6 fe ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3ac:	83 c4 14             	add    esp,0x14
c001a3af:	89 c3                	mov    ebx,eax
c001a3b1:	6a 0a                	push   0xa
c001a3b3:	0f b6 db             	movzx  ebx,bl
c001a3b6:	56                   	push   esi
c001a3b7:	55                   	push   ebp
c001a3b8:	57                   	push   edi
c001a3b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3bd:	e8 d0 fe ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3c2:	83 c4 2c             	add    esp,0x2c
c001a3c5:	25 00 ff 00 00       	and    eax,0xff00
c001a3ca:	09 d8                	or     eax,ebx
c001a3cc:	5b                   	pop    ebx
c001a3cd:	5e                   	pop    esi
c001a3ce:	5f                   	pop    edi
c001a3cf:	5d                   	pop    ebp
c001a3d0:	c3                   	ret    
c001a3d1:	90                   	nop

c001a3d2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a3d2:	83 ec 18             	sub    esp,0x18
c001a3d5:	6a 08                	push   0x8
c001a3d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3dc:	50                   	push   eax
c001a3dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3e2:	50                   	push   eax
c001a3e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3e8:	50                   	push   eax
c001a3e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3ed:	e8 a0 fe ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3f2:	83 c4 2c             	add    esp,0x2c
c001a3f5:	0f b6 c4             	movzx  eax,ah
c001a3f8:	c3                   	ret    
c001a3f9:	90                   	nop

c001a3fa <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a3fa:	83 ec 18             	sub    esp,0x18
c001a3fd:	6a 08                	push   0x8
c001a3ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a404:	50                   	push   eax
c001a405:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a40a:	50                   	push   eax
c001a40b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a410:	50                   	push   eax
c001a411:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a415:	e8 78 fe ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a41a:	83 c4 2c             	add    esp,0x2c
c001a41d:	c3                   	ret    

c001a41e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a41e:	83 ec 18             	sub    esp,0x18
c001a421:	6a 3c                	push   0x3c
c001a423:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a428:	50                   	push   eax
c001a429:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a42e:	50                   	push   eax
c001a42f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a434:	50                   	push   eax
c001a435:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a439:	e8 54 fe ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a43e:	83 c4 2c             	add    esp,0x2c
c001a441:	c3                   	ret    

c001a442 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a442:	83 ec 18             	sub    esp,0x18
c001a445:	6a 18                	push   0x18
c001a447:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a44c:	50                   	push   eax
c001a44d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a452:	50                   	push   eax
c001a453:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a458:	50                   	push   eax
c001a459:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a45d:	e8 30 fe ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a462:	83 c4 2c             	add    esp,0x2c
c001a465:	0f b6 c4             	movzx  eax,ah
c001a468:	c3                   	ret    
c001a469:	90                   	nop

c001a46a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a46a:	55                   	push   ebp
c001a46b:	57                   	push   edi
c001a46c:	56                   	push   esi
c001a46d:	53                   	push   ebx
c001a46e:	83 ec 28             	sub    esp,0x28
c001a471:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a475:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a47a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a47f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a484:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a48b:	8d 43 12             	lea    eax,[ebx+0x12]
c001a48e:	83 c3 10             	add    ebx,0x10
c001a491:	0f b6 c0             	movzx  eax,al
c001a494:	0f b6 db             	movzx  ebx,bl
c001a497:	50                   	push   eax
c001a498:	51                   	push   ecx
c001a499:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a49d:	57                   	push   edi
c001a49e:	55                   	push   ebp
c001a49f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a4a3:	e8 ea fd ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4a8:	83 c4 14             	add    esp,0x14
c001a4ab:	89 c6                	mov    esi,eax
c001a4ad:	53                   	push   ebx
c001a4ae:	c1 e6 10             	shl    esi,0x10
c001a4b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a4b5:	51                   	push   ecx
c001a4b6:	57                   	push   edi
c001a4b7:	55                   	push   ebp
c001a4b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a4bc:	e8 d1 fd ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4c1:	83 c4 3c             	add    esp,0x3c
c001a4c4:	0f b7 c0             	movzx  eax,ax
c001a4c7:	5b                   	pop    ebx
c001a4c8:	09 f0                	or     eax,esi
c001a4ca:	5e                   	pop    esi
c001a4cb:	5f                   	pop    edi
c001a4cc:	5d                   	pop    ebp
c001a4cd:	c3                   	ret    

c001a4ce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a4ce:	55                   	push   ebp
c001a4cf:	57                   	push   edi
c001a4d0:	56                   	push   esi
c001a4d1:	53                   	push   ebx
c001a4d2:	83 ec 0c             	sub    esp,0xc
c001a4d5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a4d9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a4dd:	89 f5                	mov    ebp,esi
c001a4df:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a4e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a4e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a4ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a4f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a4f5:	83 f9 01             	cmp    ecx,0x1
c001a4f8:	75 5d                	jne    c001a557 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a4fa:	0f b6 c8             	movzx  ecx,al
c001a4fd:	0f b6 d2             	movzx  edx,dl
c001a500:	c1 e1 10             	shl    ecx,0x10
c001a503:	c1 e2 0b             	shl    edx,0xb
c001a506:	89 f0                	mov    eax,esi
c001a508:	25 fc 00 00 00       	and    eax,0xfc
c001a50d:	09 c1                	or     ecx,eax
c001a50f:	89 e8                	mov    eax,ebp
c001a511:	0f b6 c0             	movzx  eax,al
c001a514:	c1 e0 08             	shl    eax,0x8
c001a517:	09 c1                	or     ecx,eax
c001a519:	09 d1                	or     ecx,edx
c001a51b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a520:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a526:	89 c8                	mov    eax,ecx
c001a528:	ef                   	out    dx,eax
c001a529:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a52e:	ed                   	in     eax,dx
c001a52f:	0f b7 db             	movzx  ebx,bx
c001a532:	83 e6 02             	and    esi,0x2
c001a535:	74 0a                	je     c001a541 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a537:	0f b7 d0             	movzx  edx,ax
c001a53a:	c1 e3 10             	shl    ebx,0x10
c001a53d:	09 d3                	or     ebx,edx
c001a53f:	eb 05                	jmp    c001a546 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a541:	66 31 c0             	xor    ax,ax
c001a544:	09 c3                	or     ebx,eax
c001a546:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a54b:	89 c8                	mov    eax,ecx
c001a54d:	ef                   	out    dx,eax
c001a54e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a553:	89 d8                	mov    eax,ebx
c001a555:	eb 41                	jmp    c001a598 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a557:	83 f9 02             	cmp    ecx,0x2
c001a55a:	75 45                	jne    c001a5a1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a55c:	83 ec 0c             	sub    esp,0xc
c001a55f:	0f b6 d2             	movzx  edx,dl
c001a562:	89 f1                	mov    ecx,esi
c001a564:	0f b6 c0             	movzx  eax,al
c001a567:	0f b6 f1             	movzx  esi,cl
c001a56a:	89 e9                	mov    ecx,ebp
c001a56c:	56                   	push   esi
c001a56d:	0f b6 c9             	movzx  ecx,cl
c001a570:	51                   	push   ecx
c001a571:	52                   	push   edx
c001a572:	50                   	push   eax
c001a573:	57                   	push   edi
c001a574:	e8 a3 fc ff ff       	call   c001a21c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a579:	89 c2                	mov    edx,eax
c001a57b:	ed                   	in     eax,dx
c001a57c:	83 c4 20             	add    esp,0x20
c001a57f:	0f b7 db             	movzx  ebx,bx
c001a582:	f6 c2 02             	test   dl,0x2
c001a585:	74 0c                	je     c001a593 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a587:	0f b7 c8             	movzx  ecx,ax
c001a58a:	89 d8                	mov    eax,ebx
c001a58c:	c1 e0 10             	shl    eax,0x10
c001a58f:	09 c8                	or     eax,ecx
c001a591:	eb 05                	jmp    c001a598 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a593:	66 31 c0             	xor    ax,ax
c001a596:	09 d8                	or     eax,ebx
c001a598:	ef                   	out    dx,eax
c001a599:	83 c4 0c             	add    esp,0xc
c001a59c:	5b                   	pop    ebx
c001a59d:	5e                   	pop    esi
c001a59e:	5f                   	pop    edi
c001a59f:	5d                   	pop    ebp
c001a5a0:	c3                   	ret    
c001a5a1:	c7 44 24 20 9f 1a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021a9f
c001a5a9:	83 c4 0c             	add    esp,0xc
c001a5ac:	5b                   	pop    ebx
c001a5ad:	5e                   	pop    esi
c001a5ae:	5f                   	pop    edi
c001a5af:	5d                   	pop    ebp
c001a5b0:	e9 6a 63 ff ff       	jmp    c001091f <KePanic(char const*)>
c001a5b5:	90                   	nop

c001a5b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a5b6:	55                   	push   ebp
c001a5b7:	57                   	push   edi
c001a5b8:	56                   	push   esi
c001a5b9:	53                   	push   ebx
c001a5ba:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a5c0:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a5c7:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a5ce:	0f 85 bd 00 00 00    	jne    c001a691 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a5d4:	83 ec 0c             	sub    esp,0xc
c001a5d7:	68 14 01 00 00       	push   0x114
c001a5dc:	e8 cd d4 fe ff       	call   c0007aae <malloc>
c001a5e1:	83 c4 0c             	add    esp,0xc
c001a5e4:	89 c3                	mov    ebx,eax
c001a5e6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a5ec:	68 a5 1a 02 c0       	push   0xc0021aa5
c001a5f1:	50                   	push   eax
c001a5f2:	e8 7d 09 ff ff       	call   c000af74 <File::File(char const*, Process*)>
c001a5f7:	83 c4 10             	add    esp,0x10
c001a5fa:	85 db                	test   ebx,ebx
c001a5fc:	0f 84 67 02 00 00    	je     c001a869 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a602:	56                   	push   esi
c001a603:	56                   	push   esi
c001a604:	6a 01                	push   0x1
c001a606:	53                   	push   ebx
c001a607:	e8 24 0a ff ff       	call   c000b030 <File::open(FileOpenMode)>
c001a60c:	83 c4 10             	add    esp,0x10
c001a60f:	85 c0                	test   eax,eax
c001a611:	0f 85 52 02 00 00    	jne    c001a869 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a617:	52                   	push   edx
c001a618:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a61c:	50                   	push   eax
c001a61d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a621:	50                   	push   eax
c001a622:	53                   	push   ebx
c001a623:	e8 b4 0c ff ff       	call   c000b2dc <File::stat(unsigned long long*, bool*)>
c001a628:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a62c:	40                   	inc    eax
c001a62d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a630:	e8 79 d4 fe ff       	call   c0007aae <malloc>
c001a635:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a639:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a63e:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a642:	59                   	pop    ecx
c001a643:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a645:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a649:	51                   	push   ecx
c001a64a:	50                   	push   eax
c001a64b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a64f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a653:	53                   	push   ebx
c001a654:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a657:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a65b:	83 c4 20             	add    esp,0x20
c001a65e:	89 c8                	mov    eax,ecx
c001a660:	99                   	cdq    
c001a661:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a665:	0f 85 fe 01 00 00    	jne    c001a869 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a66b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a66f:	0f 85 f4 01 00 00    	jne    c001a869 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a675:	83 ec 0c             	sub    esp,0xc
c001a678:	53                   	push   ebx
c001a679:	e8 10 0a ff ff       	call   c000b08e <File::close()>
c001a67e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a682:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a689:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a68e:	83 c4 10             	add    esp,0x10
c001a691:	a1 44 8b 02 c0       	mov    eax,ds:0xc0028b44
c001a696:	8b 1d 48 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b48
c001a69c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6a0:	31 f6                	xor    esi,esi
c001a6a2:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a6aa:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a6b1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a6b6:	31 c9                	xor    ecx,ecx
c001a6b8:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a6c0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a6c5:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a6cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6d1:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a6d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a6dd:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a6e1:	0f 8e 82 01 00 00    	jle    c001a869 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a6e7:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001a6ea:	d4 40                	aam    0x40
c001a6ec:	d5 39                	aad    0x39
c001a6ee:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a6f2:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001a6f6:	d4 40                	aam    0x40
c001a6f8:	d5 39                	aad    0x39
c001a6fa:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a6fe:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001a702:	d4 40                	aam    0x40
c001a704:	d5 39                	aad    0x39
c001a706:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a70a:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001a70e:	d4 40                	aam    0x40
c001a710:	d5 39                	aad    0x39
c001a712:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a716:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001a71a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a71e:	3c 56                	cmp    al,0x56
c001a720:	74 43                	je     c001a765 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001a722:	d4 40                	aam    0x40
c001a724:	d5 39                	aad    0x39
c001a726:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a729:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001a72d:	0f b6 c9             	movzx  ecx,cl
c001a730:	c1 e1 04             	shl    ecx,0x4
c001a733:	d4 40                	aam    0x40
c001a735:	d5 39                	aad    0x39
c001a737:	83 e8 30             	sub    eax,0x30
c001a73a:	0f b6 c0             	movzx  eax,al
c001a73d:	09 c1                	or     ecx,eax
c001a73f:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001a743:	c1 e1 04             	shl    ecx,0x4
c001a746:	d4 40                	aam    0x40
c001a748:	d5 39                	aad    0x39
c001a74a:	83 e8 30             	sub    eax,0x30
c001a74d:	0f b6 c0             	movzx  eax,al
c001a750:	09 c1                	or     ecx,eax
c001a752:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001a756:	c1 e1 04             	shl    ecx,0x4
c001a759:	d4 40                	aam    0x40
c001a75b:	d5 39                	aad    0x39
c001a75d:	83 e8 30             	sub    eax,0x30
c001a760:	0f b6 c0             	movzx  eax,al
c001a763:	09 c1                	or     ecx,eax
c001a765:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001a769:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a76d:	3c 58                	cmp    al,0x58
c001a76f:	74 47                	je     c001a7b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001a771:	d4 40                	aam    0x40
c001a773:	d5 39                	aad    0x39
c001a775:	8d 50 d0             	lea    edx,[eax-0x30]
c001a778:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001a77c:	0f b6 d2             	movzx  edx,dl
c001a77f:	c1 e2 04             	shl    edx,0x4
c001a782:	d4 40                	aam    0x40
c001a784:	d5 39                	aad    0x39
c001a786:	83 e8 30             	sub    eax,0x30
c001a789:	0f b6 c0             	movzx  eax,al
c001a78c:	09 c2                	or     edx,eax
c001a78e:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001a792:	c1 e2 04             	shl    edx,0x4
c001a795:	d4 40                	aam    0x40
c001a797:	d5 39                	aad    0x39
c001a799:	83 e8 30             	sub    eax,0x30
c001a79c:	0f b6 c0             	movzx  eax,al
c001a79f:	09 c2                	or     edx,eax
c001a7a1:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001a7a5:	c1 e2 04             	shl    edx,0x4
c001a7a8:	d4 40                	aam    0x40
c001a7aa:	d5 39                	aad    0x39
c001a7ac:	83 e8 30             	sub    eax,0x30
c001a7af:	0f b6 c0             	movzx  eax,al
c001a7b2:	09 c2                	or     edx,eax
c001a7b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a7b8:	83 c6 10             	add    esi,0x10
c001a7bb:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a7bf:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001a7c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a7c7:	83 fa 0a             	cmp    edx,0xa
c001a7ca:	74 0b                	je     c001a7d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001a7cc:	47                   	inc    edi
c001a7cd:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a7d1:	75 19                	jne    c001a7ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001a7d3:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001a7d7:	31 c0                	xor    eax,eax
c001a7d9:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001a7de:	0f 94 c0             	sete   al
c001a7e1:	01 c6                	add    esi,eax
c001a7e3:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a7e8:	75 0b                	jne    c001a7f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001a7ea:	eb 14                	jmp    c001a800 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001a7ec:	46                   	inc    esi
c001a7ed:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001a7f0:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a7f3:	eb ca                	jmp    c001a7bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001a7f5:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001a7fa:	0f 85 dd fe ff ff    	jne    c001a6dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a800:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001a805:	74 10                	je     c001a817 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001a807:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a80c:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a811:	0f 85 c6 fe ff ff    	jne    c001a6dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a817:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a81b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a81f:	83 e8 30             	sub    eax,0x30
c001a822:	83 ef 30             	sub    edi,0x30
c001a825:	c1 e0 04             	shl    eax,0x4
c001a828:	09 f8                	or     eax,edi
c001a82a:	0f b6 c0             	movzx  eax,al
c001a82d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a831:	0f 85 a6 fe ff ff    	jne    c001a6dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a83b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a83f:	83 e8 30             	sub    eax,0x30
c001a842:	83 ef 30             	sub    edi,0x30
c001a845:	c1 e0 04             	shl    eax,0x4
c001a848:	09 f8                	or     eax,edi
c001a84a:	0f b6 c0             	movzx  eax,al
c001a84d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a851:	0f 85 86 fe ff ff    	jne    c001a6dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a857:	50                   	push   eax
c001a858:	50                   	push   eax
c001a859:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a85d:	50                   	push   eax
c001a85e:	55                   	push   ebp
c001a85f:	e8 dc 5d fe ff       	call   c0000640 <strcpy>
c001a864:	83 c4 10             	add    esp,0x10
c001a867:	eb 06                	jmp    c001a86f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001a869:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a86d:	31 ed                	xor    ebp,ebp
c001a86f:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a875:	89 e8                	mov    eax,ebp
c001a877:	5b                   	pop    ebx
c001a878:	5e                   	pop    esi
c001a879:	5f                   	pop    edi
c001a87a:	5d                   	pop    ebp
c001a87b:	c3                   	ret    

c001a87c <PCI::checkBus(unsigned char)>:
c001a87c:	56                   	push   esi
c001a87d:	53                   	push   ebx
c001a87e:	31 db                	xor    ebx,ebx
c001a880:	51                   	push   ecx
c001a881:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a886:	52                   	push   edx
c001a887:	53                   	push   ebx
c001a888:	43                   	inc    ebx
c001a889:	56                   	push   esi
c001a88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a88e:	e8 03 03 00 00       	call   c001ab96 <PCI::checkDevice(unsigned char, unsigned char)>
c001a893:	83 c4 10             	add    esp,0x10
c001a896:	83 fb 20             	cmp    ebx,0x20
c001a899:	75 eb                	jne    c001a886 <PCI::checkBus(unsigned char)+0xa>
c001a89b:	58                   	pop    eax
c001a89c:	5b                   	pop    ebx
c001a89d:	5e                   	pop    esi
c001a89e:	c3                   	ret    
c001a89f:	90                   	nop

c001a8a0 <PCI::foundDevice(PCIDeviceInfo)>:
c001a8a0:	55                   	push   ebp
c001a8a1:	57                   	push   edi
c001a8a2:	56                   	push   esi
c001a8a3:	53                   	push   ebx
c001a8a4:	83 ec 1c             	sub    esp,0x1c
c001a8a7:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a8ac:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a8b0:	3d ff ff 00 00       	cmp    eax,0xffff
c001a8b5:	0f 84 57 01 00 00    	je     c001aa12 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a8bb:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a8c0:	66 3d 06 04          	cmp    ax,0x406
c001a8c4:	75 2c                	jne    c001a8f2 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a8c6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a8cb:	50                   	push   eax
c001a8cc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a8d1:	50                   	push   eax
c001a8d2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a8d7:	50                   	push   eax
c001a8d8:	53                   	push   ebx
c001a8d9:	e8 64 fb ff ff       	call   c001a442 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a8de:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a8e2:	0f b6 c0             	movzx  eax,al
c001a8e5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a8e9:	83 c4 2c             	add    esp,0x2c
c001a8ec:	5b                   	pop    ebx
c001a8ed:	5e                   	pop    esi
c001a8ee:	5f                   	pop    edi
c001a8ef:	5d                   	pop    ebp
c001a8f0:	eb 8a                	jmp    c001a87c <PCI::checkBus(unsigned char)>
c001a8f2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a8f6:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a8fc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001a900:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a904:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001a909:	85 d2                	test   edx,edx
c001a90b:	74 36                	je     c001a943 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001a90d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a910:	85 c9                	test   ecx,ecx
c001a912:	74 2b                	je     c001a93f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a914:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001a91a:	31 ee                	xor    esi,ebp
c001a91c:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001a922:	75 1b                	jne    c001a93f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a924:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001a928:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001a92e:	75 0f                	jne    c001a93f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a930:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a937:	39 f9                	cmp    ecx,edi
c001a939:	0f 84 d3 00 00 00    	je     c001aa12 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a93f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a941:	eb c6                	jmp    c001a909 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a943:	3d 01 06 00 00       	cmp    eax,0x601
c001a948:	75 19                	jne    c001a963 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001a94a:	83 ec 0c             	sub    esp,0xc
c001a94d:	68 64 01 00 00       	push   0x164
c001a952:	e8 57 d1 fe ff       	call   c0007aae <malloc>
c001a957:	89 c5                	mov    ebp,eax
c001a959:	89 04 24             	mov    DWORD PTR [esp],eax
c001a95c:	e8 a1 0e 00 00       	call   c001b802 <SATABus::SATABus()>
c001a961:	eb 1e                	jmp    c001a981 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001a963:	3d 01 01 00 00       	cmp    eax,0x101
c001a968:	75 62                	jne    c001a9cc <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001a96a:	83 ec 0c             	sub    esp,0xc
c001a96d:	68 70 02 00 00       	push   0x270
c001a972:	e8 37 d1 fe ff       	call   c0007aae <malloc>
c001a977:	89 c5                	mov    ebp,eax
c001a979:	89 04 24             	mov    DWORD PTR [esp],eax
c001a97c:	e8 e5 02 00 00       	call   c001ac66 <IDE::IDE()>
c001a981:	5f                   	pop    edi
c001a982:	58                   	pop    eax
c001a983:	55                   	push   ebp
c001a984:	53                   	push   ebx
c001a985:	e8 9c 14 ff ff       	call   c000be26 <Device::addChild(Device*)>
c001a98a:	83 ec 1c             	sub    esp,0x1c
c001a98d:	b9 09 00 00 00       	mov    ecx,0x9
c001a992:	fc                   	cld    
c001a993:	89 e7                	mov    edi,esp
c001a995:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a999:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a99b:	55                   	push   ebp
c001a99c:	e8 cb 13 ff ff       	call   c000bd6c <Device::preOpenPCI(PCIDeviceInfo)>
c001a9a1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9a4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a9a8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a9b0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a9b8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a9c0:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a9c3:	83 c4 4c             	add    esp,0x4c
c001a9c6:	5b                   	pop    ebx
c001a9c7:	5e                   	pop    esi
c001a9c8:	5f                   	pop    edi
c001a9c9:	5d                   	pop    ebp
c001a9ca:	ff e0                	jmp    eax
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	68 58 01 00 00       	push   0x158
c001a9d4:	e8 d5 d0 fe ff       	call   c0007aae <malloc>
c001a9d9:	89 c5                	mov    ebp,eax
c001a9db:	58                   	pop    eax
c001a9dc:	5a                   	pop    edx
c001a9dd:	68 be 1a 02 c0       	push   0xc0021abe
c001a9e2:	55                   	push   ebp
c001a9e3:	e8 dc 16 ff ff       	call   c000c0c4 <DriverlessDevice::DriverlessDevice(char const*)>
c001a9e8:	59                   	pop    ecx
c001a9e9:	5e                   	pop    esi
c001a9ea:	55                   	push   ebp
c001a9eb:	53                   	push   ebx
c001a9ec:	e8 35 14 ff ff       	call   c000be26 <Device::addChild(Device*)>
c001a9f1:	83 c4 10             	add    esp,0x10
c001a9f4:	b9 09 00 00 00       	mov    ecx,0x9
c001a9f9:	fc                   	cld    
c001a9fa:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a9fe:	89 fe                	mov    esi,edi
c001aa00:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aa02:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001aa06:	83 c4 1c             	add    esp,0x1c
c001aa09:	5b                   	pop    ebx
c001aa0a:	5e                   	pop    esi
c001aa0b:	5f                   	pop    edi
c001aa0c:	5d                   	pop    ebp
c001aa0d:	e9 5a 13 ff ff       	jmp    c000bd6c <Device::preOpenPCI(PCIDeviceInfo)>
c001aa12:	83 c4 1c             	add    esp,0x1c
c001aa15:	5b                   	pop    ebx
c001aa16:	5e                   	pop    esi
c001aa17:	5f                   	pop    edi
c001aa18:	5d                   	pop    ebp
c001aa19:	c3                   	ret    

c001aa1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001aa1a:	55                   	push   ebp
c001aa1b:	57                   	push   edi
c001aa1c:	56                   	push   esi
c001aa1d:	53                   	push   ebx
c001aa1e:	83 ec 68             	sub    esp,0x68
c001aa21:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001aa25:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa30:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa37:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001aa3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa40:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa47:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001aa4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa50:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001aa55:	6a 0c                	push   0xc
c001aa57:	57                   	push   edi
c001aa58:	53                   	push   ebx
c001aa59:	56                   	push   esi
c001aa5a:	55                   	push   ebp
c001aa5b:	e8 32 f8 ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa60:	83 c4 20             	add    esp,0x20
c001aa63:	57                   	push   edi
c001aa64:	53                   	push   ebx
c001aa65:	56                   	push   esi
c001aa66:	55                   	push   ebp
c001aa67:	e8 1c f9 ff ff       	call   c001a388 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001aa6c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001aa71:	57                   	push   edi
c001aa72:	53                   	push   ebx
c001aa73:	56                   	push   esi
c001aa74:	55                   	push   ebp
c001aa75:	e8 a4 f9 ff ff       	call   c001a41e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001aa7a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001aa7e:	83 c4 14             	add    esp,0x14
c001aa81:	6a 3c                	push   0x3c
c001aa83:	57                   	push   edi
c001aa84:	53                   	push   ebx
c001aa85:	56                   	push   esi
c001aa86:	55                   	push   ebp
c001aa87:	e8 06 f8 ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa8c:	0f b6 c4             	movzx  eax,ah
c001aa8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa93:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001aa97:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001aa9b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001aaa0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001aaa6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001aaac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aab0:	83 c4 20             	add    esp,0x20
c001aab3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001aab8:	74 30                	je     c001aaea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aaba:	31 c0                	xor    eax,eax
c001aabc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aac0:	7e 28                	jle    c001aaea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aac2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aaca:	39 cb                	cmp    ebx,ecx
c001aacc:	75 19                	jne    c001aae7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aace:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aad6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aada:	75 0b                	jne    c001aae7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aadc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aae3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aae7:	40                   	inc    eax
c001aae8:	eb d2                	jmp    c001aabc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aaea:	31 d2                	xor    edx,edx
c001aaec:	83 ec 0c             	sub    esp,0xc
c001aaef:	57                   	push   edi
c001aaf0:	53                   	push   ebx
c001aaf1:	56                   	push   esi
c001aaf2:	52                   	push   edx
c001aaf3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aaf7:	55                   	push   ebp
c001aaf8:	e8 6d f9 ff ff       	call   c001a46a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aafd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab01:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ab05:	42                   	inc    edx
c001ab06:	83 c4 20             	add    esp,0x20
c001ab09:	83 fa 06             	cmp    edx,0x6
c001ab0c:	75 de                	jne    c001aaec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ab0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab16:	c1 e2 08             	shl    edx,0x8
c001ab19:	83 ec 0c             	sub    esp,0xc
c001ab1c:	0f b6 c4             	movzx  eax,ah
c001ab1f:	09 d0                	or     eax,edx
c001ab21:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ab26:	6a 02                	push   0x2
c001ab28:	57                   	push   edi
c001ab29:	53                   	push   ebx
c001ab2a:	56                   	push   esi
c001ab2b:	55                   	push   ebp
c001ab2c:	e8 61 f7 ff ff       	call   c001a292 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ab31:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ab36:	83 c4 20             	add    esp,0x20
c001ab39:	57                   	push   edi
c001ab3a:	53                   	push   ebx
c001ab3b:	56                   	push   esi
c001ab3c:	55                   	push   ebp
c001ab3d:	e8 90 f8 ff ff       	call   c001a3d2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ab42:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ab46:	57                   	push   edi
c001ab47:	53                   	push   ebx
c001ab48:	56                   	push   esi
c001ab49:	55                   	push   ebp
c001ab4a:	e8 ed f7 ff ff       	call   c001a33c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab4f:	b9 09 00 00 00       	mov    ecx,0x9
c001ab54:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ab59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ab5d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ab61:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ab65:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ab69:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ab6d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ab71:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ab75:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ab79:	83 ec 0c             	sub    esp,0xc
c001ab7c:	fc                   	cld    
c001ab7d:	89 e7                	mov    edi,esp
c001ab7f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ab83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ab85:	55                   	push   ebp
c001ab86:	e8 15 fd ff ff       	call   c001a8a0 <PCI::foundDevice(PCIDeviceInfo)>
c001ab8b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ab91:	5b                   	pop    ebx
c001ab92:	5e                   	pop    esi
c001ab93:	5f                   	pop    edi
c001ab94:	5d                   	pop    ebp
c001ab95:	c3                   	ret    

c001ab96 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ab96:	55                   	push   ebp
c001ab97:	57                   	push   edi
c001ab98:	56                   	push   esi
c001ab99:	53                   	push   ebx
c001ab9a:	83 ec 0c             	sub    esp,0xc
c001ab9d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aba1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aba6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001abab:	6a 00                	push   0x0
c001abad:	56                   	push   esi
c001abae:	57                   	push   edi
c001abaf:	55                   	push   ebp
c001abb0:	e8 87 f7 ff ff       	call   c001a33c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abb5:	6a 00                	push   0x0
c001abb7:	56                   	push   esi
c001abb8:	57                   	push   edi
c001abb9:	55                   	push   ebp
c001abba:	e8 5b fe ff ff       	call   c001aa1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001abbf:	83 c4 20             	add    esp,0x20
c001abc2:	6a 00                	push   0x0
c001abc4:	56                   	push   esi
c001abc5:	57                   	push   edi
c001abc6:	55                   	push   ebp
c001abc7:	e8 94 f7 ff ff       	call   c001a360 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001abcc:	83 c4 10             	add    esp,0x10
c001abcf:	a8 80                	test   al,0x80
c001abd1:	74 2d                	je     c001ac00 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001abd3:	bb 01 00 00 00       	mov    ebx,0x1
c001abd8:	53                   	push   ebx
c001abd9:	56                   	push   esi
c001abda:	57                   	push   edi
c001abdb:	55                   	push   ebp
c001abdc:	e8 5b f7 ff ff       	call   c001a33c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abe1:	83 c4 10             	add    esp,0x10
c001abe4:	0f b7 c0             	movzx  eax,ax
c001abe7:	3d ff ff 00 00       	cmp    eax,0xffff
c001abec:	74 0c                	je     c001abfa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001abee:	53                   	push   ebx
c001abef:	56                   	push   esi
c001abf0:	57                   	push   edi
c001abf1:	55                   	push   ebp
c001abf2:	e8 23 fe ff ff       	call   c001aa1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001abf7:	83 c4 10             	add    esp,0x10
c001abfa:	43                   	inc    ebx
c001abfb:	83 fb 08             	cmp    ebx,0x8
c001abfe:	75 d8                	jne    c001abd8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ac00:	83 c4 0c             	add    esp,0xc
c001ac03:	5b                   	pop    ebx
c001ac04:	5e                   	pop    esi
c001ac05:	5f                   	pop    edi
c001ac06:	5d                   	pop    ebp
c001ac07:	c3                   	ret    

c001ac08 <PCI::detect()>:
c001ac08:	56                   	push   esi
c001ac09:	53                   	push   ebx
c001ac0a:	53                   	push   ebx
c001ac0b:	31 db                	xor    ebx,ebx
c001ac0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac11:	6a 00                	push   0x0
c001ac13:	6a 00                	push   0x0
c001ac15:	6a 00                	push   0x0
c001ac17:	56                   	push   esi
c001ac18:	e8 43 f7 ff ff       	call   c001a360 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ac1d:	83 c4 10             	add    esp,0x10
c001ac20:	a8 80                	test   al,0x80
c001ac22:	75 21                	jne    c001ac45 <PCI::detect()+0x3d>
c001ac24:	51                   	push   ecx
c001ac25:	51                   	push   ecx
c001ac26:	6a 00                	push   0x0
c001ac28:	56                   	push   esi
c001ac29:	e8 4e fc ff ff       	call   c001a87c <PCI::checkBus(unsigned char)>
c001ac2e:	83 c4 10             	add    esp,0x10
c001ac31:	eb 2a                	jmp    c001ac5d <PCI::detect()+0x55>
c001ac33:	52                   	push   edx
c001ac34:	52                   	push   edx
c001ac35:	53                   	push   ebx
c001ac36:	43                   	inc    ebx
c001ac37:	56                   	push   esi
c001ac38:	e8 3f fc ff ff       	call   c001a87c <PCI::checkBus(unsigned char)>
c001ac3d:	83 c4 10             	add    esp,0x10
c001ac40:	83 fb 08             	cmp    ebx,0x8
c001ac43:	74 18                	je     c001ac5d <PCI::detect()+0x55>
c001ac45:	53                   	push   ebx
c001ac46:	6a 00                	push   0x0
c001ac48:	6a 00                	push   0x0
c001ac4a:	56                   	push   esi
c001ac4b:	e8 ec f6 ff ff       	call   c001a33c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ac50:	83 c4 10             	add    esp,0x10
c001ac53:	0f b7 c0             	movzx  eax,ax
c001ac56:	3d ff ff 00 00       	cmp    eax,0xffff
c001ac5b:	74 d6                	je     c001ac33 <PCI::detect()+0x2b>
c001ac5d:	58                   	pop    eax
c001ac5e:	5b                   	pop    ebx
c001ac5f:	5e                   	pop    esi
c001ac60:	c3                   	ret    
c001ac61:	90                   	nop

c001ac62 <IDE::close(int, int, void*)>:
c001ac62:	83 c8 ff             	or     eax,0xffffffff
c001ac65:	c3                   	ret    

c001ac66 <IDE::IDE()>:
c001ac66:	83 ec 0c             	sub    esp,0xc
c001ac69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac6d:	83 ec 08             	sub    esp,0x8
c001ac70:	68 04 1b 02 c0       	push   0xc0021b04
c001ac75:	50                   	push   eax
c001ac76:	e8 ed 14 ff ff       	call   c000c168 <HardDiskController::HardDiskController(char const*)>
c001ac7b:	83 c4 10             	add    esp,0x10
c001ac7e:	ba 94 1b 02 c0       	mov    edx,0xc0021b94
c001ac83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac87:	89 10                	mov    DWORD PTR [eax],edx
c001ac89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ac94:	90                   	nop
c001ac95:	83 c4 0c             	add    esp,0xc
c001ac98:	c3                   	ret    
c001ac99:	90                   	nop

c001ac9a <IDE::prepareInterrupt(unsigned char)>:
c001ac9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac9f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aca3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001acab:	c3                   	ret    

c001acac <selectDrive(unsigned char, unsigned char)>:
c001acac:	c3                   	ret    
c001acad:	90                   	nop

c001acae <IDE::getBase(unsigned char)>:
c001acae:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001acb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acb7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001acbf:	c3                   	ret    

c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001acc0:	55                   	push   ebp
c001acc1:	57                   	push   edi
c001acc2:	56                   	push   esi
c001acc3:	53                   	push   ebx
c001acc4:	83 ec 1c             	sub    esp,0x1c
c001acc7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001accb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001accf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001acd2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001acd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001acda:	80 f9 03             	cmp    cl,0x3
c001acdd:	77 4f                	ja     c001ad2e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001acdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ace3:	0f b6 fa             	movzx  edi,dl
c001ace6:	0f b6 db             	movzx  ebx,bl
c001ace9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001acec:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001acf1:	80 ca 80             	or     dl,0x80
c001acf4:	52                   	push   edx
c001acf5:	6a 0c                	push   0xc
c001acf7:	57                   	push   edi
c001acf8:	56                   	push   esi
c001acf9:	e8 c2 ff ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acfe:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ad03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad07:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ad0b:	ee                   	out    dx,al
c001ad0c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ad11:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ad15:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ad19:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ad1d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ad25:	83 c4 2c             	add    esp,0x2c
c001ad28:	5b                   	pop    ebx
c001ad29:	5e                   	pop    esi
c001ad2a:	5f                   	pop    edi
c001ad2b:	5d                   	pop    ebp
c001ad2c:	eb 92                	jmp    c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad2e:	0f b6 cb             	movzx  ecx,bl
c001ad31:	83 f9 07             	cmp    ecx,0x7
c001ad34:	77 12                	ja     c001ad48 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ad36:	0f b6 d2             	movzx  edx,dl
c001ad39:	0f b6 db             	movzx  ebx,bl
c001ad3c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ad44:	01 da                	add    edx,ebx
c001ad46:	eb 2f                	jmp    c001ad77 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ad48:	83 f9 0d             	cmp    ecx,0xd
c001ad4b:	77 13                	ja     c001ad60 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ad4d:	0f b6 d2             	movzx  edx,dl
c001ad50:	0f b6 db             	movzx  ebx,bl
c001ad53:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ad5a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ad5e:	eb 17                	jmp    c001ad77 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ad60:	83 f9 15             	cmp    ecx,0x15
c001ad63:	77 13                	ja     c001ad78 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ad65:	0f b6 d2             	movzx  edx,dl
c001ad68:	0f b6 db             	movzx  ebx,bl
c001ad6b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ad73:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ad77:	ee                   	out    dx,al
c001ad78:	83 c4 1c             	add    esp,0x1c
c001ad7b:	5b                   	pop    ebx
c001ad7c:	5e                   	pop    esi
c001ad7d:	5f                   	pop    edi
c001ad7e:	5d                   	pop    ebp
c001ad7f:	c3                   	ret    

c001ad80 <IDE::read(unsigned char, unsigned char)>:
c001ad80:	55                   	push   ebp
c001ad81:	57                   	push   edi
c001ad82:	56                   	push   esi
c001ad83:	53                   	push   ebx
c001ad84:	83 ec 1c             	sub    esp,0x1c
c001ad87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ad8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ad8f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ad92:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ad96:	3c 03                	cmp    al,0x3
c001ad98:	77 40                	ja     c001adda <IDE::read(unsigned char, unsigned char)+0x5a>
c001ad9a:	0f b6 f9             	movzx  edi,cl
c001ad9d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ada0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ada5:	0c 80                	or     al,0x80
c001ada7:	50                   	push   eax
c001ada8:	6a 0c                	push   0xc
c001adaa:	57                   	push   edi
c001adab:	56                   	push   esi
c001adac:	e8 0f ff ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001adb1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001adb6:	0f b6 d3             	movzx  edx,bl
c001adb9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001adbd:	ec                   	in     al,dx
c001adbe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001adc2:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001adc7:	52                   	push   edx
c001adc8:	6a 0c                	push   0xc
c001adca:	57                   	push   edi
c001adcb:	56                   	push   esi
c001adcc:	e8 ef fe ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001add1:	83 c4 20             	add    esp,0x20
c001add4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001add8:	eb 4c                	jmp    c001ae26 <IDE::read(unsigned char, unsigned char)+0xa6>
c001adda:	0f b6 d3             	movzx  edx,bl
c001addd:	83 fa 07             	cmp    edx,0x7
c001ade0:	77 12                	ja     c001adf4 <IDE::read(unsigned char, unsigned char)+0x74>
c001ade2:	0f b6 c9             	movzx  ecx,cl
c001ade5:	0f b6 d3             	movzx  edx,bl
c001ade8:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001adf0:	01 c2                	add    edx,eax
c001adf2:	eb 31                	jmp    c001ae25 <IDE::read(unsigned char, unsigned char)+0xa5>
c001adf4:	83 fa 0d             	cmp    edx,0xd
c001adf7:	77 13                	ja     c001ae0c <IDE::read(unsigned char, unsigned char)+0x8c>
c001adf9:	0f b6 c9             	movzx  ecx,cl
c001adfc:	0f b6 d3             	movzx  edx,bl
c001adff:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ae06:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ae0a:	eb 19                	jmp    c001ae25 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ae0c:	31 c0                	xor    eax,eax
c001ae0e:	83 fa 15             	cmp    edx,0x15
c001ae11:	77 13                	ja     c001ae26 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ae13:	0f b6 c9             	movzx  ecx,cl
c001ae16:	0f b6 d3             	movzx  edx,bl
c001ae19:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ae21:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ae25:	ec                   	in     al,dx
c001ae26:	83 c4 1c             	add    esp,0x1c
c001ae29:	5b                   	pop    ebx
c001ae2a:	5e                   	pop    esi
c001ae2b:	5f                   	pop    edi
c001ae2c:	5d                   	pop    ebp
c001ae2d:	c3                   	ret    

c001ae2e <IDE::waitInterrupt(unsigned char)>:
c001ae2e:	55                   	push   ebp
c001ae2f:	57                   	push   edi
c001ae30:	56                   	push   esi
c001ae31:	53                   	push   ebx
c001ae32:	31 db                	xor    ebx,ebx
c001ae34:	83 ec 0c             	sub    esp,0xc
c001ae37:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae3b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ae40:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ae48:	89 e8                	mov    eax,ebp
c001ae4a:	84 c0                	test   al,al
c001ae4c:	75 30                	jne    c001ae7e <IDE::waitInterrupt(unsigned char)+0x50>
c001ae4e:	50                   	push   eax
c001ae4f:	6a 0c                	push   0xc
c001ae51:	56                   	push   esi
c001ae52:	57                   	push   edi
c001ae53:	e8 28 ff ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001ae58:	83 c4 10             	add    esp,0x10
c001ae5b:	a8 01                	test   al,0x1
c001ae5d:	75 27                	jne    c001ae86 <IDE::waitInterrupt(unsigned char)+0x58>
c001ae5f:	f6 c3 04             	test   bl,0x4
c001ae62:	75 12                	jne    c001ae76 <IDE::waitInterrupt(unsigned char)+0x48>
c001ae64:	83 fb 32             	cmp    ebx,0x32
c001ae67:	7e 0d                	jle    c001ae76 <IDE::waitInterrupt(unsigned char)+0x48>
c001ae69:	83 ec 0c             	sub    esp,0xc
c001ae6c:	6a 64                	push   0x64
c001ae6e:	e8 91 a5 ff ff       	call   c0015404 <milliTenthSleep(unsigned int)>
c001ae73:	83 c4 10             	add    esp,0x10
c001ae76:	83 fb 3c             	cmp    ebx,0x3c
c001ae79:	74 0b                	je     c001ae86 <IDE::waitInterrupt(unsigned char)+0x58>
c001ae7b:	43                   	inc    ebx
c001ae7c:	eb c2                	jmp    c001ae40 <IDE::waitInterrupt(unsigned char)+0x12>
c001ae7e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ae86:	83 c4 0c             	add    esp,0xc
c001ae89:	89 e8                	mov    eax,ebp
c001ae8b:	5b                   	pop    ebx
c001ae8c:	5e                   	pop    esi
c001ae8d:	5f                   	pop    edi
c001ae8e:	5d                   	pop    ebp
c001ae8f:	c3                   	ret    

c001ae90 <ideChannel0IRQHandler(regs*, void*)>:
c001ae90:	83 ec 10             	sub    esp,0x10
c001ae93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae97:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ae9e:	6a 07                	push   0x7
c001aea0:	6a 00                	push   0x0
c001aea2:	50                   	push   eax
c001aea3:	e8 d8 fe ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001aea8:	83 c4 1c             	add    esp,0x1c
c001aeab:	c3                   	ret    

c001aeac <ideChannel1IRQHandler(regs*, void*)>:
c001aeac:	83 ec 10             	sub    esp,0x10
c001aeaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aeb3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001aeba:	6a 07                	push   0x7
c001aebc:	6a 01                	push   0x1
c001aebe:	50                   	push   eax
c001aebf:	e8 bc fe ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001aec4:	83 c4 1c             	add    esp,0x1c
c001aec7:	c3                   	ret    

c001aec8 <IDE::enableIRQs(unsigned char, bool)>:
c001aec8:	57                   	push   edi
c001aec9:	b8 02 00 00 00       	mov    eax,0x2
c001aece:	56                   	push   esi
c001aecf:	53                   	push   ebx
c001aed0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aed4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001aed8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001aedd:	74 02                	je     c001aee1 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001aedf:	31 c0                	xor    eax,eax
c001aee1:	0f b6 db             	movzx  ebx,bl
c001aee4:	bf 04 00 00 00       	mov    edi,0x4
c001aee9:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001aef0:	50                   	push   eax
c001aef1:	6a 0c                	push   0xc
c001aef3:	53                   	push   ebx
c001aef4:	56                   	push   esi
c001aef5:	e8 c6 fd ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aefa:	83 c4 10             	add    esp,0x10
c001aefd:	50                   	push   eax
c001aefe:	6a 0c                	push   0xc
c001af00:	53                   	push   ebx
c001af01:	56                   	push   esi
c001af02:	e8 79 fe ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001af07:	83 c4 10             	add    esp,0x10
c001af0a:	4f                   	dec    edi
c001af0b:	75 f0                	jne    c001aefd <IDE::enableIRQs(unsigned char, bool)+0x35>
c001af0d:	5b                   	pop    ebx
c001af0e:	5e                   	pop    esi
c001af0f:	5f                   	pop    edi
c001af10:	c3                   	ret    
c001af11:	90                   	nop

c001af12 <IDE::open(int, int, void*)>:
c001af12:	55                   	push   ebp
c001af13:	57                   	push   edi
c001af14:	56                   	push   esi
c001af15:	53                   	push   ebx
c001af16:	83 ec 1c             	sub    esp,0x1c
c001af19:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001af1d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001af26:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001af2f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001af36:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001af3d:	0f 85 de 02 00 00    	jne    c001b221 <IDE::open(int, int, void*)+0x30f>
c001af43:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001af49:	88 04 24             	mov    BYTE PTR [esp],al
c001af4c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af4f:	83 e0 7f             	and    eax,0x7f
c001af52:	83 f8 05             	cmp    eax,0x5
c001af55:	74 05                	je     c001af5c <IDE::open(int, int, void*)+0x4a>
c001af57:	83 f8 0f             	cmp    eax,0xf
c001af5a:	75 32                	jne    c001af8e <IDE::open(int, int, void*)+0x7c>
c001af5c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001af62:	83 e0 fc             	and    eax,0xfffffffc
c001af65:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001af6c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001af72:	83 e0 fc             	and    eax,0xfffffffc
c001af75:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001af7c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001af82:	83 e0 fc             	and    eax,0xfffffffc
c001af85:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001af8c:	eb 14                	jmp    c001afa2 <IDE::open(int, int, void*)+0x90>
c001af8e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001af98:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001afa2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001afa9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001afb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afb4:	89 c6                	mov    esi,eax
c001afb6:	bf f8 0c 00 00       	mov    edi,0xcf8
c001afbb:	c1 e6 10             	shl    esi,0x10
c001afbe:	89 e8                	mov    eax,ebp
c001afc0:	89 fa                	mov    edx,edi
c001afc2:	c1 e0 0b             	shl    eax,0xb
c001afc5:	09 f0                	or     eax,esi
c001afc7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001afce:	c1 e6 08             	shl    esi,0x8
c001afd1:	09 c6                	or     esi,eax
c001afd3:	89 f0                	mov    eax,esi
c001afd5:	0d 08 00 00 80       	or     eax,0x80000008
c001afda:	ef                   	out    dx,eax
c001afdb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001afe0:	89 ca                	mov    edx,ecx
c001afe2:	ed                   	in     eax,dx
c001afe3:	c1 e8 10             	shr    eax,0x10
c001afe6:	3d ff ff 00 00       	cmp    eax,0xffff
c001afeb:	0f 84 f9 00 00 00    	je     c001b0ea <IDE::open(int, int, void*)+0x1d8>
c001aff1:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001aff7:	89 fa                	mov    edx,edi
c001aff9:	89 f0                	mov    eax,esi
c001affb:	ef                   	out    dx,eax
c001affc:	b0 fe                	mov    al,0xfe
c001affe:	89 ca                	mov    edx,ecx
c001b000:	ee                   	out    dx,al
c001b001:	89 f0                	mov    eax,esi
c001b003:	89 fa                	mov    edx,edi
c001b005:	ef                   	out    dx,eax
c001b006:	89 ca                	mov    edx,ecx
c001b008:	ed                   	in     eax,dx
c001b009:	3c fe                	cmp    al,0xfe
c001b00b:	0f 85 a9 00 00 00    	jne    c001b0ba <IDE::open(int, int, void*)+0x1a8>
c001b011:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001b017:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b01e:	74 33                	je     c001b053 <IDE::open(int, int, void*)+0x141>
c001b020:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b026:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b02a:	40                   	inc    eax
c001b02b:	83 ec 0c             	sub    esp,0xc
c001b02e:	0f b6 c0             	movzx  eax,al
c001b031:	50                   	push   eax
c001b032:	55                   	push   ebp
c001b033:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b037:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b03d:	51                   	push   ecx
c001b03e:	e8 55 3d ff ff       	call   c000ed98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b043:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b048:	83 c4 1c             	add    esp,0x1c
c001b04b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b051:	eb 0a                	jmp    c001b05d <IDE::open(int, int, void*)+0x14b>
c001b053:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b05d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b064:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b06b:	c1 e1 10             	shl    ecx,0x10
c001b06e:	c1 e0 08             	shl    eax,0x8
c001b071:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b076:	09 c1                	or     ecx,eax
c001b078:	89 fa                	mov    edx,edi
c001b07a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b081:	c1 e0 0b             	shl    eax,0xb
c001b084:	09 c1                	or     ecx,eax
c001b086:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b08c:	89 c8                	mov    eax,ecx
c001b08e:	ef                   	out    dx,eax
c001b08f:	be fc 0c 00 00       	mov    esi,0xcfc
c001b094:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b09a:	89 f2                	mov    edx,esi
c001b09c:	ee                   	out    dx,al
c001b09d:	89 c8                	mov    eax,ecx
c001b09f:	89 fa                	mov    edx,edi
c001b0a1:	ef                   	out    dx,eax
c001b0a2:	89 f2                	mov    edx,esi
c001b0a4:	ed                   	in     eax,dx
c001b0a5:	0f b6 c0             	movzx  eax,al
c001b0a8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b0ae:	74 4a                	je     c001b0fa <IDE::open(int, int, void*)+0x1e8>
c001b0b0:	83 ec 0c             	sub    esp,0xc
c001b0b3:	68 1c 1b 02 c0       	push   0xc0021b1c
c001b0b8:	eb 38                	jmp    c001b0f2 <IDE::open(int, int, void*)+0x1e0>
c001b0ba:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b0c3:	75 1b                	jne    c001b0e0 <IDE::open(int, int, void*)+0x1ce>
c001b0c5:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b0c9:	3d 80 00 00 00       	cmp    eax,0x80
c001b0ce:	74 07                	je     c001b0d7 <IDE::open(int, int, void*)+0x1c5>
c001b0d0:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b0d5:	75 09                	jne    c001b0e0 <IDE::open(int, int, void*)+0x1ce>
c001b0d7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b0de:	eb 1a                	jmp    c001b0fa <IDE::open(int, int, void*)+0x1e8>
c001b0e0:	83 ec 0c             	sub    esp,0xc
c001b0e3:	68 24 1b 02 c0       	push   0xc0021b24
c001b0e8:	eb 08                	jmp    c001b0f2 <IDE::open(int, int, void*)+0x1e0>
c001b0ea:	83 ec 0c             	sub    esp,0xc
c001b0ed:	68 55 1b 02 c0       	push   0xc0021b55
c001b0f2:	e8 28 58 ff ff       	call   c001091f <KePanic(char const*)>
c001b0f7:	83 c4 10             	add    esp,0x10
c001b0fa:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b101:	74 1a                	je     c001b11d <IDE::open(int, int, void*)+0x20b>
c001b103:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b109:	83 e0 fc             	and    eax,0xfffffffc
c001b10c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b113:	83 c0 08             	add    eax,0x8
c001b116:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b11d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b123:	89 c2                	mov    edx,eax
c001b125:	83 e2 0f             	and    edx,0xf
c001b128:	83 fa 08             	cmp    edx,0x8
c001b12b:	75 0a                	jne    c001b137 <IDE::open(int, int, void*)+0x225>
c001b12d:	83 e8 02             	sub    eax,0x2
c001b130:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b137:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b13d:	89 c2                	mov    edx,eax
c001b13f:	83 e2 0f             	and    edx,0xf
c001b142:	83 fa 08             	cmp    edx,0x8
c001b145:	75 0a                	jne    c001b151 <IDE::open(int, int, void*)+0x23f>
c001b147:	83 e8 02             	sub    eax,0x2
c001b14a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b151:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b158:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b15f:	89 d0                	mov    eax,edx
c001b161:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b164:	8d 7a 01             	lea    edi,[edx+0x1]
c001b167:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b16b:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b16f:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b173:	83 e1 3f             	and    ecx,0x3f
c001b176:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b17a:	89 f9                	mov    ecx,edi
c001b17c:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b183:	0f b6 c9             	movzx  ecx,cl
c001b186:	8d 78 02             	lea    edi,[eax+0x2]
c001b189:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b18c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b190:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b194:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b198:	83 e2 3f             	and    edx,0x3f
c001b19b:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b19f:	89 f9                	mov    ecx,edi
c001b1a1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b1a7:	0f b6 d1             	movzx  edx,cl
c001b1aa:	8d 78 03             	lea    edi,[eax+0x3]
c001b1ad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b1b0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b1b4:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b1b8:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b1bc:	83 e1 3f             	and    ecx,0x3f
c001b1bf:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b1c3:	89 f9                	mov    ecx,edi
c001b1c5:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b1cb:	0f b6 c9             	movzx  ecx,cl
c001b1ce:	8d 78 04             	lea    edi,[eax+0x4]
c001b1d1:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b1d4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b1d8:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b1dc:	89 fa                	mov    edx,edi
c001b1de:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b1e4:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b1e8:	83 e2 3f             	and    edx,0x3f
c001b1eb:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b1ef:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b1f6:	66 85 f6             	test   si,si
c001b1f9:	74 65                	je     c001b260 <IDE::open(int, int, void*)+0x34e>
c001b1fb:	89 f9                	mov    ecx,edi
c001b1fd:	83 c0 05             	add    eax,0x5
c001b200:	0f b6 d1             	movzx  edx,cl
c001b203:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b206:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b20a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b20e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b214:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b218:	83 e0 3f             	and    eax,0x3f
c001b21b:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b21f:	eb 3f                	jmp    c001b260 <IDE::open(int, int, void*)+0x34e>
c001b221:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b227:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b22e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b235:	05 06 02 00 00       	add    eax,0x206
c001b23a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b241:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b248:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b24f:	05 06 02 00 00       	add    eax,0x206
c001b254:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b25b:	e9 bd fe ff ff       	jmp    c001b11d <IDE::open(int, int, void*)+0x20b>
c001b260:	50                   	push   eax
c001b261:	50                   	push   eax
c001b262:	6a 00                	push   0x0
c001b264:	53                   	push   ebx
c001b265:	e8 30 fa ff ff       	call   c001ac9a <IDE::prepareInterrupt(unsigned char)>
c001b26a:	5a                   	pop    edx
c001b26b:	59                   	pop    ecx
c001b26c:	6a 01                	push   0x1
c001b26e:	53                   	push   ebx
c001b26f:	e8 26 fa ff ff       	call   c001ac9a <IDE::prepareInterrupt(unsigned char)>
c001b274:	83 c4 0c             	add    esp,0xc
c001b277:	6a 00                	push   0x0
c001b279:	6a 00                	push   0x0
c001b27b:	53                   	push   ebx
c001b27c:	e8 47 fc ff ff       	call   c001aec8 <IDE::enableIRQs(unsigned char, bool)>
c001b281:	83 c4 0c             	add    esp,0xc
c001b284:	6a 00                	push   0x0
c001b286:	6a 01                	push   0x1
c001b288:	53                   	push   ebx
c001b289:	e8 3a fc ff ff       	call   c001aec8 <IDE::enableIRQs(unsigned char, bool)>
c001b28e:	83 c4 10             	add    esp,0x10
c001b291:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b298:	74 34                	je     c001b2ce <IDE::open(int, int, void*)+0x3bc>
c001b29a:	83 ec 0c             	sub    esp,0xc
c001b29d:	53                   	push   ebx
c001b29e:	6a 01                	push   0x1
c001b2a0:	68 90 ae 01 c0       	push   0xc001ae90
c001b2a5:	6a 0e                	push   0xe
c001b2a7:	53                   	push   ebx
c001b2a8:	e8 25 0b ff ff       	call   c000bdd2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2ad:	83 c4 14             	add    esp,0x14
c001b2b0:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b2b6:	53                   	push   ebx
c001b2b7:	6a 01                	push   0x1
c001b2b9:	68 ac ae 01 c0       	push   0xc001aeac
c001b2be:	6a 0f                	push   0xf
c001b2c0:	53                   	push   ebx
c001b2c1:	e8 0c 0b ff ff       	call   c000bdd2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2c6:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b2cc:	eb 38                	jmp    c001b306 <IDE::open(int, int, void*)+0x3f4>
c001b2ce:	83 ec 0c             	sub    esp,0xc
c001b2d1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b2db:	53                   	push   ebx
c001b2dc:	6a 00                	push   0x0
c001b2de:	68 90 ae 01 c0       	push   0xc001ae90
c001b2e3:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b2e9:	53                   	push   ebx
c001b2ea:	e8 e3 0a ff ff       	call   c000bdd2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2ef:	83 c4 14             	add    esp,0x14
c001b2f2:	53                   	push   ebx
c001b2f3:	6a 00                	push   0x0
c001b2f5:	68 ac ae 01 c0       	push   0xc001aeac
c001b2fa:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b300:	53                   	push   ebx
c001b301:	e8 cc 0a ff ff       	call   c000bdd2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b306:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b308:	83 c4 20             	add    esp,0x20
c001b30b:	83 ec 0c             	sub    esp,0xc
c001b30e:	53                   	push   ebx
c001b30f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b312:	83 c4 0c             	add    esp,0xc
c001b315:	6a 07                	push   0x7
c001b317:	6a 00                	push   0x0
c001b319:	53                   	push   ebx
c001b31a:	e8 61 fa ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b31f:	83 c4 0c             	add    esp,0xc
c001b322:	6a 07                	push   0x7
c001b324:	6a 01                	push   0x1
c001b326:	53                   	push   ebx
c001b327:	e8 54 fa ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b32c:	83 c4 0c             	add    esp,0xc
c001b32f:	6a 01                	push   0x1
c001b331:	6a 00                	push   0x0
c001b333:	53                   	push   ebx
c001b334:	e8 8f fb ff ff       	call   c001aec8 <IDE::enableIRQs(unsigned char, bool)>
c001b339:	83 c4 0c             	add    esp,0xc
c001b33c:	6a 01                	push   0x1
c001b33e:	6a 01                	push   0x1
c001b340:	53                   	push   ebx
c001b341:	e8 82 fb ff ff       	call   c001aec8 <IDE::enableIRQs(unsigned char, bool)>
c001b346:	83 c4 2c             	add    esp,0x2c
c001b349:	31 c0                	xor    eax,eax
c001b34b:	5b                   	pop    ebx
c001b34c:	5e                   	pop    esi
c001b34d:	5f                   	pop    edi
c001b34e:	5d                   	pop    ebp
c001b34f:	c3                   	ret    

c001b350 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b350:	55                   	push   ebp
c001b351:	57                   	push   edi
c001b352:	56                   	push   esi
c001b353:	53                   	push   ebx
c001b354:	83 ec 1c             	sub    esp,0x1c
c001b357:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b35b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b35f:	8d 42 f8             	lea    eax,[edx-0x8]
c001b362:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b366:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b36a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b36e:	3c 03                	cmp    al,0x3
c001b370:	77 5a                	ja     c001b3cc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b376:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b37a:	0f b6 db             	movzx  ebx,bl
c001b37d:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b380:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b385:	0c 80                	or     al,0x80
c001b387:	50                   	push   eax
c001b388:	6a 0c                	push   0xc
c001b38a:	53                   	push   ebx
c001b38b:	56                   	push   esi
c001b38c:	e8 2f f9 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b391:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b396:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b39a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b39e:	0f b6 d2             	movzx  edx,dl
c001b3a1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b3a5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b3a7:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b3ac:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b3b0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b3b4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b3b8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b3c0:	83 c4 2c             	add    esp,0x2c
c001b3c3:	5b                   	pop    ebx
c001b3c4:	5e                   	pop    esi
c001b3c5:	5f                   	pop    edi
c001b3c6:	5d                   	pop    ebp
c001b3c7:	e9 f4 f8 ff ff       	jmp    c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3cc:	0f b6 c2             	movzx  eax,dl
c001b3cf:	83 f8 07             	cmp    eax,0x7
c001b3d2:	77 12                	ja     c001b3e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b3d4:	0f b6 c2             	movzx  eax,dl
c001b3d7:	0f b6 db             	movzx  ebx,bl
c001b3da:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b3e2:	01 c2                	add    edx,eax
c001b3e4:	eb 2f                	jmp    c001b415 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b3e6:	83 f8 0d             	cmp    eax,0xd
c001b3e9:	77 13                	ja     c001b3fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b3eb:	0f b6 db             	movzx  ebx,bl
c001b3ee:	0f b6 d2             	movzx  edx,dl
c001b3f1:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b3f8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b3fc:	eb 17                	jmp    c001b415 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b3fe:	83 f8 15             	cmp    eax,0x15
c001b401:	77 14                	ja     c001b417 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b403:	0f b6 db             	movzx  ebx,bl
c001b406:	0f b6 d2             	movzx  edx,dl
c001b409:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b411:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b415:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b417:	83 c4 1c             	add    esp,0x1c
c001b41a:	5b                   	pop    ebx
c001b41b:	5e                   	pop    esi
c001b41c:	5f                   	pop    edi
c001b41d:	5d                   	pop    ebp
c001b41e:	c3                   	ret    
c001b41f:	90                   	nop

c001b420 <IDE::detect()>:
c001b420:	55                   	push   ebp
c001b421:	57                   	push   edi
c001b422:	56                   	push   esi
c001b423:	53                   	push   ebx
c001b424:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b42a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b431:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b438:	0f 85 a4 02 00 00    	jne    c001b6e2 <IDE::detect()+0x2c2>
c001b43e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b445:	31 f6                	xor    esi,esi
c001b447:	31 ed                	xor    ebp,ebp
c001b449:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b451:	89 e8                	mov    eax,ebp
c001b453:	c1 e0 06             	shl    eax,0x6
c001b456:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b45e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b462:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b46a:	c1 e0 04             	shl    eax,0x4
c001b46d:	83 c8 a0             	or     eax,0xffffffa0
c001b470:	0f b6 c0             	movzx  eax,al
c001b473:	50                   	push   eax
c001b474:	6a 06                	push   0x6
c001b476:	56                   	push   esi
c001b477:	53                   	push   ebx
c001b478:	e8 43 f8 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b47d:	83 c4 0c             	add    esp,0xc
c001b480:	6a 0c                	push   0xc
c001b482:	56                   	push   esi
c001b483:	53                   	push   ebx
c001b484:	e8 f7 f8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b489:	83 c4 0c             	add    esp,0xc
c001b48c:	6a 0c                	push   0xc
c001b48e:	56                   	push   esi
c001b48f:	53                   	push   ebx
c001b490:	e8 eb f8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b495:	83 c4 0c             	add    esp,0xc
c001b498:	6a 0c                	push   0xc
c001b49a:	56                   	push   esi
c001b49b:	53                   	push   ebx
c001b49c:	e8 df f8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b4a1:	83 c4 0c             	add    esp,0xc
c001b4a4:	6a 0c                	push   0xc
c001b4a6:	56                   	push   esi
c001b4a7:	53                   	push   ebx
c001b4a8:	e8 d3 f8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b4ad:	68 ec 00 00 00       	push   0xec
c001b4b2:	6a 07                	push   0x7
c001b4b4:	56                   	push   esi
c001b4b5:	53                   	push   ebx
c001b4b6:	e8 05 f8 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4bb:	83 c4 1c             	add    esp,0x1c
c001b4be:	6a 0c                	push   0xc
c001b4c0:	56                   	push   esi
c001b4c1:	53                   	push   ebx
c001b4c2:	e8 b9 f8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b4c7:	83 c4 0c             	add    esp,0xc
c001b4ca:	6a 0c                	push   0xc
c001b4cc:	56                   	push   esi
c001b4cd:	53                   	push   ebx
c001b4ce:	e8 ad f8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b4d3:	83 c4 0c             	add    esp,0xc
c001b4d6:	6a 0c                	push   0xc
c001b4d8:	56                   	push   esi
c001b4d9:	53                   	push   ebx
c001b4da:	e8 a1 f8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b4df:	83 c4 0c             	add    esp,0xc
c001b4e2:	6a 0c                	push   0xc
c001b4e4:	56                   	push   esi
c001b4e5:	53                   	push   ebx
c001b4e6:	e8 95 f8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b4eb:	83 c4 0c             	add    esp,0xc
c001b4ee:	6a 0c                	push   0xc
c001b4f0:	56                   	push   esi
c001b4f1:	53                   	push   ebx
c001b4f2:	e8 89 f8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b4f7:	83 c4 10             	add    esp,0x10
c001b4fa:	84 c0                	test   al,al
c001b4fc:	0f 84 60 01 00 00    	je     c001b662 <IDE::detect()+0x242>
c001b502:	31 ff                	xor    edi,edi
c001b504:	50                   	push   eax
c001b505:	6a 0c                	push   0xc
c001b507:	56                   	push   esi
c001b508:	53                   	push   ebx
c001b509:	e8 72 f8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b50e:	83 c4 10             	add    esp,0x10
c001b511:	a8 01                	test   al,0x1
c001b513:	0f 85 6a 01 00 00    	jne    c001b683 <IDE::detect()+0x263>
c001b519:	a8 80                	test   al,0x80
c001b51b:	75 04                	jne    c001b521 <IDE::detect()+0x101>
c001b51d:	a8 08                	test   al,0x8
c001b51f:	75 23                	jne    c001b544 <IDE::detect()+0x124>
c001b521:	47                   	inc    edi
c001b522:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b528:	7e da                	jle    c001b504 <IDE::detect()+0xe4>
c001b52a:	83 ec 0c             	sub    esp,0xc
c001b52d:	6a 32                	push   0x32
c001b52f:	e8 d0 9e ff ff       	call   c0015404 <milliTenthSleep(unsigned int)>
c001b534:	83 c4 10             	add    esp,0x10
c001b537:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b53d:	75 c5                	jne    c001b504 <IDE::detect()+0xe4>
c001b53f:	e9 3f 01 00 00       	jmp    c001b683 <IDE::detect()+0x263>
c001b544:	31 c9                	xor    ecx,ecx
c001b546:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b54a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b54e:	83 ec 0c             	sub    esp,0xc
c001b551:	68 80 00 00 00       	push   0x80
c001b556:	57                   	push   edi
c001b557:	6a 00                	push   0x0
c001b559:	56                   	push   esi
c001b55a:	53                   	push   ebx
c001b55b:	e8 f0 fd ff ff       	call   c001b350 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b560:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b565:	89 e8                	mov    eax,ebp
c001b567:	89 d1                	mov    ecx,edx
c001b569:	c1 e0 06             	shl    eax,0x6
c001b56c:	01 d8                	add    eax,ebx
c001b56e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b575:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b57c:	89 f2                	mov    edx,esi
c001b57e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b584:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b588:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b58e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b592:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b599:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b5a1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b5a8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b5b0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b5b6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b5bd:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b5c3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b5c7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b5cb:	83 c4 20             	add    esp,0x20
c001b5ce:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b5d1:	83 c0 02             	add    eax,0x2
c001b5d4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b5da:	83 c7 02             	add    edi,0x2
c001b5dd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b5e0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b5e6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001b5ea:	75 e2                	jne    c001b5ce <IDE::detect()+0x1ae>
c001b5ec:	89 e8                	mov    eax,ebp
c001b5ee:	c1 e0 06             	shl    eax,0x6
c001b5f1:	01 d8                	add    eax,ebx
c001b5f3:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b5fa:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b601:	c1 ea 09             	shr    edx,0x9
c001b604:	83 e2 01             	and    edx,0x1
c001b607:	80 e1 01             	and    cl,0x1
c001b60a:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b610:	75 22                	jne    c001b634 <IDE::detect()+0x214>
c001b612:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b619:	74 46                	je     c001b661 <IDE::detect()+0x241>
c001b61b:	83 ec 0c             	sub    esp,0xc
c001b61e:	68 7c 01 00 00       	push   0x17c
c001b623:	e8 86 c4 fe ff       	call   c0007aae <malloc>
c001b628:	89 c7                	mov    edi,eax
c001b62a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b62d:	e8 1a 05 00 00       	call   c001bb4c <ATA::ATA()>
c001b632:	eb 17                	jmp    c001b64b <IDE::detect()+0x22b>
c001b634:	83 ec 0c             	sub    esp,0xc
c001b637:	68 84 01 00 00       	push   0x184
c001b63c:	e8 6d c4 fe ff       	call   c0007aae <malloc>
c001b641:	89 c7                	mov    edi,eax
c001b643:	89 04 24             	mov    DWORD PTR [esp],eax
c001b646:	e8 45 0e 00 00       	call   c001c490 <ATAPI::ATAPI()>
c001b64b:	5a                   	pop    edx
c001b64c:	59                   	pop    ecx
c001b64d:	57                   	push   edi
c001b64e:	53                   	push   ebx
c001b64f:	e8 d2 07 ff ff       	call   c000be26 <Device::addChild(Device*)>
c001b654:	8b 07                	mov    eax,DWORD PTR [edi]
c001b656:	53                   	push   ebx
c001b657:	55                   	push   ebp
c001b658:	6a 00                	push   0x0
c001b65a:	57                   	push   edi
c001b65b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b65e:	83 c4 20             	add    esp,0x20
c001b661:	45                   	inc    ebp
c001b662:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b667:	74 0d                	je     c001b676 <IDE::detect()+0x256>
c001b669:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b671:	e9 db fd ff ff       	jmp    c001b451 <IDE::detect()+0x31>
c001b676:	4e                   	dec    esi
c001b677:	74 69                	je     c001b6e2 <IDE::detect()+0x2c2>
c001b679:	be 01 00 00 00       	mov    esi,0x1
c001b67e:	e9 c6 fd ff ff       	jmp    c001b449 <IDE::detect()+0x29>
c001b683:	50                   	push   eax
c001b684:	6a 04                	push   0x4
c001b686:	56                   	push   esi
c001b687:	53                   	push   ebx
c001b688:	e8 f3 f6 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b68d:	83 c4 0c             	add    esp,0xc
c001b690:	89 c7                	mov    edi,eax
c001b692:	6a 05                	push   0x5
c001b694:	56                   	push   esi
c001b695:	53                   	push   ebx
c001b696:	e8 e5 f6 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b69b:	83 c4 10             	add    esp,0x10
c001b69e:	89 f9                	mov    ecx,edi
c001b6a0:	0f b6 c0             	movzx  eax,al
c001b6a3:	0f b6 f9             	movzx  edi,cl
c001b6a6:	83 ff 14             	cmp    edi,0x14
c001b6a9:	75 07                	jne    c001b6b2 <IDE::detect()+0x292>
c001b6ab:	3d eb 00 00 00       	cmp    eax,0xeb
c001b6b0:	eb 0a                	jmp    c001b6bc <IDE::detect()+0x29c>
c001b6b2:	3d 96 00 00 00       	cmp    eax,0x96
c001b6b7:	75 a9                	jne    c001b662 <IDE::detect()+0x242>
c001b6b9:	83 ff 69             	cmp    edi,0x69
c001b6bc:	75 a4                	jne    c001b662 <IDE::detect()+0x242>
c001b6be:	68 a1 00 00 00       	push   0xa1
c001b6c3:	6a 07                	push   0x7
c001b6c5:	56                   	push   esi
c001b6c6:	53                   	push   ebx
c001b6c7:	e8 f4 f5 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6cc:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b6d3:	e8 2c 9d ff ff       	call   c0015404 <milliTenthSleep(unsigned int)>
c001b6d8:	83 c4 10             	add    esp,0x10
c001b6db:	b1 01                	mov    cl,0x1
c001b6dd:	e9 64 fe ff ff       	jmp    c001b546 <IDE::detect()+0x126>
c001b6e2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b6e8:	5b                   	pop    ebx
c001b6e9:	5e                   	pop    esi
c001b6ea:	5f                   	pop    edi
c001b6eb:	5d                   	pop    ebp
c001b6ec:	c3                   	ret    
c001b6ed:	90                   	nop

c001b6ee <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b6ee:	55                   	push   ebp
c001b6ef:	57                   	push   edi
c001b6f0:	56                   	push   esi
c001b6f1:	53                   	push   ebx
c001b6f2:	83 ec 1c             	sub    esp,0x1c
c001b6f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b6f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b6fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b701:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b705:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b709:	88 c3                	mov    bl,al
c001b70b:	25 ff 00 00 00       	and    eax,0xff
c001b710:	0f 84 88 00 00 00    	je     c001b79e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b716:	83 ec 0c             	sub    esp,0xc
c001b719:	89 c7                	mov    edi,eax
c001b71b:	68 7f 1b 02 c0       	push   0xc0021b7f
c001b720:	e8 cc f2 fe ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001b725:	83 c4 10             	add    esp,0x10
c001b728:	83 ff 01             	cmp    edi,0x1
c001b72b:	74 6b                	je     c001b798 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b72d:	83 ff 02             	cmp    edi,0x2
c001b730:	75 58                	jne    c001b78a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b732:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b737:	01 ff                	add    edi,edi
c001b739:	50                   	push   eax
c001b73a:	09 fe                	or     esi,edi
c001b73c:	6a 01                	push   0x1
c001b73e:	89 f0                	mov    eax,esi
c001b740:	0f b6 f0             	movzx  esi,al
c001b743:	c1 e6 06             	shl    esi,0x6
c001b746:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b74e:	50                   	push   eax
c001b74f:	55                   	push   ebp
c001b750:	e8 2b f6 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b755:	83 c4 10             	add    esp,0x10
c001b758:	a8 01                	test   al,0x1
c001b75a:	74 02                	je     c001b75e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b75c:	b3 07                	mov    bl,0x7
c001b75e:	a8 02                	test   al,0x2
c001b760:	74 02                	je     c001b764 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b762:	b3 03                	mov    bl,0x3
c001b764:	a8 04                	test   al,0x4
c001b766:	74 02                	je     c001b76a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b768:	b3 14                	mov    bl,0x14
c001b76a:	a8 08                	test   al,0x8
c001b76c:	74 02                	je     c001b770 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b76e:	b3 03                	mov    bl,0x3
c001b770:	a8 10                	test   al,0x10
c001b772:	74 02                	je     c001b776 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b774:	b3 15                	mov    bl,0x15
c001b776:	a8 20                	test   al,0x20
c001b778:	74 02                	je     c001b77c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b77a:	b3 03                	mov    bl,0x3
c001b77c:	a8 40                	test   al,0x40
c001b77e:	74 02                	je     c001b782 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b780:	b3 16                	mov    bl,0x16
c001b782:	a8 80                	test   al,0x80
c001b784:	74 18                	je     c001b79e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b786:	b3 0d                	mov    bl,0xd
c001b788:	eb 14                	jmp    c001b79e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b78a:	83 ff 03             	cmp    edi,0x3
c001b78d:	74 0d                	je     c001b79c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b78f:	83 ff 04             	cmp    edi,0x4
c001b792:	75 0a                	jne    c001b79e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b794:	b3 08                	mov    bl,0x8
c001b796:	eb 06                	jmp    c001b79e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b798:	b3 13                	mov    bl,0x13
c001b79a:	eb 02                	jmp    c001b79e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b79c:	b3 17                	mov    bl,0x17
c001b79e:	83 c4 1c             	add    esp,0x1c
c001b7a1:	88 d8                	mov    al,bl
c001b7a3:	5b                   	pop    ebx
c001b7a4:	5e                   	pop    esi
c001b7a5:	5f                   	pop    edi
c001b7a6:	5d                   	pop    ebp
c001b7a7:	c3                   	ret    

c001b7a8 <IDE::polling(unsigned char, unsigned int)>:
c001b7a8:	57                   	push   edi
c001b7a9:	56                   	push   esi
c001b7aa:	53                   	push   ebx
c001b7ab:	bb 04 00 00 00       	mov    ebx,0x4
c001b7b0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b7b4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b7b9:	52                   	push   edx
c001b7ba:	6a 0c                	push   0xc
c001b7bc:	56                   	push   esi
c001b7bd:	57                   	push   edi
c001b7be:	e8 bd f5 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b7c3:	83 c4 10             	add    esp,0x10
c001b7c6:	4b                   	dec    ebx
c001b7c7:	75 f0                	jne    c001b7b9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b7c9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b7ce:	50                   	push   eax
c001b7cf:	6a 0c                	push   0xc
c001b7d1:	56                   	push   esi
c001b7d2:	57                   	push   edi
c001b7d3:	e8 a8 f5 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001b7d8:	83 c4 10             	add    esp,0x10
c001b7db:	a8 01                	test   al,0x1
c001b7dd:	75 17                	jne    c001b7f6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b7df:	a8 20                	test   al,0x20
c001b7e1:	75 0f                	jne    c001b7f2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b7e3:	4b                   	dec    ebx
c001b7e4:	74 10                	je     c001b7f6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b7e6:	a8 80                	test   al,0x80
c001b7e8:	75 e4                	jne    c001b7ce <IDE::polling(unsigned char, unsigned int)+0x26>
c001b7ea:	a8 08                	test   al,0x8
c001b7ec:	74 e0                	je     c001b7ce <IDE::polling(unsigned char, unsigned int)+0x26>
c001b7ee:	31 c0                	xor    eax,eax
c001b7f0:	eb 06                	jmp    c001b7f8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b7f2:	b0 01                	mov    al,0x1
c001b7f4:	eb 02                	jmp    c001b7f8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b7f6:	b0 02                	mov    al,0x2
c001b7f8:	5b                   	pop    ebx
c001b7f9:	5e                   	pop    esi
c001b7fa:	5f                   	pop    edi
c001b7fb:	c3                   	ret    

c001b7fc <SATABus::close(int, int, void*)>:
c001b7fc:	31 c0                	xor    eax,eax
c001b7fe:	c3                   	ret    
c001b7ff:	90                   	nop

c001b800 <SATABus::detect()>:
c001b800:	c3                   	ret    
c001b801:	90                   	nop

c001b802 <SATABus::SATABus()>:
c001b802:	83 ec 0c             	sub    esp,0xc
c001b805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b809:	83 ec 08             	sub    esp,0x8
c001b80c:	68 b8 1b 02 c0       	push   0xc0021bb8
c001b811:	50                   	push   eax
c001b812:	e8 51 09 ff ff       	call   c000c168 <HardDiskController::HardDiskController(char const*)>
c001b817:	83 c4 10             	add    esp,0x10
c001b81a:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001b81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b823:	89 10                	mov    DWORD PTR [eax],edx
c001b825:	83 ec 0c             	sub    esp,0xc
c001b828:	6a 50                	push   0x50
c001b82a:	e8 53 c6 fe ff       	call   c0007e82 <Phys::allocateContiguousPages(int)>
c001b82f:	83 c4 10             	add    esp,0x10
c001b832:	89 c2                	mov    edx,eax
c001b834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b838:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b83e:	83 ec 0c             	sub    esp,0xc
c001b841:	6a 50                	push   0x50
c001b843:	e8 d5 dd fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001b848:	83 c4 10             	add    esp,0x10
c001b84b:	89 c2                	mov    edx,eax
c001b84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b851:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b857:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b85c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b860:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b866:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b86a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b870:	83 ec 0c             	sub    esp,0xc
c001b873:	6a 03                	push   0x3
c001b875:	6a 50                	push   0x50
c001b877:	51                   	push   ecx
c001b878:	52                   	push   edx
c001b879:	50                   	push   eax
c001b87a:	e8 99 e7 fe ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b87f:	83 c4 20             	add    esp,0x20
c001b882:	90                   	nop
c001b883:	83 c4 0c             	add    esp,0xc
c001b886:	c3                   	ret    
c001b887:	90                   	nop

c001b888 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b88c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b88f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b892:	09 c2                	or     edx,eax
c001b894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b898:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b89e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b8a0:	31 c0                	xor    eax,eax
c001b8a2:	c1 e9 08             	shr    ecx,0x8
c001b8a5:	83 e1 0f             	and    ecx,0xf
c001b8a8:	39 c8                	cmp    eax,ecx
c001b8aa:	74 0a                	je     c001b8b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b8ac:	f6 c2 01             	test   dl,0x1
c001b8af:	74 08                	je     c001b8b9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b8b1:	d1 ea                	shr    edx,1
c001b8b3:	40                   	inc    eax
c001b8b4:	eb f2                	jmp    c001b8a8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b8b6:	83 c8 ff             	or     eax,0xffffffff
c001b8b9:	c3                   	ret    

c001b8ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b8ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b8be:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b8c1:	89 c2                	mov    edx,eax
c001b8c3:	c1 ea 08             	shr    edx,0x8
c001b8c6:	83 e2 0f             	and    edx,0xf
c001b8c9:	4a                   	dec    edx
c001b8ca:	75 32                	jne    c001b8fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b8cc:	83 e0 0f             	and    eax,0xf
c001b8cf:	83 f8 03             	cmp    eax,0x3
c001b8d2:	75 2a                	jne    c001b8fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b8d4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b8d7:	b8 02 00 00 00       	mov    eax,0x2
c001b8dc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b8e2:	74 1c                	je     c001b900 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b8e4:	b8 04 00 00 00       	mov    eax,0x4
c001b8e9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b8ef:	74 0f                	je     c001b900 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b8f1:	31 c0                	xor    eax,eax
c001b8f3:	83 fa 03             	cmp    edx,0x3
c001b8f6:	0f 94 c0             	sete   al
c001b8f9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b8fd:	c3                   	ret    
c001b8fe:	31 c0                	xor    eax,eax
c001b900:	c3                   	ret    
c001b901:	90                   	nop

c001b902 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b902:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b906:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b909:	0f ba e2 0f          	bt     edx,0xf
c001b90d:	72 f7                	jb     c001b906 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b90f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b912:	83 ca 10             	or     edx,0x10
c001b915:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b918:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b91b:	83 ca 01             	or     edx,0x1
c001b91e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b921:	c3                   	ret    

c001b922 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b922:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b926:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b929:	83 e2 fe             	and    edx,0xfffffffe
c001b92c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b92f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b932:	83 e2 ef             	and    edx,0xffffffef
c001b935:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b938:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b93b:	0f ba e2 0e          	bt     edx,0xe
c001b93f:	72 f7                	jb     c001b938 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b941:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b944:	0f ba e2 0f          	bt     edx,0xf
c001b948:	72 ee                	jb     c001b938 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b94a:	c3                   	ret    
c001b94b:	90                   	nop

c001b94c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b94c:	55                   	push   ebp
c001b94d:	57                   	push   edi
c001b94e:	56                   	push   esi
c001b94f:	53                   	push   ebx
c001b950:	83 ec 1c             	sub    esp,0x1c
c001b953:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b957:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b95b:	53                   	push   ebx
c001b95c:	56                   	push   esi
c001b95d:	e8 c0 ff ff ff       	call   c001b922 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b962:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b966:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b96c:	83 ec 0c             	sub    esp,0xc
c001b96f:	c1 e5 0a             	shl    ebp,0xa
c001b972:	01 e8                	add    eax,ebp
c001b974:	89 03                	mov    DWORD PTR [ebx],eax
c001b976:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b978:	68 00 04 00 00       	push   0x400
c001b97d:	6a 00                	push   0x0
c001b97f:	50                   	push   eax
c001b980:	e8 6b 4b fe ff       	call   c00004f0 <memset>
c001b985:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b98b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b98f:	01 e8                	add    eax,ebp
c001b991:	83 c4 1c             	add    esp,0x1c
c001b994:	89 03                	mov    DWORD PTR [ebx],eax
c001b996:	c1 e2 08             	shl    edx,0x8
c001b999:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b9a0:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b9a6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b9ac:	01 f8                	add    eax,edi
c001b9ae:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b9b1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b9b4:	68 00 01 00 00       	push   0x100
c001b9b9:	6a 00                	push   0x0
c001b9bb:	50                   	push   eax
c001b9bc:	e8 2f 4b fe ff       	call   c00004f0 <memset>
c001b9c1:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b9c7:	01 fa                	add    edx,edi
c001b9c9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b9cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b9d0:	c1 e7 0d             	shl    edi,0xd
c001b9d3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b9da:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b9e0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b9e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b9ea:	31 ff                	xor    edi,edi
c001b9ec:	83 c4 10             	add    esp,0x10
c001b9ef:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b9f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9f9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b9ff:	83 c5 20             	add    ebp,0x20
c001ba02:	01 f8                	add    eax,edi
c001ba04:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ba07:	52                   	push   edx
c001ba08:	68 00 01 00 00       	push   0x100
c001ba0d:	6a 00                	push   0x0
c001ba0f:	50                   	push   eax
c001ba10:	e8 db 4a fe ff       	call   c00004f0 <memset>
c001ba15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba19:	83 c4 10             	add    esp,0x10
c001ba1c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001ba22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001ba29:	01 f8                	add    eax,edi
c001ba2b:	81 c7 00 01 00 00    	add    edi,0x100
c001ba31:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ba34:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001ba3a:	75 b3                	jne    c001b9ef <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001ba3c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ba43:	50                   	push   eax
c001ba44:	50                   	push   eax
c001ba45:	53                   	push   ebx
c001ba46:	56                   	push   esi
c001ba47:	e8 b6 fe ff ff       	call   c001b902 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ba4c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ba53:	83 c4 2c             	add    esp,0x2c
c001ba56:	5b                   	pop    ebx
c001ba57:	5e                   	pop    esi
c001ba58:	5f                   	pop    edi
c001ba59:	5d                   	pop    ebp
c001ba5a:	c3                   	ret    
c001ba5b:	90                   	nop

c001ba5c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ba5c:	55                   	push   ebp
c001ba5d:	57                   	push   edi
c001ba5e:	56                   	push   esi
c001ba5f:	53                   	push   ebx
c001ba60:	31 db                	xor    ebx,ebx
c001ba62:	83 ec 0c             	sub    esp,0xc
c001ba65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba69:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ba6d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ba70:	f7 c7 01 00 00 00    	test   edi,0x1
c001ba76:	74 7a                	je     c001baf2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba78:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ba7c:	89 d8                	mov    eax,ebx
c001ba7e:	c1 e0 07             	shl    eax,0x7
c001ba81:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ba88:	55                   	push   ebp
c001ba89:	56                   	push   esi
c001ba8a:	e8 2b fe ff ff       	call   c001b8ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ba8f:	5a                   	pop    edx
c001ba90:	83 f8 01             	cmp    eax,0x1
c001ba93:	59                   	pop    ecx
c001ba94:	75 21                	jne    c001bab7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ba96:	50                   	push   eax
c001ba97:	53                   	push   ebx
c001ba98:	55                   	push   ebp
c001ba99:	56                   	push   esi
c001ba9a:	e8 ad fe ff ff       	call   c001b94c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba9f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001baa6:	e8 03 c0 fe ff       	call   c0007aae <malloc>
c001baab:	89 c5                	mov    ebp,eax
c001baad:	89 04 24             	mov    DWORD PTR [esp],eax
c001bab0:	e8 99 10 00 00       	call   c001cb4e <SATA::SATA()>
c001bab5:	eb 24                	jmp    c001badb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001bab7:	83 f8 04             	cmp    eax,0x4
c001baba:	75 36                	jne    c001baf2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001babc:	51                   	push   ecx
c001babd:	53                   	push   ebx
c001babe:	55                   	push   ebp
c001babf:	56                   	push   esi
c001bac0:	e8 87 fe ff ff       	call   c001b94c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bac5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001bacc:	e8 dd bf fe ff       	call   c0007aae <malloc>
c001bad1:	89 c5                	mov    ebp,eax
c001bad3:	89 04 24             	mov    DWORD PTR [esp],eax
c001bad6:	e8 d5 17 00 00       	call   c001d2b0 <SATAPI::SATAPI()>
c001badb:	58                   	pop    eax
c001badc:	5a                   	pop    edx
c001badd:	55                   	push   ebp
c001bade:	56                   	push   esi
c001badf:	e8 42 03 ff ff       	call   c000be26 <Device::addChild(Device*)>
c001bae4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bae7:	56                   	push   esi
c001bae8:	6a 00                	push   0x0
c001baea:	53                   	push   ebx
c001baeb:	55                   	push   ebp
c001baec:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001baef:	83 c4 20             	add    esp,0x20
c001baf2:	d1 ef                	shr    edi,1
c001baf4:	43                   	inc    ebx
c001baf5:	83 fb 20             	cmp    ebx,0x20
c001baf8:	0f 85 72 ff ff ff    	jne    c001ba70 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001bafe:	83 c4 0c             	add    esp,0xc
c001bb01:	5b                   	pop    ebx
c001bb02:	5e                   	pop    esi
c001bb03:	5f                   	pop    edi
c001bb04:	5d                   	pop    ebp
c001bb05:	c3                   	ret    

c001bb06 <SATABus::open(int, int, void*)>:
c001bb06:	83 ec 14             	sub    esp,0x14
c001bb09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb0d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001bb13:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bb19:	52                   	push   edx
c001bb1a:	50                   	push   eax
c001bb1b:	e8 3c ff ff ff       	call   c001ba5c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001bb20:	31 c0                	xor    eax,eax
c001bb22:	83 c4 1c             	add    esp,0x1c
c001bb25:	c3                   	ret    

c001bb26 <ATA::close(int, int, void*)>:
c001bb26:	83 ec 0c             	sub    esp,0xc
c001bb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bb33:	85 c0                	test   eax,eax
c001bb35:	74 0c                	je     c001bb43 <ATA::close(int, int, void*)+0x1d>
c001bb37:	83 ec 0c             	sub    esp,0xc
c001bb3a:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb3c:	50                   	push   eax
c001bb3d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bb40:	83 c4 10             	add    esp,0x10
c001bb43:	31 c0                	xor    eax,eax
c001bb45:	83 c4 0c             	add    esp,0xc
c001bb48:	c3                   	ret    
c001bb49:	90                   	nop

c001bb4a <ATA::powerSaving(PowerSavingLevel)>:
c001bb4a:	c3                   	ret    
c001bb4b:	90                   	nop

c001bb4c <ATA::ATA()>:
c001bb4c:	83 ec 0c             	sub    esp,0xc
c001bb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb53:	83 ec 04             	sub    esp,0x4
c001bb56:	68 00 02 00 00       	push   0x200
c001bb5b:	68 b1 1c 02 c0       	push   0xc0021cb1
c001bb60:	50                   	push   eax
c001bb61:	e8 8c 06 ff ff       	call   c000c1f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bb66:	83 c4 10             	add    esp,0x10
c001bb69:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c001bb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb72:	89 10                	mov    DWORD PTR [eax],edx
c001bb74:	90                   	nop
c001bb75:	83 c4 0c             	add    esp,0xc
c001bb78:	c3                   	ret    
c001bb79:	90                   	nop

c001bb7a <ATA::flush(bool)>:
c001bb7a:	53                   	push   ebx
c001bb7b:	83 ec 08             	sub    esp,0x8
c001bb7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb87:	83 f8 01             	cmp    eax,0x1
c001bb8a:	19 c0                	sbb    eax,eax
c001bb8c:	83 e0 fd             	and    eax,0xfffffffd
c001bb8f:	05 ea 00 00 00       	add    eax,0xea
c001bb94:	50                   	push   eax
c001bb95:	6a 07                	push   0x7
c001bb97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb9e:	50                   	push   eax
c001bb9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bba5:	e8 16 f1 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbaa:	83 c4 0c             	add    esp,0xc
c001bbad:	6a 00                	push   0x0
c001bbaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bbb6:	50                   	push   eax
c001bbb7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bbbd:	e8 e6 fb ff ff       	call   c001b7a8 <IDE::polling(unsigned char, unsigned int)>
c001bbc2:	83 c4 18             	add    esp,0x18
c001bbc5:	5b                   	pop    ebx
c001bbc6:	c3                   	ret    
c001bbc7:	90                   	nop

c001bbc8 <ATA::readyForCommand()>:
c001bbc8:	56                   	push   esi
c001bbc9:	53                   	push   ebx
c001bbca:	53                   	push   ebx
c001bbcb:	31 db                	xor    ebx,ebx
c001bbcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbd1:	51                   	push   ecx
c001bbd2:	6a 0c                	push   0xc
c001bbd4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbdb:	50                   	push   eax
c001bbdc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbe2:	e8 99 f1 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001bbe7:	83 c4 10             	add    esp,0x10
c001bbea:	a8 88                	test   al,0x88
c001bbec:	74 1f                	je     c001bc0d <ATA::readyForCommand()+0x45>
c001bbee:	43                   	inc    ebx
c001bbef:	83 fb 63             	cmp    ebx,0x63
c001bbf2:	7e dd                	jle    c001bbd1 <ATA::readyForCommand()+0x9>
c001bbf4:	83 ec 0c             	sub    esp,0xc
c001bbf7:	6a 0a                	push   0xa
c001bbf9:	e8 06 98 ff ff       	call   c0015404 <milliTenthSleep(unsigned int)>
c001bbfe:	83 c4 10             	add    esp,0x10
c001bc01:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bc07:	75 c8                	jne    c001bbd1 <ATA::readyForCommand()+0x9>
c001bc09:	31 c0                	xor    eax,eax
c001bc0b:	eb 02                	jmp    c001bc0f <ATA::readyForCommand()+0x47>
c001bc0d:	b0 01                	mov    al,0x1
c001bc0f:	5a                   	pop    edx
c001bc10:	5b                   	pop    ebx
c001bc11:	5e                   	pop    esi
c001bc12:	c3                   	ret    
c001bc13:	90                   	nop

c001bc14 <ATA::access(unsigned long long, int, void*, bool)>:
c001bc14:	55                   	push   ebp
c001bc15:	57                   	push   edi
c001bc16:	56                   	push   esi
c001bc17:	53                   	push   ebx
c001bc18:	83 ec 2c             	sub    esp,0x2c
c001bc1b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bc1f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bc23:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bc27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc2b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bc2f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bc33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bc37:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bc3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc41:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bc47:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc4b:	c1 e0 06             	shl    eax,0x6
c001bc4e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bc56:	74 5d                	je     c001bcb5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001bc58:	89 fa                	mov    edx,edi
c001bc5a:	89 f0                	mov    eax,esi
c001bc5c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001bc60:	c1 ea 1c             	shr    edx,0x1c
c001bc63:	89 d1                	mov    ecx,edx
c001bc65:	09 c1                	or     ecx,eax
c001bc67:	74 25                	je     c001bc8e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bc69:	31 ed                	xor    ebp,ebp
c001bc6b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bc72:	89 fa                	mov    edx,edi
c001bc74:	89 f0                	mov    eax,esi
c001bc76:	0f ad d0             	shrd   eax,edx,cl
c001bc79:	d3 ea                	shr    edx,cl
c001bc7b:	f6 c1 20             	test   cl,0x20
c001bc7e:	74 02                	je     c001bc82 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bc80:	89 d0                	mov    eax,edx
c001bc82:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bc86:	45                   	inc    ebp
c001bc87:	83 fd 06             	cmp    ebp,0x6
c001bc8a:	75 df                	jne    c001bc6b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bc8c:	eb 76                	jmp    c001bd04 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001bc8e:	89 f0                	mov    eax,esi
c001bc90:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bc95:	89 fa                	mov    edx,edi
c001bc97:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc9e:	0f ac d0 10          	shrd   eax,edx,0x10
c001bca2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bca7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bcab:	c1 ee 18             	shr    esi,0x18
c001bcae:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001bcb3:	eb 56                	jmp    c001bd0b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bcb5:	6a 00                	push   0x0
c001bcb7:	6a 3f                	push   0x3f
c001bcb9:	57                   	push   edi
c001bcba:	56                   	push   esi
c001bcbb:	e8 b0 2a 00 00       	call   c001e770 <__umoddi3>
c001bcc0:	83 c4 10             	add    esp,0x10
c001bcc3:	40                   	inc    eax
c001bcc4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bcc8:	6a 00                	push   0x0
c001bcca:	68 f0 03 00 00       	push   0x3f0
c001bccf:	57                   	push   edi
c001bcd0:	56                   	push   esi
c001bcd1:	e8 9a 29 00 00       	call   c001e670 <__udivdi3>
c001bcd6:	83 c4 10             	add    esp,0x10
c001bcd9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bcde:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bce5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bcea:	6a 00                	push   0x0
c001bcec:	6a 3f                	push   0x3f
c001bcee:	57                   	push   edi
c001bcef:	56                   	push   esi
c001bcf0:	e8 7b 29 00 00       	call   c001e670 <__udivdi3>
c001bcf5:	83 c4 10             	add    esp,0x10
c001bcf8:	83 e0 0f             	and    eax,0xf
c001bcfb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001bd00:	89 c6                	mov    esi,eax
c001bd02:	eb 07                	jmp    c001bd0b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bd04:	31 f6                	xor    esi,esi
c001bd06:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001bd0b:	bf 01 00 00 00       	mov    edi,0x1
c001bd10:	50                   	push   eax
c001bd11:	6a 00                	push   0x0
c001bd13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd1a:	50                   	push   eax
c001bd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bd1f:	e8 a4 f1 ff ff       	call   c001aec8 <IDE::enableIRQs(unsigned char, bool)>
c001bd24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd27:	e8 9c fe ff ff       	call   c001bbc8 <ATA::readyForCommand()>
c001bd2c:	83 c4 10             	add    esp,0x10
c001bd2f:	84 c0                	test   al,al
c001bd31:	0f 84 69 02 00 00    	je     c001bfa0 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001bd37:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bd3d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bd43:	c1 e0 04             	shl    eax,0x4
c001bd46:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bd4d:	09 c6                	or     esi,eax
c001bd4f:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001bd54:	75 05                	jne    c001bd5b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bd56:	83 ce a0             	or     esi,0xffffffa0
c001bd59:	eb 03                	jmp    c001bd5e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001bd5b:	83 ce e0             	or     esi,0xffffffe0
c001bd5e:	89 f0                	mov    eax,esi
c001bd60:	0f b6 f0             	movzx  esi,al
c001bd63:	56                   	push   esi
c001bd64:	6a 06                	push   0x6
c001bd66:	51                   	push   ecx
c001bd67:	52                   	push   edx
c001bd68:	e8 53 ef ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd6d:	83 c4 10             	add    esp,0x10
c001bd70:	6a 00                	push   0x0
c001bd72:	6a 01                	push   0x1
c001bd74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd7b:	50                   	push   eax
c001bd7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd82:	e8 39 ef ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd87:	83 c4 10             	add    esp,0x10
c001bd8a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001bd8f:	83 f8 02             	cmp    eax,0x2
c001bd92:	75 6e                	jne    c001be02 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001bd94:	6a 00                	push   0x0
c001bd96:	6a 08                	push   0x8
c001bd98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd9f:	50                   	push   eax
c001bda0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bda6:	e8 15 ef ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdab:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bdb0:	50                   	push   eax
c001bdb1:	6a 09                	push   0x9
c001bdb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdba:	50                   	push   eax
c001bdbb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdc1:	e8 fa ee ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc6:	83 c4 20             	add    esp,0x20
c001bdc9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bdce:	50                   	push   eax
c001bdcf:	6a 0a                	push   0xa
c001bdd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdd8:	50                   	push   eax
c001bdd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bddf:	e8 dc ee ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bde4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bde9:	50                   	push   eax
c001bdea:	6a 0b                	push   0xb
c001bdec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdf3:	50                   	push   eax
c001bdf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdfa:	e8 c1 ee ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdff:	83 c4 20             	add    esp,0x20
c001be02:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001be07:	50                   	push   eax
c001be08:	6a 02                	push   0x2
c001be0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be11:	50                   	push   eax
c001be12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be18:	e8 a3 ee ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be1d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001be22:	50                   	push   eax
c001be23:	6a 03                	push   0x3
c001be25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be2c:	50                   	push   eax
c001be2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be33:	e8 88 ee ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be38:	83 c4 20             	add    esp,0x20
c001be3b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001be40:	50                   	push   eax
c001be41:	6a 04                	push   0x4
c001be43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be4a:	50                   	push   eax
c001be4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be51:	e8 6a ee ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be56:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001be5b:	50                   	push   eax
c001be5c:	6a 05                	push   0x5
c001be5e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be65:	50                   	push   eax
c001be66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be6c:	e8 4f ee ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be71:	83 c4 20             	add    esp,0x20
c001be74:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be79:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001be7e:	74 11                	je     c001be91 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001be80:	b8 30 00 00 00       	mov    eax,0x30
c001be85:	83 fa 02             	cmp    edx,0x2
c001be88:	75 16                	jne    c001bea0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be8a:	b8 34 00 00 00       	mov    eax,0x34
c001be8f:	eb 0f                	jmp    c001bea0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be91:	b8 20 00 00 00       	mov    eax,0x20
c001be96:	83 fa 02             	cmp    edx,0x2
c001be99:	75 05                	jne    c001bea0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be9b:	b8 24 00 00 00       	mov    eax,0x24
c001bea0:	50                   	push   eax
c001bea1:	6a 07                	push   0x7
c001bea3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001beaa:	50                   	push   eax
c001beab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001beb1:	e8 0a ee ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beb6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001beba:	83 c4 10             	add    esp,0x10
c001bebd:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001bec2:	85 f6                	test   esi,esi
c001bec4:	0f 84 b3 00 00 00    	je     c001bf7d <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001beca:	50                   	push   eax
c001becb:	6a 01                	push   0x1
c001becd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bed4:	50                   	push   eax
c001bed5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bedb:	e8 c8 f8 ff ff       	call   c001b7a8 <IDE::polling(unsigned char, unsigned int)>
c001bee0:	83 c4 10             	add    esp,0x10
c001bee3:	0f b6 f8             	movzx  edi,al
c001bee6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001beec:	85 ff                	test   edi,edi
c001beee:	74 1d                	je     c001bf0d <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001bef0:	57                   	push   edi
c001bef1:	0f b6 d2             	movzx  edx,dl
c001bef4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001befb:	50                   	push   eax
c001befc:	52                   	push   edx
c001befd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf03:	e8 e6 f7 ff ff       	call   c001b6ee <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bf08:	e9 90 00 00 00       	jmp    c001bf9d <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001bf0d:	85 ed                	test   ebp,ebp
c001bf0f:	74 3b                	je     c001bf4c <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001bf11:	31 c9                	xor    ecx,ecx
c001bf13:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bf17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bf1b:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001bf1f:	50                   	push   eax
c001bf20:	50                   	push   eax
c001bf21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf28:	50                   	push   eax
c001bf29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf2f:	e8 7a ed ff ff       	call   c001acae <IDE::getBase(unsigned char)>
c001bf34:	89 c2                	mov    edx,eax
c001bf36:	89 f8                	mov    eax,edi
c001bf38:	66 ef                	out    dx,ax
c001bf3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bf3e:	83 c4 10             	add    esp,0x10
c001bf41:	41                   	inc    ecx
c001bf42:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001bf48:	75 c9                	jne    c001bf13 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001bf4a:	eb 23                	jmp    c001bf6f <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001bf4c:	0f b6 d2             	movzx  edx,dl
c001bf4f:	51                   	push   ecx
c001bf50:	51                   	push   ecx
c001bf51:	52                   	push   edx
c001bf52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf58:	e8 51 ed ff ff       	call   c001acae <IDE::getBase(unsigned char)>
c001bf5d:	b9 00 01 00 00       	mov    ecx,0x100
c001bf62:	89 c2                	mov    edx,eax
c001bf64:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bf68:	fc                   	cld    
c001bf69:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bf6c:	83 c4 10             	add    esp,0x10
c001bf6f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bf77:	4e                   	dec    esi
c001bf78:	e9 45 ff ff ff       	jmp    c001bec2 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001bf7d:	31 ff                	xor    edi,edi
c001bf7f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bf84:	74 1a                	je     c001bfa0 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001bf86:	50                   	push   eax
c001bf87:	50                   	push   eax
c001bf88:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001bf8d:	83 f8 02             	cmp    eax,0x2
c001bf90:	0f 94 c0             	sete   al
c001bf93:	0f b6 c0             	movzx  eax,al
c001bf96:	50                   	push   eax
c001bf97:	53                   	push   ebx
c001bf98:	e8 dd fb ff ff       	call   c001bb7a <ATA::flush(bool)>
c001bf9d:	83 c4 10             	add    esp,0x10
c001bfa0:	83 c4 2c             	add    esp,0x2c
c001bfa3:	89 f8                	mov    eax,edi
c001bfa5:	5b                   	pop    ebx
c001bfa6:	5e                   	pop    esi
c001bfa7:	5f                   	pop    edi
c001bfa8:	5d                   	pop    ebp
c001bfa9:	c3                   	ret    

c001bfaa <ATA::detectCHS()>:
c001bfaa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bfae:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bfb4:	c1 e0 06             	shl    eax,0x6
c001bfb7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bfbd:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bfc7:	c7 44 24 04 08 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c08
c001bfcf:	e9 4b 49 ff ff       	jmp    c001091f <KePanic(char const*)>

c001bfd4 <ATA::open(int, int, void*)>:
c001bfd4:	53                   	push   ebx
c001bfd5:	83 ec 08             	sub    esp,0x8
c001bfd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfdc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfe0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfe4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bfea:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bff0:	c1 e0 06             	shl    eax,0x6
c001bff3:	01 d0                	add    eax,edx
c001bff5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bffc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c002:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c009:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c013:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c019:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c020:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c027:	75 0c                	jne    c001c035 <ATA::open(int, int, void*)+0x61>
c001c029:	83 ec 0c             	sub    esp,0xc
c001c02c:	53                   	push   ebx
c001c02d:	e8 78 ff ff ff       	call   c001bfaa <ATA::detectCHS()>
c001c032:	83 c4 10             	add    esp,0x10
c001c035:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c03b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c041:	c1 e0 06             	shl    eax,0x6
c001c044:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c04b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c055:	d1 e8                	shr    eax,1
c001c057:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c05d:	6a 04                	push   0x4
c001c05f:	6a 0c                	push   0xc
c001c061:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c068:	50                   	push   eax
c001c069:	52                   	push   edx
c001c06a:	e8 51 ec ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c06f:	90                   	nop
c001c070:	90                   	nop
c001c071:	6a 00                	push   0x0
c001c073:	6a 0c                	push   0xc
c001c075:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c07c:	50                   	push   eax
c001c07d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c083:	e8 38 ec ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c088:	83 c4 14             	add    esp,0x14
c001c08b:	53                   	push   ebx
c001c08c:	e8 c9 01 ff ff       	call   c000c25a <PhysicalDisk::startCache()>
c001c091:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c094:	e8 05 14 ff ff       	call   c000d49e <createPartitionsForDisk(PhysicalDisk*)>
c001c099:	31 c0                	xor    eax,eax
c001c09b:	83 c4 18             	add    esp,0x18
c001c09e:	5b                   	pop    ebx
c001c09f:	c3                   	ret    

c001c0a0 <combineCharAndColour(char, unsigned char)>:
c001c0a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c0a5:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c0ab:	c1 e0 08             	shl    eax,0x8
c001c0ae:	09 d0                	or     eax,edx
c001c0b0:	c3                   	ret    

c001c0b1 <combineColours(unsigned char, unsigned char)>:
c001c0b1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c0b6:	c1 e0 04             	shl    eax,0x4
c001c0b9:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c0bd:	c3                   	ret    

c001c0be <ATA::read(unsigned long long, int, void*)>:
c001c0be:	55                   	push   ebp
c001c0bf:	57                   	push   edi
c001c0c0:	56                   	push   esi
c001c0c1:	be 04 00 00 00       	mov    esi,0x4
c001c0c6:	53                   	push   ebx
c001c0c7:	83 ec 0c             	sub    esp,0xc
c001c0ca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c0ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c0d2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c0d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c0d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c0dd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c0e3:	0f 87 a1 01 00 00    	ja     c001c28a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0e9:	be 06 00 00 00       	mov    esi,0x6
c001c0ee:	85 c9                	test   ecx,ecx
c001c0f0:	0f 84 94 01 00 00    	je     c001c28a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0f6:	55                   	push   ebp
c001c0f7:	55                   	push   ebp
c001c0f8:	6a 00                	push   0x0
c001c0fa:	51                   	push   ecx
c001c0fb:	53                   	push   ebx
c001c0fc:	52                   	push   edx
c001c0fd:	50                   	push   eax
c001c0fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c102:	e8 0d fb ff ff       	call   c001bc14 <ATA::access(unsigned long long, int, void*, bool)>
c001c107:	83 c4 20             	add    esp,0x20
c001c10a:	89 c6                	mov    esi,eax
c001c10c:	85 c0                	test   eax,eax
c001c10e:	0f 85 71 01 00 00    	jne    c001c285 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c114:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c11a:	89 da                	mov    edx,ebx
c001c11c:	50                   	push   eax
c001c11d:	bd 10 27 00 00       	mov    ebp,0x2710
c001c122:	50                   	push   eax
c001c123:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c129:	6a 0f                	push   0xf
c001c12b:	6a 00                	push   0x0
c001c12d:	e8 7f ff ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001c132:	59                   	pop    ecx
c001c133:	b9 0a 00 00 00       	mov    ecx,0xa
c001c138:	5b                   	pop    ebx
c001c139:	0f b6 d8             	movzx  ebx,al
c001c13c:	89 d0                	mov    eax,edx
c001c13e:	53                   	push   ebx
c001c13f:	99                   	cdq    
c001c140:	f7 fd                	idiv   ebp
c001c142:	99                   	cdq    
c001c143:	f7 f9                	idiv   ecx
c001c145:	83 c2 30             	add    edx,0x30
c001c148:	0f b6 d2             	movzx  edx,dl
c001c14b:	52                   	push   edx
c001c14c:	e8 4f ff ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c151:	5f                   	pop    edi
c001c152:	bf e8 03 00 00       	mov    edi,0x3e8
c001c157:	5a                   	pop    edx
c001c158:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c15e:	53                   	push   ebx
c001c15f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c164:	99                   	cdq    
c001c165:	f7 ff                	idiv   edi
c001c167:	99                   	cdq    
c001c168:	f7 f9                	idiv   ecx
c001c16a:	8d 42 30             	lea    eax,[edx+0x30]
c001c16d:	0f b6 c0             	movzx  eax,al
c001c170:	50                   	push   eax
c001c171:	e8 2a ff ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c176:	5f                   	pop    edi
c001c177:	bf 64 00 00 00       	mov    edi,0x64
c001c17c:	5a                   	pop    edx
c001c17d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c183:	53                   	push   ebx
c001c184:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c189:	99                   	cdq    
c001c18a:	f7 ff                	idiv   edi
c001c18c:	99                   	cdq    
c001c18d:	f7 f9                	idiv   ecx
c001c18f:	8d 42 30             	lea    eax,[edx+0x30]
c001c192:	0f b6 c0             	movzx  eax,al
c001c195:	50                   	push   eax
c001c196:	e8 05 ff ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c19b:	5a                   	pop    edx
c001c19c:	5a                   	pop    edx
c001c19d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c1a3:	53                   	push   ebx
c001c1a4:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c1a9:	99                   	cdq    
c001c1aa:	f7 f9                	idiv   ecx
c001c1ac:	99                   	cdq    
c001c1ad:	f7 f9                	idiv   ecx
c001c1af:	8d 42 30             	lea    eax,[edx+0x30]
c001c1b2:	0f b6 c0             	movzx  eax,al
c001c1b5:	50                   	push   eax
c001c1b6:	e8 e5 fe ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c1bb:	5a                   	pop    edx
c001c1bc:	5a                   	pop    edx
c001c1bd:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c1c3:	53                   	push   ebx
c001c1c4:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c1c9:	99                   	cdq    
c001c1ca:	f7 f9                	idiv   ecx
c001c1cc:	83 c2 30             	add    edx,0x30
c001c1cf:	0f b6 d2             	movzx  edx,dl
c001c1d2:	52                   	push   edx
c001c1d3:	e8 c8 fe ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c1d8:	5a                   	pop    edx
c001c1d9:	5a                   	pop    edx
c001c1da:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c1e0:	53                   	push   ebx
c001c1e1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1e6:	99                   	cdq    
c001c1e7:	f7 fd                	idiv   ebp
c001c1e9:	99                   	cdq    
c001c1ea:	f7 f9                	idiv   ecx
c001c1ec:	8d 42 30             	lea    eax,[edx+0x30]
c001c1ef:	0f b6 c0             	movzx  eax,al
c001c1f2:	50                   	push   eax
c001c1f3:	e8 a8 fe ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c1f8:	5d                   	pop    ebp
c001c1f9:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c1fe:	5a                   	pop    edx
c001c1ff:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c205:	53                   	push   ebx
c001c206:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c20b:	99                   	cdq    
c001c20c:	f7 fd                	idiv   ebp
c001c20e:	99                   	cdq    
c001c20f:	f7 f9                	idiv   ecx
c001c211:	8d 42 30             	lea    eax,[edx+0x30]
c001c214:	0f b6 c0             	movzx  eax,al
c001c217:	50                   	push   eax
c001c218:	e8 83 fe ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c21d:	5d                   	pop    ebp
c001c21e:	5a                   	pop    edx
c001c21f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c225:	53                   	push   ebx
c001c226:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c22b:	99                   	cdq    
c001c22c:	f7 ff                	idiv   edi
c001c22e:	99                   	cdq    
c001c22f:	f7 f9                	idiv   ecx
c001c231:	8d 42 30             	lea    eax,[edx+0x30]
c001c234:	0f b6 c0             	movzx  eax,al
c001c237:	50                   	push   eax
c001c238:	e8 63 fe ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c23d:	5f                   	pop    edi
c001c23e:	5d                   	pop    ebp
c001c23f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c245:	53                   	push   ebx
c001c246:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c24b:	99                   	cdq    
c001c24c:	f7 f9                	idiv   ecx
c001c24e:	99                   	cdq    
c001c24f:	f7 f9                	idiv   ecx
c001c251:	8d 42 30             	lea    eax,[edx+0x30]
c001c254:	0f b6 c0             	movzx  eax,al
c001c257:	50                   	push   eax
c001c258:	e8 43 fe ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c25d:	5a                   	pop    edx
c001c25e:	5f                   	pop    edi
c001c25f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c265:	53                   	push   ebx
c001c266:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c26b:	99                   	cdq    
c001c26c:	f7 f9                	idiv   ecx
c001c26e:	83 c2 30             	add    edx,0x30
c001c271:	0f b6 d2             	movzx  edx,dl
c001c274:	52                   	push   edx
c001c275:	e8 26 fe ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c27a:	83 c4 10             	add    esp,0x10
c001c27d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c283:	eb 05                	jmp    c001c28a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c285:	be 01 00 00 00       	mov    esi,0x1
c001c28a:	83 c4 0c             	add    esp,0xc
c001c28d:	89 f0                	mov    eax,esi
c001c28f:	5b                   	pop    ebx
c001c290:	5e                   	pop    esi
c001c291:	5f                   	pop    edi
c001c292:	5d                   	pop    ebp
c001c293:	c3                   	ret    

c001c294 <ATA::write(unsigned long long, int, void*)>:
c001c294:	55                   	push   ebp
c001c295:	57                   	push   edi
c001c296:	56                   	push   esi
c001c297:	be 04 00 00 00       	mov    esi,0x4
c001c29c:	53                   	push   ebx
c001c29d:	83 ec 0c             	sub    esp,0xc
c001c2a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c2a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2a8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c2ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c2af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c2b3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c2b9:	0f 87 9c 01 00 00    	ja     c001c45b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c2bf:	be 06 00 00 00       	mov    esi,0x6
c001c2c4:	85 c9                	test   ecx,ecx
c001c2c6:	0f 84 8f 01 00 00    	je     c001c45b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c2cc:	55                   	push   ebp
c001c2cd:	55                   	push   ebp
c001c2ce:	6a 01                	push   0x1
c001c2d0:	51                   	push   ecx
c001c2d1:	53                   	push   ebx
c001c2d2:	52                   	push   edx
c001c2d3:	50                   	push   eax
c001c2d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2d8:	e8 37 f9 ff ff       	call   c001bc14 <ATA::access(unsigned long long, int, void*, bool)>
c001c2dd:	83 c4 20             	add    esp,0x20
c001c2e0:	89 c6                	mov    esi,eax
c001c2e2:	85 c0                	test   eax,eax
c001c2e4:	0f 85 6c 01 00 00    	jne    c001c456 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c2ea:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c2f0:	bd 10 27 00 00       	mov    ebp,0x2710
c001c2f5:	50                   	push   eax
c001c2f6:	50                   	push   eax
c001c2f7:	6a 0f                	push   0xf
c001c2f9:	6a 00                	push   0x0
c001c2fb:	e8 b1 fd ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001c300:	5a                   	pop    edx
c001c301:	0f b6 d8             	movzx  ebx,al
c001c304:	59                   	pop    ecx
c001c305:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c30a:	53                   	push   ebx
c001c30b:	b9 0a 00 00 00       	mov    ecx,0xa
c001c310:	99                   	cdq    
c001c311:	f7 fd                	idiv   ebp
c001c313:	99                   	cdq    
c001c314:	f7 f9                	idiv   ecx
c001c316:	8d 42 30             	lea    eax,[edx+0x30]
c001c319:	0f b6 c0             	movzx  eax,al
c001c31c:	50                   	push   eax
c001c31d:	e8 7e fd ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c322:	5f                   	pop    edi
c001c323:	bf e8 03 00 00       	mov    edi,0x3e8
c001c328:	5a                   	pop    edx
c001c329:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c32f:	53                   	push   ebx
c001c330:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c335:	99                   	cdq    
c001c336:	f7 ff                	idiv   edi
c001c338:	99                   	cdq    
c001c339:	f7 f9                	idiv   ecx
c001c33b:	8d 42 30             	lea    eax,[edx+0x30]
c001c33e:	0f b6 c0             	movzx  eax,al
c001c341:	50                   	push   eax
c001c342:	e8 59 fd ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c347:	5f                   	pop    edi
c001c348:	bf 64 00 00 00       	mov    edi,0x64
c001c34d:	5a                   	pop    edx
c001c34e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c354:	53                   	push   ebx
c001c355:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c35a:	99                   	cdq    
c001c35b:	f7 ff                	idiv   edi
c001c35d:	99                   	cdq    
c001c35e:	f7 f9                	idiv   ecx
c001c360:	8d 42 30             	lea    eax,[edx+0x30]
c001c363:	0f b6 c0             	movzx  eax,al
c001c366:	50                   	push   eax
c001c367:	e8 34 fd ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c36c:	5a                   	pop    edx
c001c36d:	5a                   	pop    edx
c001c36e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c374:	53                   	push   ebx
c001c375:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c37a:	99                   	cdq    
c001c37b:	f7 f9                	idiv   ecx
c001c37d:	99                   	cdq    
c001c37e:	f7 f9                	idiv   ecx
c001c380:	8d 42 30             	lea    eax,[edx+0x30]
c001c383:	0f b6 c0             	movzx  eax,al
c001c386:	50                   	push   eax
c001c387:	e8 14 fd ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c38c:	5a                   	pop    edx
c001c38d:	5a                   	pop    edx
c001c38e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c394:	53                   	push   ebx
c001c395:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c39a:	99                   	cdq    
c001c39b:	f7 f9                	idiv   ecx
c001c39d:	8d 42 30             	lea    eax,[edx+0x30]
c001c3a0:	0f b6 c0             	movzx  eax,al
c001c3a3:	50                   	push   eax
c001c3a4:	e8 f7 fc ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c3a9:	5a                   	pop    edx
c001c3aa:	5a                   	pop    edx
c001c3ab:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c3b1:	53                   	push   ebx
c001c3b2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3b7:	99                   	cdq    
c001c3b8:	f7 fd                	idiv   ebp
c001c3ba:	99                   	cdq    
c001c3bb:	f7 f9                	idiv   ecx
c001c3bd:	8d 42 30             	lea    eax,[edx+0x30]
c001c3c0:	0f b6 c0             	movzx  eax,al
c001c3c3:	50                   	push   eax
c001c3c4:	e8 d7 fc ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c3c9:	5d                   	pop    ebp
c001c3ca:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c3cf:	5a                   	pop    edx
c001c3d0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c3d6:	53                   	push   ebx
c001c3d7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3dc:	99                   	cdq    
c001c3dd:	f7 fd                	idiv   ebp
c001c3df:	99                   	cdq    
c001c3e0:	f7 f9                	idiv   ecx
c001c3e2:	8d 42 30             	lea    eax,[edx+0x30]
c001c3e5:	0f b6 c0             	movzx  eax,al
c001c3e8:	50                   	push   eax
c001c3e9:	e8 b2 fc ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c3ee:	5d                   	pop    ebp
c001c3ef:	5a                   	pop    edx
c001c3f0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c3f6:	53                   	push   ebx
c001c3f7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3fc:	99                   	cdq    
c001c3fd:	f7 ff                	idiv   edi
c001c3ff:	99                   	cdq    
c001c400:	f7 f9                	idiv   ecx
c001c402:	8d 42 30             	lea    eax,[edx+0x30]
c001c405:	0f b6 c0             	movzx  eax,al
c001c408:	50                   	push   eax
c001c409:	e8 92 fc ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c40e:	5f                   	pop    edi
c001c40f:	5d                   	pop    ebp
c001c410:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c416:	53                   	push   ebx
c001c417:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c41c:	99                   	cdq    
c001c41d:	f7 f9                	idiv   ecx
c001c41f:	99                   	cdq    
c001c420:	f7 f9                	idiv   ecx
c001c422:	8d 42 30             	lea    eax,[edx+0x30]
c001c425:	0f b6 c0             	movzx  eax,al
c001c428:	50                   	push   eax
c001c429:	e8 72 fc ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c42e:	5a                   	pop    edx
c001c42f:	5f                   	pop    edi
c001c430:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c436:	53                   	push   ebx
c001c437:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c43c:	99                   	cdq    
c001c43d:	f7 f9                	idiv   ecx
c001c43f:	83 c2 30             	add    edx,0x30
c001c442:	0f b6 d2             	movzx  edx,dl
c001c445:	52                   	push   edx
c001c446:	e8 55 fc ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001c44b:	83 c4 10             	add    esp,0x10
c001c44e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c454:	eb 05                	jmp    c001c45b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c456:	be 01 00 00 00       	mov    esi,0x1
c001c45b:	83 c4 0c             	add    esp,0xc
c001c45e:	89 f0                	mov    eax,esi
c001c460:	5b                   	pop    ebx
c001c461:	5e                   	pop    esi
c001c462:	5f                   	pop    edi
c001c463:	5d                   	pop    ebp
c001c464:	c3                   	ret    
c001c465:	90                   	nop

c001c466 <ATAPI::write(unsigned long long, int, void*)>:
c001c466:	b8 03 00 00 00       	mov    eax,0x3
c001c46b:	c3                   	ret    

c001c46c <ATAPI::close(int, int, void*)>:
c001c46c:	83 ec 0c             	sub    esp,0xc
c001c46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c473:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c479:	85 c0                	test   eax,eax
c001c47b:	74 0c                	je     c001c489 <ATAPI::close(int, int, void*)+0x1d>
c001c47d:	83 ec 0c             	sub    esp,0xc
c001c480:	8b 10                	mov    edx,DWORD PTR [eax]
c001c482:	50                   	push   eax
c001c483:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c486:	83 c4 10             	add    esp,0x10
c001c489:	31 c0                	xor    eax,eax
c001c48b:	83 c4 0c             	add    esp,0xc
c001c48e:	c3                   	ret    
c001c48f:	90                   	nop

c001c490 <ATAPI::ATAPI()>:
c001c490:	83 ec 0c             	sub    esp,0xc
c001c493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c497:	83 ec 04             	sub    esp,0x4
c001c49a:	68 00 08 00 00       	push   0x800
c001c49f:	68 51 1d 02 c0       	push   0xc0021d51
c001c4a4:	50                   	push   eax
c001c4a5:	e8 48 fd fe ff       	call   c000c1f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c4aa:	83 c4 10             	add    esp,0x10
c001c4ad:	ba 6c 1c 02 c0       	mov    edx,0xc0021c6c
c001c4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b6:	89 10                	mov    DWORD PTR [eax],edx
c001c4b8:	90                   	nop
c001c4b9:	83 c4 0c             	add    esp,0xc
c001c4bc:	c3                   	ret    
c001c4bd:	90                   	nop

c001c4be <ATAPI::readyForCommand()>:
c001c4be:	56                   	push   esi
c001c4bf:	53                   	push   ebx
c001c4c0:	53                   	push   ebx
c001c4c1:	31 db                	xor    ebx,ebx
c001c4c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c4c7:	51                   	push   ecx
c001c4c8:	6a 0c                	push   0xc
c001c4ca:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c4d1:	50                   	push   eax
c001c4d2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c4d8:	e8 a3 e8 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001c4dd:	83 c4 10             	add    esp,0x10
c001c4e0:	a8 88                	test   al,0x88
c001c4e2:	74 25                	je     c001c509 <ATAPI::readyForCommand()+0x4b>
c001c4e4:	43                   	inc    ebx
c001c4e5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c4eb:	7e da                	jle    c001c4c7 <ATAPI::readyForCommand()+0x9>
c001c4ed:	83 ec 0c             	sub    esp,0xc
c001c4f0:	68 5e 01 00 00       	push   0x15e
c001c4f5:	e8 0a 8f ff ff       	call   c0015404 <milliTenthSleep(unsigned int)>
c001c4fa:	83 c4 10             	add    esp,0x10
c001c4fd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c503:	75 c2                	jne    c001c4c7 <ATAPI::readyForCommand()+0x9>
c001c505:	31 c0                	xor    eax,eax
c001c507:	eb 02                	jmp    c001c50b <ATAPI::readyForCommand()+0x4d>
c001c509:	b0 01                	mov    al,0x1
c001c50b:	5a                   	pop    edx
c001c50c:	5b                   	pop    ebx
c001c50d:	5e                   	pop    esi
c001c50e:	c3                   	ret    
c001c50f:	90                   	nop

c001c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c510:	55                   	push   ebp
c001c511:	57                   	push   edi
c001c512:	56                   	push   esi
c001c513:	53                   	push   ebx
c001c514:	83 ec 20             	sub    esp,0x20
c001c517:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c51b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c51f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c523:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c527:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c52b:	6a 01                	push   0x1
c001c52d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c534:	50                   	push   eax
c001c535:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c53b:	e8 88 e9 ff ff       	call   c001aec8 <IDE::enableIRQs(unsigned char, bool)>
c001c540:	5e                   	pop    esi
c001c541:	58                   	pop    eax
c001c542:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c549:	50                   	push   eax
c001c54a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c550:	e8 45 e7 ff ff       	call   c001ac9a <IDE::prepareInterrupt(unsigned char)>
c001c555:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c558:	e8 61 ff ff ff       	call   c001c4be <ATAPI::readyForCommand()>
c001c55d:	83 c4 10             	add    esp,0x10
c001c560:	84 c0                	test   al,al
c001c562:	75 0a                	jne    c001c56e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c564:	bb 01 00 00 00       	mov    ebx,0x1
c001c569:	e9 60 02 00 00       	jmp    c001c7ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c56e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c574:	c1 e0 04             	shl    eax,0x4
c001c577:	0f b6 c0             	movzx  eax,al
c001c57a:	50                   	push   eax
c001c57b:	6a 06                	push   0x6
c001c57d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c584:	50                   	push   eax
c001c585:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c58b:	e8 30 e7 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c590:	6a 00                	push   0x0
c001c592:	6a 01                	push   0x1
c001c594:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c59b:	50                   	push   eax
c001c59c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5a2:	e8 19 e7 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5a7:	83 c4 20             	add    esp,0x20
c001c5aa:	0f b6 c3             	movzx  eax,bl
c001c5ad:	0f b6 df             	movzx  ebx,bh
c001c5b0:	50                   	push   eax
c001c5b1:	6a 04                	push   0x4
c001c5b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5ba:	50                   	push   eax
c001c5bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5c1:	e8 fa e6 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5c6:	53                   	push   ebx
c001c5c7:	6a 05                	push   0x5
c001c5c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5d0:	50                   	push   eax
c001c5d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5d7:	e8 e4 e6 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5dc:	83 c4 20             	add    esp,0x20
c001c5df:	68 a0 00 00 00       	push   0xa0
c001c5e4:	6a 07                	push   0x7
c001c5e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5ed:	50                   	push   eax
c001c5ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5f4:	e8 c7 e6 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5f9:	83 c4 0c             	add    esp,0xc
c001c5fc:	6a 01                	push   0x1
c001c5fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c605:	50                   	push   eax
c001c606:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c60c:	e8 97 f1 ff ff       	call   c001b7a8 <IDE::polling(unsigned char, unsigned int)>
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	0f b6 d8             	movzx  ebx,al
c001c617:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c61d:	85 db                	test   ebx,ebx
c001c61f:	74 20                	je     c001c641 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c621:	53                   	push   ebx
c001c622:	0f b6 c0             	movzx  eax,al
c001c625:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c62c:	52                   	push   edx
c001c62d:	50                   	push   eax
c001c62e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c634:	e8 b5 f0 ff ff       	call   c001b6ee <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c639:	83 c4 10             	add    esp,0x10
c001c63c:	e9 8d 01 00 00       	jmp    c001c7ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c641:	0f b6 c0             	movzx  eax,al
c001c644:	53                   	push   ebx
c001c645:	53                   	push   ebx
c001c646:	50                   	push   eax
c001c647:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c64d:	e8 5c e6 ff ff       	call   c001acae <IDE::getBase(unsigned char)>
c001c652:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c656:	b9 06 00 00 00       	mov    ecx,0x6
c001c65b:	89 c2                	mov    edx,eax
c001c65d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c660:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c664:	83 c4 10             	add    esp,0x10
c001c667:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c66c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c670:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c676:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c67d:	85 db                	test   ebx,ebx
c001c67f:	0f 84 ec 00 00 00    	je     c001c771 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001c685:	51                   	push   ecx
c001c686:	51                   	push   ecx
c001c687:	52                   	push   edx
c001c688:	50                   	push   eax
c001c689:	e8 a0 e7 ff ff       	call   c001ae2e <IDE::waitInterrupt(unsigned char)>
c001c68e:	83 c4 10             	add    esp,0x10
c001c691:	84 c0                	test   al,al
c001c693:	0f 84 cb fe ff ff    	je     c001c564 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c699:	56                   	push   esi
c001c69a:	56                   	push   esi
c001c69b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6a2:	50                   	push   eax
c001c6a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6a9:	e8 ec e5 ff ff       	call   c001ac9a <IDE::prepareInterrupt(unsigned char)>
c001c6ae:	83 c4 0c             	add    esp,0xc
c001c6b1:	6a 04                	push   0x4
c001c6b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6ba:	50                   	push   eax
c001c6bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6c1:	e8 ba e6 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001c6c6:	83 c4 0c             	add    esp,0xc
c001c6c9:	89 c6                	mov    esi,eax
c001c6cb:	6a 05                	push   0x5
c001c6cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6d4:	50                   	push   eax
c001c6d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6db:	e8 a0 e6 ff ff       	call   c001ad80 <IDE::read(unsigned char, unsigned char)>
c001c6e0:	89 f1                	mov    ecx,esi
c001c6e2:	0f b6 c0             	movzx  eax,al
c001c6e5:	0f b6 f1             	movzx  esi,cl
c001c6e8:	c1 e0 08             	shl    eax,0x8
c001c6eb:	09 c6                	or     esi,eax
c001c6ed:	d1 fe                	sar    esi,1
c001c6ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001c6f3:	83 c4 10             	add    esp,0x10
c001c6f6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c6fb:	74 41                	je     c001c73e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001c6fd:	31 c9                	xor    ecx,ecx
c001c6ff:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c705:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c70c:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001c710:	75 0a                	jne    c001c71c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001c712:	01 c9                	add    ecx,ecx
c001c714:	01 cd                	add    ebp,ecx
c001c716:	4b                   	dec    ebx
c001c717:	e9 54 ff ff ff       	jmp    c001c670 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001c71c:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001c721:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c725:	51                   	push   ecx
c001c726:	51                   	push   ecx
c001c727:	52                   	push   edx
c001c728:	50                   	push   eax
c001c729:	e8 80 e5 ff ff       	call   c001acae <IDE::getBase(unsigned char)>
c001c72e:	89 c2                	mov    edx,eax
c001c730:	89 f0                	mov    eax,esi
c001c732:	66 ef                	out    dx,ax
c001c734:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c738:	83 c4 10             	add    esp,0x10
c001c73b:	41                   	inc    ecx
c001c73c:	eb c1                	jmp    c001c6ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001c73e:	31 f6                	xor    esi,esi
c001c740:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c746:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c74d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c751:	75 06                	jne    c001c759 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001c753:	01 f6                	add    esi,esi
c001c755:	01 f5                	add    ebp,esi
c001c757:	eb bd                	jmp    c001c716 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c759:	51                   	push   ecx
c001c75a:	51                   	push   ecx
c001c75b:	52                   	push   edx
c001c75c:	50                   	push   eax
c001c75d:	e8 4c e5 ff ff       	call   c001acae <IDE::getBase(unsigned char)>
c001c762:	89 c2                	mov    edx,eax
c001c764:	66 ed                	in     ax,dx
c001c766:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c76b:	83 c4 10             	add    esp,0x10
c001c76e:	46                   	inc    esi
c001c76f:	eb cf                	jmp    c001c740 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001c771:	51                   	push   ecx
c001c772:	51                   	push   ecx
c001c773:	52                   	push   edx
c001c774:	50                   	push   eax
c001c775:	e8 b4 e6 ff ff       	call   c001ae2e <IDE::waitInterrupt(unsigned char)>
c001c77a:	83 c4 10             	add    esp,0x10
c001c77d:	84 c0                	test   al,al
c001c77f:	0f 84 df fd ff ff    	je     c001c564 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c785:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c78a:	52                   	push   edx
c001c78b:	52                   	push   edx
c001c78c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c793:	50                   	push   eax
c001c794:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c79a:	e8 fb e4 ff ff       	call   c001ac9a <IDE::prepareInterrupt(unsigned char)>
c001c79f:	83 c4 10             	add    esp,0x10
c001c7a2:	50                   	push   eax
c001c7a3:	50                   	push   eax
c001c7a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c7ab:	50                   	push   eax
c001c7ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c7b2:	e8 f7 e4 ff ff       	call   c001acae <IDE::getBase(unsigned char)>
c001c7b7:	8d 50 07             	lea    edx,[eax+0x7]
c001c7ba:	ec                   	in     al,dx
c001c7bb:	83 c4 10             	add    esp,0x10
c001c7be:	a8 88                	test   al,0x88
c001c7c0:	74 0a                	je     c001c7cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001c7c2:	4b                   	dec    ebx
c001c7c3:	75 dd                	jne    c001c7a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001c7c5:	bb 02 00 00 00       	mov    ebx,0x2
c001c7ca:	eb 02                	jmp    c001c7ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c7cc:	31 db                	xor    ebx,ebx
c001c7ce:	83 c4 1c             	add    esp,0x1c
c001c7d1:	89 d8                	mov    eax,ebx
c001c7d3:	5b                   	pop    ebx
c001c7d4:	5e                   	pop    esi
c001c7d5:	5f                   	pop    edi
c001c7d6:	5d                   	pop    ebp
c001c7d7:	c3                   	ret    

c001c7d8 <ATAPI::diskRemoved()>:
c001c7d8:	53                   	push   ebx
c001c7d9:	83 ec 14             	sub    esp,0x14
c001c7dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c7e0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c7e7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c7ed:	e8 9c 09 ff ff       	call   c000d18e <LogicalDisk::unmount()>
c001c7f2:	58                   	pop    eax
c001c7f3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c7f9:	e8 72 13 ff ff       	call   c000db70 <VCache::writeWriteBuffer()>
c001c7fe:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c804:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c808:	83 c4 18             	add    esp,0x18
c001c80b:	5b                   	pop    ebx
c001c80c:	e9 4f 13 ff ff       	jmp    c000db60 <VCache::invalidateReadBuffer()>
c001c811:	90                   	nop

c001c812 <ATAPI::eject()>:
c001c812:	57                   	push   edi
c001c813:	b9 03 00 00 00       	mov    ecx,0x3
c001c818:	53                   	push   ebx
c001c819:	83 ec 14             	sub    esp,0x14
c001c81c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c820:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c824:	fc                   	cld    
c001c825:	31 c0                	xor    eax,eax
c001c827:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c829:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c82e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c833:	50                   	push   eax
c001c834:	50                   	push   eax
c001c835:	6a 00                	push   0x0
c001c837:	6a 00                	push   0x0
c001c839:	6a 00                	push   0x0
c001c83b:	6a 02                	push   0x2
c001c83d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c841:	50                   	push   eax
c001c842:	53                   	push   ebx
c001c843:	e8 c8 fc ff ff       	call   c001c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c848:	83 c4 14             	add    esp,0x14
c001c84b:	53                   	push   ebx
c001c84c:	e8 87 ff ff ff       	call   c001c7d8 <ATAPI::diskRemoved()>
c001c851:	83 c4 24             	add    esp,0x24
c001c854:	31 c0                	xor    eax,eax
c001c856:	5b                   	pop    ebx
c001c857:	5f                   	pop    edi
c001c858:	c3                   	ret    
c001c859:	90                   	nop

c001c85a <ATAPI::diskInserted()>:
c001c85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c85e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c865:	c3                   	ret    

c001c866 <ATAPI::detectMedia()>:
c001c866:	56                   	push   esi
c001c867:	53                   	push   ebx
c001c868:	83 ec 28             	sub    esp,0x28
c001c86b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c86f:	6a 0c                	push   0xc
c001c871:	6a 00                	push   0x0
c001c873:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c877:	56                   	push   esi
c001c878:	e8 73 3c fe ff       	call   c00004f0 <memset>
c001c87d:	58                   	pop    eax
c001c87e:	5a                   	pop    edx
c001c87f:	6a 00                	push   0x0
c001c881:	6a 00                	push   0x0
c001c883:	6a 00                	push   0x0
c001c885:	6a 00                	push   0x0
c001c887:	56                   	push   esi
c001c888:	53                   	push   ebx
c001c889:	e8 82 fc ff ff       	call   c001c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c88e:	83 c4 1c             	add    esp,0x1c
c001c891:	6a 0c                	push   0xc
c001c893:	6a 00                	push   0x0
c001c895:	56                   	push   esi
c001c896:	e8 55 3c fe ff       	call   c00004f0 <memset>
c001c89b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c8a0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c8a5:	59                   	pop    ecx
c001c8a6:	58                   	pop    eax
c001c8a7:	6a 01                	push   0x1
c001c8a9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c8ad:	50                   	push   eax
c001c8ae:	6a 00                	push   0x0
c001c8b0:	6a 12                	push   0x12
c001c8b2:	56                   	push   esi
c001c8b3:	53                   	push   ebx
c001c8b4:	e8 57 fc ff ff       	call   c001c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c8b9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c8bd:	83 c4 20             	add    esp,0x20
c001c8c0:	83 e0 7f             	and    eax,0x7f
c001c8c3:	83 f8 70             	cmp    eax,0x70
c001c8c6:	74 15                	je     c001c8dd <ATAPI::detectMedia()+0x77>
c001c8c8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8cf:	75 0c                	jne    c001c8dd <ATAPI::detectMedia()+0x77>
c001c8d1:	83 ec 0c             	sub    esp,0xc
c001c8d4:	53                   	push   ebx
c001c8d5:	e8 80 ff ff ff       	call   c001c85a <ATAPI::diskInserted()>
c001c8da:	83 c4 10             	add    esp,0x10
c001c8dd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c8e1:	83 e0 0f             	and    eax,0xf
c001c8e4:	83 f8 02             	cmp    eax,0x2
c001c8e7:	75 1b                	jne    c001c904 <ATAPI::detectMedia()+0x9e>
c001c8e9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c8ee:	75 2d                	jne    c001c91d <ATAPI::detectMedia()+0xb7>
c001c8f0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8f7:	74 24                	je     c001c91d <ATAPI::detectMedia()+0xb7>
c001c8f9:	83 ec 0c             	sub    esp,0xc
c001c8fc:	53                   	push   ebx
c001c8fd:	e8 d6 fe ff ff       	call   c001c7d8 <ATAPI::diskRemoved()>
c001c902:	eb 16                	jmp    c001c91a <ATAPI::detectMedia()+0xb4>
c001c904:	85 c0                	test   eax,eax
c001c906:	75 15                	jne    c001c91d <ATAPI::detectMedia()+0xb7>
c001c908:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c90f:	75 0c                	jne    c001c91d <ATAPI::detectMedia()+0xb7>
c001c911:	83 ec 0c             	sub    esp,0xc
c001c914:	53                   	push   ebx
c001c915:	e8 40 ff ff ff       	call   c001c85a <ATAPI::diskInserted()>
c001c91a:	83 c4 10             	add    esp,0x10
c001c91d:	83 c4 24             	add    esp,0x24
c001c920:	5b                   	pop    ebx
c001c921:	5e                   	pop    esi
c001c922:	c3                   	ret    
c001c923:	90                   	nop

c001c924 <ATAPI::open(int, int, void*)>:
c001c924:	56                   	push   esi
c001c925:	53                   	push   ebx
c001c926:	50                   	push   eax
c001c927:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c92b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c92f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c933:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c939:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c93f:	c1 e0 06             	shl    eax,0x6
c001c942:	01 d0                	add    eax,edx
c001c944:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c94b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c951:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c958:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c962:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c968:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c96f:	6a 04                	push   0x4
c001c971:	6a 0c                	push   0xc
c001c973:	51                   	push   ecx
c001c974:	52                   	push   edx
c001c975:	e8 46 e3 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c97a:	90                   	nop
c001c97b:	90                   	nop
c001c97c:	6a 00                	push   0x0
c001c97e:	6a 0c                	push   0xc
c001c980:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c987:	50                   	push   eax
c001c988:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c98e:	e8 2d e3 ff ff       	call   c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c993:	83 c4 14             	add    esp,0x14
c001c996:	68 78 01 00 00       	push   0x178
c001c99b:	e8 0e b1 fe ff       	call   c0007aae <malloc>
c001c9a0:	83 c4 0c             	add    esp,0xc
c001c9a3:	89 c6                	mov    esi,eax
c001c9a5:	6a 00                	push   0x0
c001c9a7:	68 ff ff ff 7f       	push   0x7fffffff
c001c9ac:	6a 00                	push   0x0
c001c9ae:	6a 00                	push   0x0
c001c9b0:	53                   	push   ebx
c001c9b1:	68 03 1e 02 c0       	push   0xc0021e03
c001c9b6:	50                   	push   eax
c001c9b7:	e8 10 06 ff ff       	call   c000cfcc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c9bc:	83 c4 14             	add    esp,0x14
c001c9bf:	56                   	push   esi
c001c9c0:	e8 c7 06 ff ff       	call   c000d08c <LogicalDisk::assignDriveLetter()>
c001c9c5:	5a                   	pop    edx
c001c9c6:	0f be c0             	movsx  eax,al
c001c9c9:	59                   	pop    ecx
c001c9ca:	50                   	push   eax
c001c9cb:	68 54 1c 02 c0       	push   0xc0021c54
c001c9d0:	e8 1c e0 fe ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001c9d5:	58                   	pop    eax
c001c9d6:	5a                   	pop    edx
c001c9d7:	56                   	push   esi
c001c9d8:	53                   	push   ebx
c001c9d9:	e8 48 f4 fe ff       	call   c000be26 <Device::addChild(Device*)>
c001c9de:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c9e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9e7:	e8 6e f8 fe ff       	call   c000c25a <PhysicalDisk::startCache()>
c001c9ec:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c9f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9f6:	e8 6b fe ff ff       	call   c001c866 <ATAPI::detectMedia()>
c001c9fb:	83 c4 14             	add    esp,0x14
c001c9fe:	31 c0                	xor    eax,eax
c001ca00:	5b                   	pop    ebx
c001ca01:	5e                   	pop    esi
c001ca02:	c3                   	ret    
c001ca03:	90                   	nop

c001ca04 <ATAPI::read(unsigned long long, int, void*)>:
c001ca04:	55                   	push   ebp
c001ca05:	57                   	push   edi
c001ca06:	56                   	push   esi
c001ca07:	53                   	push   ebx
c001ca08:	83 ec 1c             	sub    esp,0x1c
c001ca0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ca0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ca13:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ca17:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca1e:	74 3c                	je     c001ca5c <ATAPI::read(unsigned long long, int, void*)+0x58>
c001ca20:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ca24:	b9 03 00 00 00       	mov    ecx,0x3
c001ca29:	fc                   	cld    
c001ca2a:	31 c0                	xor    eax,eax
c001ca2c:	0f ce                	bswap  esi
c001ca2e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ca30:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ca35:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ca39:	89 e8                	mov    eax,ebp
c001ca3b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ca3f:	50                   	push   eax
c001ca40:	50                   	push   eax
c001ca41:	55                   	push   ebp
c001ca42:	c1 e5 0b             	shl    ebp,0xb
c001ca45:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca49:	6a 00                	push   0x0
c001ca4b:	55                   	push   ebp
c001ca4c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca50:	50                   	push   eax
c001ca51:	53                   	push   ebx
c001ca52:	e8 b9 fa ff ff       	call   c001c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ca57:	83 c4 20             	add    esp,0x20
c001ca5a:	eb 1a                	jmp    c001ca76 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ca5c:	83 ec 0c             	sub    esp,0xc
c001ca5f:	53                   	push   ebx
c001ca60:	e8 01 fe ff ff       	call   c001c866 <ATAPI::detectMedia()>
c001ca65:	83 c4 10             	add    esp,0x10
c001ca68:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca6f:	75 af                	jne    c001ca20 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ca71:	b8 02 00 00 00       	mov    eax,0x2
c001ca76:	83 c4 1c             	add    esp,0x1c
c001ca79:	5b                   	pop    ebx
c001ca7a:	5e                   	pop    esi
c001ca7b:	5f                   	pop    edi
c001ca7c:	5d                   	pop    ebp
c001ca7d:	c3                   	ret    

c001ca7e <SATA::close(int, int, void*)>:
c001ca7e:	83 ec 0c             	sub    esp,0xc
c001ca81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca85:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca8b:	85 c0                	test   eax,eax
c001ca8d:	74 0c                	je     c001ca9b <SATA::close(int, int, void*)+0x1d>
c001ca8f:	83 ec 0c             	sub    esp,0xc
c001ca92:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca94:	50                   	push   eax
c001ca95:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca98:	83 c4 10             	add    esp,0x10
c001ca9b:	31 c0                	xor    eax,eax
c001ca9d:	83 c4 0c             	add    esp,0xc
c001caa0:	c3                   	ret    
c001caa1:	90                   	nop

c001caa2 <SATA::powerSaving(PowerSavingLevel)>:
c001caa2:	c3                   	ret    
c001caa3:	90                   	nop

c001caa4 <SATA::open(int, int, void*)>:
c001caa4:	56                   	push   esi
c001caa5:	53                   	push   ebx
c001caa6:	50                   	push   eax
c001caa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001caaf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cab9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cabf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cac9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cacd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cad7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cadd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cae4:	e8 ca b2 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001cae9:	89 c6                	mov    esi,eax
c001caeb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001caf1:	81 c6 00 10 00 00    	add    esi,0x1000
c001caf7:	e8 b7 b2 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001cafc:	39 c6                	cmp    esi,eax
c001cafe:	74 10                	je     c001cb10 <SATA::open(int, int, void*)+0x6c>
c001cb00:	83 ec 0c             	sub    esp,0xc
c001cb03:	68 9c 1c 02 c0       	push   0xc0021c9c
c001cb08:	e8 12 3e ff ff       	call   c001091f <KePanic(char const*)>
c001cb0d:	83 c4 10             	add    esp,0x10
c001cb10:	83 ec 0c             	sub    esp,0xc
c001cb13:	6a 02                	push   0x2
c001cb15:	e8 03 cb fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001cb1a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cb20:	6a 03                	push   0x3
c001cb22:	50                   	push   eax
c001cb23:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001cb29:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001cb2f:	e8 d0 d1 fe ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cb34:	83 c4 14             	add    esp,0x14
c001cb37:	53                   	push   ebx
c001cb38:	e8 1d f7 fe ff       	call   c000c25a <PhysicalDisk::startCache()>
c001cb3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb40:	e8 59 09 ff ff       	call   c000d49e <createPartitionsForDisk(PhysicalDisk*)>
c001cb45:	83 c4 14             	add    esp,0x14
c001cb48:	31 c0                	xor    eax,eax
c001cb4a:	5b                   	pop    ebx
c001cb4b:	5e                   	pop    esi
c001cb4c:	c3                   	ret    
c001cb4d:	90                   	nop

c001cb4e <SATA::SATA()>:
c001cb4e:	83 ec 0c             	sub    esp,0xc
c001cb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb55:	83 ec 04             	sub    esp,0x4
c001cb58:	68 00 02 00 00       	push   0x200
c001cb5d:	68 b0 1c 02 c0       	push   0xc0021cb0
c001cb62:	50                   	push   eax
c001cb63:	e8 8a f6 fe ff       	call   c000c1f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb68:	83 c4 10             	add    esp,0x10
c001cb6b:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c001cb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb74:	89 10                	mov    DWORD PTR [eax],edx
c001cb76:	90                   	nop
c001cb77:	83 c4 0c             	add    esp,0xc
c001cb7a:	c3                   	ret    
c001cb7b:	90                   	nop

c001cb7c <SATA::access(unsigned long long, int, void*, bool)>:
c001cb7c:	55                   	push   ebp
c001cb7d:	57                   	push   edi
c001cb7e:	56                   	push   esi
c001cb7f:	53                   	push   ebx
c001cb80:	83 ec 2c             	sub    esp,0x2c
c001cb83:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cb87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cb8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb8f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cb93:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cb97:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cb9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cba0:	7e 10                	jle    c001cbb2 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001cba2:	83 ec 0c             	sub    esp,0xc
c001cba5:	68 c0 1c 02 c0       	push   0xc0021cc0
c001cbaa:	e8 70 3d ff ff       	call   c001091f <KePanic(char const*)>
c001cbaf:	83 c4 10             	add    esp,0x10
c001cbb2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cbb8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cbbe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cbc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbc8:	89 d0                	mov    eax,edx
c001cbca:	c1 e0 07             	shl    eax,0x7
c001cbcd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cbd1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cbdb:	51                   	push   ecx
c001cbdc:	8d 42 02             	lea    eax,[edx+0x2]
c001cbdf:	51                   	push   ecx
c001cbe0:	c1 e0 07             	shl    eax,0x7
c001cbe3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cbe7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cbeb:	50                   	push   eax
c001cbec:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cbf2:	e8 91 ec ff ff       	call   c001b888 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cbf7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbfb:	83 c4 10             	add    esp,0x10
c001cbfe:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cc03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc07:	0f 84 57 01 00 00    	je     c001cd64 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cc0d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cc11:	c1 e0 09             	shl    eax,0x9
c001cc14:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cc19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc1d:	74 0e                	je     c001cc2d <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cc1f:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cc25:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cc29:	89 c1                	mov    ecx,eax
c001cc2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc2d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cc37:	8d 42 02             	lea    eax,[edx+0x2]
c001cc3a:	c1 e0 07             	shl    eax,0x7
c001cc3d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cc41:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc43:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cc49:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cc4f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc53:	c1 e1 05             	shl    ecx,0x5
c001cc56:	01 c8                	add    eax,ecx
c001cc58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc5c:	83 e1 01             	and    ecx,0x1
c001cc5f:	89 ce                	mov    esi,ecx
c001cc61:	8a 08                	mov    cl,BYTE PTR [eax]
c001cc63:	c1 e6 06             	shl    esi,0x6
c001cc66:	83 e1 bf             	and    ecx,0xffffffbf
c001cc69:	09 f1                	or     ecx,esi
c001cc6b:	88 08                	mov    BYTE PTR [eax],cl
c001cc6d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc6f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cc75:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cc7b:	89 08                	mov    DWORD PTR [eax],ecx
c001cc7d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc83:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cc89:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cc8f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cc92:	50                   	push   eax
c001cc93:	68 90 00 00 00       	push   0x90
c001cc98:	6a 00                	push   0x0
c001cc9a:	56                   	push   esi
c001cc9b:	e8 50 38 fe ff       	call   c00004f0 <memset>
c001cca0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cca6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ccac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccb0:	83 c4 10             	add    esp,0x10
c001ccb3:	48                   	dec    eax
c001ccb4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ccb9:	89 c1                	mov    ecx,eax
c001ccbb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ccc1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ccc6:	09 c8                	or     eax,ecx
c001ccc8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ccce:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001ccd4:	83 c8 80             	or     eax,0xffffff80
c001ccd7:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001ccdd:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cce0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cce4:	25 00 7f 00 00       	and    eax,0x7f00
c001cce9:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ccee:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ccf3:	66 89 06             	mov    WORD PTR [esi],ax
c001ccf6:	b0 35                	mov    al,0x35
c001ccf8:	75 02                	jne    c001ccfc <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001ccfa:	b0 25                	mov    al,0x25
c001ccfc:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ccff:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001cd03:	89 e8                	mov    eax,ebp
c001cd05:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cd09:	c1 e8 10             	shr    eax,0x10
c001cd0c:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cd0f:	89 e8                	mov    eax,ebp
c001cd11:	c1 e8 18             	shr    eax,0x18
c001cd14:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cd17:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cd1b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd22:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cd25:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cd29:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cd2d:	89 d6                	mov    esi,edx
c001cd2f:	31 c0                	xor    eax,eax
c001cd31:	c1 e6 07             	shl    esi,0x7
c001cd34:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd38:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cd3e:	80 e1 88             	and    cl,0x88
c001cd41:	74 0a                	je     c001cd4d <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cd43:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd48:	74 0a                	je     c001cd54 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cd4a:	40                   	inc    eax
c001cd4b:	eb eb                	jmp    c001cd38 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cd4d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd52:	75 17                	jne    c001cd6b <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cd54:	83 ec 0c             	sub    esp,0xc
c001cd57:	68 f9 1c 02 c0       	push   0xc0021cf9
c001cd5c:	e8 90 dc fe ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001cd61:	83 c4 10             	add    esp,0x10
c001cd64:	b8 01 00 00 00       	mov    eax,0x1
c001cd69:	eb 5d                	jmp    c001cdc8 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cd6b:	b8 01 00 00 00       	mov    eax,0x1
c001cd70:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cd74:	c1 e2 07             	shl    edx,0x7
c001cd77:	d3 e0                	shl    eax,cl
c001cd79:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001cd7d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cd83:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cd89:	85 c8                	test   eax,ecx
c001cd8b:	74 16                	je     c001cda3 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001cd8d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cd93:	0f ba e1 1e          	bt     ecx,0x1e
c001cd97:	73 ea                	jae    c001cd83 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001cd99:	83 ec 0c             	sub    esp,0xc
c001cd9c:	68 07 1d 02 c0       	push   0xc0021d07
c001cda1:	eb b9                	jmp    c001cd5c <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cda3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cda9:	0f ba e0 1e          	bt     eax,0x1e
c001cdad:	72 b5                	jb     c001cd64 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cdaf:	31 c0                	xor    eax,eax
c001cdb1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cdb6:	75 10                	jne    c001cdc8 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cdb8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cdbe:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cdc2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cdc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cdc8:	83 c4 2c             	add    esp,0x2c
c001cdcb:	5b                   	pop    ebx
c001cdcc:	5e                   	pop    esi
c001cdcd:	5f                   	pop    edi
c001cdce:	5d                   	pop    ebp
c001cdcf:	c3                   	ret    

c001cdd0 <SATA::read(unsigned long long, int, void*)>:
c001cdd0:	55                   	push   ebp
c001cdd1:	57                   	push   edi
c001cdd2:	56                   	push   esi
c001cdd3:	be 04 00 00 00       	mov    esi,0x4
c001cdd8:	53                   	push   ebx
c001cdd9:	83 ec 0c             	sub    esp,0xc
c001cddc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cde0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cde4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cde7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdeb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdef:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdf5:	0f 87 1a 02 00 00    	ja     c001d015 <SATA::read(unsigned long long, int, void*)+0x245>
c001cdfb:	be 06 00 00 00       	mov    esi,0x6
c001ce00:	85 c9                	test   ecx,ecx
c001ce02:	0f 84 0d 02 00 00    	je     c001d015 <SATA::read(unsigned long long, int, void*)+0x245>
c001ce08:	56                   	push   esi
c001ce09:	56                   	push   esi
c001ce0a:	6a 00                	push   0x0
c001ce0c:	51                   	push   ecx
c001ce0d:	53                   	push   ebx
c001ce0e:	52                   	push   edx
c001ce0f:	50                   	push   eax
c001ce10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce14:	e8 63 fd ff ff       	call   c001cb7c <SATA::access(unsigned long long, int, void*, bool)>
c001ce19:	83 c4 20             	add    esp,0x20
c001ce1c:	89 c6                	mov    esi,eax
c001ce1e:	85 c0                	test   eax,eax
c001ce20:	0f 85 ea 01 00 00    	jne    c001d010 <SATA::read(unsigned long long, int, void*)+0x240>
c001ce26:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001ce2c:	bb 0a 00 00 00       	mov    ebx,0xa
c001ce31:	50                   	push   eax
c001ce32:	50                   	push   eax
c001ce33:	6a 0f                	push   0xf
c001ce35:	6a 00                	push   0x0
c001ce37:	e8 75 f2 ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001ce3c:	5a                   	pop    edx
c001ce3d:	0f b6 c0             	movzx  eax,al
c001ce40:	59                   	pop    ecx
c001ce41:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce46:	50                   	push   eax
c001ce47:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce4c:	99                   	cdq    
c001ce4d:	f7 f9                	idiv   ecx
c001ce4f:	99                   	cdq    
c001ce50:	f7 fb                	idiv   ebx
c001ce52:	8d 42 30             	lea    eax,[edx+0x30]
c001ce55:	0f b6 c0             	movzx  eax,al
c001ce58:	50                   	push   eax
c001ce59:	e8 42 f2 ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001ce5e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce64:	5f                   	pop    edi
c001ce65:	5d                   	pop    ebp
c001ce66:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce6b:	6a 0f                	push   0xf
c001ce6d:	6a 00                	push   0x0
c001ce6f:	e8 3d f2 ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001ce74:	5a                   	pop    edx
c001ce75:	0f b6 c0             	movzx  eax,al
c001ce78:	59                   	pop    ecx
c001ce79:	50                   	push   eax
c001ce7a:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce7f:	99                   	cdq    
c001ce80:	f7 fd                	idiv   ebp
c001ce82:	99                   	cdq    
c001ce83:	f7 fb                	idiv   ebx
c001ce85:	8d 42 30             	lea    eax,[edx+0x30]
c001ce88:	0f b6 c0             	movzx  eax,al
c001ce8b:	50                   	push   eax
c001ce8c:	e8 0f f2 ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001ce91:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce97:	5f                   	pop    edi
c001ce98:	bf 64 00 00 00       	mov    edi,0x64
c001ce9d:	58                   	pop    eax
c001ce9e:	6a 0f                	push   0xf
c001cea0:	6a 00                	push   0x0
c001cea2:	e8 0a f2 ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001cea7:	5a                   	pop    edx
c001cea8:	0f b6 c0             	movzx  eax,al
c001ceab:	59                   	pop    ecx
c001ceac:	50                   	push   eax
c001cead:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ceb2:	99                   	cdq    
c001ceb3:	f7 ff                	idiv   edi
c001ceb5:	99                   	cdq    
c001ceb6:	f7 fb                	idiv   ebx
c001ceb8:	8d 42 30             	lea    eax,[edx+0x30]
c001cebb:	0f b6 c0             	movzx  eax,al
c001cebe:	50                   	push   eax
c001cebf:	e8 dc f1 ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001cec4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ceca:	58                   	pop    eax
c001cecb:	5a                   	pop    edx
c001cecc:	6a 0f                	push   0xf
c001cece:	6a 00                	push   0x0
c001ced0:	e8 dc f1 ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001ced5:	59                   	pop    ecx
c001ced6:	0f b6 c0             	movzx  eax,al
c001ced9:	5a                   	pop    edx
c001ceda:	50                   	push   eax
c001cedb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cee0:	99                   	cdq    
c001cee1:	f7 fb                	idiv   ebx
c001cee3:	99                   	cdq    
c001cee4:	f7 fb                	idiv   ebx
c001cee6:	8d 42 30             	lea    eax,[edx+0x30]
c001cee9:	0f b6 c0             	movzx  eax,al
c001ceec:	50                   	push   eax
c001ceed:	e8 ae f1 ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001cef2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cef8:	59                   	pop    ecx
c001cef9:	58                   	pop    eax
c001cefa:	6a 0f                	push   0xf
c001cefc:	6a 00                	push   0x0
c001cefe:	e8 ae f1 ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001cf03:	5a                   	pop    edx
c001cf04:	0f b6 c0             	movzx  eax,al
c001cf07:	59                   	pop    ecx
c001cf08:	50                   	push   eax
c001cf09:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cf0e:	99                   	cdq    
c001cf0f:	f7 fb                	idiv   ebx
c001cf11:	8d 42 30             	lea    eax,[edx+0x30]
c001cf14:	0f b6 c0             	movzx  eax,al
c001cf17:	50                   	push   eax
c001cf18:	e8 83 f1 ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001cf1d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cf23:	58                   	pop    eax
c001cf24:	5a                   	pop    edx
c001cf25:	6a 0f                	push   0xf
c001cf27:	6a 00                	push   0x0
c001cf29:	e8 83 f1 ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001cf2e:	59                   	pop    ecx
c001cf2f:	0f b6 c0             	movzx  eax,al
c001cf32:	5a                   	pop    edx
c001cf33:	b9 10 27 00 00       	mov    ecx,0x2710
c001cf38:	50                   	push   eax
c001cf39:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf3e:	99                   	cdq    
c001cf3f:	f7 f9                	idiv   ecx
c001cf41:	99                   	cdq    
c001cf42:	f7 fb                	idiv   ebx
c001cf44:	8d 42 30             	lea    eax,[edx+0x30]
c001cf47:	0f b6 c0             	movzx  eax,al
c001cf4a:	50                   	push   eax
c001cf4b:	e8 50 f1 ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001cf50:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf56:	59                   	pop    ecx
c001cf57:	58                   	pop    eax
c001cf58:	6a 0f                	push   0xf
c001cf5a:	6a 00                	push   0x0
c001cf5c:	e8 50 f1 ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001cf61:	5a                   	pop    edx
c001cf62:	0f b6 c0             	movzx  eax,al
c001cf65:	59                   	pop    ecx
c001cf66:	50                   	push   eax
c001cf67:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf6c:	99                   	cdq    
c001cf6d:	f7 fd                	idiv   ebp
c001cf6f:	99                   	cdq    
c001cf70:	f7 fb                	idiv   ebx
c001cf72:	8d 42 30             	lea    eax,[edx+0x30]
c001cf75:	0f b6 c0             	movzx  eax,al
c001cf78:	50                   	push   eax
c001cf79:	e8 22 f1 ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001cf7e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf84:	5d                   	pop    ebp
c001cf85:	58                   	pop    eax
c001cf86:	6a 0f                	push   0xf
c001cf88:	6a 00                	push   0x0
c001cf8a:	e8 22 f1 ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001cf8f:	5a                   	pop    edx
c001cf90:	0f b6 c0             	movzx  eax,al
c001cf93:	59                   	pop    ecx
c001cf94:	50                   	push   eax
c001cf95:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf9a:	99                   	cdq    
c001cf9b:	f7 ff                	idiv   edi
c001cf9d:	99                   	cdq    
c001cf9e:	f7 fb                	idiv   ebx
c001cfa0:	8d 42 30             	lea    eax,[edx+0x30]
c001cfa3:	0f b6 c0             	movzx  eax,al
c001cfa6:	50                   	push   eax
c001cfa7:	e8 f4 f0 ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001cfac:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cfb2:	5f                   	pop    edi
c001cfb3:	5d                   	pop    ebp
c001cfb4:	6a 0f                	push   0xf
c001cfb6:	6a 00                	push   0x0
c001cfb8:	e8 f4 f0 ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001cfbd:	5a                   	pop    edx
c001cfbe:	0f b6 c0             	movzx  eax,al
c001cfc1:	59                   	pop    ecx
c001cfc2:	50                   	push   eax
c001cfc3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfc8:	99                   	cdq    
c001cfc9:	f7 fb                	idiv   ebx
c001cfcb:	99                   	cdq    
c001cfcc:	f7 fb                	idiv   ebx
c001cfce:	8d 42 30             	lea    eax,[edx+0x30]
c001cfd1:	0f b6 c0             	movzx  eax,al
c001cfd4:	50                   	push   eax
c001cfd5:	e8 c6 f0 ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001cfda:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cfe0:	5f                   	pop    edi
c001cfe1:	5d                   	pop    ebp
c001cfe2:	6a 0f                	push   0xf
c001cfe4:	6a 00                	push   0x0
c001cfe6:	e8 c6 f0 ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001cfeb:	5a                   	pop    edx
c001cfec:	0f b6 c0             	movzx  eax,al
c001cfef:	59                   	pop    ecx
c001cff0:	50                   	push   eax
c001cff1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cff6:	99                   	cdq    
c001cff7:	f7 fb                	idiv   ebx
c001cff9:	83 c2 30             	add    edx,0x30
c001cffc:	0f b6 d2             	movzx  edx,dl
c001cfff:	52                   	push   edx
c001d000:	e8 9b f0 ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d005:	83 c4 10             	add    esp,0x10
c001d008:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d00e:	eb 05                	jmp    c001d015 <SATA::read(unsigned long long, int, void*)+0x245>
c001d010:	be 01 00 00 00       	mov    esi,0x1
c001d015:	83 c4 0c             	add    esp,0xc
c001d018:	89 f0                	mov    eax,esi
c001d01a:	5b                   	pop    ebx
c001d01b:	5e                   	pop    esi
c001d01c:	5f                   	pop    edi
c001d01d:	5d                   	pop    ebp
c001d01e:	c3                   	ret    
c001d01f:	90                   	nop

c001d020 <SATA::write(unsigned long long, int, void*)>:
c001d020:	55                   	push   ebp
c001d021:	b8 04 00 00 00       	mov    eax,0x4
c001d026:	57                   	push   edi
c001d027:	56                   	push   esi
c001d028:	53                   	push   ebx
c001d029:	83 ec 1c             	sub    esp,0x1c
c001d02c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d030:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d034:	8d 75 ff             	lea    esi,[ebp-0x1]
c001d037:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d03b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d03f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d045:	0f 87 32 02 00 00    	ja     c001d27d <SATA::write(unsigned long long, int, void*)+0x25d>
c001d04b:	b8 06 00 00 00       	mov    eax,0x6
c001d050:	85 ff                	test   edi,edi
c001d052:	0f 84 25 02 00 00    	je     c001d27d <SATA::write(unsigned long long, int, void*)+0x25d>
c001d058:	89 ee                	mov    esi,ebp
c001d05a:	c1 e6 09             	shl    esi,0x9
c001d05d:	01 fe                	add    esi,edi
c001d05f:	89 c8                	mov    eax,ecx
c001d061:	89 da                	mov    edx,ebx
c001d063:	83 c0 01             	add    eax,0x1
c001d066:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d06a:	83 d2 00             	adc    edx,0x0
c001d06d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d071:	50                   	push   eax
c001d072:	50                   	push   eax
c001d073:	6a 01                	push   0x1
c001d075:	57                   	push   edi
c001d076:	81 c7 00 02 00 00    	add    edi,0x200
c001d07c:	6a 01                	push   0x1
c001d07e:	53                   	push   ebx
c001d07f:	51                   	push   ecx
c001d080:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d084:	e8 f3 fa ff ff       	call   c001cb7c <SATA::access(unsigned long long, int, void*, bool)>
c001d089:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d08d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d091:	83 c4 20             	add    esp,0x20
c001d094:	39 f7                	cmp    edi,esi
c001d096:	75 c7                	jne    c001d05f <SATA::write(unsigned long long, int, void*)+0x3f>
c001d098:	bb 0a 00 00 00       	mov    ebx,0xa
c001d09d:	01 2d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebp
c001d0a3:	bd 10 27 00 00       	mov    ebp,0x2710
c001d0a8:	50                   	push   eax
c001d0a9:	50                   	push   eax
c001d0aa:	6a 0f                	push   0xf
c001d0ac:	6a 00                	push   0x0
c001d0ae:	e8 fe ef ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001d0b3:	5a                   	pop    edx
c001d0b4:	0f b6 c0             	movzx  eax,al
c001d0b7:	59                   	pop    ecx
c001d0b8:	50                   	push   eax
c001d0b9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0be:	99                   	cdq    
c001d0bf:	f7 fd                	idiv   ebp
c001d0c1:	99                   	cdq    
c001d0c2:	f7 fb                	idiv   ebx
c001d0c4:	8d 42 30             	lea    eax,[edx+0x30]
c001d0c7:	0f b6 c0             	movzx  eax,al
c001d0ca:	50                   	push   eax
c001d0cb:	e8 d0 ef ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d0d0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d0d6:	5e                   	pop    esi
c001d0d7:	5f                   	pop    edi
c001d0d8:	bf e8 03 00 00       	mov    edi,0x3e8
c001d0dd:	6a 0f                	push   0xf
c001d0df:	6a 00                	push   0x0
c001d0e1:	e8 cb ef ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001d0e6:	5a                   	pop    edx
c001d0e7:	0f b6 c0             	movzx  eax,al
c001d0ea:	59                   	pop    ecx
c001d0eb:	50                   	push   eax
c001d0ec:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0f1:	99                   	cdq    
c001d0f2:	f7 ff                	idiv   edi
c001d0f4:	99                   	cdq    
c001d0f5:	f7 fb                	idiv   ebx
c001d0f7:	8d 42 30             	lea    eax,[edx+0x30]
c001d0fa:	0f b6 c0             	movzx  eax,al
c001d0fd:	50                   	push   eax
c001d0fe:	e8 9d ef ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d103:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d109:	5e                   	pop    esi
c001d10a:	be 64 00 00 00       	mov    esi,0x64
c001d10f:	58                   	pop    eax
c001d110:	6a 0f                	push   0xf
c001d112:	6a 00                	push   0x0
c001d114:	e8 98 ef ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001d119:	5a                   	pop    edx
c001d11a:	0f b6 c0             	movzx  eax,al
c001d11d:	59                   	pop    ecx
c001d11e:	50                   	push   eax
c001d11f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d124:	99                   	cdq    
c001d125:	f7 fe                	idiv   esi
c001d127:	99                   	cdq    
c001d128:	f7 fb                	idiv   ebx
c001d12a:	8d 42 30             	lea    eax,[edx+0x30]
c001d12d:	0f b6 c0             	movzx  eax,al
c001d130:	50                   	push   eax
c001d131:	e8 6a ef ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d136:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d13c:	58                   	pop    eax
c001d13d:	5a                   	pop    edx
c001d13e:	6a 0f                	push   0xf
c001d140:	6a 00                	push   0x0
c001d142:	e8 6a ef ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001d147:	59                   	pop    ecx
c001d148:	0f b6 c0             	movzx  eax,al
c001d14b:	5a                   	pop    edx
c001d14c:	50                   	push   eax
c001d14d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d152:	99                   	cdq    
c001d153:	f7 fb                	idiv   ebx
c001d155:	99                   	cdq    
c001d156:	f7 fb                	idiv   ebx
c001d158:	8d 42 30             	lea    eax,[edx+0x30]
c001d15b:	0f b6 c0             	movzx  eax,al
c001d15e:	50                   	push   eax
c001d15f:	e8 3c ef ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d164:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d16a:	59                   	pop    ecx
c001d16b:	58                   	pop    eax
c001d16c:	6a 0f                	push   0xf
c001d16e:	6a 00                	push   0x0
c001d170:	e8 3c ef ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001d175:	5a                   	pop    edx
c001d176:	0f b6 c0             	movzx  eax,al
c001d179:	59                   	pop    ecx
c001d17a:	50                   	push   eax
c001d17b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d180:	99                   	cdq    
c001d181:	f7 fb                	idiv   ebx
c001d183:	83 c2 30             	add    edx,0x30
c001d186:	0f b6 d2             	movzx  edx,dl
c001d189:	52                   	push   edx
c001d18a:	e8 11 ef ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d18f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d195:	58                   	pop    eax
c001d196:	5a                   	pop    edx
c001d197:	6a 0f                	push   0xf
c001d199:	6a 00                	push   0x0
c001d19b:	e8 11 ef ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001d1a0:	59                   	pop    ecx
c001d1a1:	0f b6 c0             	movzx  eax,al
c001d1a4:	5a                   	pop    edx
c001d1a5:	50                   	push   eax
c001d1a6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1ab:	99                   	cdq    
c001d1ac:	f7 fd                	idiv   ebp
c001d1ae:	99                   	cdq    
c001d1af:	f7 fb                	idiv   ebx
c001d1b1:	8d 42 30             	lea    eax,[edx+0x30]
c001d1b4:	0f b6 c0             	movzx  eax,al
c001d1b7:	50                   	push   eax
c001d1b8:	e8 e3 ee ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d1bd:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d1c3:	59                   	pop    ecx
c001d1c4:	5d                   	pop    ebp
c001d1c5:	6a 0f                	push   0xf
c001d1c7:	6a 00                	push   0x0
c001d1c9:	e8 e3 ee ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001d1ce:	5a                   	pop    edx
c001d1cf:	0f b6 c0             	movzx  eax,al
c001d1d2:	59                   	pop    ecx
c001d1d3:	50                   	push   eax
c001d1d4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1d9:	99                   	cdq    
c001d1da:	f7 ff                	idiv   edi
c001d1dc:	99                   	cdq    
c001d1dd:	f7 fb                	idiv   ebx
c001d1df:	8d 42 30             	lea    eax,[edx+0x30]
c001d1e2:	0f b6 c0             	movzx  eax,al
c001d1e5:	50                   	push   eax
c001d1e6:	e8 b5 ee ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d1eb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d1f1:	5f                   	pop    edi
c001d1f2:	5d                   	pop    ebp
c001d1f3:	6a 0f                	push   0xf
c001d1f5:	6a 00                	push   0x0
c001d1f7:	e8 b5 ee ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001d1fc:	5a                   	pop    edx
c001d1fd:	0f b6 c0             	movzx  eax,al
c001d200:	59                   	pop    ecx
c001d201:	50                   	push   eax
c001d202:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d207:	99                   	cdq    
c001d208:	f7 fe                	idiv   esi
c001d20a:	99                   	cdq    
c001d20b:	f7 fb                	idiv   ebx
c001d20d:	8d 42 30             	lea    eax,[edx+0x30]
c001d210:	0f b6 c0             	movzx  eax,al
c001d213:	50                   	push   eax
c001d214:	e8 87 ee ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d219:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d21f:	5e                   	pop    esi
c001d220:	5f                   	pop    edi
c001d221:	6a 0f                	push   0xf
c001d223:	6a 00                	push   0x0
c001d225:	e8 87 ee ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001d22a:	5d                   	pop    ebp
c001d22b:	0f b6 c0             	movzx  eax,al
c001d22e:	5a                   	pop    edx
c001d22f:	50                   	push   eax
c001d230:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d235:	99                   	cdq    
c001d236:	f7 fb                	idiv   ebx
c001d238:	99                   	cdq    
c001d239:	f7 fb                	idiv   ebx
c001d23b:	8d 42 30             	lea    eax,[edx+0x30]
c001d23e:	0f b6 c0             	movzx  eax,al
c001d241:	50                   	push   eax
c001d242:	e8 59 ee ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d247:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d24d:	59                   	pop    ecx
c001d24e:	5e                   	pop    esi
c001d24f:	6a 0f                	push   0xf
c001d251:	6a 00                	push   0x0
c001d253:	e8 59 ee ff ff       	call   c001c0b1 <combineColours(unsigned char, unsigned char)>
c001d258:	5f                   	pop    edi
c001d259:	0f b6 c0             	movzx  eax,al
c001d25c:	5d                   	pop    ebp
c001d25d:	50                   	push   eax
c001d25e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d263:	99                   	cdq    
c001d264:	f7 fb                	idiv   ebx
c001d266:	83 c2 30             	add    edx,0x30
c001d269:	0f b6 d2             	movzx  edx,dl
c001d26c:	52                   	push   edx
c001d26d:	e8 2e ee ff ff       	call   c001c0a0 <combineCharAndColour(char, unsigned char)>
c001d272:	83 c4 10             	add    esp,0x10
c001d275:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d27b:	31 c0                	xor    eax,eax
c001d27d:	83 c4 1c             	add    esp,0x1c
c001d280:	5b                   	pop    ebx
c001d281:	5e                   	pop    esi
c001d282:	5f                   	pop    edi
c001d283:	5d                   	pop    ebp
c001d284:	c3                   	ret    
c001d285:	90                   	nop

c001d286 <SATAPI::write(unsigned long long, int, void*)>:
c001d286:	b8 03 00 00 00       	mov    eax,0x3
c001d28b:	c3                   	ret    

c001d28c <SATAPI::close(int, int, void*)>:
c001d28c:	83 ec 0c             	sub    esp,0xc
c001d28f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d293:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d299:	85 c0                	test   eax,eax
c001d29b:	74 0c                	je     c001d2a9 <SATAPI::close(int, int, void*)+0x1d>
c001d29d:	83 ec 0c             	sub    esp,0xc
c001d2a0:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2a2:	50                   	push   eax
c001d2a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d2a6:	83 c4 10             	add    esp,0x10
c001d2a9:	31 c0                	xor    eax,eax
c001d2ab:	83 c4 0c             	add    esp,0xc
c001d2ae:	c3                   	ret    
c001d2af:	90                   	nop

c001d2b0 <SATAPI::SATAPI()>:
c001d2b0:	83 ec 0c             	sub    esp,0xc
c001d2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b7:	83 ec 04             	sub    esp,0x4
c001d2ba:	68 00 08 00 00       	push   0x800
c001d2bf:	68 50 1d 02 c0       	push   0xc0021d50
c001d2c4:	50                   	push   eax
c001d2c5:	e8 28 ef fe ff       	call   c000c1f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d2ca:	83 c4 10             	add    esp,0x10
c001d2cd:	ba 44 1e 02 c0       	mov    edx,0xc0021e44
c001d2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2d6:	89 10                	mov    DWORD PTR [eax],edx
c001d2d8:	90                   	nop
c001d2d9:	83 c4 0c             	add    esp,0xc
c001d2dc:	c3                   	ret    
c001d2dd:	90                   	nop

c001d2de <SATAPI::diskRemoved()>:
c001d2de:	c3                   	ret    
c001d2df:	90                   	nop

c001d2e0 <SATAPI::diskInserted()>:
c001d2e0:	83 ec 18             	sub    esp,0x18
c001d2e3:	68 5c 1d 02 c0       	push   0xc0021d5c
c001d2e8:	e8 04 d7 fe ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001d2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2f1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d2f8:	83 c4 1c             	add    esp,0x1c
c001d2fb:	c3                   	ret    

c001d2fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d2fc:	55                   	push   ebp
c001d2fd:	57                   	push   edi
c001d2fe:	56                   	push   esi
c001d2ff:	53                   	push   ebx
c001d300:	83 ec 34             	sub    esp,0x34
c001d303:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d307:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d30b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d30f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d313:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d317:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d31d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d323:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d327:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d32d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d331:	83 c0 02             	add    eax,0x2
c001d334:	c1 e0 07             	shl    eax,0x7
c001d337:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d33b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d33f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d343:	c1 e0 07             	shl    eax,0x7
c001d346:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d34a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d34e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d358:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d35c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d362:	e8 21 e5 ff ff       	call   c001b888 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d367:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d36b:	83 c4 10             	add    esp,0x10
c001d36e:	b8 01 00 00 00       	mov    eax,0x1
c001d373:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d378:	0f 84 53 02 00 00    	je     c001d5d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d37e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d388:	8b 00                	mov    eax,DWORD PTR [eax]
c001d38a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d390:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d396:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d39a:	c1 e1 05             	shl    ecx,0x5
c001d39d:	01 c8                	add    eax,ecx
c001d39f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d3a1:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d3a7:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d3ad:	89 08                	mov    DWORD PTR [eax],ecx
c001d3af:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d3b5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d3bb:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d3c1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d3c4:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d3c7:	50                   	push   eax
c001d3c8:	68 90 00 00 00       	push   0x90
c001d3cd:	6a 00                	push   0x0
c001d3cf:	53                   	push   ebx
c001d3d0:	e8 1b 31 fe ff       	call   c00004f0 <memset>
c001d3d5:	b9 0c 00 00 00       	mov    ecx,0xc
c001d3da:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d3de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3e0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d3e6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d3ea:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d3f0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d3f4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d3f8:	48                   	dec    eax
c001d3f9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d3fe:	89 c1                	mov    ecx,eax
c001d400:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d406:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d40b:	09 c8                	or     eax,ecx
c001d40d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d413:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d419:	83 c8 80             	or     eax,0xffffff80
c001d41c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d422:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d425:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d429:	25 00 7f 00 00       	and    eax,0x7f00
c001d42e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d432:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d437:	66 89 03             	mov    WORD PTR [ebx],ax
c001d43a:	89 d0                	mov    eax,edx
c001d43c:	c1 ea 18             	shr    edx,0x18
c001d43f:	c1 e8 10             	shr    eax,0x10
c001d442:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d445:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d448:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d44c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d44f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d453:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d456:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d461:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d465:	31 c0                	xor    eax,eax
c001d467:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d46d:	80 e1 88             	and    cl,0x88
c001d470:	74 0a                	je     c001d47c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d472:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d477:	74 0a                	je     c001d483 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d479:	40                   	inc    eax
c001d47a:	eb eb                	jmp    c001d467 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d47c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d481:	75 43                	jne    c001d4c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d483:	83 ec 0c             	sub    esp,0xc
c001d486:	68 74 1d 02 c0       	push   0xc0021d74
c001d48b:	e8 61 d5 fe ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001d490:	58                   	pop    eax
c001d491:	5a                   	pop    edx
c001d492:	68 89 1d 02 c0       	push   0xc0021d89
c001d497:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d49d:	e8 ee b5 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c001d4a2:	59                   	pop    ecx
c001d4a3:	5b                   	pop    ebx
c001d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d4a8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d4ae:	e8 6f e4 ff ff       	call   c001b922 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d4b3:	5e                   	pop    esi
c001d4b4:	5f                   	pop    edi
c001d4b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d4b9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d4bf:	e8 3e e4 ff ff       	call   c001b902 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d4c4:	eb 48                	jmp    c001d50e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d4c6:	be 01 00 00 00       	mov    esi,0x1
c001d4cb:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d4cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d4d3:	d3 e6                	shl    esi,cl
c001d4d5:	c1 e7 07             	shl    edi,0x7
c001d4d8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d4de:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d4e3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d4e7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d4ed:	85 c6                	test   esi,eax
c001d4ef:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d4f5:	0f 84 a3 00 00 00    	je     c001d59e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d4fb:	0f ba e0 1e          	bt     eax,0x1e
c001d4ff:	73 1a                	jae    c001d51b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d501:	83 ec 0c             	sub    esp,0xc
c001d504:	68 9b 1d 02 c0       	push   0xc0021d9b
c001d509:	e8 e3 d4 fe ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001d50e:	83 c4 10             	add    esp,0x10
c001d511:	b8 01 00 00 00       	mov    eax,0x1
c001d516:	e9 b6 00 00 00       	jmp    c001d5d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d51b:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d521:	83 f8 0d             	cmp    eax,0xd
c001d524:	77 0a                	ja     c001d530 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	68 c8 00 00 00       	push   0xc8
c001d52e:	eb 28                	jmp    c001d558 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d530:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d536:	83 f8 0d             	cmp    eax,0xd
c001d539:	77 0a                	ja     c001d545 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d53b:	83 ec 0c             	sub    esp,0xc
c001d53e:	68 58 02 00 00       	push   0x258
c001d543:	eb 13                	jmp    c001d558 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d545:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d54b:	83 f8 06             	cmp    eax,0x6
c001d54e:	77 10                	ja     c001d560 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d550:	83 ec 0c             	sub    esp,0xc
c001d553:	68 dc 05 00 00       	push   0x5dc
c001d558:	e8 a7 7e ff ff       	call   c0015404 <milliTenthSleep(unsigned int)>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d564:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d567:	75 06                	jne    c001d56f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d569:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d56d:	74 15                	je     c001d584 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d56f:	83 fb 06             	cmp    ebx,0x6
c001d572:	77 10                	ja     c001d584 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d574:	83 ec 0c             	sub    esp,0xc
c001d577:	68 c4 09 00 00       	push   0x9c4
c001d57c:	e8 83 7e ff ff       	call   c0015404 <milliTenthSleep(unsigned int)>
c001d581:	83 c4 10             	add    esp,0x10
c001d584:	43                   	inc    ebx
c001d585:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d58b:	0f 85 56 ff ff ff    	jne    c001d4e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d591:	83 ec 0c             	sub    esp,0xc
c001d594:	68 ae 1d 02 c0       	push   0xc0021dae
c001d599:	e9 6b ff ff ff       	jmp    c001d509 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d59e:	0f ba e0 1e          	bt     eax,0x1e
c001d5a2:	73 0d                	jae    c001d5b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d5a4:	83 ec 0c             	sub    esp,0xc
c001d5a7:	68 c2 1d 02 c0       	push   0xc0021dc2
c001d5ac:	e9 58 ff ff ff       	jmp    c001d509 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d5b1:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d5b6:	74 17                	je     c001d5cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d5b8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d5bd:	74 10                	je     c001d5cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d5bf:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d5c5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d5c9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d5cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d5cf:	31 c0                	xor    eax,eax
c001d5d1:	83 c4 2c             	add    esp,0x2c
c001d5d4:	5b                   	pop    ebx
c001d5d5:	5e                   	pop    esi
c001d5d6:	5f                   	pop    edi
c001d5d7:	5d                   	pop    ebp
c001d5d8:	c3                   	ret    
c001d5d9:	90                   	nop

c001d5da <SATAPI::eject()>:
c001d5da:	57                   	push   edi
c001d5db:	b9 03 00 00 00       	mov    ecx,0x3
c001d5e0:	83 ec 18             	sub    esp,0x18
c001d5e3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d5e7:	fc                   	cld    
c001d5e8:	31 c0                	xor    eax,eax
c001d5ea:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5ec:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d5f1:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d5f6:	50                   	push   eax
c001d5f7:	6a 00                	push   0x0
c001d5f9:	6a 00                	push   0x0
c001d5fb:	6a 00                	push   0x0
c001d5fd:	6a 00                	push   0x0
c001d5ff:	6a 02                	push   0x2
c001d601:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d605:	50                   	push   eax
c001d606:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d60a:	e8 ed fc ff ff       	call   c001d2fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d60f:	31 c0                	xor    eax,eax
c001d611:	83 c4 38             	add    esp,0x38
c001d614:	5f                   	pop    edi
c001d615:	c3                   	ret    

c001d616 <SATAPI::detectMedia()>:
c001d616:	53                   	push   ebx
c001d617:	83 ec 14             	sub    esp,0x14
c001d61a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d61e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d624:	e8 47 05 ff ff       	call   c000db70 <VCache::writeWriteBuffer()>
c001d629:	59                   	pop    ecx
c001d62a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d630:	e8 2b 05 ff ff       	call   c000db60 <VCache::invalidateReadBuffer()>
c001d635:	c7 04 24 d7 1d 02 c0 	mov    DWORD PTR [esp],0xc0021dd7
c001d63c:	e8 b0 d3 fe ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001d641:	83 c4 10             	add    esp,0x10
c001d644:	31 c0                	xor    eax,eax
c001d646:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d64d:	85 d2                	test   edx,edx
c001d64f:	74 0f                	je     c001d660 <SATAPI::detectMedia()+0x4a>
c001d651:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d657:	75 07                	jne    c001d660 <SATAPI::detectMedia()+0x4a>
c001d659:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d660:	40                   	inc    eax
c001d661:	83 f8 1a             	cmp    eax,0x1a
c001d664:	75 e0                	jne    c001d646 <SATAPI::detectMedia()+0x30>
c001d666:	83 c4 08             	add    esp,0x8
c001d669:	5b                   	pop    ebx
c001d66a:	c3                   	ret    
c001d66b:	90                   	nop

c001d66c <SATAPI::open(int, int, void*)>:
c001d66c:	56                   	push   esi
c001d66d:	53                   	push   ebx
c001d66e:	51                   	push   ecx
c001d66f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d673:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d677:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d681:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d687:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d691:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d695:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d69f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d6a5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d6ac:	e8 02 a7 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001d6b1:	89 c6                	mov    esi,eax
c001d6b3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d6b9:	81 c6 00 10 00 00    	add    esi,0x1000
c001d6bf:	e8 ef a6 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001d6c4:	39 c6                	cmp    esi,eax
c001d6c6:	74 10                	je     c001d6d8 <SATAPI::open(int, int, void*)+0x6c>
c001d6c8:	83 ec 0c             	sub    esp,0xc
c001d6cb:	68 ec 1d 02 c0       	push   0xc0021dec
c001d6d0:	e8 4a 32 ff ff       	call   c001091f <KePanic(char const*)>
c001d6d5:	83 c4 10             	add    esp,0x10
c001d6d8:	83 ec 0c             	sub    esp,0xc
c001d6db:	6a 02                	push   0x2
c001d6dd:	e8 3b bf fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001d6e2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d6e8:	6a 03                	push   0x3
c001d6ea:	50                   	push   eax
c001d6eb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d6f1:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d6f7:	e8 08 c6 fe ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d6fc:	83 c4 14             	add    esp,0x14
c001d6ff:	68 78 01 00 00       	push   0x178
c001d704:	e8 a5 a3 fe ff       	call   c0007aae <malloc>
c001d709:	83 c4 0c             	add    esp,0xc
c001d70c:	89 c6                	mov    esi,eax
c001d70e:	6a 00                	push   0x0
c001d710:	68 ff ff ff 7f       	push   0x7fffffff
c001d715:	6a 00                	push   0x0
c001d717:	6a 00                	push   0x0
c001d719:	53                   	push   ebx
c001d71a:	68 02 1e 02 c0       	push   0xc0021e02
c001d71f:	50                   	push   eax
c001d720:	e8 a7 f8 fe ff       	call   c000cfcc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d725:	83 c4 14             	add    esp,0x14
c001d728:	56                   	push   esi
c001d729:	e8 5e f9 fe ff       	call   c000d08c <LogicalDisk::assignDriveLetter()>
c001d72e:	5a                   	pop    edx
c001d72f:	0f be c0             	movsx  eax,al
c001d732:	59                   	pop    ecx
c001d733:	50                   	push   eax
c001d734:	68 54 1c 02 c0       	push   0xc0021c54
c001d739:	e8 b3 d2 fe ff       	call   c000a9f1 <Dbg::kprintf(char const*, ...)>
c001d73e:	58                   	pop    eax
c001d73f:	5a                   	pop    edx
c001d740:	56                   	push   esi
c001d741:	53                   	push   ebx
c001d742:	e8 df e6 fe ff       	call   c000be26 <Device::addChild(Device*)>
c001d747:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d74d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d750:	e8 05 eb fe ff       	call   c000c25a <PhysicalDisk::startCache()>
c001d755:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d75c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d75f:	e8 b2 fe ff ff       	call   c001d616 <SATAPI::detectMedia()>
c001d764:	83 c4 14             	add    esp,0x14
c001d767:	31 c0                	xor    eax,eax
c001d769:	5b                   	pop    ebx
c001d76a:	5e                   	pop    esi
c001d76b:	c3                   	ret    

c001d76c <SATAPI::read(unsigned long long, int, void*)>:
c001d76c:	57                   	push   edi
c001d76d:	56                   	push   esi
c001d76e:	53                   	push   ebx
c001d76f:	83 ec 30             	sub    esp,0x30
c001d772:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001d77a:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d77e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d782:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d786:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d78a:	83 fe 04             	cmp    esi,0x4
c001d78d:	7e 10                	jle    c001d79f <SATAPI::read(unsigned long long, int, void*)+0x33>
c001d78f:	83 ec 0c             	sub    esp,0xc
c001d792:	68 10 1e 02 c0       	push   0xc0021e10
c001d797:	e8 83 31 ff ff       	call   c001091f <KePanic(char const*)>
c001d79c:	83 c4 10             	add    esp,0x10
c001d79f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d7a5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d7ab:	51                   	push   ecx
c001d7ac:	50                   	push   eax
c001d7ad:	83 c0 02             	add    eax,0x2
c001d7b0:	c1 e0 07             	shl    eax,0x7
c001d7b3:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d7b9:	50                   	push   eax
c001d7ba:	52                   	push   edx
c001d7bb:	e8 8c e1 ff ff       	call   c001b94c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d7c0:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d7c4:	b9 03 00 00 00       	mov    ecx,0x3
c001d7c9:	fc                   	cld    
c001d7ca:	31 c0                	xor    eax,eax
c001d7cc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7ce:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d7d3:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d7d8:	83 c4 0c             	add    esp,0xc
c001d7db:	6a 00                	push   0x0
c001d7dd:	6a 00                	push   0x0
c001d7df:	6a 00                	push   0x0
c001d7e1:	6a 00                	push   0x0
c001d7e3:	6a 02                	push   0x2
c001d7e5:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d7e9:	50                   	push   eax
c001d7ea:	53                   	push   ebx
c001d7eb:	e8 0c fb ff ff       	call   c001d2fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7f0:	83 c4 20             	add    esp,0x20
c001d7f3:	85 c0                	test   eax,eax
c001d7f5:	75 44                	jne    c001d83b <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001d7f7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d7fb:	b9 03 00 00 00       	mov    ecx,0x3
c001d800:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d802:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d806:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d80b:	0f c8                	bswap  eax
c001d80d:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d811:	89 f0                	mov    eax,esi
c001d813:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d817:	50                   	push   eax
c001d818:	56                   	push   esi
c001d819:	c1 e6 0b             	shl    esi,0xb
c001d81c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d828:	56                   	push   esi
c001d829:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d82d:	50                   	push   eax
c001d82e:	53                   	push   ebx
c001d82f:	e8 c8 fa ff ff       	call   c001d2fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d834:	83 c4 20             	add    esp,0x20
c001d837:	85 c0                	test   eax,eax
c001d839:	74 14                	je     c001d84f <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001d83b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d83f:	83 ec 0c             	sub    esp,0xc
c001d842:	53                   	push   ebx
c001d843:	e8 ce fd ff ff       	call   c001d616 <SATAPI::detectMedia()>
c001d848:	83 c4 10             	add    esp,0x10
c001d84b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d84f:	83 c4 30             	add    esp,0x30
c001d852:	5b                   	pop    ebx
c001d853:	5e                   	pop    esi
c001d854:	5f                   	pop    edi
c001d855:	c3                   	ret    

c001d856 <IOAPIC::close(int, int, void*)>:
c001d856:	b8 00 00 00 00       	mov    eax,0x0
c001d85b:	c3                   	ret    

c001d85c <apicGetBase()>:
c001d85c:	55                   	push   ebp
c001d85d:	89 e5                	mov    ebp,esp
c001d85f:	83 ec 18             	sub    esp,0x18
c001d862:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d867:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d86d:	83 e0 08             	and    eax,0x8
c001d870:	0f b6 c0             	movzx  eax,al
c001d873:	85 c0                	test   eax,eax
c001d875:	75 07                	jne    c001d87e <apicGetBase()+0x22>
c001d877:	b8 00 00 00 00       	mov    eax,0x0
c001d87c:	eb 21                	jmp    c001d89f <apicGetBase()+0x43>
c001d87e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d883:	83 ec 08             	sub    esp,0x8
c001d886:	6a 1b                	push   0x1b
c001d888:	50                   	push   eax
c001d889:	e8 2a 98 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001d88e:	83 c4 10             	add    esp,0x10
c001d891:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d894:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d897:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d89a:	25 00 00 ff ff       	and    eax,0xffff0000
c001d89f:	c9                   	leave  
c001d8a0:	c3                   	ret    
c001d8a1:	90                   	nop

c001d8a2 <IOAPIC::IOAPIC()>:
c001d8a2:	83 ec 0c             	sub    esp,0xc
c001d8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8a9:	83 ec 08             	sub    esp,0x8
c001d8ac:	68 74 1e 02 c0       	push   0xc0021e74
c001d8b1:	50                   	push   eax
c001d8b2:	e8 07 e7 fe ff       	call   c000bfbe <Device::Device(char const*)>
c001d8b7:	83 c4 10             	add    esp,0x10
c001d8ba:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c001d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8c3:	89 10                	mov    DWORD PTR [eax],edx
c001d8c5:	90                   	nop
c001d8c6:	83 c4 0c             	add    esp,0xc
c001d8c9:	c3                   	ret    

c001d8ca <apicOpen()>:
c001d8ca:	55                   	push   ebp
c001d8cb:	89 e5                	mov    ebp,esp
c001d8cd:	53                   	push   ebx
c001d8ce:	83 ec 34             	sub    esp,0x34
c001d8d1:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d8d6:	83 f0 01             	xor    eax,0x1
c001d8d9:	0f b6 c0             	movzx  eax,al
c001d8dc:	85 c0                	test   eax,eax
c001d8de:	0f 84 a3 00 00 00    	je     c001d987 <apicOpen()+0xbd>
c001d8e4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d8e8:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d8ed:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8f1:	0f b6 c0             	movzx  eax,al
c001d8f4:	39 c2                	cmp    edx,eax
c001d8f6:	0f 83 84 00 00 00    	jae    c001d980 <apicOpen()+0xb6>
c001d8fc:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d903:	83 ec 0c             	sub    esp,0xc
c001d906:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d909:	e8 a0 a1 fe ff       	call   c0007aae <malloc>
c001d90e:	83 c4 10             	add    esp,0x10
c001d911:	89 c3                	mov    ebx,eax
c001d913:	83 ec 0c             	sub    esp,0xc
c001d916:	53                   	push   ebx
c001d917:	e8 86 ff ff ff       	call   c001d8a2 <IOAPIC::IOAPIC()>
c001d91c:	83 c4 10             	add    esp,0x10
c001d91f:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d922:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d926:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d929:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d930:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d935:	83 c0 01             	add    eax,0x1
c001d938:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d93d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d942:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d948:	83 ec 08             	sub    esp,0x8
c001d94b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d94e:	50                   	push   eax
c001d94f:	e8 d2 e4 fe ff       	call   c000be26 <Device::addChild(Device*)>
c001d954:	83 c4 10             	add    esp,0x10
c001d957:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d95a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d95c:	83 c0 08             	add    eax,0x8
c001d95f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d961:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d965:	6a 00                	push   0x0
c001d967:	6a 00                	push   0x0
c001d969:	52                   	push   edx
c001d96a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d96d:	ff d0                	call   eax
c001d96f:	83 c4 10             	add    esp,0x10
c001d972:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d975:	83 c0 01             	add    eax,0x1
c001d978:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d97b:	e9 68 ff ff ff       	jmp    c001d8e8 <apicOpen()+0x1e>
c001d980:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d987:	e8 d0 fe ff ff       	call   c001d85c <apicGetBase()>
c001d98c:	05 f0 00 00 00       	add    eax,0xf0
c001d991:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d994:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d997:	8b 00                	mov    eax,DWORD PTR [eax]
c001d999:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d99c:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d9a3:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d9aa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d9ad:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d9b0:	89 10                	mov    DWORD PTR [eax],edx
c001d9b2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d9b9:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d9be:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d9c1:	7d 7c                	jge    c001da3f <apicOpen()+0x175>
c001d9c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9c6:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9cd:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d9d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9d3:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9da:	c1 e8 08             	shr    eax,0x8
c001d9dd:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d9e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9e4:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9eb:	c1 e8 18             	shr    eax,0x18
c001d9ee:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d9f1:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d9f5:	3d ff 00 00 00       	cmp    eax,0xff
c001d9fa:	75 3a                	jne    c001da36 <apicOpen()+0x16c>
c001d9fc:	e8 5b fe ff ff       	call   c001d85c <apicGetBase()>
c001da01:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001da05:	83 fa 01             	cmp    edx,0x1
c001da08:	75 07                	jne    c001da11 <apicOpen()+0x147>
c001da0a:	ba 60 03 00 00       	mov    edx,0x360
c001da0f:	eb 05                	jmp    c001da16 <apicOpen()+0x14c>
c001da11:	ba 50 03 00 00       	mov    edx,0x350
c001da16:	01 d0                	add    eax,edx
c001da18:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001da1b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001da1e:	8b 00                	mov    eax,DWORD PTR [eax]
c001da20:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001da23:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001da2a:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001da2e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001da31:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001da34:	89 10                	mov    DWORD PTR [eax],edx
c001da36:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001da3a:	e9 7a ff ff ff       	jmp    c001d9b9 <apicOpen()+0xef>
c001da3f:	90                   	nop
c001da40:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001da43:	c9                   	leave  
c001da44:	c3                   	ret    
c001da45:	90                   	nop

c001da46 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001da46:	55                   	push   ebp
c001da47:	89 e5                	mov    ebp,esp
c001da49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da52:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da55:	72 1d                	jb     c001da74 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da5a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001da60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da63:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001da69:	01 d0                	add    eax,edx
c001da6b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da6e:	73 04                	jae    c001da74 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da70:	b0 01                	mov    al,0x1
c001da72:	eb 02                	jmp    c001da76 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001da74:	b0 00                	mov    al,0x0
c001da76:	5d                   	pop    ebp
c001da77:	c3                   	ret    

c001da78 <IOAPIC::read(int)>:
c001da78:	55                   	push   ebp
c001da79:	89 e5                	mov    ebp,esp
c001da7b:	83 ec 10             	sub    esp,0x10
c001da7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da81:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da87:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da8d:	0f b6 d0             	movzx  edx,al
c001da90:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da93:	89 10                	mov    DWORD PTR [eax],edx
c001da95:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da98:	83 c0 10             	add    eax,0x10
c001da9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001da9d:	c9                   	leave  
c001da9e:	c3                   	ret    
c001da9f:	90                   	nop

c001daa0 <IOAPIC::open(int, int, void*)>:
c001daa0:	55                   	push   ebp
c001daa1:	89 e5                	mov    ebp,esp
c001daa3:	57                   	push   edi
c001daa4:	56                   	push   esi
c001daa5:	53                   	push   ebx
c001daa6:	83 ec 04             	sub    esp,0x4
c001daa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001daaf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dab8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dabe:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001dac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dac8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dad1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dad7:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001dade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dae1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daea:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001daf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daf3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001daf9:	0f b6 f0             	movzx  esi,al
c001dafc:	89 d0                	mov    eax,edx
c001dafe:	ba 00 00 00 00       	mov    edx,0x0
c001db03:	89 c7                	mov    edi,eax
c001db05:	83 e7 ff             	and    edi,0xffffffff
c001db08:	89 f9                	mov    ecx,edi
c001db0a:	0f b6 da             	movzx  ebx,dl
c001db0d:	89 c8                	mov    eax,ecx
c001db0f:	89 da                	mov    edx,ebx
c001db11:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001db14:	8d 5e 08             	lea    ebx,[esi+0x8]
c001db17:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001db1b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001db1f:	83 e0 00             	and    eax,0x0
c001db22:	09 d0                	or     eax,edx
c001db24:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001db28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db2b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001db31:	8d 50 01             	lea    edx,[eax+0x1]
c001db34:	88 d1                	mov    cl,dl
c001db36:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001db39:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001db3f:	0f b6 d0             	movzx  edx,al
c001db42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db45:	83 c2 08             	add    edx,0x8
c001db48:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001db4c:	0f b6 c9             	movzx  ecx,cl
c001db4f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001db55:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db59:	6a 01                	push   0x1
c001db5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db5e:	e8 15 ff ff ff       	call   c001da78 <IOAPIC::read(int)>
c001db63:	83 c4 08             	add    esp,0x8
c001db66:	c1 f8 10             	sar    eax,0x10
c001db69:	0f b6 c0             	movzx  eax,al
c001db6c:	8d 50 01             	lea    edx,[eax+0x1]
c001db6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db72:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001db78:	b8 00 00 00 00       	mov    eax,0x0
c001db7d:	8d 65 f4             	lea    esp,[ebp-0xc]
c001db80:	5b                   	pop    ebx
c001db81:	5e                   	pop    esi
c001db82:	5f                   	pop    edi
c001db83:	5d                   	pop    ebp
c001db84:	c3                   	ret    
c001db85:	90                   	nop

c001db86 <IOAPIC::write(int, int)>:
c001db86:	55                   	push   ebp
c001db87:	89 e5                	mov    ebp,esp
c001db89:	83 ec 10             	sub    esp,0x10
c001db8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db8f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db95:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001db98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db9b:	0f b6 d0             	movzx  edx,al
c001db9e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dba1:	89 10                	mov    DWORD PTR [eax],edx
c001dba3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dba6:	8d 50 10             	lea    edx,[eax+0x10]
c001dba9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dbac:	89 02                	mov    DWORD PTR [edx],eax
c001dbae:	90                   	nop
c001dbaf:	c9                   	leave  
c001dbb0:	c3                   	ret    
c001dbb1:	90                   	nop

c001dbb2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001dbb2:	55                   	push   ebp
c001dbb3:	89 e5                	mov    ebp,esp
c001dbb5:	53                   	push   ebx
c001dbb6:	83 ec 2c             	sub    esp,0x2c
c001dbb9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dbbc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001dbbf:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001dbc2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001dbc5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dbc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dbcb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dbce:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dbd1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001dbd4:	88 d8                	mov    al,bl
c001dbd6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001dbd9:	88 c8                	mov    al,cl
c001dbdb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001dbde:	88 d0                	mov    al,dl
c001dbe0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001dbe3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbe7:	83 c0 08             	add    eax,0x8
c001dbea:	01 c0                	add    eax,eax
c001dbec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dbef:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbf3:	83 c0 08             	add    eax,0x8
c001dbf6:	01 c0                	add    eax,eax
c001dbf8:	83 c0 01             	add    eax,0x1
c001dbfb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001dbfe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dc01:	50                   	push   eax
c001dc02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc05:	e8 6e fe ff ff       	call   c001da78 <IOAPIC::read(int)>
c001dc0a:	83 c4 08             	add    esp,0x8
c001dc0d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dc10:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001dc17:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dc1a:	c1 e0 18             	shl    eax,0x18
c001dc1d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dc20:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dc23:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dc26:	52                   	push   edx
c001dc27:	50                   	push   eax
c001dc28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc2b:	e8 56 ff ff ff       	call   c001db86 <IOAPIC::write(int, int)>
c001dc30:	83 c4 0c             	add    esp,0xc
c001dc33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc36:	50                   	push   eax
c001dc37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc3a:	e8 39 fe ff ff       	call   c001da78 <IOAPIC::read(int)>
c001dc3f:	83 c4 08             	add    esp,0x8
c001dc42:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dc45:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dc4c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dc53:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dc5a:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dc5e:	85 c0                	test   eax,eax
c001dc60:	74 09                	je     c001dc6b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dc62:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dc69:	eb 07                	jmp    c001dc72 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dc6b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dc72:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dc76:	85 c0                	test   eax,eax
c001dc78:	74 09                	je     c001dc83 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dc7a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dc81:	eb 07                	jmp    c001dc8a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dc83:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dc8a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dc91:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dc95:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dc98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dc9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc9e:	52                   	push   edx
c001dc9f:	50                   	push   eax
c001dca0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dca3:	e8 de fe ff ff       	call   c001db86 <IOAPIC::write(int, int)>
c001dca8:	83 c4 0c             	add    esp,0xc
c001dcab:	90                   	nop
c001dcac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dcaf:	c9                   	leave  
c001dcb0:	c3                   	ret    
c001dcb1:	66 90                	xchg   ax,ax
c001dcb3:	90                   	nop

c001dcb4 <APICTimer::close(int, int, void*)>:
c001dcb4:	b8 00 00 00 00       	mov    eax,0x0
c001dcb9:	c3                   	ret    
c001dcba:	66 90                	xchg   ax,ax

c001dcbc <apicTimerHandler(regs*, void*)>:
c001dcbc:	83 ec 0c             	sub    esp,0xc
c001dcbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcc3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcc5:	b8 10 27 00 00       	mov    eax,0x2710
c001dcca:	ba 00 00 00 00       	mov    edx,0x0
c001dccf:	f7 f1                	div    ecx
c001dcd1:	83 ec 0c             	sub    esp,0xc
c001dcd4:	50                   	push   eax
c001dcd5:	e8 ae fb fe ff       	call   c000d888 <timerHandler(unsigned int)>
c001dcda:	83 c4 10             	add    esp,0x10
c001dcdd:	90                   	nop
c001dcde:	83 c4 0c             	add    esp,0xc
c001dce1:	c3                   	ret    
c001dce2:	66 90                	xchg   ax,ax

c001dce4 <APICTimer::open(int, int, void*)>:
c001dce4:	83 ec 0c             	sub    esp,0xc
c001dce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dceb:	8b 00                	mov    eax,DWORD PTR [eax]
c001dced:	83 c0 24             	add    eax,0x24
c001dcf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcf2:	83 ec 08             	sub    esp,0x8
c001dcf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcfd:	ff d0                	call   eax
c001dcff:	83 c4 10             	add    esp,0x10
c001dd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd06:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd0a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd18:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dd1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd22:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dd28:	83 ec 0c             	sub    esp,0xc
c001dd2b:	51                   	push   ecx
c001dd2c:	6a 01                	push   0x1
c001dd2e:	68 bc dc 01 c0       	push   0xc001dcbc
c001dd33:	52                   	push   edx
c001dd34:	50                   	push   eax
c001dd35:	e8 98 e0 fe ff       	call   c000bdd2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd3a:	83 c4 20             	add    esp,0x20
c001dd3d:	89 c2                	mov    edx,eax
c001dd3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd43:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dd49:	b8 00 00 00 00       	mov    eax,0x0
c001dd4e:	83 c4 0c             	add    esp,0xc
c001dd51:	c3                   	ret    
c001dd52:	66 90                	xchg   ax,ax

c001dd54 <APICTimer::write(int)>:
c001dd54:	83 ec 0c             	sub    esp,0xc
c001dd57:	83 ec 0c             	sub    esp,0xc
c001dd5a:	68 a8 1e 02 c0       	push   0xc0021ea8
c001dd5f:	e8 bb 2b ff ff       	call   c001091f <KePanic(char const*)>
c001dd64:	83 c4 10             	add    esp,0x10
c001dd67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd6f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd75:	90                   	nop
c001dd76:	83 c4 0c             	add    esp,0xc
c001dd79:	c3                   	ret    
c001dd7a:	66 90                	xchg   ax,ax

c001dd7c <APICTimer::APICTimer()>:
c001dd7c:	83 ec 0c             	sub    esp,0xc
c001dd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd83:	83 ec 08             	sub    esp,0x8
c001dd86:	68 b8 1e 02 c0       	push   0xc0021eb8
c001dd8b:	50                   	push   eax
c001dd8c:	e8 2b fa fe ff       	call   c000d7bc <Timer::Timer(char const*)>
c001dd91:	83 c4 10             	add    esp,0x10
c001dd94:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c001dd99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd9d:	89 10                	mov    DWORD PTR [eax],edx
c001dd9f:	90                   	nop
c001dda0:	83 c4 0c             	add    esp,0xc
c001dda3:	c3                   	ret    

c001dda4 <PIT::write(int)>:
c001dda4:	83 ec 10             	sub    esp,0x10
c001dda7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ddaf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ddb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddb9:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001ddbe:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ddc3:	89 c2                	mov    edx,eax
c001ddc5:	c1 fa 1f             	sar    edx,0x1f
c001ddc8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ddcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ddd0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ddd7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dddc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dde0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dde5:	ee                   	out    dx,al
c001dde6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddea:	0f b6 c0             	movzx  eax,al
c001dded:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ddf4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ddf8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ddfc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001de01:	ee                   	out    dx,al
c001de02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de06:	c1 f8 08             	sar    eax,0x8
c001de09:	0f b6 c0             	movzx  eax,al
c001de0c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001de13:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001de1b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001de20:	ee                   	out    dx,al
c001de21:	90                   	nop
c001de22:	83 c4 10             	add    esp,0x10
c001de25:	c3                   	ret    
c001de26:	66 90                	xchg   ax,ax

c001de28 <pitHandler(regs*, void*)>:
c001de28:	83 ec 0c             	sub    esp,0xc
c001de2b:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001de31:	b8 10 27 00 00       	mov    eax,0x2710
c001de36:	89 c2                	mov    edx,eax
c001de38:	c1 fa 1f             	sar    edx,0x1f
c001de3b:	f7 f9                	idiv   ecx
c001de3d:	83 ec 0c             	sub    esp,0xc
c001de40:	50                   	push   eax
c001de41:	e8 42 fa fe ff       	call   c000d888 <timerHandler(unsigned int)>
c001de46:	83 c4 10             	add    esp,0x10
c001de49:	90                   	nop
c001de4a:	83 c4 0c             	add    esp,0xc
c001de4d:	c3                   	ret    
c001de4e:	66 90                	xchg   ax,ax

c001de50 <PIT::open(int, int, void*)>:
c001de50:	83 ec 0c             	sub    esp,0xc
c001de53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de57:	8b 00                	mov    eax,DWORD PTR [eax]
c001de59:	83 c0 24             	add    eax,0x24
c001de5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001de5e:	83 ec 08             	sub    esp,0x8
c001de61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de69:	ff d0                	call   eax
c001de6b:	83 c4 10             	add    esp,0x10
c001de6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de72:	83 ec 0c             	sub    esp,0xc
c001de75:	6a 00                	push   0x0
c001de77:	6a 01                	push   0x1
c001de79:	68 28 de 01 c0       	push   0xc001de28
c001de7e:	6a 00                	push   0x0
c001de80:	50                   	push   eax
c001de81:	e8 4c df fe ff       	call   c000bdd2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de86:	83 c4 20             	add    esp,0x20
c001de89:	89 c2                	mov    edx,eax
c001de8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de8f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de95:	b8 00 00 00 00       	mov    eax,0x0
c001de9a:	83 c4 0c             	add    esp,0xc
c001de9d:	c3                   	ret    
c001de9e:	66 90                	xchg   ax,ax

c001dea0 <PIT::close(int, int, void*)>:
c001dea0:	83 ec 0c             	sub    esp,0xc
c001dea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001deb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb5:	6a 01                	push   0x1
c001deb7:	68 28 de 01 c0       	push   0xc001de28
c001debc:	6a 00                	push   0x0
c001debe:	50                   	push   eax
c001debf:	e8 44 df fe ff       	call   c000be08 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001dec4:	83 c4 10             	add    esp,0x10
c001dec7:	b8 00 00 00 00       	mov    eax,0x0
c001decc:	83 c4 0c             	add    esp,0xc
c001decf:	c3                   	ret    

c001ded0 <PIT::PIT()>:
c001ded0:	83 ec 0c             	sub    esp,0xc
c001ded3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded7:	83 ec 08             	sub    esp,0x8
c001deda:	68 f4 1e 02 c0       	push   0xc0021ef4
c001dedf:	50                   	push   eax
c001dee0:	e8 d7 f8 fe ff       	call   c000d7bc <Timer::Timer(char const*)>
c001dee5:	83 c4 10             	add    esp,0x10
c001dee8:	ba 1c 1f 02 c0       	mov    edx,0xc0021f1c
c001deed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def1:	89 10                	mov    DWORD PTR [eax],edx
c001def3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001defd:	0f b6 d0             	movzx  edx,al
c001df00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df04:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001df0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df15:	0f b6 d0             	movzx  edx,al
c001df18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df1c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001df21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df2b:	8d 50 01             	lea    edx,[eax+0x1]
c001df2e:	88 d1                	mov    cl,dl
c001df30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df34:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001df3a:	0f b6 d0             	movzx  edx,al
c001df3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df41:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001df45:	83 e1 3f             	and    ecx,0x3f
c001df48:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001df4c:	90                   	nop
c001df4d:	83 c4 0c             	add    esp,0xc
c001df50:	c3                   	ret    
c001df51:	66 90                	xchg   ax,ax
c001df53:	66 90                	xchg   ax,ax
c001df55:	66 90                	xchg   ax,ax
c001df57:	66 90                	xchg   ax,ax
c001df59:	66 90                	xchg   ax,ax
c001df5b:	66 90                	xchg   ax,ax
c001df5d:	66 90                	xchg   ax,ax
c001df5f:	90                   	nop

c001df60 <avxDetect>:
c001df60:	b8 01 00 00 00       	mov    eax,0x1
c001df65:	0f a2                	cpuid  
c001df67:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001df6d:	74 15                	je     c001df84 <avxDetect.noAVX>
c001df6f:	b8 01 00 00 00       	mov    eax,0x1
c001df74:	0f a2                	cpuid  
c001df76:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001df7c:	74 06                	je     c001df84 <avxDetect.noAVX>
c001df7e:	b8 01 00 00 00       	mov    eax,0x1
c001df83:	c3                   	ret    

c001df84 <avxDetect.noAVX>:
c001df84:	b8 00 00 00 00       	mov    eax,0x0
c001df89:	c3                   	ret    

c001df8a <avxSave>:
c001df8a:	53                   	push   ebx
c001df8b:	52                   	push   edx
c001df8c:	31 c0                	xor    eax,eax
c001df8e:	48                   	dec    eax
c001df8f:	89 c2                	mov    edx,eax
c001df91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df95:	0f ae 23             	xsave  [ebx]
c001df98:	5a                   	pop    edx
c001df99:	5b                   	pop    ebx
c001df9a:	c3                   	ret    

c001df9b <avxLoad>:
c001df9b:	53                   	push   ebx
c001df9c:	52                   	push   edx
c001df9d:	31 c0                	xor    eax,eax
c001df9f:	48                   	dec    eax
c001dfa0:	89 c2                	mov    edx,eax
c001dfa2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dfa6:	0f ae 2b             	xrstor [ebx]
c001dfa9:	5a                   	pop    edx
c001dfaa:	5b                   	pop    ebx
c001dfab:	c3                   	ret    

c001dfac <avxInit>:
c001dfac:	e8 67 03 00 00       	call   c001e318 <sseInit>
c001dfb1:	50                   	push   eax
c001dfb2:	51                   	push   ecx
c001dfb3:	0f 20 e0             	mov    eax,cr4
c001dfb6:	0d 00 00 04 00       	or     eax,0x40000
c001dfbb:	0f 22 e0             	mov    cr4,eax
c001dfbe:	31 c9                	xor    ecx,ecx
c001dfc0:	0f 01 d0             	xgetbv 
c001dfc3:	0d 07 00 00 00       	or     eax,0x7
c001dfc8:	0f 01 d1             	xsetbv 
c001dfcb:	59                   	pop    ecx
c001dfcc:	58                   	pop    eax
c001dfcd:	c3                   	ret    

c001dfce <avxClose>:
c001dfce:	c3                   	ret    

c001dfcf <wouldSheSayYes>:
c001dfcf:	c3                   	ret    
c001dfd0:	49                   	dec    ecx
c001dfd1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dfd5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dfd9:	75 20                	jne    c001dffb <isr0+0xb>
c001dfdb:	4e                   	dec    esi
c001dfdc:	79 61                	jns    c001e03f <isr7+0x3>
c001dfde:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dfe3:	66 90                	xchg   ax,ax
c001dfe5:	66 90                	xchg   ax,ax
c001dfe7:	66 90                	xchg   ax,ax
c001dfe9:	66 90                	xchg   ax,ax
c001dfeb:	66 90                	xchg   ax,ax
c001dfed:	66 90                	xchg   ax,ax
c001dfef:	90                   	nop

c001dff0 <isr0>:
c001dff0:	fa                   	cli    
c001dff1:	68 00 00 00 00       	push   0x0
c001dff6:	68 00 00 00 00       	push   0x0
c001dffb:	e9 56 01 00 00       	jmp    c001e156 <int_common_stub>

c001e000 <isr1>:
c001e000:	fa                   	cli    
c001e001:	6a 00                	push   0x0
c001e003:	6a 01                	push   0x1
c001e005:	e9 4c 01 00 00       	jmp    c001e156 <int_common_stub>

c001e00a <isr2>:
c001e00a:	fa                   	cli    
c001e00b:	6a 00                	push   0x0
c001e00d:	6a 02                	push   0x2
c001e00f:	e9 42 01 00 00       	jmp    c001e156 <int_common_stub>

c001e014 <isr3>:
c001e014:	fa                   	cli    
c001e015:	6a 00                	push   0x0
c001e017:	6a 03                	push   0x3
c001e019:	e9 38 01 00 00       	jmp    c001e156 <int_common_stub>

c001e01e <isr4>:
c001e01e:	fa                   	cli    
c001e01f:	6a 00                	push   0x0
c001e021:	6a 04                	push   0x4
c001e023:	e9 2e 01 00 00       	jmp    c001e156 <int_common_stub>

c001e028 <isr5>:
c001e028:	fa                   	cli    
c001e029:	6a 00                	push   0x0
c001e02b:	6a 05                	push   0x5
c001e02d:	e9 24 01 00 00       	jmp    c001e156 <int_common_stub>

c001e032 <isr6>:
c001e032:	fa                   	cli    
c001e033:	6a 00                	push   0x0
c001e035:	6a 06                	push   0x6
c001e037:	e9 1a 01 00 00       	jmp    c001e156 <int_common_stub>

c001e03c <isr7>:
c001e03c:	fa                   	cli    
c001e03d:	6a 00                	push   0x0
c001e03f:	6a 07                	push   0x7
c001e041:	e9 10 01 00 00       	jmp    c001e156 <int_common_stub>

c001e046 <isr8>:
c001e046:	fa                   	cli    
c001e047:	6a 08                	push   0x8
c001e049:	e9 08 01 00 00       	jmp    c001e156 <int_common_stub>

c001e04e <isr9>:
c001e04e:	fa                   	cli    
c001e04f:	6a 00                	push   0x0
c001e051:	6a 09                	push   0x9
c001e053:	e9 fe 00 00 00       	jmp    c001e156 <int_common_stub>

c001e058 <isr10>:
c001e058:	fa                   	cli    
c001e059:	6a 0a                	push   0xa
c001e05b:	e9 f6 00 00 00       	jmp    c001e156 <int_common_stub>

c001e060 <isr11>:
c001e060:	fa                   	cli    
c001e061:	6a 0b                	push   0xb
c001e063:	e9 ee 00 00 00       	jmp    c001e156 <int_common_stub>

c001e068 <isr12>:
c001e068:	fa                   	cli    
c001e069:	6a 0c                	push   0xc
c001e06b:	e9 e6 00 00 00       	jmp    c001e156 <int_common_stub>

c001e070 <isr13>:
c001e070:	fa                   	cli    
c001e071:	6a 0d                	push   0xd
c001e073:	53                   	push   ebx
c001e074:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e078:	81 fb 46 e2 01 c0    	cmp    ebx,0xc001e246
c001e07e:	5b                   	pop    ebx
c001e07f:	0f 84 c3 01 00 00    	je     c001e248 <finishSignal2>
c001e085:	e9 cc 00 00 00       	jmp    c001e156 <int_common_stub>

c001e08a <isr14>:
c001e08a:	fa                   	cli    
c001e08b:	6a 0e                	push   0xe
c001e08d:	e9 c4 00 00 00       	jmp    c001e156 <int_common_stub>

c001e092 <isr15>:
c001e092:	fa                   	cli    
c001e093:	6a 00                	push   0x0
c001e095:	6a 0f                	push   0xf
c001e097:	e9 ba 00 00 00       	jmp    c001e156 <int_common_stub>

c001e09c <isr16>:
c001e09c:	fa                   	cli    
c001e09d:	6a 00                	push   0x0
c001e09f:	6a 10                	push   0x10
c001e0a1:	e9 b0 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0a6 <isr17>:
c001e0a6:	fa                   	cli    
c001e0a7:	6a 00                	push   0x0
c001e0a9:	6a 11                	push   0x11
c001e0ab:	e9 a6 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0b0 <isr18>:
c001e0b0:	fa                   	cli    
c001e0b1:	6a 00                	push   0x0
c001e0b3:	6a 12                	push   0x12
c001e0b5:	e9 9c 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0ba <irq3>:
c001e0ba:	fa                   	cli    
c001e0bb:	6a 00                	push   0x0
c001e0bd:	6a 23                	push   0x23
c001e0bf:	e9 92 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0c4 <irq4>:
c001e0c4:	fa                   	cli    
c001e0c5:	6a 00                	push   0x0
c001e0c7:	6a 24                	push   0x24
c001e0c9:	e9 88 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0ce <irq5>:
c001e0ce:	fa                   	cli    
c001e0cf:	6a 00                	push   0x0
c001e0d1:	6a 25                	push   0x25
c001e0d3:	e9 7e 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0d8 <irq6>:
c001e0d8:	fa                   	cli    
c001e0d9:	6a 00                	push   0x0
c001e0db:	6a 26                	push   0x26
c001e0dd:	e9 74 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0e2 <irq7>:
c001e0e2:	fa                   	cli    
c001e0e3:	6a 00                	push   0x0
c001e0e5:	6a 27                	push   0x27
c001e0e7:	e9 6a 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0ec <irq8>:
c001e0ec:	fa                   	cli    
c001e0ed:	6a 00                	push   0x0
c001e0ef:	6a 28                	push   0x28
c001e0f1:	e9 60 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0f6 <irq9>:
c001e0f6:	fa                   	cli    
c001e0f7:	6a 00                	push   0x0
c001e0f9:	6a 29                	push   0x29
c001e0fb:	e9 56 00 00 00       	jmp    c001e156 <int_common_stub>

c001e100 <irq10>:
c001e100:	fa                   	cli    
c001e101:	6a 00                	push   0x0
c001e103:	6a 2a                	push   0x2a
c001e105:	e9 4c 00 00 00       	jmp    c001e156 <int_common_stub>

c001e10a <irq11>:
c001e10a:	fa                   	cli    
c001e10b:	6a 00                	push   0x0
c001e10d:	6a 2b                	push   0x2b
c001e10f:	e9 42 00 00 00       	jmp    c001e156 <int_common_stub>

c001e114 <irq12>:
c001e114:	fa                   	cli    
c001e115:	6a 00                	push   0x0
c001e117:	6a 2c                	push   0x2c
c001e119:	e9 38 00 00 00       	jmp    c001e156 <int_common_stub>

c001e11e <irq13>:
c001e11e:	fa                   	cli    
c001e11f:	6a 00                	push   0x0
c001e121:	6a 2d                	push   0x2d
c001e123:	e9 2e 00 00 00       	jmp    c001e156 <int_common_stub>

c001e128 <irq14>:
c001e128:	fa                   	cli    
c001e129:	6a 00                	push   0x0
c001e12b:	6a 2e                	push   0x2e
c001e12d:	e9 24 00 00 00       	jmp    c001e156 <int_common_stub>

c001e132 <irq15>:
c001e132:	fa                   	cli    
c001e133:	6a 00                	push   0x0
c001e135:	6a 2f                	push   0x2f
c001e137:	e9 1a 00 00 00       	jmp    c001e156 <int_common_stub>

c001e13c <irq1>:
c001e13c:	fa                   	cli    
c001e13d:	6a 00                	push   0x0
c001e13f:	6a 21                	push   0x21
c001e141:	eb 13                	jmp    c001e156 <int_common_stub>

c001e143 <irq2>:
c001e143:	fa                   	cli    
c001e144:	6a 00                	push   0x0
c001e146:	6a 22                	push   0x22
c001e148:	eb 0c                	jmp    c001e156 <int_common_stub>

c001e14a <isr96>:
c001e14a:	6a 00                	push   0x0
c001e14c:	6a 60                	push   0x60
c001e14e:	fb                   	sti    
c001e14f:	eb 37                	jmp    c001e188 <syscall_common_stub>

c001e151 <irq0>:
c001e151:	fa                   	cli    
c001e152:	6a 00                	push   0x0
c001e154:	6a 20                	push   0x20

c001e156 <int_common_stub>:
c001e156:	60                   	pusha  
c001e157:	1e                   	push   ds
c001e158:	06                   	push   es
c001e159:	0f a0                	push   fs
c001e15b:	0f a8                	push   gs
c001e15d:	66 b8 10 00          	mov    ax,0x10
c001e161:	66 8e d8             	mov    ds,ax
c001e164:	66 8e c0             	mov    es,ax
c001e167:	66 8e e0             	mov    fs,ax
c001e16a:	66 8e e8             	mov    gs,ax
c001e16d:	54                   	push   esp
c001e16e:	fc                   	cld    
c001e16f:	e8 5c e1 fe ff       	call   c000c2d0 <int_handler>
c001e174:	81 c4 04 00 00 00    	add    esp,0x4
c001e17a:	0f a9                	pop    gs
c001e17c:	0f a1                	pop    fs
c001e17e:	07                   	pop    es
c001e17f:	1f                   	pop    ds
c001e180:	61                   	popa   
c001e181:	81 c4 08 00 00 00    	add    esp,0x8
c001e187:	cf                   	iret   

c001e188 <syscall_common_stub>:
c001e188:	60                   	pusha  
c001e189:	1e                   	push   ds
c001e18a:	06                   	push   es
c001e18b:	0f a0                	push   fs
c001e18d:	0f a8                	push   gs
c001e18f:	66 b8 10 00          	mov    ax,0x10
c001e193:	66 8e d8             	mov    ds,ax
c001e196:	66 8e c0             	mov    es,ax
c001e199:	66 8e e0             	mov    fs,ax
c001e19c:	66 8e e8             	mov    gs,ax
c001e19f:	54                   	push   esp
c001e1a0:	fc                   	cld    
c001e1a1:	e8 2a e1 fe ff       	call   c000c2d0 <int_handler>
c001e1a6:	81 c4 04 00 00 00    	add    esp,0x4
c001e1ac:	0f a9                	pop    gs
c001e1ae:	0f a1                	pop    fs
c001e1b0:	07                   	pop    es
c001e1b1:	1f                   	pop    ds
c001e1b2:	e8 70 2d ff ff       	call   c0010f27 <KiCheckSignalZ>
c001e1b7:	3d 00 00 00 00       	cmp    eax,0x0
c001e1bc:	0f 84 c0 00 00 00    	je     c001e282 <skipSignals>
c001e1c2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e1c7:	61                   	popa   
c001e1c8:	53                   	push   ebx
c001e1c9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e1cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e1d2:	5b                   	pop    ebx
c001e1d3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e1d8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e1db:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e1de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1e1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e1e4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e1e7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e1ea:	81 c4 08 00 00 00    	add    esp,0x8
c001e1f0:	5e                   	pop    esi
c001e1f1:	5b                   	pop    ebx
c001e1f2:	59                   	pop    ecx
c001e1f3:	5a                   	pop    edx
c001e1f4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e1f7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e1fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e1fd:	52                   	push   edx
c001e1fe:	51                   	push   ecx
c001e1ff:	53                   	push   ebx
c001e200:	56                   	push   esi
c001e201:	81 ec 08 00 00 00    	sub    esp,0x8
c001e207:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e20a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e20d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e210:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e213:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e216:	60                   	pusha  
c001e217:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e21d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e220:	89 e3                	mov    ebx,esp
c001e222:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e225:	52                   	push   edx
c001e226:	68 46 e2 01 c0       	push   0xc001e246
c001e22b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e22e:	89 dc                	mov    esp,ebx
c001e230:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e233:	68 23 00 00 00       	push   0x23
c001e238:	51                   	push   ecx
c001e239:	68 02 02 00 00       	push   0x202
c001e23e:	68 1b 00 00 00       	push   0x1b
c001e243:	ff 36                	push   DWORD PTR [esi]
c001e245:	cf                   	iret   

c001e246 <finishSignal>:
c001e246:	cd 0f                	int    0xf

c001e248 <finishSignal2>:
c001e248:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e24e:	e8 51 2d ff ff       	call   c0010fa4 <KiFinishSignalZ>
c001e253:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e259:	68 23 00 00 00       	push   0x23
c001e25e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e261:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e264:	68 1b 00 00 00       	push   0x1b
c001e269:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e26c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e26f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e272:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e275:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e278:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e27b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e27e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e281:	cf                   	iret   

c001e282 <skipSignals>:
c001e282:	61                   	popa   
c001e283:	81 c4 08 00 00 00    	add    esp,0x8
c001e289:	cf                   	iret   
c001e28a:	90                   	nop
c001e28b:	90                   	nop

c001e28c <irq16>:
c001e28c:	fa                   	cli    
c001e28d:	6a 00                	push   0x0
c001e28f:	6a 30                	push   0x30
c001e291:	e9 c0 fe ff ff       	jmp    c001e156 <int_common_stub>

c001e296 <irq17>:
c001e296:	fa                   	cli    
c001e297:	6a 00                	push   0x0
c001e299:	6a 31                	push   0x31
c001e29b:	e9 b6 fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2a0 <irq18>:
c001e2a0:	fa                   	cli    
c001e2a1:	6a 00                	push   0x0
c001e2a3:	6a 32                	push   0x32
c001e2a5:	e9 ac fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2aa <irq19>:
c001e2aa:	fa                   	cli    
c001e2ab:	6a 00                	push   0x0
c001e2ad:	6a 33                	push   0x33
c001e2af:	e9 a2 fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2b4 <irq20>:
c001e2b4:	fa                   	cli    
c001e2b5:	6a 00                	push   0x0
c001e2b7:	6a 34                	push   0x34
c001e2b9:	e9 98 fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2be <irq21>:
c001e2be:	fa                   	cli    
c001e2bf:	6a 00                	push   0x0
c001e2c1:	6a 35                	push   0x35
c001e2c3:	e9 8e fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2c8 <irq22>:
c001e2c8:	fa                   	cli    
c001e2c9:	6a 00                	push   0x0
c001e2cb:	6a 36                	push   0x36
c001e2cd:	e9 84 fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2d2 <irq23>:
c001e2d2:	fa                   	cli    
c001e2d3:	6a 00                	push   0x0
c001e2d5:	6a 37                	push   0x37
c001e2d7:	e9 7a fe ff ff       	jmp    c001e156 <int_common_stub>
c001e2dc:	66 90                	xchg   ax,ax
c001e2de:	66 90                	xchg   ax,ax

c001e2e0 <i386GetRDRAND>:
c001e2e0:	b9 64 00 00 00       	mov    ecx,0x64

c001e2e5 <retry>:
c001e2e5:	0f c7 f0             	rdrand eax
c001e2e8:	72 05                	jb     c001e2ef <retry.done>
c001e2ea:	e2 f9                	loop   c001e2e5 <retry>

c001e2ec <retry.fail>:
c001e2ec:	31 c0                	xor    eax,eax
c001e2ee:	c3                   	ret    

c001e2ef <retry.done>:
c001e2ef:	c3                   	ret    

c001e2f0 <absolutelyNoChanceInHell>:
c001e2f0:	b8 01 00 00 00       	mov    eax,0x1
c001e2f5:	0f a2                	cpuid  
c001e2f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e2fd:	74 06                	je     c001e305 <sseDetect.noSSE>
c001e2ff:	b8 01 00 00 00       	mov    eax,0x1
c001e304:	c3                   	ret    

c001e305 <sseDetect.noSSE>:
c001e305:	31 c0                	xor    eax,eax
c001e307:	c3                   	ret    

c001e308 <sseSave>:
c001e308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e30c:	0f ae 00             	fxsave [eax]
c001e30f:	c3                   	ret    

c001e310 <sseLoad>:
c001e310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e314:	0f ae 08             	fxrstor [eax]
c001e317:	c3                   	ret    

c001e318 <sseInit>:
c001e318:	e8 42 00 00 00       	call   c001e35f <x87Init>
c001e31d:	0f 20 e0             	mov    eax,cr4
c001e320:	66 0d 00 06          	or     ax,0x600
c001e324:	0f 22 e0             	mov    cr4,eax
c001e327:	c3                   	ret    

c001e328 <sseClose>:
c001e328:	c3                   	ret    
c001e329:	66 90                	xchg   ax,ax
c001e32b:	66 90                	xchg   ax,ax
c001e32d:	66 90                	xchg   ax,ax
c001e32f:	90                   	nop

c001e330 <value_37F>:
c001e330:	7f 03                	jg     c001e335 <value_37A+0x1>

c001e332 <value_37E>:
c001e332:	7e 03                	jle    c001e337 <x87Detect+0x1>

c001e334 <value_37A>:
c001e334:	7a 03                	jp     c001e339 <x87Detect+0x3>

c001e336 <x87Detect>:
c001e336:	b8 01 00 00 00       	mov    eax,0x1
c001e33b:	0f a2                	cpuid  
c001e33d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e343:	74 06                	je     c001e34b <x87Detect.nox87>
c001e345:	b8 01 00 00 00       	mov    eax,0x1
c001e34a:	c3                   	ret    

c001e34b <x87Detect.nox87>:
c001e34b:	b8 00 00 00 00       	mov    eax,0x0
c001e350:	c3                   	ret    

c001e351 <x87Save>:
c001e351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e355:	dd 30                	fnsave [eax]
c001e357:	c3                   	ret    

c001e358 <x87Load>:
c001e358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e35c:	dd 20                	frstor [eax]
c001e35e:	c3                   	ret    

c001e35f <x87Init>:
c001e35f:	0f 20 c0             	mov    eax,cr0
c001e362:	66 25 fb ff          	and    ax,0xfffb
c001e366:	66 0d 22 00          	or     ax,0x22
c001e36a:	0f 22 c0             	mov    cr0,eax
c001e36d:	db e3                	fninit 
c001e36f:	0f 06                	clts   
c001e371:	d9 2d 34 e3 01 c0    	fldcw  WORD PTR ds:0xc001e334
c001e377:	c3                   	ret    

c001e378 <x87Close>:
c001e378:	c3                   	ret    
c001e379:	66 90                	xchg   ax,ax
c001e37b:	90                   	nop

c001e37c <__do_global_ctors_aux>:
c001e37c:	a1 30 f3 01 c0       	mov    eax,ds:0xc001f330
c001e381:	83 f8 ff             	cmp    eax,0xffffffff
c001e384:	74 1a                	je     c001e3a0 <__do_global_ctors_aux+0x24>
c001e386:	55                   	push   ebp
c001e387:	89 e5                	mov    ebp,esp
c001e389:	53                   	push   ebx
c001e38a:	52                   	push   edx
c001e38b:	bb 30 f3 01 c0       	mov    ebx,0xc001f330
c001e390:	ff d0                	call   eax
c001e392:	83 eb 04             	sub    ebx,0x4
c001e395:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e397:	83 f8 ff             	cmp    eax,0xffffffff
c001e39a:	75 f4                	jne    c001e390 <__do_global_ctors_aux+0x14>
c001e39c:	58                   	pop    eax
c001e39d:	5b                   	pop    ebx
c001e39e:	5d                   	pop    ebp
c001e39f:	c3                   	ret    
c001e3a0:	c3                   	ret    
c001e3a1:	66 90                	xchg   ax,ax
c001e3a3:	90                   	nop

c001e3a4 <__divdi3>:
c001e3a4:	55                   	push   ebp
c001e3a5:	57                   	push   edi
c001e3a6:	56                   	push   esi
c001e3a7:	53                   	push   ebx
c001e3a8:	83 ec 1c             	sub    esp,0x1c
c001e3ab:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e3af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e3b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e3b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e3ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e3be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e3c2:	85 db                	test   ebx,ebx
c001e3c4:	0f 88 8e 00 00 00    	js     c001e458 <__divdi3+0xb4>
c001e3ca:	89 dd                	mov    ebp,ebx
c001e3cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e3d4:	89 d3                	mov    ebx,edx
c001e3d6:	85 d2                	test   edx,edx
c001e3d8:	79 0d                	jns    c001e3e7 <__divdi3+0x43>
c001e3da:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e3de:	f7 d8                	neg    eax
c001e3e0:	83 d2 00             	adc    edx,0x0
c001e3e3:	f7 da                	neg    edx
c001e3e5:	89 d3                	mov    ebx,edx
c001e3e7:	89 c7                	mov    edi,eax
c001e3e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3ec:	85 db                	test   ebx,ebx
c001e3ee:	75 48                	jne    c001e438 <__divdi3+0x94>
c001e3f0:	39 ef                	cmp    edi,ebp
c001e3f2:	76 24                	jbe    c001e418 <__divdi3+0x74>
c001e3f4:	89 ea                	mov    edx,ebp
c001e3f6:	f7 f7                	div    edi
c001e3f8:	89 c1                	mov    ecx,eax
c001e3fa:	31 f6                	xor    esi,esi
c001e3fc:	89 c8                	mov    eax,ecx
c001e3fe:	89 f2                	mov    edx,esi
c001e400:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e404:	85 c9                	test   ecx,ecx
c001e406:	74 07                	je     c001e40f <__divdi3+0x6b>
c001e408:	f7 d8                	neg    eax
c001e40a:	83 d2 00             	adc    edx,0x0
c001e40d:	f7 da                	neg    edx
c001e40f:	83 c4 1c             	add    esp,0x1c
c001e412:	5b                   	pop    ebx
c001e413:	5e                   	pop    esi
c001e414:	5f                   	pop    edi
c001e415:	5d                   	pop    ebp
c001e416:	c3                   	ret    
c001e417:	90                   	nop
c001e418:	85 ff                	test   edi,edi
c001e41a:	75 0b                	jne    c001e427 <__divdi3+0x83>
c001e41c:	b8 01 00 00 00       	mov    eax,0x1
c001e421:	31 d2                	xor    edx,edx
c001e423:	f7 f3                	div    ebx
c001e425:	89 c7                	mov    edi,eax
c001e427:	31 d2                	xor    edx,edx
c001e429:	89 e8                	mov    eax,ebp
c001e42b:	f7 f7                	div    edi
c001e42d:	89 c6                	mov    esi,eax
c001e42f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e432:	f7 f7                	div    edi
c001e434:	89 c1                	mov    ecx,eax
c001e436:	eb c4                	jmp    c001e3fc <__divdi3+0x58>
c001e438:	39 eb                	cmp    ebx,ebp
c001e43a:	77 3c                	ja     c001e478 <__divdi3+0xd4>
c001e43c:	0f bd f3             	bsr    esi,ebx
c001e43f:	83 f6 1f             	xor    esi,0x1f
c001e442:	75 40                	jne    c001e484 <__divdi3+0xe0>
c001e444:	39 eb                	cmp    ebx,ebp
c001e446:	72 09                	jb     c001e451 <__divdi3+0xad>
c001e448:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e44b:	0f 87 97 00 00 00    	ja     c001e4e8 <__divdi3+0x144>
c001e451:	b9 01 00 00 00       	mov    ecx,0x1
c001e456:	eb a4                	jmp    c001e3fc <__divdi3+0x58>
c001e458:	f7 d9                	neg    ecx
c001e45a:	83 d3 00             	adc    ebx,0x0
c001e45d:	f7 db                	neg    ebx
c001e45f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e462:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e466:	89 dd                	mov    ebp,ebx
c001e468:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e470:	e9 5f ff ff ff       	jmp    c001e3d4 <__divdi3+0x30>
c001e475:	8d 76 00             	lea    esi,[esi+0x0]
c001e478:	31 f6                	xor    esi,esi
c001e47a:	31 c9                	xor    ecx,ecx
c001e47c:	e9 7b ff ff ff       	jmp    c001e3fc <__divdi3+0x58>
c001e481:	8d 76 00             	lea    esi,[esi+0x0]
c001e484:	b8 20 00 00 00       	mov    eax,0x20
c001e489:	29 f0                	sub    eax,esi
c001e48b:	89 f1                	mov    ecx,esi
c001e48d:	d3 e3                	shl    ebx,cl
c001e48f:	89 fa                	mov    edx,edi
c001e491:	88 c1                	mov    cl,al
c001e493:	d3 ea                	shr    edx,cl
c001e495:	09 da                	or     edx,ebx
c001e497:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e49b:	89 f1                	mov    ecx,esi
c001e49d:	d3 e7                	shl    edi,cl
c001e49f:	89 eb                	mov    ebx,ebp
c001e4a1:	88 c1                	mov    cl,al
c001e4a3:	d3 eb                	shr    ebx,cl
c001e4a5:	89 f1                	mov    ecx,esi
c001e4a7:	d3 e5                	shl    ebp,cl
c001e4a9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e4ac:	88 c1                	mov    cl,al
c001e4ae:	d3 ea                	shr    edx,cl
c001e4b0:	09 d5                	or     ebp,edx
c001e4b2:	89 e8                	mov    eax,ebp
c001e4b4:	89 da                	mov    edx,ebx
c001e4b6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e4ba:	89 d3                	mov    ebx,edx
c001e4bc:	89 c5                	mov    ebp,eax
c001e4be:	f7 e7                	mul    edi
c001e4c0:	39 d3                	cmp    ebx,edx
c001e4c2:	72 18                	jb     c001e4dc <__divdi3+0x138>
c001e4c4:	74 0a                	je     c001e4d0 <__divdi3+0x12c>
c001e4c6:	89 e9                	mov    ecx,ebp
c001e4c8:	31 f6                	xor    esi,esi
c001e4ca:	e9 2d ff ff ff       	jmp    c001e3fc <__divdi3+0x58>
c001e4cf:	90                   	nop
c001e4d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e4d3:	89 f1                	mov    ecx,esi
c001e4d5:	d3 e7                	shl    edi,cl
c001e4d7:	39 c7                	cmp    edi,eax
c001e4d9:	73 eb                	jae    c001e4c6 <__divdi3+0x122>
c001e4db:	90                   	nop
c001e4dc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e4df:	31 f6                	xor    esi,esi
c001e4e1:	e9 16 ff ff ff       	jmp    c001e3fc <__divdi3+0x58>
c001e4e6:	66 90                	xchg   ax,ax
c001e4e8:	31 c9                	xor    ecx,ecx
c001e4ea:	e9 0d ff ff ff       	jmp    c001e3fc <__divdi3+0x58>
c001e4ef:	90                   	nop

c001e4f0 <__moddi3>:
c001e4f0:	55                   	push   ebp
c001e4f1:	57                   	push   edi
c001e4f2:	56                   	push   esi
c001e4f3:	53                   	push   ebx
c001e4f4:	83 ec 2c             	sub    esp,0x2c
c001e4f7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e4fb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e4ff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e503:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e507:	85 db                	test   ebx,ebx
c001e509:	0f 88 85 00 00 00    	js     c001e594 <__moddi3+0xa4>
c001e50f:	89 de                	mov    esi,ebx
c001e511:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e519:	89 d7                	mov    edi,edx
c001e51b:	85 d2                	test   edx,edx
c001e51d:	79 09                	jns    c001e528 <__moddi3+0x38>
c001e51f:	f7 d8                	neg    eax
c001e521:	83 d2 00             	adc    edx,0x0
c001e524:	f7 da                	neg    edx
c001e526:	89 d7                	mov    edi,edx
c001e528:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e52c:	89 cd                	mov    ebp,ecx
c001e52e:	85 ff                	test   edi,edi
c001e530:	75 52                	jne    c001e584 <__moddi3+0x94>
c001e532:	89 c3                	mov    ebx,eax
c001e534:	39 f0                	cmp    eax,esi
c001e536:	76 24                	jbe    c001e55c <__moddi3+0x6c>
c001e538:	89 c8                	mov    eax,ecx
c001e53a:	89 f2                	mov    edx,esi
c001e53c:	f7 f3                	div    ebx
c001e53e:	89 d6                	mov    esi,edx
c001e540:	89 f0                	mov    eax,esi
c001e542:	31 d2                	xor    edx,edx
c001e544:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e548:	85 c9                	test   ecx,ecx
c001e54a:	74 07                	je     c001e553 <__moddi3+0x63>
c001e54c:	f7 d8                	neg    eax
c001e54e:	83 d2 00             	adc    edx,0x0
c001e551:	f7 da                	neg    edx
c001e553:	83 c4 2c             	add    esp,0x2c
c001e556:	5b                   	pop    ebx
c001e557:	5e                   	pop    esi
c001e558:	5f                   	pop    edi
c001e559:	5d                   	pop    ebp
c001e55a:	c3                   	ret    
c001e55b:	90                   	nop
c001e55c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e560:	85 db                	test   ebx,ebx
c001e562:	75 0d                	jne    c001e571 <__moddi3+0x81>
c001e564:	b8 01 00 00 00       	mov    eax,0x1
c001e569:	31 d2                	xor    edx,edx
c001e56b:	f7 f7                	div    edi
c001e56d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e571:	89 f0                	mov    eax,esi
c001e573:	31 d2                	xor    edx,edx
c001e575:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e579:	f7 f7                	div    edi
c001e57b:	89 e8                	mov    eax,ebp
c001e57d:	f7 f7                	div    edi
c001e57f:	89 d6                	mov    esi,edx
c001e581:	eb bd                	jmp    c001e540 <__moddi3+0x50>
c001e583:	90                   	nop
c001e584:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e588:	39 f7                	cmp    edi,esi
c001e58a:	76 20                	jbe    c001e5ac <__moddi3+0xbc>
c001e58c:	89 c8                	mov    eax,ecx
c001e58e:	89 f2                	mov    edx,esi
c001e590:	eb b2                	jmp    c001e544 <__moddi3+0x54>
c001e592:	66 90                	xchg   ax,ax
c001e594:	f7 d9                	neg    ecx
c001e596:	83 d3 00             	adc    ebx,0x0
c001e599:	f7 db                	neg    ebx
c001e59b:	89 de                	mov    esi,ebx
c001e59d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e5a5:	e9 6f ff ff ff       	jmp    c001e519 <__moddi3+0x29>
c001e5aa:	66 90                	xchg   ax,ax
c001e5ac:	0f bd c7             	bsr    eax,edi
c001e5af:	83 f0 1f             	xor    eax,0x1f
c001e5b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e5b6:	75 24                	jne    c001e5dc <__moddi3+0xec>
c001e5b8:	39 f7                	cmp    edi,esi
c001e5ba:	72 06                	jb     c001e5c2 <__moddi3+0xd2>
c001e5bc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e5c0:	77 0c                	ja     c001e5ce <__moddi3+0xde>
c001e5c2:	89 e9                	mov    ecx,ebp
c001e5c4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e5c8:	19 fe                	sbb    esi,edi
c001e5ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e5ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5d2:	89 f2                	mov    edx,esi
c001e5d4:	e9 6b ff ff ff       	jmp    c001e544 <__moddi3+0x54>
c001e5d9:	8d 76 00             	lea    esi,[esi+0x0]
c001e5dc:	b8 20 00 00 00       	mov    eax,0x20
c001e5e1:	89 c2                	mov    edx,eax
c001e5e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e5e7:	29 da                	sub    edx,ebx
c001e5e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e5ed:	88 d9                	mov    cl,bl
c001e5ef:	d3 e7                	shl    edi,cl
c001e5f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5f5:	88 d1                	mov    cl,dl
c001e5f7:	d3 e8                	shr    eax,cl
c001e5f9:	09 c7                	or     edi,eax
c001e5fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e5ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e603:	89 d8                	mov    eax,ebx
c001e605:	88 d9                	mov    cl,bl
c001e607:	d3 e7                	shl    edi,cl
c001e609:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e60d:	89 f3                	mov    ebx,esi
c001e60f:	88 d1                	mov    cl,dl
c001e611:	d3 eb                	shr    ebx,cl
c001e613:	89 c7                	mov    edi,eax
c001e615:	88 c1                	mov    cl,al
c001e617:	d3 e6                	shl    esi,cl
c001e619:	89 e8                	mov    eax,ebp
c001e61b:	88 d1                	mov    cl,dl
c001e61d:	d3 e8                	shr    eax,cl
c001e61f:	09 f0                	or     eax,esi
c001e621:	89 f9                	mov    ecx,edi
c001e623:	d3 e5                	shl    ebp,cl
c001e625:	89 da                	mov    edx,ebx
c001e627:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e62b:	89 d3                	mov    ebx,edx
c001e62d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e631:	89 c6                	mov    esi,eax
c001e633:	89 d1                	mov    ecx,edx
c001e635:	39 d3                	cmp    ebx,edx
c001e637:	72 27                	jb     c001e660 <__moddi3+0x170>
c001e639:	74 21                	je     c001e65c <__moddi3+0x16c>
c001e63b:	29 f5                	sub    ebp,esi
c001e63d:	19 cb                	sbb    ebx,ecx
c001e63f:	89 de                	mov    esi,ebx
c001e641:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e645:	d3 e6                	shl    esi,cl
c001e647:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e64b:	89 f9                	mov    ecx,edi
c001e64d:	d3 ed                	shr    ebp,cl
c001e64f:	09 ee                	or     esi,ebp
c001e651:	89 f0                	mov    eax,esi
c001e653:	d3 eb                	shr    ebx,cl
c001e655:	89 da                	mov    edx,ebx
c001e657:	e9 e8 fe ff ff       	jmp    c001e544 <__moddi3+0x54>
c001e65c:	39 c5                	cmp    ebp,eax
c001e65e:	73 db                	jae    c001e63b <__moddi3+0x14b>
c001e660:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e664:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e668:	89 d1                	mov    ecx,edx
c001e66a:	89 c6                	mov    esi,eax
c001e66c:	eb cd                	jmp    c001e63b <__moddi3+0x14b>
c001e66e:	66 90                	xchg   ax,ax

c001e670 <__udivdi3>:
c001e670:	55                   	push   ebp
c001e671:	57                   	push   edi
c001e672:	56                   	push   esi
c001e673:	53                   	push   ebx
c001e674:	83 ec 1c             	sub    esp,0x1c
c001e677:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e67b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e67f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e683:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e687:	85 d2                	test   edx,edx
c001e689:	75 41                	jne    c001e6cc <__udivdi3+0x5c>
c001e68b:	39 f7                	cmp    edi,esi
c001e68d:	76 15                	jbe    c001e6a4 <__udivdi3+0x34>
c001e68f:	89 e8                	mov    eax,ebp
c001e691:	89 f2                	mov    edx,esi
c001e693:	f7 f7                	div    edi
c001e695:	31 db                	xor    ebx,ebx
c001e697:	89 da                	mov    edx,ebx
c001e699:	83 c4 1c             	add    esp,0x1c
c001e69c:	5b                   	pop    ebx
c001e69d:	5e                   	pop    esi
c001e69e:	5f                   	pop    edi
c001e69f:	5d                   	pop    ebp
c001e6a0:	c3                   	ret    
c001e6a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e6a4:	89 f9                	mov    ecx,edi
c001e6a6:	85 ff                	test   edi,edi
c001e6a8:	75 0b                	jne    c001e6b5 <__udivdi3+0x45>
c001e6aa:	b8 01 00 00 00       	mov    eax,0x1
c001e6af:	31 d2                	xor    edx,edx
c001e6b1:	f7 f7                	div    edi
c001e6b3:	89 c1                	mov    ecx,eax
c001e6b5:	31 d2                	xor    edx,edx
c001e6b7:	89 f0                	mov    eax,esi
c001e6b9:	f7 f1                	div    ecx
c001e6bb:	89 c3                	mov    ebx,eax
c001e6bd:	89 e8                	mov    eax,ebp
c001e6bf:	f7 f1                	div    ecx
c001e6c1:	89 da                	mov    edx,ebx
c001e6c3:	83 c4 1c             	add    esp,0x1c
c001e6c6:	5b                   	pop    ebx
c001e6c7:	5e                   	pop    esi
c001e6c8:	5f                   	pop    edi
c001e6c9:	5d                   	pop    ebp
c001e6ca:	c3                   	ret    
c001e6cb:	90                   	nop
c001e6cc:	39 f2                	cmp    edx,esi
c001e6ce:	77 1c                	ja     c001e6ec <__udivdi3+0x7c>
c001e6d0:	0f bd da             	bsr    ebx,edx
c001e6d3:	83 f3 1f             	xor    ebx,0x1f
c001e6d6:	75 24                	jne    c001e6fc <__udivdi3+0x8c>
c001e6d8:	39 f2                	cmp    edx,esi
c001e6da:	72 08                	jb     c001e6e4 <__udivdi3+0x74>
c001e6dc:	39 ef                	cmp    edi,ebp
c001e6de:	0f 87 84 00 00 00    	ja     c001e768 <__udivdi3+0xf8>
c001e6e4:	b8 01 00 00 00       	mov    eax,0x1
c001e6e9:	eb ac                	jmp    c001e697 <__udivdi3+0x27>
c001e6eb:	90                   	nop
c001e6ec:	31 db                	xor    ebx,ebx
c001e6ee:	31 c0                	xor    eax,eax
c001e6f0:	89 da                	mov    edx,ebx
c001e6f2:	83 c4 1c             	add    esp,0x1c
c001e6f5:	5b                   	pop    ebx
c001e6f6:	5e                   	pop    esi
c001e6f7:	5f                   	pop    edi
c001e6f8:	5d                   	pop    ebp
c001e6f9:	c3                   	ret    
c001e6fa:	66 90                	xchg   ax,ax
c001e6fc:	b8 20 00 00 00       	mov    eax,0x20
c001e701:	29 d8                	sub    eax,ebx
c001e703:	88 d9                	mov    cl,bl
c001e705:	d3 e2                	shl    edx,cl
c001e707:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e70b:	89 fa                	mov    edx,edi
c001e70d:	88 c1                	mov    cl,al
c001e70f:	d3 ea                	shr    edx,cl
c001e711:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e715:	09 d1                	or     ecx,edx
c001e717:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e71b:	88 d9                	mov    cl,bl
c001e71d:	d3 e7                	shl    edi,cl
c001e71f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e723:	89 f7                	mov    edi,esi
c001e725:	88 c1                	mov    cl,al
c001e727:	d3 ef                	shr    edi,cl
c001e729:	88 d9                	mov    cl,bl
c001e72b:	d3 e6                	shl    esi,cl
c001e72d:	89 ea                	mov    edx,ebp
c001e72f:	88 c1                	mov    cl,al
c001e731:	d3 ea                	shr    edx,cl
c001e733:	09 d6                	or     esi,edx
c001e735:	89 f0                	mov    eax,esi
c001e737:	89 fa                	mov    edx,edi
c001e739:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e73d:	89 d7                	mov    edi,edx
c001e73f:	89 c6                	mov    esi,eax
c001e741:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e745:	39 d7                	cmp    edi,edx
c001e747:	72 13                	jb     c001e75c <__udivdi3+0xec>
c001e749:	74 09                	je     c001e754 <__udivdi3+0xe4>
c001e74b:	89 f0                	mov    eax,esi
c001e74d:	31 db                	xor    ebx,ebx
c001e74f:	e9 43 ff ff ff       	jmp    c001e697 <__udivdi3+0x27>
c001e754:	88 d9                	mov    cl,bl
c001e756:	d3 e5                	shl    ebp,cl
c001e758:	39 c5                	cmp    ebp,eax
c001e75a:	73 ef                	jae    c001e74b <__udivdi3+0xdb>
c001e75c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e75f:	31 db                	xor    ebx,ebx
c001e761:	e9 31 ff ff ff       	jmp    c001e697 <__udivdi3+0x27>
c001e766:	66 90                	xchg   ax,ax
c001e768:	31 c0                	xor    eax,eax
c001e76a:	e9 28 ff ff ff       	jmp    c001e697 <__udivdi3+0x27>
c001e76f:	90                   	nop

c001e770 <__umoddi3>:
c001e770:	55                   	push   ebp
c001e771:	57                   	push   edi
c001e772:	56                   	push   esi
c001e773:	53                   	push   ebx
c001e774:	83 ec 1c             	sub    esp,0x1c
c001e777:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e77b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e77f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e783:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e787:	89 da                	mov    edx,ebx
c001e789:	85 c0                	test   eax,eax
c001e78b:	75 37                	jne    c001e7c4 <__umoddi3+0x54>
c001e78d:	39 df                	cmp    edi,ebx
c001e78f:	76 13                	jbe    c001e7a4 <__umoddi3+0x34>
c001e791:	89 f0                	mov    eax,esi
c001e793:	f7 f7                	div    edi
c001e795:	89 d0                	mov    eax,edx
c001e797:	31 d2                	xor    edx,edx
c001e799:	83 c4 1c             	add    esp,0x1c
c001e79c:	5b                   	pop    ebx
c001e79d:	5e                   	pop    esi
c001e79e:	5f                   	pop    edi
c001e79f:	5d                   	pop    ebp
c001e7a0:	c3                   	ret    
c001e7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e7a4:	89 fd                	mov    ebp,edi
c001e7a6:	85 ff                	test   edi,edi
c001e7a8:	75 0b                	jne    c001e7b5 <__umoddi3+0x45>
c001e7aa:	b8 01 00 00 00       	mov    eax,0x1
c001e7af:	31 d2                	xor    edx,edx
c001e7b1:	f7 f7                	div    edi
c001e7b3:	89 c5                	mov    ebp,eax
c001e7b5:	89 d8                	mov    eax,ebx
c001e7b7:	31 d2                	xor    edx,edx
c001e7b9:	f7 f5                	div    ebp
c001e7bb:	89 f0                	mov    eax,esi
c001e7bd:	f7 f5                	div    ebp
c001e7bf:	89 d0                	mov    eax,edx
c001e7c1:	eb d4                	jmp    c001e797 <__umoddi3+0x27>
c001e7c3:	90                   	nop
c001e7c4:	89 f1                	mov    ecx,esi
c001e7c6:	39 d8                	cmp    eax,ebx
c001e7c8:	76 0a                	jbe    c001e7d4 <__umoddi3+0x64>
c001e7ca:	89 f0                	mov    eax,esi
c001e7cc:	83 c4 1c             	add    esp,0x1c
c001e7cf:	5b                   	pop    ebx
c001e7d0:	5e                   	pop    esi
c001e7d1:	5f                   	pop    edi
c001e7d2:	5d                   	pop    ebp
c001e7d3:	c3                   	ret    
c001e7d4:	0f bd e8             	bsr    ebp,eax
c001e7d7:	83 f5 1f             	xor    ebp,0x1f
c001e7da:	75 1c                	jne    c001e7f8 <__umoddi3+0x88>
c001e7dc:	39 d8                	cmp    eax,ebx
c001e7de:	72 04                	jb     c001e7e4 <__umoddi3+0x74>
c001e7e0:	39 f7                	cmp    edi,esi
c001e7e2:	77 08                	ja     c001e7ec <__umoddi3+0x7c>
c001e7e4:	89 da                	mov    edx,ebx
c001e7e6:	29 fe                	sub    esi,edi
c001e7e8:	19 c2                	sbb    edx,eax
c001e7ea:	89 f1                	mov    ecx,esi
c001e7ec:	89 c8                	mov    eax,ecx
c001e7ee:	83 c4 1c             	add    esp,0x1c
c001e7f1:	5b                   	pop    ebx
c001e7f2:	5e                   	pop    esi
c001e7f3:	5f                   	pop    edi
c001e7f4:	5d                   	pop    ebp
c001e7f5:	c3                   	ret    
c001e7f6:	66 90                	xchg   ax,ax
c001e7f8:	ba 20 00 00 00       	mov    edx,0x20
c001e7fd:	29 ea                	sub    edx,ebp
c001e7ff:	89 e9                	mov    ecx,ebp
c001e801:	d3 e0                	shl    eax,cl
c001e803:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e807:	89 f8                	mov    eax,edi
c001e809:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e80d:	88 d1                	mov    cl,dl
c001e80f:	d3 e8                	shr    eax,cl
c001e811:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e815:	09 c1                	or     ecx,eax
c001e817:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e81b:	89 e9                	mov    ecx,ebp
c001e81d:	d3 e7                	shl    edi,cl
c001e81f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e823:	89 d8                	mov    eax,ebx
c001e825:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e829:	88 d1                	mov    cl,dl
c001e82b:	d3 e8                	shr    eax,cl
c001e82d:	89 c7                	mov    edi,eax
c001e82f:	89 e9                	mov    ecx,ebp
c001e831:	d3 e3                	shl    ebx,cl
c001e833:	89 f0                	mov    eax,esi
c001e835:	88 d1                	mov    cl,dl
c001e837:	d3 e8                	shr    eax,cl
c001e839:	09 d8                	or     eax,ebx
c001e83b:	89 e9                	mov    ecx,ebp
c001e83d:	d3 e6                	shl    esi,cl
c001e83f:	89 f3                	mov    ebx,esi
c001e841:	89 fa                	mov    edx,edi
c001e843:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e847:	89 d1                	mov    ecx,edx
c001e849:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e84d:	89 c6                	mov    esi,eax
c001e84f:	89 d7                	mov    edi,edx
c001e851:	39 d1                	cmp    ecx,edx
c001e853:	72 27                	jb     c001e87c <__umoddi3+0x10c>
c001e855:	74 21                	je     c001e878 <__umoddi3+0x108>
c001e857:	89 ca                	mov    edx,ecx
c001e859:	29 f3                	sub    ebx,esi
c001e85b:	19 fa                	sbb    edx,edi
c001e85d:	89 d0                	mov    eax,edx
c001e85f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e863:	d3 e0                	shl    eax,cl
c001e865:	89 e9                	mov    ecx,ebp
c001e867:	d3 eb                	shr    ebx,cl
c001e869:	09 d8                	or     eax,ebx
c001e86b:	d3 ea                	shr    edx,cl
c001e86d:	83 c4 1c             	add    esp,0x1c
c001e870:	5b                   	pop    ebx
c001e871:	5e                   	pop    esi
c001e872:	5f                   	pop    edi
c001e873:	5d                   	pop    ebp
c001e874:	c3                   	ret    
c001e875:	8d 76 00             	lea    esi,[esi+0x0]
c001e878:	39 c3                	cmp    ebx,eax
c001e87a:	73 db                	jae    c001e857 <__umoddi3+0xe7>
c001e87c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e880:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e884:	89 d7                	mov    edi,edx
c001e886:	89 c6                	mov    esi,eax
c001e888:	eb cd                	jmp    c001e857 <__umoddi3+0xe7>

Disassembly of section .init:

c001e88a <_init>:
c001e88a:	55                   	push   ebp
c001e88b:	89 e5                	mov    ebp,esp
c001e88d:	e8 62 18 fe ff       	call   c00000f4 <frame_dummy>
c001e892:	e8 e5 fa ff ff       	call   c001e37c <__do_global_ctors_aux>
c001e897:	5d                   	pop    ebp
c001e898:	c3                   	ret    

Disassembly of section .fini:

c001e899 <_fini>:
c001e899:	55                   	push   ebp
c001e89a:	89 e5                	mov    ebp,esp
c001e89c:	e8 e3 17 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e8a1:	5d                   	pop    ebp
c001e8a2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e8a4 <Computer::~Computer()>:
c001e8a4:	83 ec 0c             	sub    esp,0xc
c001e8a7:	ba b4 fb 01 c0       	mov    edx,0xc001fbb4
c001e8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b0:	89 10                	mov    DWORD PTR [eax],edx
c001e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b6:	83 ec 0c             	sub    esp,0xc
c001e8b9:	50                   	push   eax
c001e8ba:	e8 69 d4 fe ff       	call   c000bd28 <Device::~Device()>
c001e8bf:	83 c4 10             	add    esp,0x10
c001e8c2:	90                   	nop
c001e8c3:	83 c4 0c             	add    esp,0xc
c001e8c6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e8c8 <Computer::~Computer()>:
c001e8c8:	83 ec 0c             	sub    esp,0xc
c001e8cb:	83 ec 0c             	sub    esp,0xc
c001e8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8d2:	e8 cd ff ff ff       	call   c001e8a4 <Computer::~Computer()>
c001e8d7:	83 c4 10             	add    esp,0x10
c001e8da:	83 ec 08             	sub    esp,0x8
c001e8dd:	68 70 01 00 00       	push   0x170
c001e8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8e6:	e8 d9 bf fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	83 c4 0c             	add    esp,0xc
c001e8f1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e8f2 <idleCommon()>:
c001e8f2:	83 ec 0c             	sub    esp,0xc
c001e8f5:	fa                   	cli    
c001e8f6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e8fc:	e8 d3 67 ff ff       	call   c00150d4 <schedule()>
c001e901:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e906:	48                   	dec    eax
c001e907:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e90c:	75 01                	jne    c001e90f <idleCommon()+0x1d>
c001e90e:	fb                   	sti    
c001e90f:	83 c4 0c             	add    esp,0xc
c001e912:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e914 <LinkedList<UnixFile>::~LinkedList()>:
c001e914:	90                   	nop
c001e915:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e916 <LinkedList<UnixFile>::LinkedList()>:
c001e916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e91a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e924:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e92f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e93a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e944:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e94b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e94f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e956:	90                   	nop
c001e957:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e958 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e958:	83 ec 0c             	sub    esp,0xc
c001e95b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e960:	75 10                	jne    c001e972 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e962:	83 ec 0c             	sub    esp,0xc
c001e965:	68 c8 fd 01 c0       	push   0xc001fdc8
c001e96a:	e8 b0 1f ff ff       	call   c001091f <KePanic(char const*)>
c001e96f:	83 c4 10             	add    esp,0x10
c001e972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e976:	8b 00                	mov    eax,DWORD PTR [eax]
c001e978:	85 c0                	test   eax,eax
c001e97a:	74 34                	je     c001e9b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e980:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e983:	85 c0                	test   eax,eax
c001e985:	74 29                	je     c001e9b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e98e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e992:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e999:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e99d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9ae:	eb 65                	jmp    c001ea15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b6:	85 c0                	test   eax,eax
c001e9b8:	75 4b                	jne    c001ea05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9c1:	85 c0                	test   eax,eax
c001e9c3:	75 40                	jne    c001ea05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9cd:	89 10                	mov    DWORD PTR [eax],edx
c001e9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9ef:	85 c0                	test   eax,eax
c001e9f1:	74 22                	je     c001ea15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9f3:	83 ec 0c             	sub    esp,0xc
c001e9f6:	68 ea fd 01 c0       	push   0xc001fdea
c001e9fb:	e8 1f 1f ff ff       	call   c001091f <KePanic(char const*)>
c001ea00:	83 c4 10             	add    esp,0x10
c001ea03:	eb 10                	jmp    c001ea15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ea05:	83 ec 0c             	sub    esp,0xc
c001ea08:	68 f4 fd 01 c0       	push   0xc001fdf4
c001ea0d:	e8 0d 1f ff ff       	call   c001091f <KePanic(char const*)>
c001ea12:	83 c4 10             	add    esp,0x10
c001ea15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ea1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea23:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea26:	90                   	nop
c001ea27:	83 c4 0c             	add    esp,0xc
c001ea2a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ea2c <LinkedList<UnixFile>::getFirstElement()>:
c001ea2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ea34 <LinkedList<UnixFile>::removeFirst()>:
c001ea34:	83 ec 0c             	sub    esp,0xc
c001ea37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea3d:	85 c0                	test   eax,eax
c001ea3f:	75 12                	jne    c001ea53 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ea41:	83 ec 0c             	sub    esp,0xc
c001ea44:	68 00 fe 01 c0       	push   0xc001fe00
c001ea49:	e8 d1 1e ff ff       	call   c001091f <KePanic(char const*)>
c001ea4e:	83 c4 10             	add    esp,0x10
c001ea51:	eb 7e                	jmp    c001ead1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea5d:	85 c0                	test   eax,eax
c001ea5f:	74 10                	je     c001ea71 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ea61:	83 ec 0c             	sub    esp,0xc
c001ea64:	68 4b fe 01 c0       	push   0xc001fe4b
c001ea69:	e8 b1 1e ff ff       	call   c001091f <KePanic(char const*)>
c001ea6e:	83 c4 10             	add    esp,0x10
c001ea71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea7a:	85 c0                	test   eax,eax
c001ea7c:	75 33                	jne    c001eab1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ea7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea9a:	83 f8 01             	cmp    eax,0x1
c001ea9d:	74 21                	je     c001eac0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea9f:	83 ec 0c             	sub    esp,0xc
c001eaa2:	68 24 fe 01 c0       	push   0xc001fe24
c001eaa7:	e8 73 1e ff ff       	call   c001091f <KePanic(char const*)>
c001eaac:	83 c4 10             	add    esp,0x10
c001eaaf:	eb 0f                	jmp    c001eac0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001eab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eab7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001eaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabe:	89 10                	mov    DWORD PTR [eax],edx
c001eac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eac7:	8d 50 ff             	lea    edx,[eax-0x1]
c001eaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eace:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ead1:	83 c4 0c             	add    esp,0xc
c001ead4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ead6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ead6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eada:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eadd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001eade <DriverlessDevice::~DriverlessDevice()>:
c001eade:	ba dc 04 02 c0       	mov    edx,0xc00204dc
c001eae3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eae7:	89 10                	mov    DWORD PTR [eax],edx
c001eae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaed:	50                   	push   eax
c001eaee:	e8 35 d2 fe ff       	call   c000bd28 <Device::~Device()>
c001eaf3:	83 c4 04             	add    esp,0x4
c001eaf6:	90                   	nop
c001eaf7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eaf8 <DriverlessDevice::~DriverlessDevice()>:
c001eaf8:	83 ec 0c             	sub    esp,0xc
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb02:	e8 d7 ff ff ff       	call   c001eade <DriverlessDevice::~DriverlessDevice()>
c001eb07:	83 c4 10             	add    esp,0x10
c001eb0a:	83 ec 08             	sub    esp,0x8
c001eb0d:	68 58 01 00 00       	push   0x158
c001eb12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb16:	e8 a9 bd fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001eb1b:	83 c4 10             	add    esp,0x10
c001eb1e:	83 c4 0c             	add    esp,0xc
c001eb21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eb22 <LinkedList<Device>::addElement(Device*)>:
c001eb22:	83 ec 0c             	sub    esp,0xc
c001eb25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eb2a:	75 10                	jne    c001eb3c <LinkedList<Device>::addElement(Device*)+0x1a>
c001eb2c:	83 ec 0c             	sub    esp,0xc
c001eb2f:	68 c8 fd 01 c0       	push   0xc001fdc8
c001eb34:	e8 e6 1d ff ff       	call   c001091f <KePanic(char const*)>
c001eb39:	83 c4 10             	add    esp,0x10
c001eb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb40:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb42:	85 c0                	test   eax,eax
c001eb44:	74 3a                	je     c001eb80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb4d:	85 c0                	test   eax,eax
c001eb4f:	74 2f                	je     c001eb80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb5c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eb62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb6a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb74:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb7e:	eb 68                	jmp    c001ebe8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb84:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb86:	85 c0                	test   eax,eax
c001eb88:	75 4e                	jne    c001ebd8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb91:	85 c0                	test   eax,eax
c001eb93:	75 43                	jne    c001ebd8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb9d:	89 10                	mov    DWORD PTR [eax],edx
c001eb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eba7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ebaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebb1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ebbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebc2:	85 c0                	test   eax,eax
c001ebc4:	74 22                	je     c001ebe8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ebc6:	83 ec 0c             	sub    esp,0xc
c001ebc9:	68 ea fd 01 c0       	push   0xc001fdea
c001ebce:	e8 4c 1d ff ff       	call   c001091f <KePanic(char const*)>
c001ebd3:	83 c4 10             	add    esp,0x10
c001ebd6:	eb 10                	jmp    c001ebe8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ebd8:	83 ec 0c             	sub    esp,0xc
c001ebdb:	68 f4 fd 01 c0       	push   0xc001fdf4
c001ebe0:	e8 3a 1d ff ff       	call   c001091f <KePanic(char const*)>
c001ebe5:	83 c4 10             	add    esp,0x10
c001ebe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebef:	8d 50 01             	lea    edx,[eax+0x1]
c001ebf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebf9:	90                   	nop
c001ebfa:	83 c4 0c             	add    esp,0xc
c001ebfd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ebfe <LinkedList<Device>::LinkedList()>:
c001ebfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec3e:	90                   	nop
c001ec3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ec40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec46:	85 c0                	test   eax,eax
c001ec48:	75 0e                	jne    c001ec58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec51:	85 c0                	test   eax,eax
c001ec53:	75 03                	jne    c001ec58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec55:	b0 01                	mov    al,0x1
c001ec57:	c3                   	ret    
c001ec58:	b0 00                	mov    al,0x0
c001ec5a:	90                   	nop
c001ec5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ec64:	83 ec 0c             	sub    esp,0xc
c001ec67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec6d:	85 c0                	test   eax,eax
c001ec6f:	75 17                	jne    c001ec88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ec71:	83 ec 0c             	sub    esp,0xc
c001ec74:	68 00 fe 01 c0       	push   0xc001fe00
c001ec79:	e8 a1 1c ff ff       	call   c001091f <KePanic(char const*)>
c001ec7e:	83 c4 10             	add    esp,0x10
c001ec81:	e9 96 00 00 00       	jmp    c001ed1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ec86:	66 90                	xchg   ax,ax
c001ec88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec92:	85 c0                	test   eax,eax
c001ec94:	0f 95 c0             	setne  al
c001ec97:	0f b6 c0             	movzx  eax,al
c001ec9a:	85 c0                	test   eax,eax
c001ec9c:	74 12                	je     c001ecb0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ec9e:	83 ec 0c             	sub    esp,0xc
c001eca1:	68 4b fe 01 c0       	push   0xc001fe4b
c001eca6:	e8 74 1c ff ff       	call   c001091f <KePanic(char const*)>
c001ecab:	83 c4 10             	add    esp,0x10
c001ecae:	66 90                	xchg   ax,ax
c001ecb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecb6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ecb9:	85 c0                	test   eax,eax
c001ecbb:	0f 94 c0             	sete   al
c001ecbe:	0f b6 c0             	movzx  eax,al
c001ecc1:	85 c0                	test   eax,eax
c001ecc3:	74 33                	je     c001ecf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ecc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecde:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ece1:	83 f8 01             	cmp    eax,0x1
c001ece4:	74 22                	je     c001ed08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ece6:	83 ec 0c             	sub    esp,0xc
c001ece9:	68 24 fe 01 c0       	push   0xc001fe24
c001ecee:	e8 2c 1c ff ff       	call   c001091f <KePanic(char const*)>
c001ecf3:	83 c4 10             	add    esp,0x10
c001ecf6:	eb 10                	jmp    c001ed08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ecf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecfe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ed01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed05:	89 10                	mov    DWORD PTR [eax],edx
c001ed07:	90                   	nop
c001ed08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed0f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ed12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed19:	8d 76 00             	lea    esi,[esi+0x0]
c001ed1c:	83 c4 0c             	add    esp,0xc
c001ed1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ed20:	83 ec 0c             	sub    esp,0xc
c001ed23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ed28:	75 12                	jne    c001ed3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ed2a:	83 ec 0c             	sub    esp,0xc
c001ed2d:	68 c8 fd 01 c0       	push   0xc001fdc8
c001ed32:	e8 e8 1b ff ff       	call   c001091f <KePanic(char const*)>
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	66 90                	xchg   ax,ax
c001ed3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed42:	85 c0                	test   eax,eax
c001ed44:	74 36                	je     c001ed7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed4d:	85 c0                	test   eax,eax
c001ed4f:	74 2b                	je     c001ed7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed5c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ed5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed71:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed78:	eb 6a                	jmp    c001ede4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed7a:	66 90                	xchg   ax,ax
c001ed7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed82:	85 c0                	test   eax,eax
c001ed84:	75 4e                	jne    c001edd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed8d:	85 c0                	test   eax,eax
c001ed8f:	75 43                	jne    c001edd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed99:	89 10                	mov    DWORD PTR [eax],edx
c001ed9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eda3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001edb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edbb:	85 c0                	test   eax,eax
c001edbd:	74 25                	je     c001ede4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001edbf:	83 ec 0c             	sub    esp,0xc
c001edc2:	68 ea fd 01 c0       	push   0xc001fdea
c001edc7:	e8 53 1b ff ff       	call   c001091f <KePanic(char const*)>
c001edcc:	83 c4 10             	add    esp,0x10
c001edcf:	eb 13                	jmp    c001ede4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001edd1:	8d 76 00             	lea    esi,[esi+0x0]
c001edd4:	83 ec 0c             	sub    esp,0xc
c001edd7:	68 f4 fd 01 c0       	push   0xc001fdf4
c001eddc:	e8 3e 1b ff ff       	call   c001091f <KePanic(char const*)>
c001ede1:	83 c4 10             	add    esp,0x10
c001ede4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edeb:	8d 50 01             	lea    edx,[eax+0x1]
c001edee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edf5:	90                   	nop
c001edf6:	83 c4 0c             	add    esp,0xc
c001edf9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001edfc <ACPI::~ACPI()>:
c001edfc:	83 ec 0c             	sub    esp,0xc
c001edff:	ba e0 0a 02 c0       	mov    edx,0xc0020ae0
c001ee04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee08:	89 10                	mov    DWORD PTR [eax],edx
c001ee0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0e:	83 ec 0c             	sub    esp,0xc
c001ee11:	50                   	push   eax
c001ee12:	e8 11 cf fe ff       	call   c000bd28 <Device::~Device()>
c001ee17:	83 c4 10             	add    esp,0x10
c001ee1a:	90                   	nop
c001ee1b:	83 c4 0c             	add    esp,0xc
c001ee1e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ee20 <ACPI::~ACPI()>:
c001ee20:	83 ec 0c             	sub    esp,0xc
c001ee23:	83 ec 0c             	sub    esp,0xc
c001ee26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee2a:	e8 cd ff ff ff       	call   c001edfc <ACPI::~ACPI()>
c001ee2f:	83 c4 10             	add    esp,0x10
c001ee32:	83 ec 08             	sub    esp,0x8
c001ee35:	68 64 12 00 00       	push   0x1264
c001ee3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee3e:	e8 81 ba fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001ee43:	83 c4 10             	add    esp,0x10
c001ee46:	83 c4 0c             	add    esp,0xc
c001ee49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ee4c <LinkedList<Device>::~LinkedList()>:
c001ee4c:	90                   	nop
c001ee4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ee50 <LinkedList<Device>::isEmpty()>:
c001ee50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee56:	85 c0                	test   eax,eax
c001ee58:	75 0e                	jne    c001ee68 <LinkedList<Device>::isEmpty()+0x18>
c001ee5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee61:	85 c0                	test   eax,eax
c001ee63:	75 03                	jne    c001ee68 <LinkedList<Device>::isEmpty()+0x18>
c001ee65:	b0 01                	mov    al,0x1
c001ee67:	c3                   	ret    
c001ee68:	b0 00                	mov    al,0x0
c001ee6a:	90                   	nop
c001ee6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ee6c <LinkedList<Device>::getFirstElement()>:
c001ee6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ee74 <LinkedList<Device>::removeFirst()>:
c001ee74:	83 ec 0c             	sub    esp,0xc
c001ee77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee7d:	85 c0                	test   eax,eax
c001ee7f:	75 17                	jne    c001ee98 <LinkedList<Device>::removeFirst()+0x24>
c001ee81:	83 ec 0c             	sub    esp,0xc
c001ee84:	68 00 fe 01 c0       	push   0xc001fe00
c001ee89:	e8 91 1a ff ff       	call   c001091f <KePanic(char const*)>
c001ee8e:	83 c4 10             	add    esp,0x10
c001ee91:	e9 92 00 00 00       	jmp    c001ef28 <LinkedList<Device>::removeFirst()+0xb4>
c001ee96:	66 90                	xchg   ax,ax
c001ee98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee9f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eea5:	85 c0                	test   eax,eax
c001eea7:	74 13                	je     c001eebc <LinkedList<Device>::removeFirst()+0x48>
c001eea9:	83 ec 0c             	sub    esp,0xc
c001eeac:	68 4b fe 01 c0       	push   0xc001fe4b
c001eeb1:	e8 69 1a ff ff       	call   c001091f <KePanic(char const*)>
c001eeb6:	83 c4 10             	add    esp,0x10
c001eeb9:	8d 76 00             	lea    esi,[esi+0x0]
c001eebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eec2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eec8:	85 c0                	test   eax,eax
c001eeca:	75 34                	jne    c001ef00 <LinkedList<Device>::removeFirst()+0x8c>
c001eecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeda:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eee8:	83 f8 01             	cmp    eax,0x1
c001eeeb:	74 27                	je     c001ef14 <LinkedList<Device>::removeFirst()+0xa0>
c001eeed:	83 ec 0c             	sub    esp,0xc
c001eef0:	68 24 fe 01 c0       	push   0xc001fe24
c001eef5:	e8 25 1a ff ff       	call   c001091f <KePanic(char const*)>
c001eefa:	83 c4 10             	add    esp,0x10
c001eefd:	eb 15                	jmp    c001ef14 <LinkedList<Device>::removeFirst()+0xa0>
c001eeff:	90                   	nop
c001ef00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef04:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef06:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ef0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef10:	89 10                	mov    DWORD PTR [eax],edx
c001ef12:	66 90                	xchg   ax,ax
c001ef14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef1b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ef1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef25:	8d 76 00             	lea    esi,[esi+0x0]
c001ef28:	83 c4 0c             	add    esp,0xc
c001ef2b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ef2c <CPU::~CPU()>:
c001ef2c:	83 ec 0c             	sub    esp,0xc
c001ef2f:	ba 7c 0c 02 c0       	mov    edx,0xc0020c7c
c001ef34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef38:	89 10                	mov    DWORD PTR [eax],edx
c001ef3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3e:	83 ec 0c             	sub    esp,0xc
c001ef41:	50                   	push   eax
c001ef42:	e8 e1 cd fe ff       	call   c000bd28 <Device::~Device()>
c001ef47:	83 c4 10             	add    esp,0x10
c001ef4a:	90                   	nop
c001ef4b:	83 c4 0c             	add    esp,0xc
c001ef4e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ef50 <CPU::~CPU()>:
c001ef50:	83 ec 0c             	sub    esp,0xc
c001ef53:	83 ec 0c             	sub    esp,0xc
c001ef56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef5a:	e8 cd ff ff ff       	call   c001ef2c <CPU::~CPU()>
c001ef5f:	83 c4 10             	add    esp,0x10
c001ef62:	83 ec 08             	sub    esp,0x8
c001ef65:	68 94 11 00 00       	push   0x1194
c001ef6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef6e:	e8 51 b9 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001ef73:	83 c4 10             	add    esp,0x10
c001ef76:	83 c4 0c             	add    esp,0xc
c001ef79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ef7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ef7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ef83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ef84 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ef84:	90                   	nop
c001ef85:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ef88 <ThreadControlBlock::ThreadControlBlock()>:
c001ef88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef97:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ef9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001efa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efad:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001efb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001efbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001efc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efcb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001efcf:	90                   	nop
c001efd0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001efd4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001efd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efe2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eff8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001effe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f002:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f009:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f00d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f014:	90                   	nop
c001f015:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f016 <PCI::~PCI()>:
c001f016:	83 ec 0c             	sub    esp,0xc
c001f019:	ba e0 1a 02 c0       	mov    edx,0xc0021ae0
c001f01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f022:	89 10                	mov    DWORD PTR [eax],edx
c001f024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f028:	83 ec 0c             	sub    esp,0xc
c001f02b:	50                   	push   eax
c001f02c:	e8 8f c7 fe ff       	call   c000b7c0 <Bus::~Bus()>
c001f031:	83 c4 10             	add    esp,0x10
c001f034:	90                   	nop
c001f035:	83 c4 0c             	add    esp,0xc
c001f038:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f03a <PCI::~PCI()>:
c001f03a:	83 ec 0c             	sub    esp,0xc
c001f03d:	83 ec 0c             	sub    esp,0xc
c001f040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f044:	e8 cd ff ff ff       	call   c001f016 <PCI::~PCI()>
c001f049:	83 c4 10             	add    esp,0x10
c001f04c:	83 ec 08             	sub    esp,0x8
c001f04f:	68 5c 01 00 00       	push   0x15c
c001f054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f058:	e8 67 b8 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	83 c4 0c             	add    esp,0xc
c001f063:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f064 <IDE::~IDE()>:
c001f064:	83 ec 0c             	sub    esp,0xc
c001f067:	ba 94 1b 02 c0       	mov    edx,0xc0021b94
c001f06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f070:	89 10                	mov    DWORD PTR [eax],edx
c001f072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f076:	83 ec 0c             	sub    esp,0xc
c001f079:	50                   	push   eax
c001f07a:	e8 21 d1 fe ff       	call   c000c1a0 <HardDiskController::~HardDiskController()>
c001f07f:	83 c4 10             	add    esp,0x10
c001f082:	90                   	nop
c001f083:	83 c4 0c             	add    esp,0xc
c001f086:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f088 <IDE::~IDE()>:
c001f088:	83 ec 0c             	sub    esp,0xc
c001f08b:	83 ec 0c             	sub    esp,0xc
c001f08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f092:	e8 cd ff ff ff       	call   c001f064 <IDE::~IDE()>
c001f097:	83 c4 10             	add    esp,0x10
c001f09a:	83 ec 08             	sub    esp,0x8
c001f09d:	68 70 02 00 00       	push   0x270
c001f0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a6:	e8 19 b8 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001f0ab:	83 c4 10             	add    esp,0x10
c001f0ae:	83 c4 0c             	add    esp,0xc
c001f0b1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f0b2 <SATABus::~SATABus()>:
c001f0b2:	83 ec 0c             	sub    esp,0xc
c001f0b5:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001f0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0be:	89 10                	mov    DWORD PTR [eax],edx
c001f0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c4:	83 ec 0c             	sub    esp,0xc
c001f0c7:	50                   	push   eax
c001f0c8:	e8 d3 d0 fe ff       	call   c000c1a0 <HardDiskController::~HardDiskController()>
c001f0cd:	83 c4 10             	add    esp,0x10
c001f0d0:	90                   	nop
c001f0d1:	83 c4 0c             	add    esp,0xc
c001f0d4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f0d6 <SATABus::~SATABus()>:
c001f0d6:	83 ec 0c             	sub    esp,0xc
c001f0d9:	83 ec 0c             	sub    esp,0xc
c001f0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0e0:	e8 cd ff ff ff       	call   c001f0b2 <SATABus::~SATABus()>
c001f0e5:	83 c4 10             	add    esp,0x10
c001f0e8:	83 ec 08             	sub    esp,0x8
c001f0eb:	68 64 01 00 00       	push   0x164
c001f0f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f4:	e8 cb b7 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001f0f9:	83 c4 10             	add    esp,0x10
c001f0fc:	83 c4 0c             	add    esp,0xc
c001f0ff:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f100 <ATA::~ATA()>:
c001f100:	83 ec 0c             	sub    esp,0xc
c001f103:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c001f108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10c:	89 10                	mov    DWORD PTR [eax],edx
c001f10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f112:	83 ec 0c             	sub    esp,0xc
c001f115:	50                   	push   eax
c001f116:	e8 67 d1 fe ff       	call   c000c282 <PhysicalDisk::~PhysicalDisk()>
c001f11b:	83 c4 10             	add    esp,0x10
c001f11e:	90                   	nop
c001f11f:	83 c4 0c             	add    esp,0xc
c001f122:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f124 <ATA::~ATA()>:
c001f124:	83 ec 0c             	sub    esp,0xc
c001f127:	83 ec 0c             	sub    esp,0xc
c001f12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12e:	e8 cd ff ff ff       	call   c001f100 <ATA::~ATA()>
c001f133:	83 c4 10             	add    esp,0x10
c001f136:	83 ec 08             	sub    esp,0x8
c001f139:	68 7c 01 00 00       	push   0x17c
c001f13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f142:	e8 7d b7 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001f147:	83 c4 10             	add    esp,0x10
c001f14a:	83 c4 0c             	add    esp,0xc
c001f14d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f14e <ATAPI::~ATAPI()>:
c001f14e:	83 ec 0c             	sub    esp,0xc
c001f151:	ba 6c 1c 02 c0       	mov    edx,0xc0021c6c
c001f156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15a:	89 10                	mov    DWORD PTR [eax],edx
c001f15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f160:	83 ec 0c             	sub    esp,0xc
c001f163:	50                   	push   eax
c001f164:	e8 19 d1 fe ff       	call   c000c282 <PhysicalDisk::~PhysicalDisk()>
c001f169:	83 c4 10             	add    esp,0x10
c001f16c:	90                   	nop
c001f16d:	83 c4 0c             	add    esp,0xc
c001f170:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f172 <ATAPI::~ATAPI()>:
c001f172:	83 ec 0c             	sub    esp,0xc
c001f175:	83 ec 0c             	sub    esp,0xc
c001f178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f17c:	e8 cd ff ff ff       	call   c001f14e <ATAPI::~ATAPI()>
c001f181:	83 c4 10             	add    esp,0x10
c001f184:	83 ec 08             	sub    esp,0x8
c001f187:	68 84 01 00 00       	push   0x184
c001f18c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f190:	e8 2f b7 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001f195:	83 c4 10             	add    esp,0x10
c001f198:	83 c4 0c             	add    esp,0xc
c001f19b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f19c <SATA::~SATA()>:
c001f19c:	83 ec 0c             	sub    esp,0xc
c001f19f:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c001f1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a8:	89 10                	mov    DWORD PTR [eax],edx
c001f1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ae:	83 ec 0c             	sub    esp,0xc
c001f1b1:	50                   	push   eax
c001f1b2:	e8 cb d0 fe ff       	call   c000c282 <PhysicalDisk::~PhysicalDisk()>
c001f1b7:	83 c4 10             	add    esp,0x10
c001f1ba:	90                   	nop
c001f1bb:	83 c4 0c             	add    esp,0xc
c001f1be:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f1c0 <SATA::~SATA()>:
c001f1c0:	83 ec 0c             	sub    esp,0xc
c001f1c3:	83 ec 0c             	sub    esp,0xc
c001f1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ca:	e8 cd ff ff ff       	call   c001f19c <SATA::~SATA()>
c001f1cf:	83 c4 10             	add    esp,0x10
c001f1d2:	83 ec 08             	sub    esp,0x8
c001f1d5:	68 7c 01 00 00       	push   0x17c
c001f1da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1de:	e8 e1 b6 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001f1e3:	83 c4 10             	add    esp,0x10
c001f1e6:	83 c4 0c             	add    esp,0xc
c001f1e9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f1ea <SATAPI::~SATAPI()>:
c001f1ea:	83 ec 0c             	sub    esp,0xc
c001f1ed:	ba 44 1e 02 c0       	mov    edx,0xc0021e44
c001f1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f6:	89 10                	mov    DWORD PTR [eax],edx
c001f1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1fc:	83 ec 0c             	sub    esp,0xc
c001f1ff:	50                   	push   eax
c001f200:	e8 7d d0 fe ff       	call   c000c282 <PhysicalDisk::~PhysicalDisk()>
c001f205:	83 c4 10             	add    esp,0x10
c001f208:	90                   	nop
c001f209:	83 c4 0c             	add    esp,0xc
c001f20c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f20e <SATAPI::~SATAPI()>:
c001f20e:	83 ec 0c             	sub    esp,0xc
c001f211:	83 ec 0c             	sub    esp,0xc
c001f214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f218:	e8 cd ff ff ff       	call   c001f1ea <SATAPI::~SATAPI()>
c001f21d:	83 c4 10             	add    esp,0x10
c001f220:	83 ec 08             	sub    esp,0x8
c001f223:	68 84 01 00 00       	push   0x184
c001f228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f22c:	e8 93 b6 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001f231:	83 c4 10             	add    esp,0x10
c001f234:	83 c4 0c             	add    esp,0xc
c001f237:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f238 <IOAPIC::~IOAPIC()>:
c001f238:	83 ec 0c             	sub    esp,0xc
c001f23b:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c001f240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f244:	89 10                	mov    DWORD PTR [eax],edx
c001f246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24a:	83 ec 0c             	sub    esp,0xc
c001f24d:	50                   	push   eax
c001f24e:	e8 d5 ca fe ff       	call   c000bd28 <Device::~Device()>
c001f253:	83 c4 10             	add    esp,0x10
c001f256:	90                   	nop
c001f257:	83 c4 0c             	add    esp,0xc
c001f25a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f25c <IOAPIC::~IOAPIC()>:
c001f25c:	83 ec 0c             	sub    esp,0xc
c001f25f:	83 ec 0c             	sub    esp,0xc
c001f262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f266:	e8 cd ff ff ff       	call   c001f238 <IOAPIC::~IOAPIC()>
c001f26b:	83 c4 10             	add    esp,0x10
c001f26e:	83 ec 08             	sub    esp,0x8
c001f271:	68 68 01 00 00       	push   0x168
c001f276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f27a:	e8 45 b6 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001f27f:	83 c4 10             	add    esp,0x10
c001f282:	83 c4 0c             	add    esp,0xc
c001f285:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f288 <APICTimer::~APICTimer()>:
c001f288:	83 ec 0c             	sub    esp,0xc
c001f28b:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c001f290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f294:	89 10                	mov    DWORD PTR [eax],edx
c001f296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29a:	83 ec 0c             	sub    esp,0xc
c001f29d:	50                   	push   eax
c001f29e:	e8 51 e5 fe ff       	call   c000d7f4 <Timer::~Timer()>
c001f2a3:	83 c4 10             	add    esp,0x10
c001f2a6:	90                   	nop
c001f2a7:	83 c4 0c             	add    esp,0xc
c001f2aa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f2ac <APICTimer::~APICTimer()>:
c001f2ac:	83 ec 0c             	sub    esp,0xc
c001f2af:	83 ec 0c             	sub    esp,0xc
c001f2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b6:	e8 cd ff ff ff       	call   c001f288 <APICTimer::~APICTimer()>
c001f2bb:	83 c4 10             	add    esp,0x10
c001f2be:	83 ec 08             	sub    esp,0x8
c001f2c1:	68 60 01 00 00       	push   0x160
c001f2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ca:	e8 f5 b5 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001f2cf:	83 c4 10             	add    esp,0x10
c001f2d2:	83 c4 0c             	add    esp,0xc
c001f2d5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f2d8 <PIT::~PIT()>:
c001f2d8:	83 ec 0c             	sub    esp,0xc
c001f2db:	ba 1c 1f 02 c0       	mov    edx,0xc0021f1c
c001f2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2e4:	89 10                	mov    DWORD PTR [eax],edx
c001f2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ea:	83 ec 0c             	sub    esp,0xc
c001f2ed:	50                   	push   eax
c001f2ee:	e8 01 e5 fe ff       	call   c000d7f4 <Timer::~Timer()>
c001f2f3:	83 c4 10             	add    esp,0x10
c001f2f6:	90                   	nop
c001f2f7:	83 c4 0c             	add    esp,0xc
c001f2fa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f2fc <PIT::~PIT()>:
c001f2fc:	83 ec 0c             	sub    esp,0xc
c001f2ff:	83 ec 0c             	sub    esp,0xc
c001f302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f306:	e8 cd ff ff ff       	call   c001f2d8 <PIT::~PIT()>
c001f30b:	83 c4 10             	add    esp,0x10
c001f30e:	83 ec 08             	sub    esp,0x8
c001f311:	68 5c 01 00 00       	push   0x15c
c001f316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f31a:	e8 a5 b5 fe ff       	call   c000a8c4 <operator delete(void*, unsigned long)>
c001f31f:	83 c4 10             	add    esp,0x10
c001f322:	83 c4 0c             	add    esp,0xc
c001f325:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 6d 0d 02 c0       	mov    esi,0xc0020d6d
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 89 0d 02 c0       	mov    esi,0xc0020d89
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
