
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c6 f8 00 00       	call   c000f8e6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 90 02 00       	call   c0029118 <_init>
c0000025:	c3                   	ret    
c0000026:	bb ae 9d 02 c0       	mov    ebx,0xc0029dae
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb bc 9d 02 c0    	cmp    ebx,0xc0029dbc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 e7 02 c0       	mov    eax,0xc002e738
c0000049:	3d 38 e7 02 c0       	cmp    eax,0xc002e738
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 e7 02 c0       	push   0xc002e738
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 e7 02 c0       	mov    eax,0xc002e738
c0000075:	2d 38 e7 02 c0       	sub    eax,0xc002e738
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 e7 02 c0       	push   0xc002e738
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 ed 02 c0 00 	cmp    BYTE PTR ds:0xc002ed68,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c4 9d 02 c0       	mov    ebx,0xc0029dc4
c00000bb:	81 eb c0 9d 02 c0    	sub    ebx,0xc0029dc0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c0 9d 02 c0       	mov    esi,0xc0029dc0
c00000ca:	a1 6c ed 02 c0       	mov    eax,ds:0xc002ed6c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c ed 02 c0       	mov    ds:0xc002ed6c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c ed 02 c0       	mov    eax,ds:0xc002ed6c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 e7 02 c0       	push   0xc002e738
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed68,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 ed 02 c0       	push   0xc002ed70
c000012c:	68 38 e7 02 c0       	push   0xc002e738
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 53 d9 01 00       	call   c001dcf6 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 2a 25 01 00       	call   c00128e5 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 31 d9 01 00       	call   c001dcf6 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 d9 dd 01 00       	call   c001e1bd <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 37 e4 01 00       	call   c001e824 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 b0 f1 02 c0 	lgdtd  ds:0xc002f1b0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 3b 42 01 00       	call   c001481d <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 88 ed 02 c0       	mov    ds:0xc002ed88,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 88 ed 02 c0    	mov    DWORD PTR ds:0xc002ed88,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 88 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed88
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 e0 9d 02 c0 02 	test   BYTE PTR [edx-0x3ffd6220],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 e0 9d 02 c0 01 	test   BYTE PTR [edx-0x3ffd6220],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 e0 9d 02 c0 08 	test   BYTE PTR [edx-0x3ffd6220],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 e0 9d 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6220],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 e0 9d 02 c0 01 	test   BYTE PTR [edx-0x3ffd6220],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d a0 ed 02 c0    	mov    ecx,DWORD PTR ds:0xc002eda0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d a0 ed 02 c0    	mov    DWORD PTR ds:0xc002eda0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 a4 ed 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd125c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 a4 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd125c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d a0 ed 02 c0    	mov    DWORD PTR ds:0xc002eda0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 cc ed 02 c0    	cmp    DWORD PTR ds:0xc002edcc,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d dc ed 02 c0    	mov    ecx,DWORD PTR ds:0xc002eddc
c0000e38:	c7 42 0c d4 ed 02 c0 	mov    DWORD PTR [edx+0xc],0xc002edd4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 dc ed 02 c0    	mov    DWORD PTR ds:0xc002eddc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 cc ed 02 c0    	mov    DWORD PTR ds:0xc002edcc,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 a0 ed 02 c0 02 	test   BYTE PTR ds:0xc002eda0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 a0 ed 02 c0       	mov    eax,0xc002eda0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d a0 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002eda0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 a0 ed 02 c0       	mov    eax,0xc002eda0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 a4 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd125c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 a4 ed 02 c0 	mov    DWORD PTR [edx*4-0x3ffd125c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 d4 ed 02 c0 	lea    edx,[eax*8-0x3ffd122c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 a0 ed 02 c0       	mov    eax,0xc002eda0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d e0 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ede0
c00011ba:	81 fb d4 ed 02 c0    	cmp    ebx,0xc002edd4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d d4 ed 02 c0       	cmp    eax,0xc002edd4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d d0 ed 02 c0    	cmp    DWORD PTR ds:0xc002edd0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 dc ed 02 c0       	mov    ds:0xc002eddc,eax
c00011f6:	a3 e0 ed 02 c0       	mov    ds:0xc002ede0,eax
c00011fb:	a3 d0 ed 02 c0       	mov    ds:0xc002edd0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 d4 ed 02 c0 	mov    DWORD PTR [eax+0x8],0xc002edd4
c0001209:	c7 40 0c d4 ed 02 c0 	mov    DWORD PTR [eax+0xc],0xc002edd4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 e0 ed 02 c0       	mov    ds:0xc002ede0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 d4 ed 02 c0 	mov    DWORD PTR [eax+0x8],0xc002edd4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 98 ed 02 c0 	lea    ebp,[edx*4-0x3ffd1268]
c000125a:	8b 14 95 a0 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1260]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 a0 ed 02 c0 	lea    ecx,[edx*4-0x3ffd1260]
c0001275:	8b 14 95 a0 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1260]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd d4 f0 02 c0 	or     DWORD PTR [edi*4-0x3ffd0f2c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 d4 ed 02 c0 	lea    eax,[eax*8-0x3ffd122c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d dc ed 02 c0    	mov    DWORD PTR ds:0xc002eddc,ecx
c000132f:	89 0d e0 ed 02 c0    	mov    DWORD PTR ds:0xc002ede0,ecx
c0001335:	c7 41 08 d4 ed 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002edd4
c000133c:	c7 41 0c d4 ed 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002edd4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd cc ed 02 c0 	lea    edx,[ecx*8-0x3ffd1234]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d d4 f0 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0f2c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d d4 f0 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0f2c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 cc ed 02 c0 	lea    edx,[eax*4-0x3ffd1234]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d d4 f0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0f2c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d dc ed 02 c0    	mov    DWORD PTR ds:0xc002eddc,edi
c0001402:	89 3d e0 ed 02 c0    	mov    DWORD PTR ds:0xc002ede0,edi
c0001408:	c7 47 08 d4 ed 02 c0 	mov    DWORD PTR [edi+0x8],0xc002edd4
c000140f:	c7 47 0c d4 ed 02 c0 	mov    DWORD PTR [edi+0xc],0xc002edd4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d d0 ed 02 c0    	mov    DWORD PTR ds:0xc002edd0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 cc ed 02 c0       	mov    eax,ds:0xc002edcc
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d cc ed 02 c0    	mov    DWORD PTR ds:0xc002edcc,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba a0 ed 02 c0       	mov    edx,0xc002eda0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d a0 ed 02 c0 00 	cmp    DWORD PTR ds:0xc002eda0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 a0 ed 02 c0       	mov    eax,0xc002eda0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d f4 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0f4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 f4 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f0f4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d f4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0f4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 cc ed 02 c0    	cmp    DWORD PTR ds:0xc002edcc,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d cc ed 02 c0    	mov    DWORD PTR ds:0xc002edcc,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d a0 ed 02 c0 00 	cmp    DWORD PTR ds:0xc002eda0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 a0 ed 02 c0       	mov    eax,0xc002eda0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 fc f0 02 c0    	push   DWORD PTR ds:0xc002f0fc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d a0 ed 02 c0 00 	cmp    DWORD PTR ds:0xc002eda0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 a0 ed 02 c0       	mov    eax,0xc002eda0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 fc f0 02 c0       	mov    eax,ds:0xc002f0fc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 a0 ed 02 c0       	mov    eax,0xc002eda0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d cc ed 02 c0 00 	cmp    DWORD PTR ds:0xc002edcc,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 a0 ed 02 c0       	mov    eax,0xc002eda0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 cc ed 02 c0       	mov    eax,ds:0xc002edcc
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 a4 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd125c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 d4 ed 02 c0       	mov    eax,0xc002edd4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d cc f0 02 c0       	cmp    eax,0xc002f0cc
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 f0 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0f0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 04 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f104
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 14 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f114
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 a0 ed 02 c0       	mov    eax,0xc002eda0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 e4 9e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd611c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 a0 ed 02 c0       	mov    eax,ds:0xc002eda0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 a0 ed 02 c0       	mov    ds:0xc002eda0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d e4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d e8 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ec f0 02 c0    	mov    DWORD PTR ds:0xc002f0ec,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 f4 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f0f4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 80 28 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd780]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 82 f7 01 00       	jmp    c0021374 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 80 28 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd780]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 b3 f7 01 00       	jmp    c00213bb <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 80 28 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd780]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 db f7 01 00       	jmp    c0021402 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 6a 55 02 00       	call   c0027474 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 00 a0 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6000]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 00 a0 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6000]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 00 9f 02 c0       	mov    edx,0xc0029f00
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 20 a0 02 c0       	mov    edx,0xc002a020
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 5c d4 02 c0       	mov    edx,0xc002d45c
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 2c a0 02 c0       	mov    edx,0xc002a02c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 10 a0 02 c0       	mov    edx,0xc002a010
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 40 f1 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0ec0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 20 f1 02 c0    	mov    ax,ds:0xc002f120
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 20 f1 02 c0    	mov    ds:0xc002f120,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 67 43 02 00       	call   c0027474 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 80 9f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6080]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 3b a0 02 c0       	mov    eax,0xc002a03b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 00 a0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6000]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 32 2d 02 00       	call   c0027474 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 10 a0 02 c0       	mov    edx,0xc002a010
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 00 9f 02 c0       	mov    edx,0xc0029f00
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 10 9f 02 c0       	mov    edx,0xc0029f10
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 40 f1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0ec0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 40 f1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0ec0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 f9 16 02 00       	call   c0027474 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 df 16 02 00       	call   c0027474 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 57 9f 02 c0       	mov    eax,0xc0029f57
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 50 9f 02 c0       	mov    eax,0xc0029f50
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 40 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0ec0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 40 9f 02 c0       	mov    esi,0xc0029f40
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 22 fe 01 00       	call   c0027474 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 20 a0 02 c0       	mov    edx,0xc002a020
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 20 9f 02 c0       	mov    edx,0xc0029f20
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 30 9f 02 c0       	mov    edx,0xc0029f30
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 42 a0 02 c0       	mov    edx,0xc002a042
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 4e a0 02 c0       	mov    edx,0xc002a04e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 62 a0 02 c0       	mov    edx,0xc002a062
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 80 a3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a380
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 80 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a380
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 c0 a0 02 c0       	mov    eax,0xc002a0c0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 80 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f80]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 76 07 02 00       	call   c0028f47 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 39 07 02 00       	call   c0028f29 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 0d 07 02 00       	call   c0028f47 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 c0 fd 01 00       	call   c002864c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 42 08 02 00       	call   c00290e0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 87 06 02 00       	call   c0028f47 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 c9 05 02 00       	call   c0028f47 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 96 05 02 00       	call   c0028f29 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 83 04 02 00       	call   c0028f47 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 4b 04 02 00       	call   c0028f29 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 80 a4 02 c0       	mov    eax,0xc002a480
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 57 02 02 00       	call   c0028f47 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 1c 02 02 00       	call   c0028f29 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 e0 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5720]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 2c ff 01 00       	call   c0028cdb <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 aa f8 01 00       	call   c0028678 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 66 01 02 00       	call   c0028f4b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 54 02 02 00       	call   c002906f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 3e f8 01 00       	call   c0028678 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 e9 00 02 00       	call   c0028f45 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 ca 00 02 00       	call   c0028f49 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 60 02 02 00       	call   c0029100 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 0a fe 01 00       	call   c0028cdb <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 88 f7 01 00       	call   c0028678 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 44 00 02 00       	call   c0028f4b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 32 01 02 00       	call   c002906f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 1c f7 01 00       	call   c0028678 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 c7 ff 01 00       	call   c0028f45 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 a7 ff 01 00       	call   c0028f49 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 3c 01 02 00       	call   c0029100 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 e2 fe 01 00       	call   c0028f47 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 a0 fe 01 00       	call   c0028f29 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 88 fe 01 00       	call   c0028f47 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 fa fb 01 00       	call   c0028cdb <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 fc ee 01 00       	call   c0027ffb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 5f f5 01 00       	call   c0028678 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 b1 fb 01 00       	call   c0028cdb <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 b7 ee 01 00       	call   c0027ffb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 86 fb 01 00       	call   c0028cdb <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 d6 fd 01 00       	call   c0028f45 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 b3 f4 01 00       	call   c002864c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 35 ff 01 00       	call   c00290e0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 5c fd 01 00       	call   c0028f29 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 57 f4 01 00       	call   c002864c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 d5 fa 01 00       	call   c0028cdb <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 58 f4 01 00       	call   c0028678 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 aa fa 01 00       	call   c0028cdb <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 11 f7 01 00       	call   c002895c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 90 ed 01 00       	call   c0027ffb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 f0 e6 01 00       	call   c0027990 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 c7 fd 01 00       	call   c002906f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 b0 f3 01 00       	call   c0028678 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 97 fd 01 00       	call   c002906f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 09 ed 01 00       	call   c0027ffb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 42 fc 01 00       	call   c0028f4b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 2a f6 01 00       	call   c002895c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 b0 ec 01 00       	call   c0027ffb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 9e fd 01 00       	call   c0029100 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 70 f9 01 00       	call   c0028cdb <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 c7 f2 01 00       	call   c002864c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 a6 fb 01 00       	call   c0028f47 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 3f ec 01 00       	call   c0027ffb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 6b f2 01 00       	call   c002864c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 0d fd 01 00       	call   c0029100 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 be f8 01 00       	call   c0028cdb <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 3b f2 01 00       	call   c0028678 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 8e f8 01 00       	call   c0028cdb <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 94 eb 01 00       	call   c0027ffb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 64 f8 01 00       	call   c0028cdb <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 b6 fa 01 00       	call   c0028f47 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 8d f1 01 00       	call   c002864c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 0f fc 01 00       	call   c00290e0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 36 fa 01 00       	call   c0028f29 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 30 f1 01 00       	call   c002864c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 ae f7 01 00       	call   c0028cdb <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 31 f1 01 00       	call   c0028678 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 83 f7 01 00       	call   c0028cdb <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 ea f3 01 00       	call   c002895c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 69 ea 01 00       	call   c0027ffb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 b9 e3 01 00       	call   c0027990 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 90 fa 01 00       	call   c002906f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 79 f0 01 00       	call   c0028678 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 60 fa 01 00       	call   c002906f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 d2 e9 01 00       	call   c0027ffb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 0b f9 01 00       	call   c0028f4b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 f2 f2 01 00       	call   c002895c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 71 e9 01 00       	call   c0027ffb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 5f fa 01 00       	call   c0029100 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 31 f6 01 00       	call   c0028cdb <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 88 ef 01 00       	call   c002864c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 67 f8 01 00       	call   c0028f47 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 00 e9 01 00       	call   c0027ffb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 2c ef 01 00       	call   c002864c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 a1 f5 01 00       	call   c0028cdb <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 a7 e8 01 00       	call   c0027ffb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 40 a9 02 c0       	mov    eax,0xc002a940
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 54 a9 02 c0       	mov    eax,0xc002a954
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 1c f4 01 00       	call   c0028cdb <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 9a ed 01 00       	call   c0028678 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 2c e0 01 00       	call   c0027990 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 03 f7 01 00       	call   c002906f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 ec ec 01 00       	call   c0028678 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 cf f6 01 00       	call   c002906f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 41 e6 01 00       	call   c0027ffb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 a1 f6 01 00       	call   c002906f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 90 ec 01 00       	call   c0028678 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 f9 e5 01 00       	call   c0027ffb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 1a df 01 00       	call   c0027990 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 f1 f5 01 00       	call   c002906f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 da eb 01 00       	call   c0028678 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 bd f5 01 00       	call   c002906f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 2f e5 01 00       	call   c0027ffb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 8f f5 01 00       	call   c002906f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 7e eb 01 00       	call   c0028678 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 e7 e4 01 00       	call   c0027ffb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 c5 e4 01 00       	call   c0027ffb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 a1 dd 01 00       	call   c0027990 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 78 f4 01 00       	call   c002906f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 61 ea 01 00       	call   c0028678 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 44 f4 01 00       	call   c002906f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 b6 e3 01 00       	call   c0027ffb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 16 f4 01 00       	call   c002906f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 ff e9 01 00       	call   c0028678 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 68 e3 01 00       	call   c0027ffb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 c8 f3 01 00       	call   c002906f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 b1 e9 01 00       	call   c0028678 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 1a e3 01 00       	call   c0027ffb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 2f dc 01 00       	call   c0027990 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 06 f3 01 00       	call   c002906f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 ef e8 01 00       	call   c0028678 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 d6 f2 01 00       	call   c002906f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 48 e2 01 00       	call   c0027ffb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 a8 f2 01 00       	call   c002906f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 91 e8 01 00       	call   c0028678 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 fa e1 01 00       	call   c0027ffb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 5a f2 01 00       	call   c002906f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 43 e8 01 00       	call   c0028678 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 ac e1 01 00       	call   c0027ffb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 80 e1 01 00       	call   c0027ffb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 dd e7 01 00       	call   c0028678 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 99 f0 01 00       	call   c0028f4b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 28 e1 01 00       	call   c0027ffb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 85 e7 01 00       	call   c0028678 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 41 f0 01 00       	call   c0028f4b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 bb d9 01 00       	call   c0027990 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 92 f0 01 00       	call   c002906f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 7b e6 01 00       	call   c0028678 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 5e f0 01 00       	call   c002906f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 d0 df 01 00       	call   c0027ffb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 30 f0 01 00       	call   c002906f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 19 e6 01 00       	call   c0028678 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 82 df 01 00       	call   c0027ffb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 e2 ef 01 00       	call   c002906f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 cb e5 01 00       	call   c0028678 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 34 df 01 00       	call   c0027ffb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 94 ef 01 00       	call   c002906f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 7d e5 01 00       	call   c0028678 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 e6 de 01 00       	call   c0027ffb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 46 ef 01 00       	call   c002906f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 2f e5 01 00       	call   c0028678 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 98 de 01 00       	call   c0027ffb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 9a d7 01 00       	call   c0027990 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 71 ee 01 00       	call   c002906f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 5a e4 01 00       	call   c0028678 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 41 ee 01 00       	call   c002906f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 b3 dd 01 00       	call   c0027ffb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 13 ee 01 00       	call   c002906f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 fc e3 01 00       	call   c0028678 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 65 dd 01 00       	call   c0027ffb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 c5 ed 01 00       	call   c002906f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 ae e3 01 00       	call   c0028678 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 17 dd 01 00       	call   c0027ffb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 77 ed 01 00       	call   c002906f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 60 e3 01 00       	call   c0028678 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 c9 dc 01 00       	call   c0027ffb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 29 ed 01 00       	call   c002906f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 12 e3 01 00       	call   c0028678 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 7b dc 01 00       	call   c0027ffb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 4f dc 01 00       	call   c0027ffb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 ac e2 01 00       	call   c0028678 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 68 eb 01 00       	call   c0028f4b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 f7 db 01 00       	call   c0027ffb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 54 e2 01 00       	call   c0028678 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 10 eb 01 00       	call   c0028f4b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 9e db 01 00       	call   c0027ffb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 fb e1 01 00       	call   c0028678 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 b7 ea 01 00       	call   c0028f4b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 45 db 01 00       	call   c0027ffb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 a2 e1 01 00       	call   c0028678 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 5e ea 01 00       	call   c0028f4b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 bc d3 01 00       	call   c0027990 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 93 ea 01 00       	call   c002906f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 7c e0 01 00       	call   c0028678 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 5f ea 01 00       	call   c002906f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 d1 d9 01 00       	call   c0027ffb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 31 ea 01 00       	call   c002906f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 1a e0 01 00       	call   c0028678 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 83 d9 01 00       	call   c0027ffb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 e3 e9 01 00       	call   c002906f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 cc df 01 00       	call   c0028678 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 35 d9 01 00       	call   c0027ffb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 95 e9 01 00       	call   c002906f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 7e df 01 00       	call   c0028678 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 e7 d8 01 00       	call   c0027ffb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 47 e9 01 00       	call   c002906f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 30 df 01 00       	call   c0028678 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 99 d8 01 00       	call   c0027ffb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 f9 e8 01 00       	call   c002906f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 e2 de 01 00       	call   c0028678 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 48 d8 01 00       	call   c0027ffb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 a8 e8 01 00       	call   c002906f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 91 de 01 00       	call   c0028678 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 fa d7 01 00       	call   c0027ffb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 f4 d0 01 00       	call   c0027990 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 cb e7 01 00       	call   c002906f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 b4 dd 01 00       	call   c0028678 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 94 e7 01 00       	call   c002906f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 06 d7 01 00       	call   c0027ffb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 66 e7 01 00       	call   c002906f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 4f dd 01 00       	call   c0028678 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 b8 d6 01 00       	call   c0027ffb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 18 e7 01 00       	call   c002906f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 01 dd 01 00       	call   c0028678 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 6a d6 01 00       	call   c0027ffb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 ca e6 01 00       	call   c002906f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 b3 dc 01 00       	call   c0028678 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 1c d6 01 00       	call   c0027ffb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 7c e6 01 00       	call   c002906f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 65 dc 01 00       	call   c0028678 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 ce d5 01 00       	call   c0027ffb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 2e e6 01 00       	call   c002906f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 17 dc 01 00       	call   c0028678 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 7d d5 01 00       	call   c0027ffb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 dd e5 01 00       	call   c002906f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 c6 db 01 00       	call   c0028678 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 35 d5 01 00       	call   c0027ffb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 0e d5 01 00       	call   c0027ffb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 6c db 01 00       	call   c0028678 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 28 e4 01 00       	call   c0028f4b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 b7 d4 01 00       	call   c0027ffb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 15 db 01 00       	call   c0028678 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 d1 e3 01 00       	call   c0028f4b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 5f d4 01 00       	call   c0027ffb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 bd da 01 00       	call   c0028678 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 79 e3 01 00       	call   c0028f4b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 07 d4 01 00       	call   c0027ffb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 65 da 01 00       	call   c0028678 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 21 e3 01 00       	call   c0028f4b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 af d3 01 00       	call   c0027ffb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 0d da 01 00       	call   c0028678 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 c9 e2 01 00       	call   c0028f4b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 5d d3 01 00       	call   c0027ffb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 bb d9 01 00       	call   c0028678 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 77 e2 01 00       	call   c0028f4b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 8b cb 01 00       	call   c0027990 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 62 e2 01 00       	call   c002906f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 4b d8 01 00       	call   c0028678 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 32 e2 01 00       	call   c002906f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 a4 d1 01 00       	call   c0027ffb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 84 a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd567c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 d8 e1 01 00       	call   c002906f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 c1 d7 01 00       	call   c0028678 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 2c d1 01 00       	call   c0027ffb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 79 e1 01 00       	call   c002906f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 62 d7 01 00       	call   c0028678 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 cd d0 01 00       	call   c0027ffb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 1a e1 01 00       	call   c002906f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 03 d7 01 00       	call   c0028678 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 6e d0 01 00       	call   c0027ffb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 bb e0 01 00       	call   c002906f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 a4 d6 01 00       	call   c0028678 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 0f d0 01 00       	call   c0027ffb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 5c e0 01 00       	call   c002906f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 45 d6 01 00       	call   c0028678 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 b0 cf 01 00       	call   c0027ffb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 fd df 01 00       	call   c002906f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 e6 d5 01 00       	call   c0028678 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 51 cf 01 00       	call   c0027ffb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 9e df 01 00       	call   c002906f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 87 d5 01 00       	call   c0028678 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 f2 ce 01 00       	call   c0027ffb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 3f df 01 00       	call   c002906f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 28 d5 01 00       	call   c0028678 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 93 ce 01 00       	call   c0027ffb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 9d c7 01 00       	call   c0027990 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 74 de 01 00       	call   c002906f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 5d d4 01 00       	call   c0028678 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 44 de 01 00       	call   c002906f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 b6 cd 01 00       	call   c0027ffb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 a0 a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5660]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 e9 dd 01 00       	call   c002906f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 d2 d3 01 00       	call   c0028678 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 3d cd 01 00       	call   c0027ffb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 89 dd 01 00       	call   c002906f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 72 d3 01 00       	call   c0028678 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 dd cc 01 00       	call   c0027ffb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 29 dd 01 00       	call   c002906f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 12 d3 01 00       	call   c0028678 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 7d cc 01 00       	call   c0027ffb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 c9 dc 01 00       	call   c002906f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 b2 d2 01 00       	call   c0028678 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 1d cc 01 00       	call   c0027ffb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 69 dc 01 00       	call   c002906f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 52 d2 01 00       	call   c0028678 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 bd cb 01 00       	call   c0027ffb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 09 dc 01 00       	call   c002906f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 f2 d1 01 00       	call   c0028678 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 5d cb 01 00       	call   c0027ffb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 a9 db 01 00       	call   c002906f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 92 d1 01 00       	call   c0028678 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 fd ca 01 00       	call   c0027ffb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 49 db 01 00       	call   c002906f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 32 d1 01 00       	call   c0028678 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 9d ca 01 00       	call   c0027ffb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 bc a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5644]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 42 ca 01 00       	call   c0027ffb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 9f d0 01 00       	call   c0028678 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 5b d9 01 00       	call   c0028f4b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 e5 c9 01 00       	call   c0027ffb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 42 d0 01 00       	call   c0028678 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 fe d8 01 00       	call   c0028f4b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 88 c9 01 00       	call   c0027ffb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 e5 cf 01 00       	call   c0028678 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 a1 d8 01 00       	call   c0028f4b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 2b c9 01 00       	call   c0027ffb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 88 cf 01 00       	call   c0028678 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 44 d8 01 00       	call   c0028f4b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 ce c8 01 00       	call   c0027ffb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 2b cf 01 00       	call   c0028678 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 e7 d7 01 00       	call   c0028f4b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 71 c8 01 00       	call   c0027ffb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 ce ce 01 00       	call   c0028678 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 8a d7 01 00       	call   c0028f4b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 14 c8 01 00       	call   c0027ffb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 71 ce 01 00       	call   c0028678 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 2d d7 01 00       	call   c0028f4b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 b7 c7 01 00       	call   c0027ffb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 14 ce 01 00       	call   c0028678 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 d0 d6 01 00       	call   c0028f4b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 cc cd 01 00       	call   c0028678 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 44 d8 01 00       	jmp    c0029100 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 ae d4 01 00       	call   c0028f47 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 6c d4 01 00       	call   c0028f29 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 03 d2 01 00       	call   c0028cdb <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 04 c5 01 00       	call   c0027ffb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 d3 d1 01 00       	call   c0028cdb <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 3a ce 01 00       	call   c002895c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 d9 d3 01 00       	call   c0028f29 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 dc d3 01 00       	call   c0028f47 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 af d3 01 00       	call   c0028f47 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 a8 cd 01 00       	call   c002895c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 32 d5 01 00       	call   c0029100 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 0d d5 01 00       	call   c0029100 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 df d0 01 00       	call   c0028cdb <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 36 ca 01 00       	call   c002864c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 15 d3 01 00       	call   c0028f47 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 ae c3 01 00       	call   c0027ffb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 d2 c9 01 00       	call   c002864c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 74 d4 01 00       	call   c0029100 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 ac cc 01 00       	call   c002895c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 29 c3 01 00       	call   c0027ffb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 55 cf 01 00       	call   c0028cdb <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 55 c2 01 00       	call   c0027ffb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 35 c2 01 00       	call   c0027ffb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 05 cf 01 00       	call   c0028cdb <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 55 d1 01 00       	call   c0028f45 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 34 c8 01 00       	call   c002864c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 b6 d2 01 00       	call   c00290e0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 dd d0 01 00       	call   c0028f29 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 db c7 01 00       	call   c002864c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 59 ce 01 00       	call   c0028cdb <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 dc c7 01 00       	call   c0028678 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 2e ce 01 00       	call   c0028cdb <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 95 ca 01 00       	call   c002895c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 14 c1 01 00       	call   c0027ffb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 de cd 01 00       	call   c0028cdb <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 2a d0 01 00       	call   c0028f47 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 1f c7 01 00       	call   c0028678 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 f1 c6 01 00       	call   c0028678 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 2a cd 01 00       	call   c0028cdb <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 8e c9 01 00       	call   c002895c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 56 c9 01 00       	call   c002895c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 d5 bf 01 00       	call   c0027ffb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 c2 d0 01 00       	call   c0029100 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 94 cc 01 00       	call   c0028cdb <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 eb c5 01 00       	call   c002864c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 ca ce 01 00       	call   c0028f47 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 62 bf 01 00       	call   c0027ffb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 86 c5 01 00       	call   c002864c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 28 d0 01 00       	call   c0029100 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 e9 cd 01 00       	call   c0028f47 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 a7 cd 01 00       	call   c0028f29 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 3e cb 01 00       	call   c0028cdb <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 3f be 01 00       	call   c0027ffb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 0e cb 01 00       	call   c0028cdb <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 75 c7 01 00       	call   c002895c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 14 cd 01 00       	call   c0028f29 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 17 cd 01 00       	call   c0028f47 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 ea cc 01 00       	call   c0028f47 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 e3 c6 01 00       	call   c002895c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 6d ce 01 00       	call   c0029100 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 48 ce 01 00       	call   c0029100 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 1a ca 01 00       	call   c0028cdb <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 71 c3 01 00       	call   c002864c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 50 cc 01 00       	call   c0028f47 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 e9 bc 01 00       	call   c0027ffb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 0d c3 01 00       	call   c002864c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 af cd 01 00       	call   c0029100 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 e7 c5 01 00       	call   c002895c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 64 bc 01 00       	call   c0027ffb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 8f c8 01 00       	call   c0028cdb <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 8f bb 01 00       	call   c0027ffb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 6f bb 01 00       	call   c0027ffb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 3f c8 01 00       	call   c0028cdb <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 8f ca 01 00       	call   c0028f45 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 6d c1 01 00       	call   c002864c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 ef cb 01 00       	call   c00290e0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 16 ca 01 00       	call   c0028f29 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 13 c1 01 00       	call   c002864c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 91 c7 01 00       	call   c0028cdb <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 14 c1 01 00       	call   c0028678 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 66 c7 01 00       	call   c0028cdb <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 cd c3 01 00       	call   c002895c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 4c ba 01 00       	call   c0027ffb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 16 c7 01 00       	call   c0028cdb <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 62 c9 01 00       	call   c0028f47 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 57 c0 01 00       	call   c0028678 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 29 c0 01 00       	call   c0028678 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 60 c6 01 00       	call   c0028cdb <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 c4 c2 01 00       	call   c002895c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 91 c2 01 00       	call   c002895c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 10 b9 01 00       	call   c0027ffb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 fd c9 01 00       	call   c0029100 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 cf c5 01 00       	call   c0028cdb <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 26 bf 01 00       	call   c002864c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 05 c8 01 00       	call   c0028f47 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 9d b8 01 00       	call   c0027ffb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 c1 be 01 00       	call   c002864c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 63 c9 01 00       	call   c0029100 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 24 c7 01 00       	call   c0028f47 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 e2 c6 01 00       	call   c0028f29 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 79 c4 01 00       	call   c0028cdb <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 7a b7 01 00       	call   c0027ffb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 49 c4 01 00       	call   c0028cdb <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 b0 c0 01 00       	call   c002895c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 4f c6 01 00       	call   c0028f29 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 52 c6 01 00       	call   c0028f47 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 25 c6 01 00       	call   c0028f47 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 1e c0 01 00       	call   c002895c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 a8 c7 01 00       	call   c0029100 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 83 c7 01 00       	call   c0029100 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 55 c3 01 00       	call   c0028cdb <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 ac bc 01 00       	call   c002864c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 8b c5 01 00       	call   c0028f47 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 24 b6 01 00       	call   c0027ffb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 48 bc 01 00       	call   c002864c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 ea c6 01 00       	call   c0029100 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 22 bf 01 00       	call   c002895c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 9f b5 01 00       	call   c0027ffb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 ca c1 01 00       	call   c0028cdb <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 ca b4 01 00       	call   c0027ffb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 aa b4 01 00       	call   c0027ffb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 7a c1 01 00       	call   c0028cdb <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 ca c3 01 00       	call   c0028f45 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 a8 ba 01 00       	call   c002864c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 2a c5 01 00       	call   c00290e0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 51 c3 01 00       	call   c0028f29 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 4e ba 01 00       	call   c002864c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 cc c0 01 00       	call   c0028cdb <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 4f ba 01 00       	call   c0028678 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 a1 c0 01 00       	call   c0028cdb <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 08 bd 01 00       	call   c002895c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 87 b3 01 00       	call   c0027ffb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 51 c0 01 00       	call   c0028cdb <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 9d c2 01 00       	call   c0028f47 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 92 b9 01 00       	call   c0028678 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 64 b9 01 00       	call   c0028678 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 9b bf 01 00       	call   c0028cdb <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 ff bb 01 00       	call   c002895c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 cc bb 01 00       	call   c002895c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 4b b2 01 00       	call   c0027ffb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 38 c3 01 00       	call   c0029100 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 0a bf 01 00       	call   c0028cdb <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 61 b8 01 00       	call   c002864c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 40 c1 01 00       	call   c0028f47 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 d8 b1 01 00       	call   c0027ffb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 fc b7 01 00       	call   c002864c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 9e c2 01 00       	call   c0029100 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 5f c0 01 00       	call   c0028f47 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 1d c0 01 00       	call   c0028f29 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 b4 bd 01 00       	call   c0028cdb <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 b5 b0 01 00       	call   c0027ffb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 84 bd 01 00       	call   c0028cdb <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 eb b9 01 00       	call   c002895c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 8a bf 01 00       	call   c0028f29 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 8d bf 01 00       	call   c0028f47 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 60 bf 01 00       	call   c0028f47 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 59 b9 01 00       	call   c002895c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 e3 c0 01 00       	call   c0029100 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 be c0 01 00       	call   c0029100 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 90 bc 01 00       	call   c0028cdb <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 e7 b5 01 00       	call   c002864c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 c6 be 01 00       	call   c0028f47 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 5f af 01 00       	call   c0027ffb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 83 b5 01 00       	call   c002864c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 25 c0 01 00       	call   c0029100 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 5d b8 01 00       	call   c002895c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 da ae 01 00       	call   c0027ffb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 05 bb 01 00       	call   c0028cdb <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 05 ae 01 00       	call   c0027ffb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 e5 ad 01 00       	call   c0027ffb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 b5 ba 01 00       	call   c0028cdb <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 05 bd 01 00       	call   c0028f45 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 e3 b3 01 00       	call   c002864c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 65 be 01 00       	call   c00290e0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 8c bc 01 00       	call   c0028f29 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 89 b3 01 00       	call   c002864c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 07 ba 01 00       	call   c0028cdb <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 8a b3 01 00       	call   c0028678 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 dc b9 01 00       	call   c0028cdb <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 43 b6 01 00       	call   c002895c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 c2 ac 01 00       	call   c0027ffb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 8c b9 01 00       	call   c0028cdb <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 d8 bb 01 00       	call   c0028f47 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 cd b2 01 00       	call   c0028678 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 9f b2 01 00       	call   c0028678 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 d6 b8 01 00       	call   c0028cdb <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 3a b5 01 00       	call   c002895c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 07 b5 01 00       	call   c002895c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 86 ab 01 00       	call   c0027ffb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 73 bc 01 00       	call   c0029100 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 45 b8 01 00       	call   c0028cdb <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 9c b1 01 00       	call   c002864c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 7b ba 01 00       	call   c0028f47 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 13 ab 01 00       	call   c0027ffb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 37 b1 01 00       	call   c002864c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 d9 bb 01 00       	call   c0029100 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 97 b9 01 00       	call   c0028f47 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 55 b9 01 00       	call   c0028f29 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 ec b6 01 00       	call   c0028cdb <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 ed a9 01 00       	call   c0027ffb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 bc b6 01 00       	call   c0028cdb <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 23 b3 01 00       	call   c002895c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 c2 b8 01 00       	call   c0028f29 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 c5 b8 01 00       	call   c0028f47 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 98 b8 01 00       	call   c0028f47 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 91 b2 01 00       	call   c002895c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 1b ba 01 00       	call   c0029100 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 f2 b9 01 00       	call   c0029100 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 c4 b5 01 00       	call   c0028cdb <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 1b af 01 00       	call   c002864c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 fa b7 01 00       	call   c0028f47 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 93 a8 01 00       	call   c0027ffb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 bb ae 01 00       	call   c002864c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 5d b9 01 00       	call   c0029100 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 96 b1 01 00       	call   c002895c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 13 a8 01 00       	call   c0027ffb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 3f b4 01 00       	call   c0028cdb <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 3f a7 01 00       	call   c0027ffb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 1f a7 01 00       	call   c0027ffb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 ef b3 01 00       	call   c0028cdb <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 23 b6 01 00       	call   c0028f29 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 1a ad 01 00       	call   c002864c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 9c b7 01 00       	call   c00290e0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 c3 b5 01 00       	call   c0028f29 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 bd ac 01 00       	call   c002864c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 3b b3 01 00       	call   c0028cdb <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 be ac 01 00       	call   c0028678 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 10 b3 01 00       	call   c0028cdb <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 77 af 01 00       	call   c002895c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 f6 a5 01 00       	call   c0027ffb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 c0 b2 01 00       	call   c0028cdb <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 0c b5 01 00       	call   c0028f47 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 01 ac 01 00       	call   c0028678 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 d3 ab 01 00       	call   c0028678 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 17 b2 01 00       	call   c0028cdb <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 7e ae 01 00       	call   c002895c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 67 ab 01 00       	call   c0028678 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 23 b4 01 00       	call   c0028f4b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 16 ae 01 00       	call   c002895c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 95 a4 01 00       	call   c0027ffb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 82 b5 01 00       	call   c0029100 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 54 b1 01 00       	call   c0028cdb <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 ab aa 01 00       	call   c002864c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 8a b3 01 00       	call   c0028f47 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 22 a4 01 00       	call   c0027ffb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 4a aa 01 00       	call   c002864c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 ec b4 01 00       	call   c0029100 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 e4 a9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd561c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 d8 a9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5628]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 9f b1 01 00       	call   c0028f47 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 5d b1 01 00       	call   c0028f29 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 49 b1 01 00       	call   c0028f47 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 bb ae 01 00       	call   c0028cdb <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 39 a8 01 00       	call   c0028678 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 8b ae 01 00       	call   c0028cdb <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 91 a1 01 00       	call   c0027ffb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 60 ae 01 00       	call   c0028cdb <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 b0 b0 01 00       	call   c0028f45 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 91 a7 01 00       	call   c002864c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 13 b2 01 00       	call   c00290e0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 3a b0 01 00       	call   c0028f29 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 39 a7 01 00       	call   c002864c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 b7 ad 01 00       	call   c0028cdb <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 3a a7 01 00       	call   c0028678 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 8c ad 01 00       	call   c0028cdb <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 f3 a9 01 00       	call   c002895c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 72 a0 01 00       	call   c0027ffb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 9a a9 01 00       	call   c002895c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 20 a0 01 00       	call   c0027ffb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 0e b1 01 00       	call   c0029100 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 e0 ac 01 00       	call   c0028cdb <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 37 a6 01 00       	call   c002864c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 16 af 01 00       	call   c0028f47 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 af 9f 01 00       	call   c0027ffb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 db a5 01 00       	call   c002864c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 7d b0 01 00       	call   c0029100 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 2a ac 01 00       	call   c0028cdb <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 a7 a5 01 00       	call   c0028678 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 f8 ab 01 00       	call   c0028cdb <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 fe 9e 01 00       	call   c0027ffb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 ce ab 01 00       	call   c0028cdb <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 22 ae 01 00       	call   c0028f49 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 fb a4 01 00       	call   c002864c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 7d af 01 00       	call   c00290e0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 a4 ad 01 00       	call   c0028f29 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 a2 a4 01 00       	call   c002864c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 20 ab 01 00       	call   c0028cdb <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 a3 a4 01 00       	call   c0028678 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 f5 aa 01 00       	call   c0028cdb <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 5c a7 01 00       	call   c002895c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 db 9d 01 00       	call   c0027ffb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 f7 a6 01 00       	call   c002895c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 76 9d 01 00       	call   c0027ffb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 64 ae 01 00       	call   c0029100 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 36 aa 01 00       	call   c0028cdb <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 8d a3 01 00       	call   c002864c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 6c ac 01 00       	call   c0028f47 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 05 9d 01 00       	call   c0027ffb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 31 a3 01 00       	call   c002864c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 a2 a9 01 00       	call   c0028cdb <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 a8 9c 01 00       	call   c0027ffb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 fe aa 02 c0       	mov    eax,0xc002aafe
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 0f ab 02 c0       	mov    eax,0xc002ab0f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c000e4e3:	ff 05 e4 26 03 c0    	inc    DWORD PTR ds:0xc00326e4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d e0 26 03 c0 00 	cmp    DWORD PTR ds:0xc00326e0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c000e50d:	e8 38 ff 00 00       	call   c001e44a <schedule()>
c000e512:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c000e517:	48                   	dec    eax
c000e518:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 30 f3 02 c0       	mov    eax,ds:0xc002f330
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 46 ab 02 c0       	push   0xc002ab46
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 a8 f1 02 c0       	mov    eax,0xc002f1a8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 4f ab 02 c0       	push   0xc002ab4f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 74 74 02 c0       	mov    eax,0xc0027474
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 59 ab 02 c0       	push   0xc002ab59
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 a8 71 02 c0       	mov    eax,0xc00271a8
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 62 ab 02 c0       	push   0xc002ab62
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 74 75 02 c0       	mov    eax,0xc0027574
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 6c ab 02 c0       	push   0xc002ab6c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 f4 72 02 c0       	mov    eax,0xc00272f4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 75 ab 02 c0       	push   0xc002ab75
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 ac f1 02 c0       	mov    eax,0xc002f1ac
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 82 ab 02 c0       	push   0xc002ab82
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 ad f1 02 c0       	mov    eax,0xc002f1ad
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 5d 5a 00 00       	call   c00140ca <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c000e6b2:	68 8f ab 02 c0       	push   0xc002ab8f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 4f f9 00 00       	call   c001e00e <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 32 fb 00 00       	call   c001e206 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 84 ec 01 c0       	push   0xc001ec84
c000e6dd:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c000e6e3:	e8 1e fb 00 00       	call   c001e206 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c000e6f0:	c6 05 ad f1 02 c0 01 	mov    BYTE PTR ds:0xc002f1ad,0x1
c000e6f7:	e8 bf 09 01 00       	call   c001f0bb <Vm::initialise8086()>
c000e6fc:	e8 91 47 00 00       	call   c0012e92 <Fs::initVFS()>
c000e701:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 7e e1 00 00       	call   c001c89b <Sys::loadSyscalls()>
c000e71d:	e8 3c be 00 00       	call   c001a55e <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 9c ab 02 c0       	push   0xc002ab9c
c000e72c:	68 a5 ab 02 c0       	push   0xc002aba5
c000e731:	e8 17 cd 00 00       	call   c001b44d <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 44 52 00 00       	call   c0013982 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 3b 59 00 00       	call   c001408a <Device::loadDriversForAll()>
c000e74f:	e8 56 b9 00 00       	call   c001a0aa <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d a8 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1a8
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 ad ab 02 c0       	push   0xc002abad
c000e763:	e8 03 f3 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 25 f5 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 cb fe 00 00       	call   c001e649 <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 c9 ab 02 c0       	push   0xc002abc9
c000e793:	50                   	push   eax
c000e794:	e8 ab 59 00 00       	call   c0014144 <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 c1 f1 02 c0 04 	test   BYTE PTR ds:0xc002f1c1,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 09 88 01 00       	call   c0027136 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 52 a4 00 00       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 2b a4 00 00       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 09 a4 00 00       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 e7 a3 00 00       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 c0 f1 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f1c0,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 f5 a2 00 00       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 d0 a2 00 00       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 73 86 01 00       	call   c00270f0 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 30 86 01 00       	call   c00270d0 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 ec a2 00 00       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 d9 ab 02 c0       	push   0xc002abd9
c000eaf9:	e8 09 40 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 ec ab 02 c0       	push   0xc002abec
c000eb1c:	e8 e6 3f 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 fd ab 02 c0       	push   0xc002abfd
c000eb3f:	e8 c3 3f 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 0e ac 02 c0       	push   0xc002ac0e
c000eb62:	e8 a0 3f 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 1f ac 02 c0       	push   0xc002ac1f
c000eb85:	e8 7d 3f 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 30 ac 02 c0       	push   0xc002ac30
c000eba8:	e8 5a 3f 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 41 ac 02 c0       	push   0xc002ac41
c000ebcb:	e8 37 3f 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 52 ac 02 c0       	push   0xc002ac52
c000ebee:	e8 14 3f 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 63 ac 02 c0       	push   0xc002ac63
c000ec11:	e8 f1 3e 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 74 ac 02 c0       	push   0xc002ac74
c000ec34:	e8 ce 3e 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 85 ac 02 c0       	push   0xc002ac85
c000ec57:	e8 ab 3e 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 96 ac 02 c0       	push   0xc002ac96
c000ec7a:	e8 88 3e 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 a7 ac 02 c0       	push   0xc002aca7
c000ec9d:	e8 65 3e 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 b8 ac 02 c0       	push   0xc002acb8
c000ecc0:	e8 42 3e 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 c9 ac 02 c0       	push   0xc002acc9
c000ece3:	e8 1f 3e 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 da ac 02 c0       	push   0xc002acda
c000ed06:	e8 fc 3d 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 eb ac 02 c0       	push   0xc002aceb
c000ed29:	e8 d9 3d 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 fc ac 02 c0       	push   0xc002acfc
c000ed4c:	e8 b6 3d 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 0d ad 02 c0       	push   0xc002ad0d
c000ed6b:	e8 97 3d 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 e0 c7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c7e0
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 86 3d 00 00       	jmp    c0012b07 <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 1e ad 02 c0       	push   0xc002ad1e
c000ee54:	e8 3e b8 00 00       	call   c001a697 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 24 ad 02 c0       	push   0xc002ad24
c000ee8c:	e8 06 b8 00 00       	call   c001a697 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 c0 f1 02 c0 04 	test   BYTE PTR ds:0xc002f1c0,0x4
c000eee4:	68 68 12 00 00       	push   0x1268
c000eee9:	0f 94 05 e4 e0 02 c0 	sete   BYTE PTR ds:0xc002e0e4
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 9d 90 00 00       	call   c0017f9c <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 32 50 00 00       	call   c0013f40 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 34 9f 00 00       	call   c0018e72 <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 f3 4f 00 00       	call   c0013f40 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 7f 55 00 00       	call   c00144e8 <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 c3 4f 00 00       	call   c0013f40 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 89 f3 00 00       	call   c001e328 <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 2a ad 02 c0       	push   0xc002ad2a
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 1a 3b 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 3b ad 02 c0       	push   0xc002ad3b
c000f00a:	e8 88 b6 00 00       	call   c001a697 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 48 ad 02 c0       	push   0xc002ad48
c000f01f:	e8 73 b6 00 00       	call   c001a697 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 52 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad52
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 5c b6 00 00       	jmp    c001a697 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 8c ad 02 c0       	push   0xc002ad8c
c000f0d0:	e8 32 3a 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 b2 f1 02 c0       	mov    ds:0xc002f1b2,eax
c000f111:	66 89 15 b0 f1 02 c0 	mov    WORD PTR ds:0xc002f1b0,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c000f228:	48                   	dec    eax
c000f229:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 a8 f1 02 c0    	push   DWORD PTR ds:0xc002f1a8
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 01 9f 01 00       	call   c0029180 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 f8 9e 01 00       	call   c0029180 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 b8 f1 02 c0 ff 07 	mov    WORD PTR ds:0xc002f1b8,0x7ff
c000f375:	a3 ba f1 02 c0       	mov    ds:0xc002f1ba,eax
c000f37a:	0f 01 1d b8 f1 02 c0 	lidtd  ds:0xc002f1b8
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 30 f3 02 c0    	push   DWORD PTR ds:0xc002f330
c000f66c:	e8 c9 29 00 00       	call   c001203a <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 a3 19 00 00       	call   c0011032 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 d4 19 00 00       	call   c0011072 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 a8 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1a8
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d c8 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0c8
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 c8 e0 02 c0       	mov    eax,ds:0xc002e0c8
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 a8 ad 02 c0       	push   0xc002ada8
c000f745:	e8 bd 33 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 c8 e0 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e0c8,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 30 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f330
c000f771:	8b 2d c8 e0 02 c0    	mov    ebp,DWORD PTR ds:0xc002e0c8
c000f777:	e8 4c 04 00 00       	call   c000fbc8 <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 af 27 00 00       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 d8 ad 02 c0       	push   0xc002add8
c000f7fd:	e8 95 ae 00 00       	call   c001a697 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 dd ad 02 c0       	push   0xc002addd
c000f813:	e8 7f ae 00 00       	call   c001a697 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c000f833:	48                   	dec    eax
c000f834:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 30 f3 02 c0    	push   DWORD PTR ds:0xc002f330
c000f854:	e8 e1 27 00 00       	call   c001203a <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 30 f3 02 c0    	push   DWORD PTR ds:0xc002f330
c000f86a:	e8 75 24 00 00       	call   c0011ce4 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <kernel_main>:
c000f8e6:	57                   	push   edi
c000f8e7:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8ec:	56                   	push   esi
c000f8ed:	89 fa                	mov    edx,edi
c000f8ef:	53                   	push   ebx
c000f8f0:	31 f6                	xor    esi,esi
c000f8f2:	83 ec 2c             	sub    esp,0x2c
c000f8f5:	89 f0                	mov    eax,esi
c000f8f7:	ee                   	out    dx,al
c000f8f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8fd:	b0 80                	mov    al,0x80
c000f8ff:	89 da                	mov    edx,ebx
c000f901:	ee                   	out    dx,al
c000f902:	b1 03                	mov    cl,0x3
c000f904:	ba f8 03 00 00       	mov    edx,0x3f8
c000f909:	88 c8                	mov    al,cl
c000f90b:	ee                   	out    dx,al
c000f90c:	89 f0                	mov    eax,esi
c000f90e:	89 fa                	mov    edx,edi
c000f910:	ee                   	out    dx,al
c000f911:	88 c8                	mov    al,cl
c000f913:	89 da                	mov    edx,ebx
c000f915:	ee                   	out    dx,al
c000f916:	b0 c7                	mov    al,0xc7
c000f918:	ba fa 03 00 00       	mov    edx,0x3fa
c000f91d:	ee                   	out    dx,al
c000f91e:	b0 0b                	mov    al,0xb
c000f920:	ba fc 03 00 00       	mov    edx,0x3fc
c000f925:	ee                   	out    dx,al
c000f926:	68 e4 ad 02 c0       	push   0xc002ade4
c000f92b:	e8 d7 31 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000f930:	e8 45 09 00 00       	call   c001027a <installVgaTextImplementation()>
c000f935:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f93a:	05 ff 0f 00 00       	add    eax,0xfff
c000f93f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f944:	89 04 24             	mov    DWORD PTR [esp],eax
c000f947:	e8 f5 03 00 00       	call   c000fd41 <Phys::physicalMemorySetup(unsigned int)>
c000f94c:	e8 6f 1f 00 00       	call   c00118c0 <Virt::virtualMemorySetup()>
c000f951:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f957:	83 c4 10             	add    esp,0x10
c000f95a:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f960:	75 0e                	jne    c000f970 <kernel_main+0x8a>
c000f962:	89 d8                	mov    eax,ebx
c000f964:	25 48 03 00 00       	and    eax,0x348
c000f969:	3d 00 03 00 00       	cmp    eax,0x300
c000f96e:	74 10                	je     c000f980 <kernel_main+0x9a>
c000f970:	83 ec 0c             	sub    esp,0xc
c000f973:	68 e1 c7 02 c0       	push   0xc002c7e1
c000f978:	e8 1a ad 00 00       	call   c001a697 <Krnl::panic(char const*)>
c000f97d:	83 c4 10             	add    esp,0x10
c000f980:	83 ec 0c             	sub    esp,0xc
c000f983:	89 1d c0 f1 02 c0    	mov    DWORD PTR ds:0xc002f1c0,ebx
c000f989:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f98d:	53                   	push   ebx
c000f98e:	e8 79 21 00 00       	call   c0011b0c <VAS::VAS()>
c000f993:	89 1d 30 f3 02 c0    	mov    DWORD PTR ds:0xc002f330,ebx
c000f999:	e8 82 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f99e:	c7 04 24 fb ad 02 c0 	mov    DWORD PTR [esp],0xc002adfb
c000f9a5:	e8 5d 31 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000f9aa:	e8 90 1f 00 00       	call   c001193f <Virt::swappingSetup()>
c000f9af:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f9b6:	e8 d1 fe ff ff       	call   c000f88c <malloc>
c000f9bb:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9be:	89 c6                	mov    esi,eax
c000f9c0:	e8 bf ed ff ff       	call   c000e784 <Computer::Computer()>
c000f9c5:	58                   	pop    eax
c000f9c6:	89 35 a8 f1 02 c0    	mov    DWORD PTR ds:0xc002f1a8,esi
c000f9cc:	5a                   	pop    edx
c000f9cd:	56                   	push   esi
c000f9ce:	68 18 ae 02 c0       	push   0xc002ae18
c000f9d3:	e8 2f 31 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000f9d8:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c000f9dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000f9df:	6a 00                	push   0x0
c000f9e1:	6a 00                	push   0x0
c000f9e3:	6a 00                	push   0x0
c000f9e5:	50                   	push   eax
c000f9e6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f9e9:	83 c4 14             	add    esp,0x14
c000f9ec:	53                   	push   ebx
c000f9ed:	e8 ca 23 00 00       	call   c0011dbc <VAS::~VAS()>
c000f9f2:	c7 04 24 2b ae 02 c0 	mov    DWORD PTR [esp],0xc002ae2b
c000f9f9:	e8 99 ac 00 00       	call   c001a697 <Krnl::panic(char const*)>
c000f9fe:	83 c4 30             	add    esp,0x30
c000fa01:	5b                   	pop    ebx
c000fa02:	5e                   	pop    esi
c000fa03:	5f                   	pop    edi
c000fa04:	c3                   	ret    

c000fa05 <Phys::allocateDMA(unsigned long)>:
c000fa05:	55                   	push   ebp
c000fa06:	31 d2                	xor    edx,edx
c000fa08:	57                   	push   edi
c000fa09:	31 ed                	xor    ebp,ebp
c000fa0b:	56                   	push   esi
c000fa0c:	31 c9                	xor    ecx,ecx
c000fa0e:	53                   	push   ebx
c000fa0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa13:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa19:	31 c0                	xor    eax,eax
c000fa1b:	c1 ee 0c             	shr    esi,0xc
c000fa1e:	eb 17                	jmp    c000fa37 <Phys::allocateDMA(unsigned long)+0x32>
c000fa20:	85 c9                	test   ecx,ecx
c000fa22:	75 04                	jne    c000fa28 <Phys::allocateDMA(unsigned long)+0x23>
c000fa24:	89 d5                	mov    ebp,edx
c000fa26:	89 d0                	mov    eax,edx
c000fa28:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fa2b:	39 de                	cmp    esi,ebx
c000fa2d:	74 20                	je     c000fa4f <Phys::allocateDMA(unsigned long)+0x4a>
c000fa2f:	42                   	inc    edx
c000fa30:	89 d9                	mov    ecx,ebx
c000fa32:	83 fa 2f             	cmp    edx,0x2f
c000fa35:	7f 11                	jg     c000fa48 <Phys::allocateDMA(unsigned long)+0x43>
c000fa37:	80 ba 00 f2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0e00],0x0
c000fa3e:	74 e0                	je     c000fa20 <Phys::allocateDMA(unsigned long)+0x1b>
c000fa40:	31 c9                	xor    ecx,ecx
c000fa42:	42                   	inc    edx
c000fa43:	83 fa 2f             	cmp    edx,0x2f
c000fa46:	7e ef                	jle    c000fa37 <Phys::allocateDMA(unsigned long)+0x32>
c000fa48:	5b                   	pop    ebx
c000fa49:	31 c0                	xor    eax,eax
c000fa4b:	5e                   	pop    esi
c000fa4c:	5f                   	pop    edi
c000fa4d:	5d                   	pop    ebp
c000fa4e:	c3                   	ret    
c000fa4f:	8d 14 30             	lea    edx,[eax+esi*1]
c000fa52:	89 d7                	mov    edi,edx
c000fa54:	4f                   	dec    edi
c000fa55:	79 03                	jns    c000fa5a <Phys::allocateDMA(unsigned long)+0x55>
c000fa57:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fa5a:	c1 ff 04             	sar    edi,0x4
c000fa5d:	89 c2                	mov    edx,eax
c000fa5f:	c1 fa 04             	sar    edx,0x4
c000fa62:	39 fa                	cmp    edx,edi
c000fa64:	75 2f                	jne    c000fa95 <Phys::allocateDMA(unsigned long)+0x90>
c000fa66:	85 db                	test   ebx,ebx
c000fa68:	74 1a                	je     c000fa84 <Phys::allocateDMA(unsigned long)+0x7f>
c000fa6a:	be 00 f2 02 c0       	mov    esi,0xc002f200
c000fa6f:	8d 90 00 f2 02 c0    	lea    edx,[eax-0x3ffd0e00]
c000fa75:	f7 d6                	not    esi
c000fa77:	29 c6                	sub    esi,eax
c000fa79:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa7c:	42                   	inc    edx
c000fa7d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fa80:	39 d9                	cmp    ecx,ebx
c000fa82:	7f f5                	jg     c000fa79 <Phys::allocateDMA(unsigned long)+0x74>
c000fa84:	85 ff                	test   edi,edi
c000fa86:	74 13                	je     c000fa9b <Phys::allocateDMA(unsigned long)+0x96>
c000fa88:	5b                   	pop    ebx
c000fa89:	05 50 20 0c 00       	add    eax,0xc2050
c000fa8e:	5e                   	pop    esi
c000fa8f:	c1 e0 0c             	shl    eax,0xc
c000fa92:	5f                   	pop    edi
c000fa93:	5d                   	pop    ebp
c000fa94:	c3                   	ret    
c000fa95:	89 ea                	mov    edx,ebp
c000fa97:	31 c9                	xor    ecx,ecx
c000fa99:	eb a7                	jmp    c000fa42 <Phys::allocateDMA(unsigned long)+0x3d>
c000fa9b:	5b                   	pop    ebx
c000fa9c:	c1 e0 0c             	shl    eax,0xc
c000fa9f:	5e                   	pop    esi
c000faa0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000faa5:	5f                   	pop    edi
c000faa6:	5d                   	pop    ebp
c000faa7:	c3                   	ret    

c000faa8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000faa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000faac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fab0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fab6:	c1 e9 0c             	shr    ecx,0xc
c000fab9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fabe:	76 25                	jbe    c000fae5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fac0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fac5:	c1 e8 0c             	shr    eax,0xc
c000fac8:	8d 50 10             	lea    edx,[eax+0x10]
c000facb:	85 c9                	test   ecx,ecx
c000facd:	74 15                	je     c000fae4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000facf:	8d 82 00 f2 02 c0    	lea    eax,[edx-0x3ffd0e00]
c000fad5:	8d 94 11 00 f2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0e00]
c000fadc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fadf:	40                   	inc    eax
c000fae0:	39 d0                	cmp    eax,edx
c000fae2:	75 f8                	jne    c000fadc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fae4:	c3                   	ret    
c000fae5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000faeb:	c1 ea 0c             	shr    edx,0xc
c000faee:	eb db                	jmp    c000facb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000faf0 <Phys::setPageState(unsigned long, bool)>:
c000faf0:	56                   	push   esi
c000faf1:	ba 01 00 00 00       	mov    edx,0x1
c000faf6:	53                   	push   ebx
c000faf7:	8b 35 cc e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e0cc
c000fafd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb05:	89 c8                	mov    eax,ecx
c000fb07:	83 e1 07             	and    ecx,0x7
c000fb0a:	c1 e8 03             	shr    eax,0x3
c000fb0d:	d3 e3                	shl    ebx,cl
c000fb0f:	01 c6                	add    esi,eax
c000fb11:	d3 e2                	shl    edx,cl
c000fb13:	f7 d2                	not    edx
c000fb15:	20 16                	and    BYTE PTR [esi],dl
c000fb17:	03 05 cc e0 02 c0    	add    eax,DWORD PTR ds:0xc002e0cc
c000fb1d:	08 18                	or     BYTE PTR [eax],bl
c000fb1f:	5b                   	pop    ebx
c000fb20:	5e                   	pop    esi
c000fb21:	c3                   	ret    

c000fb22 <Phys::getPageState(unsigned long)>:
c000fb22:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb26:	8b 15 cc e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0cc
c000fb2c:	89 c8                	mov    eax,ecx
c000fb2e:	83 e1 07             	and    ecx,0x7
c000fb31:	c1 e8 03             	shr    eax,0x3
c000fb34:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fb38:	d3 f8                	sar    eax,cl
c000fb3a:	83 e0 01             	and    eax,0x1
c000fb3d:	c3                   	ret    

c000fb3e <Phys::freePage(unsigned long)>:
c000fb3e:	53                   	push   ebx
c000fb3f:	83 ec 08             	sub    esp,0x8
c000fb42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb46:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fb4c:	76 57                	jbe    c000fba5 <Phys::freePage(unsigned long)+0x67>
c000fb4e:	c1 eb 0c             	shr    ebx,0xc
c000fb51:	53                   	push   ebx
c000fb52:	e8 cb ff ff ff       	call   c000fb22 <Phys::getPageState(unsigned long)>
c000fb57:	5a                   	pop    edx
c000fb58:	84 c0                	test   al,al
c000fb5a:	74 5b                	je     c000fbb7 <Phys::freePage(unsigned long)+0x79>
c000fb5c:	a1 f0 f1 02 c0       	mov    eax,ds:0xc002f1f0
c000fb61:	48                   	dec    eax
c000fb62:	a3 f0 f1 02 c0       	mov    ds:0xc002f1f0,eax
c000fb67:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb6a:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb6d:	c1 e0 02             	shl    eax,0x2
c000fb70:	99                   	cdq    
c000fb71:	f7 3d f4 f1 02 c0    	idiv   DWORD PTR ds:0xc002f1f4
c000fb77:	39 05 ec f1 02 c0    	cmp    DWORD PTR ds:0xc002f1ec,eax
c000fb7d:	75 13                	jne    c000fb92 <Phys::freePage(unsigned long)+0x54>
c000fb7f:	83 ec 08             	sub    esp,0x8
c000fb82:	6a 00                	push   0x0
c000fb84:	53                   	push   ebx
c000fb85:	e8 66 ff ff ff       	call   c000faf0 <Phys::setPageState(unsigned long, bool)>
c000fb8a:	83 c4 10             	add    esp,0x10
c000fb8d:	83 c4 08             	add    esp,0x8
c000fb90:	5b                   	pop    ebx
c000fb91:	c3                   	ret    
c000fb92:	83 ec 0c             	sub    esp,0xc
c000fb95:	a3 ec f1 02 c0       	mov    ds:0xc002f1ec,eax
c000fb9a:	50                   	push   eax
c000fb9b:	e8 08 0a 00 00       	call   c00105a8 <VgaText::updateRAMUsageDisplay(int)>
c000fba0:	83 c4 10             	add    esp,0x10
c000fba3:	eb da                	jmp    c000fb7f <Phys::freePage(unsigned long)+0x41>
c000fba5:	68 00 10 00 00       	push   0x1000
c000fbaa:	53                   	push   ebx
c000fbab:	e8 f8 fe ff ff       	call   c000faa8 <Phys::freeDMA(unsigned long, unsigned long)>
c000fbb0:	59                   	pop    ecx
c000fbb1:	5b                   	pop    ebx
c000fbb2:	83 c4 08             	add    esp,0x8
c000fbb5:	5b                   	pop    ebx
c000fbb6:	c3                   	ret    
c000fbb7:	c7 44 24 10 46 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae46
c000fbbf:	83 c4 08             	add    esp,0x8
c000fbc2:	5b                   	pop    ebx
c000fbc3:	e9 cf aa 00 00       	jmp    c001a697 <Krnl::panic(char const*)>

c000fbc8 <Phys::allocatePage()>:
c000fbc8:	56                   	push   esi
c000fbc9:	53                   	push   ebx
c000fbca:	51                   	push   ecx
c000fbcb:	8b 35 e4 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1e4
c000fbd1:	89 f3                	mov    ebx,esi
c000fbd3:	eb 0a                	jmp    c000fbdf <Phys::allocatePage()+0x17>
c000fbd5:	89 1d e4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1e4,ebx
c000fbdb:	39 de                	cmp    esi,ebx
c000fbdd:	74 24                	je     c000fc03 <Phys::allocatePage()+0x3b>
c000fbdf:	53                   	push   ebx
c000fbe0:	e8 3d ff ff ff       	call   c000fb22 <Phys::getPageState(unsigned long)>
c000fbe5:	5a                   	pop    edx
c000fbe6:	84 c0                	test   al,al
c000fbe8:	74 77                	je     c000fc61 <Phys::allocatePage()+0x99>
c000fbea:	43                   	inc    ebx
c000fbeb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbf1:	75 e2                	jne    c000fbd5 <Phys::allocatePage()+0xd>
c000fbf3:	31 db                	xor    ebx,ebx
c000fbf5:	c7 05 e4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1e4,0x0
c000fbff:	39 de                	cmp    esi,ebx
c000fc01:	75 dc                	jne    c000fbdf <Phys::allocatePage()+0x17>
c000fc03:	83 ec 0c             	sub    esp,0xc
c000fc06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fc0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fc0e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fc14:	e8 1b 2c 00 00       	call   c0012834 <VAS::scanForEviction()>
c000fc19:	83 c4 10             	add    esp,0x10
c000fc1c:	85 c0                	test   eax,eax
c000fc1e:	75 76                	jne    c000fc96 <Phys::allocatePage()+0xce>
c000fc20:	83 ec 0c             	sub    esp,0xc
c000fc23:	68 5c ae 02 c0       	push   0xc002ae5c
c000fc28:	e8 da 2e 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000fc2d:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fc34:	e8 cc fd ff ff       	call   c000fa05 <Phys::allocateDMA(unsigned long)>
c000fc39:	83 c4 10             	add    esp,0x10
c000fc3c:	85 c0                	test   eax,eax
c000fc3e:	75 56                	jne    c000fc96 <Phys::allocatePage()+0xce>
c000fc40:	83 ec 0c             	sub    esp,0xc
c000fc43:	68 6d ae 02 c0       	push   0xc002ae6d
c000fc48:	e8 4a aa 00 00       	call   c001a697 <Krnl::panic(char const*)>
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	8b 1d e4 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1e4
c000fc56:	53                   	push   ebx
c000fc57:	e8 c6 fe ff ff       	call   c000fb22 <Phys::getPageState(unsigned long)>
c000fc5c:	5a                   	pop    edx
c000fc5d:	84 c0                	test   al,al
c000fc5f:	75 89                	jne    c000fbea <Phys::allocatePage()+0x22>
c000fc61:	6a 01                	push   0x1
c000fc63:	53                   	push   ebx
c000fc64:	e8 87 fe ff ff       	call   c000faf0 <Phys::setPageState(unsigned long, bool)>
c000fc69:	a1 f0 f1 02 c0       	mov    eax,ds:0xc002f1f0
c000fc6e:	59                   	pop    ecx
c000fc6f:	40                   	inc    eax
c000fc70:	5b                   	pop    ebx
c000fc71:	a3 f0 f1 02 c0       	mov    ds:0xc002f1f0,eax
c000fc76:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc79:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc7c:	c1 e0 02             	shl    eax,0x2
c000fc7f:	99                   	cdq    
c000fc80:	f7 3d f4 f1 02 c0    	idiv   DWORD PTR ds:0xc002f1f4
c000fc86:	39 05 ec f1 02 c0    	cmp    DWORD PTR ds:0xc002f1ec,eax
c000fc8c:	75 0c                	jne    c000fc9a <Phys::allocatePage()+0xd2>
c000fc8e:	a1 e4 f1 02 c0       	mov    eax,ds:0xc002f1e4
c000fc93:	c1 e0 0c             	shl    eax,0xc
c000fc96:	5a                   	pop    edx
c000fc97:	5b                   	pop    ebx
c000fc98:	5e                   	pop    esi
c000fc99:	c3                   	ret    
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	a3 ec f1 02 c0       	mov    ds:0xc002f1ec,eax
c000fca2:	50                   	push   eax
c000fca3:	e8 00 09 00 00       	call   c00105a8 <VgaText::updateRAMUsageDisplay(int)>
c000fca8:	83 c4 10             	add    esp,0x10
c000fcab:	eb e1                	jmp    c000fc8e <Phys::allocatePage()+0xc6>

c000fcad <Phys::allocateContiguousPages(int)>:
c000fcad:	57                   	push   edi
c000fcae:	56                   	push   esi
c000fcaf:	53                   	push   ebx
c000fcb0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fcb4:	fa                   	cli    
c000fcb5:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c000fcbb:	31 db                	xor    ebx,ebx
c000fcbd:	85 db                	test   ebx,ebx
c000fcbf:	75 11                	jne    c000fcd2 <Phys::allocateContiguousPages(int)+0x25>
c000fcc1:	e8 02 ff ff ff       	call   c000fbc8 <Phys::allocatePage()>
c000fcc6:	83 fe 01             	cmp    esi,0x1
c000fcc9:	89 c7                	mov    edi,eax
c000fccb:	74 21                	je     c000fcee <Phys::allocateContiguousPages(int)+0x41>
c000fccd:	bb 01 00 00 00       	mov    ebx,0x1
c000fcd2:	e8 f1 fe ff ff       	call   c000fbc8 <Phys::allocatePage()>
c000fcd7:	89 da                	mov    edx,ebx
c000fcd9:	c1 e2 0c             	shl    edx,0xc
c000fcdc:	01 fa                	add    edx,edi
c000fcde:	39 c2                	cmp    edx,eax
c000fce0:	74 20                	je     c000fd02 <Phys::allocateContiguousPages(int)+0x55>
c000fce2:	bb 01 00 00 00       	mov    ebx,0x1
c000fce7:	89 c7                	mov    edi,eax
c000fce9:	83 fe 01             	cmp    esi,0x1
c000fcec:	75 e4                	jne    c000fcd2 <Phys::allocateContiguousPages(int)+0x25>
c000fcee:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c000fcf3:	48                   	dec    eax
c000fcf4:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c000fcf9:	75 01                	jne    c000fcfc <Phys::allocateContiguousPages(int)+0x4f>
c000fcfb:	fb                   	sti    
c000fcfc:	89 f8                	mov    eax,edi
c000fcfe:	5b                   	pop    ebx
c000fcff:	5e                   	pop    esi
c000fd00:	5f                   	pop    edi
c000fd01:	c3                   	ret    
c000fd02:	43                   	inc    ebx
c000fd03:	39 f3                	cmp    ebx,esi
c000fd05:	75 b6                	jne    c000fcbd <Phys::allocateContiguousPages(int)+0x10>
c000fd07:	eb e5                	jmp    c000fcee <Phys::allocateContiguousPages(int)+0x41>

c000fd09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fd09:	56                   	push   esi
c000fd0a:	53                   	push   ebx
c000fd0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd0f:	39 1d e8 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1e8,ebx
c000fd15:	73 06                	jae    c000fd1d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fd17:	89 1d e8 f1 02 c0    	mov    DWORD PTR ds:0xc002f1e8,ebx
c000fd1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd21:	c1 eb 0c             	shr    ebx,0xc
c000fd24:	c1 e8 0c             	shr    eax,0xc
c000fd27:	39 d8                	cmp    eax,ebx
c000fd29:	73 13                	jae    c000fd3e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fd2b:	6a 00                	push   0x0
c000fd2d:	8d 70 01             	lea    esi,[eax+0x1]
c000fd30:	50                   	push   eax
c000fd31:	e8 ba fd ff ff       	call   c000faf0 <Phys::setPageState(unsigned long, bool)>
c000fd36:	5a                   	pop    edx
c000fd37:	89 f0                	mov    eax,esi
c000fd39:	59                   	pop    ecx
c000fd3a:	39 f3                	cmp    ebx,esi
c000fd3c:	75 ed                	jne    c000fd2b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fd3e:	5b                   	pop    ebx
c000fd3f:	5e                   	pop    esi
c000fd40:	c3                   	ret    

c000fd41 <Phys::physicalMemorySetup(unsigned int)>:
c000fd41:	55                   	push   ebp
c000fd42:	57                   	push   edi
c000fd43:	56                   	push   esi
c000fd44:	53                   	push   ebx
c000fd45:	31 db                	xor    ebx,ebx
c000fd47:	83 ec 40             	sub    esp,0x40
c000fd4a:	6a 30                	push   0x30
c000fd4c:	6a 00                	push   0x0
c000fd4e:	68 00 f2 02 c0       	push   0xc002f200
c000fd53:	e8 f8 09 ff ff       	call   c0000750 <memset>
c000fd58:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fd5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd61:	05 00 10 00 00       	add    eax,0x1000
c000fd66:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fd6a:	83 c4 10             	add    esp,0x10
c000fd6d:	83 ec 08             	sub    esp,0x8
c000fd70:	6a 01                	push   0x1
c000fd72:	53                   	push   ebx
c000fd73:	43                   	inc    ebx
c000fd74:	e8 77 fd ff ff       	call   c000faf0 <Phys::setPageState(unsigned long, bool)>
c000fd79:	83 c4 10             	add    esp,0x10
c000fd7c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd82:	75 e9                	jne    c000fd6d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fd84:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fd8b:	66 85 c0             	test   ax,ax
c000fd8e:	0f 84 8e 01 00 00    	je     c000ff22 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fd94:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fd98:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fda0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fda4:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fda9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fdad:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fdb5:	eb 15                	jmp    c000fdcc <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fdb7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fdbb:	83 c3 18             	add    ebx,0x18
c000fdbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdc2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fdc6:	0f 84 66 01 00 00    	je     c000ff32 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fdcc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fdcf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fdd2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fdd5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fdd9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fddd:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fddf:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fde2:	01 f0                	add    eax,esi
c000fde4:	55                   	push   ebp
c000fde5:	11 fa                	adc    edx,edi
c000fde7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdeb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fdef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fdf3:	56                   	push   esi
c000fdf4:	68 a8 ae 02 c0       	push   0xc002aea8
c000fdf9:	e8 09 2d 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000fdfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe02:	83 c4 10             	add    esp,0x10
c000fe05:	09 f8                	or     eax,edi
c000fe07:	0f 85 25 01 00 00    	jne    c000ff32 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe0d:	4d                   	dec    ebp
c000fe0e:	75 a7                	jne    c000fdb7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe10:	ba 00 00 08 00       	mov    edx,0x80000
c000fe15:	89 c1                	mov    ecx,eax
c000fe17:	39 f2                	cmp    edx,esi
c000fe19:	19 f9                	sbb    ecx,edi
c000fe1b:	0f 82 a7 00 00 00    	jb     c000fec8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fe21:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fe25:	89 c1                	mov    ecx,eax
c000fe27:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fe2b:	0f 83 97 00 00 00    	jae    c000fec8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fe31:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fe36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe3a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fe3e:	39 fa                	cmp    edx,edi
c000fe40:	19 e8                	sbb    eax,ebp
c000fe42:	0f 82 14 01 00 00    	jb     c000ff5c <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fe48:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe4c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fe50:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fe56:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe5b:	83 d5 ff             	adc    ebp,0xffffffff
c000fe5e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fe62:	31 c0                	xor    eax,eax
c000fe64:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fe68:	39 fa                	cmp    edx,edi
c000fe6a:	89 c1                	mov    ecx,eax
c000fe6c:	19 e9                	sbb    ecx,ebp
c000fe6e:	0f 83 43 ff ff ff    	jae    c000fdb7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe74:	be 00 00 08 00       	mov    esi,0x80000
c000fe79:	50                   	push   eax
c000fe7a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fe7e:	57                   	push   edi
c000fe7f:	56                   	push   esi
c000fe80:	68 cc ae 02 c0       	push   0xc002aecc
c000fe85:	e8 7d 2c 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000fe8a:	5a                   	pop    edx
c000fe8b:	59                   	pop    ecx
c000fe8c:	57                   	push   edi
c000fe8d:	56                   	push   esi
c000fe8e:	e8 76 fe ff ff       	call   c000fd09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fe93:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fe97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fe9b:	83 c4 0c             	add    esp,0xc
c000fe9e:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fea2:	03 05 f4 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f1f4
c000fea8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000feaf:	a3 f4 f1 02 c0       	mov    ds:0xc002f1f4,eax
c000feb4:	52                   	push   edx
c000feb5:	50                   	push   eax
c000feb6:	68 89 ae 02 c0       	push   0xc002ae89
c000febb:	e8 47 2c 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c000fec0:	83 c4 10             	add    esp,0x10
c000fec3:	e9 ef fe ff ff       	jmp    c000fdb7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fec8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fecc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fed0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fed4:	39 ea                	cmp    edx,ebp
c000fed6:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000feda:	0f 82 d7 fe ff ff    	jb     c000fdb7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fee0:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fee5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fee9:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000feed:	0f 83 c4 fe ff ff    	jae    c000fdb7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fef3:	39 ee                	cmp    esi,ebp
c000fef5:	89 f8                	mov    eax,edi
c000fef7:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fefb:	0f 83 78 ff ff ff    	jae    c000fe79 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ff01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff09:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ff0d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ff11:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ff15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff1d:	e9 57 ff ff ff       	jmp    c000fe79 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	68 7b ae 02 c0       	push   0xc002ae7b
c000ff2a:	e8 68 a7 00 00       	call   c001a697 <Krnl::panic(char const*)>
c000ff2f:	83 c4 10             	add    esp,0x10
c000ff32:	bb 40 01 00 00       	mov    ebx,0x140
c000ff37:	83 ec 08             	sub    esp,0x8
c000ff3a:	6a 00                	push   0x0
c000ff3c:	53                   	push   ebx
c000ff3d:	43                   	inc    ebx
c000ff3e:	e8 ad fb ff ff       	call   c000faf0 <Phys::setPageState(unsigned long, bool)>
c000ff43:	ff 05 f4 f1 02 c0    	inc    DWORD PTR ds:0xc002f1f4
c000ff49:	83 c4 10             	add    esp,0x10
c000ff4c:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ff52:	75 e3                	jne    c000ff37 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000ff54:	83 c4 3c             	add    esp,0x3c
c000ff57:	5b                   	pop    ebx
c000ff58:	5e                   	pop    esi
c000ff59:	5f                   	pop    edi
c000ff5a:	5d                   	pop    ebp
c000ff5b:	c3                   	ret    
c000ff5c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ff64:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff6c:	e9 d7 fe ff ff       	jmp    c000fe48 <Phys::physicalMemorySetup(unsigned int)+0x107>
c000ff71:	90                   	nop

c000ff72 <Pipe::isAtty()>:
c000ff72:	31 c0                	xor    eax,eax
c000ff74:	c3                   	ret    
c000ff75:	90                   	nop

c000ff76 <Pipe::~Pipe()>:
c000ff76:	83 ec 0c             	sub    esp,0xc
c000ff79:	ba 38 af 02 c0       	mov    edx,0xc002af38
c000ff7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff82:	89 10                	mov    DWORD PTR [eax],edx
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	83 ec 0c             	sub    esp,0xc
c000ff8b:	50                   	push   eax
c000ff8c:	e8 0f 15 00 00       	call   c00114a0 <UnixFile::~UnixFile()>
c000ff91:	83 c4 10             	add    esp,0x10
c000ff94:	90                   	nop
c000ff95:	83 c4 0c             	add    esp,0xc
c000ff98:	c3                   	ret    
c000ff99:	90                   	nop

c000ff9a <Pipe::~Pipe()>:
c000ff9a:	83 ec 0c             	sub    esp,0xc
c000ff9d:	83 ec 0c             	sub    esp,0xc
c000ffa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffa4:	e8 cd ff ff ff       	call   c000ff76 <Pipe::~Pipe()>
c000ffa9:	83 c4 10             	add    esp,0x10
c000ffac:	83 ec 08             	sub    esp,0x8
c000ffaf:	6a 20                	push   0x20
c000ffb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb5:	e8 6d 2a 00 00       	call   c0012a27 <operator delete(void*, unsigned long)>
c000ffba:	83 c4 10             	add    esp,0x10
c000ffbd:	83 c4 0c             	add    esp,0xc
c000ffc0:	c3                   	ret    
c000ffc1:	90                   	nop

c000ffc2 <Pipe::read(unsigned long long, void*, int*)>:
c000ffc2:	55                   	push   ebp
c000ffc3:	57                   	push   edi
c000ffc4:	56                   	push   esi
c000ffc5:	53                   	push   ebx
c000ffc6:	83 ec 1c             	sub    esp,0x1c
c000ffc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ffcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ffd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ffd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ffd8:	89 c8                	mov    eax,ecx
c000ffda:	99                   	cdq    
c000ffdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ffdf:	74 24                	je     c0010005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ffe1:	39 f9                	cmp    ecx,edi
c000ffe3:	89 d1                	mov    ecx,edx
c000ffe5:	19 f1                	sbb    ecx,esi
c000ffe7:	73 1c                	jae    c0010005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ffe9:	fa                   	cli    
c000ffea:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c000fff0:	e8 55 e4 00 00       	call   c001e44a <schedule()>
c000fff5:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c000fffa:	48                   	dec    eax
c000fffb:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0010000:	75 d3                	jne    c000ffd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010002:	fb                   	sti    
c0010003:	eb d0                	jmp    c000ffd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010005:	39 f8                	cmp    eax,edi
c0010007:	89 d1                	mov    ecx,edx
c0010009:	89 3c 24             	mov    DWORD PTR [esp],edi
c001000c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010010:	19 f1                	sbb    ecx,esi
c0010012:	73 07                	jae    c001001b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010014:	89 04 24             	mov    DWORD PTR [esp],eax
c0010017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001001b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001001e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010021:	29 f7                	sub    edi,esi
c0010023:	89 f8                	mov    eax,edi
c0010025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010029:	99                   	cdq    
c001002a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001002d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010031:	19 d0                	sbb    eax,edx
c0010033:	73 07                	jae    c001003c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0010035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001003c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001003f:	89 ea                	mov    edx,ebp
c0010041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001004a:	74 0d                	je     c0010059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c001004c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001004f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010059:	85 d2                	test   edx,edx
c001005b:	74 11                	je     c001006e <Pipe::read(unsigned long long, void*, int*)+0xac>
c001005d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010068:	89 d1                	mov    ecx,edx
c001006a:	89 c7                	mov    edi,eax
c001006c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001006e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010077:	99                   	cdq    
c0010078:	89 f7                	mov    edi,esi
c001007a:	03 04 24             	add    eax,DWORD PTR [esp]
c001007d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010081:	c1 ff 1f             	sar    edi,0x1f
c0010084:	57                   	push   edi
c0010085:	56                   	push   esi
c0010086:	52                   	push   edx
c0010087:	50                   	push   eax
c0010088:	e8 e7 74 01 00       	call   c0027574 <__umoddi3>
c001008d:	83 c4 10             	add    esp,0x10
c0010090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010098:	75 10                	jne    c00100aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c001009a:	83 ec 0c             	sub    esp,0xc
c001009d:	68 f5 ae 02 c0       	push   0xc002aef5
c00100a2:	e8 f0 a5 00 00       	call   c001a697 <Krnl::panic(char const*)>
c00100a7:	83 c4 10             	add    esp,0x10
c00100aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100b1:	89 10                	mov    DWORD PTR [eax],edx
c00100b3:	83 c4 1c             	add    esp,0x1c
c00100b6:	31 c0                	xor    eax,eax
c00100b8:	5b                   	pop    ebx
c00100b9:	5e                   	pop    esi
c00100ba:	5f                   	pop    edi
c00100bb:	5d                   	pop    ebp
c00100bc:	c3                   	ret    
c00100bd:	90                   	nop

c00100be <Pipe::write(unsigned long long, void*, int*)>:
c00100be:	55                   	push   ebp
c00100bf:	57                   	push   edi
c00100c0:	56                   	push   esi
c00100c1:	53                   	push   ebx
c00100c2:	83 ec 1c             	sub    esp,0x1c
c00100c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00100c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00100cd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00100d0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00100d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00100d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00100db:	89 d8                	mov    eax,ebx
c00100dd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00100e0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00100e4:	89 d6                	mov    esi,edx
c00100e6:	89 d7                	mov    edi,edx
c00100e8:	c1 ff 1f             	sar    edi,0x1f
c00100eb:	03 34 24             	add    esi,DWORD PTR [esp]
c00100ee:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00100f2:	c1 f8 1f             	sar    eax,0x1f
c00100f5:	39 f3                	cmp    ebx,esi
c00100f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100ff:	19 f8                	sbb    eax,edi
c0010101:	b8 01 00 00 00       	mov    eax,0x1
c0010106:	72 6e                	jb     c0010176 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010108:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001010b:	01 d0                	add    eax,edx
c001010d:	99                   	cdq    
c001010e:	f7 fb                	idiv   ebx
c0010110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010114:	29 d3                	sub    ebx,edx
c0010116:	89 d7                	mov    edi,edx
c0010118:	89 de                	mov    esi,ebx
c001011a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001011d:	c1 fb 1f             	sar    ebx,0x1f
c0010120:	39 f2                	cmp    edx,esi
c0010122:	19 d8                	sbb    eax,ebx
c0010124:	b8 00 00 00 00       	mov    eax,0x0
c0010129:	72 04                	jb     c001012f <Pipe::write(unsigned long long, void*, int*)+0x71>
c001012b:	89 d0                	mov    eax,edx
c001012d:	29 f0                	sub    eax,esi
c001012f:	89 d3                	mov    ebx,edx
c0010131:	29 c3                	sub    ebx,eax
c0010133:	74 0b                	je     c0010140 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010135:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010138:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001013c:	89 d9                	mov    ecx,ebx
c001013e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010140:	85 c0                	test   eax,eax
c0010142:	74 0d                	je     c0010151 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010144:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010148:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001014b:	89 de                	mov    esi,ebx
c001014d:	89 c1                	mov    ecx,eax
c001014f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010151:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010154:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010159:	75 10                	jne    c001016b <Pipe::write(unsigned long long, void*, int*)+0xad>
c001015b:	83 ec 0c             	sub    esp,0xc
c001015e:	68 11 af 02 c0       	push   0xc002af11
c0010163:	e8 2f a5 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0010168:	83 c4 10             	add    esp,0x10
c001016b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001016f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010172:	89 08                	mov    DWORD PTR [eax],ecx
c0010174:	31 c0                	xor    eax,eax
c0010176:	83 c4 1c             	add    esp,0x1c
c0010179:	5b                   	pop    ebx
c001017a:	5e                   	pop    esi
c001017b:	5f                   	pop    edi
c001017c:	5d                   	pop    ebp
c001017d:	c3                   	ret    

c001017e <Pipe::Pipe(int)>:
c001017e:	83 ec 0c             	sub    esp,0xc
c0010181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010185:	83 ec 08             	sub    esp,0x8
c0010188:	6a 00                	push   0x0
c001018a:	50                   	push   eax
c001018b:	e8 2e 11 00 00       	call   c00112be <UnixFile::UnixFile(int)>
c0010190:	83 c4 10             	add    esp,0x10
c0010193:	ba 38 af 02 c0       	mov    edx,0xc002af38
c0010198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001019c:	89 10                	mov    DWORD PTR [eax],edx
c001019e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00101a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00101a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101ad:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00101b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00101bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101c3:	83 ec 0c             	sub    esp,0xc
c00101c6:	50                   	push   eax
c00101c7:	e8 c0 f6 ff ff       	call   c000f88c <malloc>
c00101cc:	83 c4 10             	add    esp,0x10
c00101cf:	89 c2                	mov    edx,eax
c00101d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00101d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101dc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00101e0:	90                   	nop
c00101e1:	83 c4 0c             	add    esp,0xc
c00101e4:	c3                   	ret    
c00101e5:	90                   	nop

c00101e6 <VgaText::isAtty()>:
c00101e6:	b0 01                	mov    al,0x1
c00101e8:	c3                   	ret    
c00101e9:	90                   	nop

c00101ea <VgaText::~VgaText()>:
c00101ea:	83 ec 0c             	sub    esp,0xc
c00101ed:	ba f4 af 02 c0       	mov    edx,0xc002aff4
c00101f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101f6:	89 10                	mov    DWORD PTR [eax],edx
c00101f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101fc:	83 ec 0c             	sub    esp,0xc
c00101ff:	50                   	push   eax
c0010200:	e8 9b 12 00 00       	call   c00114a0 <UnixFile::~UnixFile()>
c0010205:	83 c4 10             	add    esp,0x10
c0010208:	90                   	nop
c0010209:	83 c4 0c             	add    esp,0xc
c001020c:	c3                   	ret    
c001020d:	90                   	nop

c001020e <VgaText::~VgaText()>:
c001020e:	83 ec 0c             	sub    esp,0xc
c0010211:	83 ec 0c             	sub    esp,0xc
c0010214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010218:	e8 cd ff ff ff       	call   c00101ea <VgaText::~VgaText()>
c001021d:	83 c4 10             	add    esp,0x10
c0010220:	83 ec 08             	sub    esp,0x8
c0010223:	68 c4 02 00 00       	push   0x2c4
c0010228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001022c:	e8 f6 27 00 00       	call   c0012a27 <operator delete(void*, unsigned long)>
c0010231:	83 c4 10             	add    esp,0x10
c0010234:	83 c4 0c             	add    esp,0xc
c0010237:	c3                   	ret    

c0010238 <VgaText::read(unsigned long long, void*, int*)>:
c0010238:	83 ec 10             	sub    esp,0x10
c001023b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001023f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010247:	e8 70 5d 00 00       	call   c0015fbc <readKeyboard(VgaText*, char*, unsigned long)>
c001024c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010250:	89 02                	mov    DWORD PTR [edx],eax
c0010252:	31 c0                	xor    eax,eax
c0010254:	83 c4 1c             	add    esp,0x1c
c0010257:	c3                   	ret    

c0010258 <setTerminalScrollLock(bool)>:
c0010258:	c3                   	ret    

c0010259 <addToTerminalCycle(VgaText*)>:
c0010259:	8b 15 80 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f280
c001025f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010263:	85 d2                	test   edx,edx
c0010265:	75 09                	jne    c0010270 <addToTerminalCycle(VgaText*)+0x17>
c0010267:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001026a:	a3 80 f2 02 c0       	mov    ds:0xc002f280,eax
c001026f:	c3                   	ret    
c0010270:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010273:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010276:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010279:	c3                   	ret    

c001027a <installVgaTextImplementation()>:
c001027a:	83 ec 10             	sub    esp,0x10
c001027d:	6a 20                	push   0x20
c001027f:	6a 00                	push   0x0
c0010281:	68 60 f2 02 c0       	push   0xc002f260
c0010286:	e8 c5 04 ff ff       	call   c0000750 <memset>
c001028b:	83 c4 1c             	add    esp,0x1c
c001028e:	c3                   	ret    

c001028f <scrollTerminalScrollLock(int)>:
c001028f:	c3                   	ret    

c0010290 <VgaText::load()>:
c0010290:	53                   	push   ebx
c0010291:	31 c0                	xor    eax,eax
c0010293:	83 ec 58             	sub    esp,0x58
c0010296:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001029a:	89 e2                	mov    edx,esp
c001029c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00102a0:	40                   	inc    eax
c00102a1:	83 f8 50             	cmp    eax,0x50
c00102a4:	75 f6                	jne    c001029c <VgaText::load()+0xc>
c00102a6:	31 c0                	xor    eax,eax
c00102a8:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00102af:	84 c9                	test   cl,cl
c00102b1:	74 06                	je     c00102b9 <VgaText::load()+0x29>
c00102b3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00102b6:	40                   	inc    eax
c00102b7:	eb ef                	jmp    c00102a8 <VgaText::load()+0x18>
c00102b9:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00102bc:	85 c0                	test   eax,eax
c00102be:	74 09                	je     c00102c9 <VgaText::load()+0x39>
c00102c0:	51                   	push   ecx
c00102c1:	51                   	push   ecx
c00102c2:	52                   	push   edx
c00102c3:	53                   	push   ebx
c00102c4:	ff d0                	call   eax
c00102c6:	83 c4 10             	add    esp,0x10
c00102c9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00102cc:	85 c0                	test   eax,eax
c00102ce:	74 09                	je     c00102d9 <VgaText::load()+0x49>
c00102d0:	83 ec 0c             	sub    esp,0xc
c00102d3:	53                   	push   ebx
c00102d4:	ff d0                	call   eax
c00102d6:	83 c4 10             	add    esp,0x10
c00102d9:	83 c4 58             	add    esp,0x58
c00102dc:	5b                   	pop    ebx
c00102dd:	c3                   	ret    

c00102de <VgaText::updateCursor()>:
c00102de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e2:	39 05 84 f2 02 c0    	cmp    DWORD PTR ds:0xc002f284,eax
c00102e8:	75 09                	jne    c00102f3 <VgaText::updateCursor()+0x15>
c00102ea:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00102ed:	85 c0                	test   eax,eax
c00102ef:	74 02                	je     c00102f3 <VgaText::updateCursor()+0x15>
c00102f1:	ff e0                	jmp    eax
c00102f3:	c3                   	ret    

c00102f4 <VgaText::showCursor(bool)>:
c00102f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102fc:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00102ff:	c3                   	ret    

c0010300 <VgaText::disableBlink(bool)>:
c0010300:	56                   	push   esi
c0010301:	53                   	push   ebx
c0010302:	51                   	push   ecx
c0010303:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010307:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001030b:	39 1d 84 f2 02 c0    	cmp    DWORD PTR ds:0xc002f284,ebx
c0010311:	75 15                	jne    c0010328 <VgaText::disableBlink(bool)+0x28>
c0010313:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010316:	85 c0                	test   eax,eax
c0010318:	74 0e                	je     c0010328 <VgaText::disableBlink(bool)+0x28>
c001031a:	89 f1                	mov    ecx,esi
c001031c:	52                   	push   edx
c001031d:	52                   	push   edx
c001031e:	0f b6 d1             	movzx  edx,cl
c0010321:	52                   	push   edx
c0010322:	53                   	push   ebx
c0010323:	ff d0                	call   eax
c0010325:	83 c4 10             	add    esp,0x10
c0010328:	89 f0                	mov    eax,esi
c001032a:	83 f0 01             	xor    eax,0x1
c001032d:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010330:	58                   	pop    eax
c0010331:	5b                   	pop    ebx
c0010332:	5e                   	pop    esi
c0010333:	c3                   	ret    

c0010334 <VgaText::doANSI_SGR(int)>:
c0010334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033c:	85 d2                	test   edx,edx
c001033e:	75 0b                	jne    c001034b <VgaText::doANSI_SGR(int)+0x17>
c0010340:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010343:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010346:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010349:	eb 59                	jmp    c00103a4 <VgaText::doANSI_SGR(int)+0x70>
c001034b:	83 fa 07             	cmp    edx,0x7
c001034e:	75 0b                	jne    c001035b <VgaText::doANSI_SGR(int)+0x27>
c0010350:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010353:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010356:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010359:	eb 49                	jmp    c00103a4 <VgaText::doANSI_SGR(int)+0x70>
c001035b:	83 fa 1b             	cmp    edx,0x1b
c001035e:	74 e0                	je     c0010340 <VgaText::doANSI_SGR(int)+0xc>
c0010360:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010363:	83 f9 07             	cmp    ecx,0x7
c0010366:	77 09                	ja     c0010371 <VgaText::doANSI_SGR(int)+0x3d>
c0010368:	8b 14 8d 00 e1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1f00]
c001036f:	eb 20                	jmp    c0010391 <VgaText::doANSI_SGR(int)+0x5d>
c0010371:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010374:	83 f9 07             	cmp    ecx,0x7
c0010377:	77 09                	ja     c0010382 <VgaText::doANSI_SGR(int)+0x4e>
c0010379:	8b 14 8d 00 e1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1f00]
c0010380:	eb 22                	jmp    c00103a4 <VgaText::doANSI_SGR(int)+0x70>
c0010382:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010385:	83 f9 07             	cmp    ecx,0x7
c0010388:	77 0b                	ja     c0010395 <VgaText::doANSI_SGR(int)+0x61>
c001038a:	8b 14 95 b8 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2048]
c0010391:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010394:	c3                   	ret    
c0010395:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010398:	83 f9 07             	cmp    ecx,0x7
c001039b:	77 0a                	ja     c00103a7 <VgaText::doANSI_SGR(int)+0x73>
c001039d:	8b 14 95 90 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2070]
c00103a4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00103a7:	c3                   	ret    

c00103a8 <VgaText::setDefaultBgColour(VgaColour)>:
c00103a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103b0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00103b3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00103b6:	c3                   	ret    
c00103b7:	90                   	nop

c00103b8 <VgaText::setDefaultFgColour(VgaColour)>:
c00103b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103c0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00103c3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103c6:	c3                   	ret    
c00103c7:	90                   	nop

c00103c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00103c8:	53                   	push   ebx
c00103c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00103d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103d5:	51                   	push   ecx
c00103d6:	e8 cd ff ff ff       	call   c00103a8 <VgaText::setDefaultBgColour(VgaColour)>
c00103db:	58                   	pop    eax
c00103dc:	5a                   	pop    edx
c00103dd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00103e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00103e5:	5b                   	pop    ebx
c00103e6:	eb d0                	jmp    c00103b8 <VgaText::setDefaultFgColour(VgaColour)>

c00103e8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00103e8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00103ec:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00103f1:	83 e0 0f             	and    eax,0xf
c00103f4:	c1 e2 04             	shl    edx,0x4
c00103f7:	09 d0                	or     eax,edx
c00103f9:	c3                   	ret    

c00103fa <VgaText::scrollScreen()>:
c00103fa:	55                   	push   ebp
c00103fb:	b9 01 00 00 00       	mov    ecx,0x1
c0010400:	57                   	push   edi
c0010401:	56                   	push   esi
c0010402:	53                   	push   ebx
c0010403:	83 ec 0c             	sub    esp,0xc
c0010406:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001040a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010410:	31 ff                	xor    edi,edi
c0010412:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010415:	83 f9 17             	cmp    ecx,0x17
c0010418:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001041b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010422:	75 27                	jne    c001044b <VgaText::scrollScreen()+0x51>
c0010424:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010427:	01 f5                	add    ebp,esi
c0010429:	f7 c7 01 00 00 00    	test   edi,0x1
c001042f:	74 16                	je     c0010447 <VgaText::scrollScreen()+0x4d>
c0010431:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010435:	50                   	push   eax
c0010436:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001043a:	50                   	push   eax
c001043b:	e8 a8 ff ff ff       	call   c00103e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010440:	5a                   	pop    edx
c0010441:	5a                   	pop    edx
c0010442:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010445:	eb 04                	jmp    c001044b <VgaText::scrollScreen()+0x51>
c0010447:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001044b:	47                   	inc    edi
c001044c:	46                   	inc    esi
c001044d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010453:	75 bd                	jne    c0010412 <VgaText::scrollScreen()+0x18>
c0010455:	41                   	inc    ecx
c0010456:	83 f9 18             	cmp    ecx,0x18
c0010459:	75 af                	jne    c001040a <VgaText::scrollScreen()+0x10>
c001045b:	39 1d 84 f2 02 c0    	cmp    DWORD PTR ds:0xc002f284,ebx
c0010461:	75 1b                	jne    c001047e <VgaText::scrollScreen()+0x84>
c0010463:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010467:	74 05                	je     c001046e <VgaText::scrollScreen()+0x74>
c0010469:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001046c:	eb 10                	jmp    c001047e <VgaText::scrollScreen()+0x84>
c001046e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010471:	85 c0                	test   eax,eax
c0010473:	74 09                	je     c001047e <VgaText::scrollScreen()+0x84>
c0010475:	83 ec 0c             	sub    esp,0xc
c0010478:	53                   	push   ebx
c0010479:	ff d0                	call   eax
c001047b:	83 c4 10             	add    esp,0x10
c001047e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010482:	83 c4 0c             	add    esp,0xc
c0010485:	5b                   	pop    ebx
c0010486:	5e                   	pop    esi
c0010487:	5f                   	pop    edi
c0010488:	5d                   	pop    ebp
c0010489:	e9 50 fe ff ff       	jmp    c00102de <VgaText::updateCursor()>

c001048e <VgaText::combineCharAndColour(char, unsigned char)>:
c001048e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010493:	c1 e0 08             	shl    eax,0x8
c0010496:	89 c2                	mov    edx,eax
c0010498:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001049d:	09 d0                	or     eax,edx
c001049f:	c3                   	ret    

c00104a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00104a0:	56                   	push   esi
c00104a1:	53                   	push   ebx
c00104a2:	51                   	push   ecx
c00104a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00104a7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104ac:	50                   	push   eax
c00104ad:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104b2:	50                   	push   eax
c00104b3:	e8 30 ff ff ff       	call   c00103e8 <VgaText::combineColours(unsigned char, unsigned char)>
c00104b8:	5b                   	pop    ebx
c00104b9:	0f b6 c0             	movzx  eax,al
c00104bc:	5e                   	pop    esi
c00104bd:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00104c2:	50                   	push   eax
c00104c3:	53                   	push   ebx
c00104c4:	e8 c5 ff ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c00104c9:	5a                   	pop    edx
c00104ca:	5e                   	pop    esi
c00104cb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00104ce:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00104d4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00104d8:	0f b7 d2             	movzx  edx,dx
c00104db:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00104df:	39 0d 84 f2 02 c0    	cmp    DWORD PTR ds:0xc002f284,ecx
c00104e5:	75 10                	jne    c00104f7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00104e7:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00104ea:	85 c0                	test   eax,eax
c00104ec:	74 09                	je     c00104f7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00104ee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00104f2:	5a                   	pop    edx
c00104f3:	5b                   	pop    ebx
c00104f4:	5e                   	pop    esi
c00104f5:	ff e0                	jmp    eax
c00104f7:	58                   	pop    eax
c00104f8:	5b                   	pop    ebx
c00104f9:	5e                   	pop    esi
c00104fa:	c3                   	ret    
c00104fb:	90                   	nop

c00104fc <VgaText::getCursorX()>:
c00104fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010500:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010503:	c3                   	ret    

c0010504 <VgaText::getCursorY()>:
c0010504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010508:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001050b:	c3                   	ret    

c001050c <VgaText::setCursor(int, int)>:
c001050c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010514:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010517:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001051b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001051e:	e9 bb fd ff ff       	jmp    c00102de <VgaText::updateCursor()>
c0010523:	90                   	nop

c0010524 <VgaText::setCursorX(int)>:
c0010524:	83 ec 10             	sub    esp,0x10
c0010527:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001052b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001052e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010532:	50                   	push   eax
c0010533:	e8 d4 ff ff ff       	call   c001050c <VgaText::setCursor(int, int)>
c0010538:	83 c4 1c             	add    esp,0x1c
c001053b:	c3                   	ret    

c001053c <VgaText::setCursorY(int)>:
c001053c:	83 ec 10             	sub    esp,0x10
c001053f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010543:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010547:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001054a:	50                   	push   eax
c001054b:	e8 bc ff ff ff       	call   c001050c <VgaText::setCursor(int, int)>
c0010550:	83 c4 1c             	add    esp,0x1c
c0010553:	c3                   	ret    

c0010554 <VgaText::incrementCursor(bool)>:
c0010554:	56                   	push   esi
c0010555:	53                   	push   ebx
c0010556:	51                   	push   ecx
c0010557:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001055b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001055f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010562:	40                   	inc    eax
c0010563:	83 f8 50             	cmp    eax,0x50
c0010566:	74 05                	je     c001056d <VgaText::incrementCursor(bool)+0x19>
c0010568:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001056b:	eb 24                	jmp    c0010591 <VgaText::incrementCursor(bool)+0x3d>
c001056d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010570:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010577:	8d 50 01             	lea    edx,[eax+0x1]
c001057a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001057d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010580:	75 0f                	jne    c0010591 <VgaText::incrementCursor(bool)+0x3d>
c0010582:	83 ec 0c             	sub    esp,0xc
c0010585:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010588:	53                   	push   ebx
c0010589:	e8 6c fe ff ff       	call   c00103fa <VgaText::scrollScreen()>
c001058e:	83 c4 10             	add    esp,0x10
c0010591:	89 f0                	mov    eax,esi
c0010593:	84 c0                	test   al,al
c0010595:	74 0c                	je     c00105a3 <VgaText::incrementCursor(bool)+0x4f>
c0010597:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001059b:	5a                   	pop    edx
c001059c:	5b                   	pop    ebx
c001059d:	5e                   	pop    esi
c001059e:	e9 3b fd ff ff       	jmp    c00102de <VgaText::updateCursor()>
c00105a3:	58                   	pop    eax
c00105a4:	5b                   	pop    ebx
c00105a5:	5e                   	pop    esi
c00105a6:	c3                   	ret    
c00105a7:	90                   	nop

c00105a8 <VgaText::updateRAMUsageDisplay(int)>:
c00105a8:	56                   	push   esi
c00105a9:	8b 35 e0 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e0e0
c00105af:	53                   	push   ebx
c00105b0:	bb 0a 00 00 00       	mov    ebx,0xa
c00105b5:	6a 0f                	push   0xf
c00105b7:	6a 00                	push   0x0
c00105b9:	e8 2a fe ff ff       	call   c00103e8 <VgaText::combineColours(unsigned char, unsigned char)>
c00105be:	5a                   	pop    edx
c00105bf:	59                   	pop    ecx
c00105c0:	0f b6 c8             	movzx  ecx,al
c00105c3:	51                   	push   ecx
c00105c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c8:	99                   	cdq    
c00105c9:	f7 fb                	idiv   ebx
c00105cb:	89 d3                	mov    ebx,edx
c00105cd:	83 c0 30             	add    eax,0x30
c00105d0:	83 c3 30             	add    ebx,0x30
c00105d3:	0f be c0             	movsx  eax,al
c00105d6:	0f b6 db             	movzx  ebx,bl
c00105d9:	50                   	push   eax
c00105da:	e8 af fe ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c00105df:	5a                   	pop    edx
c00105e0:	5a                   	pop    edx
c00105e1:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00105e8:	51                   	push   ecx
c00105e9:	53                   	push   ebx
c00105ea:	e8 9f fe ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c00105ef:	5b                   	pop    ebx
c00105f0:	5a                   	pop    edx
c00105f1:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00105f8:	51                   	push   ecx
c00105f9:	6a 25                	push   0x25
c00105fb:	e8 8e fe ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c0010600:	59                   	pop    ecx
c0010601:	5b                   	pop    ebx
c0010602:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010609:	5b                   	pop    ebx
c001060a:	5e                   	pop    esi
c001060b:	c3                   	ret    

c001060c <VgaText::updateDiskUsage()>:
c001060c:	55                   	push   ebp
c001060d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010612:	57                   	push   edi
c0010613:	8b 3d e0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0e0
c0010619:	56                   	push   esi
c001061a:	53                   	push   ebx
c001061b:	6a 0f                	push   0xf
c001061d:	6a 00                	push   0x0
c001061f:	e8 c4 fd ff ff       	call   c00103e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010624:	5a                   	pop    edx
c0010625:	0f b6 d8             	movzx  ebx,al
c0010628:	59                   	pop    ecx
c0010629:	8b 35 18 35 03 c0    	mov    esi,DWORD PTR ds:0xc0033518
c001062f:	53                   	push   ebx
c0010630:	b9 0a 00 00 00       	mov    ecx,0xa
c0010635:	89 f0                	mov    eax,esi
c0010637:	99                   	cdq    
c0010638:	f7 fd                	idiv   ebp
c001063a:	99                   	cdq    
c001063b:	f7 f9                	idiv   ecx
c001063d:	8d 42 30             	lea    eax,[edx+0x30]
c0010640:	0f b6 c0             	movzx  eax,al
c0010643:	50                   	push   eax
c0010644:	e8 45 fe ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	5d                   	pop    ebp
c001064a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001064f:	5a                   	pop    edx
c0010650:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010654:	53                   	push   ebx
c0010655:	89 f0                	mov    eax,esi
c0010657:	99                   	cdq    
c0010658:	f7 fd                	idiv   ebp
c001065a:	99                   	cdq    
c001065b:	f7 f9                	idiv   ecx
c001065d:	8d 42 30             	lea    eax,[edx+0x30]
c0010660:	0f b6 c0             	movzx  eax,al
c0010663:	50                   	push   eax
c0010664:	e8 25 fe ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c0010669:	5d                   	pop    ebp
c001066a:	bd 64 00 00 00       	mov    ebp,0x64
c001066f:	5a                   	pop    edx
c0010670:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010677:	53                   	push   ebx
c0010678:	89 f0                	mov    eax,esi
c001067a:	99                   	cdq    
c001067b:	f7 fd                	idiv   ebp
c001067d:	99                   	cdq    
c001067e:	f7 f9                	idiv   ecx
c0010680:	8d 42 30             	lea    eax,[edx+0x30]
c0010683:	0f b6 c0             	movzx  eax,al
c0010686:	50                   	push   eax
c0010687:	e8 02 fe ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c001068c:	5d                   	pop    ebp
c001068d:	5a                   	pop    edx
c001068e:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010695:	53                   	push   ebx
c0010696:	89 f0                	mov    eax,esi
c0010698:	99                   	cdq    
c0010699:	f7 f9                	idiv   ecx
c001069b:	89 d6                	mov    esi,edx
c001069d:	99                   	cdq    
c001069e:	f7 f9                	idiv   ecx
c00106a0:	8d 42 30             	lea    eax,[edx+0x30]
c00106a3:	0f b6 c0             	movzx  eax,al
c00106a6:	50                   	push   eax
c00106a7:	e8 e2 fd ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c00106ac:	5d                   	pop    ebp
c00106ad:	5a                   	pop    edx
c00106ae:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00106b5:	53                   	push   ebx
c00106b6:	8d 46 30             	lea    eax,[esi+0x30]
c00106b9:	0f b6 f0             	movzx  esi,al
c00106bc:	56                   	push   esi
c00106bd:	e8 cc fd ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c00106c2:	5e                   	pop    esi
c00106c3:	8b 35 14 35 03 c0    	mov    esi,DWORD PTR ds:0xc0033514
c00106c9:	5d                   	pop    ebp
c00106ca:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00106d1:	bd 10 27 00 00       	mov    ebp,0x2710
c00106d6:	53                   	push   ebx
c00106d7:	89 f0                	mov    eax,esi
c00106d9:	99                   	cdq    
c00106da:	f7 fd                	idiv   ebp
c00106dc:	99                   	cdq    
c00106dd:	f7 f9                	idiv   ecx
c00106df:	8d 42 30             	lea    eax,[edx+0x30]
c00106e2:	0f b6 c0             	movzx  eax,al
c00106e5:	50                   	push   eax
c00106e6:	e8 a3 fd ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c00106eb:	5a                   	pop    edx
c00106ec:	5d                   	pop    ebp
c00106ed:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00106f4:	bd e8 03 00 00       	mov    ebp,0x3e8
c00106f9:	53                   	push   ebx
c00106fa:	89 f0                	mov    eax,esi
c00106fc:	99                   	cdq    
c00106fd:	f7 fd                	idiv   ebp
c00106ff:	99                   	cdq    
c0010700:	f7 f9                	idiv   ecx
c0010702:	8d 42 30             	lea    eax,[edx+0x30]
c0010705:	0f b6 c0             	movzx  eax,al
c0010708:	50                   	push   eax
c0010709:	e8 80 fd ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c001070e:	5a                   	pop    edx
c001070f:	5d                   	pop    ebp
c0010710:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010717:	bd 64 00 00 00       	mov    ebp,0x64
c001071c:	53                   	push   ebx
c001071d:	89 f0                	mov    eax,esi
c001071f:	99                   	cdq    
c0010720:	f7 fd                	idiv   ebp
c0010722:	99                   	cdq    
c0010723:	f7 f9                	idiv   ecx
c0010725:	83 c2 30             	add    edx,0x30
c0010728:	0f b6 d2             	movzx  edx,dl
c001072b:	52                   	push   edx
c001072c:	e8 5d fd ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c0010731:	5a                   	pop    edx
c0010732:	5d                   	pop    ebp
c0010733:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c001073a:	53                   	push   ebx
c001073b:	89 f0                	mov    eax,esi
c001073d:	99                   	cdq    
c001073e:	f7 f9                	idiv   ecx
c0010740:	89 d6                	mov    esi,edx
c0010742:	99                   	cdq    
c0010743:	f7 f9                	idiv   ecx
c0010745:	8d 42 30             	lea    eax,[edx+0x30]
c0010748:	0f b6 c0             	movzx  eax,al
c001074b:	50                   	push   eax
c001074c:	e8 3d fd ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c0010751:	5a                   	pop    edx
c0010752:	59                   	pop    ecx
c0010753:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c001075a:	53                   	push   ebx
c001075b:	8d 46 30             	lea    eax,[esi+0x30]
c001075e:	0f b6 f0             	movzx  esi,al
c0010761:	56                   	push   esi
c0010762:	e8 27 fd ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c0010767:	5b                   	pop    ebx
c0010768:	5e                   	pop    esi
c0010769:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010770:	5b                   	pop    ebx
c0010771:	5e                   	pop    esi
c0010772:	5f                   	pop    edi
c0010773:	5d                   	pop    ebp
c0010774:	c3                   	ret    
c0010775:	90                   	nop

c0010776 <VgaText::updateTitle()>:
c0010776:	53                   	push   ebx
c0010777:	31 c0                	xor    eax,eax
c0010779:	83 ec 58             	sub    esp,0x58
c001077c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010780:	89 e1                	mov    ecx,esp
c0010782:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010786:	40                   	inc    eax
c0010787:	83 f8 50             	cmp    eax,0x50
c001078a:	75 f6                	jne    c0010782 <VgaText::updateTitle()+0xc>
c001078c:	31 c0                	xor    eax,eax
c001078e:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010795:	84 db                	test   bl,bl
c0010797:	74 06                	je     c001079f <VgaText::updateTitle()+0x29>
c0010799:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001079c:	40                   	inc    eax
c001079d:	eb ef                	jmp    c001078e <VgaText::updateTitle()+0x18>
c001079f:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00107a2:	85 c0                	test   eax,eax
c00107a4:	74 09                	je     c00107af <VgaText::updateTitle()+0x39>
c00107a6:	53                   	push   ebx
c00107a7:	53                   	push   ebx
c00107a8:	51                   	push   ecx
c00107a9:	52                   	push   edx
c00107aa:	ff d0                	call   eax
c00107ac:	83 c4 10             	add    esp,0x10
c00107af:	e8 58 fe ff ff       	call   c001060c <VgaText::updateDiskUsage()>
c00107b4:	83 c4 58             	add    esp,0x58
c00107b7:	5b                   	pop    ebx
c00107b8:	c3                   	ret    
c00107b9:	90                   	nop

c00107ba <VgaText::setTitleTextColour(VgaColour)>:
c00107ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107c2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00107c5:	eb af                	jmp    c0010776 <VgaText::updateTitle()>
c00107c7:	90                   	nop

c00107c8 <VgaText::setTitleColour(VgaColour)>:
c00107c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00107d3:	eb a1                	jmp    c0010776 <VgaText::updateTitle()>
c00107d5:	90                   	nop

c00107d6 <VgaText::setTitle(char*)>:
c00107d6:	53                   	push   ebx
c00107d7:	83 ec 10             	sub    esp,0x10
c00107da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107e2:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00107e8:	50                   	push   eax
c00107e9:	e8 1e 00 ff ff       	call   c000080c <strcpy>
c00107ee:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107f2:	83 c4 18             	add    esp,0x18
c00107f5:	5b                   	pop    ebx
c00107f6:	e9 7b ff ff ff       	jmp    c0010776 <VgaText::updateTitle()>
c00107fb:	90                   	nop

c00107fc <VgaText::decrementCursor(bool)>:
c00107fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010800:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010804:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010807:	85 c0                	test   eax,eax
c0010809:	74 04                	je     c001080f <VgaText::decrementCursor(bool)+0x13>
c001080b:	48                   	dec    eax
c001080c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001080f:	84 c9                	test   cl,cl
c0010811:	74 09                	je     c001081c <VgaText::decrementCursor(bool)+0x20>
c0010813:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010817:	e9 c2 fa ff ff       	jmp    c00102de <VgaText::updateCursor()>
c001081c:	c3                   	ret    
c001081d:	90                   	nop

c001081e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001081e:	53                   	push   ebx
c001081f:	83 ec 08             	sub    esp,0x8
c0010822:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010826:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001082a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001082e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010832:	3c 07                	cmp    al,0x7
c0010834:	75 2a                	jne    c0010860 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010836:	a1 38 f3 02 c0       	mov    eax,ds:0xc002f338
c001083b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010843:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001084b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010853:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010857:	83 c4 08             	add    esp,0x8
c001085a:	5b                   	pop    ebx
c001085b:	e9 b4 30 00 00       	jmp    c0013914 <Buzzer::beep(int, int, bool)>
c0010860:	3c 0d                	cmp    al,0xd
c0010862:	75 09                	jne    c001086d <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010864:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001086b:	eb 2c                	jmp    c0010899 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c001086d:	3c 0a                	cmp    al,0xa
c001086f:	75 31                	jne    c00108a2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010871:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010874:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001087b:	8d 50 01             	lea    edx,[eax+0x1]
c001087e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010881:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010884:	75 0f                	jne    c0010895 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010886:	83 ec 0c             	sub    esp,0xc
c0010889:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001088c:	53                   	push   ebx
c001088d:	e8 68 fb ff ff       	call   c00103fa <VgaText::scrollScreen()>
c0010892:	83 c4 10             	add    esp,0x10
c0010895:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010899:	83 c4 08             	add    esp,0x8
c001089c:	5b                   	pop    ebx
c001089d:	e9 3c fa ff ff       	jmp    c00102de <VgaText::updateCursor()>
c00108a2:	3c 08                	cmp    al,0x8
c00108a4:	75 25                	jne    c00108cb <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00108a6:	50                   	push   eax
c00108a7:	50                   	push   eax
c00108a8:	6a 01                	push   0x1
c00108aa:	53                   	push   ebx
c00108ab:	e8 4c ff ff ff       	call   c00107fc <VgaText::decrementCursor(bool)>
c00108b0:	5a                   	pop    edx
c00108b1:	59                   	pop    ecx
c00108b2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108b5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00108bb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108be:	6a 20                	push   0x20
c00108c0:	53                   	push   ebx
c00108c1:	e8 da fb ff ff       	call   c00104a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108c6:	83 c4 28             	add    esp,0x28
c00108c9:	5b                   	pop    ebx
c00108ca:	c3                   	ret    
c00108cb:	83 ec 08             	sub    esp,0x8
c00108ce:	0f be c0             	movsx  eax,al
c00108d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108d4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108d7:	51                   	push   ecx
c00108d8:	52                   	push   edx
c00108d9:	50                   	push   eax
c00108da:	53                   	push   ebx
c00108db:	e8 c0 fb ff ff       	call   c00104a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108e0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00108e4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00108ec:	83 c4 28             	add    esp,0x28
c00108ef:	5b                   	pop    ebx
c00108f0:	e9 5f fc ff ff       	jmp    c0010554 <VgaText::incrementCursor(bool)>
c00108f5:	90                   	nop

c00108f6 <VgaText::isShowingCursor()>:
c00108f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108fa:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00108fd:	c3                   	ret    

c00108fe <VgaText::isBlinkDisabled()>:
c00108fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010902:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010905:	83 f0 01             	xor    eax,0x1
c0010908:	c3                   	ret    
c0010909:	90                   	nop

c001090a <VgaText::setCursorHeight(int)>:
c001090a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010912:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010915:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010919:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001091d:	e9 d2 f9 ff ff       	jmp    c00102f4 <VgaText::showCursor(bool)>

c0010922 <VgaText::getCursorHeight()>:
c0010922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010926:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010929:	c3                   	ret    

c001092a <setActiveTerminal(VgaText*)>:
c001092a:	53                   	push   ebx
c001092b:	83 ec 08             	sub    esp,0x8
c001092e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010932:	85 db                	test   ebx,ebx
c0010934:	75 11                	jne    c0010947 <setActiveTerminal(VgaText*)+0x1d>
c0010936:	c7 44 24 10 4c af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af4c
c001093e:	83 c4 08             	add    esp,0x8
c0010941:	5b                   	pop    ebx
c0010942:	e9 50 9d 00 00       	jmp    c001a697 <Krnl::panic(char const*)>
c0010947:	50                   	push   eax
c0010948:	50                   	push   eax
c0010949:	53                   	push   ebx
c001094a:	68 5a af 02 c0       	push   0xc002af5a
c001094f:	e8 b3 21 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0010954:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c0010959:	83 c4 10             	add    esp,0x10
c001095c:	85 c0                	test   eax,eax
c001095e:	74 0c                	je     c001096c <setActiveTerminal(VgaText*)+0x42>
c0010960:	83 ec 0c             	sub    esp,0xc
c0010963:	50                   	push   eax
c0010964:	e8 75 f9 ff ff       	call   c00102de <VgaText::updateCursor()>
c0010969:	83 c4 10             	add    esp,0x10
c001096c:	89 1d 84 f2 02 c0    	mov    DWORD PTR ds:0xc002f284,ebx
c0010972:	51                   	push   ecx
c0010973:	51                   	push   ecx
c0010974:	53                   	push   ebx
c0010975:	68 72 af 02 c0       	push   0xc002af72
c001097a:	e8 88 21 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001097f:	83 c4 0c             	add    esp,0xc
c0010982:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010985:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010988:	53                   	push   ebx
c0010989:	e8 7e fb ff ff       	call   c001050c <VgaText::setCursor(int, int)>
c001098e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010991:	e8 68 ff ff ff       	call   c00108fe <VgaText::isBlinkDisabled()>
c0010996:	5a                   	pop    edx
c0010997:	0f b6 c0             	movzx  eax,al
c001099a:	59                   	pop    ecx
c001099b:	50                   	push   eax
c001099c:	53                   	push   ebx
c001099d:	e8 5e f9 ff ff       	call   c0010300 <VgaText::disableBlink(bool)>
c00109a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109a5:	e8 78 ff ff ff       	call   c0010922 <VgaText::getCursorHeight()>
c00109aa:	5a                   	pop    edx
c00109ab:	59                   	pop    ecx
c00109ac:	50                   	push   eax
c00109ad:	53                   	push   ebx
c00109ae:	e8 57 ff ff ff       	call   c001090a <VgaText::setCursorHeight(int)>
c00109b3:	83 c4 10             	add    esp,0x10
c00109b6:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00109ba:	75 07                	jne    c00109c3 <setActiveTerminal(VgaText*)+0x99>
c00109bc:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00109c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109c7:	83 c4 08             	add    esp,0x8
c00109ca:	5b                   	pop    ebx
c00109cb:	e9 c0 f8 ff ff       	jmp    c0010290 <VgaText::load()>

c00109d0 <doTerminalCycle()>:
c00109d0:	83 ec 18             	sub    esp,0x18
c00109d3:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c00109d8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109db:	50                   	push   eax
c00109dc:	a3 80 f2 02 c0       	mov    ds:0xc002f280,eax
c00109e1:	e8 44 ff ff ff       	call   c001092a <setActiveTerminal(VgaText*)>
c00109e6:	83 c4 1c             	add    esp,0x1c
c00109e9:	c3                   	ret    

c00109ea <VgaText::doUpdate()>:
c00109ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109ee:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00109f1:	85 c0                	test   eax,eax
c00109f3:	74 02                	je     c00109f7 <VgaText::doUpdate()+0xd>
c00109f5:	ff e0                	jmp    eax
c00109f7:	c3                   	ret    

c00109f8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00109f8:	55                   	push   ebp
c00109f9:	31 ed                	xor    ebp,ebp
c00109fb:	57                   	push   edi
c00109fc:	56                   	push   esi
c00109fd:	53                   	push   ebx
c00109fe:	83 ec 1c             	sub    esp,0x1c
c0010a01:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010a05:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a0a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010a11:	50                   	push   eax
c0010a12:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a17:	50                   	push   eax
c0010a18:	e8 cb f9 ff ff       	call   c00103e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a1d:	59                   	pop    ecx
c0010a1e:	0f b6 c0             	movzx  eax,al
c0010a21:	5e                   	pop    esi
c0010a22:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a27:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010a2b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a32:	0f b7 f6             	movzx  esi,si
c0010a35:	01 f6                	add    esi,esi
c0010a37:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a3a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010a3d:	84 c0                	test   al,al
c0010a3f:	0f 84 fd 00 00 00    	je     c0010b42 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010a45:	3c 0d                	cmp    al,0xd
c0010a47:	75 0c                	jne    c0010a55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010a49:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010a50:	e9 e7 00 00 00       	jmp    c0010b3c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a55:	3c 0a                	cmp    al,0xa
c0010a57:	75 47                	jne    c0010aa0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010a59:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010a5c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010a63:	8d 48 01             	lea    ecx,[eax+0x1]
c0010a66:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010a69:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010a6c:	75 0f                	jne    c0010a7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010a6e:	83 ec 0c             	sub    esp,0xc
c0010a71:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010a74:	53                   	push   ebx
c0010a75:	e8 80 f9 ff ff       	call   c00103fa <VgaText::scrollScreen()>
c0010a7a:	83 c4 10             	add    esp,0x10
c0010a7d:	83 ec 0c             	sub    esp,0xc
c0010a80:	31 ed                	xor    ebp,ebp
c0010a82:	53                   	push   ebx
c0010a83:	e8 56 f8 ff ff       	call   c00102de <VgaText::updateCursor()>
c0010a88:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a8d:	83 c4 10             	add    esp,0x10
c0010a90:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a93:	0f b7 f6             	movzx  esi,si
c0010a96:	01 f6                	add    esi,esi
c0010a98:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a9b:	e9 9c 00 00 00       	jmp    c0010b3c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010aa0:	3c 08                	cmp    al,0x8
c0010aa2:	75 35                	jne    c0010ad9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010aa4:	56                   	push   esi
c0010aa5:	56                   	push   esi
c0010aa6:	6a 01                	push   0x1
c0010aa8:	53                   	push   ebx
c0010aa9:	e8 4e fd ff ff       	call   c00107fc <VgaText::decrementCursor(bool)>
c0010aae:	58                   	pop    eax
c0010aaf:	5a                   	pop    edx
c0010ab0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ab3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ab6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ab9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010abc:	6a 20                	push   0x20
c0010abe:	53                   	push   ebx
c0010abf:	e8 dc f9 ff ff       	call   c00104a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ac4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010ac9:	83 c4 20             	add    esp,0x20
c0010acc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010acf:	0f b7 f6             	movzx  esi,si
c0010ad2:	01 f6                	add    esi,esi
c0010ad4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010ad7:	eb 63                	jmp    c0010b3c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010ad9:	51                   	push   ecx
c0010ada:	51                   	push   ecx
c0010adb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010adf:	50                   	push   eax
c0010ae0:	e8 a9 f9 ff ff       	call   c001048e <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae5:	83 c4 10             	add    esp,0x10
c0010ae8:	66 89 06             	mov    WORD PTR [esi],ax
c0010aeb:	39 1d 84 f2 02 c0    	cmp    DWORD PTR ds:0xc002f284,ebx
c0010af1:	75 21                	jne    c0010b14 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010af3:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010af6:	85 c0                	test   eax,eax
c0010af8:	74 1a                	je     c0010b14 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010afa:	52                   	push   edx
c0010afb:	52                   	push   edx
c0010afc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010aff:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010b02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b0a:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010b0d:	51                   	push   ecx
c0010b0e:	53                   	push   ebx
c0010b0f:	ff d0                	call   eax
c0010b11:	83 c4 20             	add    esp,0x20
c0010b14:	83 c6 02             	add    esi,0x2
c0010b17:	50                   	push   eax
c0010b18:	50                   	push   eax
c0010b19:	6a 00                	push   0x0
c0010b1b:	53                   	push   ebx
c0010b1c:	e8 33 fa ff ff       	call   c0010554 <VgaText::incrementCursor(bool)>
c0010b21:	83 c4 10             	add    esp,0x10
c0010b24:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010b28:	75 0d                	jne    c0010b37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010b2a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010b2f:	0f b7 f6             	movzx  esi,si
c0010b32:	01 f6                	add    esi,esi
c0010b34:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010b37:	bd 01 00 00 00       	mov    ebp,0x1
c0010b3c:	47                   	inc    edi
c0010b3d:	e9 f8 fe ff ff       	jmp    c0010a3a <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010b42:	83 ec 0c             	sub    esp,0xc
c0010b45:	53                   	push   ebx
c0010b46:	e8 93 f7 ff ff       	call   c00102de <VgaText::updateCursor()>
c0010b4b:	83 c4 10             	add    esp,0x10
c0010b4e:	89 e8                	mov    eax,ebp
c0010b50:	84 c0                	test   al,al
c0010b52:	74 0c                	je     c0010b60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010b54:	83 ec 0c             	sub    esp,0xc
c0010b57:	53                   	push   ebx
c0010b58:	e8 8d fe ff ff       	call   c00109ea <VgaText::doUpdate()>
c0010b5d:	83 c4 10             	add    esp,0x10
c0010b60:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010b67:	83 c4 1c             	add    esp,0x1c
c0010b6a:	5b                   	pop    ebx
c0010b6b:	5e                   	pop    esi
c0010b6c:	5f                   	pop    edi
c0010b6d:	5d                   	pop    ebp
c0010b6e:	c3                   	ret    
c0010b6f:	90                   	nop

c0010b70 <VgaText::clearScreen()>:
c0010b70:	57                   	push   edi
c0010b71:	56                   	push   esi
c0010b72:	31 f6                	xor    esi,esi
c0010b74:	53                   	push   ebx
c0010b75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b79:	52                   	push   edx
c0010b7a:	6a 00                	push   0x0
c0010b7c:	6a 00                	push   0x0
c0010b7e:	53                   	push   ebx
c0010b7f:	e8 88 f9 ff ff       	call   c001050c <VgaText::setCursor(int, int)>
c0010b84:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010b8b:	83 c4 10             	add    esp,0x10
c0010b8e:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010b91:	7e 20                	jle    c0010bb3 <VgaText::clearScreen()+0x43>
c0010b93:	31 ff                	xor    edi,edi
c0010b95:	50                   	push   eax
c0010b96:	50                   	push   eax
c0010b97:	56                   	push   esi
c0010b98:	57                   	push   edi
c0010b99:	47                   	inc    edi
c0010b9a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010b9d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ba0:	6a 20                	push   0x20
c0010ba2:	53                   	push   ebx
c0010ba3:	e8 f8 f8 ff ff       	call   c00104a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ba8:	83 c4 20             	add    esp,0x20
c0010bab:	83 ff 50             	cmp    edi,0x50
c0010bae:	75 e5                	jne    c0010b95 <VgaText::clearScreen()+0x25>
c0010bb0:	46                   	inc    esi
c0010bb1:	eb db                	jmp    c0010b8e <VgaText::clearScreen()+0x1e>
c0010bb3:	83 ec 0c             	sub    esp,0xc
c0010bb6:	53                   	push   ebx
c0010bb7:	e8 2e fe ff ff       	call   c00109ea <VgaText::doUpdate()>
c0010bbc:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010bc3:	83 c4 10             	add    esp,0x10
c0010bc6:	5b                   	pop    ebx
c0010bc7:	5e                   	pop    esi
c0010bc8:	5f                   	pop    edi
c0010bc9:	c3                   	ret    

c0010bca <VgaText::putchar(char)>:
c0010bca:	56                   	push   esi
c0010bcb:	53                   	push   ebx
c0010bcc:	83 ec 14             	sub    esp,0x14
c0010bcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010bd3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bd7:	3c 5b                	cmp    al,0x5b
c0010bd9:	75 18                	jne    c0010bf3 <VgaText::putchar(char)+0x29>
c0010bdb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010bdf:	74 1f                	je     c0010c00 <VgaText::putchar(char)+0x36>
c0010be1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010be7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010bee:	e9 bd 00 00 00       	jmp    c0010cb0 <VgaText::putchar(char)+0xe6>
c0010bf3:	3c 1b                	cmp    al,0x1b
c0010bf5:	75 09                	jne    c0010c00 <VgaText::putchar(char)+0x36>
c0010bf7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010bfb:	e9 b0 00 00 00       	jmp    c0010cb0 <VgaText::putchar(char)+0xe6>
c0010c00:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010c03:	84 c9                	test   cl,cl
c0010c05:	0f 84 92 00 00 00    	je     c0010c9d <VgaText::putchar(char)+0xd3>
c0010c0b:	8d 50 c0             	lea    edx,[eax-0x40]
c0010c0e:	80 fa 3e             	cmp    dl,0x3e
c0010c11:	77 76                	ja     c0010c89 <VgaText::putchar(char)+0xbf>
c0010c13:	3c 6d                	cmp    al,0x6d
c0010c15:	75 47                	jne    c0010c5e <VgaText::putchar(char)+0x94>
c0010c17:	31 f6                	xor    esi,esi
c0010c19:	31 d2                	xor    edx,edx
c0010c1b:	31 c0                	xor    eax,eax
c0010c1d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010c20:	7e 2d                	jle    c0010c4f <VgaText::putchar(char)+0x85>
c0010c22:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010c27:	80 fa 3b             	cmp    dl,0x3b
c0010c2a:	75 17                	jne    c0010c43 <VgaText::putchar(char)+0x79>
c0010c2c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c30:	50                   	push   eax
c0010c31:	53                   	push   ebx
c0010c32:	e8 fd f6 ff ff       	call   c0010334 <VgaText::doANSI_SGR(int)>
c0010c37:	59                   	pop    ecx
c0010c38:	31 d2                	xor    edx,edx
c0010c3a:	58                   	pop    eax
c0010c3b:	31 c0                	xor    eax,eax
c0010c3d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010c41:	eb 09                	jmp    c0010c4c <VgaText::putchar(char)+0x82>
c0010c43:	6b c0 0a             	imul   eax,eax,0xa
c0010c46:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010c4a:	88 ca                	mov    dl,cl
c0010c4c:	46                   	inc    esi
c0010c4d:	eb ce                	jmp    c0010c1d <VgaText::putchar(char)+0x53>
c0010c4f:	84 d2                	test   dl,dl
c0010c51:	74 2e                	je     c0010c81 <VgaText::putchar(char)+0xb7>
c0010c53:	50                   	push   eax
c0010c54:	53                   	push   ebx
c0010c55:	e8 da f6 ff ff       	call   c0010334 <VgaText::doANSI_SGR(int)>
c0010c5a:	58                   	pop    eax
c0010c5b:	5a                   	pop    edx
c0010c5c:	eb 23                	jmp    c0010c81 <VgaText::putchar(char)+0xb7>
c0010c5e:	3c 4a                	cmp    al,0x4a
c0010c60:	75 1f                	jne    c0010c81 <VgaText::putchar(char)+0xb7>
c0010c62:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010c66:	75 19                	jne    c0010c81 <VgaText::putchar(char)+0xb7>
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	53                   	push   ebx
c0010c6c:	e8 ff fe ff ff       	call   c0010b70 <VgaText::clearScreen()>
c0010c71:	83 c4 0c             	add    esp,0xc
c0010c74:	6a 00                	push   0x0
c0010c76:	6a 00                	push   0x0
c0010c78:	53                   	push   ebx
c0010c79:	e8 8e f8 ff ff       	call   c001050c <VgaText::setCursor(int, int)>
c0010c7e:	83 c4 10             	add    esp,0x10
c0010c81:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010c87:	eb 27                	jmp    c0010cb0 <VgaText::putchar(char)+0xe6>
c0010c89:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010c8c:	83 fa 0e             	cmp    edx,0xe
c0010c8f:	7f 1f                	jg     c0010cb0 <VgaText::putchar(char)+0xe6>
c0010c91:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c94:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010c97:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010c9b:	eb 13                	jmp    c0010cb0 <VgaText::putchar(char)+0xe6>
c0010c9d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ca0:	0f be c0             	movsx  eax,al
c0010ca3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ca6:	50                   	push   eax
c0010ca7:	53                   	push   ebx
c0010ca8:	e8 71 fb ff ff       	call   c001081e <VgaText::putchar(char, VgaColour, VgaColour)>
c0010cad:	83 c4 10             	add    esp,0x10
c0010cb0:	83 c4 14             	add    esp,0x14
c0010cb3:	5b                   	pop    ebx
c0010cb4:	5e                   	pop    esi
c0010cb5:	c3                   	ret    

c0010cb6 <VgaText::puts(char const*)>:
c0010cb6:	53                   	push   ebx
c0010cb7:	83 ec 08             	sub    esp,0x8
c0010cba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010cbe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010cc1:	84 c0                	test   al,al
c0010cc3:	74 12                	je     c0010cd7 <VgaText::puts(char const*)+0x21>
c0010cc5:	43                   	inc    ebx
c0010cc6:	51                   	push   ecx
c0010cc7:	51                   	push   ecx
c0010cc8:	50                   	push   eax
c0010cc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ccd:	e8 f8 fe ff ff       	call   c0010bca <VgaText::putchar(char)>
c0010cd2:	83 c4 10             	add    esp,0x10
c0010cd5:	eb e7                	jmp    c0010cbe <VgaText::puts(char const*)+0x8>
c0010cd7:	83 c4 08             	add    esp,0x8
c0010cda:	5b                   	pop    ebx
c0010cdb:	c3                   	ret    

c0010cdc <VgaText::putx(unsigned int)>:
c0010cdc:	57                   	push   edi
c0010cdd:	b9 11 00 00 00       	mov    ecx,0x11
c0010ce2:	56                   	push   esi
c0010ce3:	be 8e af 02 c0       	mov    esi,0xc002af8e
c0010ce8:	53                   	push   ebx
c0010ce9:	83 ec 20             	sub    esp,0x20
c0010cec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010cf0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010cf4:	fc                   	cld    
c0010cf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cf7:	be 08 00 00 00       	mov    esi,0x8
c0010cfc:	50                   	push   eax
c0010cfd:	50                   	push   eax
c0010cfe:	89 d8                	mov    eax,ebx
c0010d00:	c1 e3 04             	shl    ebx,0x4
c0010d03:	c1 e8 1c             	shr    eax,0x1c
c0010d06:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010d0b:	50                   	push   eax
c0010d0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d10:	e8 b5 fe ff ff       	call   c0010bca <VgaText::putchar(char)>
c0010d15:	83 c4 10             	add    esp,0x10
c0010d18:	4e                   	dec    esi
c0010d19:	75 e1                	jne    c0010cfc <VgaText::putx(unsigned int)+0x20>
c0010d1b:	83 c4 20             	add    esp,0x20
c0010d1e:	5b                   	pop    ebx
c0010d1f:	5e                   	pop    esi
c0010d20:	5f                   	pop    edi
c0010d21:	c3                   	ret    

c0010d22 <VgaText::VgaText(char const*)>:
c0010d22:	57                   	push   edi
c0010d23:	56                   	push   esi
c0010d24:	53                   	push   ebx
c0010d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d29:	83 ec 08             	sub    esp,0x8
c0010d2c:	6a 00                	push   0x0
c0010d2e:	50                   	push   eax
c0010d2f:	e8 8a 05 00 00       	call   c00112be <UnixFile::UnixFile(int)>
c0010d34:	83 c4 10             	add    esp,0x10
c0010d37:	ba f4 af 02 c0       	mov    edx,0xc002aff4
c0010d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d40:	89 10                	mov    DWORD PTR [eax],edx
c0010d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d46:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d51:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d5c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d64:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d6c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d77:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d82:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d98:	8d 50 60             	lea    edx,[eax+0x60]
c0010d9b:	bb 60 f2 02 c0       	mov    ebx,0xc002f260
c0010da0:	b8 08 00 00 00       	mov    eax,0x8
c0010da5:	fc                   	cld    
c0010da6:	89 d7                	mov    edi,edx
c0010da8:	89 de                	mov    esi,ebx
c0010daa:	89 c1                	mov    ecx,eax
c0010dac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010db2:	05 82 00 00 00       	add    eax,0x82
c0010db7:	83 ec 08             	sub    esp,0x8
c0010dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dbe:	50                   	push   eax
c0010dbf:	e8 48 fa fe ff       	call   c000080c <strcpy>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dcb:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010dd2:	83 ec 0c             	sub    esp,0xc
c0010dd5:	6a 01                	push   0x1
c0010dd7:	e8 25 09 00 00       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c0010ddc:	83 c4 10             	add    esp,0x10
c0010ddf:	89 c2                	mov    edx,eax
c0010de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010de8:	8b 1d 30 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f330
c0010dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010df5:	89 c6                	mov    esi,eax
c0010df7:	e8 cc ed ff ff       	call   c000fbc8 <Phys::allocatePage()>
c0010dfc:	6a 05                	push   0x5
c0010dfe:	56                   	push   esi
c0010dff:	50                   	push   eax
c0010e00:	53                   	push   ebx
c0010e01:	e8 32 11 00 00       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010e06:	83 c4 10             	add    esp,0x10
c0010e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e10:	83 ec 04             	sub    esp,0x4
c0010e13:	68 00 0f 00 00       	push   0xf00
c0010e18:	6a 00                	push   0x0
c0010e1a:	50                   	push   eax
c0010e1b:	e8 30 f9 fe ff       	call   c0000750 <memset>
c0010e20:	83 c4 10             	add    esp,0x10
c0010e23:	83 ec 04             	sub    esp,0x4
c0010e26:	6a 00                	push   0x0
c0010e28:	6a 07                	push   0x7
c0010e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e2e:	e8 95 f5 ff ff       	call   c00103c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010e33:	83 c4 10             	add    esp,0x10
c0010e36:	83 ec 08             	sub    esp,0x8
c0010e39:	6a 02                	push   0x2
c0010e3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e3f:	e8 c6 fa ff ff       	call   c001090a <VgaText::setCursorHeight(int)>
c0010e44:	83 c4 10             	add    esp,0x10
c0010e47:	83 ec 04             	sub    esp,0x4
c0010e4a:	6a 00                	push   0x0
c0010e4c:	6a 00                	push   0x0
c0010e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e52:	e8 b5 f6 ff ff       	call   c001050c <VgaText::setCursor(int, int)>
c0010e57:	83 c4 10             	add    esp,0x10
c0010e5a:	83 ec 08             	sub    esp,0x8
c0010e5d:	6a 01                	push   0x1
c0010e5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e63:	e8 8c f4 ff ff       	call   c00102f4 <VgaText::showCursor(bool)>
c0010e68:	83 c4 10             	add    esp,0x10
c0010e6b:	83 ec 08             	sub    esp,0x8
c0010e6e:	6a 01                	push   0x1
c0010e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e74:	e8 87 f4 ff ff       	call   c0010300 <VgaText::disableBlink(bool)>
c0010e79:	83 c4 10             	add    esp,0x10
c0010e7c:	83 ec 0c             	sub    esp,0xc
c0010e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e83:	e8 e8 fc ff ff       	call   c0010b70 <VgaText::clearScreen()>
c0010e88:	83 c4 10             	add    esp,0x10
c0010e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e8f:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e97:	05 02 01 00 00       	add    eax,0x102
c0010e9c:	83 ec 04             	sub    esp,0x4
c0010e9f:	68 96 00 00 00       	push   0x96
c0010ea4:	6a 00                	push   0x0
c0010ea6:	50                   	push   eax
c0010ea7:	e8 a4 f8 fe ff       	call   c0000750 <memset>
c0010eac:	83 c4 10             	add    esp,0x10
c0010eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eb3:	05 98 01 00 00       	add    eax,0x198
c0010eb8:	83 ec 04             	sub    esp,0x4
c0010ebb:	68 2c 01 00 00       	push   0x12c
c0010ec0:	6a 00                	push   0x0
c0010ec2:	50                   	push   eax
c0010ec3:	e8 88 f8 fe ff       	call   c0000750 <memset>
c0010ec8:	83 c4 10             	add    esp,0x10
c0010ecb:	90                   	nop
c0010ecc:	5b                   	pop    ebx
c0010ecd:	5e                   	pop    esi
c0010ece:	5f                   	pop    edi
c0010ecf:	c3                   	ret    

c0010ed0 <VgaText::receiveKey(unsigned char)>:
c0010ed0:	55                   	push   ebp
c0010ed1:	57                   	push   edi
c0010ed2:	56                   	push   esi
c0010ed3:	53                   	push   ebx
c0010ed4:	83 ec 1c             	sub    esp,0x1c
c0010ed7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010edb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010edf:	84 db                	test   bl,bl
c0010ee1:	0f 84 c9 00 00 00    	je     c0010fb0 <VgaText::receiveKey(unsigned char)+0xe0>
c0010ee7:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010eed:	80 fb 08             	cmp    bl,0x8
c0010ef0:	75 2c                	jne    c0010f1e <VgaText::receiveKey(unsigned char)+0x4e>
c0010ef2:	83 ec 0c             	sub    esp,0xc
c0010ef5:	57                   	push   edi
c0010ef6:	e8 71 f8 fe ff       	call   c000076c <strlen>
c0010efb:	83 c4 10             	add    esp,0x10
c0010efe:	85 c0                	test   eax,eax
c0010f00:	74 41                	je     c0010f43 <VgaText::receiveKey(unsigned char)+0x73>
c0010f02:	50                   	push   eax
c0010f03:	50                   	push   eax
c0010f04:	6a 08                	push   0x8
c0010f06:	56                   	push   esi
c0010f07:	e8 be fc ff ff       	call   c0010bca <VgaText::putchar(char)>
c0010f0c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f0f:	e8 58 f8 fe ff       	call   c000076c <strlen>
c0010f14:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010f1c:	eb 22                	jmp    c0010f40 <VgaText::receiveKey(unsigned char)+0x70>
c0010f1e:	0f be c3             	movsx  eax,bl
c0010f21:	52                   	push   edx
c0010f22:	52                   	push   edx
c0010f23:	50                   	push   eax
c0010f24:	56                   	push   esi
c0010f25:	e8 a0 fc ff ff       	call   c0010bca <VgaText::putchar(char)>
c0010f2a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010f2e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010f33:	59                   	pop    ecx
c0010f34:	5d                   	pop    ebp
c0010f35:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010f39:	50                   	push   eax
c0010f3a:	57                   	push   edi
c0010f3b:	e8 0c fa fe ff       	call   c000094c <strcat>
c0010f40:	83 c4 10             	add    esp,0x10
c0010f43:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010f4a:	75 05                	jne    c0010f51 <VgaText::receiveKey(unsigned char)+0x81>
c0010f4c:	80 fb 0a             	cmp    bl,0xa
c0010f4f:	75 53                	jne    c0010fa4 <VgaText::receiveKey(unsigned char)+0xd4>
c0010f51:	83 ec 0c             	sub    esp,0xc
c0010f54:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010f5a:	53                   	push   ebx
c0010f5b:	e8 0c f8 fe ff       	call   c000076c <strlen>
c0010f60:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f63:	89 c5                	mov    ebp,eax
c0010f65:	e8 02 f8 fe ff       	call   c000076c <strlen>
c0010f6a:	83 c4 10             	add    esp,0x10
c0010f6d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010f71:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010f76:	76 10                	jbe    c0010f88 <VgaText::receiveKey(unsigned char)+0xb8>
c0010f78:	83 ec 0c             	sub    esp,0xc
c0010f7b:	68 9f af 02 c0       	push   0xc002af9f
c0010f80:	e8 12 97 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0010f85:	83 c4 10             	add    esp,0x10
c0010f88:	50                   	push   eax
c0010f89:	50                   	push   eax
c0010f8a:	57                   	push   edi
c0010f8b:	53                   	push   ebx
c0010f8c:	e8 bb f9 fe ff       	call   c000094c <strcat>
c0010f91:	83 c4 0c             	add    esp,0xc
c0010f94:	68 96 00 00 00       	push   0x96
c0010f99:	6a 00                	push   0x0
c0010f9b:	57                   	push   edi
c0010f9c:	e8 af f7 fe ff       	call   c0000750 <memset>
c0010fa1:	83 c4 10             	add    esp,0x10
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	56                   	push   esi
c0010fa8:	e8 3d fa ff ff       	call   c00109ea <VgaText::doUpdate()>
c0010fad:	83 c4 10             	add    esp,0x10
c0010fb0:	83 c4 1c             	add    esp,0x1c
c0010fb3:	5b                   	pop    ebx
c0010fb4:	5e                   	pop    esi
c0010fb5:	5f                   	pop    edi
c0010fb6:	5d                   	pop    ebp
c0010fb7:	c3                   	ret    

c0010fb8 <VgaText::write(unsigned long long, void*, int*)>:
c0010fb8:	55                   	push   ebp
c0010fb9:	57                   	push   edi
c0010fba:	56                   	push   esi
c0010fbb:	53                   	push   ebx
c0010fbc:	83 ec 0c             	sub    esp,0xc
c0010fbf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010fc3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010fc7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010fcb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010fd2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010fd5:	39 eb                	cmp    ebx,ebp
c0010fd7:	74 13                	je     c0010fec <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010fd9:	43                   	inc    ebx
c0010fda:	50                   	push   eax
c0010fdb:	50                   	push   eax
c0010fdc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010fe0:	50                   	push   eax
c0010fe1:	56                   	push   esi
c0010fe2:	e8 e3 fb ff ff       	call   c0010bca <VgaText::putchar(char)>
c0010fe7:	83 c4 10             	add    esp,0x10
c0010fea:	eb e9                	jmp    c0010fd5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010ff6:	56                   	push   esi
c0010ff7:	e8 ee f9 ff ff       	call   c00109ea <VgaText::doUpdate()>
c0010ffc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011000:	89 38                	mov    DWORD PTR [eax],edi
c0011002:	83 c4 1c             	add    esp,0x1c
c0011005:	31 c0                	xor    eax,eax
c0011007:	5b                   	pop    ebx
c0011008:	5e                   	pop    esi
c0011009:	5f                   	pop    edi
c001100a:	5d                   	pop    ebp
c001100b:	c3                   	ret    

c001100c <newTerminal(char*)>:
c001100c:	83 ec 28             	sub    esp,0x28
c001100f:	68 c4 02 00 00       	push   0x2c4
c0011014:	e8 73 e8 ff ff       	call   c000f88c <malloc>
c0011019:	5a                   	pop    edx
c001101a:	59                   	pop    ecx
c001101b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001101f:	50                   	push   eax
c0011020:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011024:	e8 f9 fc ff ff       	call   c0010d22 <VgaText::VgaText(char const*)>
c0011029:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001102d:	83 c4 2c             	add    esp,0x2c
c0011030:	c3                   	ret    
c0011031:	90                   	nop

c0011032 <TSS::TSS()>:
c0011032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011036:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001103d:	90                   	nop
c001103e:	c3                   	ret    
c001103f:	90                   	nop

c0011040 <TSS::setESP(unsigned long)>:
c0011040:	55                   	push   ebp
c0011041:	89 e5                	mov    ebp,esp
c0011043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011049:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001104c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001104f:	90                   	nop
c0011050:	5d                   	pop    ebp
c0011051:	c3                   	ret    

c0011052 <TSS::flush()>:
c0011052:	55                   	push   ebp
c0011053:	89 e5                	mov    ebp,esp
c0011055:	83 ec 10             	sub    esp,0x10
c0011058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001105b:	8b 00                	mov    eax,DWORD PTR [eax]
c001105d:	83 c8 03             	or     eax,0x3
c0011060:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011064:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011068:	66 89 d0             	mov    ax,dx
c001106b:	0f 00 d8             	ltr    ax
c001106e:	90                   	nop
c001106f:	c9                   	leave  
c0011070:	c3                   	ret    
c0011071:	90                   	nop

c0011072 <TSS::setup(unsigned long, unsigned long)>:
c0011072:	55                   	push   ebp
c0011073:	89 e5                	mov    ebp,esp
c0011075:	83 ec 18             	sub    esp,0x18
c0011078:	83 ec 0c             	sub    esp,0xc
c001107b:	6a 68                	push   0x68
c001107d:	e8 0a e8 ff ff       	call   c000f88c <malloc>
c0011082:	83 c4 10             	add    esp,0x10
c0011085:	89 c2                	mov    edx,eax
c0011087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001108a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001108d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011090:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011093:	83 ec 04             	sub    esp,0x4
c0011096:	6a 68                	push   0x68
c0011098:	6a 00                	push   0x0
c001109a:	50                   	push   eax
c001109b:	e8 b0 f6 fe ff       	call   c0000750 <memset>
c00110a0:	83 c4 10             	add    esp,0x10
c00110a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a9:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00110af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00110bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110cd:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00110d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d9:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00110df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110e5:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00110eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110f1:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00110f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110fd:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011106:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011109:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001110f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011112:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011115:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011118:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001111b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001111e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011121:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011124:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001112a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001112d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011137:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001113a:	0f 20 da             	mov    edx,cr3
c001113d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011140:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011143:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011149:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001114c:	83 ec 08             	sub    esp,0x8
c001114f:	50                   	push   eax
c0011150:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011153:	50                   	push   eax
c0011154:	e8 0f df ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0011159:	83 c4 10             	add    esp,0x10
c001115c:	83 ec 08             	sub    esp,0x8
c001115f:	6a 68                	push   0x68
c0011161:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011164:	50                   	push   eax
c0011165:	e8 1a df ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c001116a:	83 c4 10             	add    esp,0x10
c001116d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011171:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011174:	83 e0 0f             	and    eax,0xf
c0011177:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001117a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001117d:	83 c8 40             	or     eax,0x40
c0011180:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011183:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0011188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001118e:	05 78 01 00 00       	add    eax,0x178
c0011193:	83 ec 04             	sub    esp,0x4
c0011196:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011199:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001119c:	50                   	push   eax
c001119d:	e8 16 df ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c00111a2:	83 c4 10             	add    esp,0x10
c00111a5:	89 c2                	mov    edx,eax
c00111a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111aa:	89 10                	mov    DWORD PTR [eax],edx
c00111ac:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00111b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111b7:	05 78 01 00 00       	add    eax,0x178
c00111bc:	83 ec 0c             	sub    esp,0xc
c00111bf:	50                   	push   eax
c00111c0:	e8 37 df ff ff       	call   c000f0fc <GDT::flush()>
c00111c5:	83 c4 10             	add    esp,0x10
c00111c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00111cd:	83 ec 08             	sub    esp,0x8
c00111d0:	50                   	push   eax
c00111d1:	68 08 b0 02 c0       	push   0xc002b008
c00111d6:	e8 2c 19 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00111db:	83 c4 10             	add    esp,0x10
c00111de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00111e3:	c9                   	leave  
c00111e4:	c3                   	ret    
c00111e5:	90                   	nop

c00111e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00111e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00111f6:	75 08                	jne    c0011200 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00111f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111fe:	eb 38                	jmp    c0011238 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011200:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011205:	75 17                	jne    c001121e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011207:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001120c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001120f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011215:	8b 10                	mov    edx,DWORD PTR [eax]
c0011217:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001121b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001121e:	89 c1                	mov    ecx,eax
c0011220:	83 e1 fd             	and    ecx,0xfffffffd
c0011223:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011229:	74 cd                	je     c00111f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001122b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011230:	83 e0 ef             	and    eax,0xffffffef
c0011233:	83 f8 08             	cmp    eax,0x8
c0011236:	76 c0                	jbe    c00111f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011238:	31 c0                	xor    eax,eax
c001123a:	c3                   	ret    
c001123b:	90                   	nop

c001123c <ReservedFilename::isAtty()>:
c001123c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011240:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011243:	31 c0                	xor    eax,eax
c0011245:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001124b:	74 09                	je     c0011256 <ReservedFilename::isAtty()+0x1a>
c001124d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011253:	0f 94 c0             	sete   al
c0011256:	c3                   	ret    
c0011257:	90                   	nop

c0011258 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001125c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011260:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011263:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011267:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001126c:	75 08                	jne    c0011276 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001126e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011274:	eb 3d                	jmp    c00112b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011276:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001127b:	75 17                	jne    c0011294 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001127d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011282:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011285:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001128b:	8b 10                	mov    edx,DWORD PTR [eax]
c001128d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011291:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011294:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011299:	75 04                	jne    c001129f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001129b:	89 0a                	mov    DWORD PTR [edx],ecx
c001129d:	eb 14                	jmp    c00112b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001129f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00112a4:	74 c8                	je     c001126e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00112a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00112ab:	83 e0 ef             	and    eax,0xffffffef
c00112ae:	83 f8 08             	cmp    eax,0x8
c00112b1:	76 bb                	jbe    c001126e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00112b3:	31 c0                	xor    eax,eax
c00112b5:	c3                   	ret    

c00112b6 <UnixFile::getFileDescriptor()>:
c00112b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112bd:	c3                   	ret    

c00112be <UnixFile::UnixFile(int)>:
c00112be:	53                   	push   ebx
c00112bf:	83 ec 28             	sub    esp,0x28
c00112c2:	ba f4 b0 02 c0       	mov    edx,0xc002b0f4
c00112c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112cb:	89 10                	mov    DWORD PTR [eax],edx
c00112cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00112d5:	0f 8f 8c 01 00 00    	jg     c0011467 <UnixFile::UnixFile(int)+0x1a9>
c00112db:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00112e0:	8d 50 01             	lea    edx,[eax+0x1]
c00112e3:	89 15 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,edx
c00112e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00112ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00112f0:	83 ec 08             	sub    esp,0x8
c00112f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00112f7:	68 18 f3 02 c0       	push   0xc002f318
c00112fc:	e8 fb 7e 01 00       	call   c00291fc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011301:	83 c4 10             	add    esp,0x10
c0011304:	a0 14 f3 02 c0       	mov    al,ds:0xc002f314
c0011309:	83 f0 01             	xor    eax,0x1
c001130c:	84 c0                	test   al,al
c001130e:	0f 84 54 01 00 00    	je     c0011468 <UnixFile::UnixFile(int)+0x1aa>
c0011314:	c6 05 14 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f314,0x1
c001131b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011323:	83 ec 0c             	sub    esp,0xc
c0011326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001132a:	e8 5d e5 ff ff       	call   c000f88c <malloc>
c001132f:	83 c4 10             	add    esp,0x10
c0011332:	89 c3                	mov    ebx,eax
c0011334:	83 ec 08             	sub    esp,0x8
c0011337:	68 03 ff ff 0f       	push   0xfffff03
c001133c:	53                   	push   ebx
c001133d:	e8 2c 01 00 00       	call   c001146e <ReservedFilename::ReservedFilename(int)>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	89 1d 0c f3 02 c0    	mov    DWORD PTR ds:0xc002f30c,ebx
c001134b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011353:	83 ec 0c             	sub    esp,0xc
c0011356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001135a:	e8 2d e5 ff ff       	call   c000f88c <malloc>
c001135f:	83 c4 10             	add    esp,0x10
c0011362:	89 c3                	mov    ebx,eax
c0011364:	83 ec 08             	sub    esp,0x8
c0011367:	68 01 ff ff 0f       	push   0xfffff01
c001136c:	53                   	push   ebx
c001136d:	e8 fc 00 00 00       	call   c001146e <ReservedFilename::ReservedFilename(int)>
c0011372:	83 c4 10             	add    esp,0x10
c0011375:	89 1d 10 f3 02 c0    	mov    DWORD PTR ds:0xc002f310,ebx
c001137b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011383:	83 ec 0c             	sub    esp,0xc
c0011386:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001138a:	e8 fd e4 ff ff       	call   c000f88c <malloc>
c001138f:	83 c4 10             	add    esp,0x10
c0011392:	89 c3                	mov    ebx,eax
c0011394:	83 ec 08             	sub    esp,0x8
c0011397:	68 00 ff ff 0f       	push   0xfffff00
c001139c:	53                   	push   ebx
c001139d:	e8 cc 00 00 00       	call   c001146e <ReservedFilename::ReservedFilename(int)>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	89 1d 04 f3 02 c0    	mov    DWORD PTR ds:0xc002f304,ebx
c00113ab:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00113b3:	83 ec 0c             	sub    esp,0xc
c00113b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00113ba:	e8 cd e4 ff ff       	call   c000f88c <malloc>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	89 c3                	mov    ebx,eax
c00113c4:	83 ec 08             	sub    esp,0x8
c00113c7:	68 02 ff ff 0f       	push   0xfffff02
c00113cc:	53                   	push   ebx
c00113cd:	e8 9c 00 00 00       	call   c001146e <ReservedFilename::ReservedFilename(int)>
c00113d2:	83 c4 10             	add    esp,0x10
c00113d5:	89 1d 08 f3 02 c0    	mov    DWORD PTR ds:0xc002f308,ebx
c00113db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00113e3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00113e8:	7f 7e                	jg     c0011468 <UnixFile::UnixFile(int)+0x1aa>
c00113ea:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00113f9:	e8 8e e4 ff ff       	call   c000f88c <malloc>
c00113fe:	83 c4 10             	add    esp,0x10
c0011401:	89 c3                	mov    ebx,eax
c0011403:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011407:	05 10 ff ff 0f       	add    eax,0xfffff10
c001140c:	83 ec 08             	sub    esp,0x8
c001140f:	50                   	push   eax
c0011410:	53                   	push   ebx
c0011411:	e8 58 00 00 00       	call   c001146e <ReservedFilename::ReservedFilename(int)>
c0011416:	83 c4 10             	add    esp,0x10
c0011419:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001141d:	89 1c 85 e0 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d20],ebx
c0011424:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001142c:	83 ec 0c             	sub    esp,0xc
c001142f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011433:	e8 54 e4 ff ff       	call   c000f88c <malloc>
c0011438:	83 c4 10             	add    esp,0x10
c001143b:	89 c3                	mov    ebx,eax
c001143d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011441:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011446:	83 ec 08             	sub    esp,0x8
c0011449:	50                   	push   eax
c001144a:	53                   	push   ebx
c001144b:	e8 1e 00 00 00       	call   c001146e <ReservedFilename::ReservedFilename(int)>
c0011450:	83 c4 10             	add    esp,0x10
c0011453:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011457:	89 1c 85 a0 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d60],ebx
c001145e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011462:	e9 7c ff ff ff       	jmp    c00113e3 <UnixFile::UnixFile(int)+0x125>
c0011467:	90                   	nop
c0011468:	83 c4 28             	add    esp,0x28
c001146b:	5b                   	pop    ebx
c001146c:	c3                   	ret    
c001146d:	90                   	nop

c001146e <ReservedFilename::ReservedFilename(int)>:
c001146e:	83 ec 0c             	sub    esp,0xc
c0011471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011475:	83 ec 08             	sub    esp,0x8
c0011478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001147c:	50                   	push   eax
c001147d:	e8 3c fe ff ff       	call   c00112be <UnixFile::UnixFile(int)>
c0011482:	83 c4 10             	add    esp,0x10
c0011485:	ba 10 b1 02 c0       	mov    edx,0xc002b110
c001148a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001148e:	89 10                	mov    DWORD PTR [eax],edx
c0011490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011494:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011498:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001149b:	90                   	nop
c001149c:	83 c4 0c             	add    esp,0xc
c001149f:	c3                   	ret    

c00114a0 <UnixFile::~UnixFile()>:
c00114a0:	83 ec 1c             	sub    esp,0x1c
c00114a3:	ba f4 b0 02 c0       	mov    edx,0xc002b0f4
c00114a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114ac:	89 10                	mov    DWORD PTR [eax],edx
c00114ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00114ba:	7f 73                	jg     c001152f <UnixFile::~UnixFile()+0x8f>
c00114bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114c4:	83 ec 0c             	sub    esp,0xc
c00114c7:	68 18 f3 02 c0       	push   0xc002f318
c00114cc:	e8 ff 7d 01 00       	call   c00292d0 <LinkedList<UnixFile>::getFirstElement()>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00114d8:	83 ec 0c             	sub    esp,0xc
c00114db:	68 18 f3 02 c0       	push   0xc002f318
c00114e0:	e8 f3 7d 01 00       	call   c00292d8 <LinkedList<UnixFile>::removeFirst()>
c00114e5:	83 c4 10             	add    esp,0x10
c00114e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00114ec:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00114f0:	74 40                	je     c0011532 <UnixFile::~UnixFile()+0x92>
c00114f2:	83 ec 08             	sub    esp,0x8
c00114f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00114f9:	68 18 f3 02 c0       	push   0xc002f318
c00114fe:	e8 f9 7c 01 00       	call   c00291fc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011503:	83 c4 10             	add    esp,0x10
c0011506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001150a:	8d 50 01             	lea    edx,[eax+0x1]
c001150d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011511:	3d 88 13 00 00       	cmp    eax,0x1388
c0011516:	0f 94 c0             	sete   al
c0011519:	84 c0                	test   al,al
c001151b:	74 a7                	je     c00114c4 <UnixFile::~UnixFile()+0x24>
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	68 cc b0 02 c0       	push   0xc002b0cc
c0011525:	e8 6d 91 00 00       	call   c001a697 <Krnl::panic(char const*)>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	eb 95                	jmp    c00114c4 <UnixFile::~UnixFile()+0x24>
c001152f:	90                   	nop
c0011530:	eb 01                	jmp    c0011533 <UnixFile::~UnixFile()+0x93>
c0011532:	90                   	nop
c0011533:	90                   	nop
c0011534:	83 c4 1c             	add    esp,0x1c
c0011537:	c3                   	ret    

c0011538 <UnixFile::~UnixFile()>:
c0011538:	83 ec 0c             	sub    esp,0xc
c001153b:	83 ec 0c             	sub    esp,0xc
c001153e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011542:	e8 59 ff ff ff       	call   c00114a0 <UnixFile::~UnixFile()>
c0011547:	83 c4 10             	add    esp,0x10
c001154a:	83 ec 08             	sub    esp,0x8
c001154d:	6a 0c                	push   0xc
c001154f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011553:	e8 cf 14 00 00       	call   c0012a27 <operator delete(void*, unsigned long)>
c0011558:	83 c4 10             	add    esp,0x10
c001155b:	83 c4 0c             	add    esp,0xc
c001155e:	c3                   	ret    
c001155f:	90                   	nop

c0011560 <ReservedFilename::~ReservedFilename()>:
c0011560:	83 ec 0c             	sub    esp,0xc
c0011563:	ba 10 b1 02 c0       	mov    edx,0xc002b110
c0011568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001156c:	89 10                	mov    DWORD PTR [eax],edx
c001156e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011572:	83 ec 0c             	sub    esp,0xc
c0011575:	50                   	push   eax
c0011576:	e8 25 ff ff ff       	call   c00114a0 <UnixFile::~UnixFile()>
c001157b:	83 c4 10             	add    esp,0x10
c001157e:	90                   	nop
c001157f:	83 c4 0c             	add    esp,0xc
c0011582:	c3                   	ret    
c0011583:	90                   	nop

c0011584 <ReservedFilename::~ReservedFilename()>:
c0011584:	83 ec 0c             	sub    esp,0xc
c0011587:	83 ec 0c             	sub    esp,0xc
c001158a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001158e:	e8 cd ff ff ff       	call   c0011560 <ReservedFilename::~ReservedFilename()>
c0011593:	83 c4 10             	add    esp,0x10
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	6a 0c                	push   0xc
c001159b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001159f:	e8 83 14 00 00       	call   c0012a27 <operator delete(void*, unsigned long)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	83 c4 0c             	add    esp,0xc
c00115aa:	c3                   	ret    

c00115ab <getFromFileDescriptor(int)>:
c00115ab:	53                   	push   ebx
c00115ac:	83 ec 08             	sub    esp,0x8
c00115af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00115b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00115bf:	7f 2c                	jg     c00115ed <getFromFileDescriptor(int)+0x42>
c00115c1:	83 ec 0c             	sub    esp,0xc
c00115c4:	68 18 f3 02 c0       	push   0xc002f318
c00115c9:	e8 02 7d 01 00       	call   c00292d0 <LinkedList<UnixFile>::getFirstElement()>
c00115ce:	83 c4 10             	add    esp,0x10
c00115d1:	85 c0                	test   eax,eax
c00115d3:	75 04                	jne    c00115d9 <getFromFileDescriptor(int)+0x2e>
c00115d5:	31 c0                	xor    eax,eax
c00115d7:	eb 6e                	jmp    c0011647 <getFromFileDescriptor(int)+0x9c>
c00115d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00115dc:	74 69                	je     c0011647 <getFromFileDescriptor(int)+0x9c>
c00115de:	52                   	push   edx
c00115df:	52                   	push   edx
c00115e0:	50                   	push   eax
c00115e1:	68 18 f3 02 c0       	push   0xc002f318
c00115e6:	e8 8f 7d 01 00       	call   c002937a <LinkedList<UnixFile>::getNext(UnixFile*)>
c00115eb:	eb e1                	jmp    c00115ce <getFromFileDescriptor(int)+0x23>
c00115ed:	a1 0c f3 02 c0       	mov    eax,ds:0xc002f30c
c00115f2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00115f8:	74 4d                	je     c0011647 <getFromFileDescriptor(int)+0x9c>
c00115fa:	a1 10 f3 02 c0       	mov    eax,ds:0xc002f310
c00115ff:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011605:	74 40                	je     c0011647 <getFromFileDescriptor(int)+0x9c>
c0011607:	a1 08 f3 02 c0       	mov    eax,ds:0xc002f308
c001160c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011612:	74 33                	je     c0011647 <getFromFileDescriptor(int)+0x9c>
c0011614:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c0011619:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001161f:	74 26                	je     c0011647 <getFromFileDescriptor(int)+0x9c>
c0011621:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011627:	83 f8 08             	cmp    eax,0x8
c001162a:	77 09                	ja     c0011635 <getFromFileDescriptor(int)+0x8a>
c001162c:	8b 04 85 e0 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0d20]
c0011633:	eb 12                	jmp    c0011647 <getFromFileDescriptor(int)+0x9c>
c0011635:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001163b:	83 fb 08             	cmp    ebx,0x8
c001163e:	77 95                	ja     c00115d5 <getFromFileDescriptor(int)+0x2a>
c0011640:	8b 04 9d a0 f2 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0d60]
c0011647:	83 c4 08             	add    esp,0x8
c001164a:	5b                   	pop    ebx
c001164b:	c3                   	ret    

c001164c <__static_initialization_and_destruction_0(int, int)>:
c001164c:	83 ec 0c             	sub    esp,0xc
c001164f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011654:	75 34                	jne    c001168a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011656:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001165e:	75 2a                	jne    c001168a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011660:	83 ec 0c             	sub    esp,0xc
c0011663:	68 18 f3 02 c0       	push   0xc002f318
c0011668:	e8 37 7b 01 00       	call   c00291a4 <LinkedList<UnixFile>::LinkedList()>
c001166d:	83 c4 10             	add    esp,0x10
c0011670:	83 ec 04             	sub    esp,0x4
c0011673:	68 c4 e0 02 c0       	push   0xc002e0c4
c0011678:	68 18 f3 02 c0       	push   0xc002f318
c001167d:	68 a2 91 02 c0       	push   0xc00291a2
c0011682:	e8 1a 13 00 00       	call   c00129a1 <__cxa_atexit>
c0011687:	83 c4 10             	add    esp,0x10
c001168a:	90                   	nop
c001168b:	83 c4 0c             	add    esp,0xc
c001168e:	c3                   	ret    

c001168f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001168f:	83 ec 0c             	sub    esp,0xc
c0011692:	83 ec 08             	sub    esp,0x8
c0011695:	68 ff ff 00 00       	push   0xffff
c001169a:	6a 01                	push   0x1
c001169c:	e8 ab ff ff ff       	call   c001164c <__static_initialization_and_destruction_0(int, int)>
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	83 c4 0c             	add    esp,0xc
c00116a7:	c3                   	ret    

c00116a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00116a8:	53                   	push   ebx
c00116a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00116b1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00116b7:	89 c8                	mov    eax,ecx
c00116b9:	d1 e8                	shr    eax,1
c00116bb:	03 05 48 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e148
c00116c1:	83 e1 01             	and    ecx,0x1
c00116c4:	8a 10                	mov    dl,BYTE PTR [eax]
c00116c6:	75 09                	jne    c00116d1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00116c8:	83 e2 f0             	and    edx,0xfffffff0
c00116cb:	09 da                	or     edx,ebx
c00116cd:	88 10                	mov    BYTE PTR [eax],dl
c00116cf:	5b                   	pop    ebx
c00116d0:	c3                   	ret    
c00116d1:	c1 e3 04             	shl    ebx,0x4
c00116d4:	83 e2 0f             	and    edx,0xf
c00116d7:	09 da                	or     edx,ebx
c00116d9:	88 10                	mov    BYTE PTR [eax],dl
c00116db:	5b                   	pop    ebx
c00116dc:	c3                   	ret    

c00116dd <Virt::getPageState(unsigned long)>:
c00116dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e1:	8b 0d 48 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e148
c00116e7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00116ed:	89 d0                	mov    eax,edx
c00116ef:	d1 e8                	shr    eax,1
c00116f1:	83 e2 01             	and    edx,0x1
c00116f4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00116f7:	75 04                	jne    c00116fd <Virt::getPageState(unsigned long)+0x20>
c00116f9:	83 e0 0f             	and    eax,0xf
c00116fc:	c3                   	ret    
c00116fd:	c0 e8 04             	shr    al,0x4
c0011700:	c3                   	ret    

c0011701 <Virt::allocateKernelVirtualPages(int)>:
c0011701:	55                   	push   ebp
c0011702:	31 ed                	xor    ebp,ebp
c0011704:	57                   	push   edi
c0011705:	56                   	push   esi
c0011706:	53                   	push   ebx
c0011707:	31 db                	xor    ebx,ebx
c0011709:	83 ec 1c             	sub    esp,0x1c
c001170c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011710:	8b 3d 44 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e144
c0011716:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001171b:	57                   	push   edi
c001171c:	e8 bc ff ff ff       	call   c00116dd <Virt::getPageState(unsigned long)>
c0011721:	5a                   	pop    edx
c0011722:	84 c0                	test   al,al
c0011724:	75 3a                	jne    c0011760 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011726:	85 db                	test   ebx,ebx
c0011728:	75 02                	jne    c001172c <Virt::allocateKernelVirtualPages(int)+0x2b>
c001172a:	89 fd                	mov    ebp,edi
c001172c:	43                   	inc    ebx
c001172d:	39 f3                	cmp    ebx,esi
c001172f:	74 5a                	je     c001178b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011731:	47                   	inc    edi
c0011732:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011738:	76 31                	jbe    c001176b <Virt::allocateKernelVirtualPages(int)+0x6a>
c001173a:	c7 05 44 e1 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e144,0xc8000
c0011744:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011749:	75 28                	jne    c0011773 <Virt::allocateKernelVirtualPages(int)+0x72>
c001174b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011750:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011755:	57                   	push   edi
c0011756:	e8 82 ff ff ff       	call   c00116dd <Virt::getPageState(unsigned long)>
c001175b:	5a                   	pop    edx
c001175c:	84 c0                	test   al,al
c001175e:	74 c6                	je     c0011726 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011760:	31 db                	xor    ebx,ebx
c0011762:	47                   	inc    edi
c0011763:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011769:	77 cf                	ja     c001173a <Virt::allocateKernelVirtualPages(int)+0x39>
c001176b:	89 3d 44 e1 02 c0    	mov    DWORD PTR ds:0xc002e144,edi
c0011771:	eb a8                	jmp    c001171b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011773:	83 ec 0c             	sub    esp,0xc
c0011776:	68 24 b1 02 c0       	push   0xc002b124
c001177b:	e8 17 8f 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0011780:	8b 3d 44 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e144
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	eb 90                	jmp    c001171b <Virt::allocateKernelVirtualPages(int)+0x1a>
c001178b:	89 2d 44 e1 02 c0    	mov    DWORD PTR ds:0xc002e144,ebp
c0011791:	4b                   	dec    ebx
c0011792:	74 5f                	je     c00117f3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011794:	85 f6                	test   esi,esi
c0011796:	74 3d                	je     c00117d5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011798:	89 e8                	mov    eax,ebp
c001179a:	31 db                	xor    ebx,ebx
c001179c:	8d 7e ff             	lea    edi,[esi-0x1]
c001179f:	eb 14                	jmp    c00117b5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00117a1:	6a 01                	push   0x1
c00117a3:	43                   	inc    ebx
c00117a4:	50                   	push   eax
c00117a5:	e8 fe fe ff ff       	call   c00116a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117aa:	58                   	pop    eax
c00117ab:	39 f3                	cmp    ebx,esi
c00117ad:	5a                   	pop    edx
c00117ae:	74 25                	je     c00117d5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00117b0:	a1 44 e1 02 c0       	mov    eax,ds:0xc002e144
c00117b5:	8d 50 01             	lea    edx,[eax+0x1]
c00117b8:	85 db                	test   ebx,ebx
c00117ba:	89 15 44 e1 02 c0    	mov    DWORD PTR ds:0xc002e144,edx
c00117c0:	74 20                	je     c00117e2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00117c2:	39 df                	cmp    edi,ebx
c00117c4:	75 db                	jne    c00117a1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00117c6:	6a 03                	push   0x3
c00117c8:	43                   	inc    ebx
c00117c9:	50                   	push   eax
c00117ca:	e8 d9 fe ff ff       	call   c00116a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117cf:	59                   	pop    ecx
c00117d0:	39 f3                	cmp    ebx,esi
c00117d2:	58                   	pop    eax
c00117d3:	75 db                	jne    c00117b0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00117d5:	83 c4 1c             	add    esp,0x1c
c00117d8:	89 e8                	mov    eax,ebp
c00117da:	5b                   	pop    ebx
c00117db:	c1 e0 0c             	shl    eax,0xc
c00117de:	5e                   	pop    esi
c00117df:	5f                   	pop    edi
c00117e0:	5d                   	pop    ebp
c00117e1:	c3                   	ret    
c00117e2:	6a 02                	push   0x2
c00117e4:	bb 01 00 00 00       	mov    ebx,0x1
c00117e9:	50                   	push   eax
c00117ea:	e8 b9 fe ff ff       	call   c00116a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117ef:	58                   	pop    eax
c00117f0:	5a                   	pop    edx
c00117f1:	eb bd                	jmp    c00117b0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00117f3:	6a 04                	push   0x4
c00117f5:	8d 45 01             	lea    eax,[ebp+0x1]
c00117f8:	55                   	push   ebp
c00117f9:	a3 44 e1 02 c0       	mov    ds:0xc002e144,eax
c00117fe:	e8 a5 fe ff ff       	call   c00116a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011803:	59                   	pop    ecx
c0011804:	89 e8                	mov    eax,ebp
c0011806:	5b                   	pop    ebx
c0011807:	c1 e0 0c             	shl    eax,0xc
c001180a:	83 c4 1c             	add    esp,0x1c
c001180d:	5b                   	pop    ebx
c001180e:	5e                   	pop    esi
c001180f:	5f                   	pop    edi
c0011810:	5d                   	pop    ebp
c0011811:	c3                   	ret    

c0011812 <Virt::freeSwapfilePage(unsigned long)>:
c0011812:	53                   	push   ebx
c0011813:	8b 15 2c f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f32c
c0011819:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001181d:	b8 01 00 00 00       	mov    eax,0x1
c0011822:	89 cb                	mov    ebx,ecx
c0011824:	d3 e0                	shl    eax,cl
c0011826:	c1 eb 05             	shr    ebx,0x5
c0011829:	f7 d0                	not    eax
c001182b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001182e:	5b                   	pop    ebx
c001182f:	c3                   	ret    

c0011830 <Virt::swapIDToSector(unsigned long)>:
c0011830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011834:	0f af 05 4c e1 02 c0 	imul   eax,DWORD PTR ds:0xc002e14c
c001183b:	03 05 54 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e154
c0011841:	c3                   	ret    

c0011842 <Virt::allocateSwapfilePage()>:
c0011842:	55                   	push   ebp
c0011843:	31 d2                	xor    edx,edx
c0011845:	57                   	push   edi
c0011846:	56                   	push   esi
c0011847:	53                   	push   ebx
c0011848:	83 ec 0c             	sub    esp,0xc
c001184b:	8b 0d 4c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e14c
c0011851:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c0011856:	f7 f1                	div    ecx
c0011858:	39 0d 50 e1 02 c0    	cmp    DWORD PTR ds:0xc002e150,ecx
c001185e:	72 2d                	jb     c001188d <Virt::allocateSwapfilePage()+0x4b>
c0011860:	8b 35 2c f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f32c
c0011866:	8b 16                	mov    edx,DWORD PTR [esi]
c0011868:	f6 c2 01             	test   dl,0x1
c001186b:	74 3c                	je     c00118a9 <Virt::allocateSwapfilePage()+0x67>
c001186d:	31 c9                	xor    ecx,ecx
c001186f:	bf 01 00 00 00       	mov    edi,0x1
c0011874:	eb 12                	jmp    c0011888 <Virt::allocateSwapfilePage()+0x46>
c0011876:	89 fd                	mov    ebp,edi
c0011878:	89 ca                	mov    edx,ecx
c001187a:	d3 e5                	shl    ebp,cl
c001187c:	c1 ea 05             	shr    edx,0x5
c001187f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011882:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011884:	85 ea                	test   edx,ebp
c0011886:	74 2a                	je     c00118b2 <Virt::allocateSwapfilePage()+0x70>
c0011888:	41                   	inc    ecx
c0011889:	39 c8                	cmp    eax,ecx
c001188b:	77 e9                	ja     c0011876 <Virt::allocateSwapfilePage()+0x34>
c001188d:	83 ec 0c             	sub    esp,0xc
c0011890:	68 ab b2 02 c0       	push   0xc002b2ab
c0011895:	e8 fd 8d 00 00       	call   c001a697 <Krnl::panic(char const*)>
c001189a:	83 c4 10             	add    esp,0x10
c001189d:	31 c9                	xor    ecx,ecx
c001189f:	83 c4 0c             	add    esp,0xc
c00118a2:	89 c8                	mov    eax,ecx
c00118a4:	5b                   	pop    ebx
c00118a5:	5e                   	pop    esi
c00118a6:	5f                   	pop    edi
c00118a7:	5d                   	pop    ebp
c00118a8:	c3                   	ret    
c00118a9:	89 f3                	mov    ebx,esi
c00118ab:	bd 01 00 00 00       	mov    ebp,0x1
c00118b0:	31 c9                	xor    ecx,ecx
c00118b2:	09 ea                	or     edx,ebp
c00118b4:	89 c8                	mov    eax,ecx
c00118b6:	89 13                	mov    DWORD PTR [ebx],edx
c00118b8:	83 c4 0c             	add    esp,0xc
c00118bb:	5b                   	pop    ebx
c00118bc:	5e                   	pop    esi
c00118bd:	5f                   	pop    edi
c00118be:	5d                   	pop    ebp
c00118bf:	c3                   	ret    

c00118c0 <Virt::virtualMemorySetup()>:
c00118c0:	53                   	push   ebx
c00118c1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118c6:	83 ec 08             	sub    esp,0x8
c00118c9:	6a 0f                	push   0xf
c00118cb:	53                   	push   ebx
c00118cc:	43                   	inc    ebx
c00118cd:	e8 d6 fd ff ff       	call   c00116a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118d2:	59                   	pop    ecx
c00118d3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118d9:	58                   	pop    eax
c00118da:	75 ed                	jne    c00118c9 <Virt::virtualMemorySetup()+0x9>
c00118dc:	83 ec 08             	sub    esp,0x8
c00118df:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118e4:	68 00 00 00 c8       	push   0xc8000000
c00118e9:	68 c2 b2 02 c0       	push   0xc002b2c2
c00118ee:	e8 14 12 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00118f3:	58                   	pop    eax
c00118f4:	5a                   	pop    edx
c00118f5:	68 00 f0 ff ef       	push   0xeffff000
c00118fa:	68 d6 b2 02 c0       	push   0xc002b2d6
c00118ff:	e8 03 12 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0011904:	83 c4 10             	add    esp,0x10
c0011907:	83 ec 08             	sub    esp,0x8
c001190a:	6a 00                	push   0x0
c001190c:	53                   	push   ebx
c001190d:	43                   	inc    ebx
c001190e:	e8 95 fd ff ff       	call   c00116a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001191c:	75 e9                	jne    c0011907 <Virt::virtualMemorySetup()+0x47>
c001191e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011923:	83 ec 08             	sub    esp,0x8
c0011926:	6a 0f                	push   0xf
c0011928:	53                   	push   ebx
c0011929:	43                   	inc    ebx
c001192a:	e8 79 fd ff ff       	call   c00116a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001192f:	83 c4 10             	add    esp,0x10
c0011932:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011938:	75 e9                	jne    c0011923 <Virt::virtualMemorySetup()+0x63>
c001193a:	83 c4 08             	add    esp,0x8
c001193d:	5b                   	pop    ebx
c001193e:	c3                   	ret    

c001193f <Virt::swappingSetup()>:
c001193f:	c3                   	ret    

c0011940 <Virt::setupPageSwapping(int)>:
c0011940:	57                   	push   edi
c0011941:	56                   	push   esi
c0011942:	53                   	push   ebx
c0011943:	83 ec 1c             	sub    esp,0x1c
c0011946:	68 ea b2 02 c0       	push   0xc002b2ea
c001194b:	e8 b7 11 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0011950:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011957:	e8 30 df ff ff       	call   c000f88c <malloc>
c001195c:	83 c4 0c             	add    esp,0xc
c001195f:	89 c6                	mov    esi,eax
c0011961:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c0011967:	68 fe b2 02 c0       	push   0xc002b2fe
c001196c:	50                   	push   eax
c001196d:	e8 f4 16 00 00       	call   c0013066 <File::File(char const*, Process*)>
c0011972:	89 34 24             	mov    DWORD PTR [esp],esi
c0011975:	e8 c8 18 00 00       	call   c0013242 <File::unlink()>
c001197a:	59                   	pop    ecx
c001197b:	5b                   	pop    ebx
c001197c:	6a 12                	push   0x12
c001197e:	56                   	push   esi
c001197f:	e8 46 17 00 00       	call   c00130ca <File::open(FileOpenMode)>
c0011984:	83 c4 10             	add    esp,0x10
c0011987:	85 c0                	test   eax,eax
c0011989:	0f 85 5b 01 00 00    	jne    c0011aea <Virt::setupPageSwapping(int)+0x1aa>
c001198f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011993:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001199b:	c1 e3 08             	shl    ebx,0x8
c001199e:	83 ec 0c             	sub    esp,0xc
c00119a1:	68 00 00 01 00       	push   0x10000
c00119a6:	e8 e1 de ff ff       	call   c000f88c <malloc>
c00119ab:	83 c4 0c             	add    esp,0xc
c00119ae:	89 c7                	mov    edi,eax
c00119b0:	68 00 00 01 00       	push   0x10000
c00119b5:	68 ee 00 00 00       	push   0xee
c00119ba:	50                   	push   eax
c00119bb:	e8 90 ed fe ff       	call   c0000750 <memset>
c00119c0:	83 c4 10             	add    esp,0x10
c00119c3:	85 db                	test   ebx,ebx
c00119c5:	79 03                	jns    c00119ca <Virt::setupPageSwapping(int)+0x8a>
c00119c7:	83 c3 0f             	add    ebx,0xf
c00119ca:	c1 fb 04             	sar    ebx,0x4
c00119cd:	4b                   	dec    ebx
c00119ce:	83 fb ff             	cmp    ebx,0xffffffff
c00119d1:	74 4f                	je     c0011a22 <Virt::setupPageSwapping(int)+0xe2>
c00119d3:	83 ec 0c             	sub    esp,0xc
c00119d6:	8b 06                	mov    eax,DWORD PTR [esi]
c00119d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00119dc:	52                   	push   edx
c00119dd:	57                   	push   edi
c00119de:	6a 00                	push   0x0
c00119e0:	68 00 00 01 00       	push   0x10000
c00119e5:	56                   	push   esi
c00119e6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00119e9:	83 c4 20             	add    esp,0x20
c00119ec:	85 c0                	test   eax,eax
c00119ee:	0f 85 e0 00 00 00    	jne    c0011ad4 <Virt::setupPageSwapping(int)+0x194>
c00119f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119f8:	3d 00 00 01 00       	cmp    eax,0x10000
c00119fd:	74 ce                	je     c00119cd <Virt::setupPageSwapping(int)+0x8d>
c00119ff:	83 ec 08             	sub    esp,0x8
c0011a02:	4b                   	dec    ebx
c0011a03:	50                   	push   eax
c0011a04:	68 51 b3 02 c0       	push   0xc002b351
c0011a09:	e8 f9 10 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0011a0e:	c7 04 24 5a b3 02 c0 	mov    DWORD PTR [esp],0xc002b35a
c0011a15:	e8 7d 8c 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	83 fb ff             	cmp    ebx,0xffffffff
c0011a20:	75 b1                	jne    c00119d3 <Virt::setupPageSwapping(int)+0x93>
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	56                   	push   esi
c0011a26:	e8 fd 16 00 00       	call   c0013128 <File::close()>
c0011a2b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a2e:	e8 79 de ff ff       	call   c000f8ac <rfree>
c0011a33:	83 c4 10             	add    esp,0x10
c0011a36:	85 f6                	test   esi,esi
c0011a38:	74 0c                	je     c0011a46 <Virt::setupPageSwapping(int)+0x106>
c0011a3a:	83 ec 0c             	sub    esp,0xc
c0011a3d:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a3f:	56                   	push   esi
c0011a40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a43:	83 c4 10             	add    esp,0x10
c0011a46:	83 ec 08             	sub    esp,0x8
c0011a49:	a1 c8 f7 02 c0       	mov    eax,ds:0xc002f7c8
c0011a4e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011a54:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a56:	68 fe b2 02 c0       	push   0xc002b2fe
c0011a5b:	50                   	push   eax
c0011a5c:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011a5f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011a63:	c6 05 58 e1 02 c0 43 	mov    BYTE PTR ds:0xc002e158,0x43
c0011a6a:	c1 e2 0b             	shl    edx,0xb
c0011a6d:	a3 54 e1 02 c0       	mov    ds:0xc002e154,eax
c0011a72:	89 15 50 e1 02 c0    	mov    DWORD PTR ds:0xc002e150,edx
c0011a78:	c7 05 4c e1 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e14c,0x8
c0011a82:	c1 ea 08             	shr    edx,0x8
c0011a85:	89 14 24             	mov    DWORD PTR [esp],edx
c0011a88:	e8 ff dd ff ff       	call   c000f88c <malloc>
c0011a8d:	83 c4 0c             	add    esp,0xc
c0011a90:	89 c1                	mov    ecx,eax
c0011a92:	a3 2c f3 02 c0       	mov    ds:0xc002f32c,eax
c0011a97:	31 d2                	xor    edx,edx
c0011a99:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c0011a9e:	f7 35 4c e1 02 c0    	div    DWORD PTR ds:0xc002e14c
c0011aa4:	c1 e8 05             	shr    eax,0x5
c0011aa7:	50                   	push   eax
c0011aa8:	6a 00                	push   0x0
c0011aaa:	51                   	push   ecx
c0011aab:	e8 a0 ec fe ff       	call   c0000750 <memset>
c0011ab0:	58                   	pop    eax
c0011ab1:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c0011ab6:	5a                   	pop    edx
c0011ab7:	31 d2                	xor    edx,edx
c0011ab9:	f7 35 4c e1 02 c0    	div    DWORD PTR ds:0xc002e14c
c0011abf:	c1 e8 05             	shr    eax,0x5
c0011ac2:	50                   	push   eax
c0011ac3:	68 60 b3 02 c0       	push   0xc002b360
c0011ac8:	e8 3a 10 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0011acd:	83 c4 20             	add    esp,0x20
c0011ad0:	5b                   	pop    ebx
c0011ad1:	5e                   	pop    esi
c0011ad2:	5f                   	pop    edi
c0011ad3:	c3                   	ret    
c0011ad4:	83 ec 08             	sub    esp,0x8
c0011ad7:	50                   	push   eax
c0011ad8:	68 39 b3 02 c0       	push   0xc002b339
c0011add:	e8 25 10 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0011ae2:	83 c4 10             	add    esp,0x10
c0011ae5:	e9 0a ff ff ff       	jmp    c00119f4 <Virt::setupPageSwapping(int)+0xb4>
c0011aea:	83 ec 08             	sub    esp,0x8
c0011aed:	50                   	push   eax
c0011aee:	68 15 b3 02 c0       	push   0xc002b315
c0011af3:	e8 0f 10 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0011af8:	c7 04 24 1e b3 02 c0 	mov    DWORD PTR [esp],0xc002b31e
c0011aff:	e8 93 8b 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0011b04:	83 c4 10             	add    esp,0x10
c0011b07:	e9 83 fe ff ff       	jmp    c001198f <Virt::setupPageSwapping(int)+0x4f>

c0011b0c <VAS::VAS()>:
c0011b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b10:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b1b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011b22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b26:	a3 30 f3 02 c0       	mov    ds:0xc002f330,eax
c0011b2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b2f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011b33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b37:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011b3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b3e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011b45:	90                   	nop
c0011b46:	c3                   	ret    
c0011b47:	90                   	nop

c0011b48 <VAS::VAS(VAS*)>:
c0011b48:	83 ec 0c             	sub    esp,0xc
c0011b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b5a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011b61:	83 ec 0c             	sub    esp,0xc
c0011b64:	68 44 b1 02 c0       	push   0xc002b144
c0011b69:	e8 29 8b 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	90                   	nop
c0011b72:	83 c4 0c             	add    esp,0xc
c0011b75:	c3                   	ret    

c0011b76 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011b76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b7a:	89 c2                	mov    edx,eax
c0011b7c:	c1 e8 0a             	shr    eax,0xa
c0011b7f:	c1 ea 16             	shr    edx,0x16
c0011b82:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b87:	19 c9                	sbb    ecx,ecx
c0011b89:	c1 e2 0c             	shl    edx,0xc
c0011b8c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011b92:	25 fc 0f 00 00       	and    eax,0xffc
c0011b97:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011b9e:	01 d0                	add    eax,edx
c0011ba0:	c3                   	ret    
c0011ba1:	90                   	nop

c0011ba2 <VAS::getPageTableEntry(unsigned long)>:
c0011ba2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ba6:	89 ca                	mov    edx,ecx
c0011ba8:	c1 e9 0a             	shr    ecx,0xa
c0011bab:	c1 ea 16             	shr    edx,0x16
c0011bae:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011bb4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011bba:	c1 e0 0c             	shl    eax,0xc
c0011bbd:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011bc0:	c3                   	ret    

c0011bc1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011bc1:	57                   	push   edi
c0011bc2:	56                   	push   esi
c0011bc3:	be 01 00 00 00       	mov    esi,0x1
c0011bc8:	53                   	push   ebx
c0011bc9:	83 ec 10             	sub    esp,0x10
c0011bcc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bd0:	c1 eb 0c             	shr    ebx,0xc
c0011bd3:	eb 3f                	jmp    c0011c14 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011bd5:	83 ec 08             	sub    esp,0x8
c0011bd8:	57                   	push   edi
c0011bd9:	ff 35 30 f3 02 c0    	push   DWORD PTR ds:0xc002f330
c0011bdf:	e8 be ff ff ff       	call   c0011ba2 <VAS::getPageTableEntry(unsigned long)>
c0011be4:	83 c4 10             	add    esp,0x10
c0011be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011bed:	f6 c4 04             	test   ah,0x4
c0011bf0:	75 5f                	jne    c0011c51 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011bf2:	80 fa 04             	cmp    dl,0x4
c0011bf5:	74 78                	je     c0011c6f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011bf7:	80 fa 02             	cmp    dl,0x2
c0011bfa:	0f 84 88 00 00 00    	je     c0011c88 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011c00:	80 fa 03             	cmp    dl,0x3
c0011c03:	0f 84 ad 00 00 00    	je     c0011cb6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011c09:	fe ca                	dec    dl
c0011c0b:	0f 84 92 00 00 00    	je     c0011ca3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011c11:	43                   	inc    ebx
c0011c12:	31 f6                	xor    esi,esi
c0011c14:	53                   	push   ebx
c0011c15:	89 df                	mov    edi,ebx
c0011c17:	e8 c1 fa ff ff       	call   c00116dd <Virt::getPageState(unsigned long)>
c0011c1c:	c1 e7 0c             	shl    edi,0xc
c0011c1f:	59                   	pop    ecx
c0011c20:	84 c0                	test   al,al
c0011c22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011c26:	75 ad                	jne    c0011bd5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011c28:	83 ec 0c             	sub    esp,0xc
c0011c2b:	68 7b b3 02 c0       	push   0xc002b37b
c0011c30:	e8 62 8a 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0011c35:	58                   	pop    eax
c0011c36:	5a                   	pop    edx
c0011c37:	57                   	push   edi
c0011c38:	ff 35 30 f3 02 c0    	push   DWORD PTR ds:0xc002f330
c0011c3e:	e8 5f ff ff ff       	call   c0011ba2 <VAS::getPageTableEntry(unsigned long)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c48:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c4c:	f6 c4 04             	test   ah,0x4
c0011c4f:	74 c0                	je     c0011c11 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011c51:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011c55:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c5a:	83 ec 0c             	sub    esp,0xc
c0011c5d:	50                   	push   eax
c0011c5e:	e8 db de ff ff       	call   c000fb3e <Phys::freePage(unsigned long)>
c0011c63:	83 c4 10             	add    esp,0x10
c0011c66:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c6a:	80 fa 04             	cmp    dl,0x4
c0011c6d:	75 88                	jne    c0011bf7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011c6f:	89 f0                	mov    eax,esi
c0011c71:	84 c0                	test   al,al
c0011c73:	75 47                	jne    c0011cbc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011c75:	c7 44 24 20 68 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b168
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	5b                   	pop    ebx
c0011c81:	5e                   	pop    esi
c0011c82:	5f                   	pop    edi
c0011c83:	e9 0f 8a 00 00       	jmp    c001a697 <Krnl::panic(char const*)>
c0011c88:	89 f0                	mov    eax,esi
c0011c8a:	84 c0                	test   al,al
c0011c8c:	75 15                	jne    c0011ca3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011c8e:	83 ec 0c             	sub    esp,0xc
c0011c91:	68 97 b3 02 c0       	push   0xc002b397
c0011c96:	e8 fc 89 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0011c9b:	83 c4 10             	add    esp,0x10
c0011c9e:	e9 6e ff ff ff       	jmp    c0011c11 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ca3:	83 ec 08             	sub    esp,0x8
c0011ca6:	6a 00                	push   0x0
c0011ca8:	53                   	push   ebx
c0011ca9:	e8 fa f9 ff ff       	call   c00116a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cae:	83 c4 10             	add    esp,0x10
c0011cb1:	e9 5b ff ff ff       	jmp    c0011c11 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cb6:	89 f0                	mov    eax,esi
c0011cb8:	84 c0                	test   al,al
c0011cba:	75 15                	jne    c0011cd1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011cbc:	83 ec 08             	sub    esp,0x8
c0011cbf:	6a 00                	push   0x0
c0011cc1:	53                   	push   ebx
c0011cc2:	e8 e1 f9 ff ff       	call   c00116a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cc7:	83 c4 10             	add    esp,0x10
c0011cca:	83 c4 10             	add    esp,0x10
c0011ccd:	5b                   	pop    ebx
c0011cce:	5e                   	pop    esi
c0011ccf:	5f                   	pop    edi
c0011cd0:	c3                   	ret    
c0011cd1:	c7 44 24 20 b3 b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b3b3
c0011cd9:	83 c4 10             	add    esp,0x10
c0011cdc:	5b                   	pop    ebx
c0011cdd:	5e                   	pop    esi
c0011cde:	5f                   	pop    edi
c0011cdf:	e9 b3 89 00 00       	jmp    c001a697 <Krnl::panic(char const*)>

c0011ce4 <VAS::freeAllocatedPages(unsigned long)>:
c0011ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ce8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011cec:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011cf0:	74 09                	je     c0011cfb <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011cf2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011cf6:	e9 c6 fe ff ff       	jmp    c0011bc1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cfb:	c7 44 24 04 8c b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b18c
c0011d03:	e9 ff 0d 00 00       	jmp    c0012b07 <Dbg::kprintf(char const*, ...)>

c0011d08 <VAS::virtualToPhysical(unsigned long)>:
c0011d08:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d0c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d10:	e8 8d fe ff ff       	call   c0011ba2 <VAS::getPageTableEntry(unsigned long)>
c0011d15:	5a                   	pop    edx
c0011d16:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d18:	59                   	pop    ecx
c0011d19:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d1e:	c3                   	ret    
c0011d1f:	90                   	nop

c0011d20 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011d20:	55                   	push   ebp
c0011d21:	57                   	push   edi
c0011d22:	56                   	push   esi
c0011d23:	53                   	push   ebx
c0011d24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011d28:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011d2c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011d30:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011d34:	85 db                	test   ebx,ebx
c0011d36:	7e 22                	jle    c0011d5a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011d38:	c1 e3 0c             	shl    ebx,0xc
c0011d3b:	01 f3                	add    ebx,esi
c0011d3d:	56                   	push   esi
c0011d3e:	81 c6 00 10 00 00    	add    esi,0x1000
c0011d44:	55                   	push   ebp
c0011d45:	e8 58 fe ff ff       	call   c0011ba2 <VAS::getPageTableEntry(unsigned long)>
c0011d4a:	5a                   	pop    edx
c0011d4b:	59                   	pop    ecx
c0011d4c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011d4e:	21 f9                	and    ecx,edi
c0011d50:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011d54:	39 f3                	cmp    ebx,esi
c0011d56:	89 08                	mov    DWORD PTR [eax],ecx
c0011d58:	75 e3                	jne    c0011d3d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011d5a:	5b                   	pop    ebx
c0011d5b:	5e                   	pop    esi
c0011d5c:	5f                   	pop    edi
c0011d5d:	5d                   	pop    ebp
c0011d5e:	c3                   	ret    
c0011d5f:	90                   	nop

c0011d60 <VAS::setToWriteCombining(unsigned long, int)>:
c0011d60:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0011d65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d6b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011d72:	75 01                	jne    c0011d75 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011d74:	c3                   	ret    
c0011d75:	68 80 00 00 00       	push   0x80
c0011d7a:	6a ff                	push   0xffffffff
c0011d7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d88:	e8 93 ff ff ff       	call   c0011d20 <VAS::reflagRange(unsigned long, int, int, int)>
c0011d8d:	83 c4 14             	add    esp,0x14
c0011d90:	c3                   	ret    
c0011d91:	90                   	nop

c0011d92 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011d92:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011d97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d9b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011d9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011da2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011da5:	19 c0                	sbb    eax,eax
c0011da7:	83 ca 03             	or     edx,0x3
c0011daa:	83 e0 fc             	and    eax,0xfffffffc
c0011dad:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011db4:	0f 20 d8             	mov    eax,cr3
c0011db7:	0f 22 d8             	mov    cr3,eax
c0011dba:	c3                   	ret    
c0011dbb:	90                   	nop

c0011dbc <VAS::~VAS()>:
c0011dbc:	83 ec 2c             	sub    esp,0x2c
c0011dbf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011dc7:	fa                   	cli    
c0011dc8:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0011dcd:	40                   	inc    eax
c0011dce:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0011dd3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011dd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dda:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ddd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011de3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011de7:	6a 01                	push   0x1
c0011de9:	50                   	push   eax
c0011dea:	e8 a3 ff ff ff       	call   c0011d92 <VAS::mapOtherVASIn(bool, VAS*)>
c0011def:	83 c4 0c             	add    esp,0xc
c0011df2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011dfa:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011e02:	0f 8f d4 00 00 00    	jg     c0011edc <VAS::~VAS()+0x120>
c0011e08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e13:	c1 e2 02             	shl    edx,0x2
c0011e16:	01 d0                	add    eax,edx
c0011e18:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e22:	83 e0 01             	and    eax,0x1
c0011e25:	0f 84 a8 00 00 00    	je     c0011ed3 <VAS::~VAS()+0x117>
c0011e2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011e33:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011e3b:	7f 72                	jg     c0011eaf <VAS::~VAS()+0xf3>
c0011e3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e41:	c1 e0 0a             	shl    eax,0xa
c0011e44:	89 c2                	mov    edx,eax
c0011e46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011e4a:	01 d0                	add    eax,edx
c0011e4c:	c1 e0 0c             	shl    eax,0xc
c0011e4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e53:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e5d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011e67:	6a 01                	push   0x1
c0011e69:	50                   	push   eax
c0011e6a:	e8 07 fd ff ff       	call   c0011b76 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011e6f:	83 c4 0c             	add    esp,0xc
c0011e72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e84:	25 01 04 00 00       	and    eax,0x401
c0011e89:	3d 01 04 00 00       	cmp    eax,0x401
c0011e8e:	75 19                	jne    c0011ea9 <VAS::~VAS()+0xed>
c0011e90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e94:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e99:	83 ec 0c             	sub    esp,0xc
c0011e9c:	50                   	push   eax
c0011e9d:	e8 9c dc ff ff       	call   c000fb3e <Phys::freePage(unsigned long)>
c0011ea2:	83 c4 10             	add    esp,0x10
c0011ea5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ea9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011ead:	eb 84                	jmp    c0011e33 <VAS::~VAS()+0x77>
c0011eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb3:	25 00 04 00 00       	and    eax,0x400
c0011eb8:	74 19                	je     c0011ed3 <VAS::~VAS()+0x117>
c0011eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ebe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ec3:	83 ec 0c             	sub    esp,0xc
c0011ec6:	50                   	push   eax
c0011ec7:	e8 72 dc ff ff       	call   c000fb3e <Phys::freePage(unsigned long)>
c0011ecc:	83 c4 10             	add    esp,0x10
c0011ecf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ed3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011ed7:	e9 1e ff ff ff       	jmp    c0011dfa <VAS::~VAS()+0x3e>
c0011edc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ee3:	83 ec 0c             	sub    esp,0xc
c0011ee6:	50                   	push   eax
c0011ee7:	e8 d5 fc ff ff       	call   c0011bc1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011eec:	83 c4 10             	add    esp,0x10
c0011eef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011ef6:	83 ec 0c             	sub    esp,0xc
c0011ef9:	50                   	push   eax
c0011efa:	e8 3f dc ff ff       	call   c000fb3e <Phys::freePage(unsigned long)>
c0011eff:	83 c4 10             	add    esp,0x10
c0011f02:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f0a:	c1 e0 02             	shl    eax,0x2
c0011f0d:	83 ec 08             	sub    esp,0x8
c0011f10:	50                   	push   eax
c0011f11:	68 b0 b1 02 c0       	push   0xc002b1b0
c0011f16:	e8 ec 0b 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0011f1b:	83 c4 10             	add    esp,0x10
c0011f1e:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0011f23:	48                   	dec    eax
c0011f24:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0011f29:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0011f2e:	85 c0                	test   eax,eax
c0011f30:	75 01                	jne    c0011f33 <VAS::~VAS()+0x177>
c0011f32:	fb                   	sti    
c0011f33:	90                   	nop
c0011f34:	83 c4 2c             	add    esp,0x2c
c0011f37:	c3                   	ret    

c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011f38:	55                   	push   ebp
c0011f39:	57                   	push   edi
c0011f3a:	56                   	push   esi
c0011f3b:	53                   	push   ebx
c0011f3c:	83 ec 1c             	sub    esp,0x1c
c0011f3f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011f43:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f47:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011f4d:	77 08                	ja     c0011f57 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011f4f:	0f 20 d8             	mov    eax,cr3
c0011f52:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011f55:	75 47                	jne    c0011f9e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011f57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f5b:	09 d8                	or     eax,ebx
c0011f5d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f62:	75 57                	jne    c0011fbb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011f64:	89 de                	mov    esi,ebx
c0011f66:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f69:	c1 ee 16             	shr    esi,0x16
c0011f6c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011f73:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011f77:	74 54                	je     c0011fcd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f7d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011f83:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011f87:	c1 e6 0c             	shl    esi,0xc
c0011f8a:	c1 eb 0a             	shr    ebx,0xa
c0011f8d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011f93:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011f96:	83 c4 1c             	add    esp,0x1c
c0011f99:	5b                   	pop    ebx
c0011f9a:	5e                   	pop    esi
c0011f9b:	5f                   	pop    edi
c0011f9c:	5d                   	pop    ebp
c0011f9d:	c3                   	ret    
c0011f9e:	83 ec 0c             	sub    esp,0xc
c0011fa1:	68 d0 b1 02 c0       	push   0xc002b1d0
c0011fa6:	e8 5c 0b 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0011fab:	83 c4 10             	add    esp,0x10
c0011fae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fb2:	09 d8                	or     eax,ebx
c0011fb4:	a9 ff 0f 00 00       	test   eax,0xfff
c0011fb9:	74 a9                	je     c0011f64 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011fbb:	83 ec 0c             	sub    esp,0xc
c0011fbe:	68 38 b2 02 c0       	push   0xc002b238
c0011fc3:	e8 cf 86 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0011fc8:	83 c4 10             	add    esp,0x10
c0011fcb:	eb 97                	jmp    c0011f64 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011fcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011fd1:	e8 f2 db ff ff       	call   c000fbc8 <Phys::allocatePage()>
c0011fd6:	83 ec 0c             	sub    esp,0xc
c0011fd9:	89 c5                	mov    ebp,eax
c0011fdb:	8b 0d 30 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f330
c0011fe1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011fe5:	6a 01                	push   0x1
c0011fe7:	e8 15 f7 ff ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c0011fec:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011ff3:	6a 01                	push   0x1
c0011ff5:	50                   	push   eax
c0011ff6:	55                   	push   ebp
c0011ff7:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ffd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012001:	51                   	push   ecx
c0012002:	e8 27 02 00 00       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012007:	83 c4 1c             	add    esp,0x1c
c001200a:	68 00 10 00 00       	push   0x1000
c001200f:	6a 00                	push   0x0
c0012011:	50                   	push   eax
c0012012:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012016:	e8 35 e7 fe ff       	call   c0000750 <memset>
c001201b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001201f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012022:	e8 9a fb ff ff       	call   c0011bc1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012027:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001202b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001202e:	83 c4 10             	add    esp,0x10
c0012031:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012034:	e9 40 ff ff ff       	jmp    c0011f79 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012039:	90                   	nop

c001203a <VAS::allocatePages(int, int)>:
c001203a:	55                   	push   ebp
c001203b:	57                   	push   edi
c001203c:	56                   	push   esi
c001203d:	53                   	push   ebx
c001203e:	83 ec 1c             	sub    esp,0x1c
c0012041:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012045:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001204a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012050:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012056:	83 e0 01             	and    eax,0x1
c0012059:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001205d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012061:	0f 85 cc 00 00 00    	jne    c0012133 <VAS::allocatePages(int, int)+0xf9>
c0012067:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001206a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001206e:	85 c0                	test   eax,eax
c0012070:	0f 84 a1 00 00 00    	je     c0012117 <VAS::allocatePages(int, int)+0xdd>
c0012076:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001207a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001207e:	c1 e6 0c             	shl    esi,0xc
c0012081:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012085:	85 c0                	test   eax,eax
c0012087:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001208a:	7e 33                	jle    c00120bf <VAS::allocatePages(int, int)+0x85>
c001208c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012090:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012094:	81 cd 00 04 00 00    	or     ebp,0x400
c001209a:	e8 29 db ff ff       	call   c000fbc8 <Phys::allocatePage()>
c001209f:	55                   	push   ebp
c00120a0:	53                   	push   ebx
c00120a1:	50                   	push   eax
c00120a2:	57                   	push   edi
c00120a3:	e8 90 fe ff ff       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120a8:	83 c4 10             	add    esp,0x10
c00120ab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120b0:	74 03                	je     c00120b5 <VAS::allocatePages(int, int)+0x7b>
c00120b2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120bb:	39 de                	cmp    esi,ebx
c00120bd:	75 db                	jne    c001209a <VAS::allocatePages(int, int)+0x60>
c00120bf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120c4:	75 12                	jne    c00120d8 <VAS::allocatePages(int, int)+0x9e>
c00120c6:	0f 20 d8             	mov    eax,cr3
c00120c9:	0f 22 d8             	mov    cr3,eax
c00120cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120d0:	83 c4 1c             	add    esp,0x1c
c00120d3:	5b                   	pop    ebx
c00120d4:	5e                   	pop    esi
c00120d5:	5f                   	pop    edi
c00120d6:	5d                   	pop    ebp
c00120d7:	c3                   	ret    
c00120d8:	c1 ee 0a             	shr    esi,0xa
c00120db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00120df:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00120e5:	c1 eb 0a             	shr    ebx,0xa
c00120e8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00120ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120f4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120fa:	39 c3                	cmp    ebx,eax
c00120fc:	77 ce                	ja     c00120cc <VAS::allocatePages(int, int)+0x92>
c00120fe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012101:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012107:	39 d8                	cmp    eax,ebx
c0012109:	73 f3                	jae    c00120fe <VAS::allocatePages(int, int)+0xc4>
c001210b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001210f:	83 c4 1c             	add    esp,0x1c
c0012112:	5b                   	pop    ebx
c0012113:	5e                   	pop    esi
c0012114:	5f                   	pop    edi
c0012115:	5d                   	pop    ebp
c0012116:	c3                   	ret    
c0012117:	83 ec 0c             	sub    esp,0xc
c001211a:	68 5c b2 02 c0       	push   0xc002b25c
c001211f:	e8 73 85 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0012124:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012127:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001212b:	83 c4 10             	add    esp,0x10
c001212e:	e9 43 ff ff ff       	jmp    c0012076 <VAS::allocatePages(int, int)+0x3c>
c0012133:	83 ec 0c             	sub    esp,0xc
c0012136:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001213a:	e8 c2 f5 ff ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c001213f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012143:	83 c4 10             	add    esp,0x10
c0012146:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001214b:	0f 87 9b 00 00 00    	ja     c00121ec <VAS::allocatePages(int, int)+0x1b2>
c0012151:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012155:	85 d2                	test   edx,edx
c0012157:	7e 3c                	jle    c0012195 <VAS::allocatePages(int, int)+0x15b>
c0012159:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001215d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012161:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012165:	c1 e5 0c             	shl    ebp,0xc
c0012168:	81 ce 00 04 00 00    	or     esi,0x400
c001216e:	01 dd                	add    ebp,ebx
c0012170:	e8 53 da ff ff       	call   c000fbc8 <Phys::allocatePage()>
c0012175:	56                   	push   esi
c0012176:	53                   	push   ebx
c0012177:	50                   	push   eax
c0012178:	57                   	push   edi
c0012179:	e8 ba fd ff ff       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c001217e:	83 c4 10             	add    esp,0x10
c0012181:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012186:	74 03                	je     c001218b <VAS::allocatePages(int, int)+0x151>
c0012188:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001218b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012191:	39 dd                	cmp    ebp,ebx
c0012193:	75 db                	jne    c0012170 <VAS::allocatePages(int, int)+0x136>
c0012195:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001219a:	0f 84 26 ff ff ff    	je     c00120c6 <VAS::allocatePages(int, int)+0x8c>
c00121a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121a8:	89 d3                	mov    ebx,edx
c00121aa:	c1 e0 0c             	shl    eax,0xc
c00121ad:	c1 eb 0a             	shr    ebx,0xa
c00121b0:	01 d0                	add    eax,edx
c00121b2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121b8:	c1 e8 0a             	shr    eax,0xa
c00121bb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121c6:	2d 00 00 40 00       	sub    eax,0x400000
c00121cb:	39 c3                	cmp    ebx,eax
c00121cd:	0f 87 f9 fe ff ff    	ja     c00120cc <VAS::allocatePages(int, int)+0x92>
c00121d3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121d6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121dc:	39 d8                	cmp    eax,ebx
c00121de:	73 f3                	jae    c00121d3 <VAS::allocatePages(int, int)+0x199>
c00121e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121e4:	83 c4 1c             	add    esp,0x1c
c00121e7:	5b                   	pop    ebx
c00121e8:	5e                   	pop    esi
c00121e9:	5f                   	pop    edi
c00121ea:	5d                   	pop    ebp
c00121eb:	c3                   	ret    
c00121ec:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00121f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121f7:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00121fe:	0f 84 4d ff ff ff    	je     c0012151 <VAS::allocatePages(int, int)+0x117>
c0012204:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001220c:	e9 40 ff ff ff       	jmp    c0012151 <VAS::allocatePages(int, int)+0x117>
c0012211:	90                   	nop

c0012212 <VAS::setCPUSpecific(unsigned long)>:
c0012212:	83 ec 0c             	sub    esp,0xc
c0012215:	6a 05                	push   0x5
c0012217:	68 00 00 40 c2       	push   0xc2400000
c001221c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012224:	e8 0f fd ff ff       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012229:	83 c4 1c             	add    esp,0x1c
c001222c:	c3                   	ret    
c001222d:	90                   	nop

c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001222e:	55                   	push   ebp
c001222f:	57                   	push   edi
c0012230:	56                   	push   esi
c0012231:	53                   	push   ebx
c0012232:	83 ec 1c             	sub    esp,0x1c
c0012235:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001223a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001223e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012244:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012248:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001224e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012252:	83 e0 01             	and    eax,0x1
c0012255:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012259:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001225d:	85 c0                	test   eax,eax
c001225f:	7e 39                	jle    c001229a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012261:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012265:	89 f3                	mov    ebx,esi
c0012267:	c1 e0 0c             	shl    eax,0xc
c001226a:	01 f0                	add    eax,esi
c001226c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012270:	55                   	push   ebp
c0012271:	53                   	push   ebx
c0012272:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012276:	29 f0                	sub    eax,esi
c0012278:	01 d8                	add    eax,ebx
c001227a:	50                   	push   eax
c001227b:	57                   	push   edi
c001227c:	e8 b7 fc ff ff       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012281:	83 c4 10             	add    esp,0x10
c0012284:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012289:	74 03                	je     c001228e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001228b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001228e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012294:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012298:	75 d6                	jne    c0012270 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001229a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001229f:	75 10                	jne    c00122b1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00122a1:	0f 20 d8             	mov    eax,cr3
c00122a4:	0f 22 d8             	mov    cr3,eax
c00122a7:	83 c4 1c             	add    esp,0x1c
c00122aa:	89 f0                	mov    eax,esi
c00122ac:	5b                   	pop    ebx
c00122ad:	5e                   	pop    esi
c00122ae:	5f                   	pop    edi
c00122af:	5d                   	pop    ebp
c00122b0:	c3                   	ret    
c00122b1:	89 f3                	mov    ebx,esi
c00122b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122b7:	c1 eb 0a             	shr    ebx,0xa
c00122ba:	c1 e0 0c             	shl    eax,0xc
c00122bd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00122c3:	01 f0                	add    eax,esi
c00122c5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00122cb:	c1 e8 0a             	shr    eax,0xa
c00122ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d3:	2d 00 00 40 00       	sub    eax,0x400000
c00122d8:	39 c3                	cmp    ebx,eax
c00122da:	77 cb                	ja     c00122a7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00122dc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00122df:	81 c3 00 10 00 00    	add    ebx,0x1000
c00122e5:	39 d8                	cmp    eax,ebx
c00122e7:	73 f3                	jae    c00122dc <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00122e9:	83 c4 1c             	add    esp,0x1c
c00122ec:	89 f0                	mov    eax,esi
c00122ee:	5b                   	pop    ebx
c00122ef:	5e                   	pop    esi
c00122f0:	5f                   	pop    edi
c00122f1:	5d                   	pop    ebp
c00122f2:	c3                   	ret    
c00122f3:	90                   	nop

c00122f4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00122f4:	55                   	push   ebp
c00122f5:	57                   	push   edi
c00122f6:	56                   	push   esi
c00122f7:	53                   	push   ebx
c00122f8:	83 ec 1c             	sub    esp,0x1c
c00122fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00122ff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012303:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012307:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001230b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012310:	75 4a                	jne    c001235c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012312:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012316:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012319:	c1 eb 16             	shr    ebx,0x16
c001231c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012323:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012327:	74 4d                	je     c0012376 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012329:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001232d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012331:	c1 e8 0a             	shr    eax,0xa
c0012334:	80 fa 01             	cmp    dl,0x1
c0012337:	19 d2                	sbb    edx,edx
c0012339:	c1 e3 0c             	shl    ebx,0xc
c001233c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012340:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012346:	25 fc 0f 00 00       	and    eax,0xffc
c001234b:	01 d8                	add    eax,ebx
c001234d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012354:	83 c4 1c             	add    esp,0x1c
c0012357:	5b                   	pop    ebx
c0012358:	5e                   	pop    esi
c0012359:	5f                   	pop    edi
c001235a:	5d                   	pop    ebp
c001235b:	c3                   	ret    
c001235c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012360:	83 ec 0c             	sub    esp,0xc
c0012363:	68 88 b2 02 c0       	push   0xc002b288
c0012368:	e8 2a 83 00 00       	call   c001a697 <Krnl::panic(char const*)>
c001236d:	83 c4 10             	add    esp,0x10
c0012370:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012374:	eb 9c                	jmp    c0012312 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012376:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001237a:	e8 49 d8 ff ff       	call   c000fbc8 <Phys::allocatePage()>
c001237f:	83 ec 0c             	sub    esp,0xc
c0012382:	89 c5                	mov    ebp,eax
c0012384:	8b 0d 30 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f330
c001238a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001238e:	6a 01                	push   0x1
c0012390:	e8 6c f3 ff ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c0012395:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001239c:	6a 01                	push   0x1
c001239e:	50                   	push   eax
c001239f:	55                   	push   ebp
c00123a0:	81 cd 07 04 00 00    	or     ebp,0x407
c00123a6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123aa:	51                   	push   ecx
c00123ab:	e8 7e fe ff ff       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123b0:	83 c4 1c             	add    esp,0x1c
c00123b3:	68 00 10 00 00       	push   0x1000
c00123b8:	6a 00                	push   0x0
c00123ba:	50                   	push   eax
c00123bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123bf:	e8 8c e3 fe ff       	call   c0000750 <memset>
c00123c4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123c8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123cb:	e8 f1 f7 ff ff       	call   c0011bc1 <Virt::freeKernelVirtualPages(unsigned long)>
c00123d0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00123d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123dd:	e9 47 ff ff ff       	jmp    c0012329 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00123e2 <VAS::VAS(bool)>:
c00123e2:	53                   	push   ebx
c00123e3:	83 ec 28             	sub    esp,0x28
c00123e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00123ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00123f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012404:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012408:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001240c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001240f:	e8 b4 d7 ff ff       	call   c000fbc8 <Phys::allocatePage()>
c0012414:	89 c2                	mov    edx,eax
c0012416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001241a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001241d:	8b 1d 30 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f330
c0012423:	83 ec 0c             	sub    esp,0xc
c0012426:	6a 01                	push   0x1
c0012428:	e8 d4 f2 ff ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c001242d:	83 c4 10             	add    esp,0x10
c0012430:	89 c2                	mov    edx,eax
c0012432:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012436:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012439:	83 ec 0c             	sub    esp,0xc
c001243c:	6a 03                	push   0x3
c001243e:	6a 01                	push   0x1
c0012440:	52                   	push   edx
c0012441:	50                   	push   eax
c0012442:	53                   	push   ebx
c0012443:	e8 e6 fd ff ff       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012448:	83 c4 20             	add    esp,0x20
c001244b:	89 c2                	mov    edx,eax
c001244d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012451:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012454:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001245c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012464:	7f 1c                	jg     c0012482 <VAS::VAS(bool)+0xa0>
c0012466:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001246a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001246d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012471:	c1 e2 02             	shl    edx,0x2
c0012474:	01 d0                	add    eax,edx
c0012476:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001247c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012480:	eb da                	jmp    c001245c <VAS::VAS(bool)+0x7a>
c0012482:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001248a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012492:	7f 7a                	jg     c001250e <VAS::VAS(bool)+0x12c>
c0012494:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012498:	2d 00 02 00 00       	sub    eax,0x200
c001249d:	c1 e0 0c             	shl    eax,0xc
c00124a0:	83 c8 03             	or     eax,0x3
c00124a3:	89 c2                	mov    edx,eax
c00124a5:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00124aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124b0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00124b6:	83 e0 10             	and    eax,0x10
c00124b9:	84 c0                	test   al,al
c00124bb:	74 07                	je     c00124c4 <VAS::VAS(bool)+0xe2>
c00124bd:	b8 00 01 00 00       	mov    eax,0x100
c00124c2:	eb 05                	jmp    c00124c9 <VAS::VAS(bool)+0xe7>
c00124c4:	b8 00 00 00 00       	mov    eax,0x0
c00124c9:	09 d0                	or     eax,edx
c00124cb:	89 c1                	mov    ecx,eax
c00124cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124d1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00124d8:	c1 e2 02             	shl    edx,0x2
c00124db:	01 d0                	add    eax,edx
c00124dd:	89 ca                	mov    edx,ecx
c00124df:	89 10                	mov    DWORD PTR [eax],edx
c00124e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124e5:	2d 40 03 00 00       	sub    eax,0x340
c00124ea:	83 f8 7f             	cmp    eax,0x7f
c00124ed:	77 16                	ja     c0012505 <VAS::VAS(bool)+0x123>
c00124ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00124fa:	c1 e2 02             	shl    edx,0x2
c00124fd:	01 d0                	add    eax,edx
c00124ff:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012505:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012509:	e9 7c ff ff ff       	jmp    c001248a <VAS::VAS(bool)+0xa8>
c001250e:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0012513:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012519:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001251f:	83 e0 10             	and    eax,0x10
c0012522:	84 c0                	test   al,al
c0012524:	74 07                	je     c001252d <VAS::VAS(bool)+0x14b>
c0012526:	b8 03 41 00 00       	mov    eax,0x4103
c001252b:	eb 05                	jmp    c0012532 <VAS::VAS(bool)+0x150>
c001252d:	b8 03 40 00 00       	mov    eax,0x4003
c0012532:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012536:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012539:	81 c2 20 0c 00 00    	add    edx,0xc20
c001253f:	89 02                	mov    DWORD PTR [edx],eax
c0012541:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0012546:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001254c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012552:	83 ec 08             	sub    esp,0x8
c0012555:	50                   	push   eax
c0012556:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001255a:	e8 b3 fc ff ff       	call   c0012212 <VAS::setCPUSpecific(unsigned long)>
c001255f:	83 c4 10             	add    esp,0x10
c0012562:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012566:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012569:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001256e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012574:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001257a:	83 e0 10             	and    eax,0x10
c001257d:	84 c0                	test   al,al
c001257f:	74 07                	je     c0012588 <VAS::VAS(bool)+0x1a6>
c0012581:	b8 00 01 00 00       	mov    eax,0x100
c0012586:	eb 05                	jmp    c001258d <VAS::VAS(bool)+0x1ab>
c0012588:	b8 00 00 00 00       	mov    eax,0x0
c001258d:	09 c2                	or     edx,eax
c001258f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012593:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012596:	05 fc 0f 00 00       	add    eax,0xffc
c001259b:	83 ca 03             	or     edx,0x3
c001259e:	89 10                	mov    DWORD PTR [eax],edx
c00125a0:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00125a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125ab:	83 ec 0c             	sub    esp,0xc
c00125ae:	50                   	push   eax
c00125af:	e8 8c 1c 00 00       	call   c0014240 <Device::getName()>
c00125b4:	83 c4 10             	add    esp,0x10
c00125b7:	83 ec 08             	sub    esp,0x8
c00125ba:	68 cd b3 02 c0       	push   0xc002b3cd
c00125bf:	50                   	push   eax
c00125c0:	e8 d3 e2 fe ff       	call   c0000898 <strcmp>
c00125c5:	83 c4 10             	add    esp,0x10
c00125c8:	85 c0                	test   eax,eax
c00125ca:	0f 94 c0             	sete   al
c00125cd:	84 c0                	test   al,al
c00125cf:	0f 84 87 00 00 00    	je     c001265c <VAS::VAS(bool)+0x27a>
c00125d5:	fa                   	cli    
c00125d6:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c00125db:	40                   	inc    eax
c00125dc:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c00125e1:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00125e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125ec:	05 7c 09 00 00       	add    eax,0x97c
c00125f1:	83 ec 0c             	sub    esp,0xc
c00125f4:	50                   	push   eax
c00125f5:	e8 14 cd ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00125fa:	83 c4 10             	add    esp,0x10
c00125fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012602:	89 c3                	mov    ebx,eax
c0012604:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0012609:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001260f:	05 7c 09 00 00       	add    eax,0x97c
c0012614:	83 ec 0c             	sub    esp,0xc
c0012617:	50                   	push   eax
c0012618:	e8 f1 cc ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001261d:	83 c4 10             	add    esp,0x10
c0012620:	83 ec 08             	sub    esp,0x8
c0012623:	50                   	push   eax
c0012624:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012628:	e8 75 f5 ff ff       	call   c0011ba2 <VAS::getPageTableEntry(unsigned long)>
c001262d:	83 c4 10             	add    esp,0x10
c0012630:	8b 00                	mov    eax,DWORD PTR [eax]
c0012632:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012637:	6a 11                	push   0x11
c0012639:	53                   	push   ebx
c001263a:	50                   	push   eax
c001263b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001263f:	e8 f4 f8 ff ff       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012644:	83 c4 10             	add    esp,0x10
c0012647:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001264c:	48                   	dec    eax
c001264d:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0012652:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0012657:	85 c0                	test   eax,eax
c0012659:	75 01                	jne    c001265c <VAS::VAS(bool)+0x27a>
c001265b:	fb                   	sti    
c001265c:	90                   	nop
c001265d:	83 c4 28             	add    esp,0x28
c0012660:	5b                   	pop    ebx
c0012661:	c3                   	ret    

c0012662 <VAS::evict(unsigned long)>:
c0012662:	55                   	push   ebp
c0012663:	57                   	push   edi
c0012664:	56                   	push   esi
c0012665:	53                   	push   ebx
c0012666:	83 ec 1c             	sub    esp,0x1c
c0012669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001266d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012671:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012675:	e8 c8 f1 ff ff       	call   c0011842 <Virt::allocateSwapfilePage()>
c001267a:	89 c7                	mov    edi,eax
c001267c:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c0012681:	85 c0                	test   eax,eax
c0012683:	7e 3d                	jle    c00126c2 <VAS::evict(unsigned long)+0x60>
c0012685:	89 ee                	mov    esi,ebp
c0012687:	31 db                	xor    ebx,ebx
c0012689:	83 ec 0c             	sub    esp,0xc
c001268c:	57                   	push   edi
c001268d:	e8 9e f1 ff ff       	call   c0011830 <Virt::swapIDToSector(unsigned long)>
c0012692:	89 34 24             	mov    DWORD PTR [esp],esi
c0012695:	01 d8                	add    eax,ebx
c0012697:	6a 01                	push   0x1
c0012699:	31 d2                	xor    edx,edx
c001269b:	43                   	inc    ebx
c001269c:	52                   	push   edx
c001269d:	81 c6 00 02 00 00    	add    esi,0x200
c00126a3:	50                   	push   eax
c00126a4:	0f be 05 58 e1 02 c0 	movsx  eax,BYTE PTR ds:0xc002e158
c00126ab:	ff 34 85 bc f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0944]
c00126b2:	e8 39 3e 00 00       	call   c00164f0 <LogicalDisk::write(unsigned long long, int, void*)>
c00126b7:	83 c4 20             	add    esp,0x20
c00126ba:	39 1d 4c e1 02 c0    	cmp    DWORD PTR ds:0xc002e14c,ebx
c00126c0:	7f c7                	jg     c0012689 <VAS::evict(unsigned long)+0x27>
c00126c2:	83 ec 08             	sub    esp,0x8
c00126c5:	c1 e7 0b             	shl    edi,0xb
c00126c8:	55                   	push   ebp
c00126c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126cd:	e8 d0 f4 ff ff       	call   c0011ba2 <VAS::getPageTableEntry(unsigned long)>
c00126d2:	83 c4 0c             	add    esp,0xc
c00126d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00126d7:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00126dd:	09 d7                	or     edi,edx
c00126df:	89 38                	mov    DWORD PTR [eax],edi
c00126e1:	a1 28 f3 02 c0       	mov    eax,ds:0xc002f328
c00126e6:	40                   	inc    eax
c00126e7:	a3 28 f3 02 c0       	mov    ds:0xc002f328,eax
c00126ec:	0f 20 da             	mov    edx,cr3
c00126ef:	0f 22 da             	mov    cr3,edx
c00126f2:	50                   	push   eax
c00126f3:	55                   	push   ebp
c00126f4:	68 db b3 02 c0       	push   0xc002b3db
c00126f9:	e8 09 04 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00126fe:	a1 24 f3 02 c0       	mov    eax,ds:0xc002f324
c0012703:	c7 44 24 40 f0 b3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b3f0
c001270b:	8d 50 01             	lea    edx,[eax+0x1]
c001270e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012712:	89 15 24 f3 02 c0    	mov    DWORD PTR ds:0xc002f324,edx
c0012718:	83 c4 2c             	add    esp,0x2c
c001271b:	5b                   	pop    ebx
c001271c:	5e                   	pop    esi
c001271d:	5f                   	pop    edi
c001271e:	5d                   	pop    ebp
c001271f:	e9 e3 03 00 00       	jmp    c0012b07 <Dbg::kprintf(char const*, ...)>

c0012724 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012724:	55                   	push   ebp
c0012725:	57                   	push   edi
c0012726:	56                   	push   esi
c0012727:	53                   	push   ebx
c0012728:	83 ec 0c             	sub    esp,0xc
c001272b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001272f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012735:	0f 84 dc 00 00 00    	je     c0012817 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c001273b:	56                   	push   esi
c001273c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012740:	e8 5d f4 ff ff       	call   c0011ba2 <VAS::getPageTableEntry(unsigned long)>
c0012745:	5b                   	pop    ebx
c0012746:	85 c0                	test   eax,eax
c0012748:	5f                   	pop    edi
c0012749:	89 c3                	mov    ebx,eax
c001274b:	0f 84 c6 00 00 00    	je     c0012817 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012751:	8b 38                	mov    edi,DWORD PTR [eax]
c0012753:	31 c0                	xor    eax,eax
c0012755:	89 fa                	mov    edx,edi
c0012757:	81 e2 01 04 00 00    	and    edx,0x401
c001275d:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012763:	0f 85 b0 00 00 00    	jne    c0012819 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012769:	e8 5a d4 ff ff       	call   c000fbc8 <Phys::allocatePage()>
c001276e:	c1 ef 0b             	shr    edi,0xb
c0012771:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012773:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012779:	09 c2                	or     edx,eax
c001277b:	81 ca 01 08 00 00    	or     edx,0x801
c0012781:	89 13                	mov    DWORD PTR [ebx],edx
c0012783:	8b 0d 4c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e14c
c0012789:	85 c9                	test   ecx,ecx
c001278b:	7e 3d                	jle    c00127ca <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c001278d:	89 f5                	mov    ebp,esi
c001278f:	31 db                	xor    ebx,ebx
c0012791:	83 ec 0c             	sub    esp,0xc
c0012794:	57                   	push   edi
c0012795:	e8 96 f0 ff ff       	call   c0011830 <Virt::swapIDToSector(unsigned long)>
c001279a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001279d:	01 d8                	add    eax,ebx
c001279f:	6a 01                	push   0x1
c00127a1:	31 d2                	xor    edx,edx
c00127a3:	43                   	inc    ebx
c00127a4:	52                   	push   edx
c00127a5:	81 c5 00 02 00 00    	add    ebp,0x200
c00127ab:	50                   	push   eax
c00127ac:	0f be 05 58 e1 02 c0 	movsx  eax,BYTE PTR ds:0xc002e158
c00127b3:	ff 34 85 bc f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0944]
c00127ba:	e8 c5 3c 00 00       	call   c0016484 <LogicalDisk::read(unsigned long long, int, void*)>
c00127bf:	83 c4 20             	add    esp,0x20
c00127c2:	39 1d 4c e1 02 c0    	cmp    DWORD PTR ds:0xc002e14c,ebx
c00127c8:	7f c7                	jg     c0012791 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c00127ca:	a1 28 f3 02 c0       	mov    eax,ds:0xc002f328
c00127cf:	48                   	dec    eax
c00127d0:	52                   	push   edx
c00127d1:	a3 28 f3 02 c0       	mov    ds:0xc002f328,eax
c00127d6:	50                   	push   eax
c00127d7:	56                   	push   esi
c00127d8:	68 01 b4 02 c0       	push   0xc002b401
c00127dd:	e8 25 03 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00127e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127e5:	e8 28 f0 ff ff       	call   c0011812 <Virt::freeSwapfilePage(unsigned long)>
c00127ea:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c00127ef:	83 c4 10             	add    esp,0x10
c00127f2:	48                   	dec    eax
c00127f3:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c00127f8:	85 c0                	test   eax,eax
c00127fa:	75 01                	jne    c00127fd <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c00127fc:	fb                   	sti    
c00127fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012801:	25 ff 0f 00 00       	and    eax,0xfff
c0012806:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001280b:	77 14                	ja     c0012821 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c001280d:	0f 20 d8             	mov    eax,cr3
c0012810:	0f 22 d8             	mov    cr3,eax
c0012813:	b0 01                	mov    al,0x1
c0012815:	eb 02                	jmp    c0012819 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012817:	31 c0                	xor    eax,eax
c0012819:	83 c4 0c             	add    esp,0xc
c001281c:	5b                   	pop    ebx
c001281d:	5e                   	pop    esi
c001281e:	5f                   	pop    edi
c001281f:	5d                   	pop    ebp
c0012820:	c3                   	ret    
c0012821:	83 ec 0c             	sub    esp,0xc
c0012824:	68 16 b4 02 c0       	push   0xc002b416
c0012829:	e8 d9 02 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001282e:	83 c4 10             	add    esp,0x10
c0012831:	eb da                	jmp    c001280d <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012833:	90                   	nop

c0012834 <VAS::scanForEviction()>:
c0012834:	57                   	push   edi
c0012835:	56                   	push   esi
c0012836:	53                   	push   ebx
c0012837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001283b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001283e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012844:	75 0e                	jne    c0012854 <VAS::scanForEviction()+0x20>
c0012846:	89 da                	mov    edx,ebx
c0012848:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001284b:	c1 ea 16             	shr    edx,0x16
c001284e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012852:	74 48                	je     c001289c <VAS::scanForEviction()+0x68>
c0012854:	53                   	push   ebx
c0012855:	56                   	push   esi
c0012856:	e8 47 f3 ff ff       	call   c0011ba2 <VAS::getPageTableEntry(unsigned long)>
c001285b:	5a                   	pop    edx
c001285c:	8b 38                	mov    edi,DWORD PTR [eax]
c001285e:	59                   	pop    ecx
c001285f:	89 fa                	mov    edx,edi
c0012861:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012867:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c001286d:	74 3d                	je     c00128ac <VAS::scanForEviction()+0x78>
c001286f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012875:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c001287b:	76 2a                	jbe    c00128a7 <VAS::scanForEviction()+0x73>
c001287d:	31 db                	xor    ebx,ebx
c001287f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012886:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001288c:	75 c6                	jne    c0012854 <VAS::scanForEviction()+0x20>
c001288e:	89 da                	mov    edx,ebx
c0012890:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012893:	c1 ea 16             	shr    edx,0x16
c0012896:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001289a:	75 b8                	jne    c0012854 <VAS::scanForEviction()+0x20>
c001289c:	81 c3 00 00 40 00    	add    ebx,0x400000
c00128a2:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00128a5:	eb 97                	jmp    c001283e <VAS::scanForEviction()+0xa>
c00128a7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00128aa:	eb 92                	jmp    c001283e <VAS::scanForEviction()+0xa>
c00128ac:	f7 c7 01 00 00 00    	test   edi,0x1
c00128b2:	74 bb                	je     c001286f <VAS::scanForEviction()+0x3b>
c00128b4:	f7 c7 20 00 00 00    	test   edi,0x20
c00128ba:	74 0a                	je     c00128c6 <VAS::scanForEviction()+0x92>
c00128bc:	83 e7 df             	and    edi,0xffffffdf
c00128bf:	89 38                	mov    DWORD PTR [eax],edi
c00128c1:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00128c4:	eb a9                	jmp    c001286f <VAS::scanForEviction()+0x3b>
c00128c6:	83 ec 08             	sub    esp,0x8
c00128c9:	53                   	push   ebx
c00128ca:	56                   	push   esi
c00128cb:	e8 92 fd ff ff       	call   c0012662 <VAS::evict(unsigned long)>
c00128d0:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00128d7:	83 c4 10             	add    esp,0x10
c00128da:	89 f8                	mov    eax,edi
c00128dc:	5b                   	pop    ebx
c00128dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128e2:	5e                   	pop    esi
c00128e3:	5f                   	pop    edi
c00128e4:	c3                   	ret    

c00128e5 <mapVASFirstTime>:
c00128e5:	55                   	push   ebp
c00128e6:	57                   	push   edi
c00128e7:	56                   	push   esi
c00128e8:	53                   	push   ebx
c00128e9:	83 ec 0c             	sub    esp,0xc
c00128ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00128f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00128f4:	4a                   	dec    edx
c00128f5:	0f 84 8e 00 00 00    	je     c0012989 <mapVASFirstTime+0xa4>
c00128fb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00128fe:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012901:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012906:	c1 e5 15             	shl    ebp,0x15
c0012909:	be 00 90 e7 01       	mov    esi,0x1e79000
c001290e:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012914:	29 eb                	sub    ebx,ebp
c0012916:	29 ee                	sub    esi,ebp
c0012918:	e8 ab d2 ff ff       	call   c000fbc8 <Phys::allocatePage()>
c001291d:	83 ec 0c             	sub    esp,0xc
c0012920:	68 03 04 00 00       	push   0x403
c0012925:	6a 01                	push   0x1
c0012927:	53                   	push   ebx
c0012928:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001292e:	50                   	push   eax
c001292f:	57                   	push   edi
c0012930:	e8 f9 f8 ff ff       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012935:	83 c4 20             	add    esp,0x20
c0012938:	39 f3                	cmp    ebx,esi
c001293a:	75 dc                	jne    c0012918 <mapVASFirstTime+0x33>
c001293c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012941:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012946:	29 ee                	sub    esi,ebp
c0012948:	29 e8                	sub    eax,ebp
c001294a:	89 c5                	mov    ebp,eax
c001294c:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012950:	19 db                	sbb    ebx,ebx
c0012952:	e8 71 d2 ff ff       	call   c000fbc8 <Phys::allocatePage()>
c0012957:	83 e3 04             	and    ebx,0x4
c001295a:	83 ec 0c             	sub    esp,0xc
c001295d:	81 c3 03 04 00 00    	add    ebx,0x403
c0012963:	53                   	push   ebx
c0012964:	6a 01                	push   0x1
c0012966:	56                   	push   esi
c0012967:	81 ee 00 10 00 00    	sub    esi,0x1000
c001296d:	50                   	push   eax
c001296e:	57                   	push   edi
c001296f:	e8 ba f8 ff ff       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012974:	83 c4 20             	add    esp,0x20
c0012977:	39 f5                	cmp    ebp,esi
c0012979:	75 d1                	jne    c001294c <mapVASFirstTime+0x67>
c001297b:	0f 20 d8             	mov    eax,cr3
c001297e:	0f 22 d8             	mov    cr3,eax
c0012981:	83 c4 0c             	add    esp,0xc
c0012984:	5b                   	pop    ebx
c0012985:	5e                   	pop    esi
c0012986:	5f                   	pop    edi
c0012987:	5d                   	pop    ebp
c0012988:	c3                   	ret    
c0012989:	83 ec 0c             	sub    esp,0xc
c001298c:	68 26 b4 02 c0       	push   0xc002b426
c0012991:	e8 71 01 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0012996:	83 c4 10             	add    esp,0x10
c0012999:	83 c4 0c             	add    esp,0xc
c001299c:	5b                   	pop    ebx
c001299d:	5e                   	pop    esi
c001299e:	5f                   	pop    edi
c001299f:	5d                   	pop    ebp
c00129a0:	c3                   	ret    

c00129a1 <__cxa_atexit>:
c00129a1:	31 c0                	xor    eax,eax
c00129a3:	c3                   	ret    

c00129a4 <__cxa_finalize>:
c00129a4:	c3                   	ret    

c00129a5 <__stack_chk_fail>:
c00129a5:	55                   	push   ebp
c00129a6:	89 e5                	mov    ebp,esp
c00129a8:	83 ec 14             	sub    esp,0x14
c00129ab:	68 3f b4 02 c0       	push   0xc002b43f
c00129b0:	e8 52 01 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00129b5:	58                   	pop    eax
c00129b6:	5a                   	pop    edx
c00129b7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00129ba:	68 8f b4 02 c0       	push   0xc002b48f
c00129bf:	e8 43 01 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00129c4:	59                   	pop    ecx
c00129c5:	58                   	pop    eax
c00129c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129cc:	68 8f b4 02 c0       	push   0xc002b48f
c00129d1:	e8 31 01 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00129d6:	5a                   	pop    edx
c00129d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129da:	59                   	pop    ecx
c00129db:	8b 00                	mov    eax,DWORD PTR [eax]
c00129dd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129e0:	68 8f b4 02 c0       	push   0xc002b48f
c00129e5:	e8 1d 01 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00129ea:	5a                   	pop    edx
c00129eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129ee:	59                   	pop    ecx
c00129ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00129f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00129f3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129f6:	68 8f b4 02 c0       	push   0xc002b48f
c00129fb:	e8 07 01 00 00       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0012a00:	c7 04 24 97 b4 02 c0 	mov    DWORD PTR [esp],0xc002b497
c0012a07:	e8 8b 7c 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0012a0c:	83 c4 10             	add    esp,0x10
c0012a0f:	c9                   	leave  
c0012a10:	c3                   	ret    

c0012a11 <__cxa_pure_virtual>:
c0012a11:	83 ec 18             	sub    esp,0x18
c0012a14:	68 af b4 02 c0       	push   0xc002b4af
c0012a19:	e8 79 7c 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0012a1e:	83 c4 1c             	add    esp,0x1c
c0012a21:	c3                   	ret    

c0012a22 <operator new[](unsigned long)>:
c0012a22:	e9 65 ce ff ff       	jmp    c000f88c <malloc>

c0012a27 <operator delete(void*, unsigned long)>:
c0012a27:	e9 80 ce ff ff       	jmp    c000f8ac <rfree>

c0012a2c <operator delete[](void*)>:
c0012a2c:	e9 7b ce ff ff       	jmp    c000f8ac <rfree>

c0012a31 <operator delete[](void*, unsigned long)>:
c0012a31:	e9 76 ce ff ff       	jmp    c000f8ac <rfree>

c0012a36 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012a36:	57                   	push   edi
c0012a37:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012a3c:	56                   	push   esi
c0012a3d:	be c4 b4 02 c0       	mov    esi,0xc002b4c4
c0012a42:	53                   	push   ebx
c0012a43:	83 ec 40             	sub    esp,0x40
c0012a46:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a4a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012a4e:	fc                   	cld    
c0012a4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a51:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012a55:	83 f9 3e             	cmp    ecx,0x3e
c0012a58:	7e 05                	jle    c0012a5f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012a5a:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012a5f:	89 df                	mov    edi,ebx
c0012a61:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a65:	eb 02                	jmp    c0012a69 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012a67:	89 c7                	mov    edi,eax
c0012a69:	31 d2                	xor    edx,edx
c0012a6b:	46                   	inc    esi
c0012a6c:	89 f8                	mov    eax,edi
c0012a6e:	f7 f1                	div    ecx
c0012a70:	39 cf                	cmp    edi,ecx
c0012a72:	73 f3                	jae    c0012a67 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012a74:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a77:	eb 02                	jmp    c0012a7b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012a79:	89 c3                	mov    ebx,eax
c0012a7b:	31 d2                	xor    edx,edx
c0012a7d:	4e                   	dec    esi
c0012a7e:	89 d8                	mov    eax,ebx
c0012a80:	f7 f1                	div    ecx
c0012a82:	39 cb                	cmp    ebx,ecx
c0012a84:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012a88:	88 16                	mov    BYTE PTR [esi],dl
c0012a8a:	73 ed                	jae    c0012a79 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012a8c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012a90:	83 c4 40             	add    esp,0x40
c0012a93:	5b                   	pop    ebx
c0012a94:	5e                   	pop    esi
c0012a95:	5f                   	pop    edi
c0012a96:	c3                   	ret    

c0012a97 <Dbg::logc(char)>:
c0012a97:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a9b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012aa0:	ec                   	in     al,dx
c0012aa1:	a8 20                	test   al,0x20
c0012aa3:	74 fb                	je     c0012aa0 <Dbg::logc(char)+0x9>
c0012aa5:	ba f8 03 00 00       	mov    edx,0x3f8
c0012aaa:	88 c8                	mov    al,cl
c0012aac:	ee                   	out    dx,al
c0012aad:	c3                   	ret    

c0012aae <Dbg::logs(char*)>:
c0012aae:	53                   	push   ebx
c0012aaf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ab3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ab6:	84 c0                	test   al,al
c0012ab8:	74 0f                	je     c0012ac9 <Dbg::logs(char*)+0x1b>
c0012aba:	50                   	push   eax
c0012abb:	43                   	inc    ebx
c0012abc:	e8 d6 ff ff ff       	call   c0012a97 <Dbg::logc(char)>
c0012ac1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ac4:	5a                   	pop    edx
c0012ac5:	84 c0                	test   al,al
c0012ac7:	75 f1                	jne    c0012aba <Dbg::logs(char*)+0xc>
c0012ac9:	5b                   	pop    ebx
c0012aca:	c3                   	ret    

c0012acb <Dbg::logWriteInt(unsigned int)>:
c0012acb:	83 ec 10             	sub    esp,0x10
c0012ace:	6a 0a                	push   0xa
c0012ad0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ad4:	50                   	push   eax
c0012ad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ad9:	e8 58 ff ff ff       	call   c0012a36 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ade:	50                   	push   eax
c0012adf:	e8 ca ff ff ff       	call   c0012aae <Dbg::logs(char*)>
c0012ae4:	83 c4 20             	add    esp,0x20
c0012ae7:	c3                   	ret    

c0012ae8 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012ae8:	83 ec 10             	sub    esp,0x10
c0012aeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012aef:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012af3:	50                   	push   eax
c0012af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012af8:	e8 39 ff ff ff       	call   c0012a36 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012afd:	50                   	push   eax
c0012afe:	e8 ab ff ff ff       	call   c0012aae <Dbg::logs(char*)>
c0012b03:	83 c4 20             	add    esp,0x20
c0012b06:	c3                   	ret    

c0012b07 <Dbg::kprintf(char const*, ...)>:
c0012b07:	55                   	push   ebp
c0012b08:	57                   	push   edi
c0012b09:	56                   	push   esi
c0012b0a:	53                   	push   ebx
c0012b0b:	83 ec 0c             	sub    esp,0xc
c0012b0e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b12:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012b16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b1a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012b1d:	84 c0                	test   al,al
c0012b1f:	74 4a                	je     c0012b6b <Dbg::kprintf(char const*, ...)+0x64>
c0012b21:	31 db                	xor    ebx,ebx
c0012b23:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012b26:	3c 25                	cmp    al,0x25
c0012b28:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012b2b:	0f 85 e4 00 00 00    	jne    c0012c15 <Dbg::kprintf(char const*, ...)+0x10e>
c0012b31:	83 c3 02             	add    ebx,0x2
c0012b34:	8a 07                	mov    al,BYTE PTR [edi]
c0012b36:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012b39:	83 e8 25             	sub    eax,0x25
c0012b3c:	3c 53                	cmp    al,0x53
c0012b3e:	0f 87 ba 00 00 00    	ja     c0012bfe <Dbg::kprintf(char const*, ...)+0xf7>
c0012b44:	0f b6 c0             	movzx  eax,al
c0012b47:	ff 24 85 04 b5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4afc]
c0012b4e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b52:	89 c8                	mov    eax,ecx
c0012b54:	83 c1 04             	add    ecx,0x4
c0012b57:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012b5b:	ff 30                	push   DWORD PTR [eax]
c0012b5d:	e8 4c ff ff ff       	call   c0012aae <Dbg::logs(char*)>
c0012b62:	58                   	pop    eax
c0012b63:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012b67:	84 c0                	test   al,al
c0012b69:	75 b8                	jne    c0012b23 <Dbg::kprintf(char const*, ...)+0x1c>
c0012b6b:	83 c4 0c             	add    esp,0xc
c0012b6e:	5b                   	pop    ebx
c0012b6f:	5e                   	pop    esi
c0012b70:	5f                   	pop    edi
c0012b71:	5d                   	pop    ebp
c0012b72:	c3                   	ret    
c0012b73:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b77:	89 d0                	mov    eax,edx
c0012b79:	83 c2 04             	add    edx,0x4
c0012b7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b80:	ff 30                	push   DWORD PTR [eax]
c0012b82:	e8 44 ff ff ff       	call   c0012acb <Dbg::logWriteInt(unsigned int)>
c0012b87:	58                   	pop    eax
c0012b88:	eb d9                	jmp    c0012b63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b8e:	89 d0                	mov    eax,edx
c0012b90:	83 c2 04             	add    edx,0x4
c0012b93:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012b96:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b9a:	50                   	push   eax
c0012b9b:	e8 f7 fe ff ff       	call   c0012a97 <Dbg::logc(char)>
c0012ba0:	58                   	pop    eax
c0012ba1:	eb c0                	jmp    c0012b63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ba3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ba7:	89 c8                	mov    eax,ecx
c0012ba9:	83 c1 04             	add    ecx,0x4
c0012bac:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bb0:	ff 30                	push   DWORD PTR [eax]
c0012bb2:	e8 14 ff ff ff       	call   c0012acb <Dbg::logWriteInt(unsigned int)>
c0012bb7:	5f                   	pop    edi
c0012bb8:	eb a9                	jmp    c0012b63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bbe:	89 c8                	mov    eax,ecx
c0012bc0:	83 c1 04             	add    ecx,0x4
c0012bc3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bc7:	6a 10                	push   0x10
c0012bc9:	ff 30                	push   DWORD PTR [eax]
c0012bcb:	e8 18 ff ff ff       	call   c0012ae8 <Dbg::logWriteIntBase(unsigned int, int)>
c0012bd0:	59                   	pop    ecx
c0012bd1:	5f                   	pop    edi
c0012bd2:	eb 8f                	jmp    c0012b63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012bd8:	89 d0                	mov    eax,edx
c0012bda:	83 c2 08             	add    edx,0x8
c0012bdd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012be1:	6a 10                	push   0x10
c0012be3:	ff 30                	push   DWORD PTR [eax]
c0012be5:	e8 fe fe ff ff       	call   c0012ae8 <Dbg::logWriteIntBase(unsigned int, int)>
c0012bea:	58                   	pop    eax
c0012beb:	5a                   	pop    edx
c0012bec:	e9 72 ff ff ff       	jmp    c0012b63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bf1:	6a 25                	push   0x25
c0012bf3:	e8 9f fe ff ff       	call   c0012a97 <Dbg::logc(char)>
c0012bf8:	58                   	pop    eax
c0012bf9:	e9 65 ff ff ff       	jmp    c0012b63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bfe:	6a 25                	push   0x25
c0012c00:	e8 92 fe ff ff       	call   c0012a97 <Dbg::logc(char)>
c0012c05:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012c08:	50                   	push   eax
c0012c09:	e8 89 fe ff ff       	call   c0012a97 <Dbg::logc(char)>
c0012c0e:	5a                   	pop    edx
c0012c0f:	59                   	pop    ecx
c0012c10:	e9 4e ff ff ff       	jmp    c0012b63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c15:	50                   	push   eax
c0012c16:	89 eb                	mov    ebx,ebp
c0012c18:	e8 7a fe ff ff       	call   c0012a97 <Dbg::logc(char)>
c0012c1d:	89 fd                	mov    ebp,edi
c0012c1f:	58                   	pop    eax
c0012c20:	e9 3e ff ff ff       	jmp    c0012b63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c25:	90                   	nop

c0012c26 <File::read(unsigned long long, void*, int*)>:
c0012c26:	53                   	push   ebx
c0012c27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c2f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c36:	3c 19                	cmp    al,0x19
c0012c38:	77 35                	ja     c0012c6f <File::read(unsigned long long, void*, int*)+0x49>
c0012c3a:	8b 04 85 c0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0840]
c0012c41:	85 c0                	test   eax,eax
c0012c43:	74 2a                	je     c0012c6f <File::read(unsigned long long, void*, int*)+0x49>
c0012c45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c4b:	85 c0                	test   eax,eax
c0012c4d:	74 20                	je     c0012c6f <File::read(unsigned long long, void*, int*)+0x49>
c0012c4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c53:	74 21                	je     c0012c76 <File::read(unsigned long long, void*, int*)+0x50>
c0012c55:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c5b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c69:	5b                   	pop    ebx
c0012c6a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012c6d:	ff e0                	jmp    eax
c0012c6f:	b8 0b 00 00 00       	mov    eax,0xb
c0012c74:	eb 05                	jmp    c0012c7b <File::read(unsigned long long, void*, int*)+0x55>
c0012c76:	b8 05 00 00 00       	mov    eax,0x5
c0012c7b:	5b                   	pop    ebx
c0012c7c:	c3                   	ret    
c0012c7d:	90                   	nop

c0012c7e <File::write(unsigned long long, void*, int*)>:
c0012c7e:	53                   	push   ebx
c0012c7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c87:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c8e:	3c 19                	cmp    al,0x19
c0012c90:	77 35                	ja     c0012cc7 <File::write(unsigned long long, void*, int*)+0x49>
c0012c92:	8b 04 85 c0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0840]
c0012c99:	85 c0                	test   eax,eax
c0012c9b:	74 2a                	je     c0012cc7 <File::write(unsigned long long, void*, int*)+0x49>
c0012c9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ca3:	85 c0                	test   eax,eax
c0012ca5:	74 20                	je     c0012cc7 <File::write(unsigned long long, void*, int*)+0x49>
c0012ca7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cab:	74 21                	je     c0012cce <File::write(unsigned long long, void*, int*)+0x50>
c0012cad:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012caf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012cb3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012cb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012cbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012cc1:	5b                   	pop    ebx
c0012cc2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012cc5:	ff e0                	jmp    eax
c0012cc7:	b8 0b 00 00 00       	mov    eax,0xb
c0012ccc:	eb 05                	jmp    c0012cd3 <File::write(unsigned long long, void*, int*)+0x55>
c0012cce:	b8 05 00 00 00       	mov    eax,0x5
c0012cd3:	5b                   	pop    ebx
c0012cd4:	c3                   	ret    
c0012cd5:	90                   	nop

c0012cd6 <Directory::read(unsigned long long, void*, int*)>:
c0012cd6:	53                   	push   ebx
c0012cd7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012cdb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012cdf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ce6:	3c 19                	cmp    al,0x19
c0012ce8:	77 35                	ja     c0012d1f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cea:	8b 04 85 c0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0840]
c0012cf1:	85 c0                	test   eax,eax
c0012cf3:	74 2a                	je     c0012d1f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cf5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cfb:	85 c0                	test   eax,eax
c0012cfd:	74 20                	je     c0012d1f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d03:	74 21                	je     c0012d26 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012d05:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d0b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d19:	5b                   	pop    ebx
c0012d1a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012d1d:	ff e0                	jmp    eax
c0012d1f:	b8 0b 00 00 00       	mov    eax,0xb
c0012d24:	eb 05                	jmp    c0012d2b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012d26:	b8 05 00 00 00       	mov    eax,0x5
c0012d2b:	5b                   	pop    ebx
c0012d2c:	c3                   	ret    
c0012d2d:	90                   	nop

c0012d2e <Directory::write(unsigned long long, void*, int*)>:
c0012d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d32:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012d39:	b8 0b 00 00 00       	mov    eax,0xb
c0012d3e:	80 fa 19             	cmp    dl,0x19
c0012d41:	77 18                	ja     c0012d5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d43:	8b 14 95 c0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0840]
c0012d4a:	85 d2                	test   edx,edx
c0012d4c:	74 0d                	je     c0012d5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d4e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012d55:	19 c0                	sbb    eax,eax
c0012d57:	83 e0 0a             	and    eax,0xa
c0012d5a:	40                   	inc    eax
c0012d5b:	c3                   	ret    

c0012d5c <File::isAtty()>:
c0012d5c:	31 c0                	xor    eax,eax
c0012d5e:	c3                   	ret    
c0012d5f:	90                   	nop

c0012d60 <Directory::isAtty()>:
c0012d60:	31 c0                	xor    eax,eax
c0012d62:	c3                   	ret    
c0012d63:	90                   	nop

c0012d64 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012d64:	b8 0a 00 00 00       	mov    eax,0xa
c0012d69:	c3                   	ret    

c0012d6a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012d6a:	b8 0a 00 00 00       	mov    eax,0xa
c0012d6f:	c3                   	ret    

c0012d70 <Filesystem::getFileFirstSector(char const*)>:
c0012d70:	31 c0                	xor    eax,eax
c0012d72:	31 d2                	xor    edx,edx
c0012d74:	c3                   	ret    
c0012d75:	90                   	nop

c0012d76 <File::~File()>:
c0012d76:	83 ec 0c             	sub    esp,0xc
c0012d79:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c0012d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d82:	89 10                	mov    DWORD PTR [eax],edx
c0012d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d88:	83 ec 0c             	sub    esp,0xc
c0012d8b:	50                   	push   eax
c0012d8c:	e8 0f e7 ff ff       	call   c00114a0 <UnixFile::~UnixFile()>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	90                   	nop
c0012d95:	83 c4 0c             	add    esp,0xc
c0012d98:	c3                   	ret    
c0012d99:	90                   	nop

c0012d9a <File::~File()>:
c0012d9a:	83 ec 0c             	sub    esp,0xc
c0012d9d:	83 ec 0c             	sub    esp,0xc
c0012da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da4:	e8 cd ff ff ff       	call   c0012d76 <File::~File()>
c0012da9:	83 c4 10             	add    esp,0x10
c0012dac:	83 ec 08             	sub    esp,0x8
c0012daf:	68 14 01 00 00       	push   0x114
c0012db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012db8:	e8 6a fc ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0012dbd:	83 c4 10             	add    esp,0x10
c0012dc0:	83 c4 0c             	add    esp,0xc
c0012dc3:	c3                   	ret    

c0012dc4 <Directory::~Directory()>:
c0012dc4:	83 ec 0c             	sub    esp,0xc
c0012dc7:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c0012dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd0:	89 10                	mov    DWORD PTR [eax],edx
c0012dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd6:	83 ec 0c             	sub    esp,0xc
c0012dd9:	50                   	push   eax
c0012dda:	e8 c1 e6 ff ff       	call   c00114a0 <UnixFile::~UnixFile()>
c0012ddf:	83 c4 10             	add    esp,0x10
c0012de2:	90                   	nop
c0012de3:	83 c4 0c             	add    esp,0xc
c0012de6:	c3                   	ret    
c0012de7:	90                   	nop

c0012de8 <Directory::~Directory()>:
c0012de8:	83 ec 0c             	sub    esp,0xc
c0012deb:	83 ec 0c             	sub    esp,0xc
c0012dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012df2:	e8 cd ff ff ff       	call   c0012dc4 <Directory::~Directory()>
c0012df7:	83 c4 10             	add    esp,0x10
c0012dfa:	83 ec 08             	sub    esp,0x8
c0012dfd:	68 14 01 00 00       	push   0x114
c0012e02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e06:	e8 1c fc ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0012e0b:	83 c4 10             	add    esp,0x10
c0012e0e:	83 c4 0c             	add    esp,0xc
c0012e11:	c3                   	ret    

c0012e12 <Filesystem::Filesystem()>:
c0012e12:	ba 5c b6 02 c0       	mov    edx,0xc002b65c
c0012e17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e1b:	89 10                	mov    DWORD PTR [eax],edx
c0012e1d:	8b 15 34 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f334
c0012e23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e2e:	a3 34 f3 02 c0       	mov    ds:0xc002f334,eax
c0012e33:	90                   	nop
c0012e34:	c3                   	ret    
c0012e35:	90                   	nop

c0012e36 <Filesystem::~Filesystem()>:
c0012e36:	ba 5c b6 02 c0       	mov    edx,0xc002b65c
c0012e3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e3f:	89 10                	mov    DWORD PTR [eax],edx
c0012e41:	90                   	nop
c0012e42:	c3                   	ret    
c0012e43:	90                   	nop

c0012e44 <Filesystem::~Filesystem()>:
c0012e44:	83 ec 0c             	sub    esp,0xc
c0012e47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e4b:	e8 e6 ff ff ff       	call   c0012e36 <Filesystem::~Filesystem()>
c0012e50:	83 c4 04             	add    esp,0x4
c0012e53:	83 ec 08             	sub    esp,0x8
c0012e56:	6a 08                	push   0x8
c0012e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e5c:	e8 c6 fb ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0012e61:	83 c4 10             	add    esp,0x10
c0012e64:	83 c4 0c             	add    esp,0xc
c0012e67:	c3                   	ret    

c0012e68 <Fs::getcwd(Process*, char*, int)>:
c0012e68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e6c:	31 c0                	xor    eax,eax
c0012e6e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e71:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012e75:	7d 15                	jge    c0012e8c <Fs::getcwd(Process*, char*, int)+0x24>
c0012e77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e7b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012e82:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012e85:	84 c9                	test   cl,cl
c0012e87:	74 06                	je     c0012e8f <Fs::getcwd(Process*, char*, int)+0x27>
c0012e89:	40                   	inc    eax
c0012e8a:	eb e2                	jmp    c0012e6e <Fs::getcwd(Process*, char*, int)+0x6>
c0012e8c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012e8f:	31 c0                	xor    eax,eax
c0012e91:	c3                   	ret    

c0012e92 <Fs::initVFS()>:
c0012e92:	83 ec 18             	sub    esp,0x18
c0012e95:	6a 08                	push   0x8
c0012e97:	e8 f0 c9 ff ff       	call   c000f88c <malloc>
c0012e9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e9f:	e8 62 e6 00 00       	call   c0021506 <FAT::FAT()>
c0012ea4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012eab:	e8 dc c9 ff ff       	call   c000f88c <malloc>
c0012eb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0012eb3:	e8 8a f8 00 00       	call   c0022742 <ISO9660::ISO9660()>
c0012eb8:	83 c4 1c             	add    esp,0x1c
c0012ebb:	c3                   	ret    

c0012ebc <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ebc:	55                   	push   ebp
c0012ebd:	57                   	push   edi
c0012ebe:	56                   	push   esi
c0012ebf:	53                   	push   ebx
c0012ec0:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ec6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ecd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012ed4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012edb:	68 00 04 00 00       	push   0x400
c0012ee0:	6a 00                	push   0x0
c0012ee2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ee6:	56                   	push   esi
c0012ee7:	e8 64 d8 fe ff       	call   c0000750 <memset>
c0012eec:	83 c4 10             	add    esp,0x10
c0012eef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012ef3:	75 0b                	jne    c0012f00 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ef5:	50                   	push   eax
c0012ef6:	50                   	push   eax
c0012ef7:	57                   	push   edi
c0012ef8:	56                   	push   esi
c0012ef9:	e8 0e d9 fe ff       	call   c000080c <strcpy>
c0012efe:	eb 41                	jmp    c0012f41 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012f00:	8a 07                	mov    al,BYTE PTR [edi]
c0012f02:	3c 5c                	cmp    al,0x5c
c0012f04:	74 04                	je     c0012f0a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012f06:	3c 2f                	cmp    al,0x2f
c0012f08:	75 18                	jne    c0012f22 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012f0a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012f0d:	3c 60                	cmp    al,0x60
c0012f0f:	7e 03                	jle    c0012f14 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012f11:	83 e8 20             	sub    eax,0x20
c0012f14:	88 04 24             	mov    BYTE PTR [esp],al
c0012f17:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f1e:	50                   	push   eax
c0012f1f:	50                   	push   eax
c0012f20:	eb 18                	jmp    c0012f3a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012f22:	50                   	push   eax
c0012f23:	50                   	push   eax
c0012f24:	55                   	push   ebp
c0012f25:	56                   	push   esi
c0012f26:	e8 e1 d8 fe ff       	call   c000080c <strcpy>
c0012f2b:	5a                   	pop    edx
c0012f2c:	59                   	pop    ecx
c0012f2d:	68 dd ce 02 c0       	push   0xc002cedd
c0012f32:	56                   	push   esi
c0012f33:	e8 14 da fe ff       	call   c000094c <strcat>
c0012f38:	5d                   	pop    ebp
c0012f39:	58                   	pop    eax
c0012f3a:	57                   	push   edi
c0012f3b:	56                   	push   esi
c0012f3c:	e8 0b da fe ff       	call   c000094c <strcat>
c0012f41:	83 c4 10             	add    esp,0x10
c0012f44:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012f47:	3c 60                	cmp    al,0x60
c0012f49:	7e 03                	jle    c0012f4e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012f4b:	83 e8 20             	sub    eax,0x20
c0012f4e:	88 04 24             	mov    BYTE PTR [esp],al
c0012f51:	88 03                	mov    BYTE PTR [ebx],al
c0012f53:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f5a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012f60:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012f64:	bf 03 00 00 00       	mov    edi,0x3
c0012f69:	b8 03 00 00 00       	mov    eax,0x3
c0012f6e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012f71:	84 d2                	test   dl,dl
c0012f73:	0f 84 91 00 00 00    	je     c001300a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012f79:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012f7c:	80 fa 5c             	cmp    dl,0x5c
c0012f7f:	74 05                	je     c0012f86 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012f81:	80 fa 2f             	cmp    dl,0x2f
c0012f84:	75 12                	jne    c0012f98 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f86:	89 c5                	mov    ebp,eax
c0012f88:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f8d:	74 09                	je     c0012f98 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f8f:	40                   	inc    eax
c0012f90:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012f94:	89 cf                	mov    edi,ecx
c0012f96:	eb d6                	jmp    c0012f6e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012f98:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012f9d:	75 5b                	jne    c0012ffa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012f9f:	80 fa 2e             	cmp    dl,0x2e
c0012fa2:	75 56                	jne    c0012ffa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fa4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012fa8:	74 19                	je     c0012fc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012faa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012faf:	74 53                	je     c0013004 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fb1:	89 f9                	mov    ecx,edi
c0012fb3:	41                   	inc    ecx
c0012fb4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fb7:	80 fa 2f             	cmp    dl,0x2f
c0012fba:	74 f7                	je     c0012fb3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fbc:	80 fa 5c             	cmp    dl,0x5c
c0012fbf:	74 f2                	je     c0012fb3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fc1:	eb d1                	jmp    c0012f94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fc3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fc8:	74 3a                	je     c0013004 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fca:	83 f8 03             	cmp    eax,0x3
c0012fcd:	74 c5                	je     c0012f94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fcf:	41                   	inc    ecx
c0012fd0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fd3:	80 fa 2f             	cmp    dl,0x2f
c0012fd6:	74 f7                	je     c0012fcf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fd8:	80 fa 5c             	cmp    dl,0x5c
c0012fdb:	74 f2                	je     c0012fcf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fdd:	48                   	dec    eax
c0012fde:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012fe2:	75 06                	jne    c0012fea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012fe4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012fe8:	eb f3                	jmp    c0012fdd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012fea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012fee:	74 07                	je     c0012ff7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ff4:	48                   	dec    eax
c0012ff5:	eb f3                	jmp    c0012fea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ff7:	40                   	inc    eax
c0012ff8:	eb 9a                	jmp    c0012f94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ffa:	80 fa 2f             	cmp    dl,0x2f
c0012ffd:	74 95                	je     c0012f94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fff:	80 fa 5c             	cmp    dl,0x5c
c0013002:	74 90                	je     c0012f94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013004:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013007:	40                   	inc    eax
c0013008:	eb 8a                	jmp    c0012f94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001300a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001300e:	83 ec 0c             	sub    esp,0xc
c0013011:	53                   	push   ebx
c0013012:	e8 55 d7 fe ff       	call   c000076c <strlen>
c0013017:	83 c4 10             	add    esp,0x10
c001301a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001301f:	75 26                	jne    c0013047 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013021:	83 ec 0c             	sub    esp,0xc
c0013024:	53                   	push   ebx
c0013025:	e8 42 d7 fe ff       	call   c000076c <strlen>
c001302a:	83 c4 10             	add    esp,0x10
c001302d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013032:	74 26                	je     c001305a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013034:	83 ec 0c             	sub    esp,0xc
c0013037:	53                   	push   ebx
c0013038:	e8 2f d7 fe ff       	call   c000076c <strlen>
c001303d:	83 c4 10             	add    esp,0x10
c0013040:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013045:	eb c7                	jmp    c001300e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013047:	83 ec 0c             	sub    esp,0xc
c001304a:	53                   	push   ebx
c001304b:	e8 1c d7 fe ff       	call   c000076c <strlen>
c0013050:	83 c4 10             	add    esp,0x10
c0013053:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013058:	74 c7                	je     c0013021 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001305a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013060:	5b                   	pop    ebx
c0013061:	5e                   	pop    esi
c0013062:	5f                   	pop    edi
c0013063:	5d                   	pop    ebp
c0013064:	c3                   	ret    
c0013065:	90                   	nop

c0013066 <File::File(char const*, Process*)>:
c0013066:	83 ec 0c             	sub    esp,0xc
c0013069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306d:	83 ec 08             	sub    esp,0x8
c0013070:	6a 00                	push   0x0
c0013072:	50                   	push   eax
c0013073:	e8 46 e2 ff ff       	call   c00112be <UnixFile::UnixFile(int)>
c0013078:	83 c4 10             	add    esp,0x10
c001307b:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c0013080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013084:	89 10                	mov    DWORD PTR [eax],edx
c0013086:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001308a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013094:	83 c0 0d             	add    eax,0xd
c0013097:	83 ec 04             	sub    esp,0x4
c001309a:	52                   	push   edx
c001309b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001309f:	50                   	push   eax
c00130a0:	e8 17 fe ff ff       	call   c0012ebc <Fs::standardiseFiles(char*, char const*, char const*)>
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130af:	8d 50 bf             	lea    edx,[eax-0x41]
c00130b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130c4:	90                   	nop
c00130c5:	83 c4 0c             	add    esp,0xc
c00130c8:	c3                   	ret    
c00130c9:	90                   	nop

c00130ca <File::open(FileOpenMode)>:
c00130ca:	53                   	push   ebx
c00130cb:	b8 0b 00 00 00       	mov    eax,0xb
c00130d0:	83 ec 08             	sub    esp,0x8
c00130d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130d7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130de:	80 fa 19             	cmp    dl,0x19
c00130e1:	77 40                	ja     c0013123 <File::open(FileOpenMode)+0x59>
c00130e3:	8b 14 95 c0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0840]
c00130ea:	85 d2                	test   edx,edx
c00130ec:	74 35                	je     c0013123 <File::open(FileOpenMode)+0x59>
c00130ee:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130f4:	85 d2                	test   edx,edx
c00130f6:	74 2b                	je     c0013123 <File::open(FileOpenMode)+0x59>
c00130f8:	b8 06 00 00 00       	mov    eax,0x6
c00130fd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013101:	75 20                	jne    c0013123 <File::open(FileOpenMode)+0x59>
c0013103:	8b 02                	mov    eax,DWORD PTR [edx]
c0013105:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001310b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001310f:	51                   	push   ecx
c0013110:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013113:	51                   	push   ecx
c0013114:	52                   	push   edx
c0013115:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013118:	83 c4 10             	add    esp,0x10
c001311b:	85 c0                	test   eax,eax
c001311d:	75 04                	jne    c0013123 <File::open(FileOpenMode)+0x59>
c001311f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013123:	83 c4 08             	add    esp,0x8
c0013126:	5b                   	pop    ebx
c0013127:	c3                   	ret    

c0013128 <File::close()>:
c0013128:	53                   	push   ebx
c0013129:	b8 0b 00 00 00       	mov    eax,0xb
c001312e:	83 ec 08             	sub    esp,0x8
c0013131:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013135:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001313c:	80 fa 19             	cmp    dl,0x19
c001313f:	77 41                	ja     c0013182 <File::close()+0x5a>
c0013141:	8b 1c 95 c0 f7 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0840]
c0013148:	85 db                	test   ebx,ebx
c001314a:	74 36                	je     c0013182 <File::close()+0x5a>
c001314c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013153:	74 2d                	je     c0013182 <File::close()+0x5a>
c0013155:	b8 05 00 00 00       	mov    eax,0x5
c001315a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001315e:	74 22                	je     c0013182 <File::close()+0x5a>
c0013160:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013164:	8b 04 95 c0 f7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0840]
c001316b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013171:	53                   	push   ebx
c0013172:	53                   	push   ebx
c0013173:	8b 10                	mov    edx,DWORD PTR [eax]
c0013175:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001317b:	50                   	push   eax
c001317c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001317f:	83 c4 10             	add    esp,0x10
c0013182:	83 c4 08             	add    esp,0x8
c0013185:	5b                   	pop    ebx
c0013186:	c3                   	ret    
c0013187:	90                   	nop

c0013188 <File::seek(unsigned long long)>:
c0013188:	56                   	push   esi
c0013189:	53                   	push   ebx
c001318a:	b8 0b 00 00 00       	mov    eax,0xb
c001318f:	51                   	push   ecx
c0013190:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013194:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013198:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001319f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131a3:	80 fa 19             	cmp    dl,0x19
c00131a6:	77 31                	ja     c00131d9 <File::seek(unsigned long long)+0x51>
c00131a8:	8b 14 95 c0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0840]
c00131af:	85 d2                	test   edx,edx
c00131b1:	74 26                	je     c00131d9 <File::seek(unsigned long long)+0x51>
c00131b3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131b9:	85 d2                	test   edx,edx
c00131bb:	74 1c                	je     c00131d9 <File::seek(unsigned long long)+0x51>
c00131bd:	b8 05 00 00 00       	mov    eax,0x5
c00131c2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00131c6:	74 11                	je     c00131d9 <File::seek(unsigned long long)+0x51>
c00131c8:	8b 02                	mov    eax,DWORD PTR [edx]
c00131ca:	53                   	push   ebx
c00131cb:	51                   	push   ecx
c00131cc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00131d2:	52                   	push   edx
c00131d3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00131d6:	83 c4 10             	add    esp,0x10
c00131d9:	5a                   	pop    edx
c00131da:	5b                   	pop    ebx
c00131db:	5e                   	pop    esi
c00131dc:	c3                   	ret    
c00131dd:	90                   	nop

c00131de <File::tell(unsigned long long*)>:
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	b8 0b 00 00 00       	mov    eax,0xb
c00131e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131ea:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131f1:	80 fa 19             	cmp    dl,0x19
c00131f4:	77 34                	ja     c001322a <File::tell(unsigned long long*)+0x4c>
c00131f6:	8b 14 95 c0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0840]
c00131fd:	85 d2                	test   edx,edx
c00131ff:	74 29                	je     c001322a <File::tell(unsigned long long*)+0x4c>
c0013201:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013207:	85 d2                	test   edx,edx
c0013209:	74 1f                	je     c001322a <File::tell(unsigned long long*)+0x4c>
c001320b:	b8 05 00 00 00       	mov    eax,0x5
c0013210:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013214:	74 14                	je     c001322a <File::tell(unsigned long long*)+0x4c>
c0013216:	50                   	push   eax
c0013217:	8b 02                	mov    eax,DWORD PTR [edx]
c0013219:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001321d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013223:	52                   	push   edx
c0013224:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013227:	83 c4 10             	add    esp,0x10
c001322a:	83 c4 0c             	add    esp,0xc
c001322d:	c3                   	ret    

c001322e <File::rewind()>:
c001322e:	83 ec 10             	sub    esp,0x10
c0013231:	6a 00                	push   0x0
c0013233:	6a 00                	push   0x0
c0013235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013239:	e8 4a ff ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001323e:	83 c4 1c             	add    esp,0x1c
c0013241:	c3                   	ret    

c0013242 <File::unlink()>:
c0013242:	83 ec 0c             	sub    esp,0xc
c0013245:	b8 0b 00 00 00       	mov    eax,0xb
c001324a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001324e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013255:	80 f9 19             	cmp    cl,0x19
c0013258:	77 2f                	ja     c0013289 <File::unlink()+0x47>
c001325a:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c0013261:	85 c9                	test   ecx,ecx
c0013263:	74 24                	je     c0013289 <File::unlink()+0x47>
c0013265:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001326b:	85 c9                	test   ecx,ecx
c001326d:	74 1a                	je     c0013289 <File::unlink()+0x47>
c001326f:	b8 06 00 00 00       	mov    eax,0x6
c0013274:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013278:	75 0f                	jne    c0013289 <File::unlink()+0x47>
c001327a:	83 c2 0d             	add    edx,0xd
c001327d:	50                   	push   eax
c001327e:	50                   	push   eax
c001327f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013281:	52                   	push   edx
c0013282:	51                   	push   ecx
c0013283:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013286:	83 c4 10             	add    esp,0x10
c0013289:	83 c4 0c             	add    esp,0xc
c001328c:	c3                   	ret    
c001328d:	90                   	nop

c001328e <File::rename(char const*)>:
c001328e:	83 ec 0c             	sub    esp,0xc
c0013291:	b8 0b 00 00 00       	mov    eax,0xb
c0013296:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001329a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132a1:	80 f9 19             	cmp    cl,0x19
c00132a4:	77 32                	ja     c00132d8 <File::rename(char const*)+0x4a>
c00132a6:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c00132ad:	85 c9                	test   ecx,ecx
c00132af:	74 27                	je     c00132d8 <File::rename(char const*)+0x4a>
c00132b1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b7:	85 c9                	test   ecx,ecx
c00132b9:	74 1d                	je     c00132d8 <File::rename(char const*)+0x4a>
c00132bb:	b8 06 00 00 00       	mov    eax,0x6
c00132c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132c4:	75 12                	jne    c00132d8 <File::rename(char const*)+0x4a>
c00132c6:	83 c2 0d             	add    edx,0xd
c00132c9:	50                   	push   eax
c00132ca:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132d0:	52                   	push   edx
c00132d1:	51                   	push   ecx
c00132d2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132d5:	83 c4 10             	add    esp,0x10
c00132d8:	83 c4 0c             	add    esp,0xc
c00132db:	c3                   	ret    

c00132dc <File::chfatattr(unsigned char, unsigned char)>:
c00132dc:	57                   	push   edi
c00132dd:	b8 0b 00 00 00       	mov    eax,0xb
c00132e2:	56                   	push   esi
c00132e3:	53                   	push   ebx
c00132e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00132f7:	80 f9 19             	cmp    cl,0x19
c00132fa:	77 37                	ja     c0013333 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00132fc:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c0013303:	85 c9                	test   ecx,ecx
c0013305:	74 2c                	je     c0013333 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013307:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001330d:	85 c9                	test   ecx,ecx
c001330f:	74 22                	je     c0013333 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013311:	b8 06 00 00 00       	mov    eax,0x6
c0013316:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001331a:	75 17                	jne    c0013333 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001331c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001331e:	89 f0                	mov    eax,esi
c0013320:	83 c2 0d             	add    edx,0xd
c0013323:	0f b6 f0             	movzx  esi,al
c0013326:	0f b6 db             	movzx  ebx,bl
c0013329:	56                   	push   esi
c001332a:	53                   	push   ebx
c001332b:	52                   	push   edx
c001332c:	51                   	push   ecx
c001332d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013330:	83 c4 10             	add    esp,0x10
c0013333:	5b                   	pop    ebx
c0013334:	5e                   	pop    esi
c0013335:	5f                   	pop    edi
c0013336:	c3                   	ret    
c0013337:	90                   	nop

c0013338 <File::exists()>:
c0013338:	83 ec 0c             	sub    esp,0xc
c001333b:	31 c0                	xor    eax,eax
c001333d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013341:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013348:	80 f9 19             	cmp    cl,0x19
c001334b:	77 24                	ja     c0013371 <File::exists()+0x39>
c001334d:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c0013354:	85 c9                	test   ecx,ecx
c0013356:	74 19                	je     c0013371 <File::exists()+0x39>
c0013358:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001335e:	85 c9                	test   ecx,ecx
c0013360:	74 0f                	je     c0013371 <File::exists()+0x39>
c0013362:	83 c2 0d             	add    edx,0xd
c0013365:	50                   	push   eax
c0013366:	50                   	push   eax
c0013367:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013369:	52                   	push   edx
c001336a:	51                   	push   ecx
c001336b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001336e:	83 c4 10             	add    esp,0x10
c0013371:	83 c4 0c             	add    esp,0xc
c0013374:	c3                   	ret    
c0013375:	90                   	nop

c0013376 <File::stat(unsigned long long*, bool*)>:
c0013376:	56                   	push   esi
c0013377:	53                   	push   ebx
c0013378:	50                   	push   eax
c0013379:	b8 0b 00 00 00       	mov    eax,0xb
c001337e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013386:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001338d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013391:	80 f9 19             	cmp    cl,0x19
c0013394:	77 3d                	ja     c00133d3 <File::stat(unsigned long long*, bool*)+0x5d>
c0013396:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c001339d:	85 c9                	test   ecx,ecx
c001339f:	74 32                	je     c00133d3 <File::stat(unsigned long long*, bool*)+0x5d>
c00133a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133a7:	85 c9                	test   ecx,ecx
c00133a9:	74 28                	je     c00133d3 <File::stat(unsigned long long*, bool*)+0x5d>
c00133ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133ad:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133b1:	74 13                	je     c00133c6 <File::stat(unsigned long long*, bool*)+0x50>
c00133b3:	83 ec 04             	sub    esp,0x4
c00133b6:	56                   	push   esi
c00133b7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00133bd:	51                   	push   ecx
c00133be:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00133c1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133c4:	eb 0a                	jmp    c00133d0 <File::stat(unsigned long long*, bool*)+0x5a>
c00133c6:	53                   	push   ebx
c00133c7:	83 c2 0d             	add    edx,0xd
c00133ca:	56                   	push   esi
c00133cb:	52                   	push   edx
c00133cc:	51                   	push   ecx
c00133cd:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00133d0:	83 c4 10             	add    esp,0x10
c00133d3:	5a                   	pop    edx
c00133d4:	5b                   	pop    ebx
c00133d5:	5e                   	pop    esi
c00133d6:	c3                   	ret    

c00133d7 <Fs::setcwd(Process*, char*)>:
c00133d7:	55                   	push   ebp
c00133d8:	57                   	push   edi
c00133d9:	56                   	push   esi
c00133da:	53                   	push   ebx
c00133db:	81 ec 20 02 00 00    	sub    esp,0x220
c00133e1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00133e8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00133ee:	57                   	push   edi
c00133ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00133f6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00133fa:	56                   	push   esi
c00133fb:	e8 bc fa ff ff       	call   c0012ebc <Fs::standardiseFiles(char*, char const*, char const*)>
c0013400:	89 34 24             	mov    DWORD PTR [esp],esi
c0013403:	e8 64 d3 fe ff       	call   c000076c <strlen>
c0013408:	83 c4 10             	add    esp,0x10
c001340b:	83 f8 02             	cmp    eax,0x2
c001340e:	77 17                	ja     c0013427 <Fs::setcwd(Process*, char*)+0x50>
c0013410:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013415:	83 e8 41             	sub    eax,0x41
c0013418:	83 f8 19             	cmp    eax,0x19
c001341b:	76 24                	jbe    c0013441 <Fs::setcwd(Process*, char*)+0x6a>
c001341d:	b8 03 00 00 00       	mov    eax,0x3
c0013422:	e9 e0 00 00 00       	jmp    c0013507 <Fs::setcwd(Process*, char*)+0x130>
c0013427:	83 ec 0c             	sub    esp,0xc
c001342a:	56                   	push   esi
c001342b:	e8 3c d3 fe ff       	call   c000076c <strlen>
c0013430:	83 c4 10             	add    esp,0x10
c0013433:	83 f8 03             	cmp    eax,0x3
c0013436:	75 34                	jne    c001346c <Fs::setcwd(Process*, char*)+0x95>
c0013438:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001343d:	75 2d                	jne    c001346c <Fs::setcwd(Process*, char*)+0x95>
c001343f:	eb cf                	jmp    c0013410 <Fs::setcwd(Process*, char*)+0x39>
c0013441:	8b 14 85 c0 f7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0840]
c0013448:	b8 05 00 00 00       	mov    eax,0x5
c001344d:	85 d2                	test   edx,edx
c001344f:	0f 84 b2 00 00 00    	je     c0013507 <Fs::setcwd(Process*, char*)+0x130>
c0013455:	b8 06 00 00 00       	mov    eax,0x6
c001345a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013461:	0f 85 92 00 00 00    	jne    c00134f9 <Fs::setcwd(Process*, char*)+0x122>
c0013467:	e9 9b 00 00 00       	jmp    c0013507 <Fs::setcwd(Process*, char*)+0x130>
c001346c:	83 ec 0c             	sub    esp,0xc
c001346f:	68 14 01 00 00       	push   0x114
c0013474:	e8 13 c4 ff ff       	call   c000f88c <malloc>
c0013479:	83 c4 0c             	add    esp,0xc
c001347c:	89 c3                	mov    ebx,eax
c001347e:	55                   	push   ebp
c001347f:	56                   	push   esi
c0013480:	50                   	push   eax
c0013481:	e8 e0 fb ff ff       	call   c0013066 <File::File(char const*, Process*)>
c0013486:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001348b:	83 c4 0c             	add    esp,0xc
c001348e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013492:	50                   	push   eax
c0013493:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013497:	50                   	push   eax
c0013498:	53                   	push   ebx
c0013499:	e8 d8 fe ff ff       	call   c0013376 <File::stat(unsigned long long*, bool*)>
c001349e:	83 c4 10             	add    esp,0x10
c00134a1:	83 f8 02             	cmp    eax,0x2
c00134a4:	74 04                	je     c00134aa <Fs::setcwd(Process*, char*)+0xd3>
c00134a6:	85 c0                	test   eax,eax
c00134a8:	74 1c                	je     c00134c6 <Fs::setcwd(Process*, char*)+0xef>
c00134aa:	b8 01 00 00 00       	mov    eax,0x1
c00134af:	85 db                	test   ebx,ebx
c00134b1:	74 54                	je     c0013507 <Fs::setcwd(Process*, char*)+0x130>
c00134b3:	83 ec 0c             	sub    esp,0xc
c00134b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134b8:	53                   	push   ebx
c00134b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134bc:	83 c4 10             	add    esp,0x10
c00134bf:	b8 01 00 00 00       	mov    eax,0x1
c00134c4:	eb 41                	jmp    c0013507 <Fs::setcwd(Process*, char*)+0x130>
c00134c6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00134cb:	75 1c                	jne    c00134e9 <Fs::setcwd(Process*, char*)+0x112>
c00134cd:	b8 02 00 00 00       	mov    eax,0x2
c00134d2:	85 db                	test   ebx,ebx
c00134d4:	74 31                	je     c0013507 <Fs::setcwd(Process*, char*)+0x130>
c00134d6:	83 ec 0c             	sub    esp,0xc
c00134d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134db:	53                   	push   ebx
c00134dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134df:	83 c4 10             	add    esp,0x10
c00134e2:	b8 02 00 00 00       	mov    eax,0x2
c00134e7:	eb 1e                	jmp    c0013507 <Fs::setcwd(Process*, char*)+0x130>
c00134e9:	85 db                	test   ebx,ebx
c00134eb:	74 0c                	je     c00134f9 <Fs::setcwd(Process*, char*)+0x122>
c00134ed:	83 ec 0c             	sub    esp,0xc
c00134f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134f2:	53                   	push   ebx
c00134f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134f6:	83 c4 10             	add    esp,0x10
c00134f9:	50                   	push   eax
c00134fa:	50                   	push   eax
c00134fb:	56                   	push   esi
c00134fc:	57                   	push   edi
c00134fd:	e8 0a d3 fe ff       	call   c000080c <strcpy>
c0013502:	83 c4 10             	add    esp,0x10
c0013505:	31 c0                	xor    eax,eax
c0013507:	81 c4 1c 02 00 00    	add    esp,0x21c
c001350d:	5b                   	pop    ebx
c001350e:	5e                   	pop    esi
c001350f:	5f                   	pop    edi
c0013510:	5d                   	pop    ebp
c0013511:	c3                   	ret    

c0013512 <Directory::Directory(char const*, Process*)>:
c0013512:	83 ec 0c             	sub    esp,0xc
c0013515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013519:	83 ec 08             	sub    esp,0x8
c001351c:	6a 00                	push   0x0
c001351e:	50                   	push   eax
c001351f:	e8 9a dd ff ff       	call   c00112be <UnixFile::UnixFile(int)>
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c001352c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013530:	89 10                	mov    DWORD PTR [eax],edx
c0013532:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013536:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001353c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013540:	83 c0 0d             	add    eax,0xd
c0013543:	83 ec 04             	sub    esp,0x4
c0013546:	52                   	push   edx
c0013547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001354b:	50                   	push   eax
c001354c:	e8 6b f9 ff ff       	call   c0012ebc <Fs::standardiseFiles(char*, char const*, char const*)>
c0013551:	83 c4 10             	add    esp,0x10
c0013554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013558:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001355b:	8d 50 bf             	lea    edx,[eax-0x41]
c001355e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013562:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013570:	90                   	nop
c0013571:	83 c4 0c             	add    esp,0xc
c0013574:	c3                   	ret    
c0013575:	90                   	nop

c0013576 <Directory::open()>:
c0013576:	53                   	push   ebx
c0013577:	b8 0b 00 00 00       	mov    eax,0xb
c001357c:	83 ec 08             	sub    esp,0x8
c001357f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013583:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001358a:	80 fa 19             	cmp    dl,0x19
c001358d:	77 3d                	ja     c00135cc <Directory::open()+0x56>
c001358f:	8b 14 95 c0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0840]
c0013596:	85 d2                	test   edx,edx
c0013598:	74 32                	je     c00135cc <Directory::open()+0x56>
c001359a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135a0:	85 d2                	test   edx,edx
c00135a2:	74 28                	je     c00135cc <Directory::open()+0x56>
c00135a4:	b8 06 00 00 00       	mov    eax,0x6
c00135a9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135ad:	75 1d                	jne    c00135cc <Directory::open()+0x56>
c00135af:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135b5:	50                   	push   eax
c00135b6:	8b 02                	mov    eax,DWORD PTR [edx]
c00135b8:	51                   	push   ecx
c00135b9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135bc:	51                   	push   ecx
c00135bd:	52                   	push   edx
c00135be:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00135c1:	83 c4 10             	add    esp,0x10
c00135c4:	85 c0                	test   eax,eax
c00135c6:	75 04                	jne    c00135cc <Directory::open()+0x56>
c00135c8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135cc:	83 c4 08             	add    esp,0x8
c00135cf:	5b                   	pop    ebx
c00135d0:	c3                   	ret    
c00135d1:	90                   	nop

c00135d2 <Directory::close()>:
c00135d2:	53                   	push   ebx
c00135d3:	b8 0b 00 00 00       	mov    eax,0xb
c00135d8:	83 ec 08             	sub    esp,0x8
c00135db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135df:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135e6:	80 fa 19             	cmp    dl,0x19
c00135e9:	77 41                	ja     c001362c <Directory::close()+0x5a>
c00135eb:	8b 1c 95 c0 f7 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0840]
c00135f2:	85 db                	test   ebx,ebx
c00135f4:	74 36                	je     c001362c <Directory::close()+0x5a>
c00135f6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135fd:	74 2d                	je     c001362c <Directory::close()+0x5a>
c00135ff:	b8 05 00 00 00       	mov    eax,0x5
c0013604:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013608:	74 22                	je     c001362c <Directory::close()+0x5a>
c001360a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001360e:	8b 04 95 c0 f7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0840]
c0013615:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001361b:	53                   	push   ebx
c001361c:	53                   	push   ebx
c001361d:	8b 10                	mov    edx,DWORD PTR [eax]
c001361f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013625:	50                   	push   eax
c0013626:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	83 c4 08             	add    esp,0x8
c001362f:	5b                   	pop    ebx
c0013630:	c3                   	ret    
c0013631:	90                   	nop

c0013632 <Directory::unlink()>:
c0013632:	83 ec 0c             	sub    esp,0xc
c0013635:	b8 0b 00 00 00       	mov    eax,0xb
c001363a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001363e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013645:	80 f9 19             	cmp    cl,0x19
c0013648:	77 2f                	ja     c0013679 <Directory::unlink()+0x47>
c001364a:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c0013651:	85 c9                	test   ecx,ecx
c0013653:	74 24                	je     c0013679 <Directory::unlink()+0x47>
c0013655:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001365b:	85 c9                	test   ecx,ecx
c001365d:	74 1a                	je     c0013679 <Directory::unlink()+0x47>
c001365f:	b8 06 00 00 00       	mov    eax,0x6
c0013664:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013668:	75 0f                	jne    c0013679 <Directory::unlink()+0x47>
c001366a:	83 c2 0d             	add    edx,0xd
c001366d:	50                   	push   eax
c001366e:	50                   	push   eax
c001366f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013671:	52                   	push   edx
c0013672:	51                   	push   ecx
c0013673:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013676:	83 c4 10             	add    esp,0x10
c0013679:	83 c4 0c             	add    esp,0xc
c001367c:	c3                   	ret    
c001367d:	90                   	nop

c001367e <Directory::rename(char const*)>:
c001367e:	83 ec 0c             	sub    esp,0xc
c0013681:	b8 0b 00 00 00       	mov    eax,0xb
c0013686:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001368a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013691:	80 f9 19             	cmp    cl,0x19
c0013694:	77 32                	ja     c00136c8 <Directory::rename(char const*)+0x4a>
c0013696:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c001369d:	85 c9                	test   ecx,ecx
c001369f:	74 27                	je     c00136c8 <Directory::rename(char const*)+0x4a>
c00136a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a7:	85 c9                	test   ecx,ecx
c00136a9:	74 1d                	je     c00136c8 <Directory::rename(char const*)+0x4a>
c00136ab:	b8 06 00 00 00       	mov    eax,0x6
c00136b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136b4:	75 12                	jne    c00136c8 <Directory::rename(char const*)+0x4a>
c00136b6:	83 c2 0d             	add    edx,0xd
c00136b9:	50                   	push   eax
c00136ba:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136c0:	52                   	push   edx
c00136c1:	51                   	push   ecx
c00136c2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136c5:	83 c4 10             	add    esp,0x10
c00136c8:	83 c4 0c             	add    esp,0xc
c00136cb:	c3                   	ret    

c00136cc <Directory::exists()>:
c00136cc:	83 ec 0c             	sub    esp,0xc
c00136cf:	31 c0                	xor    eax,eax
c00136d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136dc:	80 f9 19             	cmp    cl,0x19
c00136df:	77 24                	ja     c0013705 <Directory::exists()+0x39>
c00136e1:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c00136e8:	85 c9                	test   ecx,ecx
c00136ea:	74 19                	je     c0013705 <Directory::exists()+0x39>
c00136ec:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f2:	85 c9                	test   ecx,ecx
c00136f4:	74 0f                	je     c0013705 <Directory::exists()+0x39>
c00136f6:	83 c2 0d             	add    edx,0xd
c00136f9:	50                   	push   eax
c00136fa:	50                   	push   eax
c00136fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136fd:	52                   	push   edx
c00136fe:	51                   	push   ecx
c00136ff:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013702:	83 c4 10             	add    esp,0x10
c0013705:	83 c4 0c             	add    esp,0xc
c0013708:	c3                   	ret    
c0013709:	90                   	nop

c001370a <Directory::read(dirent*)>:
c001370a:	83 ec 1c             	sub    esp,0x1c
c001370d:	b8 0b 00 00 00       	mov    eax,0xb
c0013712:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013716:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001371d:	80 fa 19             	cmp    dl,0x19
c0013720:	77 30                	ja     c0013752 <Directory::read(dirent*)+0x48>
c0013722:	8b 14 95 c0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0840]
c0013729:	85 d2                	test   edx,edx
c001372b:	74 25                	je     c0013752 <Directory::read(dirent*)+0x48>
c001372d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013734:	74 1c                	je     c0013752 <Directory::read(dirent*)+0x48>
c0013736:	83 ec 0c             	sub    esp,0xc
c0013739:	8b 01                	mov    eax,DWORD PTR [ecx]
c001373b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001373f:	52                   	push   edx
c0013740:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013744:	6a 00                	push   0x0
c0013746:	68 10 01 00 00       	push   0x110
c001374b:	51                   	push   ecx
c001374c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001374f:	83 c4 20             	add    esp,0x20
c0013752:	83 c4 1c             	add    esp,0x1c
c0013755:	c3                   	ret    

c0013756 <Directory::create()>:
c0013756:	83 ec 0c             	sub    esp,0xc
c0013759:	b8 0b 00 00 00       	mov    eax,0xb
c001375e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013762:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013769:	80 f9 19             	cmp    cl,0x19
c001376c:	77 2f                	ja     c001379d <Directory::create()+0x47>
c001376e:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c0013775:	85 c9                	test   ecx,ecx
c0013777:	74 24                	je     c001379d <Directory::create()+0x47>
c0013779:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001377f:	85 c9                	test   ecx,ecx
c0013781:	74 1a                	je     c001379d <Directory::create()+0x47>
c0013783:	b8 06 00 00 00       	mov    eax,0x6
c0013788:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001378c:	75 0f                	jne    c001379d <Directory::create()+0x47>
c001378e:	83 c2 0d             	add    edx,0xd
c0013791:	50                   	push   eax
c0013792:	50                   	push   eax
c0013793:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013795:	52                   	push   edx
c0013796:	51                   	push   ecx
c0013797:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001379a:	83 c4 10             	add    esp,0x10
c001379d:	83 c4 0c             	add    esp,0xc
c00137a0:	c3                   	ret    
c00137a1:	90                   	nop

c00137a2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00137a2:	b8 0a 00 00 00       	mov    eax,0xa
c00137a7:	c3                   	ret    

c00137a8 <Bus::Bus(char const*)>:
c00137a8:	83 ec 0c             	sub    esp,0xc
c00137ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137af:	83 ec 08             	sub    esp,0x8
c00137b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b6:	50                   	push   eax
c00137b7:	e8 88 09 00 00       	call   c0014144 <Device::Device(char const*)>
c00137bc:	83 c4 10             	add    esp,0x10
c00137bf:	ba fc b6 02 c0       	mov    edx,0xc002b6fc
c00137c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c8:	89 10                	mov    DWORD PTR [eax],edx
c00137ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ce:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00137d8:	90                   	nop
c00137d9:	83 c4 0c             	add    esp,0xc
c00137dc:	c3                   	ret    
c00137dd:	90                   	nop

c00137de <Bus::~Bus()>:
c00137de:	83 ec 0c             	sub    esp,0xc
c00137e1:	ba fc b6 02 c0       	mov    edx,0xc002b6fc
c00137e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ea:	89 10                	mov    DWORD PTR [eax],edx
c00137ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f0:	83 ec 0c             	sub    esp,0xc
c00137f3:	50                   	push   eax
c00137f4:	e8 15 06 00 00       	call   c0013e0e <Device::~Device()>
c00137f9:	83 c4 10             	add    esp,0x10
c00137fc:	90                   	nop
c00137fd:	83 c4 0c             	add    esp,0xc
c0013800:	c3                   	ret    
c0013801:	90                   	nop

c0013802 <Bus::~Bus()>:
c0013802:	83 ec 0c             	sub    esp,0xc
c0013805:	83 ec 0c             	sub    esp,0xc
c0013808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001380c:	e8 cd ff ff ff       	call   c00137de <Bus::~Bus()>
c0013811:	83 c4 10             	add    esp,0x10
c0013814:	83 ec 08             	sub    esp,0x8
c0013817:	68 58 01 00 00       	push   0x158
c001381c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013820:	e8 02 f2 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0013825:	83 c4 10             	add    esp,0x10
c0013828:	83 c4 0c             	add    esp,0xc
c001382b:	c3                   	ret    

c001382c <Buzzer::Buzzer(char const*)>:
c001382c:	83 ec 0c             	sub    esp,0xc
c001382f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013833:	83 ec 08             	sub    esp,0x8
c0013836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001383a:	50                   	push   eax
c001383b:	e8 04 09 00 00       	call   c0014144 <Device::Device(char const*)>
c0013840:	83 c4 10             	add    esp,0x10
c0013843:	ba 28 b7 02 c0       	mov    edx,0xc002b728
c0013848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384c:	89 10                	mov    DWORD PTR [eax],edx
c001384e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013852:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001385c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013860:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001386a:	90                   	nop
c001386b:	83 c4 0c             	add    esp,0xc
c001386e:	c3                   	ret    
c001386f:	90                   	nop

c0013870 <Buzzer::~Buzzer()>:
c0013870:	83 ec 0c             	sub    esp,0xc
c0013873:	ba 28 b7 02 c0       	mov    edx,0xc002b728
c0013878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387c:	89 10                	mov    DWORD PTR [eax],edx
c001387e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013882:	83 ec 0c             	sub    esp,0xc
c0013885:	50                   	push   eax
c0013886:	e8 83 05 00 00       	call   c0013e0e <Device::~Device()>
c001388b:	83 c4 10             	add    esp,0x10
c001388e:	90                   	nop
c001388f:	83 c4 0c             	add    esp,0xc
c0013892:	c3                   	ret    
c0013893:	90                   	nop

c0013894 <Buzzer::~Buzzer()>:
c0013894:	83 ec 0c             	sub    esp,0xc
c0013897:	83 ec 0c             	sub    esp,0xc
c001389a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389e:	e8 cd ff ff ff       	call   c0013870 <Buzzer::~Buzzer()>
c00138a3:	83 c4 10             	add    esp,0x10
c00138a6:	83 ec 08             	sub    esp,0x8
c00138a9:	68 5c 01 00 00       	push   0x15c
c00138ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138b2:	e8 70 f1 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c00138b7:	83 c4 10             	add    esp,0x10
c00138ba:	83 c4 0c             	add    esp,0xc
c00138bd:	c3                   	ret    

c00138be <Buzzer::stop()>:
c00138be:	83 ec 14             	sub    esp,0x14
c00138c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00138c7:	6a 00                	push   0x0
c00138c9:	50                   	push   eax
c00138ca:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00138cd:	83 c4 1c             	add    esp,0x1c
c00138d0:	c3                   	ret    

c00138d1 <beepThread(void*)>:
c00138d1:	53                   	push   ebx
c00138d2:	83 ec 08             	sub    esp,0x8
c00138d5:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c00138da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138de:	48                   	dec    eax
c00138df:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c00138e4:	75 01                	jne    c00138e7 <beepThread(void*)+0x16>
c00138e6:	fb                   	sti    
c00138e7:	50                   	push   eax
c00138e8:	50                   	push   eax
c00138e9:	b8 40 42 0f 00       	mov    eax,0xf4240
c00138ee:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00138f4:	52                   	push   edx
c00138f5:	50                   	push   eax
c00138f6:	e8 52 ae 00 00       	call   c001e74d <nanoSleep(unsigned long long)>
c00138fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138fe:	e8 bb ff ff ff       	call   c00138be <Buzzer::stop()>
c0013903:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001390b:	83 c4 18             	add    esp,0x18
c001390e:	5b                   	pop    ebx
c001390f:	e9 35 ad 00 00       	jmp    c001e649 <blockTask(TaskState)>

c0013914 <Buzzer::beep(int, int, bool)>:
c0013914:	57                   	push   edi
c0013915:	56                   	push   esi
c0013916:	53                   	push   ebx
c0013917:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001391b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001391f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013923:	52                   	push   edx
c0013924:	52                   	push   edx
c0013925:	8b 06                	mov    eax,DWORD PTR [esi]
c0013927:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001392b:	56                   	push   esi
c001392c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	89 f8                	mov    eax,edi
c0013934:	84 c0                	test   al,al
c0013936:	74 1f                	je     c0013957 <Buzzer::beep(int, int, bool)+0x43>
c0013938:	50                   	push   eax
c0013939:	50                   	push   eax
c001393a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013940:	99                   	cdq    
c0013941:	52                   	push   edx
c0013942:	50                   	push   eax
c0013943:	e8 05 ae 00 00       	call   c001e74d <nanoSleep(unsigned long long)>
c0013948:	83 c4 10             	add    esp,0x10
c001394b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001394f:	5b                   	pop    ebx
c0013950:	5e                   	pop    esi
c0013951:	5f                   	pop    edi
c0013952:	e9 67 ff ff ff       	jmp    c00138be <Buzzer::stop()>
c0013957:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001395d:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0013962:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001396a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001396e:	c7 44 24 14 d1 38 01 c0 	mov    DWORD PTR [esp+0x14],0xc00138d1
c0013976:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001397a:	5b                   	pop    ebx
c001397b:	5e                   	pop    esi
c001397c:	5f                   	pop    edi
c001397d:	e9 84 a8 00 00       	jmp    c001e206 <Process::createThread(void (*)(void*), void*, int)>

c0013982 <User::loadClockSettings(int)>:
c0013982:	53                   	push   ebx
c0013983:	83 ec 14             	sub    esp,0x14
c0013986:	68 14 01 00 00       	push   0x114
c001398b:	e8 fc be ff ff       	call   c000f88c <malloc>
c0013990:	83 c4 0c             	add    esp,0xc
c0013993:	89 c3                	mov    ebx,eax
c0013995:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c001399b:	68 50 b7 02 c0       	push   0xc002b750
c00139a0:	50                   	push   eax
c00139a1:	e8 c0 f6 ff ff       	call   c0013066 <File::File(char const*, Process*)>
c00139a6:	58                   	pop    eax
c00139a7:	5a                   	pop    edx
c00139a8:	6a 01                	push   0x1
c00139aa:	53                   	push   ebx
c00139ab:	e8 1a f7 ff ff       	call   c00130ca <File::open(FileOpenMode)>
c00139b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139b3:	e8 70 f7 ff ff       	call   c0013128 <File::close()>
c00139b8:	83 c4 10             	add    esp,0x10
c00139bb:	85 db                	test   ebx,ebx
c00139bd:	74 0f                	je     c00139ce <User::loadClockSettings(int)+0x4c>
c00139bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00139c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00139c8:	83 c4 08             	add    esp,0x8
c00139cb:	5b                   	pop    ebx
c00139cc:	ff e0                	jmp    eax
c00139ce:	83 c4 08             	add    esp,0x8
c00139d1:	5b                   	pop    ebx
c00139d2:	c3                   	ret    
c00139d3:	90                   	nop

c00139d4 <Clock::Clock(char const*)>:
c00139d4:	83 ec 0c             	sub    esp,0xc
c00139d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139db:	83 ec 08             	sub    esp,0x8
c00139de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e2:	50                   	push   eax
c00139e3:	e8 5c 07 00 00       	call   c0014144 <Device::Device(char const*)>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	ba 78 b7 02 c0       	mov    edx,0xc002b778
c00139f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f4:	89 10                	mov    DWORD PTR [eax],edx
c00139f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fa:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013a04:	90                   	nop
c0013a05:	83 c4 0c             	add    esp,0xc
c0013a08:	c3                   	ret    
c0013a09:	90                   	nop

c0013a0a <Clock::~Clock()>:
c0013a0a:	83 ec 0c             	sub    esp,0xc
c0013a0d:	ba 78 b7 02 c0       	mov    edx,0xc002b778
c0013a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a16:	89 10                	mov    DWORD PTR [eax],edx
c0013a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1c:	83 ec 0c             	sub    esp,0xc
c0013a1f:	50                   	push   eax
c0013a20:	e8 e9 03 00 00       	call   c0013e0e <Device::~Device()>
c0013a25:	83 c4 10             	add    esp,0x10
c0013a28:	90                   	nop
c0013a29:	83 c4 0c             	add    esp,0xc
c0013a2c:	c3                   	ret    
c0013a2d:	90                   	nop

c0013a2e <Clock::~Clock()>:
c0013a2e:	83 ec 0c             	sub    esp,0xc
c0013a31:	83 ec 0c             	sub    esp,0xc
c0013a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a38:	e8 cd ff ff ff       	call   c0013a0a <Clock::~Clock()>
c0013a3d:	83 c4 10             	add    esp,0x10
c0013a40:	83 ec 08             	sub    esp,0x8
c0013a43:	68 58 01 00 00       	push   0x158
c0013a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a4c:	e8 d6 ef ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0013a51:	83 c4 10             	add    esp,0x10
c0013a54:	83 c4 0c             	add    esp,0xc
c0013a57:	c3                   	ret    

c0013a58 <Clock::timeInSecondsLocal()>:
c0013a58:	53                   	push   ebx
c0013a59:	83 ec 14             	sub    esp,0x14
c0013a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a60:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a62:	50                   	push   eax
c0013a63:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013a66:	0f b6 0d 3c f3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f33c
c0013a6d:	03 0d 40 f3 02 c0    	add    ecx,DWORD PTR ds:0xc002f340
c0013a73:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a79:	89 cb                	mov    ebx,ecx
c0013a7b:	c1 fb 1f             	sar    ebx,0x1f
c0013a7e:	01 c8                	add    eax,ecx
c0013a80:	11 da                	adc    edx,ebx
c0013a82:	83 c4 10             	add    esp,0x10
c0013a85:	31 c9                	xor    ecx,ecx
c0013a87:	80 3d 3d f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f33d,0x0
c0013a8e:	74 05                	je     c0013a95 <Clock::timeInSecondsLocal()+0x3d>
c0013a90:	b9 08 07 00 00       	mov    ecx,0x708
c0013a95:	31 db                	xor    ebx,ebx
c0013a97:	01 c8                	add    eax,ecx
c0013a99:	11 da                	adc    edx,ebx
c0013a9b:	83 c4 08             	add    esp,0x8
c0013a9e:	5b                   	pop    ebx
c0013a9f:	c3                   	ret    

c0013aa0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013aa0:	57                   	push   edi
c0013aa1:	56                   	push   esi
c0013aa2:	53                   	push   ebx
c0013aa3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013aa7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013aab:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ab1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013ab4:	0f b6 05 3c f3 02 c0 	movzx  eax,BYTE PTR ds:0xc002f33c
c0013abb:	03 05 40 f3 02 c0    	add    eax,DWORD PTR ds:0xc002f340
c0013ac1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ac7:	99                   	cdq    
c0013ac8:	29 c6                	sub    esi,eax
c0013aca:	19 d7                	sbb    edi,edx
c0013acc:	89 f0                	mov    eax,esi
c0013ace:	89 fa                	mov    edx,edi
c0013ad0:	31 f6                	xor    esi,esi
c0013ad2:	80 3d 3d f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f33d,0x0
c0013ad9:	74 05                	je     c0013ae0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013adb:	be 08 07 00 00       	mov    esi,0x708
c0013ae0:	31 ff                	xor    edi,edi
c0013ae2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ae6:	29 f0                	sub    eax,esi
c0013ae8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013aec:	19 fa                	sbb    edx,edi
c0013aee:	89 d8                	mov    eax,ebx
c0013af0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013af4:	5b                   	pop    ebx
c0013af5:	5e                   	pop    esi
c0013af6:	5f                   	pop    edi
c0013af7:	ff e0                	jmp    eax

c0013af9 <datetimeToSeconds(datetime_t)>:
c0013af9:	55                   	push   ebp
c0013afa:	57                   	push   edi
c0013afb:	56                   	push   esi
c0013afc:	53                   	push   ebx
c0013afd:	83 ec 14             	sub    esp,0x14
c0013b00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013b04:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013b08:	89 d3                	mov    ebx,edx
c0013b0a:	0f b6 c6             	movzx  eax,dh
c0013b0d:	c1 eb 10             	shr    ebx,0x10
c0013b10:	48                   	dec    eax
c0013b11:	66 81 eb 6c 07       	sub    bx,0x76c
c0013b16:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013b1a:	0f b6 f5             	movzx  esi,ch
c0013b1d:	89 cf                	mov    edi,ecx
c0013b1f:	6b f6 3c             	imul   esi,esi,0x3c
c0013b22:	c1 ef 10             	shr    edi,0x10
c0013b25:	0f b6 c9             	movzx  ecx,cl
c0013b28:	89 f8                	mov    eax,edi
c0013b2a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b30:	0f b6 f8             	movzx  edi,al
c0013b33:	0f b6 d2             	movzx  edx,dl
c0013b36:	01 fe                	add    esi,edi
c0013b38:	01 f1                	add    ecx,esi
c0013b3a:	0f b7 f3             	movzx  esi,bx
c0013b3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013b41:	c1 f9 1f             	sar    ecx,0x1f
c0013b44:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013b49:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b4d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013b52:	8b 0c 8d c0 b7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4840]
c0013b59:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013b5d:	76 29                	jbe    c0013b88 <datetimeToSeconds(datetime_t)+0x8f>
c0013b5f:	f6 c3 03             	test   bl,0x3
c0013b62:	75 24                	jne    c0013b88 <datetimeToSeconds(datetime_t)+0x8f>
c0013b64:	31 d2                	xor    edx,edx
c0013b66:	bf 64 00 00 00       	mov    edi,0x64
c0013b6b:	89 d8                	mov    eax,ebx
c0013b6d:	66 f7 f7             	div    di
c0013b70:	66 85 d2             	test   dx,dx
c0013b73:	75 12                	jne    c0013b87 <datetimeToSeconds(datetime_t)+0x8e>
c0013b75:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013b7b:	bf 90 01 00 00       	mov    edi,0x190
c0013b80:	99                   	cdq    
c0013b81:	f7 ff                	idiv   edi
c0013b83:	85 d2                	test   edx,edx
c0013b85:	75 01                	jne    c0013b88 <datetimeToSeconds(datetime_t)+0x8f>
c0013b87:	41                   	inc    ecx
c0013b88:	66 83 fb 46          	cmp    bx,0x46
c0013b8c:	76 45                	jbe    c0013bd3 <datetimeToSeconds(datetime_t)+0xda>
c0013b8e:	bb 46 00 00 00       	mov    ebx,0x46
c0013b93:	bf 64 00 00 00       	mov    edi,0x64
c0013b98:	bd 90 01 00 00       	mov    ebp,0x190
c0013b9d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ba2:	f6 c3 03             	test   bl,0x3
c0013ba5:	75 23                	jne    c0013bca <datetimeToSeconds(datetime_t)+0xd1>
c0013ba7:	89 d8                	mov    eax,ebx
c0013ba9:	99                   	cdq    
c0013baa:	f7 ff                	idiv   edi
c0013bac:	b8 6e 01 00 00       	mov    eax,0x16e
c0013bb1:	85 d2                	test   edx,edx
c0013bb3:	75 15                	jne    c0013bca <datetimeToSeconds(datetime_t)+0xd1>
c0013bb5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013bbb:	99                   	cdq    
c0013bbc:	f7 fd                	idiv   ebp
c0013bbe:	83 fa 01             	cmp    edx,0x1
c0013bc1:	19 c0                	sbb    eax,eax
c0013bc3:	f7 d0                	not    eax
c0013bc5:	05 6e 01 00 00       	add    eax,0x16e
c0013bca:	01 c1                	add    ecx,eax
c0013bcc:	43                   	inc    ebx
c0013bcd:	39 f3                	cmp    ebx,esi
c0013bcf:	7c cc                	jl     c0013b9d <datetimeToSeconds(datetime_t)+0xa4>
c0013bd1:	eb 35                	jmp    c0013c08 <datetimeToSeconds(datetime_t)+0x10f>
c0013bd3:	74 33                	je     c0013c08 <datetimeToSeconds(datetime_t)+0x10f>
c0013bd5:	b8 45 00 00 00       	mov    eax,0x45
c0013bda:	89 c2                	mov    edx,eax
c0013bdc:	83 e2 03             	and    edx,0x3
c0013bdf:	39 f0                	cmp    eax,esi
c0013be1:	7e 0f                	jle    c0013bf2 <datetimeToSeconds(datetime_t)+0xf9>
c0013be3:	83 fa 01             	cmp    edx,0x1
c0013be6:	19 d2                	sbb    edx,edx
c0013be8:	48                   	dec    eax
c0013be9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013bf0:	eb e8                	jmp    c0013bda <datetimeToSeconds(datetime_t)+0xe1>
c0013bf2:	b8 6d 01 00 00       	mov    eax,0x16d
c0013bf7:	85 d2                	test   edx,edx
c0013bf9:	75 0b                	jne    c0013c06 <datetimeToSeconds(datetime_t)+0x10d>
c0013bfb:	66 83 fb 01          	cmp    bx,0x1
c0013bff:	19 c0                	sbb    eax,eax
c0013c01:	05 6e 01 00 00       	add    eax,0x16e
c0013c06:	29 c1                	sub    ecx,eax
c0013c08:	b8 80 51 01 00       	mov    eax,0x15180
c0013c0d:	f7 e9                	imul   ecx
c0013c0f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013c13:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013c17:	83 c4 14             	add    esp,0x14
c0013c1a:	5b                   	pop    ebx
c0013c1b:	5e                   	pop    esi
c0013c1c:	5f                   	pop    edi
c0013c1d:	5d                   	pop    ebp
c0013c1e:	c3                   	ret    
c0013c1f:	90                   	nop

c0013c20 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013c20:	57                   	push   edi
c0013c21:	56                   	push   esi
c0013c22:	53                   	push   ebx
c0013c23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c27:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c29:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013c2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c34:	e8 c0 fe ff ff       	call   c0013af9 <datetimeToSeconds(datetime_t)>
c0013c39:	59                   	pop    ecx
c0013c3a:	0f b6 0d 3c f3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f33c
c0013c41:	5b                   	pop    ebx
c0013c42:	03 0d 40 f3 02 c0    	add    ecx,DWORD PTR ds:0xc002f340
c0013c48:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013c4e:	89 cb                	mov    ebx,ecx
c0013c50:	c1 fb 1f             	sar    ebx,0x1f
c0013c53:	29 c8                	sub    eax,ecx
c0013c55:	19 da                	sbb    edx,ebx
c0013c57:	31 c9                	xor    ecx,ecx
c0013c59:	80 3d 3d f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f33d,0x0
c0013c60:	74 05                	je     c0013c67 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013c62:	b9 08 07 00 00       	mov    ecx,0x708
c0013c67:	31 db                	xor    ebx,ebx
c0013c69:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c6d:	29 c8                	sub    eax,ecx
c0013c6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c73:	19 da                	sbb    edx,ebx
c0013c75:	89 f8                	mov    eax,edi
c0013c77:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013c7b:	5b                   	pop    ebx
c0013c7c:	5e                   	pop    esi
c0013c7d:	5f                   	pop    edi
c0013c7e:	ff e0                	jmp    eax

c0013c80 <secondsToDatetime(unsigned long long)>:
c0013c80:	55                   	push   ebp
c0013c81:	57                   	push   edi
c0013c82:	56                   	push   esi
c0013c83:	53                   	push   ebx
c0013c84:	83 ec 1c             	sub    esp,0x1c
c0013c87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013c8b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013c8f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013c93:	6a 00                	push   0x0
c0013c95:	68 80 51 01 00       	push   0x15180
c0013c9a:	55                   	push   ebp
c0013c9b:	57                   	push   edi
c0013c9c:	e8 d3 37 01 00       	call   c0027474 <__udivdi3>
c0013ca1:	83 c4 10             	add    esp,0x10
c0013ca4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013caa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013cae:	6a 00                	push   0x0
c0013cb0:	68 80 51 01 00       	push   0x15180
c0013cb5:	55                   	push   ebp
c0013cb6:	57                   	push   edi
c0013cb7:	bf 10 0e 00 00       	mov    edi,0xe10
c0013cbc:	e8 b3 38 01 00       	call   c0027574 <__umoddi3>
c0013cc1:	83 c4 10             	add    esp,0x10
c0013cc4:	99                   	cdq    
c0013cc5:	f7 ff                	idiv   edi
c0013cc7:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ccc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013ccf:	89 d0                	mov    eax,edx
c0013cd1:	99                   	cdq    
c0013cd2:	f7 ff                	idiv   edi
c0013cd4:	85 db                	test   ebx,ebx
c0013cd6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013cd9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013cdc:	79 11                	jns    c0013cef <secondsToDatetime(unsigned long long)+0x6f>
c0013cde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ce2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ce8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ced:	eb 07                	jmp    c0013cf6 <secondsToDatetime(unsigned long long)+0x76>
c0013cef:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013cf4:	89 d8                	mov    eax,ebx
c0013cf6:	bf b4 05 00 00       	mov    edi,0x5b4
c0013cfb:	99                   	cdq    
c0013cfc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013d01:	f7 f9                	idiv   ecx
c0013d03:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013d08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d0c:	31 d2                	xor    edx,edx
c0013d0e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013d16:	01 c3                	add    ebx,eax
c0013d18:	89 d8                	mov    eax,ebx
c0013d1a:	f7 f1                	div    ecx
c0013d1c:	31 d2                	xor    edx,edx
c0013d1e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013d21:	89 d8                	mov    eax,ebx
c0013d23:	f7 f7                	div    edi
c0013d25:	31 d2                	xor    edx,edx
c0013d27:	29 c1                	sub    ecx,eax
c0013d29:	89 d8                	mov    eax,ebx
c0013d2b:	f7 f5                	div    ebp
c0013d2d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013d32:	29 c1                	sub    ecx,eax
c0013d34:	31 d2                	xor    edx,edx
c0013d36:	89 c8                	mov    eax,ecx
c0013d38:	f7 f5                	div    ebp
c0013d3a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013d3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d43:	31 d2                	xor    edx,edx
c0013d45:	89 c8                	mov    eax,ecx
c0013d47:	f7 f5                	div    ebp
c0013d49:	31 d2                	xor    edx,edx
c0013d4b:	01 c3                	add    ebx,eax
c0013d4d:	89 c8                	mov    eax,ecx
c0013d4f:	f7 f7                	div    edi
c0013d51:	bf 99 00 00 00       	mov    edi,0x99
c0013d56:	29 c3                	sub    ebx,eax
c0013d58:	31 d2                	xor    edx,edx
c0013d5a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013d62:	29 c3                	sub    ebx,eax
c0013d64:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013d67:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013d6a:	bb 05 00 00 00       	mov    ebx,0x5
c0013d6f:	83 c1 02             	add    ecx,0x2
c0013d72:	89 c8                	mov    eax,ecx
c0013d74:	f7 f7                	div    edi
c0013d76:	31 d2                	xor    edx,edx
c0013d78:	89 c7                	mov    edi,eax
c0013d7a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013d80:	83 c0 02             	add    eax,0x2
c0013d83:	f7 f3                	div    ebx
c0013d85:	89 eb                	mov    ebx,ebp
c0013d87:	29 c3                	sub    ebx,eax
c0013d89:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013d8f:	88 1e                	mov    BYTE PTR [esi],bl
c0013d91:	19 c0                	sbb    eax,eax
c0013d93:	31 d2                	xor    edx,edx
c0013d95:	83 e0 0c             	and    eax,0xc
c0013d98:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013d9c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013da4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013da8:	83 f9 01             	cmp    ecx,0x1
c0013dab:	0f 96 c2             	setbe  dl
c0013dae:	41                   	inc    ecx
c0013daf:	01 d0                	add    eax,edx
c0013db1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013db4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013db8:	83 c4 1c             	add    esp,0x1c
c0013dbb:	89 f0                	mov    eax,esi
c0013dbd:	5b                   	pop    ebx
c0013dbe:	5e                   	pop    esi
c0013dbf:	5f                   	pop    edi
c0013dc0:	5d                   	pop    ebp
c0013dc1:	c2 04 00             	ret    0x4

c0013dc4 <Clock::timeInDatetimeLocal()>:
c0013dc4:	53                   	push   ebx
c0013dc5:	83 ec 14             	sub    esp,0x14
c0013dc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dcc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dd0:	e8 83 fc ff ff       	call   c0013a58 <Clock::timeInSecondsLocal()>
c0013dd5:	83 c4 0c             	add    esp,0xc
c0013dd8:	52                   	push   edx
c0013dd9:	50                   	push   eax
c0013dda:	53                   	push   ebx
c0013ddb:	e8 a0 fe ff ff       	call   c0013c80 <secondsToDatetime(unsigned long long)>
c0013de0:	89 d8                	mov    eax,ebx
c0013de2:	83 c4 14             	add    esp,0x14
c0013de5:	5b                   	pop    ebx
c0013de6:	c2 04 00             	ret    0x4
c0013de9:	90                   	nop

c0013dea <Device::hibernate()>:
c0013dea:	c3                   	ret    
c0013deb:	90                   	nop

c0013dec <Device::wake()>:
c0013dec:	c3                   	ret    
c0013ded:	90                   	nop

c0013dee <Device::detect()>:
c0013dee:	c3                   	ret    
c0013def:	90                   	nop

c0013df0 <Device::disableLegacy()>:
c0013df0:	c3                   	ret    
c0013df1:	90                   	nop

c0013df2 <Device::powerSaving(PowerSavingLevel)>:
c0013df2:	c3                   	ret    
c0013df3:	90                   	nop

c0013df4 <DriverlessDevice::close(int, int, void*)>:
c0013df4:	31 c0                	xor    eax,eax
c0013df6:	c3                   	ret    
c0013df7:	90                   	nop

c0013df8 <DriverlessDevice::detect()>:
c0013df8:	c3                   	ret    
c0013df9:	90                   	nop

c0013dfa <DriverlessDevice::open(int, int, void*)>:
c0013dfa:	83 ec 18             	sub    esp,0x18
c0013dfd:	68 f0 b7 02 c0       	push   0xc002b7f0
c0013e02:	e8 90 68 00 00       	call   c001a697 <Krnl::panic(char const*)>
c0013e07:	83 c8 ff             	or     eax,0xffffffff
c0013e0a:	83 c4 1c             	add    esp,0x1c
c0013e0d:	c3                   	ret    

c0013e0e <Device::~Device()>:
c0013e0e:	ba 50 b8 02 c0       	mov    edx,0xc002b850
c0013e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e17:	89 10                	mov    DWORD PTR [eax],edx
c0013e19:	90                   	nop
c0013e1a:	c3                   	ret    
c0013e1b:	90                   	nop

c0013e1c <Device::~Device()>:
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013e23:	e8 e6 ff ff ff       	call   c0013e0e <Device::~Device()>
c0013e28:	83 c4 04             	add    esp,0x4
c0013e2b:	83 ec 08             	sub    esp,0x8
c0013e2e:	68 58 01 00 00       	push   0x158
c0013e33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e37:	e8 eb eb ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0013e3c:	83 c4 10             	add    esp,0x10
c0013e3f:	83 c4 0c             	add    esp,0xc
c0013e42:	c3                   	ret    
c0013e43:	90                   	nop

c0013e44 <Device::findAndLoadDriver()>:
c0013e44:	c7 44 24 04 0e b8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b80e
c0013e4c:	e9 b6 ec ff ff       	jmp    c0012b07 <Dbg::kprintf(char const*, ...)>
c0013e51:	90                   	nop

c0013e52 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013e52:	57                   	push   edi
c0013e53:	b9 09 00 00 00       	mov    ecx,0x9
c0013e58:	56                   	push   esi
c0013e59:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013e5d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013e61:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013e6b:	81 c7 18 01 00 00    	add    edi,0x118
c0013e71:	fc                   	cld    
c0013e72:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013e74:	5e                   	pop    esi
c0013e75:	5f                   	pop    edi
c0013e76:	c3                   	ret    
c0013e77:	90                   	nop

c0013e78 <Device::preOpenACPI(void*, char*, char*)>:
c0013e78:	57                   	push   edi
c0013e79:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013e7e:	56                   	push   esi
c0013e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e87:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013e91:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013e97:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013e9d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ea1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ea3:	b9 0e 00 00 00       	mov    ecx,0xe
c0013ea8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013eae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013eb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013eb4:	5e                   	pop    esi
c0013eb5:	5f                   	pop    edi
c0013eb6:	c3                   	ret    
c0013eb7:	90                   	nop

c0013eb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013eb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ebc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ec1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ec8:	75 0b                	jne    c0013ed5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013eca:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ecc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ed0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013ed3:	eb 1e                	jmp    c0013ef3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013ed5:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0013eda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ee0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ee6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ee8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013eec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ef0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ef3:	ff e0                	jmp    eax
c0013ef5:	90                   	nop

c0013ef6 <Device::getParent()>:
c0013ef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013efa:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013f00:	c3                   	ret    
c0013f01:	90                   	nop

c0013f02 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013f02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f06:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f0b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f12:	75 0b                	jne    c0013f1f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013f14:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f16:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f1a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013f1d:	eb 1e                	jmp    c0013f3d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013f1f:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0013f24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f2a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f30:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f32:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f3a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013f3d:	ff e0                	jmp    eax
c0013f3f:	90                   	nop

c0013f40 <Device::addChild(Device*)>:
c0013f40:	53                   	push   ebx
c0013f41:	83 ec 08             	sub    esp,0x8
c0013f44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f4c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013f52:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013f58:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013f5a:	85 d2                	test   edx,edx
c0013f5c:	74 04                	je     c0013f62 <Device::addChild(Device*)+0x22>
c0013f5e:	89 d3                	mov    ebx,edx
c0013f60:	eb f6                	jmp    c0013f58 <Device::addChild(Device*)+0x18>
c0013f62:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013f65:	83 ec 0c             	sub    esp,0xc
c0013f68:	6a 08                	push   0x8
c0013f6a:	e8 1d b9 ff ff       	call   c000f88c <malloc>
c0013f6f:	89 03                	mov    DWORD PTR [ebx],eax
c0013f71:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f7e:	83 c4 18             	add    esp,0x18
c0013f81:	5b                   	pop    ebx
c0013f82:	c3                   	ret    
c0013f83:	90                   	nop

c0013f84 <Device::removeAllChildren()>:
c0013f84:	56                   	push   esi
c0013f85:	53                   	push   ebx
c0013f86:	52                   	push   edx
c0013f87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f8b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013f91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f94:	74 17                	je     c0013fad <Device::removeAllChildren()+0x29>
c0013f96:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f99:	85 c0                	test   eax,eax
c0013f9b:	74 0c                	je     c0013fa9 <Device::removeAllChildren()+0x25>
c0013f9d:	83 ec 0c             	sub    esp,0xc
c0013fa0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013fa2:	50                   	push   eax
c0013fa3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013fa6:	83 c4 10             	add    esp,0x10
c0013fa9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fab:	eb e4                	jmp    c0013f91 <Device::removeAllChildren()+0xd>
c0013fad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fb9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fc6:	58                   	pop    eax
c0013fc7:	5b                   	pop    ebx
c0013fc8:	5e                   	pop    esi
c0013fc9:	c3                   	ret    

c0013fca <Device::hibernateAll()>:
c0013fca:	53                   	push   ebx
c0013fcb:	83 ec 14             	sub    esp,0x14
c0013fce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fd4:	53                   	push   ebx
c0013fd5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013fd8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fde:	83 c4 10             	add    esp,0x10
c0013fe1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fe4:	74 0f                	je     c0013ff5 <Device::hibernateAll()+0x2b>
c0013fe6:	83 ec 0c             	sub    esp,0xc
c0013fe9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fec:	e8 d9 ff ff ff       	call   c0013fca <Device::hibernateAll()>
c0013ff1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ff3:	eb e9                	jmp    c0013fde <Device::hibernateAll()+0x14>
c0013ff5:	83 c4 08             	add    esp,0x8
c0013ff8:	5b                   	pop    ebx
c0013ff9:	c3                   	ret    

c0013ffa <Device::wakeAll()>:
c0013ffa:	53                   	push   ebx
c0013ffb:	83 ec 14             	sub    esp,0x14
c0013ffe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014002:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014004:	53                   	push   ebx
c0014005:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014008:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001400e:	83 c4 10             	add    esp,0x10
c0014011:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014014:	74 0f                	je     c0014025 <Device::wakeAll()+0x2b>
c0014016:	83 ec 0c             	sub    esp,0xc
c0014019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001401c:	e8 d9 ff ff ff       	call   c0013ffa <Device::wakeAll()>
c0014021:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014023:	eb e9                	jmp    c001400e <Device::wakeAll()+0x14>
c0014025:	83 c4 08             	add    esp,0x8
c0014028:	5b                   	pop    ebx
c0014029:	c3                   	ret    

c001402a <Device::detectAll()>:
c001402a:	53                   	push   ebx
c001402b:	83 ec 14             	sub    esp,0x14
c001402e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014032:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014034:	53                   	push   ebx
c0014035:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014038:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001403e:	83 c4 10             	add    esp,0x10
c0014041:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014044:	74 0f                	je     c0014055 <Device::detectAll()+0x2b>
c0014046:	83 ec 0c             	sub    esp,0xc
c0014049:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001404c:	e8 d9 ff ff ff       	call   c001402a <Device::detectAll()>
c0014051:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014053:	eb e9                	jmp    c001403e <Device::detectAll()+0x14>
c0014055:	83 c4 08             	add    esp,0x8
c0014058:	5b                   	pop    ebx
c0014059:	c3                   	ret    

c001405a <Device::disableLegacyAll()>:
c001405a:	53                   	push   ebx
c001405b:	83 ec 14             	sub    esp,0x14
c001405e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014062:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014064:	53                   	push   ebx
c0014065:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014068:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001406e:	83 c4 10             	add    esp,0x10
c0014071:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014074:	74 0f                	je     c0014085 <Device::disableLegacyAll()+0x2b>
c0014076:	83 ec 0c             	sub    esp,0xc
c0014079:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001407c:	e8 d9 ff ff ff       	call   c001405a <Device::disableLegacyAll()>
c0014081:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014083:	eb e9                	jmp    c001406e <Device::disableLegacyAll()+0x14>
c0014085:	83 c4 08             	add    esp,0x8
c0014088:	5b                   	pop    ebx
c0014089:	c3                   	ret    

c001408a <Device::loadDriversForAll()>:
c001408a:	53                   	push   ebx
c001408b:	83 ec 08             	sub    esp,0x8
c001408e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014092:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0014099:	75 0c                	jne    c00140a7 <Device::loadDriversForAll()+0x1d>
c001409b:	83 ec 0c             	sub    esp,0xc
c001409e:	53                   	push   ebx
c001409f:	e8 a0 fd ff ff       	call   c0013e44 <Device::findAndLoadDriver()>
c00140a4:	83 c4 10             	add    esp,0x10
c00140a7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140b0:	74 12                	je     c00140c4 <Device::loadDriversForAll()+0x3a>
c00140b2:	83 ec 0c             	sub    esp,0xc
c00140b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140b8:	e8 cd ff ff ff       	call   c001408a <Device::loadDriversForAll()>
c00140bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140bf:	83 c4 10             	add    esp,0x10
c00140c2:	eb e9                	jmp    c00140ad <Device::loadDriversForAll()+0x23>
c00140c4:	83 c4 08             	add    esp,0x8
c00140c7:	5b                   	pop    ebx
c00140c8:	c3                   	ret    
c00140c9:	90                   	nop

c00140ca <Device::closeAll()>:
c00140ca:	53                   	push   ebx
c00140cb:	83 ec 08             	sub    esp,0x8
c00140ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140d4:	6a 00                	push   0x0
c00140d6:	6a 00                	push   0x0
c00140d8:	6a 00                	push   0x0
c00140da:	53                   	push   ebx
c00140db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140e4:	83 c4 10             	add    esp,0x10
c00140e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140ea:	74 0f                	je     c00140fb <Device::closeAll()+0x31>
c00140ec:	83 ec 0c             	sub    esp,0xc
c00140ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140f2:	e8 d3 ff ff ff       	call   c00140ca <Device::closeAll()>
c00140f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140f9:	eb e9                	jmp    c00140e4 <Device::closeAll()+0x1a>
c00140fb:	83 c4 08             	add    esp,0x8
c00140fe:	5b                   	pop    ebx
c00140ff:	c3                   	ret    

c0014100 <Device::powerSavingAll(PowerSavingLevel)>:
c0014100:	56                   	push   esi
c0014101:	53                   	push   ebx
c0014102:	83 ec 0c             	sub    esp,0xc
c0014105:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014109:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001410d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001410f:	56                   	push   esi
c0014110:	53                   	push   ebx
c0014111:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014114:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001411a:	83 c4 10             	add    esp,0x10
c001411d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014120:	74 0f                	je     c0014131 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014122:	52                   	push   edx
c0014123:	52                   	push   edx
c0014124:	56                   	push   esi
c0014125:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014128:	e8 d3 ff ff ff       	call   c0014100 <Device::powerSavingAll(PowerSavingLevel)>
c001412d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001412f:	eb e9                	jmp    c001411a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014131:	58                   	pop    eax
c0014132:	5b                   	pop    ebx
c0014133:	5e                   	pop    esi
c0014134:	c3                   	ret    
c0014135:	90                   	nop

c0014136 <Device::setName(char const*)>:
c0014136:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001413e:	e9 c9 c6 fe ff       	jmp    c000080c <strcpy>
c0014143:	90                   	nop

c0014144 <Device::Device(char const*)>:
c0014144:	83 ec 1c             	sub    esp,0x1c
c0014147:	ba 50 b8 02 c0       	mov    edx,0xc002b850
c001414c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014150:	89 10                	mov    DWORD PTR [eax],edx
c0014152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014156:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014164:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001416e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014172:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001417c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014180:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001418a:	83 ec 08             	sub    esp,0x8
c001418d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014195:	e8 9c ff ff ff       	call   c0014136 <Device::setName(char const*)>
c001419a:	83 c4 10             	add    esp,0x10
c001419d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00141a5:	83 ec 0c             	sub    esp,0xc
c00141a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141ac:	e8 db b6 ff ff       	call   c000f88c <malloc>
c00141b1:	83 c4 10             	add    esp,0x10
c00141b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141c5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00141cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141cf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141df:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00141f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141fb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014206:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014214:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001421e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014222:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001422c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014230:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001423a:	90                   	nop
c001423b:	83 c4 1c             	add    esp,0x1c
c001423e:	c3                   	ret    
c001423f:	90                   	nop

c0014240 <Device::getName()>:
c0014240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014244:	05 d0 00 00 00       	add    eax,0xd0
c0014249:	c3                   	ret    

c001424a <DriverlessDevice::DriverlessDevice(char const*)>:
c001424a:	83 ec 0c             	sub    esp,0xc
c001424d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014251:	83 ec 08             	sub    esp,0x8
c0014254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014258:	50                   	push   eax
c0014259:	e8 e6 fe ff ff       	call   c0014144 <Device::Device(char const*)>
c001425e:	83 c4 10             	add    esp,0x10
c0014261:	ba 7c b8 02 c0       	mov    edx,0xc002b87c
c0014266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001426a:	89 10                	mov    DWORD PTR [eax],edx
c001426c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014270:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001427a:	90                   	nop
c001427b:	83 c4 0c             	add    esp,0xc
c001427e:	c3                   	ret    
c001427f:	90                   	nop

c0014280 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014280:	57                   	push   edi
c0014281:	56                   	push   esi
c0014282:	53                   	push   ebx
c0014283:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014287:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001428b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001428f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014295:	75 0c                	jne    c00142a3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014297:	52                   	push   edx
c0014298:	52                   	push   edx
c0014299:	53                   	push   ebx
c001429a:	56                   	push   esi
c001429b:	e8 26 51 01 00       	call   c00293c6 <LinkedList<Device>::addElement(Device*)>
c00142a0:	83 c4 10             	add    esp,0x10
c00142a3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142ac:	74 12                	je     c00142c0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00142ae:	50                   	push   eax
c00142af:	57                   	push   edi
c00142b0:	56                   	push   esi
c00142b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142b4:	e8 c7 ff ff ff       	call   c0014280 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00142b9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142bb:	83 c4 10             	add    esp,0x10
c00142be:	eb e9                	jmp    c00142a9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00142c0:	5b                   	pop    ebx
c00142c1:	5e                   	pop    esi
c00142c2:	5f                   	pop    edi
c00142c3:	c3                   	ret    

c00142c4 <getDevicesOfType(DeviceType)>:
c00142c4:	53                   	push   ebx
c00142c5:	83 ec 14             	sub    esp,0x14
c00142c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142cc:	53                   	push   ebx
c00142cd:	e8 d0 51 01 00       	call   c00294a2 <LinkedList<Device>::LinkedList()>
c00142d2:	83 c4 0c             	add    esp,0xc
c00142d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142d9:	53                   	push   ebx
c00142da:	ff 35 a8 f1 02 c0    	push   DWORD PTR ds:0xc002f1a8
c00142e0:	e8 9b ff ff ff       	call   c0014280 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00142e5:	89 d8                	mov    eax,ebx
c00142e7:	83 c4 18             	add    esp,0x18
c00142ea:	5b                   	pop    ebx
c00142eb:	c2 04 00             	ret    0x4

c00142ee <HardDiskController::HardDiskController(char const*)>:
c00142ee:	83 ec 0c             	sub    esp,0xc
c00142f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142f5:	83 ec 08             	sub    esp,0x8
c00142f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142fc:	50                   	push   eax
c00142fd:	e8 42 fe ff ff       	call   c0014144 <Device::Device(char const*)>
c0014302:	83 c4 10             	add    esp,0x10
c0014305:	ba a8 b8 02 c0       	mov    edx,0xc002b8a8
c001430a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001430e:	89 10                	mov    DWORD PTR [eax],edx
c0014310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014314:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001431e:	90                   	nop
c001431f:	83 c4 0c             	add    esp,0xc
c0014322:	c3                   	ret    
c0014323:	90                   	nop

c0014324 <HardDiskController::~HardDiskController()>:
c0014324:	83 ec 0c             	sub    esp,0xc
c0014327:	ba a8 b8 02 c0       	mov    edx,0xc002b8a8
c001432c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014330:	89 10                	mov    DWORD PTR [eax],edx
c0014332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014336:	83 ec 0c             	sub    esp,0xc
c0014339:	50                   	push   eax
c001433a:	e8 cf fa ff ff       	call   c0013e0e <Device::~Device()>
c001433f:	83 c4 10             	add    esp,0x10
c0014342:	90                   	nop
c0014343:	83 c4 0c             	add    esp,0xc
c0014346:	c3                   	ret    
c0014347:	90                   	nop

c0014348 <HardDiskController::~HardDiskController()>:
c0014348:	83 ec 0c             	sub    esp,0xc
c001434b:	83 ec 0c             	sub    esp,0xc
c001434e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014352:	e8 cd ff ff ff       	call   c0014324 <HardDiskController::~HardDiskController()>
c0014357:	83 c4 10             	add    esp,0x10
c001435a:	83 ec 08             	sub    esp,0x8
c001435d:	68 58 01 00 00       	push   0x158
c0014362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014366:	e8 bc e6 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c001436b:	83 c4 10             	add    esp,0x10
c001436e:	83 c4 0c             	add    esp,0xc
c0014371:	c3                   	ret    

c0014372 <PhysicalDisk::eject()>:
c0014372:	83 ec 18             	sub    esp,0x18
c0014375:	68 cc b8 02 c0       	push   0xc002b8cc
c001437a:	e8 88 e7 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001437f:	83 c8 ff             	or     eax,0xffffffff
c0014382:	83 c4 1c             	add    esp,0x1c
c0014385:	c3                   	ret    

c0014386 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014386:	83 ec 0c             	sub    esp,0xc
c0014389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438d:	83 ec 08             	sub    esp,0x8
c0014390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014394:	50                   	push   eax
c0014395:	e8 aa fd ff ff       	call   c0014144 <Device::Device(char const*)>
c001439a:	83 c4 10             	add    esp,0x10
c001439d:	ba fc b8 02 c0       	mov    edx,0xc002b8fc
c00143a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143a6:	89 10                	mov    DWORD PTR [eax],edx
c00143a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143ac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00143b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00143be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143c2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00143cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143d4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00143da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143de:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143e8:	90                   	nop
c00143e9:	83 c4 0c             	add    esp,0xc
c00143ec:	c3                   	ret    
c00143ed:	90                   	nop

c00143ee <PhysicalDisk::startCache()>:
c00143ee:	56                   	push   esi
c00143ef:	53                   	push   ebx
c00143f0:	83 ec 10             	sub    esp,0x10
c00143f3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143f7:	6a 44                	push   0x44
c00143f9:	e8 8e b4 ff ff       	call   c000f88c <malloc>
c00143fe:	89 c6                	mov    esi,eax
c0014400:	58                   	pop    eax
c0014401:	5a                   	pop    edx
c0014402:	53                   	push   ebx
c0014403:	56                   	push   esi
c0014404:	e8 a9 28 00 00       	call   c0016cb2 <VCache::VCache(PhysicalDisk*)>
c0014409:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001440f:	83 c4 14             	add    esp,0x14
c0014412:	5b                   	pop    ebx
c0014413:	5e                   	pop    esi
c0014414:	c3                   	ret    
c0014415:	90                   	nop

c0014416 <PhysicalDisk::~PhysicalDisk()>:
c0014416:	83 ec 0c             	sub    esp,0xc
c0014419:	ba fc b8 02 c0       	mov    edx,0xc002b8fc
c001441e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014422:	89 10                	mov    DWORD PTR [eax],edx
c0014424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014428:	83 ec 0c             	sub    esp,0xc
c001442b:	50                   	push   eax
c001442c:	e8 dd f9 ff ff       	call   c0013e0e <Device::~Device()>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	90                   	nop
c0014435:	83 c4 0c             	add    esp,0xc
c0014438:	c3                   	ret    
c0014439:	90                   	nop

c001443a <PhysicalDisk::~PhysicalDisk()>:
c001443a:	83 ec 0c             	sub    esp,0xc
c001443d:	83 ec 0c             	sub    esp,0xc
c0014440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014444:	e8 cd ff ff ff       	call   c0014416 <PhysicalDisk::~PhysicalDisk()>
c0014449:	83 c4 10             	add    esp,0x10
c001444c:	83 ec 08             	sub    esp,0x8
c001444f:	68 6c 01 00 00       	push   0x16c
c0014454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014458:	e8 ca e5 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c001445d:	83 c4 10             	add    esp,0x10
c0014460:	83 c4 0c             	add    esp,0xc
c0014463:	c3                   	ret    

c0014464 <FPU::FPU(char const*)>:
c0014464:	83 ec 0c             	sub    esp,0xc
c0014467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001446b:	83 ec 08             	sub    esp,0x8
c001446e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014472:	50                   	push   eax
c0014473:	e8 cc fc ff ff       	call   c0014144 <Device::Device(char const*)>
c0014478:	83 c4 10             	add    esp,0x10
c001447b:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c0014480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014484:	89 10                	mov    DWORD PTR [eax],edx
c0014486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001448a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014494:	90                   	nop
c0014495:	83 c4 0c             	add    esp,0xc
c0014498:	c3                   	ret    
c0014499:	90                   	nop

c001449a <FPU::~FPU()>:
c001449a:	83 ec 0c             	sub    esp,0xc
c001449d:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c00144a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144a6:	89 10                	mov    DWORD PTR [eax],edx
c00144a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ac:	83 ec 0c             	sub    esp,0xc
c00144af:	50                   	push   eax
c00144b0:	e8 59 f9 ff ff       	call   c0013e0e <Device::~Device()>
c00144b5:	83 c4 10             	add    esp,0x10
c00144b8:	90                   	nop
c00144b9:	83 c4 0c             	add    esp,0xc
c00144bc:	c3                   	ret    
c00144bd:	90                   	nop

c00144be <FPU::~FPU()>:
c00144be:	83 ec 0c             	sub    esp,0xc
c00144c1:	83 ec 0c             	sub    esp,0xc
c00144c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144c8:	e8 cd ff ff ff       	call   c001449a <FPU::~FPU()>
c00144cd:	83 c4 10             	add    esp,0x10
c00144d0:	83 ec 08             	sub    esp,0x8
c00144d3:	68 58 01 00 00       	push   0x158
c00144d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144dc:	e8 46 e5 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c00144e1:	83 c4 10             	add    esp,0x10
c00144e4:	83 c4 0c             	add    esp,0xc
c00144e7:	c3                   	ret    

c00144e8 <setupFPU()>:
c00144e8:	53                   	push   ebx
c00144e9:	83 ec 08             	sub    esp,0x8
c00144ec:	8b 15 a8 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1a8
c00144f2:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00144f9:	74 19                	je     c0014514 <setupFPU()+0x2c>
c00144fb:	83 ec 0c             	sub    esp,0xc
c00144fe:	68 58 01 00 00       	push   0x158
c0014503:	e8 84 b3 ff ff       	call   c000f88c <malloc>
c0014508:	89 c3                	mov    ebx,eax
c001450a:	89 04 24             	mov    DWORD PTR [esp],eax
c001450d:	e8 e0 1a 01 00       	call   c0025ff2 <AVX::AVX()>
c0014512:	eb 5b                	jmp    c001456f <setupFPU()+0x87>
c0014514:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001451a:	84 c0                	test   al,al
c001451c:	79 19                	jns    c0014537 <setupFPU()+0x4f>
c001451e:	83 ec 0c             	sub    esp,0xc
c0014521:	68 58 01 00 00       	push   0x158
c0014526:	e8 61 b3 ff ff       	call   c000f88c <malloc>
c001452b:	89 c3                	mov    ebx,eax
c001452d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014530:	e8 e3 1b 01 00       	call   c0026118 <SSE::SSE()>
c0014535:	eb 38                	jmp    c001456f <setupFPU()+0x87>
c0014537:	a8 20                	test   al,0x20
c0014539:	74 19                	je     c0014554 <setupFPU()+0x6c>
c001453b:	83 ec 0c             	sub    esp,0xc
c001453e:	68 58 01 00 00       	push   0x158
c0014543:	e8 44 b3 ff ff       	call   c000f88c <malloc>
c0014548:	89 c3                	mov    ebx,eax
c001454a:	89 04 24             	mov    DWORD PTR [esp],eax
c001454d:	e8 30 1b 01 00       	call   c0026082 <MMX::MMX()>
c0014552:	eb 1b                	jmp    c001456f <setupFPU()+0x87>
c0014554:	a8 10                	test   al,0x10
c0014556:	74 1c                	je     c0014574 <setupFPU()+0x8c>
c0014558:	83 ec 0c             	sub    esp,0xc
c001455b:	68 58 01 00 00       	push   0x158
c0014560:	e8 27 b3 ff ff       	call   c000f88c <malloc>
c0014565:	89 c3                	mov    ebx,eax
c0014567:	89 04 24             	mov    DWORD PTR [esp],eax
c001456a:	e8 37 1c 01 00       	call   c00261a6 <x87::x87()>
c001456f:	83 c4 10             	add    esp,0x10
c0014572:	eb 24                	jmp    c0014598 <setupFPU()+0xb0>
c0014574:	83 e0 ef             	and    eax,0xffffffef
c0014577:	83 ec 0c             	sub    esp,0xc
c001457a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014580:	68 2c b9 02 c0       	push   0xc002b92c
c0014585:	e8 7d e5 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001458a:	0f 20 c0             	mov    eax,cr0
c001458d:	83 c8 04             	or     eax,0x4
c0014590:	0f 22 c0             	mov    cr0,eax
c0014593:	31 db                	xor    ebx,ebx
c0014595:	83 c4 10             	add    esp,0x10
c0014598:	89 d8                	mov    eax,ebx
c001459a:	83 c4 08             	add    esp,0x8
c001459d:	5b                   	pop    ebx
c001459e:	c3                   	ret    
c001459f:	90                   	nop

c00145a0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00145a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145a8:	c1 e0 04             	shl    eax,0x4
c00145ab:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00145af:	8d 50 10             	lea    edx,[eax+0x10]
c00145b2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00145b8:	74 08                	je     c00145c2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00145ba:	83 c0 04             	add    eax,0x4
c00145bd:	39 d0                	cmp    eax,edx
c00145bf:	75 f1                	jne    c00145b2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00145c1:	c3                   	ret    
c00145c2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00145cc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145d6:	eb e2                	jmp    c00145ba <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00145d8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00145d8:	57                   	push   edi
c00145d9:	31 c0                	xor    eax,eax
c00145db:	56                   	push   esi
c00145dc:	53                   	push   ebx
c00145dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00145e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00145e9:	89 da                	mov    edx,ebx
c00145eb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00145ef:	c1 e2 04             	shl    edx,0x4
c00145f2:	01 ca                	add    edx,ecx
c00145f4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00145fc:	74 16                	je     c0014614 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00145fe:	40                   	inc    eax
c00145ff:	83 f8 04             	cmp    eax,0x4
c0014602:	75 f0                	jne    c00145f4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014604:	c7 44 24 10 70 b9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b970
c001460c:	5b                   	pop    ebx
c001460d:	5e                   	pop    esi
c001460e:	5f                   	pop    edi
c001460f:	e9 83 60 00 00       	jmp    c001a697 <Krnl::panic(char const*)>
c0014614:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014617:	8d 04 81             	lea    eax,[ecx+eax*4]
c001461a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014620:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014626:	5b                   	pop    ebx
c0014627:	5e                   	pop    esi
c0014628:	5f                   	pop    edi
c0014629:	c3                   	ret    

c001462a <doubleFault(regs*, void*)>:
c001462a:	55                   	push   ebp
c001462b:	89 e5                	mov    ebp,esp
c001462d:	83 ec 08             	sub    esp,0x8
c0014630:	83 ec 0c             	sub    esp,0xc
c0014633:	68 ab b9 02 c0       	push   0xc002b9ab
c0014638:	e8 5a 60 00 00       	call   c001a697 <Krnl::panic(char const*)>
c001463d:	83 c4 10             	add    esp,0x10
c0014640:	90                   	nop
c0014641:	c9                   	leave  
c0014642:	c3                   	ret    
c0014643:	90                   	nop

c0014644 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014644:	56                   	push   esi
c0014645:	53                   	push   ebx
c0014646:	50                   	push   eax
c0014647:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001464b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001464f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014654:	75 35                	jne    c001468b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014656:	8d 43 20             	lea    eax,[ebx+0x20]
c0014659:	31 d2                	xor    edx,edx
c001465b:	89 c1                	mov    ecx,eax
c001465d:	c1 e1 04             	shl    ecx,0x4
c0014660:	01 f1                	add    ecx,esi
c0014662:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001466a:	74 3e                	je     c00146aa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001466c:	42                   	inc    edx
c001466d:	83 fa 04             	cmp    edx,0x4
c0014670:	75 f0                	jne    c0014662 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014672:	83 ec 0c             	sub    esp,0xc
c0014675:	68 f0 b9 02 c0       	push   0xc002b9f0
c001467a:	e8 18 60 00 00       	call   c001a697 <Krnl::panic(char const*)>
c001467f:	83 c4 10             	add    esp,0x10
c0014682:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014687:	5a                   	pop    edx
c0014688:	5b                   	pop    ebx
c0014689:	5e                   	pop    esi
c001468a:	c3                   	ret    
c001468b:	83 ec 0c             	sub    esp,0xc
c001468e:	56                   	push   esi
c001468f:	e8 ac fb ff ff       	call   c0014240 <Device::getName()>
c0014694:	83 c4 10             	add    esp,0x10
c0014697:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001469a:	75 ba                	jne    c0014656 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001469c:	83 fb 0f             	cmp    ebx,0xf
c001469f:	7f 29                	jg     c00146ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00146a1:	0f b6 9b 00 e4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1c00]
c00146a8:	eb ac                	jmp    c0014656 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146aa:	8d 04 82             	lea    eax,[edx+eax*4]
c00146ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146b1:	8d 04 86             	lea    eax,[esi+eax*4]
c00146b4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00146ba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00146be:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00146c4:	89 d8                	mov    eax,ebx
c00146c6:	5a                   	pop    edx
c00146c7:	5b                   	pop    ebx
c00146c8:	5e                   	pop    esi
c00146c9:	c3                   	ret    
c00146ca:	83 ec 0c             	sub    esp,0xc
c00146cd:	68 b8 b9 02 c0       	push   0xc002b9b8
c00146d2:	e8 c0 5f 00 00       	call   c001a697 <Krnl::panic(char const*)>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	e9 77 ff ff ff       	jmp    c0014656 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146df:	90                   	nop

c00146e0 <InterruptController::clearAllHandlers(int, bool)>:
c00146e0:	56                   	push   esi
c00146e1:	53                   	push   ebx
c00146e2:	52                   	push   edx
c00146e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146eb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00146f0:	75 61                	jne    c0014753 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00146f2:	8d 46 20             	lea    eax,[esi+0x20]
c00146f5:	c1 e6 04             	shl    esi,0x4
c00146f8:	c1 e0 04             	shl    eax,0x4
c00146fb:	01 de                	add    esi,ebx
c00146fd:	01 d8                	add    eax,ebx
c00146ff:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014709:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014713:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001471d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014727:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014731:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001473b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014745:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001474f:	58                   	pop    eax
c0014750:	5b                   	pop    ebx
c0014751:	5e                   	pop    esi
c0014752:	c3                   	ret    
c0014753:	83 ec 0c             	sub    esp,0xc
c0014756:	53                   	push   ebx
c0014757:	e8 e4 fa ff ff       	call   c0014240 <Device::getName()>
c001475c:	83 c4 10             	add    esp,0x10
c001475f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014762:	75 8e                	jne    c00146f2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014764:	83 fe 0f             	cmp    esi,0xf
c0014767:	7f 09                	jg     c0014772 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014769:	0f b6 b6 00 e4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1c00]
c0014770:	eb 80                	jmp    c00146f2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014772:	83 ec 0c             	sub    esp,0xc
c0014775:	68 2c ba 02 c0       	push   0xc002ba2c
c001477a:	e8 18 5f 00 00       	call   c001a697 <Krnl::panic(char const*)>
c001477f:	83 c4 10             	add    esp,0x10
c0014782:	e9 6b ff ff ff       	jmp    c00146f2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014787:	90                   	nop

c0014788 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014788:	56                   	push   esi
c0014789:	53                   	push   ebx
c001478a:	52                   	push   edx
c001478b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001478f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014793:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014798:	75 3a                	jne    c00147d4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001479a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001479e:	8d 50 20             	lea    edx,[eax+0x20]
c00147a1:	c1 e2 04             	shl    edx,0x4
c00147a4:	8d 04 16             	lea    eax,[esi+edx*1]
c00147a7:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00147ab:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00147b1:	74 0b                	je     c00147be <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00147b3:	83 c0 04             	add    eax,0x4
c00147b6:	39 d0                	cmp    eax,edx
c00147b8:	75 f1                	jne    c00147ab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00147ba:	58                   	pop    eax
c00147bb:	5b                   	pop    ebx
c00147bc:	5e                   	pop    esi
c00147bd:	c3                   	ret    
c00147be:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147c8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00147d2:	eb df                	jmp    c00147b3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00147d4:	83 ec 0c             	sub    esp,0xc
c00147d7:	56                   	push   esi
c00147d8:	e8 63 fa ff ff       	call   c0014240 <Device::getName()>
c00147dd:	83 c4 10             	add    esp,0x10
c00147e0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00147e3:	75 b5                	jne    c001479a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147e5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00147ea:	7f 11                	jg     c00147fd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00147ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147f0:	0f b6 80 00 e4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1c00]
c00147f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147fb:	eb 9d                	jmp    c001479a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147fd:	83 ec 0c             	sub    esp,0xc
c0014800:	68 2c ba 02 c0       	push   0xc002ba2c
c0014805:	e8 8d 5e 00 00       	call   c001a697 <Krnl::panic(char const*)>
c001480a:	83 c4 10             	add    esp,0x10
c001480d:	eb 8b                	jmp    c001479a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001480f <nmiHandler(regs*, void*)>:
c001480f:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0014814:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014818:	e9 b9 a7 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c001481d <int_handler>:
c001481d:	55                   	push   ebp
c001481e:	57                   	push   edi
c001481f:	56                   	push   esi
c0014820:	53                   	push   ebx
c0014821:	83 ec 0c             	sub    esp,0xc
c0014824:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014828:	80 3d 04 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031d04,0x0
c001482f:	74 0b                	je     c001483c <int_handler+0x1f>
c0014831:	fa                   	cli    
c0014832:	f4                   	hlt    
c0014833:	80 3d 04 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031d04,0x0
c001483a:	75 f5                	jne    c0014831 <int_handler+0x14>
c001483c:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0014841:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014844:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001484a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014850:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014853:	83 f8 17             	cmp    eax,0x17
c0014856:	77 13                	ja     c001486b <int_handler+0x4e>
c0014858:	83 ec 08             	sub    esp,0x8
c001485b:	8b 17                	mov    edx,DWORD PTR [edi]
c001485d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014860:	0f b6 c0             	movzx  eax,al
c0014863:	50                   	push   eax
c0014864:	57                   	push   edi
c0014865:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014868:	83 c4 10             	add    esp,0x10
c001486b:	83 c3 15             	add    ebx,0x15
c001486e:	c1 e3 04             	shl    ebx,0x4
c0014871:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014875:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001487c:	31 db                	xor    ebx,ebx
c001487e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014882:	85 c0                	test   eax,eax
c0014884:	74 13                	je     c0014899 <int_handler+0x7c>
c0014886:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014889:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001488d:	74 1c                	je     c00148ab <int_handler+0x8e>
c001488f:	83 ec 08             	sub    esp,0x8
c0014892:	52                   	push   edx
c0014893:	56                   	push   esi
c0014894:	ff d0                	call   eax
c0014896:	83 c4 10             	add    esp,0x10
c0014899:	43                   	inc    ebx
c001489a:	83 fb 04             	cmp    ebx,0x4
c001489d:	75 df                	jne    c001487e <int_handler+0x61>
c001489f:	83 c4 0c             	add    esp,0xc
c00148a2:	31 c0                	xor    eax,eax
c00148a4:	5b                   	pop    ebx
c00148a5:	31 d2                	xor    edx,edx
c00148a7:	5e                   	pop    esi
c00148a8:	5f                   	pop    edi
c00148a9:	5d                   	pop    ebp
c00148aa:	c3                   	ret    
c00148ab:	83 ec 08             	sub    esp,0x8
c00148ae:	52                   	push   edx
c00148af:	56                   	push   esi
c00148b0:	ff d0                	call   eax
c00148b2:	83 c4 10             	add    esp,0x10
c00148b5:	83 c4 0c             	add    esp,0xc
c00148b8:	5b                   	pop    ebx
c00148b9:	5e                   	pop    esi
c00148ba:	5f                   	pop    edi
c00148bb:	5d                   	pop    ebp
c00148bc:	c3                   	ret    
c00148bd:	90                   	nop

c00148be <InterruptController::InterruptController(char const*)>:
c00148be:	83 ec 1c             	sub    esp,0x1c
c00148c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148c5:	83 ec 08             	sub    esp,0x8
c00148c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00148cc:	50                   	push   eax
c00148cd:	e8 72 f8 ff ff       	call   c0014144 <Device::Device(char const*)>
c00148d2:	83 c4 10             	add    esp,0x10
c00148d5:	ba ec bc 02 c0       	mov    edx,0xc002bcec
c00148da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148de:	89 10                	mov    DWORD PTR [eax],edx
c00148e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148e4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00148ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148f6:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00148fe:	7f 5e                	jg     c001495e <InterruptController::InterruptController(char const*)+0xa0>
c0014900:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014908:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001490d:	7f 49                	jg     c0014958 <InterruptController::InterruptController(char const*)+0x9a>
c001490f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014913:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014917:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001491e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014922:	01 ca                	add    edx,ecx
c0014924:	83 c2 54             	add    edx,0x54
c0014927:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001492f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014933:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014937:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001493e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014942:	01 ca                	add    edx,ecx
c0014944:	81 c2 54 04 00 00    	add    edx,0x454
c001494a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014952:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014956:	eb b0                	jmp    c0014908 <InterruptController::InterruptController(char const*)+0x4a>
c0014958:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001495c:	eb 98                	jmp    c00148f6 <InterruptController::InterruptController(char const*)+0x38>
c001495e:	90                   	nop
c001495f:	83 c4 1c             	add    esp,0x1c
c0014962:	c3                   	ret    
c0014963:	90                   	nop

c0014964 <InterruptController::~InterruptController()>:
c0014964:	83 ec 0c             	sub    esp,0xc
c0014967:	ba ec bc 02 c0       	mov    edx,0xc002bcec
c001496c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014970:	89 10                	mov    DWORD PTR [eax],edx
c0014972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014976:	83 ec 0c             	sub    esp,0xc
c0014979:	50                   	push   eax
c001497a:	e8 8f f4 ff ff       	call   c0013e0e <Device::~Device()>
c001497f:	83 c4 10             	add    esp,0x10
c0014982:	90                   	nop
c0014983:	83 c4 0c             	add    esp,0xc
c0014986:	c3                   	ret    
c0014987:	90                   	nop

c0014988 <InterruptController::~InterruptController()>:
c0014988:	83 ec 0c             	sub    esp,0xc
c001498b:	83 ec 0c             	sub    esp,0xc
c001498e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014992:	e8 cd ff ff ff       	call   c0014964 <InterruptController::~InterruptController()>
c0014997:	83 c4 10             	add    esp,0x10
c001499a:	83 ec 08             	sub    esp,0x8
c001499d:	68 58 21 00 00       	push   0x2158
c00149a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149a6:	e8 7c e0 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c00149ab:	83 c4 10             	add    esp,0x10
c00149ae:	83 c4 0c             	add    esp,0xc
c00149b1:	c3                   	ret    

c00149b2 <displayDebugInfo(regs*)>:
c00149b2:	55                   	push   ebp
c00149b3:	57                   	push   edi
c00149b4:	56                   	push   esi
c00149b5:	53                   	push   ebx
c00149b6:	83 ec 24             	sub    esp,0x24
c00149b9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00149bd:	0f 20 c2             	mov    edx,cr0
c00149c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00149c4:	0f 20 d7             	mov    edi,cr2
c00149c7:	0f 20 de             	mov    esi,cr3
c00149ca:	0f 20 e5             	mov    ebp,cr4
c00149cd:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00149d0:	68 66 ba 02 c0       	push   0xc002ba66
c00149d5:	e8 2d e1 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00149da:	59                   	pop    ecx
c00149db:	58                   	pop    eax
c00149dc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00149df:	68 71 ba 02 c0       	push   0xc002ba71
c00149e4:	e8 1e e1 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00149e9:	58                   	pop    eax
c00149ea:	5a                   	pop    edx
c00149eb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00149ee:	68 7c ba 02 c0       	push   0xc002ba7c
c00149f3:	e8 0f e1 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00149f8:	59                   	pop    ecx
c00149f9:	58                   	pop    eax
c00149fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149fd:	68 87 ba 02 c0       	push   0xc002ba87
c0014a02:	e8 00 e1 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014a07:	58                   	pop    eax
c0014a08:	5a                   	pop    edx
c0014a09:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014a0c:	68 92 ba 02 c0       	push   0xc002ba92
c0014a11:	e8 f1 e0 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014a16:	59                   	pop    ecx
c0014a17:	58                   	pop    eax
c0014a18:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014a1b:	68 9d ba 02 c0       	push   0xc002ba9d
c0014a20:	e8 e2 e0 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014a25:	58                   	pop    eax
c0014a26:	5a                   	pop    edx
c0014a27:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014a2a:	68 a8 ba 02 c0       	push   0xc002baa8
c0014a2f:	e8 d3 e0 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014a34:	59                   	pop    ecx
c0014a35:	58                   	pop    eax
c0014a36:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014a39:	68 b3 ba 02 c0       	push   0xc002bab3
c0014a3e:	e8 c4 e0 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014a43:	58                   	pop    eax
c0014a44:	5a                   	pop    edx
c0014a45:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a48:	68 be ba 02 c0       	push   0xc002babe
c0014a4d:	e8 b5 e0 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014a52:	59                   	pop    ecx
c0014a53:	58                   	pop    eax
c0014a54:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a57:	68 cd ba 02 c0       	push   0xc002bacd
c0014a5c:	e8 a6 e0 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014a61:	58                   	pop    eax
c0014a62:	5a                   	pop    edx
c0014a63:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a66:	68 d8 ba 02 c0       	push   0xc002bad8
c0014a6b:	e8 97 e0 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014a70:	59                   	pop    ecx
c0014a71:	58                   	pop    eax
c0014a72:	57                   	push   edi
c0014a73:	68 e3 ba 02 c0       	push   0xc002bae3
c0014a78:	e8 8a e0 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014a7d:	58                   	pop    eax
c0014a7e:	5a                   	pop    edx
c0014a7f:	56                   	push   esi
c0014a80:	68 ee ba 02 c0       	push   0xc002baee
c0014a85:	e8 7d e0 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014a8a:	59                   	pop    ecx
c0014a8b:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014a90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a96:	e8 8f be ff ff       	call   c001092a <setActiveTerminal(VgaText*)>
c0014a9b:	58                   	pop    eax
c0014a9c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a9f:	5a                   	pop    edx
c0014aa0:	c1 e0 05             	shl    eax,0x5
c0014aa3:	05 60 e1 02 c0       	add    eax,0xc002e160
c0014aa8:	50                   	push   eax
c0014aa9:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014aae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab4:	e8 fd c1 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014ab9:	59                   	pop    ecx
c0014aba:	58                   	pop    eax
c0014abb:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014ac0:	68 f9 ba 02 c0       	push   0xc002baf9
c0014ac5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014acb:	e8 e6 c1 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014ad0:	58                   	pop    eax
c0014ad1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ad6:	5a                   	pop    edx
c0014ad7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ada:	83 c0 0c             	add    eax,0xc
c0014add:	50                   	push   eax
c0014ade:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014ae3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae9:	e8 c8 c1 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014aee:	59                   	pop    ecx
c0014aef:	58                   	pop    eax
c0014af0:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014af5:	68 02 bb 02 c0       	push   0xc002bb02
c0014afa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b00:	e8 b1 c1 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014b05:	58                   	pop    eax
c0014b06:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014b0b:	5a                   	pop    edx
c0014b0c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b15:	e8 c2 c1 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014b1a:	59                   	pop    ecx
c0014b1b:	58                   	pop    eax
c0014b1c:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014b21:	68 0a bb 02 c0       	push   0xc002bb0a
c0014b26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2c:	e8 85 c1 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014b31:	58                   	pop    eax
c0014b32:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014b37:	5a                   	pop    edx
c0014b38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014b3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b41:	e8 96 c1 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014b46:	59                   	pop    ecx
c0014b47:	58                   	pop    eax
c0014b48:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014b4d:	68 12 bb 02 c0       	push   0xc002bb12
c0014b52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b58:	e8 59 c1 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014b5d:	58                   	pop    eax
c0014b5e:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014b63:	5a                   	pop    edx
c0014b64:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014b67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b6d:	e8 6a c1 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014b72:	59                   	pop    ecx
c0014b73:	58                   	pop    eax
c0014b74:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014b79:	68 1a bb 02 c0       	push   0xc002bb1a
c0014b7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b84:	e8 2d c1 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014b89:	58                   	pop    eax
c0014b8a:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014b8f:	5a                   	pop    edx
c0014b90:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014b93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b99:	e8 3e c1 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014b9e:	59                   	pop    ecx
c0014b9f:	58                   	pop    eax
c0014ba0:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014ba5:	68 22 bb 02 c0       	push   0xc002bb22
c0014baa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb0:	e8 01 c1 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014bb5:	58                   	pop    eax
c0014bb6:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014bbb:	5a                   	pop    edx
c0014bbc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014bbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc5:	e8 12 c1 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014bca:	59                   	pop    ecx
c0014bcb:	58                   	pop    eax
c0014bcc:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014bd1:	68 2a bb 02 c0       	push   0xc002bb2a
c0014bd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bdc:	e8 d5 c0 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014be1:	58                   	pop    eax
c0014be2:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014be7:	5a                   	pop    edx
c0014be8:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014beb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bf1:	e8 e6 c0 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014bf6:	59                   	pop    ecx
c0014bf7:	58                   	pop    eax
c0014bf8:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014bfd:	68 32 bb 02 c0       	push   0xc002bb32
c0014c02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c08:	e8 a9 c0 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014c0d:	58                   	pop    eax
c0014c0e:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014c13:	5a                   	pop    edx
c0014c14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014c18:	52                   	push   edx
c0014c19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c1f:	e8 b8 c0 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014c24:	59                   	pop    ecx
c0014c25:	58                   	pop    eax
c0014c26:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014c2b:	68 3b bb 02 c0       	push   0xc002bb3b
c0014c30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c36:	e8 7b c0 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014c3b:	58                   	pop    eax
c0014c3c:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014c41:	5a                   	pop    edx
c0014c42:	57                   	push   edi
c0014c43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c49:	e8 8e c0 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014c4e:	59                   	pop    ecx
c0014c4f:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014c54:	5f                   	pop    edi
c0014c55:	68 43 bb 02 c0       	push   0xc002bb43
c0014c5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c60:	e8 51 c0 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014c65:	58                   	pop    eax
c0014c66:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014c6b:	5a                   	pop    edx
c0014c6c:	56                   	push   esi
c0014c6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c73:	e8 64 c0 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014c78:	59                   	pop    ecx
c0014c79:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014c7e:	5e                   	pop    esi
c0014c7f:	68 4b bb 02 c0       	push   0xc002bb4b
c0014c84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c8a:	e8 27 c0 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014c8f:	5f                   	pop    edi
c0014c90:	58                   	pop    eax
c0014c91:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014c96:	55                   	push   ebp
c0014c97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c9d:	e8 3a c0 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014ca2:	58                   	pop    eax
c0014ca3:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014ca8:	5a                   	pop    edx
c0014ca9:	68 53 bb 02 c0       	push   0xc002bb53
c0014cae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cb4:	e8 fd bf ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014cb9:	0f 21 c0             	mov    eax,db0
c0014cbc:	59                   	pop    ecx
c0014cbd:	5e                   	pop    esi
c0014cbe:	50                   	push   eax
c0014cbf:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014cc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cca:	e8 0d c0 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014ccf:	5f                   	pop    edi
c0014cd0:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014cd5:	5d                   	pop    ebp
c0014cd6:	68 5c bb 02 c0       	push   0xc002bb5c
c0014cdb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce1:	e8 d0 bf ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014ce6:	0f 21 c8             	mov    eax,db1
c0014ce9:	5a                   	pop    edx
c0014cea:	59                   	pop    ecx
c0014ceb:	50                   	push   eax
c0014cec:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014cf1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cf7:	e8 e0 bf ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014cfc:	5e                   	pop    esi
c0014cfd:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014d02:	5f                   	pop    edi
c0014d03:	68 64 bb 02 c0       	push   0xc002bb64
c0014d08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d0e:	e8 a3 bf ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014d13:	0f 21 d0             	mov    eax,db2
c0014d16:	5d                   	pop    ebp
c0014d17:	5a                   	pop    edx
c0014d18:	50                   	push   eax
c0014d19:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014d1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d24:	e8 b3 bf ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014d29:	59                   	pop    ecx
c0014d2a:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014d2f:	5e                   	pop    esi
c0014d30:	68 6c bb 02 c0       	push   0xc002bb6c
c0014d35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d3b:	e8 76 bf ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014d40:	0f 21 d8             	mov    eax,db3
c0014d43:	5f                   	pop    edi
c0014d44:	5d                   	pop    ebp
c0014d45:	50                   	push   eax
c0014d46:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014d4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d51:	e8 86 bf ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014d56:	58                   	pop    eax
c0014d57:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014d5c:	5a                   	pop    edx
c0014d5d:	68 74 bb 02 c0       	push   0xc002bb74
c0014d62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d68:	e8 49 bf ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014d6d:	0f 21 f0             	mov    eax,db6
c0014d70:	59                   	pop    ecx
c0014d71:	5e                   	pop    esi
c0014d72:	50                   	push   eax
c0014d73:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014d78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d7e:	e8 59 bf ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014d83:	5f                   	pop    edi
c0014d84:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014d89:	5d                   	pop    ebp
c0014d8a:	68 7c bb 02 c0       	push   0xc002bb7c
c0014d8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d95:	e8 1c bf ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014d9a:	0f 21 f8             	mov    eax,db7
c0014d9d:	5a                   	pop    edx
c0014d9e:	59                   	pop    ecx
c0014d9f:	50                   	push   eax
c0014da0:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014da5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dab:	e8 2c bf ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014db0:	5e                   	pop    esi
c0014db1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014db4:	e8 61 8c 00 00       	call   c001da1a <Thr::getDriverNameFromAddress(unsigned long)>
c0014db9:	83 c4 10             	add    esp,0x10
c0014dbc:	85 c0                	test   eax,eax
c0014dbe:	74 7d                	je     c0014e3d <displayDebugInfo(regs*)+0x48b>
c0014dc0:	89 c6                	mov    esi,eax
c0014dc2:	50                   	push   eax
c0014dc3:	50                   	push   eax
c0014dc4:	56                   	push   esi
c0014dc5:	68 84 bb 02 c0       	push   0xc002bb84
c0014dca:	e8 38 dd ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014dcf:	5a                   	pop    edx
c0014dd0:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014dd5:	59                   	pop    ecx
c0014dd6:	68 92 bb 02 c0       	push   0xc002bb92
c0014ddb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de1:	e8 d0 be ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014de6:	5f                   	pop    edi
c0014de7:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014dec:	5d                   	pop    ebp
c0014ded:	56                   	push   esi
c0014dee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df4:	e8 bd be ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014df9:	58                   	pop    eax
c0014dfa:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014dff:	5a                   	pop    edx
c0014e00:	68 9e bb 02 c0       	push   0xc002bb9e
c0014e05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e0b:	e8 a6 be ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c0014e10:	59                   	pop    ecx
c0014e11:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0014e16:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014e1c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e1f:	e8 2d 8c 00 00       	call   c001da51 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014e24:	5b                   	pop    ebx
c0014e25:	5d                   	pop    ebp
c0014e26:	50                   	push   eax
c0014e27:	57                   	push   edi
c0014e28:	e8 af be ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c0014e2d:	58                   	pop    eax
c0014e2e:	5a                   	pop    edx
c0014e2f:	56                   	push   esi
c0014e30:	68 aa bb 02 c0       	push   0xc002bbaa
c0014e35:	e8 cd dc ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014e3a:	83 c4 10             	add    esp,0x10
c0014e3d:	fa                   	cli    
c0014e3e:	f4                   	hlt    
c0014e3f:	eb fe                	jmp    c0014e3f <displayDebugInfo(regs*)+0x48d>

c0014e41 <x87EmulHandler(regs*, void*)>:
c0014e41:	83 ec 0c             	sub    esp,0xc
c0014e44:	0f 20 c2             	mov    edx,cr0
c0014e47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e4c:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014e50:	75 4b                	jne    c0014e9d <x87EmulHandler(regs*, void*)+0x5c>
c0014e52:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0014e57:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014e5d:	85 c0                	test   eax,eax
c0014e5f:	74 05                	je     c0014e66 <x87EmulHandler(regs*, void*)+0x25>
c0014e61:	83 e2 08             	and    edx,0x8
c0014e64:	75 17                	jne    c0014e7d <x87EmulHandler(regs*, void*)+0x3c>
c0014e66:	83 ec 0c             	sub    esp,0xc
c0014e69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e6d:	e8 9f b0 00 00       	call   c001ff11 <Vm::x87Handler(regs*)>
c0014e72:	83 c4 10             	add    esp,0x10
c0014e75:	84 c0                	test   al,al
c0014e77:	74 24                	je     c0014e9d <x87EmulHandler(regs*, void*)+0x5c>
c0014e79:	83 c4 0c             	add    esp,0xc
c0014e7c:	c3                   	ret    
c0014e7d:	83 ec 0c             	sub    esp,0xc
c0014e80:	68 d0 bb 02 c0       	push   0xc002bbd0
c0014e85:	e8 7d dc ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014e8a:	0f 06                	clts   
c0014e8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e91:	83 c4 10             	add    esp,0x10
c0014e94:	a3 48 f3 02 c0       	mov    ds:0xc002f348,eax
c0014e99:	83 c4 0c             	add    esp,0xc
c0014e9c:	c3                   	ret    
c0014e9d:	83 ec 0c             	sub    esp,0xc
c0014ea0:	68 ba bb 02 c0       	push   0xc002bbba
c0014ea5:	e8 5d dc ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014eaa:	5a                   	pop    edx
c0014eab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014eaf:	e8 fe fa ff ff       	call   c00149b2 <displayDebugInfo(regs*)>

c0014eb4 <gpFault(regs*, void*)>:
c0014eb4:	53                   	push   ebx
c0014eb5:	83 ec 14             	sub    esp,0x14
c0014eb8:	c7 05 44 f3 02 c0 ea f3 01 c0 	mov    DWORD PTR ds:0xc002f344,0xc001f3ea
c0014ec2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014ec6:	53                   	push   ebx
c0014ec7:	e8 1e a5 00 00       	call   c001f3ea <Vm::faultHandler(regs*)>
c0014ecc:	83 c4 10             	add    esp,0x10
c0014ecf:	84 c0                	test   al,al
c0014ed1:	74 05                	je     c0014ed8 <gpFault(regs*, void*)+0x24>
c0014ed3:	83 c4 08             	add    esp,0x8
c0014ed6:	5b                   	pop    ebx
c0014ed7:	c3                   	ret    
c0014ed8:	83 ec 0c             	sub    esp,0xc
c0014edb:	68 dd bb 02 c0       	push   0xc002bbdd
c0014ee0:	e8 22 dc ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014ee5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ee8:	e8 c5 fa ff ff       	call   c00149b2 <displayDebugInfo(regs*)>

c0014eed <pgFault(regs*, void*)>:
c0014eed:	83 ec 18             	sub    esp,0x18
c0014ef0:	68 f8 bb 02 c0       	push   0xc002bbf8
c0014ef5:	e8 0d dc ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014efa:	58                   	pop    eax
c0014efb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014eff:	e8 ae fa ff ff       	call   c00149b2 <displayDebugInfo(regs*)>

c0014f04 <otherISRHandler(regs*, void*)>:
c0014f04:	53                   	push   ebx
c0014f05:	83 ec 0c             	sub    esp,0xc
c0014f08:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f0c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f0f:	50                   	push   eax
c0014f10:	50                   	push   eax
c0014f11:	68 05 bc 02 c0       	push   0xc002bc05
c0014f16:	e8 ec db ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014f1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f1e:	e8 8f fa ff ff       	call   c00149b2 <displayDebugInfo(regs*)>

c0014f23 <opcodeFault(regs*, void*)>:
c0014f23:	55                   	push   ebp
c0014f24:	89 e5                	mov    ebp,esp
c0014f26:	56                   	push   esi
c0014f27:	53                   	push   ebx
c0014f28:	83 ec 40             	sub    esp,0x40
c0014f2b:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0014f30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f36:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014f3c:	84 c0                	test   al,al
c0014f3e:	74 24                	je     c0014f64 <opcodeFault(regs*, void*)+0x41>
c0014f40:	83 ec 0c             	sub    esp,0xc
c0014f43:	68 24 bc 02 c0       	push   0xc002bc24
c0014f48:	e8 ba db ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0014f4d:	83 c4 10             	add    esp,0x10
c0014f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f53:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f56:	8d 50 19             	lea    edx,[eax+0x19]
c0014f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f5f:	e9 d5 05 00 00       	jmp    c0015539 <opcodeFault(regs*, void*)+0x616>
c0014f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f67:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f6a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014f6d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014f71:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f7b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014f7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f81:	8a 00                	mov    al,BYTE PTR [eax]
c0014f83:	3c f0                	cmp    al,0xf0
c0014f85:	75 17                	jne    c0014f9e <opcodeFault(regs*, void*)+0x7b>
c0014f87:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f90:	8d 50 01             	lea    edx,[eax+0x1]
c0014f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f96:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f99:	e9 da 00 00 00       	jmp    c0015078 <opcodeFault(regs*, void*)+0x155>
c0014f9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa1:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa3:	3c f2                	cmp    al,0xf2
c0014fa5:	74 09                	je     c0014fb0 <opcodeFault(regs*, void*)+0x8d>
c0014fa7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014faa:	8a 00                	mov    al,BYTE PTR [eax]
c0014fac:	3c f3                	cmp    al,0xf3
c0014fae:	75 1b                	jne    c0014fcb <opcodeFault(regs*, void*)+0xa8>
c0014fb0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fb4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fbd:	8d 50 01             	lea    edx,[eax+0x1]
c0014fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fc6:	e9 ad 00 00 00       	jmp    c0015078 <opcodeFault(regs*, void*)+0x155>
c0014fcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fce:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd0:	3c 66                	cmp    al,0x66
c0014fd2:	75 1f                	jne    c0014ff3 <opcodeFault(regs*, void*)+0xd0>
c0014fd4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fd8:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014fdc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fe5:	8d 50 01             	lea    edx,[eax+0x1]
c0014fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014feb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fee:	e9 85 00 00 00       	jmp    c0015078 <opcodeFault(regs*, void*)+0x155>
c0014ff3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ff6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff8:	3c 67                	cmp    al,0x67
c0014ffa:	75 18                	jne    c0015014 <opcodeFault(regs*, void*)+0xf1>
c0014ffc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015000:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015006:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015009:	8d 50 01             	lea    edx,[eax+0x1]
c001500c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015012:	eb 64                	jmp    c0015078 <opcodeFault(regs*, void*)+0x155>
c0015014:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015017:	8a 00                	mov    al,BYTE PTR [eax]
c0015019:	3c 2e                	cmp    al,0x2e
c001501b:	74 09                	je     c0015026 <opcodeFault(regs*, void*)+0x103>
c001501d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015020:	8a 00                	mov    al,BYTE PTR [eax]
c0015022:	3c 3e                	cmp    al,0x3e
c0015024:	75 18                	jne    c001503e <opcodeFault(regs*, void*)+0x11b>
c0015026:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001502a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001502d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015030:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015033:	8d 50 01             	lea    edx,[eax+0x1]
c0015036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015039:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001503c:	eb 3a                	jmp    c0015078 <opcodeFault(regs*, void*)+0x155>
c001503e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015041:	8a 00                	mov    al,BYTE PTR [eax]
c0015043:	3c 36                	cmp    al,0x36
c0015045:	74 1b                	je     c0015062 <opcodeFault(regs*, void*)+0x13f>
c0015047:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001504a:	8a 00                	mov    al,BYTE PTR [eax]
c001504c:	3c 26                	cmp    al,0x26
c001504e:	74 12                	je     c0015062 <opcodeFault(regs*, void*)+0x13f>
c0015050:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015053:	8a 00                	mov    al,BYTE PTR [eax]
c0015055:	3c 64                	cmp    al,0x64
c0015057:	74 09                	je     c0015062 <opcodeFault(regs*, void*)+0x13f>
c0015059:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001505c:	8a 00                	mov    al,BYTE PTR [eax]
c001505e:	3c 65                	cmp    al,0x65
c0015060:	75 16                	jne    c0015078 <opcodeFault(regs*, void*)+0x155>
c0015062:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015066:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001506f:	8d 50 01             	lea    edx,[eax+0x1]
c0015072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015075:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015078:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001507b:	8a 00                	mov    al,BYTE PTR [eax]
c001507d:	3c 0f                	cmp    al,0xf
c001507f:	0f 85 ad 00 00 00    	jne    c0015132 <opcodeFault(regs*, void*)+0x20f>
c0015085:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015088:	40                   	inc    eax
c0015089:	8a 00                	mov    al,BYTE PTR [eax]
c001508b:	3c c2                	cmp    al,0xc2
c001508d:	74 0e                	je     c001509d <opcodeFault(regs*, void*)+0x17a>
c001508f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015092:	40                   	inc    eax
c0015093:	8a 00                	mov    al,BYTE PTR [eax]
c0015095:	3c c3                	cmp    al,0xc3
c0015097:	0f 85 95 00 00 00    	jne    c0015132 <opcodeFault(regs*, void*)+0x20f>
c001509d:	83 ec 0c             	sub    esp,0xc
c00150a0:	68 47 bc 02 c0       	push   0xc002bc47
c00150a5:	e8 5d da ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150b3:	8d 50 01             	lea    edx,[eax+0x1]
c00150b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150bc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c2:	8a 00                	mov    al,BYTE PTR [eax]
c00150c4:	8d 50 fe             	lea    edx,[eax-0x2]
c00150c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ca:	88 10                	mov    BYTE PTR [eax],dl
c00150cc:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00150cf:	50                   	push   eax
c00150d0:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00150d3:	50                   	push   eax
c00150d4:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00150d7:	50                   	push   eax
c00150d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150db:	e8 84 4c 00 00       	call   c0019d64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150e0:	83 c4 10             	add    esp,0x10
c00150e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150e9:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00150ec:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00150ef:	01 d0                	add    eax,edx
c00150f1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00150f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150fa:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00150fd:	48                   	dec    eax
c00150fe:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015104:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015107:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001510a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510d:	83 ec 04             	sub    esp,0x4
c0015110:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015113:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015116:	50                   	push   eax
c0015117:	e8 98 b0 fe ff       	call   c00001b4 <voodooXADD>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015122:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015125:	01 c2                	add    edx,eax
c0015127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001512d:	e9 07 04 00 00       	jmp    c0015539 <opcodeFault(regs*, void*)+0x616>
c0015132:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015135:	8a 00                	mov    al,BYTE PTR [eax]
c0015137:	3c 0f                	cmp    al,0xf
c0015139:	0f 85 8b 01 00 00    	jne    c00152ca <opcodeFault(regs*, void*)+0x3a7>
c001513f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015142:	40                   	inc    eax
c0015143:	8a 00                	mov    al,BYTE PTR [eax]
c0015145:	3c c7                	cmp    al,0xc7
c0015147:	0f 86 7d 01 00 00    	jbe    c00152ca <opcodeFault(regs*, void*)+0x3a7>
c001514d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015150:	40                   	inc    eax
c0015151:	8a 00                	mov    al,BYTE PTR [eax]
c0015153:	3c cf                	cmp    al,0xcf
c0015155:	0f 87 6f 01 00 00    	ja     c00152ca <opcodeFault(regs*, void*)+0x3a7>
c001515b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001515e:	40                   	inc    eax
c001515f:	8a 00                	mov    al,BYTE PTR [eax]
c0015161:	83 c0 38             	add    eax,0x38
c0015164:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015167:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001516b:	75 0b                	jne    c0015178 <opcodeFault(regs*, void*)+0x255>
c001516d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015170:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015173:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015176:	eb 75                	jmp    c00151ed <opcodeFault(regs*, void*)+0x2ca>
c0015178:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001517c:	75 0b                	jne    c0015189 <opcodeFault(regs*, void*)+0x266>
c001517e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015181:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015184:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015187:	eb 64                	jmp    c00151ed <opcodeFault(regs*, void*)+0x2ca>
c0015189:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001518d:	75 0b                	jne    c001519a <opcodeFault(regs*, void*)+0x277>
c001518f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015192:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015195:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015198:	eb 53                	jmp    c00151ed <opcodeFault(regs*, void*)+0x2ca>
c001519a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001519e:	75 0b                	jne    c00151ab <opcodeFault(regs*, void*)+0x288>
c00151a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151a6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151a9:	eb 42                	jmp    c00151ed <opcodeFault(regs*, void*)+0x2ca>
c00151ab:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00151af:	75 0b                	jne    c00151bc <opcodeFault(regs*, void*)+0x299>
c00151b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b4:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00151b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151ba:	eb 31                	jmp    c00151ed <opcodeFault(regs*, void*)+0x2ca>
c00151bc:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00151c0:	75 0b                	jne    c00151cd <opcodeFault(regs*, void*)+0x2aa>
c00151c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00151c8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151cb:	eb 20                	jmp    c00151ed <opcodeFault(regs*, void*)+0x2ca>
c00151cd:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00151d1:	75 0b                	jne    c00151de <opcodeFault(regs*, void*)+0x2bb>
c00151d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00151d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151dc:	eb 0f                	jmp    c00151ed <opcodeFault(regs*, void*)+0x2ca>
c00151de:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00151e2:	75 09                	jne    c00151ed <opcodeFault(regs*, void*)+0x2ca>
c00151e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00151ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151ed:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00151f1:	74 10                	je     c0015203 <opcodeFault(regs*, void*)+0x2e0>
c00151f3:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00151fa:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015201:	eb 2d                	jmp    c0015230 <opcodeFault(regs*, void*)+0x30d>
c0015203:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015206:	c1 e0 18             	shl    eax,0x18
c0015209:	89 c2                	mov    edx,eax
c001520b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001520e:	c1 e0 08             	shl    eax,0x8
c0015211:	25 00 00 ff 00       	and    eax,0xff0000
c0015216:	09 c2                	or     edx,eax
c0015218:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001521b:	c1 e8 08             	shr    eax,0x8
c001521e:	25 00 ff 00 00       	and    eax,0xff00
c0015223:	09 c2                	or     edx,eax
c0015225:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015228:	c1 e8 18             	shr    eax,0x18
c001522b:	09 d0                	or     eax,edx
c001522d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015230:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015234:	75 0b                	jne    c0015241 <opcodeFault(regs*, void*)+0x31e>
c0015236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015239:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001523c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001523f:	eb 75                	jmp    c00152b6 <opcodeFault(regs*, void*)+0x393>
c0015241:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015245:	75 0b                	jne    c0015252 <opcodeFault(regs*, void*)+0x32f>
c0015247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001524d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015250:	eb 64                	jmp    c00152b6 <opcodeFault(regs*, void*)+0x393>
c0015252:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015256:	75 0b                	jne    c0015263 <opcodeFault(regs*, void*)+0x340>
c0015258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001525e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015261:	eb 53                	jmp    c00152b6 <opcodeFault(regs*, void*)+0x393>
c0015263:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015267:	75 0b                	jne    c0015274 <opcodeFault(regs*, void*)+0x351>
c0015269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001526f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015272:	eb 42                	jmp    c00152b6 <opcodeFault(regs*, void*)+0x393>
c0015274:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015278:	75 0b                	jne    c0015285 <opcodeFault(regs*, void*)+0x362>
c001527a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015280:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015283:	eb 31                	jmp    c00152b6 <opcodeFault(regs*, void*)+0x393>
c0015285:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015289:	75 0b                	jne    c0015296 <opcodeFault(regs*, void*)+0x373>
c001528b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015291:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015294:	eb 20                	jmp    c00152b6 <opcodeFault(regs*, void*)+0x393>
c0015296:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001529a:	75 0b                	jne    c00152a7 <opcodeFault(regs*, void*)+0x384>
c001529c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152a2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00152a5:	eb 0f                	jmp    c00152b6 <opcodeFault(regs*, void*)+0x393>
c00152a7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00152ab:	75 09                	jne    c00152b6 <opcodeFault(regs*, void*)+0x393>
c00152ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152b3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00152b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152bc:	8d 50 02             	lea    edx,[eax+0x2]
c00152bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152c5:	e9 6f 02 00 00       	jmp    c0015539 <opcodeFault(regs*, void*)+0x616>
c00152ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cd:	8a 00                	mov    al,BYTE PTR [eax]
c00152cf:	3c 0f                	cmp    al,0xf
c00152d1:	0f 85 8d 01 00 00    	jne    c0015464 <opcodeFault(regs*, void*)+0x541>
c00152d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152da:	40                   	inc    eax
c00152db:	8a 00                	mov    al,BYTE PTR [eax]
c00152dd:	3c c7                	cmp    al,0xc7
c00152df:	0f 85 7f 01 00 00    	jne    c0015464 <opcodeFault(regs*, void*)+0x541>
c00152e5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ee:	8d 50 01             	lea    edx,[eax+0x1]
c00152f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152f7:	8d 45 ba             	lea    eax,[ebp-0x46]
c00152fa:	50                   	push   eax
c00152fb:	8d 45 bb             	lea    eax,[ebp-0x45]
c00152fe:	50                   	push   eax
c00152ff:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015302:	50                   	push   eax
c0015303:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015306:	e8 59 4a 00 00       	call   c0019d64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001530b:	83 c4 10             	add    esp,0x10
c001530e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015311:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015314:	83 f0 01             	xor    eax,0x1
c0015317:	84 c0                	test   al,al
c0015319:	0f 84 45 01 00 00    	je     c0015464 <opcodeFault(regs*, void*)+0x541>
c001531f:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015322:	3c 01                	cmp    al,0x1
c0015324:	0f 85 3a 01 00 00    	jne    c0015464 <opcodeFault(regs*, void*)+0x541>
c001532a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001532d:	83 f0 01             	xor    eax,0x1
c0015330:	84 c0                	test   al,al
c0015332:	0f 84 2c 01 00 00    	je     c0015464 <opcodeFault(regs*, void*)+0x541>
c0015338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001533e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015341:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015348:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001534b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001534e:	89 c2                	mov    edx,eax
c0015350:	b8 00 00 00 00       	mov    eax,0x0
c0015355:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015358:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001535b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015361:	ba 00 00 00 00       	mov    edx,0x0
c0015366:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015369:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001536c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015372:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015375:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001537c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001537f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015382:	89 c2                	mov    edx,eax
c0015384:	b8 00 00 00 00       	mov    eax,0x0
c0015389:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001538c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001538f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015392:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015395:	ba 00 00 00 00       	mov    edx,0x0
c001539a:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001539d:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00153a0:	fa                   	cli    
c00153a1:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c00153a6:	40                   	inc    eax
c00153a7:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c00153ac:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00153af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00153b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b4:	89 c1                	mov    ecx,eax
c00153b6:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00153b9:	89 cb                	mov    ebx,ecx
c00153bb:	89 d0                	mov    eax,edx
c00153bd:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00153c0:	89 c6                	mov    esi,eax
c00153c2:	89 f0                	mov    eax,esi
c00153c4:	09 d8                	or     eax,ebx
c00153c6:	85 c0                	test   eax,eax
c00153c8:	75 21                	jne    c00153eb <opcodeFault(regs*, void*)+0x4c8>
c00153ca:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00153cd:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00153d0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00153d3:	89 01                	mov    DWORD PTR [ecx],eax
c00153d5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00153d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153de:	83 c8 40             	or     eax,0x40
c00153e1:	89 c2                	mov    edx,eax
c00153e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e6:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00153e9:	eb 3e                	jmp    c0015429 <opcodeFault(regs*, void*)+0x506>
c00153eb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00153ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00153f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00153f6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00153f9:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00153fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ff:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015402:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015405:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015408:	89 d0                	mov    eax,edx
c001540a:	31 d2                	xor    edx,edx
c001540c:	89 c3                	mov    ebx,eax
c001540e:	89 d6                	mov    esi,edx
c0015410:	89 da                	mov    edx,ebx
c0015412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015415:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001541e:	83 e0 bf             	and    eax,0xffffffbf
c0015421:	89 c2                	mov    edx,eax
c0015423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015426:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015429:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001542e:	48                   	dec    eax
c001542f:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0015434:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0015439:	85 c0                	test   eax,eax
c001543b:	75 01                	jne    c001543e <opcodeFault(regs*, void*)+0x51b>
c001543d:	fb                   	sti    
c001543e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015441:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015444:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015447:	01 c2                	add    edx,eax
c0015449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001544f:	83 ec 0c             	sub    esp,0xc
c0015452:	68 56 bc 02 c0       	push   0xc002bc56
c0015457:	e8 ab d6 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001545c:	83 c4 10             	add    esp,0x10
c001545f:	e9 d5 00 00 00       	jmp    c0015539 <opcodeFault(regs*, void*)+0x616>
c0015464:	83 ec 0c             	sub    esp,0xc
c0015467:	68 69 bc 02 c0       	push   0xc002bc69
c001546c:	e8 96 d6 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015477:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001547a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015480:	c1 e0 04             	shl    eax,0x4
c0015483:	01 d0                	add    eax,edx
c0015485:	83 c0 03             	add    eax,0x3
c0015488:	8a 00                	mov    al,BYTE PTR [eax]
c001548a:	0f b6 d8             	movzx  ebx,al
c001548d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015490:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015496:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015499:	c1 e0 04             	shl    eax,0x4
c001549c:	01 d0                	add    eax,edx
c001549e:	83 c0 02             	add    eax,0x2
c00154a1:	8a 00                	mov    al,BYTE PTR [eax]
c00154a3:	0f b6 c8             	movzx  ecx,al
c00154a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00154ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154b2:	c1 e0 04             	shl    eax,0x4
c00154b5:	01 d0                	add    eax,edx
c00154b7:	40                   	inc    eax
c00154b8:	8a 00                	mov    al,BYTE PTR [eax]
c00154ba:	0f b6 d0             	movzx  edx,al
c00154bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c0:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00154c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154c9:	c1 e0 04             	shl    eax,0x4
c00154cc:	01 f0                	add    eax,esi
c00154ce:	8a 00                	mov    al,BYTE PTR [eax]
c00154d0:	0f b6 c0             	movzx  eax,al
c00154d3:	83 ec 0c             	sub    esp,0xc
c00154d6:	53                   	push   ebx
c00154d7:	51                   	push   ecx
c00154d8:	52                   	push   edx
c00154d9:	50                   	push   eax
c00154da:	68 7c bc 02 c0       	push   0xc002bc7c
c00154df:	e8 23 d6 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00154e4:	83 c4 20             	add    esp,0x20
c00154e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154ed:	83 c0 03             	add    eax,0x3
c00154f0:	8a 00                	mov    al,BYTE PTR [eax]
c00154f2:	0f b6 d8             	movzx  ebx,al
c00154f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154fb:	83 c0 02             	add    eax,0x2
c00154fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015500:	0f b6 c8             	movzx  ecx,al
c0015503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015506:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015509:	40                   	inc    eax
c001550a:	8a 00                	mov    al,BYTE PTR [eax]
c001550c:	0f b6 d0             	movzx  edx,al
c001550f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015512:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015515:	8a 00                	mov    al,BYTE PTR [eax]
c0015517:	0f b6 c0             	movzx  eax,al
c001551a:	83 ec 0c             	sub    esp,0xc
c001551d:	53                   	push   ebx
c001551e:	51                   	push   ecx
c001551f:	52                   	push   edx
c0015520:	50                   	push   eax
c0015521:	68 a4 bc 02 c0       	push   0xc002bca4
c0015526:	e8 dc d5 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001552b:	83 c4 20             	add    esp,0x20
c001552e:	83 ec 0c             	sub    esp,0xc
c0015531:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015534:	e8 79 f4 ff ff       	call   c00149b2 <displayDebugInfo(regs*)>
c0015539:	8d 65 f8             	lea    esp,[ebp-0x8]
c001553c:	5b                   	pop    ebx
c001553d:	5e                   	pop    esi
c001553e:	5d                   	pop    ebp
c001553f:	c3                   	ret    

c0015540 <displayProgramFault(char const*)>:
c0015540:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015545:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015548:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001554e:	85 c0                	test   eax,eax
c0015550:	74 15                	je     c0015567 <displayProgramFault(char const*)+0x27>
c0015552:	83 ec 0c             	sub    esp,0xc
c0015555:	6a 04                	push   0x4
c0015557:	6a 0f                	push   0xf
c0015559:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001555d:	50                   	push   eax
c001555e:	e8 95 b4 ff ff       	call   c00109f8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015563:	83 c4 1c             	add    esp,0x1c
c0015566:	c3                   	ret    
c0015567:	c3                   	ret    

c0015568 <setupInterruptController()>:
c0015568:	55                   	push   ebp
c0015569:	89 e5                	mov    ebp,esp
c001556b:	53                   	push   ebx
c001556c:	83 ec 24             	sub    esp,0x24
c001556f:	b8 00 00 00 00       	mov    eax,0x0
c0015574:	85 c0                	test   eax,eax
c0015576:	0f 95 c0             	setne  al
c0015579:	84 c0                	test   al,al
c001557b:	74 5b                	je     c00155d8 <setupInterruptController()+0x70>
c001557d:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015584:	83 ec 0c             	sub    esp,0xc
c0015587:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001558a:	e8 fd a2 ff ff       	call   c000f88c <malloc>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	89 c3                	mov    ebx,eax
c0015594:	83 ec 0c             	sub    esp,0xc
c0015597:	53                   	push   ebx
c0015598:	e8 47 0e 01 00       	call   c00263e4 <APIC::APIC()>
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00155a3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00155a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ab:	83 c0 08             	add    eax,0x8
c00155ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b0:	6a 00                	push   0x0
c00155b2:	6a 00                	push   0x0
c00155b4:	6a 00                	push   0x0
c00155b6:	52                   	push   edx
c00155b7:	ff d0                	call   eax
c00155b9:	83 c4 10             	add    esp,0x10
c00155bc:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00155c1:	83 ec 08             	sub    esp,0x8
c00155c4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00155c7:	50                   	push   eax
c00155c8:	e8 73 e9 ff ff       	call   c0013f40 <Device::addChild(Device*)>
c00155cd:	83 c4 10             	add    esp,0x10
c00155d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155d3:	e9 89 03 00 00       	jmp    c0015961 <setupInterruptController()+0x3f9>
c00155d8:	a0 40 1b 03 c0       	mov    al,ds:0xc0031b40
c00155dd:	84 c0                	test   al,al
c00155df:	75 24                	jne    c0015605 <setupInterruptController()+0x9d>
c00155e1:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00155e6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00155ec:	83 e2 fe             	and    edx,0xfffffffe
c00155ef:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00155f5:	83 ec 0c             	sub    esp,0xc
c00155f8:	68 c9 bc 02 c0       	push   0xc002bcc9
c00155fd:	e8 05 d5 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0015602:	83 c4 10             	add    esp,0x10
c0015605:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001560a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015610:	83 e0 01             	and    eax,0x1
c0015613:	84 c0                	test   al,al
c0015615:	0f 95 c0             	setne  al
c0015618:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001561b:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015622:	83 ec 0c             	sub    esp,0xc
c0015625:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015628:	e8 5f a2 ff ff       	call   c000f88c <malloc>
c001562d:	83 c4 10             	add    esp,0x10
c0015630:	89 c3                	mov    ebx,eax
c0015632:	83 ec 0c             	sub    esp,0xc
c0015635:	53                   	push   ebx
c0015636:	e8 01 13 01 00       	call   c002693c <PIC::PIC()>
c001563b:	83 c4 10             	add    esp,0x10
c001563e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015641:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015644:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015647:	8b 00                	mov    eax,DWORD PTR [eax]
c0015649:	83 c0 08             	add    eax,0x8
c001564c:	8b 00                	mov    eax,DWORD PTR [eax]
c001564e:	6a 00                	push   0x0
c0015650:	6a 00                	push   0x0
c0015652:	6a 00                	push   0x0
c0015654:	52                   	push   edx
c0015655:	ff d0                	call   eax
c0015657:	83 c4 10             	add    esp,0x10
c001565a:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001565e:	74 73                	je     c00156d3 <setupInterruptController()+0x16b>
c0015660:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015663:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015666:	8b 00                	mov    eax,DWORD PTR [eax]
c0015668:	83 c0 0c             	add    eax,0xc
c001566b:	8b 00                	mov    eax,DWORD PTR [eax]
c001566d:	6a 00                	push   0x0
c001566f:	6a 00                	push   0x0
c0015671:	6a 00                	push   0x0
c0015673:	52                   	push   edx
c0015674:	ff d0                	call   eax
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001567d:	74 15                	je     c0015694 <setupInterruptController()+0x12c>
c001567f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015682:	8b 00                	mov    eax,DWORD PTR [eax]
c0015684:	83 c0 04             	add    eax,0x4
c0015687:	8b 00                	mov    eax,DWORD PTR [eax]
c0015689:	83 ec 0c             	sub    esp,0xc
c001568c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001568f:	ff d0                	call   eax
c0015691:	83 c4 10             	add    esp,0x10
c0015694:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001569b:	83 ec 0c             	sub    esp,0xc
c001569e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00156a1:	e8 e6 a1 ff ff       	call   c000f88c <malloc>
c00156a6:	83 c4 10             	add    esp,0x10
c00156a9:	89 c3                	mov    ebx,eax
c00156ab:	83 ec 0c             	sub    esp,0xc
c00156ae:	53                   	push   ebx
c00156af:	e8 30 0d 01 00       	call   c00263e4 <APIC::APIC()>
c00156b4:	83 c4 10             	add    esp,0x10
c00156b7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00156ba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00156bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c2:	83 c0 08             	add    eax,0x8
c00156c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c7:	6a 00                	push   0x0
c00156c9:	6a 00                	push   0x0
c00156cb:	6a 00                	push   0x0
c00156cd:	52                   	push   edx
c00156ce:	ff d0                	call   eax
c00156d0:	83 c4 10             	add    esp,0x10
c00156d3:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00156d8:	83 ec 08             	sub    esp,0x8
c00156db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156de:	50                   	push   eax
c00156df:	e8 5c e8 ff ff       	call   c0013f40 <Device::addChild(Device*)>
c00156e4:	83 c4 10             	add    esp,0x10
c00156e7:	c7 05 48 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f348,0x0
c00156f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f6:	83 c0 24             	add    eax,0x24
c00156f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fb:	6a 00                	push   0x0
c00156fd:	68 04 4f 01 c0       	push   0xc0014f04
c0015702:	6a 00                	push   0x0
c0015704:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015707:	ff d0                	call   eax
c0015709:	83 c4 10             	add    esp,0x10
c001570c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001570f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015711:	83 c0 24             	add    eax,0x24
c0015714:	8b 00                	mov    eax,DWORD PTR [eax]
c0015716:	6a 00                	push   0x0
c0015718:	68 04 4f 01 c0       	push   0xc0014f04
c001571d:	6a 01                	push   0x1
c001571f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015722:	ff d0                	call   eax
c0015724:	83 c4 10             	add    esp,0x10
c0015727:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001572a:	8b 00                	mov    eax,DWORD PTR [eax]
c001572c:	83 c0 24             	add    eax,0x24
c001572f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015731:	6a 00                	push   0x0
c0015733:	68 0f 48 01 c0       	push   0xc001480f
c0015738:	6a 02                	push   0x2
c001573a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001573d:	ff d0                	call   eax
c001573f:	83 c4 10             	add    esp,0x10
c0015742:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015745:	8b 00                	mov    eax,DWORD PTR [eax]
c0015747:	83 c0 24             	add    eax,0x24
c001574a:	8b 00                	mov    eax,DWORD PTR [eax]
c001574c:	6a 00                	push   0x0
c001574e:	68 04 4f 01 c0       	push   0xc0014f04
c0015753:	6a 03                	push   0x3
c0015755:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015758:	ff d0                	call   eax
c001575a:	83 c4 10             	add    esp,0x10
c001575d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015760:	8b 00                	mov    eax,DWORD PTR [eax]
c0015762:	83 c0 24             	add    eax,0x24
c0015765:	8b 00                	mov    eax,DWORD PTR [eax]
c0015767:	6a 00                	push   0x0
c0015769:	68 04 4f 01 c0       	push   0xc0014f04
c001576e:	6a 04                	push   0x4
c0015770:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015773:	ff d0                	call   eax
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001577b:	8b 00                	mov    eax,DWORD PTR [eax]
c001577d:	83 c0 24             	add    eax,0x24
c0015780:	8b 00                	mov    eax,DWORD PTR [eax]
c0015782:	6a 00                	push   0x0
c0015784:	68 04 4f 01 c0       	push   0xc0014f04
c0015789:	6a 05                	push   0x5
c001578b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001578e:	ff d0                	call   eax
c0015790:	83 c4 10             	add    esp,0x10
c0015793:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015796:	8b 00                	mov    eax,DWORD PTR [eax]
c0015798:	83 c0 24             	add    eax,0x24
c001579b:	8b 00                	mov    eax,DWORD PTR [eax]
c001579d:	6a 00                	push   0x0
c001579f:	68 23 4f 01 c0       	push   0xc0014f23
c00157a4:	6a 06                	push   0x6
c00157a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157a9:	ff d0                	call   eax
c00157ab:	83 c4 10             	add    esp,0x10
c00157ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b3:	83 c0 24             	add    eax,0x24
c00157b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b8:	6a 00                	push   0x0
c00157ba:	68 41 4e 01 c0       	push   0xc0014e41
c00157bf:	6a 07                	push   0x7
c00157c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157c4:	ff d0                	call   eax
c00157c6:	83 c4 10             	add    esp,0x10
c00157c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ce:	83 c0 24             	add    eax,0x24
c00157d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d3:	6a 00                	push   0x0
c00157d5:	68 2a 46 01 c0       	push   0xc001462a
c00157da:	6a 08                	push   0x8
c00157dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157df:	ff d0                	call   eax
c00157e1:	83 c4 10             	add    esp,0x10
c00157e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e9:	83 c0 24             	add    eax,0x24
c00157ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ee:	6a 00                	push   0x0
c00157f0:	68 04 4f 01 c0       	push   0xc0014f04
c00157f5:	6a 09                	push   0x9
c00157f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157fa:	ff d0                	call   eax
c00157fc:	83 c4 10             	add    esp,0x10
c00157ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015802:	8b 00                	mov    eax,DWORD PTR [eax]
c0015804:	83 c0 24             	add    eax,0x24
c0015807:	8b 00                	mov    eax,DWORD PTR [eax]
c0015809:	6a 00                	push   0x0
c001580b:	68 04 4f 01 c0       	push   0xc0014f04
c0015810:	6a 0a                	push   0xa
c0015812:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015815:	ff d0                	call   eax
c0015817:	83 c4 10             	add    esp,0x10
c001581a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001581d:	8b 00                	mov    eax,DWORD PTR [eax]
c001581f:	83 c0 24             	add    eax,0x24
c0015822:	8b 00                	mov    eax,DWORD PTR [eax]
c0015824:	6a 00                	push   0x0
c0015826:	68 04 4f 01 c0       	push   0xc0014f04
c001582b:	6a 0b                	push   0xb
c001582d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015830:	ff d0                	call   eax
c0015832:	83 c4 10             	add    esp,0x10
c0015835:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015838:	8b 00                	mov    eax,DWORD PTR [eax]
c001583a:	83 c0 24             	add    eax,0x24
c001583d:	8b 00                	mov    eax,DWORD PTR [eax]
c001583f:	6a 00                	push   0x0
c0015841:	68 04 4f 01 c0       	push   0xc0014f04
c0015846:	6a 0c                	push   0xc
c0015848:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001584b:	ff d0                	call   eax
c001584d:	83 c4 10             	add    esp,0x10
c0015850:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015853:	8b 00                	mov    eax,DWORD PTR [eax]
c0015855:	83 c0 24             	add    eax,0x24
c0015858:	8b 00                	mov    eax,DWORD PTR [eax]
c001585a:	6a 00                	push   0x0
c001585c:	68 b4 4e 01 c0       	push   0xc0014eb4
c0015861:	6a 0d                	push   0xd
c0015863:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015866:	ff d0                	call   eax
c0015868:	83 c4 10             	add    esp,0x10
c001586b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001586e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015870:	83 c0 24             	add    eax,0x24
c0015873:	8b 00                	mov    eax,DWORD PTR [eax]
c0015875:	6a 00                	push   0x0
c0015877:	68 ed 4e 01 c0       	push   0xc0014eed
c001587c:	6a 0e                	push   0xe
c001587e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015881:	ff d0                	call   eax
c0015883:	83 c4 10             	add    esp,0x10
c0015886:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015889:	8b 00                	mov    eax,DWORD PTR [eax]
c001588b:	83 c0 24             	add    eax,0x24
c001588e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015890:	6a 00                	push   0x0
c0015892:	68 04 4f 01 c0       	push   0xc0014f04
c0015897:	6a 0f                	push   0xf
c0015899:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001589c:	ff d0                	call   eax
c001589e:	83 c4 10             	add    esp,0x10
c00158a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a6:	83 c0 24             	add    eax,0x24
c00158a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ab:	6a 00                	push   0x0
c00158ad:	68 04 4f 01 c0       	push   0xc0014f04
c00158b2:	6a 10                	push   0x10
c00158b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158b7:	ff d0                	call   eax
c00158b9:	83 c4 10             	add    esp,0x10
c00158bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c1:	83 c0 24             	add    eax,0x24
c00158c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c6:	6a 00                	push   0x0
c00158c8:	68 04 4f 01 c0       	push   0xc0014f04
c00158cd:	6a 11                	push   0x11
c00158cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158d2:	ff d0                	call   eax
c00158d4:	83 c4 10             	add    esp,0x10
c00158d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158da:	8b 00                	mov    eax,DWORD PTR [eax]
c00158dc:	83 c0 24             	add    eax,0x24
c00158df:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e1:	6a 00                	push   0x0
c00158e3:	68 04 4f 01 c0       	push   0xc0014f04
c00158e8:	6a 12                	push   0x12
c00158ea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158ed:	ff d0                	call   eax
c00158ef:	83 c4 10             	add    esp,0x10
c00158f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f7:	83 c0 24             	add    eax,0x24
c00158fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00158fc:	6a 00                	push   0x0
c00158fe:	68 04 4f 01 c0       	push   0xc0014f04
c0015903:	6a 13                	push   0x13
c0015905:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015908:	ff d0                	call   eax
c001590a:	83 c4 10             	add    esp,0x10
c001590d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015910:	8b 00                	mov    eax,DWORD PTR [eax]
c0015912:	83 c0 24             	add    eax,0x24
c0015915:	8b 00                	mov    eax,DWORD PTR [eax]
c0015917:	6a 00                	push   0x0
c0015919:	68 04 4f 01 c0       	push   0xc0014f04
c001591e:	6a 14                	push   0x14
c0015920:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015923:	ff d0                	call   eax
c0015925:	83 c4 10             	add    esp,0x10
c0015928:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001592b:	8b 00                	mov    eax,DWORD PTR [eax]
c001592d:	83 c0 24             	add    eax,0x24
c0015930:	8b 00                	mov    eax,DWORD PTR [eax]
c0015932:	6a 00                	push   0x0
c0015934:	68 04 4f 01 c0       	push   0xc0014f04
c0015939:	6a 1e                	push   0x1e
c001593b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001593e:	ff d0                	call   eax
c0015940:	83 c4 10             	add    esp,0x10
c0015943:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015946:	8b 00                	mov    eax,DWORD PTR [eax]
c0015948:	83 c0 24             	add    eax,0x24
c001594b:	8b 00                	mov    eax,DWORD PTR [eax]
c001594d:	6a 00                	push   0x0
c001594f:	68 90 ca 01 c0       	push   0xc001ca90
c0015954:	6a 60                	push   0x60
c0015956:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015959:	ff d0                	call   eax
c001595b:	83 c4 10             	add    esp,0x10
c001595e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015961:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015964:	c9                   	leave  
c0015965:	c3                   	ret    

c0015966 <InterruptController::convertLegacyIRQNumber(int)>:
c0015966:	55                   	push   ebp
c0015967:	89 e5                	mov    ebp,esp
c0015969:	83 ec 08             	sub    esp,0x8
c001596c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596f:	83 ec 0c             	sub    esp,0xc
c0015972:	50                   	push   eax
c0015973:	e8 c8 e8 ff ff       	call   c0014240 <Device::getName()>
c0015978:	83 c4 10             	add    esp,0x10
c001597b:	8a 00                	mov    al,BYTE PTR [eax]
c001597d:	3c 41                	cmp    al,0x41
c001597f:	0f 94 c0             	sete   al
c0015982:	84 c0                	test   al,al
c0015984:	74 28                	je     c00159ae <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015986:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001598a:	7f 12                	jg     c001599e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001598c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001598f:	05 00 e4 02 c0       	add    eax,0xc002e400
c0015994:	8a 00                	mov    al,BYTE PTR [eax]
c0015996:	0f b6 c0             	movzx  eax,al
c0015999:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001599c:	eb 10                	jmp    c00159ae <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001599e:	83 ec 0c             	sub    esp,0xc
c00159a1:	68 b8 b9 02 c0       	push   0xc002b9b8
c00159a6:	e8 ec 4c 00 00       	call   c001a697 <Krnl::panic(char const*)>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00159b1:	c9                   	leave  
c00159b2:	c3                   	ret    
c00159b3:	90                   	nop

c00159b4 <startGUI(void*)>:
c00159b4:	55                   	push   ebp
c00159b5:	89 e5                	mov    ebp,esp
c00159b7:	53                   	push   ebx
c00159b8:	83 ec 04             	sub    esp,0x4
c00159bb:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c00159c0:	48                   	dec    eax
c00159c1:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c00159c6:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c00159cb:	85 c0                	test   eax,eax
c00159cd:	75 01                	jne    c00159d0 <startGUI(void*)+0x1c>
c00159cf:	fb                   	sti    
c00159d0:	8b 1d a8 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1a8
c00159d6:	83 ec 08             	sub    esp,0x8
c00159d9:	6a 01                	push   0x1
c00159db:	68 2c bd 02 c0       	push   0xc002bd2c
c00159e0:	e8 86 80 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c00159e5:	83 c4 10             	add    esp,0x10
c00159e8:	83 ec 08             	sub    esp,0x8
c00159eb:	53                   	push   ebx
c00159ec:	50                   	push   eax
c00159ed:	e8 a4 82 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c00159f2:	83 c4 10             	add    esp,0x10
c00159f5:	8b 1d a8 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1a8
c00159fb:	83 ec 08             	sub    esp,0x8
c00159fe:	6a 01                	push   0x1
c0015a00:	68 46 bd 02 c0       	push   0xc002bd46
c0015a05:	e8 61 80 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c0015a0a:	83 c4 10             	add    esp,0x10
c0015a0d:	83 ec 08             	sub    esp,0x8
c0015a10:	53                   	push   ebx
c0015a11:	50                   	push   eax
c0015a12:	e8 7f 82 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c0015a17:	83 c4 10             	add    esp,0x10
c0015a1a:	90                   	nop
c0015a1b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015a1e:	c9                   	leave  
c0015a1f:	c3                   	ret    

c0015a20 <startGUIVESA(void*)>:
c0015a20:	55                   	push   ebp
c0015a21:	89 e5                	mov    ebp,esp
c0015a23:	53                   	push   ebx
c0015a24:	83 ec 04             	sub    esp,0x4
c0015a27:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0015a2c:	48                   	dec    eax
c0015a2d:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0015a32:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0015a37:	85 c0                	test   eax,eax
c0015a39:	75 01                	jne    c0015a3c <startGUIVESA(void*)+0x1c>
c0015a3b:	fb                   	sti    
c0015a3c:	8b 1d a8 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1a8
c0015a42:	83 ec 08             	sub    esp,0x8
c0015a45:	6a 01                	push   0x1
c0015a47:	68 60 bd 02 c0       	push   0xc002bd60
c0015a4c:	e8 1a 80 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c0015a51:	83 c4 10             	add    esp,0x10
c0015a54:	83 ec 08             	sub    esp,0x8
c0015a57:	53                   	push   ebx
c0015a58:	50                   	push   eax
c0015a59:	e8 38 82 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c0015a5e:	83 c4 10             	add    esp,0x10
c0015a61:	8b 1d a8 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1a8
c0015a67:	83 ec 08             	sub    esp,0x8
c0015a6a:	6a 01                	push   0x1
c0015a6c:	68 46 bd 02 c0       	push   0xc002bd46
c0015a71:	e8 f5 7f 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c0015a76:	83 c4 10             	add    esp,0x10
c0015a79:	83 ec 08             	sub    esp,0x8
c0015a7c:	53                   	push   ebx
c0015a7d:	50                   	push   eax
c0015a7e:	e8 13 82 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c0015a83:	83 c4 10             	add    esp,0x10
c0015a86:	90                   	nop
c0015a87:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015a8a:	c9                   	leave  
c0015a8b:	c3                   	ret    

c0015a8c <sendKeyToTerminal(unsigned char)>:
c0015a8c:	55                   	push   ebp
c0015a8d:	89 e5                	mov    ebp,esp
c0015a8f:	83 ec 28             	sub    esp,0x28
c0015a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a95:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015a98:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c0015a9d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015aa1:	83 ec 08             	sub    esp,0x8
c0015aa4:	52                   	push   edx
c0015aa5:	50                   	push   eax
c0015aa6:	e8 25 b4 ff ff       	call   c0010ed0 <VgaText::receiveKey(unsigned char)>
c0015aab:	83 c4 10             	add    esp,0x10
c0015aae:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015ab2:	0f 85 8f 00 00 00    	jne    c0015b47 <sendKeyToTerminal(unsigned char)+0xbb>
c0015ab8:	fa                   	cli    
c0015ab9:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0015abe:	40                   	inc    eax
c0015abf:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0015ac4:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c0015ac9:	40                   	inc    eax
c0015aca:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c0015acf:	a1 60 f3 02 c0       	mov    eax,ds:0xc002f360
c0015ad4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ad7:	c7 05 60 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f360,0x0
c0015ae1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ae5:	74 1f                	je     c0015b06 <sendKeyToTerminal(unsigned char)+0x7a>
c0015ae7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015aed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015af0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015af3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015af6:	83 ec 0c             	sub    esp,0xc
c0015af9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015afc:	e8 0d 8e 00 00       	call   c001e90e <unblockTask(ThreadControlBlock*)>
c0015b01:	83 c4 10             	add    esp,0x10
c0015b04:	eb db                	jmp    c0015ae1 <sendKeyToTerminal(unsigned char)+0x55>
c0015b06:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c0015b0b:	48                   	dec    eax
c0015b0c:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c0015b11:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c0015b16:	85 c0                	test   eax,eax
c0015b18:	75 18                	jne    c0015b32 <sendKeyToTerminal(unsigned char)+0xa6>
c0015b1a:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0015b1f:	85 c0                	test   eax,eax
c0015b21:	74 0f                	je     c0015b32 <sendKeyToTerminal(unsigned char)+0xa6>
c0015b23:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c0015b2d:	e8 18 89 00 00       	call   c001e44a <schedule()>
c0015b32:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0015b37:	48                   	dec    eax
c0015b38:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0015b3d:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0015b42:	85 c0                	test   eax,eax
c0015b44:	75 01                	jne    c0015b47 <sendKeyToTerminal(unsigned char)+0xbb>
c0015b46:	fb                   	sti    
c0015b47:	90                   	nop
c0015b48:	c9                   	leave  
c0015b49:	c3                   	ret    

c0015b4a <sendKeyboardToken(KeyboardToken)>:
c0015b4a:	55                   	push   ebp
c0015b4b:	89 e5                	mov    ebp,esp
c0015b4d:	83 ec 18             	sub    esp,0x18
c0015b50:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b56:	0f b7 c0             	movzx  eax,ax
c0015b59:	83 f2 01             	xor    edx,0x1
c0015b5c:	88 90 80 f3 02 c0    	mov    BYTE PTR [eax-0x3ffd0c80],dl
c0015b62:	a1 68 f3 02 c0       	mov    eax,ds:0xc002f368
c0015b67:	85 c0                	test   eax,eax
c0015b69:	74 24                	je     c0015b8f <sendKeyboardToken(KeyboardToken)+0x45>
c0015b6b:	8b 0d 68 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f368
c0015b71:	83 ec 04             	sub    esp,0x4
c0015b74:	68 80 f3 02 c0       	push   0xc002f380
c0015b79:	83 ec 08             	sub    esp,0x8
c0015b7c:	89 e2                	mov    edx,esp
c0015b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b81:	89 02                	mov    DWORD PTR [edx],eax
c0015b83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b86:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015b8a:	ff d1                	call   ecx
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b92:	66 3d 03 02          	cmp    ax,0x203
c0015b96:	75 07                	jne    c0015b9f <sendKeyboardToken(KeyboardToken)+0x55>
c0015b98:	a0 80 f4 02 c0       	mov    al,ds:0xc002f480
c0015b9d:	84 c0                	test   al,al
c0015b9f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ba3:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ba6:	a0 88 f7 02 c0       	mov    al,ds:0xc002f788
c0015bab:	38 c2                	cmp    dl,al
c0015bad:	74 1c                	je     c0015bcb <sendKeyboardToken(KeyboardToken)+0x81>
c0015baf:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015bb2:	a2 88 f7 02 c0       	mov    ds:0xc002f788,al
c0015bb7:	a0 88 f7 02 c0       	mov    al,ds:0xc002f788
c0015bbc:	0f b6 c0             	movzx  eax,al
c0015bbf:	83 ec 0c             	sub    esp,0xc
c0015bc2:	50                   	push   eax
c0015bc3:	e8 90 a6 ff ff       	call   c0010258 <setTerminalScrollLock(bool)>
c0015bc8:	83 c4 10             	add    esp,0x10
c0015bcb:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015bce:	84 c0                	test   al,al
c0015bd0:	0f 84 ae 00 00 00    	je     c0015c84 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd9:	66 3d 10 03          	cmp    ax,0x310
c0015bdd:	75 06                	jne    c0015be5 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015bdf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be8:	66 3d 11 03          	cmp    ax,0x311
c0015bec:	75 06                	jne    c0015bf4 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015bee:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf7:	66 3d 12 03          	cmp    ax,0x312
c0015bfb:	75 06                	jne    c0015c03 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015bfd:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c06:	66 3d 13 03          	cmp    ax,0x313
c0015c0a:	75 06                	jne    c0015c12 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015c0c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c15:	66 3d 14 03          	cmp    ax,0x314
c0015c19:	75 06                	jne    c0015c21 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015c1b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c24:	66 3d 15 03          	cmp    ax,0x315
c0015c28:	75 06                	jne    c0015c30 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015c2a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c33:	66 3d 16 03          	cmp    ax,0x316
c0015c37:	75 06                	jne    c0015c3f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015c39:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015c3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c42:	66 3d 17 03          	cmp    ax,0x317
c0015c46:	75 06                	jne    c0015c4e <sendKeyboardToken(KeyboardToken)+0x104>
c0015c48:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015c4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c51:	66 3d 18 03          	cmp    ax,0x318
c0015c55:	75 06                	jne    c0015c5d <sendKeyboardToken(KeyboardToken)+0x113>
c0015c57:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c60:	66 3d 19 03          	cmp    ax,0x319
c0015c64:	75 06                	jne    c0015c6c <sendKeyboardToken(KeyboardToken)+0x122>
c0015c66:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015c6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c6f:	66 3d 1a 03          	cmp    ax,0x31a
c0015c73:	0f 85 c9 00 00 00    	jne    c0015d42 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c79:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015c7f:	e9 be 00 00 00       	jmp    c0015d42 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c87:	66 3d 10 03          	cmp    ax,0x310
c0015c8b:	75 0a                	jne    c0015c97 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015c8d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015c93:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9a:	66 3d 11 03          	cmp    ax,0x311
c0015c9e:	75 0a                	jne    c0015caa <sendKeyboardToken(KeyboardToken)+0x160>
c0015ca0:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ca6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cad:	66 3d 12 03          	cmp    ax,0x312
c0015cb1:	75 0a                	jne    c0015cbd <sendKeyboardToken(KeyboardToken)+0x173>
c0015cb3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015cb9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc0:	66 3d 13 03          	cmp    ax,0x313
c0015cc4:	75 0a                	jne    c0015cd0 <sendKeyboardToken(KeyboardToken)+0x186>
c0015cc6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ccc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd3:	66 3d 14 03          	cmp    ax,0x314
c0015cd7:	75 0a                	jne    c0015ce3 <sendKeyboardToken(KeyboardToken)+0x199>
c0015cd9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015cdf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce6:	66 3d 15 03          	cmp    ax,0x315
c0015cea:	75 0a                	jne    c0015cf6 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015cec:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015cf2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf9:	66 3d 16 03          	cmp    ax,0x316
c0015cfd:	75 0a                	jne    c0015d09 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015cff:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015d05:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0c:	66 3d 17 03          	cmp    ax,0x317
c0015d10:	75 0a                	jne    c0015d1c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015d12:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015d18:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d1f:	66 3d 18 03          	cmp    ax,0x318
c0015d23:	75 0a                	jne    c0015d2f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015d25:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015d2b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015d2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d32:	66 3d 19 03          	cmp    ax,0x319
c0015d36:	75 0a                	jne    c0015d42 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015d38:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015d3e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015d42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d45:	66 3d 00 02          	cmp    ax,0x200
c0015d49:	75 2c                	jne    c0015d77 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015d4b:	a0 80 f7 02 c0       	mov    al,ds:0xc002f780
c0015d50:	83 f0 01             	xor    eax,0x1
c0015d53:	84 c0                	test   al,al
c0015d55:	74 20                	je     c0015d77 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015d57:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0015d5c:	6a 01                	push   0x1
c0015d5e:	6a 00                	push   0x0
c0015d60:	68 b4 59 01 c0       	push   0xc00159b4
c0015d65:	50                   	push   eax
c0015d66:	e8 9b 84 00 00       	call   c001e206 <Process::createThread(void (*)(void*), void*, int)>
c0015d6b:	83 c4 10             	add    esp,0x10
c0015d6e:	c6 05 80 f7 02 c0 01 	mov    BYTE PTR ds:0xc002f780,0x1
c0015d75:	eb 33                	jmp    c0015daa <sendKeyboardToken(KeyboardToken)+0x260>
c0015d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d7a:	66 3d 01 02          	cmp    ax,0x201
c0015d7e:	75 2a                	jne    c0015daa <sendKeyboardToken(KeyboardToken)+0x260>
c0015d80:	a0 80 f7 02 c0       	mov    al,ds:0xc002f780
c0015d85:	83 f0 01             	xor    eax,0x1
c0015d88:	84 c0                	test   al,al
c0015d8a:	74 1e                	je     c0015daa <sendKeyboardToken(KeyboardToken)+0x260>
c0015d8c:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0015d91:	6a 01                	push   0x1
c0015d93:	6a 00                	push   0x0
c0015d95:	68 20 5a 01 c0       	push   0xc0015a20
c0015d9a:	50                   	push   eax
c0015d9b:	e8 66 84 00 00       	call   c001e206 <Process::createThread(void (*)(void*), void*, int)>
c0015da0:	83 c4 10             	add    esp,0x10
c0015da3:	c6 05 80 f7 02 c0 01 	mov    BYTE PTR ds:0xc002f780,0x1
c0015daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dad:	66 3d 1d 03          	cmp    ax,0x31d
c0015db1:	75 06                	jne    c0015db9 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015db3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dbc:	66 3d 1c 03          	cmp    ax,0x31c
c0015dc0:	75 06                	jne    c0015dc8 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015dc2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dcb:	66 3d 1b 03          	cmp    ax,0x31b
c0015dcf:	75 06                	jne    c0015dd7 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015dd1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dda:	66 3d 1e 03          	cmp    ax,0x31e
c0015dde:	75 06                	jne    c0015de6 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015de0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de9:	66 3d 1f 03          	cmp    ax,0x31f
c0015ded:	75 06                	jne    c0015df5 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015def:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015df5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df8:	66 3d 1a 03          	cmp    ax,0x31a
c0015dfc:	75 06                	jne    c0015e04 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015dfe:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015e04:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015e08:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e0b:	83 f0 01             	xor    eax,0x1
c0015e0e:	84 c0                	test   al,al
c0015e10:	74 77                	je     c0015e89 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015e12:	a0 81 f4 02 c0       	mov    al,ds:0xc002f481
c0015e17:	84 c0                	test   al,al
c0015e19:	74 41                	je     c0015e5c <sendKeyboardToken(KeyboardToken)+0x312>
c0015e1b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015e1f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015e23:	74 2b                	je     c0015e50 <sendKeyboardToken(KeyboardToken)+0x306>
c0015e25:	8b 15 84 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f784
c0015e2b:	89 d0                	mov    eax,edx
c0015e2d:	c1 e0 02             	shl    eax,0x2
c0015e30:	01 d0                	add    eax,edx
c0015e32:	01 c0                	add    eax,eax
c0015e34:	a3 84 f7 02 c0       	mov    ds:0xc002f784,eax
c0015e39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3c:	0f b7 c0             	movzx  eax,ax
c0015e3f:	8d 50 d0             	lea    edx,[eax-0x30]
c0015e42:	a1 84 f7 02 c0       	mov    eax,ds:0xc002f784
c0015e47:	01 d0                	add    eax,edx
c0015e49:	a3 84 f7 02 c0       	mov    ds:0xc002f784,eax
c0015e4e:	eb 6d                	jmp    c0015ebd <sendKeyboardToken(KeyboardToken)+0x373>
c0015e50:	c7 05 84 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f784,0x0
c0015e5a:	eb 61                	jmp    c0015ebd <sendKeyboardToken(KeyboardToken)+0x373>
c0015e5c:	a1 84 f7 02 c0       	mov    eax,ds:0xc002f784
c0015e61:	85 c0                	test   eax,eax
c0015e63:	74 18                	je     c0015e7d <sendKeyboardToken(KeyboardToken)+0x333>
c0015e65:	a1 84 f7 02 c0       	mov    eax,ds:0xc002f784
c0015e6a:	0f b6 c0             	movzx  eax,al
c0015e6d:	83 ec 0c             	sub    esp,0xc
c0015e70:	50                   	push   eax
c0015e71:	e8 16 fc ff ff       	call   c0015a8c <sendKeyToTerminal(unsigned char)>
c0015e76:	83 c4 10             	add    esp,0x10
c0015e79:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015e7d:	c7 05 84 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f784,0x0
c0015e87:	eb 34                	jmp    c0015ebd <sendKeyboardToken(KeyboardToken)+0x373>
c0015e89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8c:	66 3d 01 01          	cmp    ax,0x101
c0015e90:	75 2b                	jne    c0015ebd <sendKeyboardToken(KeyboardToken)+0x373>
c0015e92:	a1 84 f7 02 c0       	mov    eax,ds:0xc002f784
c0015e97:	85 c0                	test   eax,eax
c0015e99:	74 18                	je     c0015eb3 <sendKeyboardToken(KeyboardToken)+0x369>
c0015e9b:	a1 84 f7 02 c0       	mov    eax,ds:0xc002f784
c0015ea0:	0f b6 c0             	movzx  eax,al
c0015ea3:	83 ec 0c             	sub    esp,0xc
c0015ea6:	50                   	push   eax
c0015ea7:	e8 e0 fb ff ff       	call   c0015a8c <sendKeyToTerminal(unsigned char)>
c0015eac:	83 c4 10             	add    esp,0x10
c0015eaf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015eb3:	c7 05 84 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f784,0x0
c0015ebd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ec0:	83 f0 01             	xor    eax,0x1
c0015ec3:	84 c0                	test   al,al
c0015ec5:	74 4c                	je     c0015f13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ec7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015eca:	83 f0 01             	xor    eax,0x1
c0015ecd:	84 c0                	test   al,al
c0015ecf:	74 42                	je     c0015f13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ed1:	a0 80 f4 02 c0       	mov    al,ds:0xc002f480
c0015ed6:	83 f0 01             	xor    eax,0x1
c0015ed9:	84 c0                	test   al,al
c0015edb:	74 36                	je     c0015f13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015edd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee0:	66 83 f8 1f          	cmp    ax,0x1f
c0015ee4:	76 09                	jbe    c0015eef <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee9:	66 83 f8 7e          	cmp    ax,0x7e
c0015eed:	76 12                	jbe    c0015f01 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef2:	66 83 f8 0a          	cmp    ax,0xa
c0015ef6:	74 09                	je     c0015f01 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efb:	66 83 f8 08          	cmp    ax,0x8
c0015eff:	75 12                	jne    c0015f13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015f01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f04:	0f b6 c0             	movzx  eax,al
c0015f07:	83 ec 0c             	sub    esp,0xc
c0015f0a:	50                   	push   eax
c0015f0b:	e8 7c fb ff ff       	call   c0015a8c <sendKeyToTerminal(unsigned char)>
c0015f10:	83 c4 10             	add    esp,0x10
c0015f13:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015f16:	83 f0 01             	xor    eax,0x1
c0015f19:	84 c0                	test   al,al
c0015f1b:	74 4f                	je     c0015f6c <sendKeyboardToken(KeyboardToken)+0x422>
c0015f1d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015f20:	83 f0 01             	xor    eax,0x1
c0015f23:	84 c0                	test   al,al
c0015f25:	74 45                	je     c0015f6c <sendKeyboardToken(KeyboardToken)+0x422>
c0015f27:	a0 80 f4 02 c0       	mov    al,ds:0xc002f480
c0015f2c:	84 c0                	test   al,al
c0015f2e:	74 3c                	je     c0015f6c <sendKeyboardToken(KeyboardToken)+0x422>
c0015f30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f33:	66 83 f8 3f          	cmp    ax,0x3f
c0015f37:	76 33                	jbe    c0015f6c <sendKeyboardToken(KeyboardToken)+0x422>
c0015f39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3c:	66 83 f8 7f          	cmp    ax,0x7f
c0015f40:	77 2a                	ja     c0015f6c <sendKeyboardToken(KeyboardToken)+0x422>
c0015f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f45:	88 c2                	mov    dl,al
c0015f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4a:	66 83 f8 5f          	cmp    ax,0x5f
c0015f4e:	76 04                	jbe    c0015f54 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015f50:	b0 20                	mov    al,0x20
c0015f52:	eb 02                	jmp    c0015f56 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015f54:	b0 00                	mov    al,0x0
c0015f56:	29 c2                	sub    edx,eax
c0015f58:	88 d0                	mov    al,dl
c0015f5a:	83 e8 40             	sub    eax,0x40
c0015f5d:	0f b6 c0             	movzx  eax,al
c0015f60:	83 ec 0c             	sub    esp,0xc
c0015f63:	50                   	push   eax
c0015f64:	e8 23 fb ff ff       	call   c0015a8c <sendKeyToTerminal(unsigned char)>
c0015f69:	83 c4 10             	add    esp,0x10
c0015f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6f:	66 3d 00 03          	cmp    ax,0x300
c0015f73:	75 0f                	jne    c0015f84 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015f75:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015f78:	83 f0 01             	xor    eax,0x1
c0015f7b:	84 c0                	test   al,al
c0015f7d:	74 05                	je     c0015f84 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015f7f:	e8 4c aa ff ff       	call   c00109d0 <doTerminalCycle()>
c0015f84:	90                   	nop
c0015f85:	c9                   	leave  
c0015f86:	c3                   	ret    

c0015f87 <clearInternalKeybuffer(VgaText*)>:
c0015f87:	55                   	push   ebp
c0015f88:	89 e5                	mov    ebp,esp
c0015f8a:	83 ec 08             	sub    esp,0x8
c0015f8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f90:	05 98 01 00 00       	add    eax,0x198
c0015f95:	83 ec 0c             	sub    esp,0xc
c0015f98:	50                   	push   eax
c0015f99:	e8 ce a7 fe ff       	call   c000076c <strlen>
c0015f9e:	83 c4 10             	add    esp,0x10
c0015fa1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015fa4:	81 c2 98 01 00 00    	add    edx,0x198
c0015faa:	83 ec 04             	sub    esp,0x4
c0015fad:	50                   	push   eax
c0015fae:	6a 00                	push   0x0
c0015fb0:	52                   	push   edx
c0015fb1:	e8 9a a7 fe ff       	call   c0000750 <memset>
c0015fb6:	83 c4 10             	add    esp,0x10
c0015fb9:	90                   	nop
c0015fba:	c9                   	leave  
c0015fbb:	c3                   	ret    

c0015fbc <readKeyboard(VgaText*, char*, unsigned long)>:
c0015fbc:	55                   	push   ebp
c0015fbd:	89 e5                	mov    ebp,esp
c0015fbf:	83 ec 18             	sub    esp,0x18
c0015fc2:	a1 68 f3 02 c0       	mov    eax,ds:0xc002f368
c0015fc7:	85 c0                	test   eax,eax
c0015fc9:	74 2a                	je     c0015ff5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015fcb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015fd1:	8b 0d 68 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f368
c0015fd7:	83 ec 04             	sub    esp,0x4
c0015fda:	68 80 f3 02 c0       	push   0xc002f380
c0015fdf:	83 ec 08             	sub    esp,0x8
c0015fe2:	89 e2                	mov    edx,esp
c0015fe4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015fe7:	89 02                	mov    DWORD PTR [edx],eax
c0015fe9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015fec:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ff0:	ff d1                	call   ecx
c0015ff2:	83 c4 10             	add    esp,0x10
c0015ff5:	83 ec 0c             	sub    esp,0xc
c0015ff8:	68 7b bd 02 c0       	push   0xc002bd7b
c0015ffd:	e8 05 cb ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0016002:	83 c4 10             	add    esp,0x10
c0016005:	fb                   	sti    
c0016006:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001600d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016011:	0f 84 a1 00 00 00    	je     c00160b8 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0016017:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601a:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016020:	84 c0                	test   al,al
c0016022:	75 28                	jne    c001604c <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0016024:	fa                   	cli    
c0016025:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001602a:	40                   	inc    eax
c001602b:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0016030:	e8 15 84 00 00       	call   c001e44a <schedule()>
c0016035:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001603a:	48                   	dec    eax
c001603b:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0016040:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0016045:	85 c0                	test   eax,eax
c0016047:	75 ce                	jne    c0016017 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016049:	fb                   	sti    
c001604a:	eb cb                	jmp    c0016017 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001604c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001604f:	8d 50 01             	lea    edx,[eax+0x1]
c0016052:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016055:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016058:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c001605e:	88 10                	mov    BYTE PTR [eax],dl
c0016060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016063:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016069:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001606c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606f:	05 98 01 00 00       	add    eax,0x198
c0016074:	83 ec 0c             	sub    esp,0xc
c0016077:	50                   	push   eax
c0016078:	e8 ef a6 fe ff       	call   c000076c <strlen>
c001607d:	83 c4 10             	add    esp,0x10
c0016080:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016083:	81 c2 98 01 00 00    	add    edx,0x198
c0016089:	8d 4a 01             	lea    ecx,[edx+0x1]
c001608c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001608f:	81 c2 98 01 00 00    	add    edx,0x198
c0016095:	83 ec 04             	sub    esp,0x4
c0016098:	50                   	push   eax
c0016099:	51                   	push   ecx
c001609a:	52                   	push   edx
c001609b:	e8 e8 a5 fe ff       	call   c0000688 <memmove>
c00160a0:	83 c4 10             	add    esp,0x10
c00160a3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00160a6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00160a9:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00160ad:	0f 85 5a ff ff ff    	jne    c001600d <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00160b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00160b6:	eb 03                	jmp    c00160bb <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c00160b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00160bb:	c9                   	leave  
c00160bc:	c3                   	ret    
c00160bd:	90                   	nop

c00160be <Keyboard::Keyboard(char const*)>:
c00160be:	83 ec 0c             	sub    esp,0xc
c00160c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c5:	83 ec 08             	sub    esp,0x8
c00160c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160cc:	50                   	push   eax
c00160cd:	e8 72 e0 ff ff       	call   c0014144 <Device::Device(char const*)>
c00160d2:	83 c4 10             	add    esp,0x10
c00160d5:	ba 9c bd 02 c0       	mov    edx,0xc002bd9c
c00160da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160de:	89 10                	mov    DWORD PTR [eax],edx
c00160e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160e4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00160ee:	c6 05 64 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f364,0x1
c00160f5:	90                   	nop
c00160f6:	83 c4 0c             	add    esp,0xc
c00160f9:	c3                   	ret    

c00160fa <Keyboard::~Keyboard()>:
c00160fa:	83 ec 0c             	sub    esp,0xc
c00160fd:	ba 9c bd 02 c0       	mov    edx,0xc002bd9c
c0016102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016106:	89 10                	mov    DWORD PTR [eax],edx
c0016108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001610c:	83 ec 0c             	sub    esp,0xc
c001610f:	50                   	push   eax
c0016110:	e8 f9 dc ff ff       	call   c0013e0e <Device::~Device()>
c0016115:	83 c4 10             	add    esp,0x10
c0016118:	90                   	nop
c0016119:	83 c4 0c             	add    esp,0xc
c001611c:	c3                   	ret    
c001611d:	90                   	nop

c001611e <Keyboard::~Keyboard()>:
c001611e:	83 ec 0c             	sub    esp,0xc
c0016121:	83 ec 0c             	sub    esp,0xc
c0016124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016128:	e8 cd ff ff ff       	call   c00160fa <Keyboard::~Keyboard()>
c001612d:	83 c4 10             	add    esp,0x10
c0016130:	83 ec 08             	sub    esp,0x8
c0016133:	68 5c 01 00 00       	push   0x15c
c0016138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001613c:	e8 e6 c8 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0016141:	83 c4 10             	add    esp,0x10
c0016144:	83 c4 0c             	add    esp,0xc
c0016147:	c3                   	ret    

c0016148 <LogicalDisk::close(int, int, void*)>:
c0016148:	83 c8 ff             	or     eax,0xffffffff
c001614b:	c3                   	ret    

c001614c <LogicalDisk::~LogicalDisk()>:
c001614c:	83 ec 0c             	sub    esp,0xc
c001614f:	ba 4c be 02 c0       	mov    edx,0xc002be4c
c0016154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016158:	89 10                	mov    DWORD PTR [eax],edx
c001615a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001615e:	83 ec 0c             	sub    esp,0xc
c0016161:	50                   	push   eax
c0016162:	e8 a7 dc ff ff       	call   c0013e0e <Device::~Device()>
c0016167:	83 c4 10             	add    esp,0x10
c001616a:	90                   	nop
c001616b:	83 c4 0c             	add    esp,0xc
c001616e:	c3                   	ret    
c001616f:	90                   	nop

c0016170 <LogicalDisk::~LogicalDisk()>:
c0016170:	83 ec 0c             	sub    esp,0xc
c0016173:	83 ec 0c             	sub    esp,0xc
c0016176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001617a:	e8 cd ff ff ff       	call   c001614c <LogicalDisk::~LogicalDisk()>
c001617f:	83 c4 10             	add    esp,0x10
c0016182:	83 ec 08             	sub    esp,0x8
c0016185:	68 74 01 00 00       	push   0x174
c001618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001618e:	e8 94 c8 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0016193:	83 c4 10             	add    esp,0x10
c0016196:	83 c4 0c             	add    esp,0xc
c0016199:	c3                   	ret    

c001619a <LogicalDisk::open(int, int, void*)>:
c001619a:	83 ec 18             	sub    esp,0x18
c001619d:	68 c8 bd 02 c0       	push   0xc002bdc8
c00161a2:	e8 f0 44 00 00       	call   c001a697 <Krnl::panic(char const*)>
c00161a7:	83 c8 ff             	or     eax,0xffffffff
c00161aa:	83 c4 1c             	add    esp,0x1c
c00161ad:	c3                   	ret    

c00161ae <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00161ae:	53                   	push   ebx
c00161af:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00161b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161bb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00161c1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00161c7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00161cd:	77 10                	ja     c00161df <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00161cf:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00161d5:	89 d3                	mov    ebx,edx
c00161d7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00161dd:	72 05                	jb     c00161e4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00161df:	83 c8 ff             	or     eax,0xffffffff
c00161e2:	89 c2                	mov    edx,eax
c00161e4:	5b                   	pop    ebx
c00161e5:	c3                   	ret    

c00161e6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00161e6:	56                   	push   esi
c00161e7:	83 c8 ff             	or     eax,0xffffffff
c00161ea:	53                   	push   ebx
c00161eb:	89 c2                	mov    edx,eax
c00161ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00161f1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00161f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00161f9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00161ff:	77 27                	ja     c0016228 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016201:	89 d8                	mov    eax,ebx
c0016203:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016209:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001620f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016214:	89 c2                	mov    edx,eax
c0016216:	73 10                	jae    c0016228 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016218:	89 c8                	mov    eax,ecx
c001621a:	89 da                	mov    edx,ebx
c001621c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016222:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016228:	5b                   	pop    ebx
c0016229:	5e                   	pop    esi
c001622a:	c3                   	ret    
c001622b:	90                   	nop

c001622c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001622c:	83 ec 1c             	sub    esp,0x1c
c001622f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016233:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016237:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001623b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001623f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016243:	89 04 24             	mov    DWORD PTR [esp],eax
c0016246:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001624a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001624e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016252:	83 ec 08             	sub    esp,0x8
c0016255:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016259:	50                   	push   eax
c001625a:	e8 e5 de ff ff       	call   c0014144 <Device::Device(char const*)>
c001625f:	83 c4 10             	add    esp,0x10
c0016262:	ba 4c be 02 c0       	mov    edx,0xc002be4c
c0016267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001626b:	89 10                	mov    DWORD PTR [eax],edx
c001626d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016271:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016278:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001627c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016287:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016291:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016295:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016299:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001629d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00162a3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00162a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00162ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00162b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00162b4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00162ba:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00162c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00162c8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00162ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162d2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00162dc:	90                   	nop
c00162dd:	83 c4 1c             	add    esp,0x1c
c00162e0:	c3                   	ret    
c00162e1:	90                   	nop

c00162e2 <LogicalDisk::assignDriveLetter()>:
c00162e2:	55                   	push   ebp
c00162e3:	57                   	push   edi
c00162e4:	56                   	push   esi
c00162e5:	53                   	push   ebx
c00162e6:	83 ec 14             	sub    esp,0x14
c00162e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00162ed:	8b 3d a0 f7 02 c0    	mov    edi,DWORD PTR ds:0xc002f7a0
c00162f3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00162f9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00162fd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016303:	8b 3d a4 f7 02 c0    	mov    edi,DWORD PTR ds:0xc002f7a4
c0016309:	3c 01                	cmp    al,0x1
c001630b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001630f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016313:	19 c0                	sbb    eax,eax
c0016315:	83 e0 02             	and    eax,0x2
c0016318:	83 c0 41             	add    eax,0x41
c001631b:	0f be e8             	movsx  ebp,al
c001631e:	3c 43                	cmp    al,0x43
c0016320:	75 10                	jne    c0016332 <LogicalDisk::assignDriveLetter()+0x50>
c0016322:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016329:	75 5d                	jne    c0016388 <LogicalDisk::assignDriveLetter()+0xa6>
c001632b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016330:	75 56                	jne    c0016388 <LogicalDisk::assignDriveLetter()+0xa6>
c0016332:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016335:	ba 01 00 00 00       	mov    edx,0x1
c001633a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001633e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016342:	d3 e2                	shl    edx,cl
c0016344:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016348:	89 d7                	mov    edi,edx
c001634a:	89 d6                	mov    esi,edx
c001634c:	c1 ff 1f             	sar    edi,0x1f
c001634f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016353:	21 f9                	and    ecx,edi
c0016355:	09 d1                	or     ecx,edx
c0016357:	75 2f                	jne    c0016388 <LogicalDisk::assignDriveLetter()+0xa6>
c0016359:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001635d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016361:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016367:	09 f2                	or     edx,esi
c0016369:	89 15 a0 f7 02 c0    	mov    DWORD PTR ds:0xc002f7a0,edx
c001636f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016373:	09 fa                	or     edx,edi
c0016375:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016379:	89 15 a4 f7 02 c0    	mov    DWORD PTR ds:0xc002f7a4,edx
c001637f:	89 1c bd c0 f7 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0840],ebx
c0016386:	eb 08                	jmp    c0016390 <LogicalDisk::assignDriveLetter()+0xae>
c0016388:	45                   	inc    ebp
c0016389:	40                   	inc    eax
c001638a:	3c 5b                	cmp    al,0x5b
c001638c:	75 90                	jne    c001631e <LogicalDisk::assignDriveLetter()+0x3c>
c001638e:	31 c0                	xor    eax,eax
c0016390:	83 c4 14             	add    esp,0x14
c0016393:	5b                   	pop    ebx
c0016394:	5e                   	pop    esi
c0016395:	5f                   	pop    edi
c0016396:	5d                   	pop    ebp
c0016397:	c3                   	ret    

c0016398 <LogicalDisk::mount()>:
c0016398:	56                   	push   esi
c0016399:	53                   	push   ebx
c001639a:	50                   	push   eax
c001639b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001639f:	8b 1d 34 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f334
c00163a5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00163af:	85 db                	test   ebx,ebx
c00163b1:	74 50                	je     c0016403 <LogicalDisk::mount()+0x6b>
c00163b3:	50                   	push   eax
c00163b4:	50                   	push   eax
c00163b5:	ff 35 e8 26 03 c0    	push   DWORD PTR ds:0xc00326e8
c00163bb:	68 ec bd 02 c0       	push   0xc002bdec
c00163c0:	e8 42 c7 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00163c5:	83 c4 0c             	add    esp,0xc
c00163c8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00163cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00163d1:	83 e8 41             	sub    eax,0x41
c00163d4:	50                   	push   eax
c00163d5:	56                   	push   esi
c00163d6:	53                   	push   ebx
c00163d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00163da:	83 c4 10             	add    esp,0x10
c00163dd:	84 c0                	test   al,al
c00163df:	74 08                	je     c00163e9 <LogicalDisk::mount()+0x51>
c00163e1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00163e7:	eb 1c                	jmp    c0016405 <LogicalDisk::mount()+0x6d>
c00163e9:	51                   	push   ecx
c00163ea:	51                   	push   ecx
c00163eb:	ff 35 e8 26 03 c0    	push   DWORD PTR ds:0xc00326e8
c00163f1:	68 07 be 02 c0       	push   0xc002be07
c00163f6:	e8 0c c7 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00163fb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00163fe:	83 c4 10             	add    esp,0x10
c0016401:	eb ac                	jmp    c00163af <LogicalDisk::mount()+0x17>
c0016403:	31 c0                	xor    eax,eax
c0016405:	5a                   	pop    edx
c0016406:	5b                   	pop    ebx
c0016407:	5e                   	pop    esi
c0016408:	c3                   	ret    
c0016409:	90                   	nop

c001640a <LogicalDisk::unmount()>:
c001640a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001640e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016418:	c3                   	ret    
c0016419:	90                   	nop

c001641a <LogicalDisk::eject()>:
c001641a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001641e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016424:	8b 10                	mov    edx,DWORD PTR [eax]
c0016426:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001642a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001642d:	90                   	nop

c001642e <LogicalDisk::unassignDriveLetter()>:
c001642e:	57                   	push   edi
c001642f:	56                   	push   esi
c0016430:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016434:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001643b:	84 c9                	test   cl,cl
c001643d:	75 0f                	jne    c001644e <LogicalDisk::unassignDriveLetter()+0x20>
c001643f:	c7 44 24 0c 22 be 02 c0 	mov    DWORD PTR [esp+0xc],0xc002be22
c0016447:	5e                   	pop    esi
c0016448:	5f                   	pop    edi
c0016449:	e9 49 42 00 00       	jmp    c001a697 <Krnl::panic(char const*)>
c001644e:	83 e9 41             	sub    ecx,0x41
c0016451:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016458:	b8 01 00 00 00       	mov    eax,0x1
c001645d:	c7 04 8d c0 f7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0840],0x0
c0016468:	d3 e0                	shl    eax,cl
c001646a:	89 c7                	mov    edi,eax
c001646c:	f7 d0                	not    eax
c001646e:	c1 ff 1f             	sar    edi,0x1f
c0016471:	21 05 a0 f7 02 c0    	and    DWORD PTR ds:0xc002f7a0,eax
c0016477:	89 fe                	mov    esi,edi
c0016479:	f7 d6                	not    esi
c001647b:	21 35 a4 f7 02 c0    	and    DWORD PTR ds:0xc002f7a4,esi
c0016481:	5e                   	pop    esi
c0016482:	5f                   	pop    edi
c0016483:	c3                   	ret    

c0016484 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016484:	57                   	push   edi
c0016485:	56                   	push   esi
c0016486:	53                   	push   ebx
c0016487:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001648b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001648f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016497:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001649d:	77 41                	ja     c00164e0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001649f:	99                   	cdq    
c00164a0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00164a6:	01 c8                	add    eax,ecx
c00164a8:	11 da                	adc    edx,ebx
c00164aa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00164b0:	19 d7                	sbb    edi,edx
c00164b2:	72 33                	jb     c00164e7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00164b4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00164ba:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00164c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00164c4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00164c8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00164ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00164d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164d8:	5b                   	pop    ebx
c00164d9:	5e                   	pop    esi
c00164da:	5f                   	pop    edi
c00164db:	e9 ec 0a 00 00       	jmp    c0016fcc <VCache::read(unsigned long long, int, void*)>
c00164e0:	b8 05 00 00 00       	mov    eax,0x5
c00164e5:	eb 05                	jmp    c00164ec <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00164e7:	b8 07 00 00 00       	mov    eax,0x7
c00164ec:	5b                   	pop    ebx
c00164ed:	5e                   	pop    esi
c00164ee:	5f                   	pop    edi
c00164ef:	c3                   	ret    

c00164f0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00164f0:	57                   	push   edi
c00164f1:	56                   	push   esi
c00164f2:	53                   	push   ebx
c00164f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00164f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00164ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016503:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016509:	77 41                	ja     c001654c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001650b:	99                   	cdq    
c001650c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016512:	01 c8                	add    eax,ecx
c0016514:	11 da                	adc    edx,ebx
c0016516:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001651c:	19 d7                	sbb    edi,edx
c001651e:	72 33                	jb     c0016553 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016520:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016526:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001652c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016530:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016534:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001653a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016544:	5b                   	pop    ebx
c0016545:	5e                   	pop    esi
c0016546:	5f                   	pop    edi
c0016547:	e9 96 09 00 00       	jmp    c0016ee2 <VCache::write(unsigned long long, int, void*)>
c001654c:	b8 05 00 00 00       	mov    eax,0x5
c0016551:	eb 05                	jmp    c0016558 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016553:	b8 07 00 00 00       	mov    eax,0x7
c0016558:	5b                   	pop    ebx
c0016559:	5e                   	pop    esi
c001655a:	5f                   	pop    edi
c001655b:	c3                   	ret    

c001655c <Mouse::Mouse(char const*)>:
c001655c:	83 ec 0c             	sub    esp,0xc
c001655f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016563:	83 ec 08             	sub    esp,0x8
c0016566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001656a:	50                   	push   eax
c001656b:	e8 d4 db ff ff       	call   c0014144 <Device::Device(char const*)>
c0016570:	83 c4 10             	add    esp,0x10
c0016573:	ba 78 be 02 c0       	mov    edx,0xc002be78
c0016578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001657c:	89 10                	mov    DWORD PTR [eax],edx
c001657e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016582:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001658c:	90                   	nop
c001658d:	83 c4 0c             	add    esp,0xc
c0016590:	c3                   	ret    
c0016591:	90                   	nop

c0016592 <Mouse::~Mouse()>:
c0016592:	83 ec 0c             	sub    esp,0xc
c0016595:	ba 78 be 02 c0       	mov    edx,0xc002be78
c001659a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001659e:	89 10                	mov    DWORD PTR [eax],edx
c00165a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a4:	83 ec 0c             	sub    esp,0xc
c00165a7:	50                   	push   eax
c00165a8:	e8 61 d8 ff ff       	call   c0013e0e <Device::~Device()>
c00165ad:	83 c4 10             	add    esp,0x10
c00165b0:	90                   	nop
c00165b1:	83 c4 0c             	add    esp,0xc
c00165b4:	c3                   	ret    
c00165b5:	90                   	nop

c00165b6 <Mouse::~Mouse()>:
c00165b6:	83 ec 0c             	sub    esp,0xc
c00165b9:	83 ec 0c             	sub    esp,0xc
c00165bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165c0:	e8 cd ff ff ff       	call   c0016592 <Mouse::~Mouse()>
c00165c5:	83 c4 10             	add    esp,0x10
c00165c8:	83 ec 08             	sub    esp,0x8
c00165cb:	68 58 01 00 00       	push   0x158
c00165d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165d4:	e8 4e c4 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c00165d9:	83 c4 10             	add    esp,0x10
c00165dc:	83 c4 0c             	add    esp,0xc
c00165df:	c3                   	ret    

c00165e0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165e0:	55                   	push   ebp
c00165e1:	57                   	push   edi
c00165e2:	56                   	push   esi
c00165e3:	53                   	push   ebx
c00165e4:	81 ec 20 01 00 00    	sub    esp,0x120
c00165ea:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00165f1:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00165f8:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00165ff:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016606:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001660a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001660e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016612:	56                   	push   esi
c0016613:	68 9c be 02 c0       	push   0xc002be9c
c0016618:	e8 ea c4 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001661d:	58                   	pop    eax
c001661e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016625:	e8 16 dc ff ff       	call   c0014240 <Device::getName()>
c001662a:	5a                   	pop    edx
c001662b:	59                   	pop    ecx
c001662c:	50                   	push   eax
c001662d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016631:	53                   	push   ebx
c0016632:	e8 d5 a1 fe ff       	call   c000080c <strcpy>
c0016637:	5d                   	pop    ebp
c0016638:	58                   	pop    eax
c0016639:	68 cd be 02 c0       	push   0xc002becd
c001663e:	53                   	push   ebx
c001663f:	e8 08 a3 fe ff       	call   c000094c <strcat>
c0016644:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001664b:	e8 3c 92 ff ff       	call   c000f88c <malloc>
c0016650:	83 c4 0c             	add    esp,0xc
c0016653:	89 c5                	mov    ebp,eax
c0016655:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016659:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001665d:	57                   	push   edi
c001665e:	56                   	push   esi
c001665f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016666:	53                   	push   ebx
c0016667:	50                   	push   eax
c0016668:	e8 bf fb ff ff       	call   c001622c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001666d:	83 c4 14             	add    esp,0x14
c0016670:	55                   	push   ebp
c0016671:	e8 6c fc ff ff       	call   c00162e2 <LogicalDisk::assignDriveLetter()>
c0016676:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016679:	0f be d8             	movsx  ebx,al
c001667c:	e8 17 fd ff ff       	call   c0016398 <LogicalDisk::mount()>
c0016681:	58                   	pop    eax
c0016682:	5a                   	pop    edx
c0016683:	55                   	push   ebp
c0016684:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001668b:	e8 b0 d8 ff ff       	call   c0013f40 <Device::addChild(Device*)>
c0016690:	59                   	pop    ecx
c0016691:	5e                   	pop    esi
c0016692:	53                   	push   ebx
c0016693:	68 d8 be 02 c0       	push   0xc002bed8
c0016698:	e8 6a c4 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001669d:	81 c4 2c 01 00 00    	add    esp,0x12c
c00166a3:	5b                   	pop    ebx
c00166a4:	5e                   	pop    esi
c00166a5:	5f                   	pop    edi
c00166a6:	5d                   	pop    ebp
c00166a7:	c3                   	ret    

c00166a8 <createPartitionsForDisk(PhysicalDisk*)>:
c00166a8:	55                   	push   ebp
c00166a9:	57                   	push   edi
c00166aa:	56                   	push   esi
c00166ab:	53                   	push   ebx
c00166ac:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00166b2:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00166b9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00166bf:	3d 00 02 00 00       	cmp    eax,0x200
c00166c4:	74 27                	je     c00166ed <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00166c6:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00166cc:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00166d2:	83 ec 10             	sub    esp,0x10
c00166d5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00166d9:	99                   	cdq    
c00166da:	c1 e6 0a             	shl    esi,0xa
c00166dd:	52                   	push   edx
c00166de:	89 fd                	mov    ebp,edi
c00166e0:	50                   	push   eax
c00166e1:	55                   	push   ebp
c00166e2:	56                   	push   esi
c00166e3:	e8 8c 0d 01 00       	call   c0027474 <__udivdi3>
c00166e8:	e9 b1 00 00 00       	jmp    c001679e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00166ed:	83 ec 0c             	sub    esp,0xc
c00166f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166f2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00166f6:	56                   	push   esi
c00166f7:	6a 01                	push   0x1
c00166f9:	6a 00                	push   0x0
c00166fb:	6a 00                	push   0x0
c00166fd:	53                   	push   ebx
c00166fe:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016701:	83 c4 20             	add    esp,0x20
c0016704:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001670c:	75 0a                	jne    c0016718 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001670e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016716:	74 2c                	je     c0016744 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016718:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001671e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016724:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001672a:	83 ec 10             	sub    esp,0x10
c001672d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016731:	89 f7                	mov    edi,esi
c0016733:	c1 e0 0a             	shl    eax,0xa
c0016736:	c1 ff 1f             	sar    edi,0x1f
c0016739:	57                   	push   edi
c001673a:	56                   	push   esi
c001673b:	52                   	push   edx
c001673c:	50                   	push   eax
c001673d:	e8 32 0d 01 00       	call   c0027474 <__udivdi3>
c0016742:	eb 5a                	jmp    c001679e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016744:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001674b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016752:	83 e1 7f             	and    ecx,0x7f
c0016755:	83 e0 7f             	and    eax,0x7f
c0016758:	01 c1                	add    ecx,eax
c001675a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016761:	83 e0 7f             	and    eax,0x7f
c0016764:	01 c1                	add    ecx,eax
c0016766:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001676d:	83 e0 7f             	and    eax,0x7f
c0016770:	00 c1                	add    cl,al
c0016772:	74 41                	je     c00167b5 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016774:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001677a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016780:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016786:	83 ec 10             	sub    esp,0x10
c0016789:	0f a4 c2 0a          	shld   edx,eax,0xa
c001678d:	89 f7                	mov    edi,esi
c001678f:	c1 e0 0a             	shl    eax,0xa
c0016792:	c1 ff 1f             	sar    edi,0x1f
c0016795:	57                   	push   edi
c0016796:	56                   	push   esi
c0016797:	52                   	push   edx
c0016798:	50                   	push   eax
c0016799:	e8 d6 0c 01 00       	call   c0027474 <__udivdi3>
c001679e:	83 c4 14             	add    esp,0x14
c00167a1:	52                   	push   edx
c00167a2:	50                   	push   eax
c00167a3:	6a 00                	push   0x0
c00167a5:	6a 00                	push   0x0
c00167a7:	53                   	push   ebx
c00167a8:	e8 33 fe ff ff       	call   c00165e0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00167ad:	83 c4 20             	add    esp,0x20
c00167b0:	e9 79 01 00 00       	jmp    c001692e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00167b5:	89 f0                	mov    eax,esi
c00167b7:	31 f6                	xor    esi,esi
c00167b9:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00167c0:	75 02                	jne    c00167c4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00167c2:	89 f1                	mov    ecx,esi
c00167c4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00167cb:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00167d2:	c1 e2 08             	shl    edx,0x8
c00167d5:	c1 e7 10             	shl    edi,0x10
c00167d8:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00167e0:	09 fa                	or     edx,edi
c00167e2:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00167ea:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00167f1:	83 c0 10             	add    eax,0x10
c00167f4:	09 fa                	or     edx,edi
c00167f6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00167fd:	c1 e7 18             	shl    edi,0x18
c0016800:	09 fa                	or     edx,edi
c0016802:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016809:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001680d:	c1 e7 10             	shl    edi,0x10
c0016810:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016817:	c1 e2 08             	shl    edx,0x8
c001681a:	09 fa                	or     edx,edi
c001681c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016823:	09 fa                	or     edx,edi
c0016825:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001682c:	c1 e7 18             	shl    edi,0x18
c001682f:	09 fa                	or     edx,edi
c0016831:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016835:	46                   	inc    esi
c0016836:	83 fe 04             	cmp    esi,0x4
c0016839:	0f 85 7a ff ff ff    	jne    c00167b9 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001683f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016843:	83 f0 01             	xor    eax,0x1
c0016846:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001684a:	75 57                	jne    c00168a3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001684c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016850:	83 f0 01             	xor    eax,0x1
c0016853:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016857:	75 4a                	jne    c00168a3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016859:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001685d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016865:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001686d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016873:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016879:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001687f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016883:	89 f7                	mov    edi,esi
c0016885:	c1 e0 0a             	shl    eax,0xa
c0016888:	c1 ff 1f             	sar    edi,0x1f
c001688b:	57                   	push   edi
c001688c:	56                   	push   esi
c001688d:	52                   	push   edx
c001688e:	50                   	push   eax
c001688f:	e8 e0 0b 01 00       	call   c0027474 <__udivdi3>
c0016894:	83 c4 10             	add    esp,0x10
c0016897:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001689b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001689f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00168a3:	84 c9                	test   cl,cl
c00168a5:	74 53                	je     c00168fa <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00168a7:	0f b6 c9             	movzx  ecx,cl
c00168aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00168b2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168b6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00168ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00168be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00168c2:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00168c6:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00168ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00168d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00168d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00168da:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00168de:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00168e2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00168e6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00168ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00168ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00168f2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00168f6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00168fa:	31 ed                	xor    ebp,ebp
c00168fc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016900:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016904:	89 f8                	mov    eax,edi
c0016906:	09 f0                	or     eax,esi
c0016908:	74 1e                	je     c0016928 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001690a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001690e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016912:	89 d1                	mov    ecx,edx
c0016914:	09 c1                	or     ecx,eax
c0016916:	74 10                	je     c0016928 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016918:	83 ec 0c             	sub    esp,0xc
c001691b:	57                   	push   edi
c001691c:	56                   	push   esi
c001691d:	52                   	push   edx
c001691e:	50                   	push   eax
c001691f:	53                   	push   ebx
c0016920:	e8 bb fc ff ff       	call   c00165e0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016925:	83 c4 20             	add    esp,0x20
c0016928:	45                   	inc    ebp
c0016929:	83 fd 04             	cmp    ebp,0x4
c001692c:	75 ce                	jne    c00168fc <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001692e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016934:	5b                   	pop    ebx
c0016935:	5e                   	pop    esi
c0016936:	5f                   	pop    edi
c0016937:	5d                   	pop    ebp
c0016938:	c3                   	ret    
c0016939:	90                   	nop

c001693a <Serial::Serial(char const*)>:
c001693a:	83 ec 0c             	sub    esp,0xc
c001693d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016941:	83 ec 08             	sub    esp,0x8
c0016944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016948:	50                   	push   eax
c0016949:	e8 f6 d7 ff ff       	call   c0014144 <Device::Device(char const*)>
c001694e:	83 c4 10             	add    esp,0x10
c0016951:	ba 04 bf 02 c0       	mov    edx,0xc002bf04
c0016956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695a:	89 10                	mov    DWORD PTR [eax],edx
c001695c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016960:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001696a:	90                   	nop
c001696b:	83 c4 0c             	add    esp,0xc
c001696e:	c3                   	ret    
c001696f:	90                   	nop

c0016970 <Serial::~Serial()>:
c0016970:	83 ec 0c             	sub    esp,0xc
c0016973:	ba 04 bf 02 c0       	mov    edx,0xc002bf04
c0016978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001697c:	89 10                	mov    DWORD PTR [eax],edx
c001697e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016982:	83 ec 0c             	sub    esp,0xc
c0016985:	50                   	push   eax
c0016986:	e8 83 d4 ff ff       	call   c0013e0e <Device::~Device()>
c001698b:	83 c4 10             	add    esp,0x10
c001698e:	90                   	nop
c001698f:	83 c4 0c             	add    esp,0xc
c0016992:	c3                   	ret    
c0016993:	90                   	nop

c0016994 <Serial::~Serial()>:
c0016994:	83 ec 0c             	sub    esp,0xc
c0016997:	83 ec 0c             	sub    esp,0xc
c001699a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001699e:	e8 cd ff ff ff       	call   c0016970 <Serial::~Serial()>
c00169a3:	83 c4 10             	add    esp,0x10
c00169a6:	83 ec 08             	sub    esp,0x8
c00169a9:	68 58 01 00 00       	push   0x158
c00169ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169b2:	e8 70 c0 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c00169b7:	83 c4 10             	add    esp,0x10
c00169ba:	83 c4 0c             	add    esp,0xc
c00169bd:	c3                   	ret    

c00169be <Timer::Timer(char const*)>:
c00169be:	83 ec 0c             	sub    esp,0xc
c00169c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169c5:	83 ec 08             	sub    esp,0x8
c00169c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169cc:	50                   	push   eax
c00169cd:	e8 72 d7 ff ff       	call   c0014144 <Device::Device(char const*)>
c00169d2:	83 c4 10             	add    esp,0x10
c00169d5:	ba 48 bf 02 c0       	mov    edx,0xc002bf48
c00169da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169de:	89 10                	mov    DWORD PTR [eax],edx
c00169e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169e4:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00169ee:	90                   	nop
c00169ef:	83 c4 0c             	add    esp,0xc
c00169f2:	c3                   	ret    
c00169f3:	90                   	nop

c00169f4 <Timer::~Timer()>:
c00169f4:	83 ec 0c             	sub    esp,0xc
c00169f7:	ba 48 bf 02 c0       	mov    edx,0xc002bf48
c00169fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a00:	89 10                	mov    DWORD PTR [eax],edx
c0016a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a06:	83 ec 0c             	sub    esp,0xc
c0016a09:	50                   	push   eax
c0016a0a:	e8 ff d3 ff ff       	call   c0013e0e <Device::~Device()>
c0016a0f:	83 c4 10             	add    esp,0x10
c0016a12:	90                   	nop
c0016a13:	83 c4 0c             	add    esp,0xc
c0016a16:	c3                   	ret    
c0016a17:	90                   	nop

c0016a18 <Timer::~Timer()>:
c0016a18:	83 ec 0c             	sub    esp,0xc
c0016a1b:	83 ec 0c             	sub    esp,0xc
c0016a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a22:	e8 cd ff ff ff       	call   c00169f4 <Timer::~Timer()>
c0016a27:	83 c4 10             	add    esp,0x10
c0016a2a:	83 ec 08             	sub    esp,0x8
c0016a2d:	68 5c 01 00 00       	push   0x15c
c0016a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a36:	e8 ec bf ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0016a3b:	83 c4 10             	add    esp,0x10
c0016a3e:	83 c4 0c             	add    esp,0xc
c0016a41:	c3                   	ret    

c0016a42 <Timer::read()>:
c0016a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016a4c:	c3                   	ret    

c0016a4d <timerHandler(unsigned long long)>:
c0016a4d:	55                   	push   ebp
c0016a4e:	57                   	push   edi
c0016a4f:	56                   	push   esi
c0016a50:	53                   	push   ebx
c0016a51:	83 ec 0c             	sub    esp,0xc
c0016a54:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016a58:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016a5c:	01 35 30 f8 02 c0    	add    DWORD PTR ds:0xc002f830,esi
c0016a62:	11 3d 34 f8 02 c0    	adc    DWORD PTR ds:0xc002f834,edi
c0016a68:	80 3d ad f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1ad,0x0
c0016a6f:	0f 84 42 01 00 00    	je     c0016bb7 <timerHandler(unsigned long long)+0x16a>
c0016a75:	fa                   	cli    
c0016a76:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	ff 05 e4 26 03 c0    	inc    DWORD PTR ds:0xc00326e4
c0016a85:	68 f8 26 03 c0       	push   0xc00326f8
c0016a8a:	e8 6b 2a 01 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	84 c0                	test   al,al
c0016a94:	0f 85 a2 00 00 00    	jne    c0016b3c <timerHandler(unsigned long long)+0xef>
c0016a9a:	83 ec 0c             	sub    esp,0xc
c0016a9d:	68 f8 26 03 c0       	push   0xc00326f8
c0016aa2:	e8 6f 2a 01 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016aa7:	83 c4 10             	add    esp,0x10
c0016aaa:	89 c3                	mov    ebx,eax
c0016aac:	83 ec 0c             	sub    esp,0xc
c0016aaf:	68 f8 26 03 c0       	push   0xc00326f8
c0016ab4:	e8 5d 2a 01 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ab9:	c7 04 24 f8 26 03 c0 	mov    DWORD PTR [esp],0xc00326f8
c0016ac0:	89 c5                	mov    ebp,eax
c0016ac2:	e8 57 2a 01 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016ac7:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016aca:	83 c4 10             	add    esp,0x10
c0016acd:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016ad0:	39 15 30 f8 02 c0    	cmp    DWORD PTR ds:0xc002f830,edx
c0016ad6:	a1 34 f8 02 c0       	mov    eax,ds:0xc002f834
c0016adb:	19 c8                	sbb    eax,ecx
c0016add:	72 21                	jb     c0016b00 <timerHandler(unsigned long long)+0xb3>
c0016adf:	83 ec 0c             	sub    esp,0xc
c0016ae2:	55                   	push   ebp
c0016ae3:	e8 26 7e 00 00       	call   c001e90e <unblockTask(ThreadControlBlock*)>
c0016ae8:	83 c4 10             	add    esp,0x10
c0016aeb:	39 eb                	cmp    ebx,ebp
c0016aed:	75 21                	jne    c0016b10 <timerHandler(unsigned long long)+0xc3>
c0016aef:	83 ec 0c             	sub    esp,0xc
c0016af2:	68 f8 26 03 c0       	push   0xc00326f8
c0016af7:	e8 1a 2a 01 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016afc:	89 c3                	mov    ebx,eax
c0016afe:	eb 0d                	jmp    c0016b0d <timerHandler(unsigned long long)+0xc0>
c0016b00:	50                   	push   eax
c0016b01:	50                   	push   eax
c0016b02:	55                   	push   ebp
c0016b03:	68 f8 26 03 c0       	push   0xc00326f8
c0016b08:	e8 bf 2a 01 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b0d:	83 c4 10             	add    esp,0x10
c0016b10:	83 ec 0c             	sub    esp,0xc
c0016b13:	68 f8 26 03 c0       	push   0xc00326f8
c0016b18:	e8 dd 29 01 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016b1d:	83 c4 10             	add    esp,0x10
c0016b20:	84 c0                	test   al,al
c0016b22:	75 18                	jne    c0016b3c <timerHandler(unsigned long long)+0xef>
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	68 f8 26 03 c0       	push   0xc00326f8
c0016b2c:	e8 e5 29 01 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b31:	83 c4 10             	add    esp,0x10
c0016b34:	39 d8                	cmp    eax,ebx
c0016b36:	0f 85 70 ff ff ff    	jne    c0016aac <timerHandler(unsigned long long)+0x5f>
c0016b3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b41:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016b45:	74 3d                	je     c0016b84 <timerHandler(unsigned long long)+0x137>
c0016b47:	80 3d ac f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f1ac,0x0
c0016b4e:	74 34                	je     c0016b84 <timerHandler(unsigned long long)+0x137>
c0016b50:	fa                   	cli    
c0016b51:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c0016b57:	31 d2                	xor    edx,edx
c0016b59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b5e:	89 f9                	mov    ecx,edi
c0016b60:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016b63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b68:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016b6b:	39 c6                	cmp    esi,eax
c0016b6d:	19 d1                	sbb    ecx,edx
c0016b6f:	72 05                	jb     c0016b76 <timerHandler(unsigned long long)+0x129>
c0016b71:	e8 d4 78 00 00       	call   c001e44a <schedule()>
c0016b76:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0016b7b:	48                   	dec    eax
c0016b7c:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0016b81:	75 01                	jne    c0016b84 <timerHandler(unsigned long long)+0x137>
c0016b83:	fb                   	sti    
c0016b84:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c0016b89:	48                   	dec    eax
c0016b8a:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c0016b8f:	75 18                	jne    c0016ba9 <timerHandler(unsigned long long)+0x15c>
c0016b91:	83 3d e0 26 03 c0 00 	cmp    DWORD PTR ds:0xc00326e0,0x0
c0016b98:	74 0f                	je     c0016ba9 <timerHandler(unsigned long long)+0x15c>
c0016b9a:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c0016ba4:	e8 a1 78 00 00       	call   c001e44a <schedule()>
c0016ba9:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0016bae:	48                   	dec    eax
c0016baf:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c0016bb4:	75 01                	jne    c0016bb7 <timerHandler(unsigned long long)+0x16a>
c0016bb6:	fb                   	sti    
c0016bb7:	83 c4 0c             	add    esp,0xc
c0016bba:	5b                   	pop    ebx
c0016bbb:	5e                   	pop    esi
c0016bbc:	5f                   	pop    edi
c0016bbd:	5d                   	pop    ebp
c0016bbe:	c3                   	ret    

c0016bbf <setupTimer(int)>:
c0016bbf:	57                   	push   edi
c0016bc0:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0016bc5:	56                   	push   esi
c0016bc6:	53                   	push   ebx
c0016bc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016bcb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bd1:	83 ec 0c             	sub    esp,0xc
c0016bd4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016bda:	e8 61 d6 ff ff       	call   c0014240 <Device::getName()>
c0016bdf:	83 c4 10             	add    esp,0x10
c0016be2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016be5:	0f 85 8d 00 00 00    	jne    c0016c78 <setupTimer(int)+0xb9>
c0016beb:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0016bf0:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016bf7:	74 7f                	je     c0016c78 <setupTimer(int)+0xb9>
c0016bf9:	83 ec 0c             	sub    esp,0xc
c0016bfc:	68 5c 01 00 00       	push   0x15c
c0016c01:	e8 86 8c ff ff       	call   c000f88c <malloc>
c0016c06:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c09:	89 c3                	mov    ebx,eax
c0016c0b:	e8 36 04 01 00       	call   c0027046 <PIT::PIT()>
c0016c10:	59                   	pop    ecx
c0016c11:	5f                   	pop    edi
c0016c12:	53                   	push   ebx
c0016c13:	ff 35 a8 f1 02 c0    	push   DWORD PTR ds:0xc002f1a8
c0016c19:	e8 22 d3 ff ff       	call   c0013f40 <Device::addChild(Device*)>
c0016c1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c20:	6a 00                	push   0x0
c0016c22:	6a 00                	push   0x0
c0016c24:	56                   	push   esi
c0016c25:	53                   	push   ebx
c0016c26:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c29:	83 c4 14             	add    esp,0x14
c0016c2c:	68 60 01 00 00       	push   0x160
c0016c31:	e8 56 8c ff ff       	call   c000f88c <malloc>
c0016c36:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c39:	89 c7                	mov    edi,eax
c0016c3b:	e8 b6 02 01 00       	call   c0026ef6 <APICTimer::APICTimer()>
c0016c40:	6a 00                	push   0x0
c0016c42:	6a 00                	push   0x0
c0016c44:	56                   	push   esi
c0016c45:	57                   	push   edi
c0016c46:	e8 ad 01 01 00       	call   c0026df8 <APICTimer::open(int, int, void*)>
c0016c4b:	83 c4 20             	add    esp,0x20
c0016c4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c50:	6a 00                	push   0x0
c0016c52:	6a 00                	push   0x0
c0016c54:	6a 00                	push   0x0
c0016c56:	53                   	push   ebx
c0016c57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c5a:	58                   	pop    eax
c0016c5b:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0016c60:	5a                   	pop    edx
c0016c61:	57                   	push   edi
c0016c62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c68:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016c6e:	e8 cd d2 ff ff       	call   c0013f40 <Device::addChild(Device*)>
c0016c73:	83 c4 10             	add    esp,0x10
c0016c76:	eb 33                	jmp    c0016cab <setupTimer(int)+0xec>
c0016c78:	83 ec 0c             	sub    esp,0xc
c0016c7b:	68 5c 01 00 00       	push   0x15c
c0016c80:	e8 07 8c ff ff       	call   c000f88c <malloc>
c0016c85:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c88:	89 c3                	mov    ebx,eax
c0016c8a:	e8 b7 03 01 00       	call   c0027046 <PIT::PIT()>
c0016c8f:	58                   	pop    eax
c0016c90:	5a                   	pop    edx
c0016c91:	53                   	push   ebx
c0016c92:	ff 35 a8 f1 02 c0    	push   DWORD PTR ds:0xc002f1a8
c0016c98:	e8 a3 d2 ff ff       	call   c0013f40 <Device::addChild(Device*)>
c0016c9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c9f:	6a 00                	push   0x0
c0016ca1:	6a 00                	push   0x0
c0016ca3:	56                   	push   esi
c0016ca4:	53                   	push   ebx
c0016ca5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ca8:	83 c4 20             	add    esp,0x20
c0016cab:	89 d8                	mov    eax,ebx
c0016cad:	5b                   	pop    ebx
c0016cae:	5e                   	pop    esi
c0016caf:	5f                   	pop    edi
c0016cb0:	c3                   	ret    
c0016cb1:	90                   	nop

c0016cb2 <VCache::VCache(PhysicalDisk*)>:
c0016cb2:	53                   	push   ebx
c0016cb3:	83 ec 18             	sub    esp,0x18
c0016cb6:	ba 78 bf 02 c0       	mov    edx,0xc002bf78
c0016cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cbf:	89 10                	mov    DWORD PTR [eax],edx
c0016cc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cc5:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cd0:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016cd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cdb:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ce2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ced:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016cf4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016cfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cff:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016d06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d0a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d12:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016d19:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d24:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016d28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d2c:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d34:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d3c:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016d43:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016d4b:	83 ec 0c             	sub    esp,0xc
c0016d4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d52:	e8 35 8b ff ff       	call   c000f88c <malloc>
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	89 c3                	mov    ebx,eax
c0016d5c:	83 ec 0c             	sub    esp,0xc
c0016d5f:	53                   	push   ebx
c0016d60:	e8 8f 74 00 00       	call   c001e1f4 <Mutex::Mutex()>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d6c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d73:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016d77:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016d7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d7e:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016d85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d89:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016d8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d93:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016d96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d9a:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016da0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016da6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016daa:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016dad:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016db0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016db4:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016db8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016dbc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016dc2:	05 00 01 00 00       	add    eax,0x100
c0016dc7:	c1 e0 04             	shl    eax,0x4
c0016dca:	83 ec 0c             	sub    esp,0xc
c0016dcd:	50                   	push   eax
c0016dce:	e8 b9 8a ff ff       	call   c000f88c <malloc>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	89 c2                	mov    edx,eax
c0016dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ddc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016de3:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dee:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016df2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016df6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016dfc:	c1 e0 07             	shl    eax,0x7
c0016dff:	83 ec 0c             	sub    esp,0xc
c0016e02:	50                   	push   eax
c0016e03:	e8 84 8a ff ff       	call   c000f88c <malloc>
c0016e08:	83 c4 10             	add    esp,0x10
c0016e0b:	89 c2                	mov    edx,eax
c0016e0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e11:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016e14:	90                   	nop
c0016e15:	83 c4 18             	add    esp,0x18
c0016e18:	5b                   	pop    ebx
c0016e19:	c3                   	ret    

c0016e1a <VCache::invalidateReadBuffer()>:
c0016e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e1e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016e24:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016e28:	c3                   	ret    
c0016e29:	90                   	nop

c0016e2a <VCache::writeWriteBuffer()>:
c0016e2a:	53                   	push   ebx
c0016e2b:	83 ec 14             	sub    esp,0x14
c0016e2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016e32:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e35:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e37:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016e3a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016e3d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016e40:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016e43:	50                   	push   eax
c0016e44:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016e4e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016e55:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016e59:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016e60:	83 c4 28             	add    esp,0x28
c0016e63:	5b                   	pop    ebx
c0016e64:	c3                   	ret    
c0016e65:	90                   	nop

c0016e66 <VCache::~VCache()>:
c0016e66:	83 ec 0c             	sub    esp,0xc
c0016e69:	ba 78 bf 02 c0       	mov    edx,0xc002bf78
c0016e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e72:	89 10                	mov    DWORD PTR [eax],edx
c0016e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e78:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016e7b:	84 c0                	test   al,al
c0016e7d:	74 0f                	je     c0016e8e <VCache::~VCache()+0x28>
c0016e7f:	83 ec 0c             	sub    esp,0xc
c0016e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e86:	e8 9f ff ff ff       	call   c0016e2a <VCache::writeWriteBuffer()>
c0016e8b:	83 c4 10             	add    esp,0x10
c0016e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e92:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016e95:	83 ec 0c             	sub    esp,0xc
c0016e98:	50                   	push   eax
c0016e99:	e8 fe 89 ff ff       	call   c000f89c <free>
c0016e9e:	83 c4 10             	add    esp,0x10
c0016ea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ea5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ea8:	83 ec 0c             	sub    esp,0xc
c0016eab:	50                   	push   eax
c0016eac:	e8 eb 89 ff ff       	call   c000f89c <free>
c0016eb1:	83 c4 10             	add    esp,0x10
c0016eb4:	90                   	nop
c0016eb5:	83 c4 0c             	add    esp,0xc
c0016eb8:	c3                   	ret    
c0016eb9:	90                   	nop

c0016eba <VCache::~VCache()>:
c0016eba:	83 ec 0c             	sub    esp,0xc
c0016ebd:	83 ec 0c             	sub    esp,0xc
c0016ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ec4:	e8 9d ff ff ff       	call   c0016e66 <VCache::~VCache()>
c0016ec9:	83 c4 10             	add    esp,0x10
c0016ecc:	83 ec 08             	sub    esp,0x8
c0016ecf:	6a 44                	push   0x44
c0016ed1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ed5:	e8 4d bb ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0016eda:	83 c4 10             	add    esp,0x10
c0016edd:	83 c4 0c             	add    esp,0xc
c0016ee0:	c3                   	ret    
c0016ee1:	90                   	nop

c0016ee2 <VCache::write(unsigned long long, int, void*)>:
c0016ee2:	55                   	push   ebp
c0016ee3:	57                   	push   edi
c0016ee4:	56                   	push   esi
c0016ee5:	53                   	push   ebx
c0016ee6:	83 ec 18             	sub    esp,0x18
c0016ee9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016eed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ef1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016ef5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ef8:	e8 85 78 00 00       	call   c001e782 <Semaphore::acquire()>
c0016efd:	83 c4 10             	add    esp,0x10
c0016f00:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016f04:	74 0c                	je     c0016f12 <VCache::write(unsigned long long, int, void*)+0x30>
c0016f06:	83 ec 0c             	sub    esp,0xc
c0016f09:	53                   	push   ebx
c0016f0a:	e8 0b ff ff ff       	call   c0016e1a <VCache::invalidateReadBuffer()>
c0016f0f:	83 c4 10             	add    esp,0x10
c0016f12:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016f16:	74 5c                	je     c0016f74 <VCache::write(unsigned long long, int, void*)+0x92>
c0016f18:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016f1b:	89 e8                	mov    eax,ebp
c0016f1d:	99                   	cdq    
c0016f1e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016f21:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016f24:	89 c1                	mov    ecx,eax
c0016f26:	89 d0                	mov    eax,edx
c0016f28:	31 f1                	xor    ecx,esi
c0016f2a:	31 f8                	xor    eax,edi
c0016f2c:	09 c1                	or     ecx,eax
c0016f2e:	75 38                	jne    c0016f68 <VCache::write(unsigned long long, int, void*)+0x86>
c0016f30:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016f35:	75 31                	jne    c0016f68 <VCache::write(unsigned long long, int, void*)+0x86>
c0016f37:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f3a:	89 ef                	mov    edi,ebp
c0016f3c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016f42:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f46:	0f af f9             	imul   edi,ecx
c0016f49:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016f4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f4e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016f51:	40                   	inc    eax
c0016f52:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016f55:	83 c0 80             	add    eax,0xffffff80
c0016f58:	75 5c                	jne    c0016fb6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016f5a:	83 ec 0c             	sub    esp,0xc
c0016f5d:	53                   	push   ebx
c0016f5e:	e8 c7 fe ff ff       	call   c0016e2a <VCache::writeWriteBuffer()>
c0016f63:	83 c4 10             	add    esp,0x10
c0016f66:	eb 4e                	jmp    c0016fb6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016f68:	83 ec 0c             	sub    esp,0xc
c0016f6b:	53                   	push   ebx
c0016f6c:	e8 b9 fe ff ff       	call   c0016e2a <VCache::writeWriteBuffer()>
c0016f71:	83 c4 10             	add    esp,0x10
c0016f74:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f77:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016f7c:	7f 22                	jg     c0016fa0 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016f7e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016f81:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016f84:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016f88:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016f8c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016f8f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016f92:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016f98:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f9e:	eb 16                	jmp    c0016fb6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016fa0:	83 ec 0c             	sub    esp,0xc
c0016fa3:	8b 10                	mov    edx,DWORD PTR [eax]
c0016fa5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016fa9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016fad:	57                   	push   edi
c0016fae:	56                   	push   esi
c0016faf:	50                   	push   eax
c0016fb0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016fb3:	83 c4 20             	add    esp,0x20
c0016fb6:	83 ec 0c             	sub    esp,0xc
c0016fb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016fbc:	e8 fb 7e 00 00       	call   c001eebc <Semaphore::release()>
c0016fc1:	83 c4 1c             	add    esp,0x1c
c0016fc4:	31 c0                	xor    eax,eax
c0016fc6:	5b                   	pop    ebx
c0016fc7:	5e                   	pop    esi
c0016fc8:	5f                   	pop    edi
c0016fc9:	5d                   	pop    ebp
c0016fca:	c3                   	ret    
c0016fcb:	90                   	nop

c0016fcc <VCache::read(unsigned long long, int, void*)>:
c0016fcc:	55                   	push   ebp
c0016fcd:	57                   	push   edi
c0016fce:	56                   	push   esi
c0016fcf:	53                   	push   ebx
c0016fd0:	83 ec 28             	sub    esp,0x28
c0016fd3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fd7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fdb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fdf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016fe3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016fe6:	e8 97 77 00 00       	call   c001e782 <Semaphore::acquire()>
c0016feb:	83 c4 10             	add    esp,0x10
c0016fee:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016ff2:	74 0c                	je     c0017000 <VCache::read(unsigned long long, int, void*)+0x34>
c0016ff4:	83 ec 0c             	sub    esp,0xc
c0016ff7:	53                   	push   ebx
c0016ff8:	e8 2d fe ff ff       	call   c0016e2a <VCache::writeWriteBuffer()>
c0016ffd:	83 c4 10             	add    esp,0x10
c0017000:	83 fd 01             	cmp    ebp,0x1
c0017003:	0f 85 80 00 00 00    	jne    c0017089 <VCache::read(unsigned long long, int, void*)+0xbd>
c0017009:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001700c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017010:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017017:	75 70                	jne    c0017089 <VCache::read(unsigned long long, int, void*)+0xbd>
c0017019:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001701c:	89 e9                	mov    ecx,ebp
c001701e:	f7 d9                	neg    ecx
c0017020:	89 c8                	mov    eax,ecx
c0017022:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017026:	c1 f8 1f             	sar    eax,0x1f
c0017029:	21 f1                	and    ecx,esi
c001702b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001702f:	89 c8                	mov    eax,ecx
c0017031:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017035:	21 f9                	and    ecx,edi
c0017037:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001703b:	89 ca                	mov    edx,ecx
c001703d:	74 0a                	je     c0017049 <VCache::read(unsigned long long, int, void*)+0x7d>
c001703f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017042:	75 05                	jne    c0017049 <VCache::read(unsigned long long, int, void*)+0x7d>
c0017044:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0017047:	74 23                	je     c001706c <VCache::read(unsigned long long, int, void*)+0xa0>
c0017049:	83 ec 0c             	sub    esp,0xc
c001704c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017050:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017054:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0017057:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001705a:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001705c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001705f:	55                   	push   ebp
c0017060:	52                   	push   edx
c0017061:	50                   	push   eax
c0017062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017066:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017069:	83 c4 20             	add    esp,0x20
c001706c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001706f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017073:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017079:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001707c:	48                   	dec    eax
c001707d:	21 c6                	and    esi,eax
c001707f:	0f af f1             	imul   esi,ecx
c0017082:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0017085:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017087:	eb 1d                	jmp    c00170a6 <VCache::read(unsigned long long, int, void*)+0xda>
c0017089:	83 ec 0c             	sub    esp,0xc
c001708c:	53                   	push   ebx
c001708d:	e8 88 fd ff ff       	call   c0016e1a <VCache::invalidateReadBuffer()>
c0017092:	5a                   	pop    edx
c0017093:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017096:	8b 10                	mov    edx,DWORD PTR [eax]
c0017098:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001709c:	55                   	push   ebp
c001709d:	57                   	push   edi
c001709e:	56                   	push   esi
c001709f:	50                   	push   eax
c00170a0:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00170a3:	83 c4 20             	add    esp,0x20
c00170a6:	83 ec 0c             	sub    esp,0xc
c00170a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170ac:	e8 0b 7e 00 00       	call   c001eebc <Semaphore::release()>
c00170b1:	83 c4 2c             	add    esp,0x2c
c00170b4:	31 c0                	xor    eax,eax
c00170b6:	5b                   	pop    ebx
c00170b7:	5e                   	pop    esi
c00170b8:	5f                   	pop    edi
c00170b9:	5d                   	pop    ebp
c00170ba:	c3                   	ret    
c00170bb:	90                   	nop

c00170bc <Video::putrect(int, int, int, int, unsigned int)>:
c00170bc:	55                   	push   ebp
c00170bd:	57                   	push   edi
c00170be:	56                   	push   esi
c00170bf:	53                   	push   ebx
c00170c0:	83 ec 1c             	sub    esp,0x1c
c00170c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00170c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170cb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00170cf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00170d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00170d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170db:	01 df                	add    edi,ebx
c00170dd:	39 fb                	cmp    ebx,edi
c00170df:	7d 1f                	jge    c0017100 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00170e1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170e5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00170e9:	7d 12                	jge    c00170fd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00170eb:	8b 16                	mov    edx,DWORD PTR [esi]
c00170ed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00170f1:	53                   	push   ebx
c00170f2:	55                   	push   ebp
c00170f3:	45                   	inc    ebp
c00170f4:	56                   	push   esi
c00170f5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00170f8:	83 c4 10             	add    esp,0x10
c00170fb:	eb e8                	jmp    c00170e5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00170fd:	43                   	inc    ebx
c00170fe:	eb dd                	jmp    c00170dd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017100:	83 c4 1c             	add    esp,0x1c
c0017103:	5b                   	pop    ebx
c0017104:	5e                   	pop    esi
c0017105:	5f                   	pop    edi
c0017106:	5d                   	pop    ebp
c0017107:	c3                   	ret    

c0017108 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017108:	55                   	push   ebp
c0017109:	57                   	push   edi
c001710a:	31 ff                	xor    edi,edi
c001710c:	56                   	push   esi
c001710d:	53                   	push   ebx
c001710e:	83 ec 1c             	sub    esp,0x1c
c0017111:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017115:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017119:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017120:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017125:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017129:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001712d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017131:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017134:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017138:	01 f9                	add    ecx,edi
c001713a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001713e:	7d 2f                	jge    c001716f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017140:	31 f6                	xor    esi,esi
c0017142:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017146:	01 f2                	add    edx,esi
c0017148:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001714c:	7d 1a                	jge    c0017168 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001714e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017151:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017154:	46                   	inc    esi
c0017155:	51                   	push   ecx
c0017156:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001715a:	52                   	push   edx
c001715b:	55                   	push   ebp
c001715c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001715f:	83 c4 10             	add    esp,0x10
c0017162:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017166:	eb da                	jmp    c0017142 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017168:	47                   	inc    edi
c0017169:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001716d:	eb c5                	jmp    c0017134 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001716f:	83 c4 1c             	add    esp,0x1c
c0017172:	5b                   	pop    ebx
c0017173:	5e                   	pop    esi
c0017174:	5f                   	pop    edi
c0017175:	5d                   	pop    ebp
c0017176:	c3                   	ret    
c0017177:	90                   	nop

c0017178 <Video::blit(unsigned int*, int, int, int, int)>:
c0017178:	55                   	push   ebp
c0017179:	57                   	push   edi
c001717a:	56                   	push   esi
c001717b:	53                   	push   ebx
c001717c:	83 ec 1c             	sub    esp,0x1c
c001717f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017183:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017187:	85 c0                	test   eax,eax
c0017189:	79 02                	jns    c001718d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001718b:	31 c0                	xor    eax,eax
c001718d:	c1 e0 02             	shl    eax,0x2
c0017190:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017194:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017198:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001719c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00171a0:	39 d8                	cmp    eax,ebx
c00171a2:	7e 49                	jle    c00171ed <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00171a4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00171aa:	7c 41                	jl     c00171ed <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00171ac:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00171b0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00171b4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00171b8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00171bc:	39 f9                	cmp    ecx,edi
c00171be:	7e 22                	jle    c00171e2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00171c0:	83 c5 04             	add    ebp,0x4
c00171c3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00171c9:	7c 14                	jl     c00171df <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00171cb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00171cd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00171d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00171d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00171d8:	56                   	push   esi
c00171d9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	47                   	inc    edi
c00171e0:	eb d2                	jmp    c00171b4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00171e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171e6:	43                   	inc    ebx
c00171e7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00171eb:	eb ab                	jmp    c0017198 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00171ed:	83 c4 1c             	add    esp,0x1c
c00171f0:	5b                   	pop    ebx
c00171f1:	5e                   	pop    esi
c00171f2:	5f                   	pop    edi
c00171f3:	5d                   	pop    ebp
c00171f4:	c3                   	ret    
c00171f5:	90                   	nop

c00171f6 <Video::clearScreen(unsigned int)>:
c00171f6:	57                   	push   edi
c00171f7:	56                   	push   esi
c00171f8:	53                   	push   ebx
c00171f9:	31 db                	xor    ebx,ebx
c00171fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00171ff:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017205:	7e 1f                	jle    c0017226 <Video::clearScreen(unsigned int)+0x30>
c0017207:	31 ff                	xor    edi,edi
c0017209:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001720f:	7e 12                	jle    c0017223 <Video::clearScreen(unsigned int)+0x2d>
c0017211:	8b 06                	mov    eax,DWORD PTR [esi]
c0017213:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017217:	53                   	push   ebx
c0017218:	57                   	push   edi
c0017219:	47                   	inc    edi
c001721a:	56                   	push   esi
c001721b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001721e:	83 c4 10             	add    esp,0x10
c0017221:	eb e6                	jmp    c0017209 <Video::clearScreen(unsigned int)+0x13>
c0017223:	43                   	inc    ebx
c0017224:	eb d9                	jmp    c00171ff <Video::clearScreen(unsigned int)+0x9>
c0017226:	5b                   	pop    ebx
c0017227:	5e                   	pop    esi
c0017228:	5f                   	pop    edi
c0017229:	c3                   	ret    

c001722a <Video::putpixel(int, int, unsigned int)>:
c001722a:	c7 44 24 04 80 bf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bf80
c0017232:	e9 60 34 00 00       	jmp    c001a697 <Krnl::panic(char const*)>
c0017237:	90                   	nop

c0017238 <Video::Video(char const*)>:
c0017238:	83 ec 0c             	sub    esp,0xc
c001723b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001723f:	83 ec 08             	sub    esp,0x8
c0017242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017246:	50                   	push   eax
c0017247:	e8 f8 ce ff ff       	call   c0014144 <Device::Device(char const*)>
c001724c:	83 c4 10             	add    esp,0x10
c001724f:	ba 04 c0 02 c0       	mov    edx,0xc002c004
c0017254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017258:	89 10                	mov    DWORD PTR [eax],edx
c001725a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001725e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017268:	90                   	nop
c0017269:	83 c4 0c             	add    esp,0xc
c001726c:	c3                   	ret    
c001726d:	90                   	nop

c001726e <Video::~Video()>:
c001726e:	83 ec 0c             	sub    esp,0xc
c0017271:	ba 04 c0 02 c0       	mov    edx,0xc002c004
c0017276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001727a:	89 10                	mov    DWORD PTR [eax],edx
c001727c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017280:	83 ec 0c             	sub    esp,0xc
c0017283:	50                   	push   eax
c0017284:	e8 85 cb ff ff       	call   c0013e0e <Device::~Device()>
c0017289:	83 c4 10             	add    esp,0x10
c001728c:	90                   	nop
c001728d:	83 c4 0c             	add    esp,0xc
c0017290:	c3                   	ret    
c0017291:	90                   	nop

c0017292 <Video::~Video()>:
c0017292:	83 ec 0c             	sub    esp,0xc
c0017295:	83 ec 0c             	sub    esp,0xc
c0017298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001729c:	e8 cd ff ff ff       	call   c001726e <Video::~Video()>
c00172a1:	83 c4 10             	add    esp,0x10
c00172a4:	83 ec 08             	sub    esp,0x8
c00172a7:	68 64 01 00 00       	push   0x164
c00172ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172b0:	e8 72 b7 ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c00172b5:	83 c4 10             	add    esp,0x10
c00172b8:	83 c4 0c             	add    esp,0xc
c00172bb:	c3                   	ret    

c00172bc <Video::isMonochrome()>:
c00172bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172c0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00172c6:	c3                   	ret    
c00172c7:	90                   	nop

c00172c8 <Video::getWidth()>:
c00172c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00172d2:	c3                   	ret    
c00172d3:	90                   	nop

c00172d4 <Video::getHeight()>:
c00172d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172d8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00172de:	c3                   	ret    
c00172df:	90                   	nop

c00172e0 <Video::drawCursor(int, int, unsigned char*, int)>:
c00172e0:	55                   	push   ebp
c00172e1:	57                   	push   edi
c00172e2:	56                   	push   esi
c00172e3:	53                   	push   ebx
c00172e4:	83 ec 2c             	sub    esp,0x2c
c00172e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00172eb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00172ef:	83 f8 01             	cmp    eax,0x1
c00172f2:	19 c9                	sbb    ecx,ecx
c00172f4:	31 db                	xor    ebx,ebx
c00172f6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00172fa:	89 cd                	mov    ebp,ecx
c00172fc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017304:	f7 d5                	not    ebp
c0017306:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001730c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017310:	01 d8                	add    eax,ebx
c0017312:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017316:	56                   	push   esi
c0017317:	e8 b8 ff ff ff       	call   c00172d4 <Video::getHeight()>
c001731c:	59                   	pop    ecx
c001731d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017321:	7e 70                	jle    c0017393 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017323:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017327:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001732b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001732e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017332:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017336:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001733d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017341:	89 f8                	mov    eax,edi
c0017343:	83 c0 20             	add    eax,0x20
c0017346:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001734a:	56                   	push   esi
c001734b:	e8 78 ff ff ff       	call   c00172c8 <Video::getWidth()>
c0017350:	5a                   	pop    edx
c0017351:	39 c7                	cmp    edi,eax
c0017353:	7d 34                	jge    c0017389 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017355:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001735a:	74 05                	je     c0017361 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001735c:	8b 06                	mov    eax,DWORD PTR [esi]
c001735e:	55                   	push   ebp
c001735f:	eb 0d                	jmp    c001736e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017361:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017366:	74 12                	je     c001737a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017368:	8b 06                	mov    eax,DWORD PTR [esi]
c001736a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001736e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017372:	57                   	push   edi
c0017373:	56                   	push   esi
c0017374:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017377:	83 c4 10             	add    esp,0x10
c001737a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001737e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017382:	47                   	inc    edi
c0017383:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017387:	75 c1                	jne    c001734a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017389:	43                   	inc    ebx
c001738a:	83 fb 20             	cmp    ebx,0x20
c001738d:	0f 85 79 ff ff ff    	jne    c001730c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017393:	83 c4 2c             	add    esp,0x2c
c0017396:	5b                   	pop    ebx
c0017397:	5e                   	pop    esi
c0017398:	5f                   	pop    edi
c0017399:	5d                   	pop    ebp
c001739a:	c3                   	ret    
c001739b:	90                   	nop

c001739c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001739c:	55                   	push   ebp
c001739d:	57                   	push   edi
c001739e:	56                   	push   esi
c001739f:	53                   	push   ebx
c00173a0:	83 ec 28             	sub    esp,0x28
c00173a3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00173a7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00173ab:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00173af:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00173b3:	c1 e7 08             	shl    edi,0x8
c00173b6:	01 c7                	add    edi,eax
c00173b8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00173bc:	c1 e0 08             	shl    eax,0x8
c00173bf:	01 d0                	add    eax,edx
c00173c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173c9:	0f af c7             	imul   eax,edi
c00173cc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00173d3:	50                   	push   eax
c00173d4:	e8 b3 84 ff ff       	call   c000f88c <malloc>
c00173d9:	83 c4 10             	add    esp,0x10
c00173dc:	89 c5                	mov    ebp,eax
c00173de:	85 c0                	test   eax,eax
c00173e0:	75 15                	jne    c00173f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00173e2:	83 ec 0c             	sub    esp,0xc
c00173e5:	68 a1 bf 02 c0       	push   0xc002bfa1
c00173ea:	e8 18 b7 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00173ef:	83 c4 10             	add    esp,0x10
c00173f2:	e9 1c 01 00 00       	jmp    c0017513 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00173f7:	be 12 00 00 00       	mov    esi,0x12
c00173fc:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017400:	74 11                	je     c0017413 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017402:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017406:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001740a:	c1 fe 03             	sar    esi,0x3
c001740d:	0f af f0             	imul   esi,eax
c0017410:	83 c6 12             	add    esi,0x12
c0017413:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017417:	74 04                	je     c001741d <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017419:	85 ff                	test   edi,edi
c001741b:	75 12                	jne    c001742f <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001741d:	83 ec 0c             	sub    esp,0xc
c0017420:	68 b8 bf 02 c0       	push   0xc002bfb8
c0017425:	e8 dd b6 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001742a:	e9 ce 00 00 00       	jmp    c00174fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001742f:	52                   	push   edx
c0017430:	52                   	push   edx
c0017431:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017435:	50                   	push   eax
c0017436:	68 cd bf 02 c0       	push   0xc002bfcd
c001743b:	e8 c7 b6 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0017440:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017444:	83 c4 10             	add    esp,0x10
c0017447:	80 fa 02             	cmp    dl,0x2
c001744a:	0f 85 98 00 00 00    	jne    c00174e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017450:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017455:	75 10                	jne    c0017467 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017457:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001745b:	75 0a                	jne    c0017467 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001745d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017460:	83 e8 18             	sub    eax,0x18
c0017463:	a8 f7                	test   al,0xf7
c0017465:	74 0a                	je     c0017471 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017467:	83 ec 0c             	sub    esp,0xc
c001746a:	68 da bf 02 c0       	push   0xc002bfda
c001746f:	eb 7f                	jmp    c00174f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017471:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017479:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017481:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017485:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001748d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017491:	75 0c                	jne    c001749f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017493:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017498:	c1 e0 18             	shl    eax,0x18
c001749b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001749f:	41                   	inc    ecx
c00174a0:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00174a5:	c1 e2 10             	shl    edx,0x10
c00174a8:	89 d0                	mov    eax,edx
c00174aa:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00174af:	c1 e2 08             	shl    edx,0x8
c00174b2:	09 c2                	or     edx,eax
c00174b4:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00174b8:	09 c2                	or     edx,eax
c00174ba:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00174be:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00174c2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00174c6:	c1 f8 03             	sar    eax,0x3
c00174c9:	01 c6                	add    esi,eax
c00174cb:	89 c8                	mov    eax,ecx
c00174cd:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00174d1:	39 c7                	cmp    edi,eax
c00174d3:	7f b0                	jg     c0017485 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00174d5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00174d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174dd:	39 14 24             	cmp    DWORD PTR [esp],edx
c00174e0:	7e 22                	jle    c0017504 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00174e2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00174e6:	eb 99                	jmp    c0017481 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00174e8:	50                   	push   eax
c00174e9:	50                   	push   eax
c00174ea:	52                   	push   edx
c00174eb:	68 e8 bf 02 c0       	push   0xc002bfe8
c00174f0:	e8 12 b6 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00174f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174f8:	e8 9f 83 ff ff       	call   c000f89c <free>
c00174fd:	83 c4 10             	add    esp,0x10
c0017500:	31 ed                	xor    ebp,ebp
c0017502:	eb 0f                	jmp    c0017513 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017504:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017508:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001750b:	89 38                	mov    DWORD PTR [eax],edi
c001750d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017511:	89 08                	mov    DWORD PTR [eax],ecx
c0017513:	83 c4 1c             	add    esp,0x1c
c0017516:	89 e8                	mov    eax,ebp
c0017518:	5b                   	pop    ebx
c0017519:	5e                   	pop    esi
c001751a:	5f                   	pop    edi
c001751b:	5d                   	pop    ebp
c001751c:	c3                   	ret    
c001751d:	90                   	nop

c001751e <Video::putTGA(int, int, unsigned char*, int)>:
c001751e:	55                   	push   ebp
c001751f:	57                   	push   edi
c0017520:	56                   	push   esi
c0017521:	53                   	push   ebx
c0017522:	83 ec 28             	sub    esp,0x28
c0017525:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017529:	8d 44 24 18          	lea    eax,[esp+0x18]
c001752d:	50                   	push   eax
c001752e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017532:	50                   	push   eax
c0017533:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017537:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001753b:	56                   	push   esi
c001753c:	e8 5b fe ff ff       	call   c001739c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017541:	83 c4 20             	add    esp,0x20
c0017544:	85 c0                	test   eax,eax
c0017546:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001754a:	74 35                	je     c0017581 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001754c:	89 c7                	mov    edi,eax
c001754e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017552:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017556:	39 d8                	cmp    eax,ebx
c0017558:	7e 27                	jle    c0017581 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001755a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001755e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017562:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017566:	39 e8                	cmp    eax,ebp
c0017568:	7e 14                	jle    c001757e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001756a:	8b 06                	mov    eax,DWORD PTR [esi]
c001756c:	83 c7 04             	add    edi,0x4
c001756f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017572:	53                   	push   ebx
c0017573:	55                   	push   ebp
c0017574:	45                   	inc    ebp
c0017575:	56                   	push   esi
c0017576:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017579:	83 c4 10             	add    esp,0x10
c001757c:	eb e0                	jmp    c001755e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001757e:	43                   	inc    ebx
c001757f:	eb cd                	jmp    c001754e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017581:	83 c4 1c             	add    esp,0x1c
c0017584:	5b                   	pop    ebx
c0017585:	5e                   	pop    esi
c0017586:	5f                   	pop    edi
c0017587:	5d                   	pop    ebp
c0017588:	c3                   	ret    
c0017589:	90                   	nop

c001758a <ACPI::close(int, int, void*)>:
c001758a:	83 ec 1c             	sub    esp,0x1c
c001758d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017595:	74 0a                	je     c00175a1 <ACPI::close(int, int, void*)+0x17>
c0017597:	b8 00 00 00 00       	mov    eax,0x0
c001759c:	e9 9a 00 00 00       	jmp    c001763b <ACPI::close(int, int, void*)+0xb1>
c00175a1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00175a6:	75 37                	jne    c00175df <ACPI::close(int, int, void*)+0x55>
c00175a8:	83 ec 0c             	sub    esp,0xc
c00175ab:	68 44 c0 02 c0       	push   0xc002c044
c00175b0:	e8 52 b5 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	a1 68 18 03 c0       	mov    eax,ds:0xc0031868
c00175bd:	85 c0                	test   eax,eax
c00175bf:	74 07                	je     c00175c8 <ACPI::close(int, int, void*)+0x3e>
c00175c1:	a1 68 18 03 c0       	mov    eax,ds:0xc0031868
c00175c6:	ff d0                	call   eax
c00175c8:	83 ec 0c             	sub    esp,0xc
c00175cb:	68 ec c1 02 c0       	push   0xc002c1ec
c00175d0:	e8 c2 30 00 00       	call   c001a697 <Krnl::panic(char const*)>
c00175d5:	83 c4 10             	add    esp,0x10
c00175d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00175dd:	eb 5c                	jmp    c001763b <ACPI::close(int, int, void*)+0xb1>
c00175df:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00175e4:	75 50                	jne    c0017636 <ACPI::close(int, int, void*)+0xac>
c00175e6:	a1 64 18 03 c0       	mov    eax,ds:0xc0031864
c00175eb:	85 c0                	test   eax,eax
c00175ed:	74 07                	je     c00175f6 <ACPI::close(int, int, void*)+0x6c>
c00175ef:	a1 64 18 03 c0       	mov    eax,ds:0xc0031864
c00175f4:	ff d0                	call   eax
c00175f6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00175fb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017600:	83 e0 02             	and    eax,0x2
c0017603:	74 1c                	je     c0017621 <ACPI::close(int, int, void*)+0x97>
c0017605:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001760c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017610:	89 c2                	mov    edx,eax
c0017612:	ec                   	in     al,dx
c0017613:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017617:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001761b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001761f:	eb da                	jmp    c00175fb <ACPI::close(int, int, void*)+0x71>
c0017621:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017628:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001762d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017631:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017635:	ee                   	out    dx,al
c0017636:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001763b:	83 c4 1c             	add    esp,0x1c
c001763e:	c3                   	ret    

c001763f <findRSDP()>:
c001763f:	83 ec 1c             	sub    esp,0x1c
c0017642:	83 ec 0c             	sub    esp,0xc
c0017645:	68 51 c0 02 c0       	push   0xc002c051
c001764a:	e8 b8 b4 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001764f:	83 c4 10             	add    esp,0x10
c0017652:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0017657:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001765d:	83 e0 04             	and    eax,0x4
c0017660:	84 c0                	test   al,al
c0017662:	75 07                	jne    c001766b <findRSDP()+0x2c>
c0017664:	b8 00 00 00 00       	mov    eax,0x0
c0017669:	eb 6a                	jmp    c00176d5 <findRSDP()+0x96>
c001766b:	a1 f4 f1 02 c0       	mov    eax,ds:0xc002f1f4
c0017670:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017675:	7f 1b                	jg     c0017692 <findRSDP()+0x53>
c0017677:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001767c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017682:	83 e2 fb             	and    edx,0xfffffffb
c0017685:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001768b:	b8 00 00 00 00       	mov    eax,0x0
c0017690:	eb 43                	jmp    c00176d5 <findRSDP()+0x96>
c0017692:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001769a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00176a2:	77 2c                	ja     c00176d0 <findRSDP()+0x91>
c00176a4:	83 ec 04             	sub    esp,0x4
c00176a7:	6a 08                	push   0x8
c00176a9:	68 5f c0 02 c0       	push   0xc002c05f
c00176ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176b2:	e8 95 8f fe ff       	call   c000064c <memcmp>
c00176b7:	83 c4 10             	add    esp,0x10
c00176ba:	85 c0                	test   eax,eax
c00176bc:	0f 94 c0             	sete   al
c00176bf:	84 c0                	test   al,al
c00176c1:	74 06                	je     c00176c9 <findRSDP()+0x8a>
c00176c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176c7:	eb 0c                	jmp    c00176d5 <findRSDP()+0x96>
c00176c9:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00176ce:	eb ca                	jmp    c001769a <findRSDP()+0x5b>
c00176d0:	b8 00 00 00 00       	mov    eax,0x0
c00176d5:	83 c4 1c             	add    esp,0x1c
c00176d8:	c3                   	ret    

c00176d9 <loadACPITables(unsigned char*)>:
c00176d9:	57                   	push   edi
c00176da:	56                   	push   esi
c00176db:	53                   	push   ebx
c00176dc:	83 ec 60             	sub    esp,0x60
c00176df:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00176e4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00176ea:	83 e0 04             	and    eax,0x4
c00176ed:	84 c0                	test   al,al
c00176ef:	0f 84 33 02 00 00    	je     c0017928 <loadACPITables(unsigned char*)+0x24f>
c00176f5:	a0 80 1a 03 c0       	mov    al,ds:0xc0031a80
c00176fa:	84 c0                	test   al,al
c00176fc:	74 75                	je     c0017773 <loadACPITables(unsigned char*)+0x9a>
c00176fe:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017702:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017706:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001770a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001770d:	83 e8 24             	sub    eax,0x24
c0017710:	c1 e8 03             	shr    eax,0x3
c0017713:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017717:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001771f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017723:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017727:	0f 8d b2 00 00 00    	jge    c00177df <loadACPITables(unsigned char*)+0x106>
c001772d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017731:	83 c0 24             	add    eax,0x24
c0017734:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017738:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001773c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017740:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017744:	c1 e0 03             	shl    eax,0x3
c0017747:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001774b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001774f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017752:	8b 00                	mov    eax,DWORD PTR [eax]
c0017754:	89 c1                	mov    ecx,eax
c0017756:	a1 6c 18 03 c0       	mov    eax,ds:0xc003186c
c001775b:	8d 50 01             	lea    edx,[eax+0x1]
c001775e:	89 15 6c 18 03 c0    	mov    DWORD PTR ds:0xc003186c,edx
c0017764:	89 ca                	mov    edx,ecx
c0017766:	89 14 c5 84 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce77c],edx
c001776d:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017771:	eb ac                	jmp    c001771f <loadACPITables(unsigned char*)+0x46>
c0017773:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017777:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001777b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001777f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017782:	83 e8 24             	sub    eax,0x24
c0017785:	c1 e8 02             	shr    eax,0x2
c0017788:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001778c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017794:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017798:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001779c:	7d 41                	jge    c00177df <loadACPITables(unsigned char*)+0x106>
c001779e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00177a2:	83 c0 24             	add    eax,0x24
c00177a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00177a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177ad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177b1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00177b5:	c1 e0 02             	shl    eax,0x2
c00177b8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00177bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00177c2:	a1 6c 18 03 c0       	mov    eax,ds:0xc003186c
c00177c7:	8d 50 01             	lea    edx,[eax+0x1]
c00177ca:	89 15 6c 18 03 c0    	mov    DWORD PTR ds:0xc003186c,edx
c00177d0:	89 ca                	mov    edx,ecx
c00177d2:	89 14 c5 84 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce77c],edx
c00177d9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00177dd:	eb b5                	jmp    c0017794 <loadACPITables(unsigned char*)+0xbb>
c00177df:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00177e7:	a1 6c 18 03 c0       	mov    eax,ds:0xc003186c
c00177ec:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00177f0:	0f 8d 33 01 00 00    	jge    c0017929 <loadACPITables(unsigned char*)+0x250>
c00177f6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00177fa:	8b 04 c5 84 18 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce77c]
c0017801:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017805:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017809:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001780d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017811:	25 ff 0f 00 00       	and    eax,0xfff
c0017816:	89 c6                	mov    esi,eax
c0017818:	8b 1d 30 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f330
c001781e:	83 ec 0c             	sub    esp,0xc
c0017821:	6a 01                	push   0x1
c0017823:	e8 d9 9e ff ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c0017828:	83 c4 10             	add    esp,0x10
c001782b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001782f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017835:	83 ec 0c             	sub    esp,0xc
c0017838:	6a 01                	push   0x1
c001783a:	6a 01                	push   0x1
c001783c:	50                   	push   eax
c001783d:	52                   	push   edx
c001783e:	53                   	push   ebx
c001783f:	e8 ea a9 ff ff       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017844:	83 c4 20             	add    esp,0x20
c0017847:	09 f0                	or     eax,esi
c0017849:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001784d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017851:	c1 e0 03             	shl    eax,0x3
c0017854:	05 80 18 03 c0       	add    eax,0xc0031880
c0017859:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001785d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017861:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017865:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001786d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017871:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017875:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017879:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001787d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017881:	89 c6                	mov    esi,eax
c0017883:	89 d7                	mov    edi,edx
c0017885:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017887:	89 c8                	mov    eax,ecx
c0017889:	89 fa                	mov    edx,edi
c001788b:	89 f3                	mov    ebx,esi
c001788d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017891:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017895:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017899:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001789d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00178a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178a8:	05 00 10 00 00       	add    eax,0x1000
c00178ad:	c1 e8 0c             	shr    eax,0xc
c00178b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178c0:	25 ff 0f 00 00       	and    eax,0xfff
c00178c5:	89 c6                	mov    esi,eax
c00178c7:	8b 1d 30 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f330
c00178cd:	83 ec 0c             	sub    esp,0xc
c00178d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00178d4:	e8 28 9e ff ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c00178d9:	83 c4 10             	add    esp,0x10
c00178dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00178e0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00178e6:	83 ec 0c             	sub    esp,0xc
c00178e9:	6a 01                	push   0x1
c00178eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00178ef:	50                   	push   eax
c00178f0:	52                   	push   edx
c00178f1:	53                   	push   ebx
c00178f2:	e8 37 a9 ff ff       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00178f7:	83 c4 20             	add    esp,0x20
c00178fa:	09 f0                	or     eax,esi
c00178fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017904:	83 ec 0c             	sub    esp,0xc
c0017907:	50                   	push   eax
c0017908:	e8 b4 a2 ff ff       	call   c0011bc1 <Virt::freeKernelVirtualPages(unsigned long)>
c001790d:	83 c4 10             	add    esp,0x10
c0017910:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017914:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017918:	89 14 c5 84 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce77c],edx
c001791f:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017923:	e9 bf fe ff ff       	jmp    c00177e7 <loadACPITables(unsigned char*)+0x10e>
c0017928:	90                   	nop
c0017929:	83 c4 60             	add    esp,0x60
c001792c:	5b                   	pop    ebx
c001792d:	5e                   	pop    esi
c001792e:	5f                   	pop    edi
c001792f:	c3                   	ret    

c0017930 <findRSDT(unsigned char*)>:
c0017930:	57                   	push   edi
c0017931:	56                   	push   esi
c0017932:	53                   	push   ebx
c0017933:	83 ec 50             	sub    esp,0x50
c0017936:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001793b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017941:	83 e0 04             	and    eax,0x4
c0017944:	84 c0                	test   al,al
c0017946:	75 0a                	jne    c0017952 <findRSDT(unsigned char*)+0x22>
c0017948:	b8 00 00 00 00       	mov    eax,0x0
c001794d:	e9 21 01 00 00       	jmp    c0017a73 <findRSDT(unsigned char*)+0x143>
c0017952:	89 e0                	mov    eax,esp
c0017954:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017958:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001795c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017960:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017968:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001796c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017970:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017974:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017978:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001797c:	89 c6                	mov    esi,eax
c001797e:	89 d7                	mov    edi,edx
c0017980:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017982:	89 c8                	mov    eax,ecx
c0017984:	89 fa                	mov    edx,edi
c0017986:	89 f3                	mov    ebx,esi
c0017988:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001798c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017990:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017994:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017998:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001799c:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00179a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179ac:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00179b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00179b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00179bc:	25 ff 0f 00 00       	and    eax,0xfff
c00179c1:	89 c6                	mov    esi,eax
c00179c3:	8b 1d 30 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f330
c00179c9:	83 ec 0c             	sub    esp,0xc
c00179cc:	6a 02                	push   0x2
c00179ce:	e8 2e 9d ff ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c00179d3:	83 c4 10             	add    esp,0x10
c00179d6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00179da:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	6a 01                	push   0x1
c00179e5:	6a 02                	push   0x2
c00179e7:	50                   	push   eax
c00179e8:	52                   	push   edx
c00179e9:	53                   	push   ebx
c00179ea:	e8 3f a8 ff ff       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179ef:	83 c4 20             	add    esp,0x20
c00179f2:	09 f0                	or     eax,esi
c00179f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00179f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179fc:	25 ff 0f 00 00       	and    eax,0xfff
c0017a01:	89 c6                	mov    esi,eax
c0017a03:	8b 1d 30 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f330
c0017a09:	83 ec 0c             	sub    esp,0xc
c0017a0c:	6a 02                	push   0x2
c0017a0e:	e8 ee 9c ff ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c0017a13:	83 c4 10             	add    esp,0x10
c0017a16:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017a1a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a20:	83 ec 0c             	sub    esp,0xc
c0017a23:	6a 01                	push   0x1
c0017a25:	6a 02                	push   0x2
c0017a27:	50                   	push   eax
c0017a28:	52                   	push   edx
c0017a29:	53                   	push   ebx
c0017a2a:	e8 ff a7 ff ff       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a2f:	83 c4 20             	add    esp,0x20
c0017a32:	09 f0                	or     eax,esi
c0017a34:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017a38:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017a3d:	75 11                	jne    c0017a50 <findRSDT(unsigned char*)+0x120>
c0017a3f:	c6 05 80 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a80,0x0
c0017a46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a4a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a4e:	eb 1f                	jmp    c0017a6f <findRSDT(unsigned char*)+0x13f>
c0017a50:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017a55:	75 11                	jne    c0017a68 <findRSDT(unsigned char*)+0x138>
c0017a57:	c6 05 80 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a80,0x1
c0017a5e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a62:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a66:	eb 07                	jmp    c0017a6f <findRSDT(unsigned char*)+0x13f>
c0017a68:	b8 00 00 00 00       	mov    eax,0x0
c0017a6d:	eb 04                	jmp    c0017a73 <findRSDT(unsigned char*)+0x143>
c0017a6f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017a73:	83 c4 50             	add    esp,0x50
c0017a76:	5b                   	pop    ebx
c0017a77:	5e                   	pop    esi
c0017a78:	5f                   	pop    edi
c0017a79:	c3                   	ret    

c0017a7a <findDataTable(unsigned char*, char*)>:
c0017a7a:	83 ec 1c             	sub    esp,0x1c
c0017a7d:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0017a82:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a88:	83 e0 04             	and    eax,0x4
c0017a8b:	84 c0                	test   al,al
c0017a8d:	75 07                	jne    c0017a96 <findDataTable(unsigned char*, char*)+0x1c>
c0017a8f:	b8 00 00 00 00       	mov    eax,0x0
c0017a94:	eb 7c                	jmp    c0017b12 <findDataTable(unsigned char*, char*)+0x98>
c0017a96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a9e:	a1 6c 18 03 c0       	mov    eax,ds:0xc003186c
c0017aa3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017aa7:	7d 3a                	jge    c0017ae3 <findDataTable(unsigned char*, char*)+0x69>
c0017aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017aad:	c1 e0 03             	shl    eax,0x3
c0017ab0:	05 80 18 03 c0       	add    eax,0xc0031880
c0017ab5:	83 ec 04             	sub    esp,0x4
c0017ab8:	6a 04                	push   0x4
c0017aba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017abe:	50                   	push   eax
c0017abf:	e8 88 8b fe ff       	call   c000064c <memcmp>
c0017ac4:	83 c4 10             	add    esp,0x10
c0017ac7:	85 c0                	test   eax,eax
c0017ac9:	0f 94 c0             	sete   al
c0017acc:	84 c0                	test   al,al
c0017ace:	74 0d                	je     c0017add <findDataTable(unsigned char*, char*)+0x63>
c0017ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ad4:	8b 04 c5 84 18 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce77c]
c0017adb:	eb 35                	jmp    c0017b12 <findDataTable(unsigned char*, char*)+0x98>
c0017add:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ae1:	eb bb                	jmp    c0017a9e <findDataTable(unsigned char*, char*)+0x24>
c0017ae3:	a0 80 1a 03 c0       	mov    al,ds:0xc0031a80
c0017ae8:	84 c0                	test   al,al
c0017aea:	74 07                	je     c0017af3 <findDataTable(unsigned char*, char*)+0x79>
c0017aec:	b8 58 00 00 00       	mov    eax,0x58
c0017af1:	eb 05                	jmp    c0017af8 <findDataTable(unsigned char*, char*)+0x7e>
c0017af3:	b8 52 00 00 00       	mov    eax,0x52
c0017af8:	83 ec 04             	sub    esp,0x4
c0017afb:	50                   	push   eax
c0017afc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b00:	68 10 c2 02 c0       	push   0xc002c210
c0017b05:	e8 fd af ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0017b0a:	83 c4 10             	add    esp,0x10
c0017b0d:	b8 00 00 00 00       	mov    eax,0x0
c0017b12:	83 c4 1c             	add    esp,0x1c
c0017b15:	c3                   	ret    

c0017b16 <scanMADT()>:
c0017b16:	53                   	push   ebx
c0017b17:	83 ec 38             	sub    esp,0x38
c0017b1a:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0017b1f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b25:	83 e0 04             	and    eax,0x4
c0017b28:	84 c0                	test   al,al
c0017b2a:	0f 84 63 04 00 00    	je     c0017f93 <scanMADT()+0x47d>
c0017b30:	e8 0a fb ff ff       	call   c001763f <findRSDP()>
c0017b35:	a3 8c 1a 03 c0       	mov    ds:0xc0031a8c,eax
c0017b3a:	a1 8c 1a 03 c0       	mov    eax,ds:0xc0031a8c
c0017b3f:	85 c0                	test   eax,eax
c0017b41:	75 19                	jne    c0017b5c <scanMADT()+0x46>
c0017b43:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0017b48:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b4e:	83 e2 fb             	and    edx,0xfffffffb
c0017b51:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b57:	e9 3b 04 00 00       	jmp    c0017f97 <scanMADT()+0x481>
c0017b5c:	a1 8c 1a 03 c0       	mov    eax,ds:0xc0031a8c
c0017b61:	83 ec 0c             	sub    esp,0xc
c0017b64:	50                   	push   eax
c0017b65:	e8 c6 fd ff ff       	call   c0017930 <findRSDT(unsigned char*)>
c0017b6a:	83 c4 10             	add    esp,0x10
c0017b6d:	a3 88 1a 03 c0       	mov    ds:0xc0031a88,eax
c0017b72:	a1 88 1a 03 c0       	mov    eax,ds:0xc0031a88
c0017b77:	85 c0                	test   eax,eax
c0017b79:	75 19                	jne    c0017b94 <scanMADT()+0x7e>
c0017b7b:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0017b80:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b86:	83 e2 fb             	and    edx,0xfffffffb
c0017b89:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b8f:	e9 03 04 00 00       	jmp    c0017f97 <scanMADT()+0x481>
c0017b94:	a1 88 1a 03 c0       	mov    eax,ds:0xc0031a88
c0017b99:	83 ec 0c             	sub    esp,0xc
c0017b9c:	50                   	push   eax
c0017b9d:	e8 37 fb ff ff       	call   c00176d9 <loadACPITables(unsigned char*)>
c0017ba2:	83 c4 10             	add    esp,0x10
c0017ba5:	a1 88 1a 03 c0       	mov    eax,ds:0xc0031a88
c0017baa:	83 ec 08             	sub    esp,0x8
c0017bad:	68 68 c0 02 c0       	push   0xc002c068
c0017bb2:	50                   	push   eax
c0017bb3:	e8 c2 fe ff ff       	call   c0017a7a <findDataTable(unsigned char*, char*)>
c0017bb8:	83 c4 10             	add    esp,0x10
c0017bbb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017bbf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017bc4:	75 19                	jne    c0017bdf <scanMADT()+0xc9>
c0017bc6:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0017bcb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017bd1:	83 e2 fe             	and    edx,0xfffffffe
c0017bd4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017bda:	e9 b8 03 00 00       	jmp    c0017f97 <scanMADT()+0x481>
c0017bdf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017be7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017beb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bee:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017bf2:	0f 87 9f 03 00 00    	ja     c0017f97 <scanMADT()+0x481>
c0017bf8:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017c00:	0f 87 91 03 00 00    	ja     c0017f97 <scanMADT()+0x481>
c0017c06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c0a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c12:	8d 50 01             	lea    edx,[eax+0x1]
c0017c15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c1d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c21:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017c25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c29:	8d 50 01             	lea    edx,[eax+0x1]
c0017c2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c34:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c38:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017c3c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017c41:	0f 86 4f 03 00 00    	jbe    c0017f96 <scanMADT()+0x480>
c0017c47:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017c4c:	75 57                	jne    c0017ca5 <scanMADT()+0x18f>
c0017c4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c52:	8d 50 01             	lea    edx,[eax+0x1]
c0017c55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c59:	8a 15 80 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c80
c0017c5f:	0f b6 d2             	movzx  edx,dl
c0017c62:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c66:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c6a:	88 82 c0 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce340],al
c0017c70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c74:	8d 50 01             	lea    edx,[eax+0x1]
c0017c77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c7b:	8a 15 80 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c80
c0017c81:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c84:	88 0d 80 1c 03 c0    	mov    BYTE PTR ds:0xc0031c80,cl
c0017c8a:	0f b6 d2             	movzx  edx,dl
c0017c8d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c91:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c95:	88 82 a0 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce360],al
c0017c9b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ca0:	e9 da 02 00 00       	jmp    c0017f7f <scanMADT()+0x469>
c0017ca5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017caa:	0f 85 14 01 00 00    	jne    c0017dc4 <scanMADT()+0x2ae>
c0017cb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb4:	8d 50 01             	lea    edx,[eax+0x1]
c0017cb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cbb:	8a 15 40 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b40
c0017cc1:	0f b6 d2             	movzx  edx,dl
c0017cc4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017cc8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ccc:	88 82 60 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce4a0],al
c0017cd2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017cd6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cde:	01 d0                	add    eax,edx
c0017ce0:	83 c0 2c             	add    eax,0x2c
c0017ce3:	8a 00                	mov    al,BYTE PTR [eax]
c0017ce5:	0f b6 d0             	movzx  edx,al
c0017ce8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cec:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cf3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cf7:	0f b6 c0             	movzx  eax,al
c0017cfa:	c1 e0 08             	shl    eax,0x8
c0017cfd:	89 d1                	mov    ecx,edx
c0017cff:	09 c1                	or     ecx,eax
c0017d01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d05:	8d 50 02             	lea    edx,[eax+0x2]
c0017d08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d0c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d10:	0f b6 c0             	movzx  eax,al
c0017d13:	c1 e0 10             	shl    eax,0x10
c0017d16:	09 c1                	or     ecx,eax
c0017d18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d1c:	8d 50 03             	lea    edx,[eax+0x3]
c0017d1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d23:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d27:	0f b6 c0             	movzx  eax,al
c0017d2a:	c1 e0 18             	shl    eax,0x18
c0017d2d:	09 c1                	or     ecx,eax
c0017d2f:	89 ca                	mov    edx,ecx
c0017d31:	a0 40 1b 03 c0       	mov    al,ds:0xc0031b40
c0017d36:	0f b6 c0             	movzx  eax,al
c0017d39:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c0017d40:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d4d:	01 d0                	add    eax,edx
c0017d4f:	83 c0 2c             	add    eax,0x2c
c0017d52:	8a 00                	mov    al,BYTE PTR [eax]
c0017d54:	0f b6 d0             	movzx  edx,al
c0017d57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d62:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d66:	0f b6 c0             	movzx  eax,al
c0017d69:	c1 e0 08             	shl    eax,0x8
c0017d6c:	89 d1                	mov    ecx,edx
c0017d6e:	09 c1                	or     ecx,eax
c0017d70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d74:	8d 50 02             	lea    edx,[eax+0x2]
c0017d77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d7b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d7f:	0f b6 c0             	movzx  eax,al
c0017d82:	c1 e0 10             	shl    eax,0x10
c0017d85:	09 c1                	or     ecx,eax
c0017d87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d8b:	8d 50 03             	lea    edx,[eax+0x3]
c0017d8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d92:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d96:	0f b6 c0             	movzx  eax,al
c0017d99:	c1 e0 18             	shl    eax,0x18
c0017d9c:	09 c1                	or     ecx,eax
c0017d9e:	89 ca                	mov    edx,ecx
c0017da0:	a0 40 1b 03 c0       	mov    al,ds:0xc0031b40
c0017da5:	0f b6 c0             	movzx  eax,al
c0017da8:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c0017daf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017db4:	a0 40 1b 03 c0       	mov    al,ds:0xc0031b40
c0017db9:	40                   	inc    eax
c0017dba:	a2 40 1b 03 c0       	mov    ds:0xc0031b40,al
c0017dbf:	e9 bb 01 00 00       	jmp    c0017f7f <scanMADT()+0x469>
c0017dc4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017dc9:	0f 85 e9 00 00 00    	jne    c0017eb8 <scanMADT()+0x3a2>
c0017dcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dd3:	8d 50 01             	lea    edx,[eax+0x1]
c0017dd6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dde:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017de2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017de6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dea:	8d 50 01             	lea    edx,[eax+0x1]
c0017ded:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017df1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017df5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017df9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017dfd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e05:	01 d0                	add    eax,edx
c0017e07:	83 c0 2c             	add    eax,0x2c
c0017e0a:	8a 00                	mov    al,BYTE PTR [eax]
c0017e0c:	0f b6 d0             	movzx  edx,al
c0017e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e13:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e1a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e1e:	0f b6 c0             	movzx  eax,al
c0017e21:	c1 e0 08             	shl    eax,0x8
c0017e24:	89 d1                	mov    ecx,edx
c0017e26:	09 c1                	or     ecx,eax
c0017e28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2c:	8d 50 02             	lea    edx,[eax+0x2]
c0017e2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e33:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e37:	0f b6 c0             	movzx  eax,al
c0017e3a:	c1 e0 10             	shl    eax,0x10
c0017e3d:	09 c1                	or     ecx,eax
c0017e3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e43:	8d 50 03             	lea    edx,[eax+0x3]
c0017e46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e4a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e4e:	0f b6 c0             	movzx  eax,al
c0017e51:	c1 e0 18             	shl    eax,0x18
c0017e54:	09 c8                	or     eax,ecx
c0017e56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e5a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e67:	01 d0                	add    eax,edx
c0017e69:	83 c0 2c             	add    eax,0x2c
c0017e6c:	8a 00                	mov    al,BYTE PTR [eax]
c0017e6e:	0f b6 c0             	movzx  eax,al
c0017e71:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017e75:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e7c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017e80:	0f b6 d2             	movzx  edx,dl
c0017e83:	c1 e2 08             	shl    edx,0x8
c0017e86:	09 d0                	or     eax,edx
c0017e88:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017e8d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017e92:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017e97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e9b:	88 90 00 e4 02 c0    	mov    BYTE PTR [eax-0x3ffd1c00],dl
c0017ea1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017ea6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017eab:	66 89 84 12 20 1b 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce4e0],ax
c0017eb3:	e9 c7 00 00 00       	jmp    c0017f7f <scanMADT()+0x469>
c0017eb8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017ebd:	0f 85 b0 00 00 00    	jne    c0017f73 <scanMADT()+0x45d>
c0017ec3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec7:	8d 50 01             	lea    edx,[eax+0x1]
c0017eca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ece:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ed2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ed6:	0f b6 c0             	movzx  eax,al
c0017ed9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017edd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ee1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee5:	01 d0                	add    eax,edx
c0017ee7:	83 c0 2c             	add    eax,0x2c
c0017eea:	8a 00                	mov    al,BYTE PTR [eax]
c0017eec:	0f b6 d0             	movzx  edx,al
c0017eef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef3:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ef6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017efa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017efe:	0f b6 c0             	movzx  eax,al
c0017f01:	c1 e0 08             	shl    eax,0x8
c0017f04:	09 d0                	or     eax,edx
c0017f06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f0a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f13:	8d 50 01             	lea    edx,[eax+0x1]
c0017f16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f1e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f22:	0f b6 c0             	movzx  eax,al
c0017f25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f2d:	c1 e0 08             	shl    eax,0x8
c0017f30:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017f34:	89 c1                	mov    ecx,eax
c0017f36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f3a:	c1 e0 18             	shl    eax,0x18
c0017f3d:	89 c3                	mov    ebx,eax
c0017f3f:	a1 90 1a 03 c0       	mov    eax,ds:0xc0031a90
c0017f44:	8d 50 01             	lea    edx,[eax+0x1]
c0017f47:	89 15 90 1a 03 c0    	mov    DWORD PTR ds:0xc0031a90,edx
c0017f4d:	09 d9                	or     ecx,ebx
c0017f4f:	89 ca                	mov    edx,ecx
c0017f51:	89 14 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],edx
c0017f58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017f5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f64:	68 40 c2 02 c0       	push   0xc002c240
c0017f69:	e8 99 ab ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0017f6e:	83 c4 10             	add    esp,0x10
c0017f71:	eb 0c                	jmp    c0017f7f <scanMADT()+0x469>
c0017f73:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017f78:	75 05                	jne    c0017f7f <scanMADT()+0x469>
c0017f7a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017f7f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017f84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f88:	01 d0                	add    eax,edx
c0017f8a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017f8e:	e9 54 fc ff ff       	jmp    c0017be7 <scanMADT()+0xd1>
c0017f93:	90                   	nop
c0017f94:	eb 01                	jmp    c0017f97 <scanMADT()+0x481>
c0017f96:	90                   	nop
c0017f97:	83 c4 38             	add    esp,0x38
c0017f9a:	5b                   	pop    ebx
c0017f9b:	c3                   	ret    

c0017f9c <ACPI::ACPI()>:
c0017f9c:	83 ec 0c             	sub    esp,0xc
c0017f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa3:	83 ec 08             	sub    esp,0x8
c0017fa6:	68 6d c0 02 c0       	push   0xc002c06d
c0017fab:	50                   	push   eax
c0017fac:	e8 93 c1 ff ff       	call   c0014144 <Device::Device(char const*)>
c0017fb1:	83 c4 10             	add    esp,0x10
c0017fb4:	ba dc c2 02 c0       	mov    edx,0xc002c2dc
c0017fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fbd:	89 10                	mov    DWORD PTR [eax],edx
c0017fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fce:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fdc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fea:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017ffc:	e8 15 fb ff ff       	call   c0017b16 <scanMADT()>
c0018001:	90                   	nop
c0018002:	83 c4 0c             	add    esp,0xc
c0018005:	c3                   	ret    

c0018006 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018006:	83 ec 2c             	sub    esp,0x2c
c0018009:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001800d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018011:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018015:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018019:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001801e:	88 d0                	mov    al,dl
c0018020:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018024:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018029:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018031:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018035:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001803b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001803f:	0f 8d 97 00 00 00    	jge    c00180dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018045:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018049:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001804d:	83 c2 2a             	add    edx,0x2a
c0018050:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018054:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018059:	75 78                	jne    c00180d3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001805b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001805f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018063:	83 c2 2a             	add    edx,0x2a
c0018066:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001806a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001806e:	75 63                	jne    c00180d3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018070:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018075:	74 3a                	je     c00180b1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018077:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001807b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001807f:	83 c2 2a             	add    edx,0x2a
c0018082:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001808a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001808d:	39 c2                	cmp    edx,eax
c001808f:	74 10                	je     c00180a1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018091:	83 ec 0c             	sub    esp,0xc
c0018094:	68 7c c2 02 c0       	push   0xc002c27c
c0018099:	e8 f9 25 00 00       	call   c001a697 <Krnl::panic(char const*)>
c001809e:	83 c4 10             	add    esp,0x10
c00180a1:	83 ec 0c             	sub    esp,0xc
c00180a4:	68 72 c0 02 c0       	push   0xc002c072
c00180a9:	e8 e9 25 00 00       	call   c001a697 <Krnl::panic(char const*)>
c00180ae:	83 c4 10             	add    esp,0x10
c00180b1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00180b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180bd:	83 c2 2a             	add    edx,0x2a
c00180c0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00180c4:	8b 02                	mov    eax,DWORD PTR [edx]
c00180c6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00180c9:	89 01                	mov    DWORD PTR [ecx],eax
c00180cb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00180ce:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00180d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00180d7:	e9 55 ff ff ff       	jmp    c0018031 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00180dc:	90                   	nop
c00180dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e1:	83 c4 2c             	add    esp,0x2c
c00180e4:	c2 04 00             	ret    0x4
c00180e7:	90                   	nop

c00180e8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00180e8:	83 ec 1c             	sub    esp,0x1c
c00180eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180ef:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00180f3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00180f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00180fc:	88 c8                	mov    al,cl
c00180fe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018102:	88 d0                	mov    al,dl
c0018104:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001810c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018112:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018116:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018119:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001811d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018125:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001812b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001812f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018132:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018136:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001813b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001813f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018145:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018149:	8d 48 01             	lea    ecx,[eax+0x1]
c001814c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018150:	83 c2 2a             	add    edx,0x2a
c0018153:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001815b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018165:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018168:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001816c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018174:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001817a:	8d 50 01             	lea    edx,[eax+0x1]
c001817d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018181:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001818b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018191:	3d 00 02 00 00       	cmp    eax,0x200
c0018196:	75 10                	jne    c00181a8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018198:	83 ec 0c             	sub    esp,0xc
c001819b:	68 81 c0 02 c0       	push   0xc002c081
c00181a0:	e8 f2 24 00 00       	call   c001a697 <Krnl::panic(char const*)>
c00181a5:	83 c4 10             	add    esp,0x10
c00181a8:	90                   	nop
c00181a9:	83 c4 1c             	add    esp,0x1c
c00181ac:	c3                   	ret    
c00181ad:	90                   	nop

c00181ae <ACPI::setScreenBrightnessLevel(void*, int)>:
c00181ae:	b8 00 00 00 00       	mov    eax,0x0
c00181b3:	c3                   	ret    

c00181b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00181b4:	83 ec 1c             	sub    esp,0x1c
c00181b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181bb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00181be:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00181c2:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00181c7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00181cc:	83 ec 08             	sub    esp,0x8
c00181cf:	52                   	push   edx
c00181d0:	50                   	push   eax
c00181d1:	e8 cc 6c ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c00181d6:	83 c4 10             	add    esp,0x10
c00181d9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00181dd:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00181e2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00181e7:	83 ec 04             	sub    esp,0x4
c00181ea:	6a 01                	push   0x1
c00181ec:	52                   	push   edx
c00181ed:	50                   	push   eax
c00181ee:	e8 c5 6d ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00181f3:	83 c4 10             	add    esp,0x10
c00181f6:	90                   	nop
c00181f7:	83 c4 1c             	add    esp,0x1c
c00181fa:	c3                   	ret    
c00181fb:	90                   	nop

c00181fc <ACPI::sleep()>:
c00181fc:	83 ec 0c             	sub    esp,0xc
c00181ff:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c0018204:	85 c0                	test   eax,eax
c0018206:	74 07                	je     c001820f <ACPI::sleep()+0x13>
c0018208:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c001820d:	ff d0                	call   eax
c001820f:	90                   	nop
c0018210:	83 c4 0c             	add    esp,0xc
c0018213:	c3                   	ret    

c0018214 <ACPI::open(int, int, void*)>:
c0018214:	57                   	push   edi
c0018215:	56                   	push   esi
c0018216:	53                   	push   ebx
c0018217:	81 ec 70 01 00 00    	sub    esp,0x170
c001821d:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018224:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001822b:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018232:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018239:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001823e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018244:	83 e0 04             	and    eax,0x4
c0018247:	84 c0                	test   al,al
c0018249:	74 53                	je     c001829e <ACPI::open(int, int, void*)+0x8a>
c001824b:	a1 88 1a 03 c0       	mov    eax,ds:0xc0031a88
c0018250:	83 ec 08             	sub    esp,0x8
c0018253:	68 9e c0 02 c0       	push   0xc002c09e
c0018258:	50                   	push   eax
c0018259:	e8 1c f8 ff ff       	call   c0017a7a <findDataTable(unsigned char*, char*)>
c001825e:	83 c4 10             	add    esp,0x10
c0018261:	89 84 24 6c 01 00 00 	mov    DWORD PTR [esp+0x16c],eax
c0018268:	83 bc 24 6c 01 00 00 00 	cmp    DWORD PTR [esp+0x16c],0x0
c0018270:	74 2c                	je     c001829e <ACPI::open(int, int, void*)+0x8a>
c0018272:	83 ec 0c             	sub    esp,0xc
c0018275:	68 a3 c0 02 c0       	push   0xc002c0a3
c001827a:	e8 88 a8 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001827f:	83 c4 10             	add    esp,0x10
c0018282:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018289:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018290:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018297:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001829e:	c7 84 24 68 01 00 00 5f 0c 00 00 	mov    DWORD PTR [esp+0x168],0xc5f
c00182a9:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00182b0:	8a 00                	mov    al,BYTE PTR [eax]
c00182b2:	3c 01                	cmp    al,0x1
c00182b4:	75 2e                	jne    c00182e4 <ACPI::open(int, int, void*)+0xd0>
c00182b6:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00182bd:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00182c4:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00182cb:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00182d2:	83 ec 0c             	sub    esp,0xc
c00182d5:	68 b4 c0 02 c0       	push   0xc002c0b4
c00182da:	e8 28 a8 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00182df:	83 c4 10             	add    esp,0x10
c00182e2:	eb 2b                	jmp    c001830f <ACPI::open(int, int, void*)+0xfb>
c00182e4:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00182eb:	8a 00                	mov    al,BYTE PTR [eax]
c00182ed:	3c 02                	cmp    al,0x2
c00182ef:	75 1e                	jne    c001830f <ACPI::open(int, int, void*)+0xfb>
c00182f1:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00182f8:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00182ff:	83 ec 0c             	sub    esp,0xc
c0018302:	68 bc c0 02 c0       	push   0xc002c0bc
c0018307:	e8 fb a7 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001830c:	83 c4 10             	add    esp,0x10
c001830f:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018316:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001831c:	83 f0 01             	xor    eax,0x1
c001831f:	84 c0                	test   al,al
c0018321:	74 7c                	je     c001839f <ACPI::open(int, int, void*)+0x18b>
c0018323:	83 ec 0c             	sub    esp,0xc
c0018326:	68 c4 c0 02 c0       	push   0xc002c0c4
c001832b:	e8 d7 a7 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018330:	83 c4 10             	add    esp,0x10
c0018333:	e8 18 7e fe ff       	call   c0000150 <manualPCIProbe>
c0018338:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001833f:	83 bc 24 64 01 00 00 01 	cmp    DWORD PTR [esp+0x164],0x1
c0018347:	75 2e                	jne    c0018377 <ACPI::open(int, int, void*)+0x163>
c0018349:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018350:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018357:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001835e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018365:	83 ec 0c             	sub    esp,0xc
c0018368:	68 d2 c0 02 c0       	push   0xc002c0d2
c001836d:	e8 95 a7 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018372:	83 c4 10             	add    esp,0x10
c0018375:	eb 28                	jmp    c001839f <ACPI::open(int, int, void*)+0x18b>
c0018377:	83 bc 24 64 01 00 00 02 	cmp    DWORD PTR [esp+0x164],0x2
c001837f:	75 1e                	jne    c001839f <ACPI::open(int, int, void*)+0x18b>
c0018381:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018388:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001838f:	83 ec 0c             	sub    esp,0xc
c0018392:	68 dc c0 02 c0       	push   0xc002c0dc
c0018397:	e8 6b a7 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001839c:	83 c4 10             	add    esp,0x10
c001839f:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00183a6:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00183ac:	84 c0                	test   al,al
c00183ae:	74 16                	je     c00183c6 <ACPI::open(int, int, void*)+0x1b2>
c00183b0:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00183b7:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00183bd:	83 f0 01             	xor    eax,0x1
c00183c0:	0f b6 c0             	movzx  eax,al
c00183c3:	40                   	inc    eax
c00183c4:	eb 05                	jmp    c00183cb <ACPI::open(int, int, void*)+0x1b7>
c00183c6:	b8 00 00 00 00       	mov    eax,0x0
c00183cb:	83 ec 08             	sub    esp,0x8
c00183ce:	50                   	push   eax
c00183cf:	68 e6 c0 02 c0       	push   0xc002c0e6
c00183d4:	e8 2e a7 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00183d9:	83 c4 10             	add    esp,0x10
c00183dc:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00183e3:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00183e9:	84 c0                	test   al,al
c00183eb:	74 7c                	je     c0018469 <ACPI::open(int, int, void*)+0x255>
c00183ed:	c7 84 24 40 01 00 00 58 01 00 00 	mov    DWORD PTR [esp+0x140],0x158
c00183f8:	83 ec 0c             	sub    esp,0xc
c00183fb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018402:	e8 85 74 ff ff       	call   c000f88c <malloc>
c0018407:	83 c4 10             	add    esp,0x10
c001840a:	89 c3                	mov    ebx,eax
c001840c:	83 ec 0c             	sub    esp,0xc
c001840f:	53                   	push   ebx
c0018410:	e8 13 ac 00 00       	call   c0023028 <PCI::PCI()>
c0018415:	83 c4 10             	add    esp,0x10
c0018418:	89 9c 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],ebx
c001841f:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018426:	83 ec 08             	sub    esp,0x8
c0018429:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018430:	50                   	push   eax
c0018431:	e8 0a bb ff ff       	call   c0013f40 <Device::addChild(Device*)>
c0018436:	83 c4 10             	add    esp,0x10
c0018439:	8b 84 24 60 01 00 00 	mov    eax,DWORD PTR [esp+0x160]
c0018440:	8b 00                	mov    eax,DWORD PTR [eax]
c0018442:	83 c0 08             	add    eax,0x8
c0018445:	8b 00                	mov    eax,DWORD PTR [eax]
c0018447:	6a 00                	push   0x0
c0018449:	6a 00                	push   0x0
c001844b:	6a 00                	push   0x0
c001844d:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0018454:	ff d0                	call   eax
c0018456:	83 c4 10             	add    esp,0x10
c0018459:	83 ec 0c             	sub    esp,0xc
c001845c:	68 ef c0 02 c0       	push   0xc002c0ef
c0018461:	e8 a1 a6 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018466:	83 c4 10             	add    esp,0x10
c0018469:	83 ec 0c             	sub    esp,0xc
c001846c:	68 fa c0 02 c0       	push   0xc002c0fa
c0018471:	e8 7e 4b 00 00       	call   c001cff4 <Thr::loadKernelSymbolTable(char const*)>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	83 ec 04             	sub    esp,0x4
c001847c:	6a 0c                	push   0xc
c001847e:	68 18 c1 02 c0       	push   0xc002c118
c0018483:	68 29 c1 02 c0       	push   0xc002c129
c0018488:	e8 c0 2f 00 00       	call   c001b44d <Reg::readIntWithDefault(char*, char*, int)>
c001848d:	83 c4 10             	add    esp,0x10
c0018490:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018497:	83 ec 0c             	sub    esp,0xc
c001849a:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c00184a1:	e8 9a 94 ff ff       	call   c0011940 <Virt::setupPageSwapping(int)>
c00184a6:	83 c4 10             	add    esp,0x10
c00184a9:	8b 1d a8 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1a8
c00184af:	83 ec 08             	sub    esp,0x8
c00184b2:	6a 01                	push   0x1
c00184b4:	68 30 c1 02 c0       	push   0xc002c130
c00184b9:	e8 ad 55 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c00184be:	83 c4 10             	add    esp,0x10
c00184c1:	83 ec 08             	sub    esp,0x8
c00184c4:	53                   	push   ebx
c00184c5:	50                   	push   eax
c00184c6:	e8 cb 57 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c00184cb:	83 c4 10             	add    esp,0x10
c00184ce:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c00184d5:	83 ec 08             	sub    esp,0x8
c00184d8:	6a 12                	push   0x12
c00184da:	50                   	push   eax
c00184db:	e8 e4 bd ff ff       	call   c00142c4 <getDevicesOfType(DeviceType)>
c00184e0:	83 c4 0c             	add    esp,0xc
c00184e3:	83 ec 0c             	sub    esp,0xc
c00184e6:	8d 84 24 38 01 00 00 	lea    eax,[esp+0x138]
c00184ed:	50                   	push   eax
c00184ee:	e8 fd 11 01 00       	call   c00296f0 <LinkedList<Device>::isEmpty()>
c00184f3:	83 c4 10             	add    esp,0x10
c00184f6:	83 f0 01             	xor    eax,0x1
c00184f9:	84 c0                	test   al,al
c00184fb:	0f 84 c7 01 00 00    	je     c00186c8 <ACPI::open(int, int, void*)+0x4b4>
c0018501:	83 ec 0c             	sub    esp,0xc
c0018504:	8d 84 24 38 01 00 00 	lea    eax,[esp+0x138]
c001850b:	50                   	push   eax
c001850c:	e8 fb 11 01 00       	call   c002970c <LinkedList<Device>::getFirstElement()>
c0018511:	83 c4 10             	add    esp,0x10
c0018514:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001851b:	83 ec 0c             	sub    esp,0xc
c001851e:	8d 84 24 38 01 00 00 	lea    eax,[esp+0x138]
c0018525:	50                   	push   eax
c0018526:	e8 e9 11 01 00       	call   c0029714 <LinkedList<Device>::removeFirst()>
c001852b:	83 c4 10             	add    esp,0x10
c001852e:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018535:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001853c:	8b 84 24 54 01 00 00 	mov    eax,DWORD PTR [esp+0x154]
c0018543:	83 ec 0c             	sub    esp,0xc
c0018546:	50                   	push   eax
c0018547:	e8 f4 bc ff ff       	call   c0014240 <Device::getName()>
c001854c:	83 c4 10             	add    esp,0x10
c001854f:	83 ec 08             	sub    esp,0x8
c0018552:	50                   	push   eax
c0018553:	68 ac c2 02 c0       	push   0xc002c2ac
c0018558:	e8 aa a5 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001855d:	83 c4 10             	add    esp,0x10
c0018560:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018567:	8d 44 24 08          	lea    eax,[esp+0x8]
c001856b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018571:	ba 09 00 00 00       	mov    edx,0x9
c0018576:	fc                   	cld    
c0018577:	89 c7                	mov    edi,eax
c0018579:	89 de                	mov    esi,ebx
c001857b:	89 d1                	mov    ecx,edx
c001857d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001857f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018583:	0f b6 c0             	movzx  eax,al
c0018586:	83 ec 08             	sub    esp,0x8
c0018589:	50                   	push   eax
c001858a:	68 4b c1 02 c0       	push   0xc002c14b
c001858f:	e8 73 a5 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018594:	83 c4 10             	add    esp,0x10
c0018597:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001859b:	0f b6 c0             	movzx  eax,al
c001859e:	83 ec 08             	sub    esp,0x8
c00185a1:	50                   	push   eax
c00185a2:	68 5d c1 02 c0       	push   0xc002c15d
c00185a7:	e8 5b a5 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00185ac:	83 c4 10             	add    esp,0x10
c00185af:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00185b4:	0f b7 c0             	movzx  eax,ax
c00185b7:	83 ec 08             	sub    esp,0x8
c00185ba:	50                   	push   eax
c00185bb:	68 6f c1 02 c0       	push   0xc002c16f
c00185c0:	e8 42 a5 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00185c5:	83 c4 10             	add    esp,0x10
c00185c8:	83 ec 08             	sub    esp,0x8
c00185cb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00185cf:	50                   	push   eax
c00185d0:	83 ec 24             	sub    esp,0x24
c00185d3:	89 e0                	mov    eax,esp
c00185d5:	89 c3                	mov    ebx,eax
c00185d7:	8d 44 24 38          	lea    eax,[esp+0x38]
c00185db:	ba 09 00 00 00       	mov    edx,0x9
c00185e0:	89 df                	mov    edi,ebx
c00185e2:	89 c6                	mov    esi,eax
c00185e4:	89 d1                	mov    ecx,edx
c00185e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00185e8:	e8 c7 ad 00 00       	call   c00233b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00185ed:	83 c4 30             	add    esp,0x30
c00185f0:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c00185f7:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00185ff:	0f 84 de fe ff ff    	je     c00184e3 <ACPI::open(int, int, void*)+0x2cf>
c0018605:	83 ec 08             	sub    esp,0x8
c0018608:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001860f:	68 81 c1 02 c0       	push   0xc002c181
c0018614:	e8 ee a4 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018619:	83 c4 10             	add    esp,0x10
c001861c:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018627:	83 ec 0c             	sub    esp,0xc
c001862a:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018631:	e8 56 72 ff ff       	call   c000f88c <malloc>
c0018636:	83 c4 10             	add    esp,0x10
c0018639:	89 c3                	mov    ebx,eax
c001863b:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0018640:	83 ec 04             	sub    esp,0x4
c0018643:	50                   	push   eax
c0018644:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001864b:	53                   	push   ebx
c001864c:	e8 15 aa ff ff       	call   c0013066 <File::File(char const*, Process*)>
c0018651:	83 c4 10             	add    esp,0x10
c0018654:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001865b:	83 ec 0c             	sub    esp,0xc
c001865e:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018665:	e8 ce ac ff ff       	call   c0013338 <File::exists()>
c001866a:	83 c4 10             	add    esp,0x10
c001866d:	84 c0                	test   al,al
c001866f:	74 27                	je     c0018698 <ACPI::open(int, int, void*)+0x484>
c0018671:	83 ec 08             	sub    esp,0x8
c0018674:	6a 01                	push   0x1
c0018676:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001867d:	e8 e9 53 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c0018682:	83 c4 10             	add    esp,0x10
c0018685:	83 ec 08             	sub    esp,0x8
c0018688:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001868f:	50                   	push   eax
c0018690:	e8 01 56 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c0018695:	83 c4 10             	add    esp,0x10
c0018698:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00186a0:	0f 84 3d fe ff ff    	je     c00184e3 <ACPI::open(int, int, void*)+0x2cf>
c00186a6:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00186ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00186af:	83 c0 08             	add    eax,0x8
c00186b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b4:	83 ec 0c             	sub    esp,0xc
c00186b7:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00186be:	ff d0                	call   eax
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	e9 1b fe ff ff       	jmp    c00184e3 <ACPI::open(int, int, void*)+0x2cf>
c00186c8:	83 ec 0c             	sub    esp,0xc
c00186cb:	8d 84 24 38 01 00 00 	lea    eax,[esp+0x138]
c00186d2:	50                   	push   eax
c00186d3:	e8 16 10 01 00       	call   c00296ee <LinkedList<Device>::~LinkedList()>
c00186d8:	83 c4 10             	add    esp,0x10
c00186db:	8b 1d a8 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1a8
c00186e1:	83 ec 08             	sub    esp,0x8
c00186e4:	6a 01                	push   0x1
c00186e6:	68 8d c1 02 c0       	push   0xc002c18d
c00186eb:	e8 7b 53 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c00186f0:	83 c4 10             	add    esp,0x10
c00186f3:	83 ec 08             	sub    esp,0x8
c00186f6:	53                   	push   ebx
c00186f7:	50                   	push   eax
c00186f8:	e8 99 55 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c00186fd:	83 c4 10             	add    esp,0x10
c0018700:	8b 1d a8 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1a8
c0018706:	83 ec 08             	sub    esp,0x8
c0018709:	6a 01                	push   0x1
c001870b:	68 aa c1 02 c0       	push   0xc002c1aa
c0018710:	e8 56 53 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c0018715:	83 c4 10             	add    esp,0x10
c0018718:	83 ec 08             	sub    esp,0x8
c001871b:	53                   	push   ebx
c001871c:	50                   	push   eax
c001871d:	e8 74 55 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c0018722:	83 c4 10             	add    esp,0x10
c0018725:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001872a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018730:	83 e0 04             	and    eax,0x4
c0018733:	84 c0                	test   al,al
c0018735:	0f 84 fd 00 00 00    	je     c0018838 <ACPI::open(int, int, void*)+0x624>
c001873b:	c7 84 24 38 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x138],0x114
c0018746:	83 ec 0c             	sub    esp,0xc
c0018749:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0018750:	e8 37 71 ff ff       	call   c000f88c <malloc>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	89 c3                	mov    ebx,eax
c001875a:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001875f:	83 ec 04             	sub    esp,0x4
c0018762:	50                   	push   eax
c0018763:	68 c7 c1 02 c0       	push   0xc002c1c7
c0018768:	53                   	push   ebx
c0018769:	e8 f8 a8 ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001876e:	83 c4 10             	add    esp,0x10
c0018771:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018778:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018780:	74 1a                	je     c001879c <ACPI::open(int, int, void*)+0x588>
c0018782:	83 ec 0c             	sub    esp,0xc
c0018785:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001878c:	e8 a7 ab ff ff       	call   c0013338 <File::exists()>
c0018791:	83 c4 10             	add    esp,0x10
c0018794:	84 c0                	test   al,al
c0018796:	74 04                	je     c001879c <ACPI::open(int, int, void*)+0x588>
c0018798:	b0 01                	mov    al,0x1
c001879a:	eb 02                	jmp    c001879e <ACPI::open(int, int, void*)+0x58a>
c001879c:	b0 00                	mov    al,0x0
c001879e:	84 c0                	test   al,al
c00187a0:	74 25                	je     c00187c7 <ACPI::open(int, int, void*)+0x5b3>
c00187a2:	83 ec 08             	sub    esp,0x8
c00187a5:	6a 01                	push   0x1
c00187a7:	68 c7 c1 02 c0       	push   0xc002c1c7
c00187ac:	e8 ba 52 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c00187b1:	83 c4 10             	add    esp,0x10
c00187b4:	83 ec 08             	sub    esp,0x8
c00187b7:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00187be:	50                   	push   eax
c00187bf:	e8 d2 54 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c00187c4:	83 c4 10             	add    esp,0x10
c00187c7:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00187cf:	74 27                	je     c00187f8 <ACPI::open(int, int, void*)+0x5e4>
c00187d1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00187d9:	74 1d                	je     c00187f8 <ACPI::open(int, int, void*)+0x5e4>
c00187db:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00187e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00187e4:	83 c0 08             	add    eax,0x8
c00187e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00187e9:	83 ec 0c             	sub    esp,0xc
c00187ec:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00187f3:	ff d0                	call   eax
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	a1 88 1a 03 c0       	mov    eax,ds:0xc0031a88
c00187fd:	83 ec 08             	sub    esp,0x8
c0018800:	68 e4 c1 02 c0       	push   0xc002c1e4
c0018805:	50                   	push   eax
c0018806:	e8 6f f2 ff ff       	call   c0017a7a <findDataTable(unsigned char*, char*)>
c001880b:	83 c4 10             	add    esp,0x10
c001880e:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018815:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001881d:	74 19                	je     c0018838 <ACPI::open(int, int, void*)+0x624>
c001881f:	83 ec 08             	sub    esp,0x8
c0018822:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018829:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0018830:	e8 7f f9 ff ff       	call   c00181b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018835:	83 c4 10             	add    esp,0x10
c0018838:	b8 00 00 00 00       	mov    eax,0x0
c001883d:	81 c4 70 01 00 00    	add    esp,0x170
c0018843:	5b                   	pop    ebx
c0018844:	5e                   	pop    esi
c0018845:	5f                   	pop    edi
c0018846:	c3                   	ret    
c0018847:	90                   	nop

c0018848 <CPU::close(int, int, void*)>:
c0018848:	31 c0                	xor    eax,eax
c001884a:	c3                   	ret    
c001884b:	90                   	nop

c001884c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001884c:	55                   	push   ebp
c001884d:	57                   	push   edi
c001884e:	56                   	push   esi
c001884f:	53                   	push   ebx
c0018850:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018854:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018858:	89 ce                	mov    esi,ecx
c001885a:	89 d5                	mov    ebp,edx
c001885c:	80 f9 04             	cmp    cl,0x4
c001885f:	75 28                	jne    c0018889 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018861:	8d 42 f9             	lea    eax,[edx-0x7]
c0018864:	3c 03                	cmp    al,0x3
c0018866:	0f 86 63 01 00 00    	jbe    c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001886c:	80 fa 03             	cmp    dl,0x3
c001886f:	0f 84 5a 01 00 00    	je     c00189cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018875:	8d 7a f2             	lea    edi,[edx-0xe]
c0018878:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c001887d:	89 fb                	mov    ebx,edi
c001887f:	80 fb 01             	cmp    bl,0x1
c0018882:	77 4e                	ja     c00188d2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018884:	e9 52 01 00 00       	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018889:	80 f9 05             	cmp    cl,0x5
c001888c:	75 4d                	jne    c00188db <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001888e:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c0018893:	80 fa 03             	cmp    dl,0x3
c0018896:	0f 86 3f 01 00 00    	jbe    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889c:	8d 7a fa             	lea    edi,[edx-0x6]
c001889f:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c00188a4:	89 fb                	mov    ebx,edi
c00188a6:	80 fb 01             	cmp    bl,0x1
c00188a9:	0f 86 2c 01 00 00    	jbe    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188af:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c00188b4:	80 fa 08             	cmp    dl,0x8
c00188b7:	0f 84 1e 01 00 00    	je     c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bd:	89 d7                	mov    edi,edx
c00188bf:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c00188c4:	83 e7 fb             	and    edi,0xfffffffb
c00188c7:	89 fb                	mov    ebx,edi
c00188c9:	80 fb 09             	cmp    bl,0x9
c00188cc:	0f 84 09 01 00 00    	je     c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d2:	31 c0                	xor    eax,eax
c00188d4:	89 eb                	mov    ebx,ebp
c00188d6:	0f b6 fb             	movzx  edi,bl
c00188d9:	eb 30                	jmp    c001890b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188db:	31 c0                	xor    eax,eax
c00188dd:	80 f9 06             	cmp    cl,0x6
c00188e0:	75 f2                	jne    c00188d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188e2:	80 fa 0a             	cmp    dl,0xa
c00188e5:	77 ed                	ja     c00188d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188e7:	bf de 05 00 00       	mov    edi,0x5de
c00188ec:	0f a3 d7             	bt     edi,edx
c00188ef:	73 e3                	jae    c00188d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188f1:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c00188f6:	e9 e0 00 00 00       	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fb:	39 c7                	cmp    edi,eax
c00188fd:	0f 84 d3 00 00 00    	je     c00189d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018903:	40                   	inc    eax
c0018904:	3d d0 00 00 00       	cmp    eax,0xd0
c0018909:	74 09                	je     c0018914 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001890b:	89 f3                	mov    ebx,esi
c001890d:	80 fb 0f             	cmp    bl,0xf
c0018910:	75 f1                	jne    c0018903 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018912:	eb e7                	jmp    c00188fb <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018914:	80 f9 10             	cmp    cl,0x10
c0018917:	75 14                	jne    c001892d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018919:	8d 42 fc             	lea    eax,[edx-0x4]
c001891c:	83 e0 fb             	and    eax,0xfffffffb
c001891f:	3c 02                	cmp    al,0x2
c0018921:	76 34                	jbe    c0018957 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018923:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c0018928:	80 fa 02             	cmp    dl,0x2
c001892b:	eb 24                	jmp    c0018951 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001892d:	80 f9 11             	cmp    cl,0x11
c0018930:	75 13                	jne    c0018945 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018932:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c0018937:	80 fa 03             	cmp    dl,0x3
c001893a:	0f 85 9b 00 00 00    	jne    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018940:	e9 91 00 00 00       	jmp    c00189d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018945:	80 f9 12             	cmp    cl,0x12
c0018948:	75 14                	jne    c001895e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001894a:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c001894f:	fe ca                	dec    dl
c0018951:	0f 85 84 00 00 00    	jne    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018957:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c001895c:	eb 7d                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001895e:	80 f9 14             	cmp    cl,0x14
c0018961:	75 12                	jne    c0018975 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018963:	4a                   	dec    edx
c0018964:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c0018969:	80 fa 01             	cmp    dl,0x1
c001896c:	77 6d                	ja     c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001896e:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c0018973:	eb 66                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018975:	80 f9 15             	cmp    cl,0x15
c0018978:	75 31                	jne    c00189ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001897a:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c001897f:	80 fa 01             	cmp    dl,0x1
c0018982:	74 57                	je     c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018984:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c0018989:	80 fa 13             	cmp    dl,0x13
c001898c:	76 0c                	jbe    c001899a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001898e:	80 fa 30             	cmp    dl,0x30
c0018991:	75 48                	jne    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018993:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018998:	eb 41                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001899a:	b9 04 00 09 00       	mov    ecx,0x90004
c001899f:	0f a3 d1             	bt     ecx,edx
c00189a2:	73 37                	jae    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a4:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c00189a9:	eb 30                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ab:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c00189b0:	80 f9 16             	cmp    cl,0x16
c00189b3:	75 26                	jne    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b5:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c00189ba:	84 d2                	test   dl,dl
c00189bc:	74 1d                	je     c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189be:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c00189c3:	80 fa 30             	cmp    dl,0x30
c00189c6:	75 13                	jne    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c8:	b8 a0 e6 02 c0       	mov    eax,0xc002e6a0
c00189cd:	eb 0c                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189cf:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c00189d4:	eb 05                	jmp    c00189db <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189d6:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c00189db:	5b                   	pop    ebx
c00189dc:	5e                   	pop    esi
c00189dd:	5f                   	pop    edi
c00189de:	5d                   	pop    ebp
c00189df:	c3                   	ret    

c00189e0 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189e0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189e8:	80 f9 04             	cmp    cl,0x4
c00189eb:	75 6b                	jne    c0018a58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189ed:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c00189f2:	80 fa 01             	cmp    dl,0x1
c00189f5:	0f 86 92 02 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fb:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c0018a00:	80 fa 02             	cmp    dl,0x2
c0018a03:	0f 84 84 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a09:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018a0e:	80 fa 03             	cmp    dl,0x3
c0018a11:	0f 84 76 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a17:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018a1c:	80 fa 04             	cmp    dl,0x4
c0018a1f:	0f 84 68 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a25:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018a2a:	80 fa 05             	cmp    dl,0x5
c0018a2d:	0f 84 5a 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a33:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018a38:	80 fa 07             	cmp    dl,0x7
c0018a3b:	0f 84 4c 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a41:	83 ea 08             	sub    edx,0x8
c0018a44:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c0018a49:	80 fa 01             	cmp    dl,0x1
c0018a4c:	0f 87 3b 02 00 00    	ja     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a52:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018a57:	c3                   	ret    
c0018a58:	80 f9 05             	cmp    cl,0x5
c0018a5b:	75 45                	jne    c0018aa2 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a5d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a60:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c0018a65:	80 f9 02             	cmp    cl,0x2
c0018a68:	0f 86 1f 02 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6e:	80 fa 04             	cmp    dl,0x4
c0018a71:	0f 84 f3 01 00 00    	je     c0018c6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a77:	80 fa 07             	cmp    dl,0x7
c0018a7a:	0f 84 0d 02 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a80:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018a85:	80 fa 08             	cmp    dl,0x8
c0018a88:	0f 84 ff 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8e:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c0018a93:	80 fa 09             	cmp    dl,0x9
c0018a96:	0f 85 f1 01 00 00    	jne    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9c:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c0018aa1:	c3                   	ret    
c0018aa2:	80 f9 06             	cmp    cl,0x6
c0018aa5:	0f 85 85 01 00 00    	jne    c0018c30 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018aab:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c0018ab0:	80 fa 01             	cmp    dl,0x1
c0018ab3:	0f 84 d4 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab9:	8d 42 fb             	lea    eax,[edx-0x5]
c0018abc:	3c 01                	cmp    al,0x1
c0018abe:	0f 86 ac 01 00 00    	jbe    c0018c70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ac4:	80 fa 03             	cmp    dl,0x3
c0018ac7:	0f 84 a3 01 00 00    	je     c0018c70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018acd:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018ad0:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018ad5:	80 f9 01             	cmp    cl,0x1
c0018ad8:	0f 86 af 01 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ade:	80 fa 09             	cmp    dl,0x9
c0018ae1:	0f 84 8f 01 00 00    	je     c0018c76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018ae7:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018aea:	80 f9 01             	cmp    cl,0x1
c0018aed:	0f 86 9a 01 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af3:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018af8:	80 fa 0d             	cmp    dl,0xd
c0018afb:	0f 84 8c 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b01:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018b06:	80 fa 0e             	cmp    dl,0xe
c0018b09:	0f 84 7e 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0f:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018b14:	80 fa 0f             	cmp    dl,0xf
c0018b17:	0f 84 70 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1d:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018b22:	80 fa 15             	cmp    dl,0x15
c0018b25:	0f 84 62 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2b:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b2e:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018b33:	80 f9 01             	cmp    cl,0x1
c0018b36:	0f 86 51 01 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3c:	80 fa 1a             	cmp    dl,0x1a
c0018b3f:	0f 84 37 01 00 00    	je     c0018c7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b45:	80 fa 1c             	cmp    dl,0x1c
c0018b48:	0f 84 34 01 00 00    	je     c0018c82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b4e:	80 fa 1d             	cmp    dl,0x1d
c0018b51:	0f 84 36 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b57:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c0018b5c:	80 fa 25             	cmp    dl,0x25
c0018b5f:	0f 84 28 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b65:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b68:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018b6d:	80 f9 01             	cmp    cl,0x1
c0018b70:	0f 86 17 01 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b76:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018b7b:	80 fa 2a             	cmp    dl,0x2a
c0018b7e:	0f 84 09 01 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b84:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c0018b89:	80 fa 2c             	cmp    dl,0x2c
c0018b8c:	0f 84 fb 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b92:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018b97:	80 fa 2d             	cmp    dl,0x2d
c0018b9a:	0f 84 ed 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba0:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018ba5:	80 fa 2e             	cmp    dl,0x2e
c0018ba8:	0f 84 df 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bae:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c0018bb3:	80 fa 2f             	cmp    dl,0x2f
c0018bb6:	0f 84 d1 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbc:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018bbf:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018bc4:	80 f9 01             	cmp    cl,0x1
c0018bc7:	0f 86 c0 00 00 00    	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcd:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018bd2:	80 fa 37             	cmp    dl,0x37
c0018bd5:	0f 84 b2 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdb:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018be0:	80 fa 3a             	cmp    dl,0x3a
c0018be3:	0f 84 a4 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be9:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018bee:	80 fa 3c             	cmp    dl,0x3c
c0018bf1:	0f 84 96 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf7:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018bfc:	80 fa 3d             	cmp    dl,0x3d
c0018bff:	0f 84 88 00 00 00    	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c05:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018c0a:	80 fa 3e             	cmp    dl,0x3e
c0018c0d:	74 7e                	je     c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0f:	8d 42 bb             	lea    eax,[edx-0x45]
c0018c12:	3c 01                	cmp    al,0x1
c0018c14:	76 72                	jbe    c0018c88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c16:	80 fa 3f             	cmp    dl,0x3f
c0018c19:	74 6d                	je     c0018c88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c1b:	80 fa 4a             	cmp    dl,0x4a
c0018c1e:	74 0a                	je     c0018c2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c20:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c0018c25:	80 fa 4d             	cmp    dl,0x4d
c0018c28:	75 63                	jne    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c2a:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018c2f:	c3                   	ret    
c0018c30:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c0018c35:	80 f9 0b             	cmp    cl,0xb
c0018c38:	75 0a                	jne    c0018c44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c3a:	fe ca                	dec    dl
c0018c3c:	75 4f                	jne    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c3e:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c0018c43:	c3                   	ret    
c0018c44:	80 f9 0f             	cmp    cl,0xf
c0018c47:	75 44                	jne    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c49:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0018c4e:	80 fa 02             	cmp    dl,0x2
c0018c51:	76 3a                	jbe    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c53:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c56:	3c 01                	cmp    al,0x1
c0018c58:	76 0a                	jbe    c0018c64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c5a:	b8 f2 c5 02 c0       	mov    eax,0xc002c5f2
c0018c5f:	80 fa 06             	cmp    dl,0x6
c0018c62:	75 29                	jne    c0018c8d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c64:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c0018c69:	c3                   	ret    
c0018c6a:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018c6f:	c3                   	ret    
c0018c70:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c0018c75:	c3                   	ret    
c0018c76:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018c7b:	c3                   	ret    
c0018c7c:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018c81:	c3                   	ret    
c0018c82:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018c87:	c3                   	ret    
c0018c88:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018c8d:	c3                   	ret    

c0018c8e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c8e:	60                   	pusha  
c0018c8f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c9b:	9c                   	pushf  
c0018c9c:	fa                   	cli    
c0018c9d:	0f 09                	wbinvd 
c0018c9f:	0f 30                	wrmsr  
c0018ca1:	9d                   	popf   
c0018ca2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ca6:	89 02                	mov    DWORD PTR [edx],eax
c0018ca8:	61                   	popa   
c0018ca9:	c3                   	ret    

c0018caa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018caa:	60                   	pusha  
c0018cab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018caf:	9c                   	pushf  
c0018cb0:	fa                   	cli    
c0018cb1:	0f 09                	wbinvd 
c0018cb3:	31 c0                	xor    eax,eax
c0018cb5:	31 d2                	xor    edx,edx
c0018cb7:	0f 32                	rdmsr  
c0018cb9:	9d                   	popf   
c0018cba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cbe:	89 02                	mov    DWORD PTR [edx],eax
c0018cc0:	61                   	popa   
c0018cc1:	c3                   	ret    

c0018cc2 <CPU::AMD_K6_writeback(int, int, int)>:
c0018cc2:	56                   	push   esi
c0018cc3:	53                   	push   ebx
c0018cc4:	83 ec 10             	sub    esp,0x10
c0018cc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ccb:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018cd0:	75 5d                	jne    c0018d2f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cd2:	83 f8 08             	cmp    eax,0x8
c0018cd5:	75 09                	jne    c0018ce0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018cd7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018cdc:	7e 13                	jle    c0018cf1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cde:	eb 30                	jmp    c0018d10 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ce0:	83 f8 06             	cmp    eax,0x6
c0018ce3:	7c 4a                	jl     c0018d2f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ce5:	83 f8 07             	cmp    eax,0x7
c0018ce8:	7e 07                	jle    c0018cf1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cea:	83 f8 09             	cmp    eax,0x9
c0018ced:	74 21                	je     c0018d10 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cef:	eb 3e                	jmp    c0018d2f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cf1:	89 e6                	mov    esi,esp
c0018cf3:	8b 1d e8 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1e8
c0018cf9:	56                   	push   esi
c0018cfa:	c1 eb 15             	shr    ebx,0x15
c0018cfd:	68 82 00 00 c0       	push   0xc0000082
c0018d02:	83 e3 7e             	and    ebx,0x7e
c0018d05:	e8 a0 ff ff ff       	call   c0018caa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d0a:	56                   	push   esi
c0018d0b:	6a 00                	push   0x0
c0018d0d:	53                   	push   ebx
c0018d0e:	eb 12                	jmp    c0018d22 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018d10:	89 e3                	mov    ebx,esp
c0018d12:	53                   	push   ebx
c0018d13:	68 82 00 00 c0       	push   0xc0000082
c0018d18:	e8 8d ff ff ff       	call   c0018caa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d1d:	53                   	push   ebx
c0018d1e:	6a 00                	push   0x0
c0018d20:	6a 00                	push   0x0
c0018d22:	68 82 00 00 c0       	push   0xc0000082
c0018d27:	e8 62 ff ff ff       	call   c0018c8e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d2c:	83 c4 18             	add    esp,0x18
c0018d2f:	83 c4 10             	add    esp,0x10
c0018d32:	5b                   	pop    ebx
c0018d33:	5e                   	pop    esi
c0018d34:	c3                   	ret    
c0018d35:	90                   	nop

c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d36:	55                   	push   ebp
c0018d37:	57                   	push   edi
c0018d38:	56                   	push   esi
c0018d39:	53                   	push   ebx
c0018d3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d3e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d42:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d46:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d4a:	39 05 c0 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c0,eax
c0018d50:	75 23                	jne    c0018d75 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d52:	a1 ec 1c 03 c0       	mov    eax,ds:0xc0031cec
c0018d57:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d5b:	89 06                	mov    DWORD PTR [esi],eax
c0018d5d:	a1 e8 1c 03 c0       	mov    eax,ds:0xc0031ce8
c0018d62:	89 07                	mov    DWORD PTR [edi],eax
c0018d64:	a1 e4 1c 03 c0       	mov    eax,ds:0xc0031ce4
c0018d69:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d6c:	a1 e0 1c 03 c0       	mov    eax,ds:0xc0031ce0
c0018d71:	89 02                	mov    DWORD PTR [edx],eax
c0018d73:	eb 3f                	jmp    c0018db4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d75:	31 c9                	xor    ecx,ecx
c0018d77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d7b:	0f a2                	cpuid  
c0018d7d:	89 06                	mov    DWORD PTR [esi],eax
c0018d7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d85:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d88:	89 10                	mov    DWORD PTR [eax],edx
c0018d8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d8e:	a3 c0 e6 02 c0       	mov    ds:0xc002e6c0,eax
c0018d93:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d95:	a3 ec 1c 03 c0       	mov    ds:0xc0031cec,eax
c0018d9a:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d9c:	a3 e8 1c 03 c0       	mov    ds:0xc0031ce8,eax
c0018da1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018da4:	a3 e4 1c 03 c0       	mov    ds:0xc0031ce4,eax
c0018da9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0018daf:	a3 e0 1c 03 c0       	mov    ds:0xc0031ce0,eax
c0018db4:	5b                   	pop    ebx
c0018db5:	5e                   	pop    esi
c0018db6:	5f                   	pop    edi
c0018db7:	5d                   	pop    ebp
c0018db8:	c3                   	ret    
c0018db9:	90                   	nop

c0018dba <CPU::cpuidCheckEDX(unsigned int)>:
c0018dba:	83 ec 10             	sub    esp,0x10
c0018dbd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc1:	50                   	push   eax
c0018dc2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc6:	50                   	push   eax
c0018dc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dcb:	50                   	push   eax
c0018dcc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd0:	50                   	push   eax
c0018dd1:	6a 01                	push   0x1
c0018dd3:	e8 5e ff ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ddc:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018de0:	0f 95 c0             	setne  al
c0018de3:	83 c4 24             	add    esp,0x24
c0018de6:	c3                   	ret    
c0018de7:	90                   	nop

c0018de8 <CPU::cpuidCheckECX(unsigned int)>:
c0018de8:	83 ec 10             	sub    esp,0x10
c0018deb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018def:	50                   	push   eax
c0018df0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df4:	50                   	push   eax
c0018df5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df9:	50                   	push   eax
c0018dfa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dfe:	50                   	push   eax
c0018dff:	6a 01                	push   0x1
c0018e01:	e8 30 ff ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e0a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e0e:	0f 95 c0             	setne  al
c0018e11:	83 c4 24             	add    esp,0x24
c0018e14:	c3                   	ret    
c0018e15:	90                   	nop

c0018e16 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018e16:	83 ec 10             	sub    esp,0x10
c0018e19:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1d:	50                   	push   eax
c0018e1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e22:	50                   	push   eax
c0018e23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e27:	50                   	push   eax
c0018e28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e2c:	50                   	push   eax
c0018e2d:	6a 07                	push   0x7
c0018e2f:	e8 02 ff ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e38:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e3c:	0f 95 c0             	setne  al
c0018e3f:	83 c4 24             	add    esp,0x24
c0018e42:	c3                   	ret    
c0018e43:	90                   	nop

c0018e44 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e44:	83 ec 10             	sub    esp,0x10
c0018e47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e4b:	50                   	push   eax
c0018e4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e50:	50                   	push   eax
c0018e51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e55:	50                   	push   eax
c0018e56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e5a:	50                   	push   eax
c0018e5b:	6a 07                	push   0x7
c0018e5d:	e8 d4 fe ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e66:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e6a:	0f 95 c0             	setne  al
c0018e6d:	83 c4 24             	add    esp,0x24
c0018e70:	c3                   	ret    
c0018e71:	90                   	nop

c0018e72 <CPU::CPU()>:
c0018e72:	83 ec 0c             	sub    esp,0xc
c0018e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e79:	83 ec 08             	sub    esp,0x8
c0018e7c:	68 f2 c5 02 c0       	push   0xc002c5f2
c0018e81:	50                   	push   eax
c0018e82:	e8 bd b2 ff ff       	call   c0014144 <Device::Device(char const*)>
c0018e87:	83 c4 10             	add    esp,0x10
c0018e8a:	ba cc c6 02 c0       	mov    edx,0xc002c6cc
c0018e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e93:	89 10                	mov    DWORD PTR [eax],edx
c0018e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e99:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ea7:	05 78 01 00 00       	add    eax,0x178
c0018eac:	83 ec 0c             	sub    esp,0xc
c0018eaf:	50                   	push   eax
c0018eb0:	e8 ed 61 ff ff       	call   c000f0a2 <GDT::GDT()>
c0018eb5:	83 c4 10             	add    esp,0x10
c0018eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ebc:	05 7c 09 00 00       	add    eax,0x97c
c0018ec1:	83 ec 0c             	sub    esp,0xc
c0018ec4:	50                   	push   eax
c0018ec5:	e8 42 64 ff ff       	call   c000f30c <IDT::IDT()>
c0018eca:	83 c4 10             	add    esp,0x10
c0018ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ed1:	05 7c 11 00 00       	add    eax,0x117c
c0018ed6:	83 ec 0c             	sub    esp,0xc
c0018ed9:	50                   	push   eax
c0018eda:	e8 53 81 ff ff       	call   c0011032 <TSS::TSS()>
c0018edf:	83 c4 10             	add    esp,0x10
c0018ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ee6:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ef1:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018efb:	90                   	nop
c0018efc:	83 c4 0c             	add    esp,0xc
c0018eff:	c3                   	ret    

c0018f00 <CPU::displayFeatures()>:
c0018f00:	53                   	push   ebx
c0018f01:	83 ec 10             	sub    esp,0x10
c0018f04:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018f08:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018f0e:	68 00 c3 02 c0       	push   0xc002c300
c0018f13:	e8 ef 9b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018f18:	59                   	pop    ecx
c0018f19:	58                   	pop    eax
c0018f1a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f20:	50                   	push   eax
c0018f21:	68 11 c3 02 c0       	push   0xc002c311
c0018f26:	e8 dc 9b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018f2b:	58                   	pop    eax
c0018f2c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f32:	5a                   	pop    edx
c0018f33:	c1 e8 0e             	shr    eax,0xe
c0018f36:	0f b6 c0             	movzx  eax,al
c0018f39:	50                   	push   eax
c0018f3a:	68 22 c3 02 c0       	push   0xc002c322
c0018f3f:	e8 c3 9b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018f44:	59                   	pop    ecx
c0018f45:	58                   	pop    eax
c0018f46:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f4c:	66 c1 e8 06          	shr    ax,0x6
c0018f50:	0f b6 c0             	movzx  eax,al
c0018f53:	50                   	push   eax
c0018f54:	68 33 c3 02 c0       	push   0xc002c333
c0018f59:	e8 a9 9b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018f5e:	c7 04 24 e0 c7 02 c0 	mov    DWORD PTR [esp],0xc002c7e0
c0018f65:	e8 9d 9b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018f6a:	83 c4 10             	add    esp,0x10
c0018f6d:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0018f72:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f79:	74 05                	je     c0018f80 <CPU::displayFeatures()+0x80>
c0018f7b:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0018f80:	52                   	push   edx
c0018f81:	52                   	push   edx
c0018f82:	50                   	push   eax
c0018f83:	68 44 c3 02 c0       	push   0xc002c344
c0018f88:	e8 7a 9b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018f8d:	83 c4 10             	add    esp,0x10
c0018f90:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0018f95:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f9c:	78 05                	js     c0018fa3 <CPU::displayFeatures()+0xa3>
c0018f9e:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0018fa3:	51                   	push   ecx
c0018fa4:	51                   	push   ecx
c0018fa5:	50                   	push   eax
c0018fa6:	68 5b c3 02 c0       	push   0xc002c35b
c0018fab:	e8 57 9b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018fb0:	83 c4 10             	add    esp,0x10
c0018fb3:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0018fb8:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018fbf:	75 05                	jne    c0018fc6 <CPU::displayFeatures()+0xc6>
c0018fc1:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0018fc6:	52                   	push   edx
c0018fc7:	52                   	push   edx
c0018fc8:	50                   	push   eax
c0018fc9:	68 72 c3 02 c0       	push   0xc002c372
c0018fce:	e8 34 9b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018fd3:	83 c4 10             	add    esp,0x10
c0018fd6:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0018fdb:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018fe2:	75 05                	jne    c0018fe9 <CPU::displayFeatures()+0xe9>
c0018fe4:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0018fe9:	51                   	push   ecx
c0018fea:	51                   	push   ecx
c0018feb:	50                   	push   eax
c0018fec:	68 89 c3 02 c0       	push   0xc002c389
c0018ff1:	e8 11 9b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0018ff6:	83 c4 10             	add    esp,0x10
c0018ff9:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0018ffe:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019005:	75 05                	jne    c001900c <CPU::displayFeatures()+0x10c>
c0019007:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c001900c:	52                   	push   edx
c001900d:	52                   	push   edx
c001900e:	50                   	push   eax
c001900f:	68 a0 c3 02 c0       	push   0xc002c3a0
c0019014:	e8 ee 9a ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0019019:	83 c4 10             	add    esp,0x10
c001901c:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019021:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019028:	75 05                	jne    c001902f <CPU::displayFeatures()+0x12f>
c001902a:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c001902f:	51                   	push   ecx
c0019030:	51                   	push   ecx
c0019031:	50                   	push   eax
c0019032:	68 b7 c3 02 c0       	push   0xc002c3b7
c0019037:	e8 cb 9a ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001903c:	83 c4 10             	add    esp,0x10
c001903f:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019044:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001904b:	75 05                	jne    c0019052 <CPU::displayFeatures()+0x152>
c001904d:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019052:	52                   	push   edx
c0019053:	52                   	push   edx
c0019054:	50                   	push   eax
c0019055:	68 ce c3 02 c0       	push   0xc002c3ce
c001905a:	e8 a8 9a ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001905f:	83 c4 10             	add    esp,0x10
c0019062:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019067:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001906e:	75 05                	jne    c0019075 <CPU::displayFeatures()+0x175>
c0019070:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019075:	51                   	push   ecx
c0019076:	51                   	push   ecx
c0019077:	50                   	push   eax
c0019078:	68 e5 c3 02 c0       	push   0xc002c3e5
c001907d:	e8 85 9a ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0019082:	83 c4 10             	add    esp,0x10
c0019085:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c001908a:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019091:	75 05                	jne    c0019098 <CPU::displayFeatures()+0x198>
c0019093:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019098:	52                   	push   edx
c0019099:	52                   	push   edx
c001909a:	50                   	push   eax
c001909b:	68 fc c3 02 c0       	push   0xc002c3fc
c00190a0:	e8 62 9a ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00190a5:	83 c4 10             	add    esp,0x10
c00190a8:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00190ad:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00190b4:	75 05                	jne    c00190bb <CPU::displayFeatures()+0x1bb>
c00190b6:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c00190bb:	51                   	push   ecx
c00190bc:	51                   	push   ecx
c00190bd:	50                   	push   eax
c00190be:	68 13 c4 02 c0       	push   0xc002c413
c00190c3:	e8 3f 9a ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00190c8:	83 c4 10             	add    esp,0x10
c00190cb:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00190d0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190d7:	75 05                	jne    c00190de <CPU::displayFeatures()+0x1de>
c00190d9:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c00190de:	52                   	push   edx
c00190df:	52                   	push   edx
c00190e0:	50                   	push   eax
c00190e1:	68 2a c4 02 c0       	push   0xc002c42a
c00190e6:	e8 1c 9a ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00190eb:	83 c4 10             	add    esp,0x10
c00190ee:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00190f3:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190fa:	75 05                	jne    c0019101 <CPU::displayFeatures()+0x201>
c00190fc:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019101:	51                   	push   ecx
c0019102:	51                   	push   ecx
c0019103:	50                   	push   eax
c0019104:	68 41 c4 02 c0       	push   0xc002c441
c0019109:	e8 f9 99 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001910e:	83 c4 10             	add    esp,0x10
c0019111:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019116:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001911d:	75 05                	jne    c0019124 <CPU::displayFeatures()+0x224>
c001911f:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019124:	52                   	push   edx
c0019125:	52                   	push   edx
c0019126:	50                   	push   eax
c0019127:	68 58 c4 02 c0       	push   0xc002c458
c001912c:	e8 d6 99 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0019131:	83 c4 10             	add    esp,0x10
c0019134:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019139:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019140:	78 05                	js     c0019147 <CPU::displayFeatures()+0x247>
c0019142:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019147:	51                   	push   ecx
c0019148:	51                   	push   ecx
c0019149:	50                   	push   eax
c001914a:	68 6f c4 02 c0       	push   0xc002c46f
c001914f:	e8 b3 99 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0019154:	83 c4 10             	add    esp,0x10
c0019157:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c001915c:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019163:	75 05                	jne    c001916a <CPU::displayFeatures()+0x26a>
c0019165:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c001916a:	52                   	push   edx
c001916b:	52                   	push   edx
c001916c:	50                   	push   eax
c001916d:	68 86 c4 02 c0       	push   0xc002c486
c0019172:	e8 90 99 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0019177:	83 c4 18             	add    esp,0x18
c001917a:	5b                   	pop    ebx
c001917b:	c3                   	ret    

c001917c <CPU::detectFeatures()>:
c001917c:	55                   	push   ebp
c001917d:	57                   	push   edi
c001917e:	56                   	push   esi
c001917f:	53                   	push   ebx
c0019180:	83 ec 50             	sub    esp,0x50
c0019183:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019187:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019191:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019198:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001919e:	6a 0d                	push   0xd
c00191a0:	6a 00                	push   0x0
c00191a2:	55                   	push   ebp
c00191a3:	e8 a8 75 fe ff       	call   c0000750 <memset>
c00191a8:	83 c4 10             	add    esp,0x10
c00191ab:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c00191b0:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00191b7:	0f 84 22 09 00 00    	je     c0019adf <CPU::detectFeatures()+0x963>
c00191bd:	83 ec 0c             	sub    esp,0xc
c00191c0:	89 ef                	mov    edi,ebp
c00191c2:	6a 10                	push   0x10
c00191c4:	e8 f1 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c00191c9:	83 e0 01             	and    eax,0x1
c00191cc:	8d 14 00             	lea    edx,[eax+eax*1]
c00191cf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191d5:	83 e0 fd             	and    eax,0xfffffffd
c00191d8:	09 d0                	or     eax,edx
c00191da:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191e0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191e7:	e8 ce fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c00191ec:	83 e0 01             	and    eax,0x1
c00191ef:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191f6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191fc:	83 e0 fb             	and    eax,0xfffffffb
c00191ff:	09 d0                	or     eax,edx
c0019201:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019207:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001920e:	e8 a7 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c0019213:	83 e0 01             	and    eax,0x1
c0019216:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001921d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019223:	83 e0 f7             	and    eax,0xfffffff7
c0019226:	09 d0                	or     eax,edx
c0019228:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001922e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019235:	e8 80 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c001923a:	83 e0 01             	and    eax,0x1
c001923d:	c1 e0 04             	shl    eax,0x4
c0019240:	88 c2                	mov    dl,al
c0019242:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019248:	83 e0 ef             	and    eax,0xffffffef
c001924b:	09 d0                	or     eax,edx
c001924d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019253:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001925a:	e8 5b fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c001925f:	83 e0 01             	and    eax,0x1
c0019262:	c1 e0 05             	shl    eax,0x5
c0019265:	88 c2                	mov    dl,al
c0019267:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001926d:	83 e0 df             	and    eax,0xffffffdf
c0019270:	09 d0                	or     eax,edx
c0019272:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019278:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001927f:	e8 36 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c0019284:	83 e0 01             	and    eax,0x1
c0019287:	8d 14 00             	lea    edx,[eax+eax*1]
c001928a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019290:	83 e0 fd             	and    eax,0xfffffffd
c0019293:	09 d0                	or     eax,edx
c0019295:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001929b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00192a2:	e8 13 fb ff ff       	call   c0018dba <CPU::cpuidCheckEDX(unsigned int)>
c00192a7:	83 e0 01             	and    eax,0x1
c00192aa:	c1 e0 06             	shl    eax,0x6
c00192ad:	88 c2                	mov    dl,al
c00192af:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192b5:	83 e0 bf             	and    eax,0xffffffbf
c00192b8:	09 d0                	or     eax,edx
c00192ba:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192c0:	58                   	pop    eax
c00192c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192c5:	50                   	push   eax
c00192c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192ca:	50                   	push   eax
c00192cb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192cf:	56                   	push   esi
c00192d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192d4:	50                   	push   eax
c00192d5:	6a 00                	push   0x0
c00192d7:	e8 5a fa ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192dc:	b8 04 00 00 00       	mov    eax,0x4
c00192e1:	89 c1                	mov    ecx,eax
c00192e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192e5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00192eb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00192ef:	89 c1                	mov    ecx,eax
c00192f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192f3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00192f9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00192fd:	89 c1                	mov    ecx,eax
c00192ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019301:	83 c4 18             	add    esp,0x18
c0019304:	68 9d c4 02 c0       	push   0xc002c49d
c0019309:	55                   	push   ebp
c001930a:	e8 89 75 fe ff       	call   c0000898 <strcmp>
c001930f:	83 c4 10             	add    esp,0x10
c0019312:	85 c0                	test   eax,eax
c0019314:	75 0f                	jne    c0019325 <CPU::detectFeatures()+0x1a9>
c0019316:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019320:	e9 22 02 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c0019325:	50                   	push   eax
c0019326:	50                   	push   eax
c0019327:	68 aa c4 02 c0       	push   0xc002c4aa
c001932c:	55                   	push   ebp
c001932d:	e8 66 75 fe ff       	call   c0000898 <strcmp>
c0019332:	83 c4 10             	add    esp,0x10
c0019335:	85 c0                	test   eax,eax
c0019337:	74 dd                	je     c0019316 <CPU::detectFeatures()+0x19a>
c0019339:	50                   	push   eax
c001933a:	50                   	push   eax
c001933b:	68 b7 c4 02 c0       	push   0xc002c4b7
c0019340:	55                   	push   ebp
c0019341:	e8 52 75 fe ff       	call   c0000898 <strcmp>
c0019346:	83 c4 10             	add    esp,0x10
c0019349:	85 c0                	test   eax,eax
c001934b:	74 2a                	je     c0019377 <CPU::detectFeatures()+0x1fb>
c001934d:	50                   	push   eax
c001934e:	50                   	push   eax
c001934f:	68 c4 c4 02 c0       	push   0xc002c4c4
c0019354:	55                   	push   ebp
c0019355:	e8 3e 75 fe ff       	call   c0000898 <strcmp>
c001935a:	83 c4 10             	add    esp,0x10
c001935d:	85 c0                	test   eax,eax
c001935f:	74 16                	je     c0019377 <CPU::detectFeatures()+0x1fb>
c0019361:	50                   	push   eax
c0019362:	50                   	push   eax
c0019363:	68 d1 c4 02 c0       	push   0xc002c4d1
c0019368:	55                   	push   ebp
c0019369:	e8 2a 75 fe ff       	call   c0000898 <strcmp>
c001936e:	83 c4 10             	add    esp,0x10
c0019371:	85 c0                	test   eax,eax
c0019373:	74 48                	je     c00193bd <CPU::detectFeatures()+0x241>
c0019375:	eb 0f                	jmp    c0019386 <CPU::detectFeatures()+0x20a>
c0019377:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019381:	e9 c1 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c0019386:	50                   	push   eax
c0019387:	50                   	push   eax
c0019388:	68 de c4 02 c0       	push   0xc002c4de
c001938d:	55                   	push   ebp
c001938e:	e8 05 75 fe ff       	call   c0000898 <strcmp>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	85 c0                	test   eax,eax
c0019398:	74 23                	je     c00193bd <CPU::detectFeatures()+0x241>
c001939a:	57                   	push   edi
c001939b:	57                   	push   edi
c001939c:	68 eb c4 02 c0       	push   0xc002c4eb
c00193a1:	55                   	push   ebp
c00193a2:	e8 f1 74 fe ff       	call   c0000898 <strcmp>
c00193a7:	83 c4 10             	add    esp,0x10
c00193aa:	85 c0                	test   eax,eax
c00193ac:	75 1e                	jne    c00193cc <CPU::detectFeatures()+0x250>
c00193ae:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193b8:	e9 8a 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c00193bd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00193c7:	e9 7b 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c00193cc:	56                   	push   esi
c00193cd:	56                   	push   esi
c00193ce:	68 f8 c4 02 c0       	push   0xc002c4f8
c00193d3:	55                   	push   ebp
c00193d4:	e8 bf 74 fe ff       	call   c0000898 <strcmp>
c00193d9:	83 c4 10             	add    esp,0x10
c00193dc:	85 c0                	test   eax,eax
c00193de:	75 0f                	jne    c00193ef <CPU::detectFeatures()+0x273>
c00193e0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193ea:	e9 58 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c00193ef:	51                   	push   ecx
c00193f0:	51                   	push   ecx
c00193f1:	68 b7 c4 02 c0       	push   0xc002c4b7
c00193f6:	55                   	push   ebp
c00193f7:	e8 9c 74 fe ff       	call   c0000898 <strcmp>
c00193fc:	83 c4 10             	add    esp,0x10
c00193ff:	85 c0                	test   eax,eax
c0019401:	75 0f                	jne    c0019412 <CPU::detectFeatures()+0x296>
c0019403:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001940d:	e9 35 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c0019412:	52                   	push   edx
c0019413:	52                   	push   edx
c0019414:	68 05 c5 02 c0       	push   0xc002c505
c0019419:	55                   	push   ebp
c001941a:	e8 79 74 fe ff       	call   c0000898 <strcmp>
c001941f:	83 c4 10             	add    esp,0x10
c0019422:	85 c0                	test   eax,eax
c0019424:	75 0f                	jne    c0019435 <CPU::detectFeatures()+0x2b9>
c0019426:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019430:	e9 12 01 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c0019435:	50                   	push   eax
c0019436:	50                   	push   eax
c0019437:	68 12 c5 02 c0       	push   0xc002c512
c001943c:	55                   	push   ebp
c001943d:	e8 56 74 fe ff       	call   c0000898 <strcmp>
c0019442:	83 c4 10             	add    esp,0x10
c0019445:	85 c0                	test   eax,eax
c0019447:	75 0f                	jne    c0019458 <CPU::detectFeatures()+0x2dc>
c0019449:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019453:	e9 ef 00 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c0019458:	50                   	push   eax
c0019459:	50                   	push   eax
c001945a:	68 1f c5 02 c0       	push   0xc002c51f
c001945f:	55                   	push   ebp
c0019460:	e8 33 74 fe ff       	call   c0000898 <strcmp>
c0019465:	83 c4 10             	add    esp,0x10
c0019468:	85 c0                	test   eax,eax
c001946a:	75 0f                	jne    c001947b <CPU::detectFeatures()+0x2ff>
c001946c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019476:	e9 cc 00 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c001947b:	50                   	push   eax
c001947c:	50                   	push   eax
c001947d:	68 2c c5 02 c0       	push   0xc002c52c
c0019482:	55                   	push   ebp
c0019483:	e8 10 74 fe ff       	call   c0000898 <strcmp>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	85 c0                	test   eax,eax
c001948d:	75 0f                	jne    c001949e <CPU::detectFeatures()+0x322>
c001948f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019499:	e9 a9 00 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c001949e:	50                   	push   eax
c001949f:	50                   	push   eax
c00194a0:	68 39 c5 02 c0       	push   0xc002c539
c00194a5:	55                   	push   ebp
c00194a6:	e8 ed 73 fe ff       	call   c0000898 <strcmp>
c00194ab:	83 c4 10             	add    esp,0x10
c00194ae:	85 c0                	test   eax,eax
c00194b0:	75 0f                	jne    c00194c1 <CPU::detectFeatures()+0x345>
c00194b2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00194bc:	e9 86 00 00 00       	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c00194c1:	50                   	push   eax
c00194c2:	50                   	push   eax
c00194c3:	68 46 c5 02 c0       	push   0xc002c546
c00194c8:	55                   	push   ebp
c00194c9:	e8 ca 73 fe ff       	call   c0000898 <strcmp>
c00194ce:	83 c4 10             	add    esp,0x10
c00194d1:	85 c0                	test   eax,eax
c00194d3:	75 0c                	jne    c00194e1 <CPU::detectFeatures()+0x365>
c00194d5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194df:	eb 66                	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c00194e1:	50                   	push   eax
c00194e2:	50                   	push   eax
c00194e3:	68 53 c5 02 c0       	push   0xc002c553
c00194e8:	55                   	push   ebp
c00194e9:	e8 aa 73 fe ff       	call   c0000898 <strcmp>
c00194ee:	83 c4 10             	add    esp,0x10
c00194f1:	85 c0                	test   eax,eax
c00194f3:	75 0c                	jne    c0019501 <CPU::detectFeatures()+0x385>
c00194f5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00194ff:	eb 46                	jmp    c0019547 <CPU::detectFeatures()+0x3cb>
c0019501:	57                   	push   edi
c0019502:	57                   	push   edi
c0019503:	68 60 c5 02 c0       	push   0xc002c560
c0019508:	55                   	push   ebp
c0019509:	e8 8a 73 fe ff       	call   c0000898 <strcmp>
c001950e:	83 c4 10             	add    esp,0x10
c0019511:	85 c0                	test   eax,eax
c0019513:	74 e0                	je     c00194f5 <CPU::detectFeatures()+0x379>
c0019515:	56                   	push   esi
c0019516:	56                   	push   esi
c0019517:	68 6d c5 02 c0       	push   0xc002c56d
c001951c:	55                   	push   ebp
c001951d:	e8 76 73 fe ff       	call   c0000898 <strcmp>
c0019522:	83 c4 10             	add    esp,0x10
c0019525:	85 c0                	test   eax,eax
c0019527:	74 cc                	je     c00194f5 <CPU::detectFeatures()+0x379>
c0019529:	51                   	push   ecx
c001952a:	51                   	push   ecx
c001952b:	68 7a c5 02 c0       	push   0xc002c57a
c0019530:	55                   	push   ebp
c0019531:	e8 62 73 fe ff       	call   c0000898 <strcmp>
c0019536:	83 c4 10             	add    esp,0x10
c0019539:	85 c0                	test   eax,eax
c001953b:	74 b8                	je     c00194f5 <CPU::detectFeatures()+0x379>
c001953d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019547:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001954c:	0f 86 be 00 00 00    	jbe    c0019610 <CPU::detectFeatures()+0x494>
c0019552:	83 ec 0c             	sub    esp,0xc
c0019555:	68 80 00 00 00       	push   0x80
c001955a:	e8 b7 f8 ff ff       	call   c0018e16 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001955f:	83 e0 01             	and    eax,0x1
c0019562:	c1 e0 06             	shl    eax,0x6
c0019565:	88 c2                	mov    dl,al
c0019567:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001956d:	83 e0 bf             	and    eax,0xffffffbf
c0019570:	09 d0                	or     eax,edx
c0019572:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019578:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001957f:	e8 92 f8 ff ff       	call   c0018e16 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019584:	83 e0 01             	and    eax,0x1
c0019587:	c1 e0 04             	shl    eax,0x4
c001958a:	88 c2                	mov    dl,al
c001958c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019592:	83 e0 ef             	and    eax,0xffffffef
c0019595:	09 d0                	or     eax,edx
c0019597:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001959d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00195a4:	e8 6d f8 ff ff       	call   c0018e16 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195a9:	c1 e0 07             	shl    eax,0x7
c00195ac:	88 c2                	mov    dl,al
c00195ae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195b4:	83 e0 7f             	and    eax,0x7f
c00195b7:	09 d0                	or     eax,edx
c00195b9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195bf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195c6:	e8 79 f8 ff ff       	call   c0018e44 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195cb:	83 e0 01             	and    eax,0x1
c00195ce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195d5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195db:	83 e0 f7             	and    eax,0xfffffff7
c00195de:	09 d0                	or     eax,edx
c00195e0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195e6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195ed:	e8 52 f8 ff ff       	call   c0018e44 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195f2:	83 c4 10             	add    esp,0x10
c00195f5:	83 e0 01             	and    eax,0x1
c00195f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00195ff:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019605:	83 e0 fb             	and    eax,0xfffffffb
c0019608:	09 d0                	or     eax,edx
c001960a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019610:	83 ec 0c             	sub    esp,0xc
c0019613:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019617:	50                   	push   eax
c0019618:	8d 44 24 28          	lea    eax,[esp+0x28]
c001961c:	50                   	push   eax
c001961d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019621:	56                   	push   esi
c0019622:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019626:	50                   	push   eax
c0019627:	6a 01                	push   0x1
c0019629:	e8 08 f7 ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001962e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019632:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019638:	88 ca                	mov    dl,cl
c001963a:	83 e0 f0             	and    eax,0xfffffff0
c001963d:	83 e2 0f             	and    edx,0xf
c0019640:	09 d0                	or     eax,edx
c0019642:	88 ca                	mov    dl,cl
c0019644:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001964a:	c0 ea 04             	shr    dl,0x4
c001964d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019651:	0f b6 c2             	movzx  eax,dl
c0019654:	83 c4 20             	add    esp,0x20
c0019657:	c1 e0 06             	shl    eax,0x6
c001965a:	89 c7                	mov    edi,eax
c001965c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019662:	66 25 3f c0          	and    ax,0xc03f
c0019666:	09 f8                	or     eax,edi
c0019668:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001966f:	89 c8                	mov    eax,ecx
c0019671:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019678:	c1 e8 08             	shr    eax,0x8
c001967b:	83 e5 3f             	and    ebp,0x3f
c001967e:	83 e0 0f             	and    eax,0xf
c0019681:	89 c7                	mov    edi,eax
c0019683:	c1 e7 06             	shl    edi,0x6
c0019686:	09 ef                	or     edi,ebp
c0019688:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001968f:	89 fa                	mov    edx,edi
c0019691:	83 e5 c0             	and    ebp,0xffffffc0
c0019694:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001969a:	88 c2                	mov    dl,al
c001969c:	c0 ea 02             	shr    dl,0x2
c001969f:	89 d7                	mov    edi,edx
c00196a1:	09 ef                	or     edi,ebp
c00196a3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196a9:	89 fa                	mov    edx,edi
c00196ab:	83 e5 cf             	and    ebp,0xffffffcf
c00196ae:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00196b4:	89 cf                	mov    edi,ecx
c00196b6:	c1 ef 0c             	shr    edi,0xc
c00196b9:	83 e7 03             	and    edi,0x3
c00196bc:	c1 e7 04             	shl    edi,0x4
c00196bf:	09 ef                	or     edi,ebp
c00196c1:	3c 06                	cmp    al,0x6
c00196c3:	89 fa                	mov    edx,edi
c00196c5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196cb:	74 04                	je     c00196d1 <CPU::detectFeatures()+0x555>
c00196cd:	3c 0f                	cmp    al,0xf
c00196cf:	75 5c                	jne    c001972d <CPU::detectFeatures()+0x5b1>
c00196d1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196d5:	89 cf                	mov    edi,ecx
c00196d7:	c1 ef 10             	shr    edi,0x10
c00196da:	c1 e7 04             	shl    edi,0x4
c00196dd:	09 fa                	or     edx,edi
c00196df:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00196e5:	0f b6 d2             	movzx  edx,dl
c00196e8:	66 81 e7 3f c0       	and    di,0xc03f
c00196ed:	c1 e2 06             	shl    edx,0x6
c00196f0:	09 fa                	or     edx,edi
c00196f2:	3c 0f                	cmp    al,0xf
c00196f4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196fb:	75 30                	jne    c001972d <CPU::detectFeatures()+0x5b1>
c00196fd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019703:	c1 e9 14             	shr    ecx,0x14
c0019706:	83 e0 3f             	and    eax,0x3f
c0019709:	83 c1 0f             	add    ecx,0xf
c001970c:	88 ca                	mov    dl,cl
c001970e:	c0 e9 02             	shr    cl,0x2
c0019711:	c1 e2 06             	shl    edx,0x6
c0019714:	09 d0                	or     eax,edx
c0019716:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001971c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019722:	83 e0 c0             	and    eax,0xffffffc0
c0019725:	09 c1                	or     ecx,eax
c0019727:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001972d:	83 ec 0c             	sub    esp,0xc
c0019730:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019737:	8d 44 24 28          	lea    eax,[esp+0x28]
c001973b:	50                   	push   eax
c001973c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019740:	55                   	push   ebp
c0019741:	56                   	push   esi
c0019742:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019746:	57                   	push   edi
c0019747:	68 00 00 00 80       	push   0x80000000
c001974c:	e8 e5 f5 ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019751:	83 c4 20             	add    esp,0x20
c0019754:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001975c:	76 22                	jbe    c0019780 <CPU::detectFeatures()+0x604>
c001975e:	83 ec 0c             	sub    esp,0xc
c0019761:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019765:	50                   	push   eax
c0019766:	55                   	push   ebp
c0019767:	56                   	push   esi
c0019768:	57                   	push   edi
c0019769:	68 01 00 00 80       	push   0x80000001
c001976e:	e8 c3 f5 ff ff       	call   c0018d36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019773:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001977d:	83 c4 20             	add    esp,0x20
c0019780:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019786:	83 f8 01             	cmp    eax,0x1
c0019789:	75 6f                	jne    c00197fa <CPU::detectFeatures()+0x67e>
c001978b:	51                   	push   ecx
c001978c:	51                   	push   ecx
c001978d:	68 86 c5 02 c0       	push   0xc002c586
c0019792:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019796:	56                   	push   esi
c0019797:	e8 70 70 fe ff       	call   c000080c <strcpy>
c001979c:	5f                   	pop    edi
c001979d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197a3:	5d                   	pop    ebp
c00197a4:	66 c1 e8 06          	shr    ax,0x6
c00197a8:	0f b6 c0             	movzx  eax,al
c00197ab:	50                   	push   eax
c00197ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197b2:	c1 e8 0e             	shr    eax,0xe
c00197b5:	0f b6 c0             	movzx  eax,al
c00197b8:	50                   	push   eax
c00197b9:	e8 22 f2 ff ff       	call   c00189e0 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00197be:	5a                   	pop    edx
c00197bf:	59                   	pop    ecx
c00197c0:	50                   	push   eax
c00197c1:	56                   	push   esi
c00197c2:	e8 85 71 fe ff       	call   c000094c <strcat>
c00197c7:	5f                   	pop    edi
c00197c8:	5d                   	pop    ebp
c00197c9:	56                   	push   esi
c00197ca:	53                   	push   ebx
c00197cb:	e8 66 a9 ff ff       	call   c0014136 <Device::setName(char const*)>
c00197d0:	58                   	pop    eax
c00197d1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197d7:	5a                   	pop    edx
c00197d8:	68 8d c5 02 c0       	push   0xc002c58d
c00197dd:	50                   	push   eax
c00197de:	e8 b5 70 fe ff       	call   c0000898 <strcmp>
c00197e3:	83 c4 10             	add    esp,0x10
c00197e6:	85 c0                	test   eax,eax
c00197e8:	0f 85 71 03 00 00    	jne    c0019b5f <CPU::detectFeatures()+0x9e3>
c00197ee:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197f5:	e9 65 03 00 00       	jmp    c0019b5f <CPU::detectFeatures()+0x9e3>
c00197fa:	83 f8 02             	cmp    eax,0x2
c00197fd:	0f 85 b5 00 00 00    	jne    c00198b8 <CPU::detectFeatures()+0x73c>
c0019803:	57                   	push   edi
c0019804:	57                   	push   edi
c0019805:	68 9f c5 02 c0       	push   0xc002c59f
c001980a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001980e:	56                   	push   esi
c001980f:	e8 f8 6f fe ff       	call   c000080c <strcpy>
c0019814:	5d                   	pop    ebp
c0019815:	58                   	pop    eax
c0019816:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001981c:	66 c1 e8 06          	shr    ax,0x6
c0019820:	0f b6 c0             	movzx  eax,al
c0019823:	50                   	push   eax
c0019824:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001982a:	c1 e8 0e             	shr    eax,0xe
c001982d:	0f b6 c0             	movzx  eax,al
c0019830:	50                   	push   eax
c0019831:	e8 16 f0 ff ff       	call   c001884c <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019836:	5a                   	pop    edx
c0019837:	59                   	pop    ecx
c0019838:	50                   	push   eax
c0019839:	56                   	push   esi
c001983a:	e8 0d 71 fe ff       	call   c000094c <strcat>
c001983f:	5f                   	pop    edi
c0019840:	5d                   	pop    ebp
c0019841:	56                   	push   esi
c0019842:	53                   	push   ebx
c0019843:	e8 ee a8 ff ff       	call   c0014136 <Device::setName(char const*)>
c0019848:	58                   	pop    eax
c0019849:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001984f:	5a                   	pop    edx
c0019850:	68 a4 c5 02 c0       	push   0xc002c5a4
c0019855:	50                   	push   eax
c0019856:	e8 3d 70 fe ff       	call   c0000898 <strcmp>
c001985b:	83 c4 10             	add    esp,0x10
c001985e:	85 c0                	test   eax,eax
c0019860:	75 20                	jne    c0019882 <CPU::detectFeatures()+0x706>
c0019862:	8b 15 a8 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1a8
c0019868:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001986e:	a8 01                	test   al,0x1
c0019870:	74 10                	je     c0019882 <CPU::detectFeatures()+0x706>
c0019872:	83 e0 fe             	and    eax,0xfffffffe
c0019875:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001987b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019882:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019888:	c1 e8 0e             	shr    eax,0xe
c001988b:	3c 05                	cmp    al,0x5
c001988d:	0f 85 cc 02 00 00    	jne    c0019b5f <CPU::detectFeatures()+0x9e3>
c0019893:	56                   	push   esi
c0019894:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001989a:	83 e0 0f             	and    eax,0xf
c001989d:	50                   	push   eax
c001989e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198a4:	66 c1 e8 06          	shr    ax,0x6
c00198a8:	0f b6 c0             	movzx  eax,al
c00198ab:	50                   	push   eax
c00198ac:	6a 05                	push   0x5
c00198ae:	e8 0f f4 ff ff       	call   c0018cc2 <CPU::AMD_K6_writeback(int, int, int)>
c00198b3:	e9 1f 02 00 00       	jmp    c0019ad7 <CPU::detectFeatures()+0x95b>
c00198b8:	8d 50 fd             	lea    edx,[eax-0x3]
c00198bb:	83 fa 01             	cmp    edx,0x1
c00198be:	76 09                	jbe    c00198c9 <CPU::detectFeatures()+0x74d>
c00198c0:	83 f8 06             	cmp    eax,0x6
c00198c3:	0f 85 91 01 00 00    	jne    c0019a5a <CPU::detectFeatures()+0x8de>
c00198c9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198cf:	c1 ea 0e             	shr    edx,0xe
c00198d2:	80 fa 05             	cmp    dl,0x5
c00198d5:	75 7b                	jne    c0019952 <CPU::detectFeatures()+0x7d6>
c00198d7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198dd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198e2:	66 81 fa 00 01       	cmp    dx,0x100
c00198e7:	75 0c                	jne    c00198f5 <CPU::detectFeatures()+0x779>
c00198e9:	51                   	push   ecx
c00198ea:	51                   	push   ecx
c00198eb:	68 ab c5 02 c0       	push   0xc002c5ab
c00198f0:	e9 dc 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c00198f5:	66 81 fa 00 02       	cmp    dx,0x200
c00198fa:	75 0c                	jne    c0019908 <CPU::detectFeatures()+0x78c>
c00198fc:	52                   	push   edx
c00198fd:	52                   	push   edx
c00198fe:	68 be c5 02 c0       	push   0xc002c5be
c0019903:	e9 c9 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019908:	66 81 fa 40 02       	cmp    dx,0x240
c001990d:	75 0c                	jne    c001991b <CPU::detectFeatures()+0x79f>
c001990f:	50                   	push   eax
c0019910:	50                   	push   eax
c0019911:	68 d0 c5 02 c0       	push   0xc002c5d0
c0019916:	e9 b6 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c001991b:	83 f8 06             	cmp    eax,0x6
c001991e:	75 0c                	jne    c001992c <CPU::detectFeatures()+0x7b0>
c0019920:	50                   	push   eax
c0019921:	50                   	push   eax
c0019922:	68 e2 c5 02 c0       	push   0xc002c5e2
c0019927:	e9 a5 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c001992c:	83 f8 04             	cmp    eax,0x4
c001992f:	75 0c                	jne    c001993d <CPU::detectFeatures()+0x7c1>
c0019931:	50                   	push   eax
c0019932:	50                   	push   eax
c0019933:	68 ee c5 02 c0       	push   0xc002c5ee
c0019938:	e9 94 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c001993d:	83 f8 03             	cmp    eax,0x3
c0019940:	0f 85 19 02 00 00    	jne    c0019b5f <CPU::detectFeatures()+0x9e3>
c0019946:	50                   	push   eax
c0019947:	50                   	push   eax
c0019948:	68 f6 c5 02 c0       	push   0xc002c5f6
c001994d:	e9 7f 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019952:	80 fa 06             	cmp    dl,0x6
c0019955:	0f 85 db 00 00 00    	jne    c0019a36 <CPU::detectFeatures()+0x8ba>
c001995b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019961:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019966:	66 81 fa 80 01       	cmp    dx,0x180
c001996b:	75 0c                	jne    c0019979 <CPU::detectFeatures()+0x7fd>
c001996d:	50                   	push   eax
c001996e:	50                   	push   eax
c001996f:	68 01 c6 02 c0       	push   0xc002c601
c0019974:	e9 58 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019979:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001997f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019984:	75 0c                	jne    c0019992 <CPU::detectFeatures()+0x816>
c0019986:	50                   	push   eax
c0019987:	50                   	push   eax
c0019988:	68 11 c6 02 c0       	push   0xc002c611
c001998d:	e9 3f 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019992:	66 81 fa 40 02       	cmp    dx,0x240
c0019997:	75 0c                	jne    c00199a5 <CPU::detectFeatures()+0x829>
c0019999:	55                   	push   ebp
c001999a:	55                   	push   ebp
c001999b:	68 18 c6 02 c0       	push   0xc002c618
c00199a0:	e9 2c 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c00199a5:	66 81 fa 80 02       	cmp    dx,0x280
c00199aa:	75 0c                	jne    c00199b8 <CPU::detectFeatures()+0x83c>
c00199ac:	57                   	push   edi
c00199ad:	57                   	push   edi
c00199ae:	68 21 c6 02 c0       	push   0xc002c621
c00199b3:	e9 19 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c00199b8:	66 81 fa 40 03       	cmp    dx,0x340
c00199bd:	74 ed                	je     c00199ac <CPU::detectFeatures()+0x830>
c00199bf:	66 81 fa c0 03       	cmp    dx,0x3c0
c00199c4:	75 0c                	jne    c00199d2 <CPU::detectFeatures()+0x856>
c00199c6:	56                   	push   esi
c00199c7:	56                   	push   esi
c00199c8:	68 28 c6 02 c0       	push   0xc002c628
c00199cd:	e9 ff 00 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c00199d2:	83 f8 06             	cmp    eax,0x6
c00199d5:	0f 84 45 ff ff ff    	je     c0019920 <CPU::detectFeatures()+0x7a4>
c00199db:	83 f8 04             	cmp    eax,0x4
c00199de:	0f 84 4d ff ff ff    	je     c0019931 <CPU::detectFeatures()+0x7b5>
c00199e4:	83 f8 03             	cmp    eax,0x3
c00199e7:	0f 85 72 01 00 00    	jne    c0019b5f <CPU::detectFeatures()+0x9e3>
c00199ed:	51                   	push   ecx
c00199ee:	51                   	push   ecx
c00199ef:	68 31 c6 02 c0       	push   0xc002c631
c00199f4:	53                   	push   ebx
c00199f5:	e8 3c a7 ff ff       	call   c0014136 <Device::setName(char const*)>
c00199fa:	b1 c1                	mov    cl,0xc1
c00199fc:	88 c8                	mov    al,cl
c00199fe:	e6 22                	out    0x22,al
c0019a00:	e4 23                	in     al,0x23
c0019a02:	88 c2                	mov    dl,al
c0019a04:	88 c8                	mov    al,cl
c0019a06:	e6 22                	out    0x22,al
c0019a08:	88 d0                	mov    al,dl
c0019a0a:	83 c8 10             	or     eax,0x10
c0019a0d:	e6 23                	out    0x23,al
c0019a0f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019a16:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019a19:	89 d0                	mov    eax,edx
c0019a1b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a21:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a25:	40                   	inc    eax
c0019a26:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a2c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a31:	e9 a1 00 00 00       	jmp    c0019ad7 <CPU::detectFeatures()+0x95b>
c0019a36:	83 f8 06             	cmp    eax,0x6
c0019a39:	0f 84 e1 fe ff ff    	je     c0019920 <CPU::detectFeatures()+0x7a4>
c0019a3f:	83 f8 04             	cmp    eax,0x4
c0019a42:	0f 84 e9 fe ff ff    	je     c0019931 <CPU::detectFeatures()+0x7b5>
c0019a48:	83 f8 03             	cmp    eax,0x3
c0019a4b:	0f 85 0e 01 00 00    	jne    c0019b5f <CPU::detectFeatures()+0x9e3>
c0019a51:	52                   	push   edx
c0019a52:	52                   	push   edx
c0019a53:	68 3c c6 02 c0       	push   0xc002c63c
c0019a58:	eb 77                	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019a5a:	83 f8 07             	cmp    eax,0x7
c0019a5d:	75 09                	jne    c0019a68 <CPU::detectFeatures()+0x8ec>
c0019a5f:	50                   	push   eax
c0019a60:	50                   	push   eax
c0019a61:	68 46 c6 02 c0       	push   0xc002c646
c0019a66:	eb 69                	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019a68:	83 f8 0a             	cmp    eax,0xa
c0019a6b:	75 09                	jne    c0019a76 <CPU::detectFeatures()+0x8fa>
c0019a6d:	50                   	push   eax
c0019a6e:	50                   	push   eax
c0019a6f:	68 51 c6 02 c0       	push   0xc002c651
c0019a74:	eb 5b                	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019a76:	83 f8 0b             	cmp    eax,0xb
c0019a79:	75 09                	jne    c0019a84 <CPU::detectFeatures()+0x908>
c0019a7b:	50                   	push   eax
c0019a7c:	50                   	push   eax
c0019a7d:	68 59 c6 02 c0       	push   0xc002c659
c0019a82:	eb 4d                	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019a84:	83 f8 08             	cmp    eax,0x8
c0019a87:	75 09                	jne    c0019a92 <CPU::detectFeatures()+0x916>
c0019a89:	50                   	push   eax
c0019a8a:	50                   	push   eax
c0019a8b:	68 62 c6 02 c0       	push   0xc002c662
c0019a90:	eb 3f                	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019a92:	83 f8 09             	cmp    eax,0x9
c0019a95:	75 09                	jne    c0019aa0 <CPU::detectFeatures()+0x924>
c0019a97:	50                   	push   eax
c0019a98:	50                   	push   eax
c0019a99:	68 6a c6 02 c0       	push   0xc002c66a
c0019a9e:	eb 31                	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019aa0:	83 f8 05             	cmp    eax,0x5
c0019aa3:	75 09                	jne    c0019aae <CPU::detectFeatures()+0x932>
c0019aa5:	50                   	push   eax
c0019aa6:	50                   	push   eax
c0019aa7:	68 72 c6 02 c0       	push   0xc002c672
c0019aac:	eb 23                	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019aae:	83 f8 0c             	cmp    eax,0xc
c0019ab1:	75 09                	jne    c0019abc <CPU::detectFeatures()+0x940>
c0019ab3:	55                   	push   ebp
c0019ab4:	55                   	push   ebp
c0019ab5:	68 80 c6 02 c0       	push   0xc002c680
c0019aba:	eb 15                	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019abc:	83 f8 0d             	cmp    eax,0xd
c0019abf:	75 09                	jne    c0019aca <CPU::detectFeatures()+0x94e>
c0019ac1:	57                   	push   edi
c0019ac2:	57                   	push   edi
c0019ac3:	68 8b c6 02 c0       	push   0xc002c68b
c0019ac8:	eb 07                	jmp    c0019ad1 <CPU::detectFeatures()+0x955>
c0019aca:	56                   	push   esi
c0019acb:	56                   	push   esi
c0019acc:	68 9f c6 02 c0       	push   0xc002c69f
c0019ad1:	53                   	push   ebx
c0019ad2:	e8 5f a6 ff ff       	call   c0014136 <Device::setName(char const*)>
c0019ad7:	83 c4 10             	add    esp,0x10
c0019ada:	e9 80 00 00 00       	jmp    c0019b5f <CPU::detectFeatures()+0x9e3>
c0019adf:	51                   	push   ecx
c0019ae0:	51                   	push   ecx
c0019ae1:	68 eb c4 02 c0       	push   0xc002c4eb
c0019ae6:	55                   	push   ebp
c0019ae7:	e8 20 6d fe ff       	call   c000080c <strcpy>
c0019aec:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019af6:	e8 b3 67 fe ff       	call   c00002ae <is486>
c0019afb:	83 c4 10             	add    esp,0x10
c0019afe:	85 c0                	test   eax,eax
c0019b00:	74 2b                	je     c0019b2d <CPU::detectFeatures()+0x9b1>
c0019b02:	52                   	push   edx
c0019b03:	52                   	push   edx
c0019b04:	68 ab c6 02 c0       	push   0xc002c6ab
c0019b09:	53                   	push   ebx
c0019b0a:	e8 27 a6 ff ff       	call   c0014136 <Device::setName(char const*)>
c0019b0f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019b16:	0f 20 c0             	mov    eax,cr0
c0019b19:	83 e0 14             	and    eax,0x14
c0019b1c:	83 c4 10             	add    esp,0x10
c0019b1f:	83 f8 04             	cmp    eax,0x4
c0019b22:	75 1f                	jne    c0019b43 <CPU::detectFeatures()+0x9c7>
c0019b24:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b2b:	eb 32                	jmp    c0019b5f <CPU::detectFeatures()+0x9e3>
c0019b2d:	50                   	push   eax
c0019b2e:	50                   	push   eax
c0019b2f:	68 b6 c6 02 c0       	push   0xc002c6b6
c0019b34:	53                   	push   ebx
c0019b35:	e8 fc a5 ff ff       	call   c0014136 <Device::setName(char const*)>
c0019b3a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b41:	eb d3                	jmp    c0019b16 <CPU::detectFeatures()+0x99a>
c0019b43:	e8 41 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b48:	83 e0 01             	and    eax,0x1
c0019b4b:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b4e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b54:	83 e0 fd             	and    eax,0xfffffffd
c0019b57:	09 d0                	or     eax,edx
c0019b59:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b5f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b66:	83 c4 4c             	add    esp,0x4c
c0019b69:	5b                   	pop    ebx
c0019b6a:	5e                   	pop    esi
c0019b6b:	5f                   	pop    edi
c0019b6c:	5d                   	pop    ebp
c0019b6d:	c3                   	ret    

c0019b6e <CPU::setupSMEP()>:
c0019b6e:	0f 20 e0             	mov    eax,cr4
c0019b71:	0d 00 00 10 00       	or     eax,0x100000
c0019b76:	0f 22 e0             	mov    cr4,eax
c0019b79:	c3                   	ret    

c0019b7a <CPU::setupUMIP()>:
c0019b7a:	0f 20 e0             	mov    eax,cr4
c0019b7d:	80 cc 08             	or     ah,0x8
c0019b80:	0f 22 e0             	mov    cr4,eax
c0019b83:	c3                   	ret    

c0019b84 <CPU::setupTSC()>:
c0019b84:	0f 20 e0             	mov    eax,cr4
c0019b87:	83 c8 04             	or     eax,0x4
c0019b8a:	0f 22 e0             	mov    cr4,eax
c0019b8d:	c3                   	ret    

c0019b8e <CPU::setupLargePages()>:
c0019b8e:	0f 20 e0             	mov    eax,cr4
c0019b91:	83 c8 10             	or     eax,0x10
c0019b94:	0f 22 e0             	mov    cr4,eax
c0019b97:	c3                   	ret    

c0019b98 <CPU::setupPAT()>:
c0019b98:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0019b9d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ba4:	74 2c                	je     c0019bd2 <CPU::setupPAT()+0x3a>
c0019ba6:	53                   	push   ebx
c0019ba7:	83 ec 10             	sub    esp,0x10
c0019baa:	68 77 02 00 00       	push   0x277
c0019baf:	50                   	push   eax
c0019bb0:	e8 7d 52 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019bb5:	83 e2 f8             	and    edx,0xfffffff8
c0019bb8:	83 ca 01             	or     edx,0x1
c0019bbb:	52                   	push   edx
c0019bbc:	50                   	push   eax
c0019bbd:	68 77 02 00 00       	push   0x277
c0019bc2:	ff 35 a8 f1 02 c0    	push   DWORD PTR ds:0xc002f1a8
c0019bc8:	e8 91 52 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019bcd:	83 c4 28             	add    esp,0x28
c0019bd0:	5b                   	pop    ebx
c0019bd1:	c3                   	ret    
c0019bd2:	c3                   	ret    
c0019bd3:	90                   	nop

c0019bd4 <CPU::setupMTRR()>:
c0019bd4:	c3                   	ret    
c0019bd5:	90                   	nop

c0019bd6 <CPU::setupGlobalPages()>:
c0019bd6:	0f 20 e0             	mov    eax,cr4
c0019bd9:	0c 80                	or     al,0x80
c0019bdb:	0f 22 e0             	mov    cr4,eax
c0019bde:	c3                   	ret    
c0019bdf:	90                   	nop

c0019be0 <CPU::allowUsermodeDataAccess()>:
c0019be0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019beb:	74 03                	je     c0019bf0 <CPU::allowUsermodeDataAccess()+0x10>
c0019bed:	0f 01 cb             	stac   
c0019bf0:	c3                   	ret    
c0019bf1:	90                   	nop

c0019bf2 <CPU::prohibitUsermodeDataAccess()>:
c0019bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bfd:	74 03                	je     c0019c02 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019bff:	0f 01 ca             	clac   
c0019c02:	c3                   	ret    
c0019c03:	90                   	nop

c0019c04 <CPU::setupSMAP()>:
c0019c04:	0f 20 e0             	mov    eax,cr4
c0019c07:	0d 00 00 20 00       	or     eax,0x200000
c0019c0c:	0f 22 e0             	mov    cr4,eax
c0019c0f:	eb e1                	jmp    c0019bf2 <CPU::prohibitUsermodeDataAccess()>
c0019c11:	90                   	nop

c0019c12 <CPU::setupFeatures()>:
c0019c12:	83 ec 0c             	sub    esp,0xc
c0019c15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c19:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c20:	74 07                	je     c0019c29 <CPU::setupFeatures()+0x17>
c0019c22:	52                   	push   edx
c0019c23:	e8 46 ff ff ff       	call   c0019b6e <CPU::setupSMEP()>
c0019c28:	58                   	pop    eax
c0019c29:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c30:	74 07                	je     c0019c39 <CPU::setupFeatures()+0x27>
c0019c32:	52                   	push   edx
c0019c33:	e8 cc ff ff ff       	call   c0019c04 <CPU::setupSMAP()>
c0019c38:	58                   	pop    eax
c0019c39:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c40:	74 07                	je     c0019c49 <CPU::setupFeatures()+0x37>
c0019c42:	52                   	push   edx
c0019c43:	e8 32 ff ff ff       	call   c0019b7a <CPU::setupUMIP()>
c0019c48:	58                   	pop    eax
c0019c49:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c50:	74 07                	je     c0019c59 <CPU::setupFeatures()+0x47>
c0019c52:	52                   	push   edx
c0019c53:	e8 2c ff ff ff       	call   c0019b84 <CPU::setupTSC()>
c0019c58:	58                   	pop    eax
c0019c59:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c60:	74 07                	je     c0019c69 <CPU::setupFeatures()+0x57>
c0019c62:	52                   	push   edx
c0019c63:	e8 26 ff ff ff       	call   c0019b8e <CPU::setupLargePages()>
c0019c68:	59                   	pop    ecx
c0019c69:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c70:	74 07                	je     c0019c79 <CPU::setupFeatures()+0x67>
c0019c72:	52                   	push   edx
c0019c73:	e8 5e ff ff ff       	call   c0019bd6 <CPU::setupGlobalPages()>
c0019c78:	58                   	pop    eax
c0019c79:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c80:	74 0c                	je     c0019c8e <CPU::setupFeatures()+0x7c>
c0019c82:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c86:	83 c4 0c             	add    esp,0xc
c0019c89:	e9 0a ff ff ff       	jmp    c0019b98 <CPU::setupPAT()>
c0019c8e:	83 c4 0c             	add    esp,0xc
c0019c91:	c3                   	ret    

c0019c92 <CPU::open(int, int, void*)>:
c0019c92:	57                   	push   edi
c0019c93:	56                   	push   esi
c0019c94:	53                   	push   ebx
c0019c95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c9d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ca3:	83 ec 0c             	sub    esp,0xc
c0019ca6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019cac:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019cb2:	50                   	push   eax
c0019cb3:	e8 66 54 ff ff       	call   c000f11e <GDT::setup()>
c0019cb8:	83 c4 0c             	add    esp,0xc
c0019cbb:	6a 00                	push   0x0
c0019cbd:	68 ef be ad de       	push   0xdeadbeef
c0019cc2:	57                   	push   edi
c0019cc3:	e8 aa 73 ff ff       	call   c0011072 <TSS::setup(unsigned long, unsigned long)>
c0019cc8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ccb:	e8 82 73 ff ff       	call   c0011052 <TSS::flush()>
c0019cd0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019cd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cd9:	e8 a4 56 ff ff       	call   c000f382 <IDT::setup()>
c0019cde:	b8 00 04 00 00       	mov    eax,0x400
c0019ce3:	0f 23 f8             	mov    db7,eax
c0019ce6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019cf0:	e8 d3 5e ff ff       	call   c000fbc8 <Phys::allocatePage()>
c0019cf5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019cfb:	89 30                	mov    DWORD PTR [eax],esi
c0019cfd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019d03:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019d06:	58                   	pop    eax
c0019d07:	5a                   	pop    edx
c0019d08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d12:	e8 fb 84 ff ff       	call   c0012212 <VAS::setCPUSpecific(unsigned long)>
c0019d17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d1a:	e8 5d f4 ff ff       	call   c001917c <CPU::detectFeatures()>
c0019d1f:	e8 44 b8 ff ff       	call   c0015568 <setupInterruptController()>
c0019d24:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d2a:	a1 c0 f1 02 c0       	mov    eax,ds:0xc002f1c0
c0019d2f:	83 e0 10             	and    eax,0x10
c0019d32:	83 f8 01             	cmp    eax,0x1
c0019d35:	19 c0                	sbb    eax,eax
c0019d37:	83 e0 46             	and    eax,0x46
c0019d3a:	83 c0 1e             	add    eax,0x1e
c0019d3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d40:	e8 7a ce ff ff       	call   c0016bbf <setupTimer(int)>
c0019d45:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d4e:	e8 bf fe ff ff       	call   c0019c12 <CPU::setupFeatures()>
c0019d53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d56:	e8 a5 f1 ff ff       	call   c0018f00 <CPU::displayFeatures()>
c0019d5b:	83 c4 10             	add    esp,0x10
c0019d5e:	31 c0                	xor    eax,eax
c0019d60:	5b                   	pop    ebx
c0019d61:	5e                   	pop    esi
c0019d62:	5f                   	pop    edi
c0019d63:	c3                   	ret    

c0019d64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d64:	57                   	push   edi
c0019d65:	56                   	push   esi
c0019d66:	53                   	push   ebx
c0019d67:	51                   	push   ecx
c0019d68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d6c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d6f:	0f 02 c0             	lar    eax,ax
c0019d72:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d75:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d79:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d7c:	88 ca                	mov    dl,cl
c0019d7e:	c0 ea 06             	shr    dl,0x6
c0019d81:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d85:	89 ca                	mov    edx,ecx
c0019d87:	66 c1 ea 03          	shr    dx,0x3
c0019d8b:	83 e2 07             	and    edx,0x7
c0019d8e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d93:	88 17                	mov    BYTE PTR [edi],dl
c0019d95:	0f 84 a6 01 00 00    	je     c0019f41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d9b:	83 e1 07             	and    ecx,0x7
c0019d9e:	80 f9 04             	cmp    cl,0x4
c0019da1:	0f 84 98 00 00 00    	je     c0019e3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019da7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019dac:	0f 95 c0             	setne  al
c0019daf:	80 f9 05             	cmp    cl,0x5
c0019db2:	0f 95 c2             	setne  dl
c0019db5:	08 c2                	or     dl,al
c0019db7:	74 79                	je     c0019e32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019db9:	84 c9                	test   cl,cl
c0019dbb:	75 05                	jne    c0019dc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019dbd:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019dc0:	eb 3c                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dc2:	80 f9 01             	cmp    cl,0x1
c0019dc5:	75 05                	jne    c0019dcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019dc7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dca:	eb 32                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dcc:	80 f9 02             	cmp    cl,0x2
c0019dcf:	75 05                	jne    c0019dd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019dd1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019dd4:	eb 28                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dd6:	31 c0                	xor    eax,eax
c0019dd8:	80 f9 03             	cmp    cl,0x3
c0019ddb:	75 05                	jne    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019ddd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019de0:	eb 1c                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019de2:	80 f9 05             	cmp    cl,0x5
c0019de5:	75 05                	jne    c0019dec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019de7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dea:	eb 12                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dec:	80 f9 06             	cmp    cl,0x6
c0019def:	75 05                	jne    c0019df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019df1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019df4:	eb 08                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019df6:	80 f9 07             	cmp    cl,0x7
c0019df9:	75 03                	jne    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dfb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dfe:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e03:	75 10                	jne    c0019e15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019e05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019e09:	b9 03 00 00 00       	mov    ecx,0x3
c0019e0e:	01 d0                	add    eax,edx
c0019e10:	e9 37 01 00 00       	jmp    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e15:	b9 02 00 00 00       	mov    ecx,0x2
c0019e1a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e1f:	0f 85 27 01 00 00    	jne    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e25:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e28:	b9 06 00 00 00       	mov    ecx,0x6
c0019e2d:	e9 1a 01 00 00       	jmp    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e32:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e35:	b9 06 00 00 00       	mov    ecx,0x6
c0019e3a:	e9 0f 01 00 00       	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e3f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e42:	88 ca                	mov    dl,cl
c0019e44:	c0 ea 06             	shr    dl,0x6
c0019e47:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e4b:	89 ca                	mov    edx,ecx
c0019e4d:	66 c1 ea 03          	shr    dx,0x3
c0019e51:	83 e2 07             	and    edx,0x7
c0019e54:	80 e1 07             	and    cl,0x7
c0019e57:	75 05                	jne    c0019e5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e59:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e5c:	eb 4c                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e5e:	80 f9 01             	cmp    cl,0x1
c0019e61:	75 05                	jne    c0019e68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e63:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e66:	eb 42                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e68:	80 f9 02             	cmp    cl,0x2
c0019e6b:	75 05                	jne    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e6d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e70:	eb 38                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e72:	80 f9 03             	cmp    cl,0x3
c0019e75:	75 05                	jne    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e77:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e7a:	eb 2e                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e7c:	80 f9 04             	cmp    cl,0x4
c0019e7f:	75 12                	jne    c0019e93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e81:	f6 c4 60             	test   ah,0x60
c0019e84:	75 08                	jne    c0019e8e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e86:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e89:	8d 78 14             	lea    edi,[eax+0x14]
c0019e8c:	eb 1c                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e8e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e91:	eb 17                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e93:	80 f9 05             	cmp    cl,0x5
c0019e96:	75 05                	jne    c0019e9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e98:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e9b:	eb 0d                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e9d:	80 f9 06             	cmp    cl,0x6
c0019ea0:	75 05                	jne    c0019ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019ea2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019ea5:	eb 03                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ea7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019eaa:	84 d2                	test   dl,dl
c0019eac:	75 05                	jne    c0019eb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019eae:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019eb1:	eb 3c                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eb3:	80 fa 01             	cmp    dl,0x1
c0019eb6:	75 05                	jne    c0019ebd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019eb8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ebb:	eb 32                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ebd:	80 fa 02             	cmp    dl,0x2
c0019ec0:	75 05                	jne    c0019ec7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019ec2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ec5:	eb 28                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ec7:	80 fa 03             	cmp    dl,0x3
c0019eca:	75 05                	jne    c0019ed1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019ecc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ecf:	eb 1e                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ed1:	31 c0                	xor    eax,eax
c0019ed3:	80 fa 04             	cmp    dl,0x4
c0019ed6:	74 17                	je     c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ed8:	80 fa 05             	cmp    dl,0x5
c0019edb:	75 05                	jne    c0019ee2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019edd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ee0:	eb 0d                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ee2:	80 fa 06             	cmp    dl,0x6
c0019ee5:	75 05                	jne    c0019eec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019ee7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019eea:	eb 03                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eec:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019eef:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ef4:	0f 94 c2             	sete   dl
c0019ef7:	80 f9 05             	cmp    cl,0x5
c0019efa:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019efe:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019f03:	d3 e0                	shl    eax,cl
c0019f05:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019f09:	74 0a                	je     c0019f15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019f0b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f0e:	b9 07 00 00 00       	mov    ecx,0x7
c0019f13:	eb 37                	jmp    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f15:	01 f8                	add    eax,edi
c0019f17:	b9 03 00 00 00       	mov    ecx,0x3
c0019f1c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f21:	74 2b                	je     c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f23:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f28:	75 0d                	jne    c0019f37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f2a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f2e:	01 c8                	add    eax,ecx
c0019f30:	b9 04 00 00 00       	mov    ecx,0x4
c0019f35:	eb 17                	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f37:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f3a:	b9 07 00 00 00       	mov    ecx,0x7
c0019f3f:	eb 0d                	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f41:	b9 02 00 00 00       	mov    ecx,0x2
c0019f46:	b2 01                	mov    dl,0x1
c0019f48:	31 c0                	xor    eax,eax
c0019f4a:	eb 02                	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f4c:	31 d2                	xor    edx,edx
c0019f4e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f52:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f58:	88 11                	mov    BYTE PTR [ecx],dl
c0019f5a:	5a                   	pop    edx
c0019f5b:	5b                   	pop    ebx
c0019f5c:	5e                   	pop    esi
c0019f5d:	5f                   	pop    edi
c0019f5e:	c3                   	ret    

c0019f5f <Krnl::smpEntry()>:
c0019f5f:	eb fe                	jmp    c0019f5f <Krnl::smpEntry()>

c0019f61 <Krnl::startCPU(int)>:
c0019f61:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0019f66:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f6d:	0f 84 36 01 00 00    	je     c001a0a9 <Krnl::startCPU(int)+0x148>
c0019f73:	53                   	push   ebx
c0019f74:	83 ec 10             	sub    esp,0x10
c0019f77:	fa                   	cli    
c0019f78:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c0019f7e:	6a 1b                	push   0x1b
c0019f80:	ff 35 a8 f1 02 c0    	push   DWORD PTR ds:0xc002f1a8
c0019f86:	e8 a7 4e ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019f8b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f90:	89 c3                	mov    ebx,eax
c0019f92:	58                   	pop    eax
c0019f93:	5a                   	pop    edx
c0019f94:	53                   	push   ebx
c0019f95:	68 f0 c6 02 c0       	push   0xc002c6f0
c0019f9a:	e8 68 8b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0019f9f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fad:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fb7:	c1 e0 18             	shl    eax,0x18
c0019fba:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019fc0:	83 c4 10             	add    esp,0x10
c0019fc3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019fc9:	09 c2                	or     edx,eax
c0019fcb:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019fd1:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019fd7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fdd:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fe3:	80 cd c5             	or     ch,0xc5
c0019fe6:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fec:	f3 90                	pause  
c0019fee:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ff0:	0f ba e1 0c          	bt     ecx,0xc
c0019ff4:	72 f6                	jb     c0019fec <Krnl::startCPU(int)+0x8b>
c0019ff6:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ffc:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a002:	09 c1                	or     ecx,eax
c001a004:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a00a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a010:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a016:	80 cd 85             	or     ch,0x85
c001a019:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a01f:	f3 90                	pause  
c001a021:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a023:	0f ba e1 0c          	bt     ecx,0xc
c001a027:	72 f6                	jb     c001a01f <Krnl::startCPU(int)+0xbe>
c001a029:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a033:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a039:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a03f:	09 c1                	or     ecx,eax
c001a041:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a047:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a04d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a053:	81 c9 02 06 00 00    	or     ecx,0x602
c001a059:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a05f:	f3 90                	pause  
c001a061:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a063:	0f ba e1 0c          	bt     ecx,0xc
c001a067:	72 f6                	jb     c001a05f <Krnl::startCPU(int)+0xfe>
c001a069:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a073:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a079:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a07f:	09 c8                	or     eax,ecx
c001a081:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a087:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a08d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a092:	0d 02 06 00 00       	or     eax,0x602
c001a097:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a09d:	f3 90                	pause  
c001a09f:	8b 02                	mov    eax,DWORD PTR [edx]
c001a0a1:	0f ba e0 0c          	bt     eax,0xc
c001a0a5:	72 f6                	jb     c001a09d <Krnl::startCPU(int)+0x13c>
c001a0a7:	eb fe                	jmp    c001a0a7 <Krnl::startCPU(int)+0x146>
c001a0a9:	c3                   	ret    

c001a0aa <Krnl::startCPUs()>:
c001a0aa:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001a0af:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a0b5:	88 c2                	mov    dl,al
c001a0b7:	83 e2 0a             	and    edx,0xa
c001a0ba:	80 fa 0a             	cmp    dl,0xa
c001a0bd:	75 09                	jne    c001a0c8 <Krnl::startCPUs()+0x1e>
c001a0bf:	a8 01                	test   al,0x1
c001a0c1:	74 05                	je     c001a0c8 <Krnl::startCPUs()+0x1e>
c001a0c3:	e9 d3 60 fe ff       	jmp    c000019b <prepareTramp>
c001a0c8:	c3                   	ret    
c001a0c9:	90                   	nop

c001a0ca <EnvVarContainer::getEnv(char const*)>:
c001a0ca:	57                   	push   edi
c001a0cb:	56                   	push   esi
c001a0cc:	53                   	push   ebx
c001a0cd:	31 db                	xor    ebx,ebx
c001a0cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0d3:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a0d5:	7e 2b                	jle    c001a102 <EnvVarContainer::getEnv(char const*)+0x38>
c001a0d7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0de:	50                   	push   eax
c001a0df:	50                   	push   eax
c001a0e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0e3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0ea:	e8 a9 67 fe ff       	call   c0000898 <strcmp>
c001a0ef:	83 c4 10             	add    esp,0x10
c001a0f2:	85 c0                	test   eax,eax
c001a0f4:	75 09                	jne    c001a0ff <EnvVarContainer::getEnv(char const*)+0x35>
c001a0f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0f9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0fd:	eb 05                	jmp    c001a104 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0ff:	43                   	inc    ebx
c001a100:	eb d1                	jmp    c001a0d3 <EnvVarContainer::getEnv(char const*)+0x9>
c001a102:	31 c0                	xor    eax,eax
c001a104:	5b                   	pop    ebx
c001a105:	5e                   	pop    esi
c001a106:	5f                   	pop    edi
c001a107:	c3                   	ret    

c001a108 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a108:	55                   	push   ebp
c001a109:	57                   	push   edi
c001a10a:	56                   	push   esi
c001a10b:	53                   	push   ebx
c001a10c:	83 ec 28             	sub    esp,0x28
c001a10f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a113:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001a117:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a11b:	56                   	push   esi
c001a11c:	e8 4b 66 fe ff       	call   c000076c <strlen>
c001a121:	40                   	inc    eax
c001a122:	89 04 24             	mov    DWORD PTR [esp],eax
c001a125:	e8 62 57 ff ff       	call   c000f88c <malloc>
c001a12a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a12d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a131:	e8 36 66 fe ff       	call   c000076c <strlen>
c001a136:	40                   	inc    eax
c001a137:	89 04 24             	mov    DWORD PTR [esp],eax
c001a13a:	e8 4d 57 ff ff       	call   c000f88c <malloc>
c001a13f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a142:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a146:	e8 21 66 fe ff       	call   c000076c <strlen>
c001a14b:	83 c4 0c             	add    esp,0xc
c001a14e:	40                   	inc    eax
c001a14f:	50                   	push   eax
c001a150:	6a 00                	push   0x0
c001a152:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a156:	e8 f5 65 fe ff       	call   c0000750 <memset>
c001a15b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a15e:	e8 09 66 fe ff       	call   c000076c <strlen>
c001a163:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a167:	8d 48 01             	lea    ecx,[eax+0x1]
c001a16a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a16c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a16f:	89 de                	mov    esi,ebx
c001a171:	e8 f6 65 fe ff       	call   c000076c <strlen>
c001a176:	83 c4 0c             	add    esp,0xc
c001a179:	40                   	inc    eax
c001a17a:	50                   	push   eax
c001a17b:	6a 00                	push   0x0
c001a17d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a181:	e8 ca 65 fe ff       	call   c0000750 <memset>
c001a186:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a189:	e8 de 65 fe ff       	call   c000076c <strlen>
c001a18e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a192:	8d 48 01             	lea    ecx,[eax+0x1]
c001a195:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a197:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a19a:	40                   	inc    eax
c001a19b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a19e:	c1 e0 03             	shl    eax,0x3
c001a1a1:	5a                   	pop    edx
c001a1a2:	59                   	pop    ecx
c001a1a3:	50                   	push   eax
c001a1a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a1a7:	e8 cc 56 ff ff       	call   c000f878 <realloc>
c001a1ac:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a1b0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a1b3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a1b6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a1ba:	b9 08 00 00 00       	mov    ecx,0x8
c001a1bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1c1:	83 c4 2c             	add    esp,0x2c
c001a1c4:	5b                   	pop    ebx
c001a1c5:	5e                   	pop    esi
c001a1c6:	5f                   	pop    edi
c001a1c7:	5d                   	pop    ebp
c001a1c8:	c3                   	ret    
c001a1c9:	90                   	nop

c001a1ca <EnvVarContainer::deleteEnv(char const*)>:
c001a1ca:	c3                   	ret    
c001a1cb:	90                   	nop

c001a1cc <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a1cc:	55                   	push   ebp
c001a1cd:	57                   	push   edi
c001a1ce:	56                   	push   esi
c001a1cf:	53                   	push   ebx
c001a1d0:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1d6:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a1dd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a1e4:	68 14 01 00 00       	push   0x114
c001a1e9:	e8 9e 56 ff ff       	call   c000f88c <malloc>
c001a1ee:	83 c4 0c             	add    esp,0xc
c001a1f1:	89 c5                	mov    ebp,eax
c001a1f3:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a1f6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1fd:	50                   	push   eax
c001a1fe:	e8 63 8e ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001a203:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a206:	e8 2d 91 ff ff       	call   c0013338 <File::exists()>
c001a20b:	83 c4 10             	add    esp,0x10
c001a20e:	84 c0                	test   al,al
c001a210:	75 32                	jne    c001a244 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a212:	51                   	push   ecx
c001a213:	51                   	push   ecx
c001a214:	6a 12                	push   0x12
c001a216:	55                   	push   ebp
c001a217:	e8 ae 8e ff ff       	call   c00130ca <File::open(FileOpenMode)>
c001a21c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a21f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a222:	89 34 24             	mov    DWORD PTR [esp],esi
c001a225:	e8 42 65 fe ff       	call   c000076c <strlen>
c001a22a:	5a                   	pop    edx
c001a22b:	31 d2                	xor    edx,edx
c001a22d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a231:	51                   	push   ecx
c001a232:	56                   	push   esi
c001a233:	52                   	push   edx
c001a234:	50                   	push   eax
c001a235:	55                   	push   ebp
c001a236:	ff d7                	call   edi
c001a238:	83 c4 14             	add    esp,0x14
c001a23b:	55                   	push   ebp
c001a23c:	e8 e7 8e ff ff       	call   c0013128 <File::close()>
c001a241:	83 c4 10             	add    esp,0x10
c001a244:	31 f6                	xor    esi,esi
c001a246:	50                   	push   eax
c001a247:	68 00 01 00 00       	push   0x100
c001a24c:	6a 00                	push   0x0
c001a24e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a252:	50                   	push   eax
c001a253:	e8 f8 64 fe ff       	call   c0000750 <memset>
c001a258:	58                   	pop    eax
c001a259:	5a                   	pop    edx
c001a25a:	6a 01                	push   0x1
c001a25c:	55                   	push   ebp
c001a25d:	e8 68 8e ff ff       	call   c00130ca <File::open(FileOpenMode)>
c001a262:	83 c4 10             	add    esp,0x10
c001a265:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a26d:	83 ec 0c             	sub    esp,0xc
c001a270:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a273:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a277:	51                   	push   ecx
c001a278:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a27c:	52                   	push   edx
c001a27d:	6a 00                	push   0x0
c001a27f:	6a 01                	push   0x1
c001a281:	55                   	push   ebp
c001a282:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a285:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a289:	83 c4 20             	add    esp,0x20
c001a28c:	3c 0d                	cmp    al,0xd
c001a28e:	0f 84 16 01 00 00    	je     c001a3aa <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a294:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a299:	0f 84 fc 00 00 00    	je     c001a39b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a29f:	3c 0a                	cmp    al,0xa
c001a2a1:	74 13                	je     c001a2b6 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a2a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2a8:	74 0c                	je     c001a2b6 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a2aa:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a2b0:	0f 8e e5 00 00 00    	jle    c001a39b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2ba:	83 ec 0c             	sub    esp,0xc
c001a2bd:	8d 78 01             	lea    edi,[eax+0x1]
c001a2c0:	57                   	push   edi
c001a2c1:	e8 c6 55 ff ff       	call   c000f88c <malloc>
c001a2c6:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a2ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2ce:	8d 56 04             	lea    edx,[esi+0x4]
c001a2d1:	89 14 24             	mov    DWORD PTR [esp],edx
c001a2d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a2d8:	e8 af 55 ff ff       	call   c000f88c <malloc>
c001a2dd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2e1:	83 c4 0c             	add    esp,0xc
c001a2e4:	57                   	push   edi
c001a2e5:	6a 00                	push   0x0
c001a2e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2eb:	e8 60 64 fe ff       	call   c0000750 <memset>
c001a2f0:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a2f4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a2f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a2fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2fe:	83 c4 0c             	add    esp,0xc
c001a301:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a305:	52                   	push   edx
c001a306:	6a 00                	push   0x0
c001a308:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a30c:	e8 3f 64 fe ff       	call   c0000750 <memset>
c001a311:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a315:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a319:	89 34 24             	mov    DWORD PTR [esp],esi
c001a31c:	e8 4b 64 fe ff       	call   c000076c <strlen>
c001a321:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a325:	89 c1                	mov    ecx,eax
c001a327:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a329:	5e                   	pop    esi
c001a32a:	5f                   	pop    edi
c001a32b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a32f:	68 01 c7 02 c0       	push   0xc002c701
c001a334:	e8 ce 87 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001a339:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a33b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a33e:	40                   	inc    eax
c001a33f:	83 c4 10             	add    esp,0x10
c001a342:	89 03                	mov    DWORD PTR [ebx],eax
c001a344:	85 d2                	test   edx,edx
c001a346:	75 0c                	jne    c001a354 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a348:	83 ec 0c             	sub    esp,0xc
c001a34b:	6a 08                	push   0x8
c001a34d:	e8 3a 55 ff ff       	call   c000f88c <malloc>
c001a352:	eb 0c                	jmp    c001a360 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a354:	c1 e0 03             	shl    eax,0x3
c001a357:	51                   	push   ecx
c001a358:	51                   	push   ecx
c001a359:	50                   	push   eax
c001a35a:	52                   	push   edx
c001a35b:	e8 18 55 ff ff       	call   c000f878 <realloc>
c001a360:	83 c4 10             	add    esp,0x10
c001a363:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a366:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a368:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a36b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a36f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a373:	b9 08 00 00 00       	mov    ecx,0x8
c001a378:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a37a:	31 f6                	xor    esi,esi
c001a37c:	52                   	push   edx
c001a37d:	68 00 01 00 00       	push   0x100
c001a382:	6a 00                	push   0x0
c001a384:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a388:	50                   	push   eax
c001a389:	e8 c2 63 fe ff       	call   c0000750 <memset>
c001a38e:	83 c4 10             	add    esp,0x10
c001a391:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a399:	eb 0f                	jmp    c001a3aa <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a39b:	3c 3d                	cmp    al,0x3d
c001a39d:	74 07                	je     c001a3a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a39f:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a3a3:	46                   	inc    esi
c001a3a4:	eb 04                	jmp    c001a3aa <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a3a6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a3aa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3af:	0f 85 b8 fe ff ff    	jne    c001a26d <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a3b5:	50                   	push   eax
c001a3b6:	50                   	push   eax
c001a3b7:	ff 33                	push   DWORD PTR [ebx]
c001a3b9:	68 0f c7 02 c0       	push   0xc002c70f
c001a3be:	e8 44 87 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001a3c3:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a3c9:	5b                   	pop    ebx
c001a3ca:	5e                   	pop    esi
c001a3cb:	5f                   	pop    edi
c001a3cc:	5d                   	pop    ebp
c001a3cd:	c3                   	ret    

c001a3ce <EnvVarContainer::__loadSystem()>:
c001a3ce:	83 ec 10             	sub    esp,0x10
c001a3d1:	68 e0 e6 02 c0       	push   0xc002e6e0
c001a3d6:	68 3a c7 02 c0       	push   0xc002c73a
c001a3db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3df:	e8 e8 fd ff ff       	call   c001a1cc <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3e4:	83 c4 1c             	add    esp,0x1c
c001a3e7:	c3                   	ret    

c001a3e8 <EnvVarContainer::__loadUser()>:
c001a3e8:	c3                   	ret    
c001a3e9:	90                   	nop

c001a3ea <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a403:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a40a:	90                   	nop
c001a40b:	c3                   	ret    

c001a40c <EnvVarContainer::~EnvVarContainer()>:
c001a40c:	83 ec 0c             	sub    esp,0xc
c001a40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a413:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a416:	85 c0                	test   eax,eax
c001a418:	74 1d                	je     c001a437 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a41e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a420:	85 c0                	test   eax,eax
c001a422:	74 13                	je     c001a437 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a42b:	83 ec 0c             	sub    esp,0xc
c001a42e:	50                   	push   eax
c001a42f:	e8 68 54 ff ff       	call   c000f89c <free>
c001a434:	83 c4 10             	add    esp,0x10
c001a437:	90                   	nop
c001a438:	83 c4 0c             	add    esp,0xc
c001a43b:	c3                   	ret    

c001a43c <Krnl::getEnv(Process*, char const*)>:
c001a43c:	53                   	push   ebx
c001a43d:	83 ec 08             	sub    esp,0x8
c001a440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a444:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a448:	39 05 10 27 03 c0    	cmp    DWORD PTR ds:0xc0032710,eax
c001a44e:	74 04                	je     c001a454 <Krnl::getEnv(Process*, char const*)+0x18>
c001a450:	85 c0                	test   eax,eax
c001a452:	75 0b                	jne    c001a45f <Krnl::getEnv(Process*, char const*)+0x23>
c001a454:	a1 f4 1c 03 c0       	mov    eax,ds:0xc0031cf4
c001a459:	85 c0                	test   eax,eax
c001a45b:	75 19                	jne    c001a476 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a45d:	eb 27                	jmp    c001a486 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a45f:	52                   	push   edx
c001a460:	52                   	push   edx
c001a461:	53                   	push   ebx
c001a462:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a468:	e8 5d fc ff ff       	call   c001a0ca <EnvVarContainer::getEnv(char const*)>
c001a46d:	83 c4 10             	add    esp,0x10
c001a470:	85 c0                	test   eax,eax
c001a472:	75 28                	jne    c001a49c <Krnl::getEnv(Process*, char const*)+0x60>
c001a474:	eb de                	jmp    c001a454 <Krnl::getEnv(Process*, char const*)+0x18>
c001a476:	52                   	push   edx
c001a477:	52                   	push   edx
c001a478:	53                   	push   ebx
c001a479:	50                   	push   eax
c001a47a:	e8 4b fc ff ff       	call   c001a0ca <EnvVarContainer::getEnv(char const*)>
c001a47f:	83 c4 10             	add    esp,0x10
c001a482:	85 c0                	test   eax,eax
c001a484:	75 16                	jne    c001a49c <Krnl::getEnv(Process*, char const*)+0x60>
c001a486:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a48a:	a1 f8 1c 03 c0       	mov    eax,ds:0xc0031cf8
c001a48f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a493:	83 c4 08             	add    esp,0x8
c001a496:	5b                   	pop    ebx
c001a497:	e9 2e fc ff ff       	jmp    c001a0ca <EnvVarContainer::getEnv(char const*)>
c001a49c:	83 c4 08             	add    esp,0x8
c001a49f:	5b                   	pop    ebx
c001a4a0:	c3                   	ret    

c001a4a1 <Krnl::setEnvSystem(char const*, char const*)>:
c001a4a1:	83 ec 10             	sub    esp,0x10
c001a4a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4ac:	ff 35 f8 1c 03 c0    	push   DWORD PTR ds:0xc0031cf8
c001a4b2:	e8 51 fc ff ff       	call   c001a108 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4b7:	83 c4 1c             	add    esp,0x1c
c001a4ba:	c3                   	ret    

c001a4bb <Krnl::setEnvUser(char const*, char const*)>:
c001a4bb:	a1 f4 1c 03 c0       	mov    eax,ds:0xc0031cf4
c001a4c0:	85 c0                	test   eax,eax
c001a4c2:	74 15                	je     c001a4d9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a4c4:	83 ec 10             	sub    esp,0x10
c001a4c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4cf:	50                   	push   eax
c001a4d0:	e8 33 fc ff ff       	call   c001a108 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4d5:	83 c4 1c             	add    esp,0x1c
c001a4d8:	c3                   	ret    
c001a4d9:	c3                   	ret    

c001a4da <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4de:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4e8:	e9 1b fc ff ff       	jmp    c001a108 <EnvVarContainer::setEnv(char const*, char const*)>

c001a4ed <Krnl::deleteEnvSystem(char const*)>:
c001a4ed:	c3                   	ret    

c001a4ee <Krnl::deleteEnvUser(char const*)>:
c001a4ee:	c3                   	ret    

c001a4ef <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4ef:	c3                   	ret    

c001a4f0 <Krnl::newProcessEnv(Process*)>:
c001a4f0:	83 ec 28             	sub    esp,0x28
c001a4f3:	6a 0c                	push   0xc
c001a4f5:	e8 92 53 ff ff       	call   c000f88c <malloc>
c001a4fa:	5a                   	pop    edx
c001a4fb:	59                   	pop    ecx
c001a4fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a500:	50                   	push   eax
c001a501:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a505:	e8 e0 fe ff ff       	call   c001a3ea <EnvVarContainer::EnvVarContainer(Process*)>
c001a50a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a50e:	83 c4 2c             	add    esp,0x2c
c001a511:	c3                   	ret    

c001a512 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a512:	57                   	push   edi
c001a513:	56                   	push   esi
c001a514:	53                   	push   ebx
c001a515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a519:	83 ec 0c             	sub    esp,0xc
c001a51c:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a522:	6a 0c                	push   0xc
c001a524:	e8 63 53 ff ff       	call   c000f88c <malloc>
c001a529:	89 c3                	mov    ebx,eax
c001a52b:	58                   	pop    eax
c001a52c:	5a                   	pop    edx
c001a52d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a531:	53                   	push   ebx
c001a532:	e8 b3 fe ff ff       	call   c001a3ea <EnvVarContainer::EnvVarContainer(Process*)>
c001a537:	8b 07                	mov    eax,DWORD PTR [edi]
c001a539:	89 03                	mov    DWORD PTR [ebx],eax
c001a53b:	c1 e0 03             	shl    eax,0x3
c001a53e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a541:	e8 46 53 ff ff       	call   c000f88c <malloc>
c001a546:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a549:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a54b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a54e:	c1 e1 03             	shl    ecx,0x3
c001a551:	89 c7                	mov    edi,eax
c001a553:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a555:	83 c4 10             	add    esp,0x10
c001a558:	89 d8                	mov    eax,ebx
c001a55a:	5b                   	pop    ebx
c001a55b:	5e                   	pop    esi
c001a55c:	5f                   	pop    edi
c001a55d:	c3                   	ret    

c001a55e <Krnl::loadSystemEnv()>:
c001a55e:	53                   	push   ebx
c001a55f:	83 ec 14             	sub    esp,0x14
c001a562:	6a 0c                	push   0xc
c001a564:	e8 23 53 ff ff       	call   c000f88c <malloc>
c001a569:	89 c3                	mov    ebx,eax
c001a56b:	58                   	pop    eax
c001a56c:	5a                   	pop    edx
c001a56d:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c001a573:	53                   	push   ebx
c001a574:	e8 71 fe ff ff       	call   c001a3ea <EnvVarContainer::EnvVarContainer(Process*)>
c001a579:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a57c:	89 1d f8 1c 03 c0    	mov    DWORD PTR ds:0xc0031cf8,ebx
c001a582:	e8 47 fe ff ff       	call   c001a3ce <EnvVarContainer::__loadSystem()>
c001a587:	83 c4 18             	add    esp,0x18
c001a58a:	5b                   	pop    ebx
c001a58b:	c3                   	ret    

c001a58c <Krnl::loadUserEnv()>:
c001a58c:	53                   	push   ebx
c001a58d:	83 ec 14             	sub    esp,0x14
c001a590:	6a 0c                	push   0xc
c001a592:	e8 f5 52 ff ff       	call   c000f88c <malloc>
c001a597:	89 c3                	mov    ebx,eax
c001a599:	58                   	pop    eax
c001a59a:	5a                   	pop    edx
c001a59b:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c001a5a1:	53                   	push   ebx
c001a5a2:	e8 43 fe ff ff       	call   c001a3ea <EnvVarContainer::EnvVarContainer(Process*)>
c001a5a7:	89 1d f4 1c 03 c0    	mov    DWORD PTR ds:0xc0031cf4,ebx
c001a5ad:	83 c4 18             	add    esp,0x18
c001a5b0:	5b                   	pop    ebx
c001a5b1:	c3                   	ret    

c001a5b2 <Krnl::flushEnv()>:
c001a5b2:	c3                   	ret    

c001a5b3 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a5b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b7:	8b 15 f4 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cf4
c001a5bd:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a5c3:	a1 f8 1c 03 c0       	mov    eax,ds:0xc0031cf8
c001a5c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5ca:	03 01                	add    eax,DWORD PTR [ecx]
c001a5cc:	85 d2                	test   edx,edx
c001a5ce:	74 02                	je     c001a5d2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a5d0:	03 02                	add    eax,DWORD PTR [edx]
c001a5d2:	c3                   	ret    

c001a5d3 <Krnl::getProcessEnvPair(Process*, int)>:
c001a5d3:	57                   	push   edi
c001a5d4:	8b 0d f4 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031cf4
c001a5da:	56                   	push   esi
c001a5db:	85 c9                	test   ecx,ecx
c001a5dd:	53                   	push   ebx
c001a5de:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5e6:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5f0:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5f2:	75 47                	jne    c001a63b <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5f4:	39 c3                	cmp    ebx,eax
c001a5f6:	7c 47                	jl     c001a63f <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5f8:	8b 15 f8 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cf8
c001a5fe:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a600:	01 c1                	add    ecx,eax
c001a602:	39 d9                	cmp    ecx,ebx
c001a604:	7e 6c                	jle    c001a672 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a606:	51                   	push   ecx
c001a607:	89 d9                	mov    ecx,ebx
c001a609:	29 c1                	sub    ecx,eax
c001a60b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a60e:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a612:	53                   	push   ebx
c001a613:	68 5c c7 02 c0       	push   0xc002c75c
c001a618:	e8 ea 84 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001a61d:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a623:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a625:	a1 f8 1c 03 c0       	mov    eax,ds:0xc0031cf8
c001a62a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a62d:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a631:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a634:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a637:	89 06                	mov    DWORD PTR [esi],eax
c001a639:	eb 51                	jmp    c001a68c <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a63b:	39 c3                	cmp    ebx,eax
c001a63d:	7d 05                	jge    c001a644 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a63f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a642:	eb 20                	jmp    c001a664 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a644:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a646:	8d 14 07             	lea    edx,[edi+eax*1]
c001a649:	39 da                	cmp    edx,ebx
c001a64b:	7e 04                	jle    c001a651 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a64d:	29 c3                	sub    ebx,eax
c001a64f:	eb 10                	jmp    c001a661 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a651:	8b 0d f8 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031cf8
c001a657:	03 11                	add    edx,DWORD PTR [ecx]
c001a659:	39 da                	cmp    edx,ebx
c001a65b:	7e 15                	jle    c001a672 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a65d:	29 c3                	sub    ebx,eax
c001a65f:	29 fb                	sub    ebx,edi
c001a661:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a664:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a668:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a66b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a66e:	89 06                	mov    DWORD PTR [esi],eax
c001a670:	eb 1d                	jmp    c001a68f <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a672:	83 ec 0c             	sub    esp,0xc
c001a675:	68 70 c7 02 c0       	push   0xc002c770
c001a67a:	e8 18 00 00 00       	call   c001a697 <Krnl::panic(char const*)>
c001a67f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a685:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a68c:	83 c4 10             	add    esp,0x10
c001a68f:	89 f0                	mov    eax,esi
c001a691:	5b                   	pop    ebx
c001a692:	5e                   	pop    esi
c001a693:	5f                   	pop    edi
c001a694:	c2 04 00             	ret    0x4

c001a697 <Krnl::panic(char const*)>:
c001a697:	55                   	push   ebp
c001a698:	89 e5                	mov    ebp,esp
c001a69a:	53                   	push   ebx
c001a69b:	83 ec 0c             	sub    esp,0xc
c001a69e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a6a1:	fa                   	cli    
c001a6a2:	c6 05 04 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d04,0x1
c001a6a9:	53                   	push   ebx
c001a6aa:	c6 05 e4 e0 02 c0 00 	mov    BYTE PTR ds:0xc002e0e4,0x0
c001a6b1:	68 8a c7 02 c0       	push   0xc002c78a
c001a6b6:	e8 4c 84 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001a6bb:	58                   	pop    eax
c001a6bc:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a6c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c7:	e8 5e 62 ff ff       	call   c001092a <setActiveTerminal(VgaText*)>
c001a6cc:	83 c4 0c             	add    esp,0xc
c001a6cf:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a6d4:	6a 01                	push   0x1
c001a6d6:	6a 0f                	push   0xf
c001a6d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6de:	e8 e5 5c ff ff       	call   c00103c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6e3:	58                   	pop    eax
c001a6e4:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a6e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ef:	e8 7c 64 ff ff       	call   c0010b70 <VgaText::clearScreen()>
c001a6f4:	58                   	pop    eax
c001a6f5:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a6fa:	5a                   	pop    edx
c001a6fb:	68 a3 c7 02 c0       	push   0xc002c7a3
c001a700:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a706:	e8 ab 65 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a70b:	59                   	pop    ecx
c001a70c:	58                   	pop    eax
c001a70d:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a712:	68 48 c8 02 c0       	push   0xc002c848
c001a717:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a71d:	e8 94 65 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a722:	58                   	pop    eax
c001a723:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a728:	5a                   	pop    edx
c001a729:	68 bf c7 02 c0       	push   0xc002c7bf
c001a72e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a734:	e8 7d 65 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a739:	59                   	pop    ecx
c001a73a:	58                   	pop    eax
c001a73b:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a740:	53                   	push   ebx
c001a741:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a747:	e8 6a 65 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a74c:	58                   	pop    eax
c001a74d:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a752:	5a                   	pop    edx
c001a753:	68 df c7 02 c0       	push   0xc002c7df
c001a758:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a75e:	e8 53 65 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a763:	a1 00 1d 03 c0       	mov    eax,ds:0xc0031d00
c001a768:	83 c4 10             	add    esp,0x10
c001a76b:	85 c0                	test   eax,eax
c001a76d:	74 02                	je     c001a771 <Krnl::panic(char const*)+0xda>
c001a76f:	ff d0                	call   eax
c001a771:	83 ec 0c             	sub    esp,0xc
c001a774:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a777:	e8 9e 32 00 00       	call   c001da1a <Thr::getDriverNameFromAddress(unsigned long)>
c001a77c:	83 c4 10             	add    esp,0x10
c001a77f:	89 c3                	mov    ebx,eax
c001a781:	85 c0                	test   eax,eax
c001a783:	0f 84 50 02 00 00    	je     c001a9d9 <Krnl::panic(char const*)+0x342>
c001a789:	83 ec 08             	sub    esp,0x8
c001a78c:	8b 15 10 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032710
c001a792:	68 84 c8 02 c0       	push   0xc002c884
c001a797:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a79d:	e8 14 65 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a7a2:	58                   	pop    eax
c001a7a3:	5a                   	pop    edx
c001a7a4:	8b 15 10 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032710
c001a7aa:	68 bf c7 02 c0       	push   0xc002c7bf
c001a7af:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7b5:	e8 fc 64 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a7ba:	59                   	pop    ecx
c001a7bb:	58                   	pop    eax
c001a7bc:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a7c1:	53                   	push   ebx
c001a7c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c8:	e8 e9 64 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a7cd:	83 c4 10             	add    esp,0x10
c001a7d0:	83 ec 08             	sub    esp,0x8
c001a7d3:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a7d8:	68 de c7 02 c0       	push   0xc002c7de
c001a7dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e3:	e8 ce 64 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a7e8:	58                   	pop    eax
c001a7e9:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a7ee:	5a                   	pop    edx
c001a7ef:	68 dc c8 02 c0       	push   0xc002c8dc
c001a7f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7fa:	e8 b7 64 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a7ff:	59                   	pop    ecx
c001a800:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a805:	5b                   	pop    ebx
c001a806:	68 1c c9 02 c0       	push   0xc002c91c
c001a80b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a811:	e8 a0 64 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a816:	58                   	pop    eax
c001a817:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a81c:	5a                   	pop    edx
c001a81d:	68 ca c7 02 c0       	push   0xc002c7ca
c001a822:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a828:	e8 89 64 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a82d:	59                   	pop    ecx
c001a82e:	5b                   	pop    ebx
c001a82f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a832:	68 e2 c7 02 c0       	push   0xc002c7e2
c001a837:	e8 cb 82 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001a83c:	58                   	pop    eax
c001a83d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a840:	5a                   	pop    edx
c001a841:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a844:	68 eb c7 02 c0       	push   0xc002c7eb
c001a849:	e8 b9 82 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001a84e:	59                   	pop    ecx
c001a84f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a852:	5b                   	pop    ebx
c001a853:	8b 00                	mov    eax,DWORD PTR [eax]
c001a855:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a858:	68 f4 c7 02 c0       	push   0xc002c7f4
c001a85d:	e8 a5 82 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001a862:	58                   	pop    eax
c001a863:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a868:	5a                   	pop    edx
c001a869:	68 60 c9 02 c0       	push   0xc002c960
c001a86e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a874:	e8 3d 64 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a879:	59                   	pop    ecx
c001a87a:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a87f:	5b                   	pop    ebx
c001a880:	68 fd c7 02 c0       	push   0xc002c7fd
c001a885:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88b:	e8 26 64 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a890:	0f 20 c0             	mov    eax,cr0
c001a893:	5a                   	pop    edx
c001a894:	59                   	pop    ecx
c001a895:	50                   	push   eax
c001a896:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a89b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a1:	e8 36 64 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c001a8a6:	5b                   	pop    ebx
c001a8a7:	58                   	pop    eax
c001a8a8:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a8ad:	68 07 c8 02 c0       	push   0xc002c807
c001a8b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b8:	e8 f9 63 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a8bd:	0f 20 d0             	mov    eax,cr2
c001a8c0:	5a                   	pop    edx
c001a8c1:	59                   	pop    ecx
c001a8c2:	50                   	push   eax
c001a8c3:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a8c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ce:	e8 09 64 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c001a8d3:	5b                   	pop    ebx
c001a8d4:	58                   	pop    eax
c001a8d5:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a8da:	68 11 c8 02 c0       	push   0xc002c811
c001a8df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e5:	e8 cc 63 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a8ea:	0f 20 d8             	mov    eax,cr3
c001a8ed:	5a                   	pop    edx
c001a8ee:	59                   	pop    ecx
c001a8ef:	50                   	push   eax
c001a8f0:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a8f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8fb:	e8 dc 63 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c001a900:	5b                   	pop    ebx
c001a901:	58                   	pop    eax
c001a902:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a907:	68 24 c8 02 c0       	push   0xc002c824
c001a90c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a912:	e8 9f 63 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a917:	0f 20 e0             	mov    eax,cr4
c001a91a:	5a                   	pop    edx
c001a91b:	59                   	pop    ecx
c001a91c:	50                   	push   eax
c001a91d:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a922:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a928:	e8 af 63 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c001a92d:	5b                   	pop    ebx
c001a92e:	58                   	pop    eax
c001a92f:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a934:	68 2e c8 02 c0       	push   0xc002c82e
c001a939:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a93f:	e8 72 63 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a944:	5a                   	pop    edx
c001a945:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a94a:	59                   	pop    ecx
c001a94b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a951:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a954:	50                   	push   eax
c001a955:	e8 82 63 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c001a95a:	5b                   	pop    ebx
c001a95b:	58                   	pop    eax
c001a95c:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a961:	68 fb d6 02 c0       	push   0xc002d6fb
c001a966:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a96c:	e8 45 63 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a971:	5a                   	pop    edx
c001a972:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a977:	59                   	pop    ecx
c001a978:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a97e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a981:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a984:	50                   	push   eax
c001a985:	e8 52 63 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c001a98a:	5b                   	pop    ebx
c001a98b:	58                   	pop    eax
c001a98c:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a991:	68 fb d6 02 c0       	push   0xc002d6fb
c001a996:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a99c:	e8 15 63 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a9a1:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a9a6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9a9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9af:	8b 12                	mov    edx,DWORD PTR [edx]
c001a9b1:	59                   	pop    ecx
c001a9b2:	5b                   	pop    ebx
c001a9b3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9b6:	50                   	push   eax
c001a9b7:	e8 20 63 ff ff       	call   c0010cdc <VgaText::putx(unsigned int)>
c001a9bc:	83 c4 10             	add    esp,0x10
c001a9bf:	b2 fe                	mov    dl,0xfe
c001a9c1:	e4 60                	in     al,0x60
c001a9c3:	3c 1c                	cmp    al,0x1c
c001a9c5:	74 04                	je     c001a9cb <Krnl::panic(char const*)+0x334>
c001a9c7:	3c 5a                	cmp    al,0x5a
c001a9c9:	75 f6                	jne    c001a9c1 <Krnl::panic(char const*)+0x32a>
c001a9cb:	e4 64                	in     al,0x64
c001a9cd:	a8 02                	test   al,0x2
c001a9cf:	75 fa                	jne    c001a9cb <Krnl::panic(char const*)+0x334>
c001a9d1:	88 d0                	mov    al,dl
c001a9d3:	e6 64                	out    0x64,al
c001a9d5:	fa                   	cli    
c001a9d6:	f4                   	hlt    
c001a9d7:	eb e8                	jmp    c001a9c1 <Krnl::panic(char const*)+0x32a>
c001a9d9:	50                   	push   eax
c001a9da:	50                   	push   eax
c001a9db:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a9e0:	68 b0 c8 02 c0       	push   0xc002c8b0
c001a9e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9eb:	e8 c6 62 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001a9f0:	58                   	pop    eax
c001a9f1:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001a9f6:	5a                   	pop    edx
c001a9f7:	68 bf c7 02 c0       	push   0xc002c7bf
c001a9fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa02:	e8 af 62 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001aa07:	59                   	pop    ecx
c001aa08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa0d:	5b                   	pop    ebx
c001aa0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa11:	83 c0 0c             	add    eax,0xc
c001aa14:	50                   	push   eax
c001aa15:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001aa1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa20:	e8 91 62 ff ff       	call   c0010cb6 <VgaText::puts(char const*)>
c001aa25:	83 c4 10             	add    esp,0x10
c001aa28:	e9 a3 fd ff ff       	jmp    c001a7d0 <Krnl::panic(char const*)+0x139>

c001aa2d <Net::switchEndian16(unsigned short)>:
c001aa2d:	83 ec 04             	sub    esp,0x4
c001aa30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa34:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa3c:	c1 f8 08             	sar    eax,0x8
c001aa3f:	89 c2                	mov    edx,eax
c001aa41:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa45:	c1 e0 08             	shl    eax,0x8
c001aa48:	09 d0                	or     eax,edx
c001aa4a:	83 c4 04             	add    esp,0x4
c001aa4d:	c3                   	ret    

c001aa4e <Net::switchEndian32(unsigned int)>:
c001aa4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa52:	c1 e8 18             	shr    eax,0x18
c001aa55:	89 c2                	mov    edx,eax
c001aa57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa5b:	c1 e0 08             	shl    eax,0x8
c001aa5e:	25 00 00 ff 00       	and    eax,0xff0000
c001aa63:	09 c2                	or     edx,eax
c001aa65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa69:	c1 e8 08             	shr    eax,0x8
c001aa6c:	25 00 ff 00 00       	and    eax,0xff00
c001aa71:	09 c2                	or     edx,eax
c001aa73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa77:	c1 e0 18             	shl    eax,0x18
c001aa7a:	09 d0                	or     eax,edx
c001aa7c:	c3                   	ret    

c001aa7d <Net::crc32Calc(unsigned char*, int)>:
c001aa7d:	83 ec 10             	sub    esp,0x10
c001aa80:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa85:	75 07                	jne    c001aa8e <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa87:	b8 00 00 00 00       	mov    eax,0x0
c001aa8c:	eb 7c                	jmp    c001ab0a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa8e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa93:	7f 07                	jg     c001aa9c <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa95:	b8 00 00 00 00       	mov    eax,0x0
c001aa9a:	eb 6e                	jmp    c001ab0a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa9c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aaa4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aaac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aab0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aab4:	7d 4e                	jge    c001ab04 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aab6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aaba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aabe:	01 d0                	add    eax,edx
c001aac0:	8a 00                	mov    al,BYTE PTR [eax]
c001aac2:	0f b6 c0             	movzx  eax,al
c001aac5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aac9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aad1:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aad6:	7f 26                	jg     c001aafe <Net::crc32Calc(unsigned char*, int)+0x81>
c001aad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aadc:	83 e0 01             	and    eax,0x1
c001aadf:	74 0d                	je     c001aaee <Net::crc32Calc(unsigned char*, int)+0x71>
c001aae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae5:	d1 e8                	shr    eax,1
c001aae7:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aaec:	eb 06                	jmp    c001aaf4 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aaee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf2:	d1 e8                	shr    eax,1
c001aaf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aaf8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aafc:	eb d3                	jmp    c001aad1 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aafe:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ab02:	eb a8                	jmp    c001aaac <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ab04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab08:	f7 d0                	not    eax
c001ab0a:	83 c4 10             	add    esp,0x10
c001ab0d:	c3                   	ret    

c001ab0e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ab0e:	57                   	push   edi
c001ab0f:	56                   	push   esi
c001ab10:	53                   	push   ebx
c001ab11:	83 ec 60             	sub    esp,0x60
c001ab14:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ab1f:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001ab27:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001ab2c:	7f 1a                	jg     c001ab48 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001ab2e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab35:	8d 50 01             	lea    edx,[eax+0x1]
c001ab38:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ab3f:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab42:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001ab46:	eb df                	jmp    c001ab27 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001ab48:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab4f:	8d 50 01             	lea    edx,[eax+0x1]
c001ab52:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ab59:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab5c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab67:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001ab6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab6f:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001ab77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab8b:	89 c6                	mov    esi,eax
c001ab8d:	89 d7                	mov    edi,edx
c001ab8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab91:	89 c8                	mov    eax,ecx
c001ab93:	89 fa                	mov    edx,edi
c001ab95:	89 f3                	mov    ebx,esi
c001ab97:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ab9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c001aba2:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001abaa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abb1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001abb5:	8d 44 24 78          	lea    eax,[esp+0x78]
c001abb9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001abbd:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001abc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abc9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001abcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abd1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001abd5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001abd9:	89 c6                	mov    esi,eax
c001abdb:	89 d7                	mov    edi,edx
c001abdd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abdf:	89 c8                	mov    eax,ecx
c001abe1:	89 fa                	mov    edx,edi
c001abe3:	89 f3                	mov    ebx,esi
c001abe5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001abe9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001abed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abf1:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001abf9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac00:	0f b7 c0             	movzx  eax,ax
c001ac03:	c1 f8 08             	sar    eax,0x8
c001ac06:	89 c1                	mov    ecx,eax
c001ac08:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ac0f:	8d 50 01             	lea    edx,[eax+0x1]
c001ac12:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ac19:	88 ca                	mov    dl,cl
c001ac1b:	88 10                	mov    BYTE PTR [eax],dl
c001ac1d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ac24:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ac2b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ac2e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001ac35:	88 10                	mov    BYTE PTR [eax],dl
c001ac37:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ac3b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001ac3f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001ac46:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001ac4a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001ac4e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001ac52:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ac56:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ac5a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac5e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ac62:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ac66:	89 c6                	mov    esi,eax
c001ac68:	89 d7                	mov    edi,edx
c001ac6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac6c:	89 c8                	mov    eax,ecx
c001ac6e:	89 fa                	mov    edx,edi
c001ac70:	89 f3                	mov    ebx,esi
c001ac72:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ac76:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001ac7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac7e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ac82:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001ac89:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ac90:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001ac94:	50                   	push   eax
c001ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ac99:	e8 df fd ff ff       	call   c001aa7d <Net::crc32Calc(unsigned char*, int)>
c001ac9e:	83 c4 08             	add    esp,0x8
c001aca1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aca5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aca9:	c1 e8 18             	shr    eax,0x18
c001acac:	89 c1                	mov    ecx,eax
c001acae:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001acb5:	8d 50 01             	lea    edx,[eax+0x1]
c001acb8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001acbf:	88 ca                	mov    dl,cl
c001acc1:	88 10                	mov    BYTE PTR [eax],dl
c001acc3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001acc7:	c1 e8 10             	shr    eax,0x10
c001acca:	89 c1                	mov    ecx,eax
c001accc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001acd3:	8d 50 01             	lea    edx,[eax+0x1]
c001acd6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001acdd:	88 ca                	mov    dl,cl
c001acdf:	88 10                	mov    BYTE PTR [eax],dl
c001ace1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ace5:	c1 e8 08             	shr    eax,0x8
c001ace8:	89 c1                	mov    ecx,eax
c001acea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001acf1:	8d 50 01             	lea    edx,[eax+0x1]
c001acf4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001acfb:	88 ca                	mov    dl,cl
c001acfd:	88 10                	mov    BYTE PTR [eax],dl
c001acff:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad06:	8d 50 01             	lea    edx,[eax+0x1]
c001ad09:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ad10:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ad14:	88 10                	mov    BYTE PTR [eax],dl
c001ad16:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ad1a:	83 c4 60             	add    esp,0x60
c001ad1d:	5b                   	pop    ebx
c001ad1e:	5e                   	pop    esi
c001ad1f:	5f                   	pop    edi
c001ad20:	c3                   	ret    

c001ad21 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ad21:	57                   	push   edi
c001ad22:	56                   	push   esi
c001ad23:	53                   	push   ebx
c001ad24:	83 ec 70             	sub    esp,0x70
c001ad27:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad2e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001ad32:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001ad3a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad41:	83 c0 0e             	add    eax,0xe
c001ad44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ad48:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad4f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ad53:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001ad5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ad63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad67:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad6b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ad6f:	89 c6                	mov    esi,eax
c001ad71:	89 d7                	mov    edi,edx
c001ad73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad75:	89 c8                	mov    eax,ecx
c001ad77:	89 fa                	mov    edx,edi
c001ad79:	89 f3                	mov    ebx,esi
c001ad7b:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001ad7f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ad83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad87:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001ad8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad96:	83 c0 08             	add    eax,0x8
c001ad99:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001ad9d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ada4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ada8:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001adb0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001adb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001adb8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001adbc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001adc0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001adc4:	89 c6                	mov    esi,eax
c001adc6:	89 d7                	mov    edi,edx
c001adc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adca:	89 c8                	mov    eax,ecx
c001adcc:	89 fa                	mov    edx,edi
c001adce:	89 f3                	mov    ebx,esi
c001add0:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001add4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001add8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001addc:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001ade4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001adeb:	8d 50 01             	lea    edx,[eax+0x1]
c001adee:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001adf5:	8a 00                	mov    al,BYTE PTR [eax]
c001adf7:	0f b6 c0             	movzx  eax,al
c001adfa:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001adff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae06:	8d 50 01             	lea    edx,[eax+0x1]
c001ae09:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ae10:	8a 00                	mov    al,BYTE PTR [eax]
c001ae12:	0f b6 c0             	movzx  eax,al
c001ae15:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001ae1a:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001ae1f:	c1 e0 08             	shl    eax,0x8
c001ae22:	89 c2                	mov    edx,eax
c001ae24:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae28:	09 d0                	or     eax,edx
c001ae2a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ae31:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ae35:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001ae3d:	75 46                	jne    c001ae85 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ae3f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ae46:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae49:	66 3d dc 05          	cmp    ax,0x5dc
c001ae4d:	77 16                	ja     c001ae65 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001ae4f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ae56:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae59:	0f b7 c0             	movzx  eax,ax
c001ae5c:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001ae63:	eb 20                	jmp    c001ae85 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ae65:	83 ec 0c             	sub    esp,0xc
c001ae68:	68 88 c9 02 c0       	push   0xc002c988
c001ae6d:	e8 95 7c ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001ae72:	83 c4 10             	add    esp,0x10
c001ae75:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ae7c:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ae80:	e9 17 01 00 00       	jmp    c001af9c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001ae85:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae8c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ae93:	8b 12                	mov    edx,DWORD PTR [edx]
c001ae95:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae99:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001aea0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001aea4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aea8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aeac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aeb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aeb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aeb8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aebc:	89 c6                	mov    esi,eax
c001aebe:	89 d7                	mov    edi,edx
c001aec0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aec2:	89 c8                	mov    eax,ecx
c001aec4:	89 fa                	mov    edx,edi
c001aec6:	89 f3                	mov    ebx,esi
c001aec8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001aecc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aed0:	89 04 24             	mov    DWORD PTR [esp],eax
c001aed3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aeda:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001aee1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aee8:	8d 50 01             	lea    edx,[eax+0x1]
c001aeeb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aef2:	8a 00                	mov    al,BYTE PTR [eax]
c001aef4:	0f b6 c0             	movzx  eax,al
c001aef7:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001aefb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af02:	8d 50 01             	lea    edx,[eax+0x1]
c001af05:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001af0c:	8a 00                	mov    al,BYTE PTR [eax]
c001af0e:	0f b6 c0             	movzx  eax,al
c001af11:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001af15:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af1c:	8d 50 01             	lea    edx,[eax+0x1]
c001af1f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001af26:	8a 00                	mov    al,BYTE PTR [eax]
c001af28:	0f b6 c0             	movzx  eax,al
c001af2b:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001af2f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af36:	8d 50 01             	lea    edx,[eax+0x1]
c001af39:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001af40:	8a 00                	mov    al,BYTE PTR [eax]
c001af42:	0f b6 c0             	movzx  eax,al
c001af45:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001af49:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001af4d:	c1 e0 18             	shl    eax,0x18
c001af50:	89 c2                	mov    edx,eax
c001af52:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001af56:	c1 e0 10             	shl    eax,0x10
c001af59:	09 c2                	or     edx,eax
c001af5b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001af5f:	c1 e0 08             	shl    eax,0x8
c001af62:	09 d0                	or     eax,edx
c001af64:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001af68:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001af6c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af73:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001af77:	83 e8 04             	sub    eax,0x4
c001af7a:	83 ec 08             	sub    esp,0x8
c001af7d:	50                   	push   eax
c001af7e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001af82:	e8 f6 fa ff ff       	call   c001aa7d <Net::crc32Calc(unsigned char*, int)>
c001af87:	83 c4 10             	add    esp,0x10
c001af8a:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001af8e:	0f 94 c2             	sete   dl
c001af91:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af98:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001af9b:	90                   	nop
c001af9c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001afa3:	83 c4 70             	add    esp,0x70
c001afa6:	5b                   	pop    ebx
c001afa7:	5e                   	pop    esi
c001afa8:	5f                   	pop    edi
c001afa9:	c2 04 00             	ret    0x4

c001afac <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001afac:	55                   	push   ebp
c001afad:	57                   	push   edi
c001afae:	56                   	push   esi
c001afaf:	53                   	push   ebx
c001afb0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001afb6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001afbd:	8a 1e                	mov    bl,BYTE PTR [esi]
c001afbf:	8d 6e 01             	lea    ebp,[esi+0x1]
c001afc2:	80 fb 40             	cmp    bl,0x40
c001afc5:	75 1b                	jne    c001afe2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001afc7:	8a 16                	mov    dl,BYTE PTR [esi]
c001afc9:	84 d2                	test   dl,dl
c001afcb:	0f 84 f1 00 00 00    	je     c001b0c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001afd1:	8d 46 01             	lea    eax,[esi+0x1]
c001afd4:	80 fa 3a             	cmp    dl,0x3a
c001afd7:	74 04                	je     c001afdd <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001afd9:	89 c6                	mov    esi,eax
c001afdb:	eb ea                	jmp    c001afc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001afdd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001afe0:	89 c6                	mov    esi,eax
c001afe2:	50                   	push   eax
c001afe3:	6a 40                	push   0x40
c001afe5:	6a 00                	push   0x0
c001afe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001afeb:	50                   	push   eax
c001afec:	e8 5f 57 fe ff       	call   c0000750 <memset>
c001aff1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001aff8:	31 c0                	xor    eax,eax
c001affa:	83 c4 10             	add    esp,0x10
c001affd:	8a 0f                	mov    cl,BYTE PTR [edi]
c001afff:	84 c9                	test   cl,cl
c001b001:	0f 84 bb 00 00 00    	je     c001b0c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b007:	3d c7 00 00 00       	cmp    eax,0xc7
c001b00c:	0f 8f b0 00 00 00    	jg     c001b0c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b012:	80 f9 0a             	cmp    cl,0xa
c001b015:	0f 85 98 00 00 00    	jne    c001b0b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b01b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b020:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b024:	a8 df                	test   al,0xdf
c001b026:	0f 94 c1             	sete   cl
c001b029:	3c 23                	cmp    al,0x23
c001b02b:	0f 94 c2             	sete   dl
c001b02e:	08 d1                	or     cl,dl
c001b030:	75 4a                	jne    c001b07c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b032:	8d 50 f7             	lea    edx,[eax-0x9]
c001b035:	80 fa 01             	cmp    dl,0x1
c001b038:	76 42                	jbe    c001b07c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b03a:	3c 5b                	cmp    al,0x5b
c001b03c:	75 42                	jne    c001b080 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b03e:	80 fb 40             	cmp    bl,0x40
c001b041:	75 39                	jne    c001b07c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b043:	83 ec 0c             	sub    esp,0xc
c001b046:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b04a:	52                   	push   edx
c001b04b:	e8 1c 57 fe ff       	call   c000076c <strlen>
c001b050:	83 c4 10             	add    esp,0x10
c001b053:	83 f8 3f             	cmp    eax,0x3f
c001b056:	77 6a                	ja     c001b0c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b058:	50                   	push   eax
c001b059:	50                   	push   eax
c001b05a:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b05e:	52                   	push   edx
c001b05f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b063:	52                   	push   edx
c001b064:	e8 a3 57 fe ff       	call   c000080c <strcpy>
c001b069:	58                   	pop    eax
c001b06a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b06e:	52                   	push   edx
c001b06f:	e8 f8 56 fe ff       	call   c000076c <strlen>
c001b074:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b079:	83 c4 10             	add    esp,0x10
c001b07c:	31 d2                	xor    edx,edx
c001b07e:	eb 3a                	jmp    c001b0ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b080:	80 fb 40             	cmp    bl,0x40
c001b083:	74 06                	je     c001b08b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b085:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b089:	eb 20                	jmp    c001b0ab <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b08b:	50                   	push   eax
c001b08c:	50                   	push   eax
c001b08d:	55                   	push   ebp
c001b08e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b092:	50                   	push   eax
c001b093:	e8 00 58 fe ff       	call   c0000898 <strcmp>
c001b098:	83 c4 10             	add    esp,0x10
c001b09b:	85 c0                	test   eax,eax
c001b09d:	75 dd                	jne    c001b07c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b09f:	eb e4                	jmp    c001b085 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b0a1:	8d 50 01             	lea    edx,[eax+0x1]
c001b0a4:	80 f9 3d             	cmp    cl,0x3d
c001b0a7:	74 1d                	je     c001b0c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b0a9:	89 d0                	mov    eax,edx
c001b0ab:	8a 08                	mov    cl,BYTE PTR [eax]
c001b0ad:	84 c9                	test   cl,cl
c001b0af:	75 f0                	jne    c001b0a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b0b1:	eb 0f                	jmp    c001b0c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0b3:	8d 50 01             	lea    edx,[eax+0x1]
c001b0b6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b0ba:	47                   	inc    edi
c001b0bb:	89 d0                	mov    eax,edx
c001b0bd:	e9 3b ff ff ff       	jmp    c001affd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b0c2:	31 c0                	xor    eax,eax
c001b0c4:	eb 33                	jmp    c001b0f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b0c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b0ca:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b0cd:	50                   	push   eax
c001b0ce:	50                   	push   eax
c001b0cf:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b0d3:	50                   	push   eax
c001b0d4:	56                   	push   esi
c001b0d5:	e8 be 57 fe ff       	call   c0000898 <strcmp>
c001b0da:	83 c4 10             	add    esp,0x10
c001b0dd:	85 c0                	test   eax,eax
c001b0df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0e3:	75 97                	jne    c001b07c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0e5:	51                   	push   ecx
c001b0e6:	51                   	push   ecx
c001b0e7:	52                   	push   edx
c001b0e8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b0ef:	e8 18 57 fe ff       	call   c000080c <strcpy>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	b0 01                	mov    al,0x1
c001b0f9:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b0ff:	5b                   	pop    ebx
c001b100:	5e                   	pop    esi
c001b101:	5f                   	pop    edi
c001b102:	5d                   	pop    ebp
c001b103:	c3                   	ret    

c001b104 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b104:	57                   	push   edi
c001b105:	56                   	push   esi
c001b106:	53                   	push   ebx
c001b107:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b10d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b114:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b11b:	53                   	push   ebx
c001b11c:	e8 4b 56 fe ff       	call   c000076c <strlen>
c001b121:	89 34 24             	mov    DWORD PTR [esp],esi
c001b124:	89 c7                	mov    edi,eax
c001b126:	e8 41 56 fe ff       	call   c000076c <strlen>
c001b12b:	83 c4 10             	add    esp,0x10
c001b12e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b132:	3d ff 00 00 00       	cmp    eax,0xff
c001b137:	0f 87 d3 00 00 00    	ja     c001b210 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b13d:	57                   	push   edi
c001b13e:	57                   	push   edi
c001b13f:	56                   	push   esi
c001b140:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b144:	56                   	push   esi
c001b145:	e8 c2 56 fe ff       	call   c000080c <strcpy>
c001b14a:	58                   	pop    eax
c001b14b:	5a                   	pop    edx
c001b14c:	68 dd ce 02 c0       	push   0xc002cedd
c001b151:	56                   	push   esi
c001b152:	e8 f5 57 fe ff       	call   c000094c <strcat>
c001b157:	59                   	pop    ecx
c001b158:	5f                   	pop    edi
c001b159:	53                   	push   ebx
c001b15a:	56                   	push   esi
c001b15b:	e8 ec 57 fe ff       	call   c000094c <strcat>
c001b160:	58                   	pop    eax
c001b161:	5a                   	pop    edx
c001b162:	68 d4 c9 02 c0       	push   0xc002c9d4
c001b167:	56                   	push   esi
c001b168:	e8 df 57 fe ff       	call   c000094c <strcat>
c001b16d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b174:	e8 13 47 ff ff       	call   c000f88c <malloc>
c001b179:	83 c4 0c             	add    esp,0xc
c001b17c:	89 c3                	mov    ebx,eax
c001b17e:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c001b184:	56                   	push   esi
c001b185:	50                   	push   eax
c001b186:	e8 db 7e ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001b18b:	83 c4 10             	add    esp,0x10
c001b18e:	85 db                	test   ebx,ebx
c001b190:	74 7e                	je     c001b210 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b192:	51                   	push   ecx
c001b193:	51                   	push   ecx
c001b194:	6a 01                	push   0x1
c001b196:	53                   	push   ebx
c001b197:	e8 2e 7f ff ff       	call   c00130ca <File::open(FileOpenMode)>
c001b19c:	83 c4 10             	add    esp,0x10
c001b19f:	85 c0                	test   eax,eax
c001b1a1:	74 08                	je     c001b1ab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b1a3:	83 ec 0c             	sub    esp,0xc
c001b1a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1a8:	53                   	push   ebx
c001b1a9:	eb 5f                	jmp    c001b20a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b1ab:	52                   	push   edx
c001b1ac:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b1b0:	50                   	push   eax
c001b1b1:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b1b5:	50                   	push   eax
c001b1b6:	53                   	push   ebx
c001b1b7:	e8 ba 81 ff ff       	call   c0013376 <File::stat(unsigned long long*, bool*)>
c001b1bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b1c0:	83 c4 10             	add    esp,0x10
c001b1c3:	89 c1                	mov    ecx,eax
c001b1c5:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b1c9:	74 31                	je     c001b1fc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b1cb:	83 ec 0c             	sub    esp,0xc
c001b1ce:	50                   	push   eax
c001b1cf:	e8 b8 46 ff ff       	call   c000f88c <malloc>
c001b1d4:	89 c6                	mov    esi,eax
c001b1d6:	58                   	pop    eax
c001b1d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1d9:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b1dd:	52                   	push   edx
c001b1de:	56                   	push   esi
c001b1df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b1e7:	53                   	push   ebx
c001b1e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b1eb:	83 c4 20             	add    esp,0x20
c001b1ee:	85 c0                	test   eax,eax
c001b1f0:	75 0a                	jne    c001b1fc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b1f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b1fa:	74 18                	je     c001b214 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b1fc:	83 ec 0c             	sub    esp,0xc
c001b1ff:	53                   	push   ebx
c001b200:	e8 23 7f ff ff       	call   c0013128 <File::close()>
c001b205:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b207:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b20a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b20d:	83 c4 10             	add    esp,0x10
c001b210:	31 c0                	xor    eax,eax
c001b212:	eb 3b                	jmp    c001b24f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b214:	83 ec 0c             	sub    esp,0xc
c001b217:	53                   	push   ebx
c001b218:	e8 0b 7f ff ff       	call   c0013128 <File::close()>
c001b21d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b21f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b222:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b225:	83 c4 0c             	add    esp,0xc
c001b228:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b22f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b236:	56                   	push   esi
c001b237:	e8 70 fd ff ff       	call   c001afac <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b23c:	89 34 24             	mov    DWORD PTR [esp],esi
c001b23f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b243:	e8 54 46 ff ff       	call   c000f89c <free>
c001b248:	83 c4 10             	add    esp,0x10
c001b24b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b24f:	81 c4 20 01 00 00    	add    esp,0x120
c001b255:	5b                   	pop    ebx
c001b256:	5e                   	pop    esi
c001b257:	5f                   	pop    edi
c001b258:	c3                   	ret    

c001b259 <Reg::getLine(char*, char*, char*)>:
c001b259:	57                   	push   edi
c001b25a:	56                   	push   esi
c001b25b:	53                   	push   ebx
c001b25c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b260:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b264:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b268:	57                   	push   edi
c001b269:	56                   	push   esi
c001b26a:	53                   	push   ebx
c001b26b:	68 d9 c9 02 c0       	push   0xc002c9d9
c001b270:	e8 8f fe ff ff       	call   c001b104 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b275:	83 c4 10             	add    esp,0x10
c001b278:	84 c0                	test   al,al
c001b27a:	75 10                	jne    c001b28c <Reg::getLine(char*, char*, char*)+0x33>
c001b27c:	57                   	push   edi
c001b27d:	56                   	push   esi
c001b27e:	53                   	push   ebx
c001b27f:	68 fe c9 02 c0       	push   0xc002c9fe
c001b284:	e8 7b fe ff ff       	call   c001b104 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b289:	83 c4 10             	add    esp,0x10
c001b28c:	5b                   	pop    ebx
c001b28d:	5e                   	pop    esi
c001b28e:	5f                   	pop    edi
c001b28f:	c3                   	ret    

c001b290 <Reg::readInt(char*, char*, int*)>:
c001b290:	55                   	push   ebp
c001b291:	57                   	push   edi
c001b292:	56                   	push   esi
c001b293:	53                   	push   ebx
c001b294:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b29a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b29e:	57                   	push   edi
c001b29f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2a6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2ad:	e8 a7 ff ff ff       	call   c001b259 <Reg::getLine(char*, char*, char*)>
c001b2b2:	83 c4 10             	add    esp,0x10
c001b2b5:	84 c0                	test   al,al
c001b2b7:	0f 84 b3 00 00 00    	je     c001b370 <Reg::readInt(char*, char*, int*)+0xe0>
c001b2bd:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b2c1:	80 fa 2b             	cmp    dl,0x2b
c001b2c4:	74 0c                	je     c001b2d2 <Reg::readInt(char*, char*, int*)+0x42>
c001b2c6:	80 fa 2d             	cmp    dl,0x2d
c001b2c9:	75 0e                	jne    c001b2d9 <Reg::readInt(char*, char*, int*)+0x49>
c001b2cb:	ba 01 00 00 00       	mov    edx,0x1
c001b2d0:	eb 0b                	jmp    c001b2dd <Reg::readInt(char*, char*, int*)+0x4d>
c001b2d2:	ba 01 00 00 00       	mov    edx,0x1
c001b2d7:	eb 02                	jmp    c001b2db <Reg::readInt(char*, char*, int*)+0x4b>
c001b2d9:	31 d2                	xor    edx,edx
c001b2db:	31 c0                	xor    eax,eax
c001b2dd:	be 0a 00 00 00       	mov    esi,0xa
c001b2e2:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b2e7:	75 20                	jne    c001b309 <Reg::readInt(char*, char*, int*)+0x79>
c001b2e9:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b2ed:	80 f9 78             	cmp    cl,0x78
c001b2f0:	75 0a                	jne    c001b2fc <Reg::readInt(char*, char*, int*)+0x6c>
c001b2f2:	83 c2 02             	add    edx,0x2
c001b2f5:	be 10 00 00 00       	mov    esi,0x10
c001b2fa:	eb 0d                	jmp    c001b309 <Reg::readInt(char*, char*, int*)+0x79>
c001b2fc:	80 f9 62             	cmp    cl,0x62
c001b2ff:	75 08                	jne    c001b309 <Reg::readInt(char*, char*, int*)+0x79>
c001b301:	83 c2 02             	add    edx,0x2
c001b304:	be 02 00 00 00       	mov    esi,0x2
c001b309:	01 d7                	add    edi,edx
c001b30b:	31 d2                	xor    edx,edx
c001b30d:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b30f:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b313:	80 fb 0d             	cmp    bl,0xd
c001b316:	0f 94 c3             	sete   bl
c001b319:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b31e:	0f 94 c1             	sete   cl
c001b321:	08 cb                	or     bl,cl
c001b323:	75 3a                	jne    c001b35f <Reg::readInt(char*, char*, int*)+0xcf>
c001b325:	0f af d6             	imul   edx,esi
c001b328:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b32d:	83 fe 10             	cmp    esi,0x10
c001b330:	75 26                	jne    c001b358 <Reg::readInt(char*, char*, int*)+0xc8>
c001b332:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b336:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b339:	89 e9                	mov    ecx,ebp
c001b33b:	80 f9 05             	cmp    cl,0x5
c001b33e:	77 06                	ja     c001b346 <Reg::readInt(char*, char*, int*)+0xb6>
c001b340:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b344:	eb 16                	jmp    c001b35c <Reg::readInt(char*, char*, int*)+0xcc>
c001b346:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b34a:	83 e9 61             	sub    ecx,0x61
c001b34d:	80 f9 05             	cmp    cl,0x5
c001b350:	77 06                	ja     c001b358 <Reg::readInt(char*, char*, int*)+0xc8>
c001b352:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b356:	eb 04                	jmp    c001b35c <Reg::readInt(char*, char*, int*)+0xcc>
c001b358:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b35c:	47                   	inc    edi
c001b35d:	eb ae                	jmp    c001b30d <Reg::readInt(char*, char*, int*)+0x7d>
c001b35f:	84 c0                	test   al,al
c001b361:	74 02                	je     c001b365 <Reg::readInt(char*, char*, int*)+0xd5>
c001b363:	f7 da                	neg    edx
c001b365:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b36c:	89 10                	mov    DWORD PTR [eax],edx
c001b36e:	88 d8                	mov    al,bl
c001b370:	81 c4 ec 00 00 00    	add    esp,0xec
c001b376:	5b                   	pop    ebx
c001b377:	5e                   	pop    esi
c001b378:	5f                   	pop    edi
c001b379:	5d                   	pop    ebp
c001b37a:	c3                   	ret    

c001b37b <Reg::readString(char*, char*, char*, int)>:
c001b37b:	57                   	push   edi
c001b37c:	56                   	push   esi
c001b37d:	53                   	push   ebx
c001b37e:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b384:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b38b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b38f:	57                   	push   edi
c001b390:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b397:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b39e:	e8 b6 fe ff ff       	call   c001b259 <Reg::getLine(char*, char*, char*)>
c001b3a3:	83 c4 10             	add    esp,0x10
c001b3a6:	89 c6                	mov    esi,eax
c001b3a8:	84 c0                	test   al,al
c001b3aa:	74 44                	je     c001b3f0 <Reg::readString(char*, char*, char*, int)+0x75>
c001b3ac:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b3b3:	31 c0                	xor    eax,eax
c001b3b5:	4a                   	dec    edx
c001b3b6:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b3b9:	84 c9                	test   cl,cl
c001b3bb:	74 0f                	je     c001b3cc <Reg::readString(char*, char*, char*, int)+0x51>
c001b3bd:	39 c2                	cmp    edx,eax
c001b3bf:	7e 0b                	jle    c001b3cc <Reg::readString(char*, char*, char*, int)+0x51>
c001b3c1:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b3c4:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b3c9:	40                   	inc    eax
c001b3ca:	eb ea                	jmp    c001b3b6 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b3cc:	83 ec 0c             	sub    esp,0xc
c001b3cf:	53                   	push   ebx
c001b3d0:	e8 97 53 fe ff       	call   c000076c <strlen>
c001b3d5:	83 c4 10             	add    esp,0x10
c001b3d8:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b3dd:	75 11                	jne    c001b3f0 <Reg::readString(char*, char*, char*, int)+0x75>
c001b3df:	83 ec 0c             	sub    esp,0xc
c001b3e2:	53                   	push   ebx
c001b3e3:	e8 84 53 fe ff       	call   c000076c <strlen>
c001b3e8:	83 c4 10             	add    esp,0x10
c001b3eb:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b3f0:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b3f6:	89 f0                	mov    eax,esi
c001b3f8:	5b                   	pop    ebx
c001b3f9:	5e                   	pop    esi
c001b3fa:	5f                   	pop    edi
c001b3fb:	c3                   	ret    

c001b3fc <Reg::readBool(char*, char*, bool*)>:
c001b3fc:	83 ec 20             	sub    esp,0x20
c001b3ff:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b403:	50                   	push   eax
c001b404:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b408:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b40c:	e8 7f fe ff ff       	call   c001b290 <Reg::readInt(char*, char*, int*)>
c001b411:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b416:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b41a:	0f 95 02             	setne  BYTE PTR [edx]
c001b41d:	83 c4 2c             	add    esp,0x2c
c001b420:	c3                   	ret    

c001b421 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b421:	53                   	push   ebx
c001b422:	83 ec 1c             	sub    esp,0x1c
c001b425:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b429:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b42d:	50                   	push   eax
c001b42e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b432:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b436:	e8 c1 ff ff ff       	call   c001b3fc <Reg::readBool(char*, char*, bool*)>
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	84 c0                	test   al,al
c001b440:	74 04                	je     c001b446 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b442:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b446:	88 d8                	mov    al,bl
c001b448:	83 c4 18             	add    esp,0x18
c001b44b:	5b                   	pop    ebx
c001b44c:	c3                   	ret    

c001b44d <Reg::readIntWithDefault(char*, char*, int)>:
c001b44d:	53                   	push   ebx
c001b44e:	83 ec 1c             	sub    esp,0x1c
c001b451:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b455:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b459:	50                   	push   eax
c001b45a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b45e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b462:	e8 29 fe ff ff       	call   c001b290 <Reg::readInt(char*, char*, int*)>
c001b467:	83 c4 10             	add    esp,0x10
c001b46a:	84 c0                	test   al,al
c001b46c:	74 04                	je     c001b472 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b46e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b472:	89 d8                	mov    eax,ebx
c001b474:	83 c4 18             	add    esp,0x18
c001b477:	5b                   	pop    ebx
c001b478:	c3                   	ret    

c001b479 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b479:	57                   	push   edi
c001b47a:	56                   	push   esi
c001b47b:	56                   	push   esi
c001b47c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b480:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b484:	56                   	push   esi
c001b485:	57                   	push   edi
c001b486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b48e:	e8 e8 fe ff ff       	call   c001b37b <Reg::readString(char*, char*, char*, int)>
c001b493:	83 c4 10             	add    esp,0x10
c001b496:	84 c0                	test   al,al
c001b498:	75 1a                	jne    c001b4b4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b49a:	51                   	push   ecx
c001b49b:	56                   	push   esi
c001b49c:	6a 00                	push   0x0
c001b49e:	57                   	push   edi
c001b49f:	e8 ac 52 fe ff       	call   c0000750 <memset>
c001b4a4:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b4a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b4ad:	83 c4 10             	add    esp,0x10
c001b4b0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b4b4:	89 f8                	mov    eax,edi
c001b4b6:	5a                   	pop    edx
c001b4b7:	5e                   	pop    esi
c001b4b8:	5f                   	pop    edi
c001b4b9:	c3                   	ret    

c001b4ba <Sys::eject(regs*)>:
c001b4ba:	83 ec 0c             	sub    esp,0xc
c001b4bd:	83 ca ff             	or     edx,0xffffffff
c001b4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4c4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b4c7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b4cc:	83 e9 41             	sub    ecx,0x41
c001b4cf:	83 f9 19             	cmp    ecx,0x19
c001b4d2:	77 18                	ja     c001b4ec <Sys::eject(regs*)+0x32>
c001b4d4:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c001b4db:	85 c9                	test   ecx,ecx
c001b4dd:	74 0d                	je     c001b4ec <Sys::eject(regs*)+0x32>
c001b4df:	83 ec 0c             	sub    esp,0xc
c001b4e2:	51                   	push   ecx
c001b4e3:	e8 32 af ff ff       	call   c001641a <LogicalDisk::eject()>
c001b4e8:	83 c4 10             	add    esp,0x10
c001b4eb:	99                   	cdq    
c001b4ec:	83 c4 0c             	add    esp,0xc
c001b4ef:	c3                   	ret    

c001b4f0 <Sys::exit(regs*)>:
c001b4f0:	83 ec 18             	sub    esp,0x18
c001b4f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4f7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4fa:	e8 7e 38 00 00       	call   c001ed7d <terminateTask(int)>
c001b4ff:	83 c8 ff             	or     eax,0xffffffff
c001b502:	83 c4 1c             	add    esp,0x1c
c001b505:	89 c2                	mov    edx,eax
c001b507:	c3                   	ret    

c001b508 <Sys::getCwd(regs*)>:
c001b508:	83 ec 10             	sub    esp,0x10
c001b50b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b50f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b512:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b515:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b51a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b51d:	e8 46 79 ff ff       	call   c0012e68 <Fs::getcwd(Process*, char*, int)>
c001b522:	83 c4 1c             	add    esp,0x1c
c001b525:	99                   	cdq    
c001b526:	c3                   	ret    

c001b527 <Sys::getPID(regs*)>:
c001b527:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b52c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b52f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b531:	99                   	cdq    
c001b532:	c3                   	ret    

c001b533 <Sys::getRAMData(regs*)>:
c001b533:	8b 0d f4 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1f4
c001b539:	6b 05 f0 f1 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f1f0,0x64
c001b540:	99                   	cdq    
c001b541:	f7 f9                	idiv   ecx
c001b543:	c1 e0 18             	shl    eax,0x18
c001b546:	09 c8                	or     eax,ecx
c001b548:	99                   	cdq    
c001b549:	c3                   	ret    

c001b54a <Sys::getVGAPtr(regs*)>:
c001b54a:	55                   	push   ebp
c001b54b:	57                   	push   edi
c001b54c:	56                   	push   esi
c001b54d:	53                   	push   ebx
c001b54e:	83 ec 18             	sub    esp,0x18
c001b551:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b555:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b558:	e8 02 33 00 00       	call   c001e85f <Thr::processFromPID(int)>
c001b55d:	83 c4 10             	add    esp,0x10
c001b560:	89 c1                	mov    ecx,eax
c001b562:	b8 01 00 00 00       	mov    eax,0x1
c001b567:	85 c9                	test   ecx,ecx
c001b569:	74 59                	je     c001b5c4 <Sys::getVGAPtr(regs*)+0x7a>
c001b56b:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b571:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b575:	74 0c                	je     c001b583 <Sys::getVGAPtr(regs*)+0x39>
c001b577:	83 ec 0c             	sub    esp,0xc
c001b57a:	53                   	push   ebx
c001b57b:	e8 aa 53 ff ff       	call   c001092a <setActiveTerminal(VgaText*)>
c001b580:	83 c4 10             	add    esp,0x10
c001b583:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b586:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b589:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b58e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b590:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b593:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b596:	81 c3 82 00 00 00    	add    ebx,0x82
c001b59c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b5a2:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b5a5:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b5a8:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b5ae:	50                   	push   eax
c001b5af:	50                   	push   eax
c001b5b0:	53                   	push   ebx
c001b5b1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b5b4:	05 a8 0f 00 00       	add    eax,0xfa8
c001b5b9:	50                   	push   eax
c001b5ba:	e8 4d 52 fe ff       	call   c000080c <strcpy>
c001b5bf:	83 c4 10             	add    esp,0x10
c001b5c2:	31 c0                	xor    eax,eax
c001b5c4:	83 c4 0c             	add    esp,0xc
c001b5c7:	31 d2                	xor    edx,edx
c001b5c9:	5b                   	pop    ebx
c001b5ca:	5e                   	pop    esi
c001b5cb:	5f                   	pop    edi
c001b5cc:	5d                   	pop    ebp
c001b5cd:	c3                   	ret    

c001b5ce <Sys::loadDLL(regs*)>:
c001b5ce:	56                   	push   esi
c001b5cf:	53                   	push   ebx
c001b5d0:	31 d2                	xor    edx,edx
c001b5d2:	51                   	push   ecx
c001b5d3:	b8 01 00 00 00       	mov    eax,0x1
c001b5d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b5dc:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b5e0:	0f 84 8c 00 00 00    	je     c001b672 <Sys::loadDLL(regs*)+0xa4>
c001b5e6:	83 ec 0c             	sub    esp,0xc
c001b5e9:	68 14 01 00 00       	push   0x114
c001b5ee:	e8 99 42 ff ff       	call   c000f88c <malloc>
c001b5f3:	83 c4 0c             	add    esp,0xc
c001b5f6:	89 c3                	mov    ebx,eax
c001b5f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5fd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b600:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b603:	53                   	push   ebx
c001b604:	e8 5d 7a ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001b609:	83 c4 10             	add    esp,0x10
c001b60c:	31 d2                	xor    edx,edx
c001b60e:	b8 02 00 00 00       	mov    eax,0x2
c001b613:	85 db                	test   ebx,ebx
c001b615:	74 5b                	je     c001b672 <Sys::loadDLL(regs*)+0xa4>
c001b617:	83 ec 0c             	sub    esp,0xc
c001b61a:	53                   	push   ebx
c001b61b:	e8 18 7d ff ff       	call   c0013338 <File::exists()>
c001b620:	83 c4 10             	add    esp,0x10
c001b623:	84 c0                	test   al,al
c001b625:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b627:	75 11                	jne    c001b63a <Sys::loadDLL(regs*)+0x6c>
c001b629:	83 ec 0c             	sub    esp,0xc
c001b62c:	53                   	push   ebx
c001b62d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b630:	83 c4 10             	add    esp,0x10
c001b633:	b8 03 00 00 00       	mov    eax,0x3
c001b638:	eb 36                	jmp    c001b670 <Sys::loadDLL(regs*)+0xa2>
c001b63a:	83 ec 0c             	sub    esp,0xc
c001b63d:	53                   	push   ebx
c001b63e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b641:	58                   	pop    eax
c001b642:	5a                   	pop    edx
c001b643:	6a 00                	push   0x0
c001b645:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b648:	e8 1e 24 00 00       	call   c001da6b <Thr::loadDLL(char const*, bool)>
c001b64d:	83 c4 10             	add    esp,0x10
c001b650:	89 c1                	mov    ecx,eax
c001b652:	31 d2                	xor    edx,edx
c001b654:	b8 04 00 00 00       	mov    eax,0x4
c001b659:	85 c9                	test   ecx,ecx
c001b65b:	74 15                	je     c001b672 <Sys::loadDLL(regs*)+0xa4>
c001b65d:	53                   	push   ebx
c001b65e:	53                   	push   ebx
c001b65f:	ff 35 a8 f1 02 c0    	push   DWORD PTR ds:0xc002f1a8
c001b665:	51                   	push   ecx
c001b666:	e8 2b 26 00 00       	call   c001dc96 <Thr::executeDLL(unsigned long, void*)>
c001b66b:	83 c4 10             	add    esp,0x10
c001b66e:	31 c0                	xor    eax,eax
c001b670:	31 d2                	xor    edx,edx
c001b672:	59                   	pop    ecx
c001b673:	5b                   	pop    ebx
c001b674:	5e                   	pop    esi
c001b675:	c3                   	ret    

c001b676 <Sys::read(regs*)>:
c001b676:	57                   	push   edi
c001b677:	56                   	push   esi
c001b678:	53                   	push   ebx
c001b679:	83 ec 10             	sub    esp,0x10
c001b67c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b680:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b683:	83 f8 02             	cmp    eax,0x2
c001b686:	77 10                	ja     c001b698 <Sys::read(regs*)+0x22>
c001b688:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b68d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b690:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b696:	eb 0e                	jmp    c001b6a6 <Sys::read(regs*)+0x30>
c001b698:	83 ec 0c             	sub    esp,0xc
c001b69b:	50                   	push   eax
c001b69c:	e8 0a 5f ff ff       	call   c00115ab <getFromFileDescriptor(int)>
c001b6a1:	83 c4 10             	add    esp,0x10
c001b6a4:	89 c1                	mov    ecx,eax
c001b6a6:	83 c8 ff             	or     eax,0xffffffff
c001b6a9:	85 c9                	test   ecx,ecx
c001b6ab:	89 c2                	mov    edx,eax
c001b6ad:	74 28                	je     c001b6d7 <Sys::read(regs*)+0x61>
c001b6af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6b7:	31 ff                	xor    edi,edi
c001b6b9:	83 ec 0c             	sub    esp,0xc
c001b6bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6be:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6c2:	52                   	push   edx
c001b6c3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6c6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6c9:	57                   	push   edi
c001b6ca:	56                   	push   esi
c001b6cb:	51                   	push   ecx
c001b6cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b6cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6d3:	83 c4 20             	add    esp,0x20
c001b6d6:	99                   	cdq    
c001b6d7:	83 c4 10             	add    esp,0x10
c001b6da:	5b                   	pop    ebx
c001b6db:	5e                   	pop    esi
c001b6dc:	5f                   	pop    edi
c001b6dd:	c3                   	ret    

c001b6de <Sys::sbrk(regs*)>:
c001b6de:	56                   	push   esi
c001b6df:	53                   	push   ebx
c001b6e0:	50                   	push   eax
c001b6e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6ed:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b6f0:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b6f6:	85 db                	test   ebx,ebx
c001b6f8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b6fb:	74 02                	je     c001b6ff <Sys::sbrk(regs*)+0x21>
c001b6fd:	79 06                	jns    c001b705 <Sys::sbrk(regs*)+0x27>
c001b6ff:	89 f0                	mov    eax,esi
c001b701:	31 d2                	xor    edx,edx
c001b703:	eb 2a                	jmp    c001b72f <Sys::sbrk(regs*)+0x51>
c001b705:	83 c8 ff             	or     eax,0xffffffff
c001b708:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b70e:	89 c2                	mov    edx,eax
c001b710:	77 1d                	ja     c001b72f <Sys::sbrk(regs*)+0x51>
c001b712:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b718:	50                   	push   eax
c001b719:	c1 ea 0c             	shr    edx,0xc
c001b71c:	68 07 0c 00 00       	push   0xc07
c001b721:	52                   	push   edx
c001b722:	51                   	push   ecx
c001b723:	e8 12 69 ff ff       	call   c001203a <VAS::allocatePages(int, int)>
c001b728:	89 f0                	mov    eax,esi
c001b72a:	31 d2                	xor    edx,edx
c001b72c:	83 c4 10             	add    esp,0x10
c001b72f:	59                   	pop    ecx
c001b730:	5b                   	pop    ebx
c001b731:	5e                   	pop    esi
c001b732:	c3                   	ret    

c001b733 <Sys::setCwd(regs*)>:
c001b733:	83 ec 14             	sub    esp,0x14
c001b736:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b73a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b73d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b742:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b745:	e8 8d 7c ff ff       	call   c00133d7 <Fs::setcwd(Process*, char*)>
c001b74a:	83 c4 1c             	add    esp,0x1c
c001b74d:	99                   	cdq    
c001b74e:	c3                   	ret    

c001b74f <Sys::setTime(regs*)>:
c001b74f:	55                   	push   ebp
c001b750:	31 d2                	xor    edx,edx
c001b752:	57                   	push   edi
c001b753:	bf 18 00 00 00       	mov    edi,0x18
c001b758:	56                   	push   esi
c001b759:	53                   	push   ebx
c001b75a:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b75f:	83 ec 30             	sub    esp,0x30
c001b762:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b766:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b769:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b76c:	f7 f3                	div    ebx
c001b76e:	89 d6                	mov    esi,edx
c001b770:	31 d2                	xor    edx,edx
c001b772:	f7 f3                	div    ebx
c001b774:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b777:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b77b:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b780:	31 d2                	xor    edx,edx
c001b782:	f7 f3                	div    ebx
c001b784:	31 d2                	xor    edx,edx
c001b786:	bb 0c 00 00 00       	mov    ebx,0xc
c001b78b:	f7 f7                	div    edi
c001b78d:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b790:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b794:	0f b7 cd             	movzx  ecx,bp
c001b797:	56                   	push   esi
c001b798:	89 c7                	mov    edi,eax
c001b79a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b79e:	c1 e6 10             	shl    esi,0x10
c001b7a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7a5:	83 e7 1f             	and    edi,0x1f
c001b7a8:	51                   	push   ecx
c001b7a9:	47                   	inc    edi
c001b7aa:	c1 e8 05             	shr    eax,0x5
c001b7ad:	31 d2                	xor    edx,edx
c001b7af:	f7 f3                	div    ebx
c001b7b1:	31 db                	xor    ebx,ebx
c001b7b3:	52                   	push   edx
c001b7b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b7b8:	57                   	push   edi
c001b7b9:	68 19 ca 02 c0       	push   0xc002ca19
c001b7be:	e8 44 73 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001b7c3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b7c7:	89 f8                	mov    eax,edi
c001b7c9:	31 c9                	xor    ecx,ecx
c001b7cb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b7cf:	88 c1                	mov    cl,al
c001b7d1:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b7d7:	88 d5                	mov    ch,dl
c001b7d9:	c1 e0 10             	shl    eax,0x10
c001b7dc:	0f b7 d1             	movzx  edx,cx
c001b7df:	09 c2                	or     edx,eax
c001b7e1:	89 d8                	mov    eax,ebx
c001b7e3:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b7e8:	09 f0                	or     eax,esi
c001b7ea:	89 c3                	mov    ebx,eax
c001b7ec:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b7f0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b7f4:	83 c4 18             	add    esp,0x18
c001b7f7:	53                   	push   ebx
c001b7f8:	52                   	push   edx
c001b7f9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b7fd:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b801:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b805:	e8 ef 82 ff ff       	call   c0013af9 <datetimeToSeconds(datetime_t)>
c001b80a:	83 c4 0c             	add    esp,0xc
c001b80d:	52                   	push   edx
c001b80e:	50                   	push   eax
c001b80f:	56                   	push   esi
c001b810:	e8 6b 84 ff ff       	call   c0013c80 <secondsToDatetime(unsigned long long)>
c001b815:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b819:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b81d:	51                   	push   ecx
c001b81e:	89 d6                	mov    esi,edx
c001b820:	51                   	push   ecx
c001b821:	c1 ee 10             	shr    esi,0x10
c001b824:	89 f3                	mov    ebx,esi
c001b826:	0f b6 f3             	movzx  esi,bl
c001b829:	56                   	push   esi
c001b82a:	0f b6 f6             	movzx  esi,dh
c001b82d:	0f b6 d2             	movzx  edx,dl
c001b830:	56                   	push   esi
c001b831:	52                   	push   edx
c001b832:	89 c2                	mov    edx,eax
c001b834:	c1 ea 10             	shr    edx,0x10
c001b837:	52                   	push   edx
c001b838:	0f b6 d4             	movzx  edx,ah
c001b83b:	0f b6 c0             	movzx  eax,al
c001b83e:	52                   	push   edx
c001b83f:	50                   	push   eax
c001b840:	68 35 ca 02 c0       	push   0xc002ca35
c001b845:	e8 bd 72 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001b84a:	83 c4 2c             	add    esp,0x2c
c001b84d:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001b852:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b856:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b85a:	53                   	push   ebx
c001b85b:	51                   	push   ecx
c001b85c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b862:	e8 b9 83 ff ff       	call   c0013c20 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b867:	83 f0 01             	xor    eax,0x1
c001b86a:	31 d2                	xor    edx,edx
c001b86c:	0f b6 c0             	movzx  eax,al
c001b86f:	83 c4 3c             	add    esp,0x3c
c001b872:	5b                   	pop    ebx
c001b873:	5e                   	pop    esi
c001b874:	5f                   	pop    edi
c001b875:	5d                   	pop    ebp
c001b876:	c3                   	ret    

c001b877 <Sys::timezone(regs*)>:
c001b877:	53                   	push   ebx
c001b878:	83 ec 08             	sub    esp,0x8
c001b87b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b87f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b883:	75 17                	jne    c001b89c <Sys::timezone(regs*)+0x25>
c001b885:	83 ec 0c             	sub    esp,0xc
c001b888:	68 51 ca 02 c0       	push   0xc002ca51
c001b88d:	e8 75 72 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001b892:	83 c8 ff             	or     eax,0xffffffff
c001b895:	83 c4 10             	add    esp,0x10
c001b898:	89 c2                	mov    edx,eax
c001b89a:	eb 20                	jmp    c001b8bc <Sys::timezone(regs*)+0x45>
c001b89c:	83 ec 0c             	sub    esp,0xc
c001b89f:	68 89 ca 02 c0       	push   0xc002ca89
c001b8a4:	e8 5e 72 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001b8a9:	58                   	pop    eax
c001b8aa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b8ad:	e8 d0 80 ff ff       	call   c0013982 <User::loadClockSettings(int)>
c001b8b2:	83 c4 10             	add    esp,0x10
c001b8b5:	b8 01 00 00 00       	mov    eax,0x1
c001b8ba:	31 d2                	xor    edx,edx
c001b8bc:	83 c4 08             	add    esp,0x8
c001b8bf:	5b                   	pop    ebx
c001b8c0:	c3                   	ret    

c001b8c1 <Sys::write(regs*)>:
c001b8c1:	57                   	push   edi
c001b8c2:	56                   	push   esi
c001b8c3:	53                   	push   ebx
c001b8c4:	83 ec 10             	sub    esp,0x10
c001b8c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8ce:	83 f8 02             	cmp    eax,0x2
c001b8d1:	77 10                	ja     c001b8e3 <Sys::write(regs*)+0x22>
c001b8d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8db:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b8e1:	eb 0e                	jmp    c001b8f1 <Sys::write(regs*)+0x30>
c001b8e3:	83 ec 0c             	sub    esp,0xc
c001b8e6:	50                   	push   eax
c001b8e7:	e8 bf 5c ff ff       	call   c00115ab <getFromFileDescriptor(int)>
c001b8ec:	83 c4 10             	add    esp,0x10
c001b8ef:	89 c1                	mov    ecx,eax
c001b8f1:	83 c8 ff             	or     eax,0xffffffff
c001b8f4:	85 c9                	test   ecx,ecx
c001b8f6:	89 c2                	mov    edx,eax
c001b8f8:	74 28                	je     c001b922 <Sys::write(regs*)+0x61>
c001b8fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b902:	31 ff                	xor    edi,edi
c001b904:	83 ec 0c             	sub    esp,0xc
c001b907:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b909:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b90d:	52                   	push   edx
c001b90e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b911:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b914:	57                   	push   edi
c001b915:	56                   	push   esi
c001b916:	51                   	push   ecx
c001b917:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b91a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b91e:	83 c4 20             	add    esp,0x20
c001b921:	99                   	cdq    
c001b922:	83 c4 10             	add    esp,0x10
c001b925:	5b                   	pop    ebx
c001b926:	5e                   	pop    esi
c001b927:	5f                   	pop    edi
c001b928:	c3                   	ret    

c001b929 <Sys::wsbe(regs*)>:
c001b929:	57                   	push   edi
c001b92a:	b9 0b 00 00 00       	mov    ecx,0xb
c001b92f:	56                   	push   esi
c001b930:	be c8 ca 02 c0       	mov    esi,0xc002cac8
c001b935:	53                   	push   ebx
c001b936:	83 ec 30             	sub    esp,0x30
c001b939:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b93d:	fc                   	cld    
c001b93e:	83 ec 0c             	sub    esp,0xc
c001b941:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b943:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b947:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b94c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b94f:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b955:	8b 06                	mov    eax,DWORD PTR [esi]
c001b957:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b95a:	57                   	push   edi
c001b95b:	e8 0c 4e fe ff       	call   c000076c <strlen>
c001b960:	5a                   	pop    edx
c001b961:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b965:	52                   	push   edx
c001b966:	31 d2                	xor    edx,edx
c001b968:	57                   	push   edi
c001b969:	52                   	push   edx
c001b96a:	50                   	push   eax
c001b96b:	56                   	push   esi
c001b96c:	ff d3                	call   ebx
c001b96e:	83 c4 14             	add    esp,0x14
c001b971:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b975:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b978:	e8 00 34 00 00       	call   c001ed7d <terminateTask(int)>
c001b97d:	83 c4 40             	add    esp,0x40
c001b980:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b985:	5b                   	pop    ebx
c001b986:	31 d2                	xor    edx,edx
c001b988:	5e                   	pop    esi
c001b989:	5f                   	pop    edi
c001b98a:	c3                   	ret    

c001b98b <Sys::yield(regs*)>:
c001b98b:	57                   	push   edi
c001b98c:	56                   	push   esi
c001b98d:	53                   	push   ebx
c001b98e:	fa                   	cli    
c001b98f:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001b995:	e8 b0 2a 00 00       	call   c001e44a <schedule()>
c001b99a:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001b99f:	48                   	dec    eax
c001b9a0:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001b9a5:	75 01                	jne    c001b9a8 <Sys::yield(regs*)+0x1d>
c001b9a7:	fb                   	sti    
c001b9a8:	8b 35 30 f8 02 c0    	mov    esi,DWORD PTR ds:0xc002f830
c001b9ae:	8b 3d 34 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f834
c001b9b4:	89 f0                	mov    eax,esi
c001b9b6:	89 fb                	mov    ebx,edi
c001b9b8:	89 f1                	mov    ecx,esi
c001b9ba:	c1 e0 07             	shl    eax,0x7
c001b9bd:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b9c1:	25 80 30 0f 00       	and    eax,0xf3080
c001b9c6:	c1 eb 17             	shr    ebx,0x17
c001b9c9:	31 c8                	xor    eax,ecx
c001b9cb:	89 da                	mov    edx,ebx
c001b9cd:	5b                   	pop    ebx
c001b9ce:	5e                   	pop    esi
c001b9cf:	5f                   	pop    edi
c001b9d0:	c3                   	ret    

c001b9d1 <sysCallSeekDir(regs*)>:
c001b9d1:	31 c0                	xor    eax,eax
c001b9d3:	31 d2                	xor    edx,edx
c001b9d5:	c3                   	ret    

c001b9d6 <sysCallTellDir(regs*)>:
c001b9d6:	31 c0                	xor    eax,eax
c001b9d8:	31 d2                	xor    edx,edx
c001b9da:	c3                   	ret    

c001b9db <sysCallVerify(regs*)>:
c001b9db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9df:	31 d2                	xor    edx,edx
c001b9e1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9e4:	c3                   	ret    

c001b9e5 <sysFormatDisk(regs*)>:
c001b9e5:	56                   	push   esi
c001b9e6:	53                   	push   ebx
c001b9e7:	53                   	push   ebx
c001b9e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9ec:	8b 1d 34 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f334
c001b9f2:	eb 25                	jmp    c001ba19 <sysFormatDisk(regs*)+0x34>
c001b9f4:	83 ec 0c             	sub    esp,0xc
c001b9f7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b9fa:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b9fc:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b9ff:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba02:	50                   	push   eax
c001ba03:	ff 34 85 c0 f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0840]
c001ba0a:	53                   	push   ebx
c001ba0b:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001ba0e:	83 c4 20             	add    esp,0x20
c001ba11:	83 f8 08             	cmp    eax,0x8
c001ba14:	75 12                	jne    c001ba28 <sysFormatDisk(regs*)+0x43>
c001ba16:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001ba19:	85 db                	test   ebx,ebx
c001ba1b:	75 d7                	jne    c001b9f4 <sysFormatDisk(regs*)+0xf>
c001ba1d:	59                   	pop    ecx
c001ba1e:	b8 03 00 00 00       	mov    eax,0x3
c001ba23:	31 d2                	xor    edx,edx
c001ba25:	5b                   	pop    ebx
c001ba26:	5e                   	pop    esi
c001ba27:	c3                   	ret    
c001ba28:	85 c0                	test   eax,eax
c001ba2a:	74 1b                	je     c001ba47 <sysFormatDisk(regs*)+0x62>
c001ba2c:	83 f8 09             	cmp    eax,0x9
c001ba2f:	74 0b                	je     c001ba3c <sysFormatDisk(regs*)+0x57>
c001ba31:	59                   	pop    ecx
c001ba32:	b8 02 00 00 00       	mov    eax,0x2
c001ba37:	31 d2                	xor    edx,edx
c001ba39:	5b                   	pop    ebx
c001ba3a:	5e                   	pop    esi
c001ba3b:	c3                   	ret    
c001ba3c:	59                   	pop    ecx
c001ba3d:	b8 01 00 00 00       	mov    eax,0x1
c001ba42:	31 d2                	xor    edx,edx
c001ba44:	5b                   	pop    ebx
c001ba45:	5e                   	pop    esi
c001ba46:	c3                   	ret    
c001ba47:	59                   	pop    ecx
c001ba48:	31 c0                	xor    eax,eax
c001ba4a:	31 d2                	xor    edx,edx
c001ba4c:	5b                   	pop    ebx
c001ba4d:	5e                   	pop    esi
c001ba4e:	c3                   	ret    

c001ba4f <sysSetDiskVolumeLabel(regs*)>:
c001ba4f:	56                   	push   esi
c001ba50:	53                   	push   ebx
c001ba51:	53                   	push   ebx
c001ba52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba56:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ba59:	83 f8 19             	cmp    eax,0x19
c001ba5c:	77 29                	ja     c001ba87 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba5e:	8b 0c 85 c0 f7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0840]
c001ba65:	85 c9                	test   ecx,ecx
c001ba67:	74 1e                	je     c001ba87 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba69:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001ba6c:	85 d2                	test   edx,edx
c001ba6e:	74 17                	je     c001ba87 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba70:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001ba76:	8b 33                	mov    esi,DWORD PTR [ebx]
c001ba78:	52                   	push   edx
c001ba79:	50                   	push   eax
c001ba7a:	51                   	push   ecx
c001ba7b:	53                   	push   ebx
c001ba7c:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001ba7f:	83 c4 10             	add    esp,0x10
c001ba82:	99                   	cdq    
c001ba83:	59                   	pop    ecx
c001ba84:	5b                   	pop    ebx
c001ba85:	5e                   	pop    esi
c001ba86:	c3                   	ret    
c001ba87:	59                   	pop    ecx
c001ba88:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ba8d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba92:	5b                   	pop    ebx
c001ba93:	5e                   	pop    esi
c001ba94:	c3                   	ret    

c001ba95 <sysGetDiskVolumeLabel(regs*)>:
c001ba95:	57                   	push   edi
c001ba96:	56                   	push   esi
c001ba97:	53                   	push   ebx
c001ba98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ba9f:	83 fa 19             	cmp    edx,0x19
c001baa2:	77 34                	ja     c001bad8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001baa4:	8b 0c 95 c0 f7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0840]
c001baab:	85 c9                	test   ecx,ecx
c001baad:	74 29                	je     c001bad8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001baaf:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bab2:	85 db                	test   ebx,ebx
c001bab4:	74 22                	je     c001bad8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bab6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bab9:	85 c0                	test   eax,eax
c001babb:	74 1b                	je     c001bad8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001babd:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bac3:	83 ec 0c             	sub    esp,0xc
c001bac6:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bac8:	50                   	push   eax
c001bac9:	53                   	push   ebx
c001baca:	52                   	push   edx
c001bacb:	51                   	push   ecx
c001bacc:	56                   	push   esi
c001bacd:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bad0:	83 c4 20             	add    esp,0x20
c001bad3:	99                   	cdq    
c001bad4:	5b                   	pop    ebx
c001bad5:	5e                   	pop    esi
c001bad6:	5f                   	pop    edi
c001bad7:	c3                   	ret    
c001bad8:	5b                   	pop    ebx
c001bad9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bade:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bae3:	5e                   	pop    esi
c001bae4:	5f                   	pop    edi
c001bae5:	c3                   	ret    

c001bae6 <sysShutdown(regs*)>:
c001bae6:	83 ec 0c             	sub    esp,0xc
c001bae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001baf0:	85 c0                	test   eax,eax
c001baf2:	74 18                	je     c001bb0c <sysShutdown(regs*)+0x26>
c001baf4:	83 f8 01             	cmp    eax,0x1
c001baf7:	74 38                	je     c001bb31 <sysShutdown(regs*)+0x4b>
c001baf9:	83 f8 02             	cmp    eax,0x2
c001bafc:	74 24                	je     c001bb22 <sysShutdown(regs*)+0x3c>
c001bafe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb03:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb08:	83 c4 0c             	add    esp,0xc
c001bb0b:	c3                   	ret    
c001bb0c:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001bb11:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb13:	6a 00                	push   0x0
c001bb15:	6a 00                	push   0x0
c001bb17:	6a 00                	push   0x0
c001bb19:	50                   	push   eax
c001bb1a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bb1d:	83 c4 10             	add    esp,0x10
c001bb20:	eb dc                	jmp    c001bafe <sysShutdown(regs*)+0x18>
c001bb22:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001bb27:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb29:	6a 00                	push   0x0
c001bb2b:	6a 00                	push   0x0
c001bb2d:	6a 01                	push   0x1
c001bb2f:	eb e8                	jmp    c001bb19 <sysShutdown(regs*)+0x33>
c001bb31:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c001bb36:	85 c0                	test   eax,eax
c001bb38:	74 02                	je     c001bb3c <sysShutdown(regs*)+0x56>
c001bb3a:	ff d0                	call   eax
c001bb3c:	31 c0                	xor    eax,eax
c001bb3e:	31 d2                	xor    edx,edx
c001bb40:	83 c4 0c             	add    esp,0xc
c001bb43:	c3                   	ret    

c001bb44 <sysCallRealpath(regs*)>:
c001bb44:	83 ec 0c             	sub    esp,0xc
c001bb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bb4e:	85 d2                	test   edx,edx
c001bb50:	74 07                	je     c001bb59 <sysCallRealpath(regs*)+0x15>
c001bb52:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bb55:	85 c0                	test   eax,eax
c001bb57:	75 0b                	jne    c001bb64 <sysCallRealpath(regs*)+0x20>
c001bb59:	b8 01 00 00 00       	mov    eax,0x1
c001bb5e:	31 d2                	xor    edx,edx
c001bb60:	83 c4 0c             	add    esp,0xc
c001bb63:	c3                   	ret    
c001bb64:	51                   	push   ecx
c001bb65:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bb6b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bb6e:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bb74:	51                   	push   ecx
c001bb75:	52                   	push   edx
c001bb76:	50                   	push   eax
c001bb77:	e8 40 73 ff ff       	call   c0012ebc <Fs::standardiseFiles(char*, char const*, char const*)>
c001bb7c:	83 c4 10             	add    esp,0x10
c001bb7f:	31 c0                	xor    eax,eax
c001bb81:	31 d2                	xor    edx,edx
c001bb83:	83 c4 0c             	add    esp,0xc
c001bb86:	c3                   	ret    

c001bb87 <sysCallGetArgc(regs*)>:
c001bb87:	83 ec 14             	sub    esp,0x14
c001bb8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb8f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb92:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bb98:	68 f4 ca 02 c0       	push   0xc002caf4
c001bb9d:	e8 65 6f ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001bba2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bba7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbaa:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bbb0:	83 c4 1c             	add    esp,0x1c
c001bbb3:	99                   	cdq    
c001bbb4:	c3                   	ret    

c001bbb5 <sysCallReadDir(regs*)>:
c001bbb5:	53                   	push   ebx
c001bbb6:	83 ec 18             	sub    esp,0x18
c001bbb9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbbd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbc0:	83 f8 02             	cmp    eax,0x2
c001bbc3:	76 53                	jbe    c001bc18 <sysCallReadDir(regs*)+0x63>
c001bbc5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bbc8:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bbce:	77 4f                	ja     c001bc1f <sysCallReadDir(regs*)+0x6a>
c001bbd0:	83 ec 0c             	sub    esp,0xc
c001bbd3:	50                   	push   eax
c001bbd4:	e8 d2 59 ff ff       	call   c00115ab <getFromFileDescriptor(int)>
c001bbd9:	83 c4 10             	add    esp,0x10
c001bbdc:	85 c0                	test   eax,eax
c001bbde:	74 50                	je     c001bc30 <sysCallReadDir(regs*)+0x7b>
c001bbe0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bbe8:	83 ec 0c             	sub    esp,0xc
c001bbeb:	8b 10                	mov    edx,DWORD PTR [eax]
c001bbed:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bbf1:	51                   	push   ecx
c001bbf2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbf5:	6a 00                	push   0x0
c001bbf7:	68 10 01 00 00       	push   0x110
c001bbfc:	50                   	push   eax
c001bbfd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bc00:	83 c4 20             	add    esp,0x20
c001bc03:	85 c0                	test   eax,eax
c001bc05:	74 38                	je     c001bc3f <sysCallReadDir(regs*)+0x8a>
c001bc07:	83 f8 07             	cmp    eax,0x7
c001bc0a:	74 0c                	je     c001bc18 <sysCallReadDir(regs*)+0x63>
c001bc0c:	b8 02 00 00 00       	mov    eax,0x2
c001bc11:	31 d2                	xor    edx,edx
c001bc13:	83 c4 18             	add    esp,0x18
c001bc16:	5b                   	pop    ebx
c001bc17:	c3                   	ret    
c001bc18:	b8 01 00 00 00       	mov    eax,0x1
c001bc1d:	eb f2                	jmp    c001bc11 <sysCallReadDir(regs*)+0x5c>
c001bc1f:	83 ec 08             	sub    esp,0x8
c001bc22:	52                   	push   edx
c001bc23:	68 18 cc 02 c0       	push   0xc002cc18
c001bc28:	e8 da 6e ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001bc2d:	83 c4 10             	add    esp,0x10
c001bc30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc35:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc3a:	83 c4 18             	add    esp,0x18
c001bc3d:	5b                   	pop    ebx
c001bc3e:	c3                   	ret    
c001bc3f:	31 c0                	xor    eax,eax
c001bc41:	eb ce                	jmp    c001bc11 <sysCallReadDir(regs*)+0x5c>

c001bc43 <sysCallIsATTY(regs*)>:
c001bc43:	83 ec 0c             	sub    esp,0xc
c001bc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc4a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc4d:	83 f8 02             	cmp    eax,0x2
c001bc50:	76 07                	jbe    c001bc59 <sysCallIsATTY(regs*)+0x16>
c001bc52:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc57:	75 26                	jne    c001bc7f <sysCallIsATTY(regs*)+0x3c>
c001bc59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc61:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bc67:	85 c0                	test   eax,eax
c001bc69:	74 24                	je     c001bc8f <sysCallIsATTY(regs*)+0x4c>
c001bc6b:	83 ec 0c             	sub    esp,0xc
c001bc6e:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc70:	50                   	push   eax
c001bc71:	ff 12                	call   DWORD PTR [edx]
c001bc73:	31 d2                	xor    edx,edx
c001bc75:	0f b6 c0             	movzx  eax,al
c001bc78:	83 c4 10             	add    esp,0x10
c001bc7b:	83 c4 0c             	add    esp,0xc
c001bc7e:	c3                   	ret    
c001bc7f:	83 ec 0c             	sub    esp,0xc
c001bc82:	50                   	push   eax
c001bc83:	e8 23 59 ff ff       	call   c00115ab <getFromFileDescriptor(int)>
c001bc88:	83 c4 10             	add    esp,0x10
c001bc8b:	85 c0                	test   eax,eax
c001bc8d:	75 dc                	jne    c001bc6b <sysCallIsATTY(regs*)+0x28>
c001bc8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc94:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc99:	83 c4 0c             	add    esp,0xc
c001bc9c:	c3                   	ret    

c001bc9d <sysCallSeek(regs*)>:
c001bc9d:	53                   	push   ebx
c001bc9e:	83 ec 08             	sub    esp,0x8
c001bca1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bca5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bca8:	83 f8 02             	cmp    eax,0x2
c001bcab:	76 4a                	jbe    c001bcf7 <sysCallSeek(regs*)+0x5a>
c001bcad:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcb2:	77 32                	ja     c001bce6 <sysCallSeek(regs*)+0x49>
c001bcb4:	83 ec 0c             	sub    esp,0xc
c001bcb7:	50                   	push   eax
c001bcb8:	e8 ee 58 ff ff       	call   c00115ab <getFromFileDescriptor(int)>
c001bcbd:	83 c4 0c             	add    esp,0xc
c001bcc0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bcc3:	31 db                	xor    ebx,ebx
c001bcc5:	53                   	push   ebx
c001bcc6:	51                   	push   ecx
c001bcc7:	50                   	push   eax
c001bcc8:	e8 bb 74 ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001bccd:	83 c4 10             	add    esp,0x10
c001bcd0:	85 c0                	test   eax,eax
c001bcd2:	0f 95 c0             	setne  al
c001bcd5:	31 d2                	xor    edx,edx
c001bcd7:	0f b6 c0             	movzx  eax,al
c001bcda:	f7 d8                	neg    eax
c001bcdc:	83 d2 00             	adc    edx,0x0
c001bcdf:	83 c4 08             	add    esp,0x8
c001bce2:	f7 da                	neg    edx
c001bce4:	5b                   	pop    ebx
c001bce5:	c3                   	ret    
c001bce6:	83 ec 08             	sub    esp,0x8
c001bce9:	50                   	push   eax
c001bcea:	68 ff ca 02 c0       	push   0xc002caff
c001bcef:	e8 13 6e ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001bcf4:	83 c4 10             	add    esp,0x10
c001bcf7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcfc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd01:	83 c4 08             	add    esp,0x8
c001bd04:	5b                   	pop    ebx
c001bd05:	c3                   	ret    

c001bd06 <sysCallTell(regs*)>:
c001bd06:	53                   	push   ebx
c001bd07:	83 ec 08             	sub    esp,0x8
c001bd0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd0e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd11:	83 f8 02             	cmp    eax,0x2
c001bd14:	76 5e                	jbe    c001bd74 <sysCallTell(regs*)+0x6e>
c001bd16:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd1b:	77 2d                	ja     c001bd4a <sysCallTell(regs*)+0x44>
c001bd1d:	83 ec 0c             	sub    esp,0xc
c001bd20:	50                   	push   eax
c001bd21:	e8 85 58 ff ff       	call   c00115ab <getFromFileDescriptor(int)>
c001bd26:	5a                   	pop    edx
c001bd27:	59                   	pop    ecx
c001bd28:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bd2b:	50                   	push   eax
c001bd2c:	e8 ad 74 ff ff       	call   c00131de <File::tell(unsigned long long*)>
c001bd31:	83 c4 10             	add    esp,0x10
c001bd34:	85 c0                	test   eax,eax
c001bd36:	0f 95 c0             	setne  al
c001bd39:	31 d2                	xor    edx,edx
c001bd3b:	0f b6 c0             	movzx  eax,al
c001bd3e:	f7 d8                	neg    eax
c001bd40:	83 d2 00             	adc    edx,0x0
c001bd43:	83 c4 08             	add    esp,0x8
c001bd46:	f7 da                	neg    edx
c001bd48:	5b                   	pop    ebx
c001bd49:	c3                   	ret    
c001bd4a:	83 ec 08             	sub    esp,0x8
c001bd4d:	50                   	push   eax
c001bd4e:	68 19 cb 02 c0       	push   0xc002cb19
c001bd53:	e8 af 6d ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001bd58:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bd5b:	83 c4 10             	add    esp,0x10
c001bd5e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd6b:	31 d2                	xor    edx,edx
c001bd6d:	31 c0                	xor    eax,eax
c001bd6f:	83 c4 08             	add    esp,0x8
c001bd72:	5b                   	pop    ebx
c001bd73:	c3                   	ret    
c001bd74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd79:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd7e:	83 c4 08             	add    esp,0x8
c001bd81:	5b                   	pop    ebx
c001bd82:	c3                   	ret    

c001bd83 <sysCallSize(regs*)>:
c001bd83:	53                   	push   ebx
c001bd84:	83 ec 18             	sub    esp,0x18
c001bd87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bd8b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd8e:	83 f8 02             	cmp    eax,0x2
c001bd91:	76 64                	jbe    c001bdf7 <sysCallSize(regs*)+0x74>
c001bd93:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd98:	77 33                	ja     c001bdcd <sysCallSize(regs*)+0x4a>
c001bd9a:	83 ec 0c             	sub    esp,0xc
c001bd9d:	50                   	push   eax
c001bd9e:	e8 08 58 ff ff       	call   c00115ab <getFromFileDescriptor(int)>
c001bda3:	83 c4 0c             	add    esp,0xc
c001bda6:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bdaa:	52                   	push   edx
c001bdab:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bdae:	50                   	push   eax
c001bdaf:	e8 c2 75 ff ff       	call   c0013376 <File::stat(unsigned long long*, bool*)>
c001bdb4:	83 c4 10             	add    esp,0x10
c001bdb7:	85 c0                	test   eax,eax
c001bdb9:	0f 95 c0             	setne  al
c001bdbc:	31 d2                	xor    edx,edx
c001bdbe:	0f b6 c0             	movzx  eax,al
c001bdc1:	f7 d8                	neg    eax
c001bdc3:	83 d2 00             	adc    edx,0x0
c001bdc6:	83 c4 18             	add    esp,0x18
c001bdc9:	f7 da                	neg    edx
c001bdcb:	5b                   	pop    ebx
c001bdcc:	c3                   	ret    
c001bdcd:	83 ec 08             	sub    esp,0x8
c001bdd0:	50                   	push   eax
c001bdd1:	68 33 cb 02 c0       	push   0xc002cb33
c001bdd6:	e8 2c 6d ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001bddb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bdde:	83 c4 10             	add    esp,0x10
c001bde1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bde7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bdee:	31 d2                	xor    edx,edx
c001bdf0:	31 c0                	xor    eax,eax
c001bdf2:	83 c4 18             	add    esp,0x18
c001bdf5:	5b                   	pop    ebx
c001bdf6:	c3                   	ret    
c001bdf7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdfc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be01:	83 c4 18             	add    esp,0x18
c001be04:	5b                   	pop    ebx
c001be05:	c3                   	ret    

c001be06 <sysCallSizeFromFilename(regs*)>:
c001be06:	57                   	push   edi
c001be07:	56                   	push   esi
c001be08:	53                   	push   ebx
c001be09:	83 ec 20             	sub    esp,0x20
c001be0c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be10:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001be13:	83 fb 02             	cmp    ebx,0x2
c001be16:	0f 86 99 00 00 00    	jbe    c001beb5 <sysCallSizeFromFilename(regs*)+0xaf>
c001be1c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001be22:	77 65                	ja     c001be89 <sysCallSizeFromFilename(regs*)+0x83>
c001be24:	83 ec 0c             	sub    esp,0xc
c001be27:	68 14 01 00 00       	push   0x114
c001be2c:	e8 5b 3a ff ff       	call   c000f88c <malloc>
c001be31:	83 c4 0c             	add    esp,0xc
c001be34:	89 c6                	mov    esi,eax
c001be36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be3e:	53                   	push   ebx
c001be3f:	56                   	push   esi
c001be40:	e8 21 72 ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001be45:	83 c4 0c             	add    esp,0xc
c001be48:	8d 44 24 23          	lea    eax,[esp+0x23]
c001be4c:	50                   	push   eax
c001be4d:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001be50:	56                   	push   esi
c001be51:	e8 20 75 ff ff       	call   c0013376 <File::stat(unsigned long long*, bool*)>
c001be56:	83 c4 10             	add    esp,0x10
c001be59:	85 f6                	test   esi,esi
c001be5b:	74 14                	je     c001be71 <sysCallSizeFromFilename(regs*)+0x6b>
c001be5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be61:	8b 16                	mov    edx,DWORD PTR [esi]
c001be63:	83 ec 0c             	sub    esp,0xc
c001be66:	56                   	push   esi
c001be67:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be6a:	83 c4 10             	add    esp,0x10
c001be6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be71:	85 c0                	test   eax,eax
c001be73:	0f 95 c0             	setne  al
c001be76:	31 d2                	xor    edx,edx
c001be78:	0f b6 c0             	movzx  eax,al
c001be7b:	f7 d8                	neg    eax
c001be7d:	83 d2 00             	adc    edx,0x0
c001be80:	83 c4 20             	add    esp,0x20
c001be83:	f7 da                	neg    edx
c001be85:	5b                   	pop    ebx
c001be86:	5e                   	pop    esi
c001be87:	5f                   	pop    edi
c001be88:	c3                   	ret    
c001be89:	83 ec 08             	sub    esp,0x8
c001be8c:	53                   	push   ebx
c001be8d:	68 33 cb 02 c0       	push   0xc002cb33
c001be92:	e8 70 6c ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001be97:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001be9a:	83 c4 10             	add    esp,0x10
c001be9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bea3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001beaa:	31 d2                	xor    edx,edx
c001beac:	83 c4 20             	add    esp,0x20
c001beaf:	31 c0                	xor    eax,eax
c001beb1:	5b                   	pop    ebx
c001beb2:	5e                   	pop    esi
c001beb3:	5f                   	pop    edi
c001beb4:	c3                   	ret    
c001beb5:	83 c4 20             	add    esp,0x20
c001beb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bebd:	5b                   	pop    ebx
c001bebe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bec3:	5e                   	pop    esi
c001bec4:	5f                   	pop    edi
c001bec5:	c3                   	ret    

c001bec6 <sysCallClose(regs*)>:
c001bec6:	53                   	push   ebx
c001bec7:	83 ec 08             	sub    esp,0x8
c001beca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bece:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bed1:	83 f8 02             	cmp    eax,0x2
c001bed4:	76 50                	jbe    c001bf26 <sysCallClose(regs*)+0x60>
c001bed6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bedb:	74 58                	je     c001bf35 <sysCallClose(regs*)+0x6f>
c001bedd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bee2:	74 60                	je     c001bf44 <sysCallClose(regs*)+0x7e>
c001bee4:	77 2f                	ja     c001bf15 <sysCallClose(regs*)+0x4f>
c001bee6:	83 ec 0c             	sub    esp,0xc
c001bee9:	50                   	push   eax
c001beea:	e8 bc 56 ff ff       	call   c00115ab <getFromFileDescriptor(int)>
c001beef:	89 c3                	mov    ebx,eax
c001bef1:	89 04 24             	mov    DWORD PTR [esp],eax
c001bef4:	e8 2f 72 ff ff       	call   c0013128 <File::close()>
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	85 db                	test   ebx,ebx
c001befe:	74 0c                	je     c001bf0c <sysCallClose(regs*)+0x46>
c001bf00:	83 ec 0c             	sub    esp,0xc
c001bf03:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf05:	53                   	push   ebx
c001bf06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf09:	83 c4 10             	add    esp,0x10
c001bf0c:	31 c0                	xor    eax,eax
c001bf0e:	31 d2                	xor    edx,edx
c001bf10:	83 c4 08             	add    esp,0x8
c001bf13:	5b                   	pop    ebx
c001bf14:	c3                   	ret    
c001bf15:	83 ec 08             	sub    esp,0x8
c001bf18:	50                   	push   eax
c001bf19:	68 3c cc 02 c0       	push   0xc002cc3c
c001bf1e:	e8 e4 6b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001bf23:	83 c4 10             	add    esp,0x10
c001bf26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf2b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf30:	83 c4 08             	add    esp,0x8
c001bf33:	5b                   	pop    ebx
c001bf34:	c3                   	ret    
c001bf35:	83 ec 0c             	sub    esp,0xc
c001bf38:	68 4e cb 02 c0       	push   0xc002cb4e
c001bf3d:	e8 c5 6b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001bf42:	eb c5                	jmp    c001bf09 <sysCallClose(regs*)+0x43>
c001bf44:	83 ec 0c             	sub    esp,0xc
c001bf47:	68 5c cb 02 c0       	push   0xc002cb5c
c001bf4c:	eb ef                	jmp    c001bf3d <sysCallClose(regs*)+0x77>

c001bf4e <sysCallOpenDir(regs*)>:
c001bf4e:	56                   	push   esi
c001bf4f:	53                   	push   ebx
c001bf50:	53                   	push   ebx
c001bf51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf55:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bf58:	85 f6                	test   esi,esi
c001bf5a:	74 59                	je     c001bfb5 <sysCallOpenDir(regs*)+0x67>
c001bf5c:	83 ec 0c             	sub    esp,0xc
c001bf5f:	68 14 01 00 00       	push   0x114
c001bf64:	e8 23 39 ff ff       	call   c000f88c <malloc>
c001bf69:	83 c4 0c             	add    esp,0xc
c001bf6c:	89 c6                	mov    esi,eax
c001bf6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf73:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf76:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf79:	56                   	push   esi
c001bf7a:	e8 93 75 ff ff       	call   c0013512 <Directory::Directory(char const*, Process*)>
c001bf7f:	83 c4 10             	add    esp,0x10
c001bf82:	85 f6                	test   esi,esi
c001bf84:	74 2f                	je     c001bfb5 <sysCallOpenDir(regs*)+0x67>
c001bf86:	83 ec 0c             	sub    esp,0xc
c001bf89:	56                   	push   esi
c001bf8a:	e8 e7 75 ff ff       	call   c0013576 <Directory::open()>
c001bf8f:	83 c4 10             	add    esp,0x10
c001bf92:	85 c0                	test   eax,eax
c001bf94:	75 1f                	jne    c001bfb5 <sysCallOpenDir(regs*)+0x67>
c001bf96:	83 ec 0c             	sub    esp,0xc
c001bf99:	56                   	push   esi
c001bf9a:	e8 17 53 ff ff       	call   c00112b6 <UnixFile::getFileDescriptor()>
c001bf9f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bfa2:	83 c4 10             	add    esp,0x10
c001bfa5:	89 02                	mov    DWORD PTR [edx],eax
c001bfa7:	c1 f8 1f             	sar    eax,0x1f
c001bfaa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bfad:	31 c0                	xor    eax,eax
c001bfaf:	59                   	pop    ecx
c001bfb0:	31 d2                	xor    edx,edx
c001bfb2:	5b                   	pop    ebx
c001bfb3:	5e                   	pop    esi
c001bfb4:	c3                   	ret    
c001bfb5:	59                   	pop    ecx
c001bfb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfc0:	5b                   	pop    ebx
c001bfc1:	5e                   	pop    esi
c001bfc2:	c3                   	ret    

c001bfc3 <sysCallCloseDir(regs*)>:
c001bfc3:	53                   	push   ebx
c001bfc4:	83 ec 08             	sub    esp,0x8
c001bfc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfcb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bfce:	83 f8 02             	cmp    eax,0x2
c001bfd1:	76 47                	jbe    c001c01a <sysCallCloseDir(regs*)+0x57>
c001bfd3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bfd8:	77 2f                	ja     c001c009 <sysCallCloseDir(regs*)+0x46>
c001bfda:	83 ec 0c             	sub    esp,0xc
c001bfdd:	50                   	push   eax
c001bfde:	e8 c8 55 ff ff       	call   c00115ab <getFromFileDescriptor(int)>
c001bfe3:	89 c3                	mov    ebx,eax
c001bfe5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bfe8:	e8 e5 75 ff ff       	call   c00135d2 <Directory::close()>
c001bfed:	83 c4 10             	add    esp,0x10
c001bff0:	85 db                	test   ebx,ebx
c001bff2:	74 0c                	je     c001c000 <sysCallCloseDir(regs*)+0x3d>
c001bff4:	83 ec 0c             	sub    esp,0xc
c001bff7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bff9:	53                   	push   ebx
c001bffa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bffd:	83 c4 10             	add    esp,0x10
c001c000:	31 c0                	xor    eax,eax
c001c002:	31 d2                	xor    edx,edx
c001c004:	83 c4 08             	add    esp,0x8
c001c007:	5b                   	pop    ebx
c001c008:	c3                   	ret    
c001c009:	83 ec 08             	sub    esp,0x8
c001c00c:	50                   	push   eax
c001c00d:	68 64 cc 02 c0       	push   0xc002cc64
c001c012:	e8 f0 6a ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c017:	83 c4 10             	add    esp,0x10
c001c01a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c01f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c024:	83 c4 08             	add    esp,0x8
c001c027:	5b                   	pop    ebx
c001c028:	c3                   	ret    

c001c029 <sysCallMakeDir(regs*)>:
c001c029:	56                   	push   esi
c001c02a:	53                   	push   ebx
c001c02b:	83 ec 10             	sub    esp,0x10
c001c02e:	68 14 01 00 00       	push   0x114
c001c033:	e8 54 38 ff ff       	call   c000f88c <malloc>
c001c038:	83 c4 0c             	add    esp,0xc
c001c03b:	89 c3                	mov    ebx,eax
c001c03d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c042:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c045:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c049:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c04c:	53                   	push   ebx
c001c04d:	e8 c0 74 ff ff       	call   c0013512 <Directory::Directory(char const*, Process*)>
c001c052:	83 c4 10             	add    esp,0x10
c001c055:	85 db                	test   ebx,ebx
c001c057:	74 32                	je     c001c08b <sysCallMakeDir(regs*)+0x62>
c001c059:	83 ec 0c             	sub    esp,0xc
c001c05c:	53                   	push   ebx
c001c05d:	e8 f4 76 ff ff       	call   c0013756 <Directory::create()>
c001c062:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c065:	89 c6                	mov    esi,eax
c001c067:	e8 66 75 ff ff       	call   c00135d2 <Directory::close()>
c001c06c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c06e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c071:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c074:	83 c4 10             	add    esp,0x10
c001c077:	31 c0                	xor    eax,eax
c001c079:	59                   	pop    ecx
c001c07a:	85 f6                	test   esi,esi
c001c07c:	5b                   	pop    ebx
c001c07d:	0f 95 c0             	setne  al
c001c080:	5e                   	pop    esi
c001c081:	31 d2                	xor    edx,edx
c001c083:	f7 d8                	neg    eax
c001c085:	83 d2 00             	adc    edx,0x0
c001c088:	f7 da                	neg    edx
c001c08a:	c3                   	ret    
c001c08b:	59                   	pop    ecx
c001c08c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c091:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c096:	5b                   	pop    ebx
c001c097:	5e                   	pop    esi
c001c098:	c3                   	ret    

c001c099 <sysCallWait(regs*)>:
c001c099:	83 ec 10             	sub    esp,0x10
c001c09c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0a0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c0a3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0a6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c0a9:	e8 c8 25 00 00       	call   c001e676 <waitTask(int, int*, int)>
c001c0ae:	83 c4 1c             	add    esp,0x1c
c001c0b1:	99                   	cdq    
c001c0b2:	c3                   	ret    

c001c0b3 <sysCallNotImpl(regs*)>:
c001c0b3:	83 ec 18             	sub    esp,0x18
c001c0b6:	68 6a cb 02 c0       	push   0xc002cb6a
c001c0bb:	e8 d7 e5 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001c0c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0ca:	83 c4 1c             	add    esp,0x1c
c001c0cd:	c3                   	ret    

c001c0ce <sysPanic(regs*)>:
c001c0ce:	83 ec 18             	sub    esp,0x18
c001c0d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0d5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0d8:	e8 ba e5 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001c0dd:	c7 04 24 84 cb 02 c0 	mov    DWORD PTR [esp],0xc002cb84
c001c0e4:	e8 ae e5 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001c0e9:	b8 01 00 00 00       	mov    eax,0x1
c001c0ee:	31 d2                	xor    edx,edx
c001c0f0:	83 c4 1c             	add    esp,0x1c
c001c0f3:	c3                   	ret    

c001c0f4 <sysCallRmdir(regs*)>:
c001c0f4:	56                   	push   esi
c001c0f5:	53                   	push   ebx
c001c0f6:	83 ec 20             	sub    esp,0x20
c001c0f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c0fd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c100:	68 14 01 00 00       	push   0x114
c001c105:	e8 82 37 ff ff       	call   c000f88c <malloc>
c001c10a:	83 c4 0c             	add    esp,0xc
c001c10d:	89 c3                	mov    ebx,eax
c001c10f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c114:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c117:	56                   	push   esi
c001c118:	53                   	push   ebx
c001c119:	e8 48 6f ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001c11e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c121:	e8 1c 71 ff ff       	call   c0013242 <File::unlink()>
c001c126:	83 c4 10             	add    esp,0x10
c001c129:	85 db                	test   ebx,ebx
c001c12b:	74 14                	je     c001c141 <sysCallRmdir(regs*)+0x4d>
c001c12d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c131:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c133:	83 ec 0c             	sub    esp,0xc
c001c136:	53                   	push   ebx
c001c137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c13a:	83 c4 10             	add    esp,0x10
c001c13d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c141:	85 c0                	test   eax,eax
c001c143:	0f 95 c0             	setne  al
c001c146:	31 d2                	xor    edx,edx
c001c148:	0f b6 c0             	movzx  eax,al
c001c14b:	f7 d8                	neg    eax
c001c14d:	83 d2 00             	adc    edx,0x0
c001c150:	83 c4 14             	add    esp,0x14
c001c153:	f7 da                	neg    edx
c001c155:	5b                   	pop    ebx
c001c156:	5e                   	pop    esi
c001c157:	c3                   	ret    

c001c158 <sysCallUnlink(regs*)>:
c001c158:	56                   	push   esi
c001c159:	53                   	push   ebx
c001c15a:	83 ec 20             	sub    esp,0x20
c001c15d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c161:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c164:	68 14 01 00 00       	push   0x114
c001c169:	e8 1e 37 ff ff       	call   c000f88c <malloc>
c001c16e:	83 c4 0c             	add    esp,0xc
c001c171:	89 c3                	mov    ebx,eax
c001c173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c178:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c17b:	56                   	push   esi
c001c17c:	53                   	push   ebx
c001c17d:	e8 e4 6e ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001c182:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c185:	e8 b8 70 ff ff       	call   c0013242 <File::unlink()>
c001c18a:	83 c4 10             	add    esp,0x10
c001c18d:	85 db                	test   ebx,ebx
c001c18f:	74 14                	je     c001c1a5 <sysCallUnlink(regs*)+0x4d>
c001c191:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c195:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c197:	83 ec 0c             	sub    esp,0xc
c001c19a:	53                   	push   ebx
c001c19b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c19e:	83 c4 10             	add    esp,0x10
c001c1a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1a5:	85 c0                	test   eax,eax
c001c1a7:	0f 95 c0             	setne  al
c001c1aa:	31 d2                	xor    edx,edx
c001c1ac:	0f b6 c0             	movzx  eax,al
c001c1af:	f7 d8                	neg    eax
c001c1b1:	83 d2 00             	adc    edx,0x0
c001c1b4:	83 c4 14             	add    esp,0x14
c001c1b7:	f7 da                	neg    edx
c001c1b9:	5b                   	pop    ebx
c001c1ba:	5e                   	pop    esi
c001c1bb:	c3                   	ret    

c001c1bc <sysCallGetArgv(regs*)>:
c001c1bc:	83 ec 0c             	sub    esp,0xc
c001c1bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c1c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c1c6:	85 c0                	test   eax,eax
c001c1c8:	78 2b                	js     c001c1f5 <sysCallGetArgv(regs*)+0x39>
c001c1ca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c1d0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c1d3:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c1d9:	7d 1a                	jge    c001c1f5 <sysCallGetArgv(regs*)+0x39>
c001c1db:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c1e2:	85 c0                	test   eax,eax
c001c1e4:	74 17                	je     c001c1fd <sysCallGetArgv(regs*)+0x41>
c001c1e6:	83 ec 08             	sub    esp,0x8
c001c1e9:	50                   	push   eax
c001c1ea:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c1ed:	e8 1a 46 fe ff       	call   c000080c <strcpy>
c001c1f2:	83 c4 10             	add    esp,0x10
c001c1f5:	31 c0                	xor    eax,eax
c001c1f7:	31 d2                	xor    edx,edx
c001c1f9:	83 c4 0c             	add    esp,0xc
c001c1fc:	c3                   	ret    
c001c1fd:	b8 01 00 00 00       	mov    eax,0x1
c001c202:	31 d2                	xor    edx,edx
c001c204:	83 c4 0c             	add    esp,0xc
c001c207:	c3                   	ret    

c001c208 <sysCallTTYName(regs*)>:
c001c208:	56                   	push   esi
c001c209:	53                   	push   ebx
c001c20a:	53                   	push   ebx
c001c20b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c20f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c212:	85 c0                	test   eax,eax
c001c214:	74 5f                	je     c001c275 <sysCallTTYName(regs*)+0x6d>
c001c216:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c219:	83 f8 02             	cmp    eax,0x2
c001c21c:	77 3e                	ja     c001c25c <sysCallTTYName(regs*)+0x54>
c001c21e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c223:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c226:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c22c:	85 db                	test   ebx,ebx
c001c22e:	74 45                	je     c001c275 <sysCallTTYName(regs*)+0x6d>
c001c230:	83 ec 0c             	sub    esp,0xc
c001c233:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c235:	53                   	push   ebx
c001c236:	ff 10                	call   DWORD PTR [eax]
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	84 c0                	test   al,al
c001c23d:	74 41                	je     c001c280 <sysCallTTYName(regs*)+0x78>
c001c23f:	83 ec 08             	sub    esp,0x8
c001c242:	81 c3 82 00 00 00    	add    ebx,0x82
c001c248:	53                   	push   ebx
c001c249:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c24c:	e8 bb 45 fe ff       	call   c000080c <strcpy>
c001c251:	83 c4 10             	add    esp,0x10
c001c254:	31 c0                	xor    eax,eax
c001c256:	59                   	pop    ecx
c001c257:	31 d2                	xor    edx,edx
c001c259:	5b                   	pop    ebx
c001c25a:	5e                   	pop    esi
c001c25b:	c3                   	ret    
c001c25c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c261:	74 bb                	je     c001c21e <sysCallTTYName(regs*)+0x16>
c001c263:	83 ec 0c             	sub    esp,0xc
c001c266:	50                   	push   eax
c001c267:	e8 3f 53 ff ff       	call   c00115ab <getFromFileDescriptor(int)>
c001c26c:	83 c4 10             	add    esp,0x10
c001c26f:	89 c3                	mov    ebx,eax
c001c271:	85 db                	test   ebx,ebx
c001c273:	75 bb                	jne    c001c230 <sysCallTTYName(regs*)+0x28>
c001c275:	59                   	pop    ecx
c001c276:	b8 01 00 00 00       	mov    eax,0x1
c001c27b:	31 d2                	xor    edx,edx
c001c27d:	5b                   	pop    ebx
c001c27e:	5e                   	pop    esi
c001c27f:	c3                   	ret    
c001c280:	59                   	pop    ecx
c001c281:	b8 02 00 00 00       	mov    eax,0x2
c001c286:	31 d2                	xor    edx,edx
c001c288:	5b                   	pop    ebx
c001c289:	5e                   	pop    esi
c001c28a:	c3                   	ret    

c001c28b <sysCallUSleep(regs*)>:
c001c28b:	83 ec 14             	sub    esp,0x14
c001c28e:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c293:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c297:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c29e:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c2a1:	01 ca                	add    edx,ecx
c001c2a3:	52                   	push   edx
c001c2a4:	50                   	push   eax
c001c2a5:	e8 a3 24 00 00       	call   c001e74d <nanoSleep(unsigned long long)>
c001c2aa:	31 c0                	xor    eax,eax
c001c2ac:	31 d2                	xor    edx,edx
c001c2ae:	83 c4 1c             	add    esp,0x1c
c001c2b1:	c3                   	ret    

c001c2b2 <sysCallSpawn(regs*)>:
c001c2b2:	56                   	push   esi
c001c2b3:	53                   	push   ebx
c001c2b4:	50                   	push   eax
c001c2b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2b9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c2bc:	85 c0                	test   eax,eax
c001c2be:	75 08                	jne    c001c2c8 <sysCallSpawn(regs*)+0x16>
c001c2c0:	59                   	pop    ecx
c001c2c1:	31 c0                	xor    eax,eax
c001c2c3:	31 d2                	xor    edx,edx
c001c2c5:	5b                   	pop    ebx
c001c2c6:	5e                   	pop    esi
c001c2c7:	c3                   	ret    
c001c2c8:	83 ec 08             	sub    esp,0x8
c001c2cb:	50                   	push   eax
c001c2cc:	68 93 cb 02 c0       	push   0xc002cb93
c001c2d1:	e8 31 68 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c2d6:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c2dd:	e8 aa 35 ff ff       	call   c000f88c <malloc>
c001c2e2:	83 c4 10             	add    esp,0x10
c001c2e5:	89 c6                	mov    esi,eax
c001c2e7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c2ea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c2ed:	85 c0                	test   eax,eax
c001c2ef:	75 32                	jne    c001c323 <sysCallSpawn(regs*)+0x71>
c001c2f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2f9:	52                   	push   edx
c001c2fa:	50                   	push   eax
c001c2fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2fe:	56                   	push   esi
c001c2ff:	e8 26 1b 00 00       	call   c001de2a <Process::Process(char const*, Process*, char**)>
c001c304:	83 c4 10             	add    esp,0x10
c001c307:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c30e:	75 b0                	jne    c001c2c0 <sysCallSpawn(regs*)+0xe>
c001c310:	83 ec 0c             	sub    esp,0xc
c001c313:	56                   	push   esi
c001c314:	e8 f3 1f 00 00       	call   c001e30c <Process::createUserThread()>
c001c319:	8b 06                	mov    eax,DWORD PTR [esi]
c001c31b:	83 c4 10             	add    esp,0x10
c001c31e:	99                   	cdq    
c001c31f:	59                   	pop    ecx
c001c320:	5b                   	pop    ebx
c001c321:	5e                   	pop    esi
c001c322:	c3                   	ret    
c001c323:	31 c0                	xor    eax,eax
c001c325:	eb d2                	jmp    c001c2f9 <sysCallSpawn(regs*)+0x47>

c001c327 <sysCallGetEnv(regs*)>:
c001c327:	55                   	push   ebp
c001c328:	57                   	push   edi
c001c329:	56                   	push   esi
c001c32a:	53                   	push   ebx
c001c32b:	83 ec 28             	sub    esp,0x28
c001c32e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c332:	68 a1 cb 02 c0       	push   0xc002cba1
c001c337:	e8 cb 67 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c33c:	5f                   	pop    edi
c001c33d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c340:	5d                   	pop    ebp
c001c341:	53                   	push   ebx
c001c342:	68 ce ce 02 c0       	push   0xc002cece
c001c347:	e8 bb 67 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c34c:	58                   	pop    eax
c001c34d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c350:	5a                   	pop    edx
c001c351:	57                   	push   edi
c001c352:	68 aa cb 02 c0       	push   0xc002cbaa
c001c357:	e8 ab 67 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c35c:	59                   	pop    ecx
c001c35d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c362:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c365:	e8 49 e2 ff ff       	call   c001a5b3 <Krnl::getProcessTotalEnvCount(Process*)>
c001c36a:	5a                   	pop    edx
c001c36b:	89 c5                	mov    ebp,eax
c001c36d:	59                   	pop    ecx
c001c36e:	50                   	push   eax
c001c36f:	68 b4 cb 02 c0       	push   0xc002cbb4
c001c374:	e8 8e 67 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c379:	83 c4 10             	add    esp,0x10
c001c37c:	39 ef                	cmp    edi,ebp
c001c37e:	7c 15                	jl     c001c395 <sysCallGetEnv(regs*)+0x6e>
c001c380:	85 db                	test   ebx,ebx
c001c382:	75 0c                	jne    c001c390 <sysCallGetEnv(regs*)+0x69>
c001c384:	83 c4 1c             	add    esp,0x1c
c001c387:	31 c0                	xor    eax,eax
c001c389:	5b                   	pop    ebx
c001c38a:	31 d2                	xor    edx,edx
c001c38c:	5e                   	pop    esi
c001c38d:	5f                   	pop    edi
c001c38e:	5d                   	pop    ebp
c001c38f:	c3                   	ret    
c001c390:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c393:	eb ef                	jmp    c001c384 <sysCallGetEnv(regs*)+0x5d>
c001c395:	83 ec 0c             	sub    esp,0xc
c001c398:	68 c0 cb 02 c0       	push   0xc002cbc0
c001c39d:	e8 65 67 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c3a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3a6:	83 c4 0c             	add    esp,0xc
c001c3a9:	57                   	push   edi
c001c3aa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3b0:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c3b3:	50                   	push   eax
c001c3b4:	e8 1a e2 ff ff       	call   c001a5d3 <Krnl::getProcessEnvPair(Process*, int)>
c001c3b9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c3bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c3c1:	68 7f cf 02 c0       	push   0xc002cf7f
c001c3c6:	e8 3c 67 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c3cb:	83 c4 10             	add    esp,0x10
c001c3ce:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c3d1:	85 f6                	test   esi,esi
c001c3d3:	75 47                	jne    c001c41c <sysCallGetEnv(regs*)+0xf5>
c001c3d5:	83 ec 0c             	sub    esp,0xc
c001c3d8:	55                   	push   ebp
c001c3d9:	e8 8e 43 fe ff       	call   c000076c <strlen>
c001c3de:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3e1:	89 c3                	mov    ebx,eax
c001c3e3:	e8 84 43 fe ff       	call   c000076c <strlen>
c001c3e8:	5a                   	pop    edx
c001c3e9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c3ed:	59                   	pop    ecx
c001c3ee:	50                   	push   eax
c001c3ef:	68 c3 cb 02 c0       	push   0xc002cbc3
c001c3f4:	e8 0e 67 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c3f9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c3fc:	e8 6b 43 fe ff       	call   c000076c <strlen>
c001c401:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c404:	89 c3                	mov    ebx,eax
c001c406:	e8 61 43 fe ff       	call   c000076c <strlen>
c001c40b:	83 c4 10             	add    esp,0x10
c001c40e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c412:	83 c4 1c             	add    esp,0x1c
c001c415:	31 d2                	xor    edx,edx
c001c417:	5b                   	pop    ebx
c001c418:	5e                   	pop    esi
c001c419:	5f                   	pop    edi
c001c41a:	5d                   	pop    ebp
c001c41b:	c3                   	ret    
c001c41c:	83 ec 0c             	sub    esp,0xc
c001c41f:	68 99 cf 02 c0       	push   0xc002cf99
c001c424:	e8 de 66 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c429:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c42c:	58                   	pop    eax
c001c42d:	5a                   	pop    edx
c001c42e:	55                   	push   ebp
c001c42f:	53                   	push   ebx
c001c430:	e8 d7 43 fe ff       	call   c000080c <strcpy>
c001c435:	59                   	pop    ecx
c001c436:	5e                   	pop    esi
c001c437:	68 cd cb 02 c0       	push   0xc002cbcd
c001c43c:	53                   	push   ebx
c001c43d:	e8 0a 45 fe ff       	call   c000094c <strcat>
c001c442:	5d                   	pop    ebp
c001c443:	58                   	pop    eax
c001c444:	57                   	push   edi
c001c445:	53                   	push   ebx
c001c446:	e8 01 45 fe ff       	call   c000094c <strcat>
c001c44b:	c7 04 24 b3 cf 02 c0 	mov    DWORD PTR [esp],0xc002cfb3
c001c452:	e8 b0 66 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	e9 25 ff ff ff       	jmp    c001c384 <sysCallGetEnv(regs*)+0x5d>

c001c45f <sysAppSettings(regs*)>:
c001c45f:	57                   	push   edi
c001c460:	56                   	push   esi
c001c461:	56                   	push   esi
c001c462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c466:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c469:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c46f:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c474:	66 3d c0 09          	cmp    ax,0x9c0
c001c478:	75 2e                	jne    c001c4a8 <sysAppSettings(regs*)+0x49>
c001c47a:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c480:	83 e0 1f             	and    eax,0x1f
c001c483:	3c 01                	cmp    al,0x1
c001c485:	74 2c                	je     c001c4b3 <sysAppSettings(regs*)+0x54>
c001c487:	3c 07                	cmp    al,0x7
c001c489:	0f 84 b3 00 00 00    	je     c001c542 <sysAppSettings(regs*)+0xe3>
c001c48f:	84 c0                	test   al,al
c001c491:	0f 84 d2 00 00 00    	je     c001c569 <sysAppSettings(regs*)+0x10a>
c001c497:	3c 08                	cmp    al,0x8
c001c499:	74 63                	je     c001c4fe <sysAppSettings(regs*)+0x9f>
c001c49b:	59                   	pop    ecx
c001c49c:	0f b6 c0             	movzx  eax,al
c001c49f:	5e                   	pop    esi
c001c4a0:	05 e8 03 00 00       	add    eax,0x3e8
c001c4a5:	5f                   	pop    edi
c001c4a6:	99                   	cdq    
c001c4a7:	c3                   	ret    
c001c4a8:	b8 01 00 00 00       	mov    eax,0x1
c001c4ad:	59                   	pop    ecx
c001c4ae:	31 d2                	xor    edx,edx
c001c4b0:	5e                   	pop    esi
c001c4b1:	5f                   	pop    edi
c001c4b2:	c3                   	ret    
c001c4b3:	50                   	push   eax
c001c4b4:	68 00 01 00 00       	push   0x100
c001c4b9:	6a 00                	push   0x0
c001c4bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4c3:	83 c0 0c             	add    eax,0xc
c001c4c6:	50                   	push   eax
c001c4c7:	e8 84 42 fe ff       	call   c0000750 <memset>
c001c4cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4d1:	b9 ff 00 00 00       	mov    ecx,0xff
c001c4d6:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c4d9:	83 c7 0c             	add    edi,0xc
c001c4dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4e3:	5a                   	pop    edx
c001c4e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4e7:	59                   	pop    ecx
c001c4e8:	8d 50 0c             	lea    edx,[eax+0xc]
c001c4eb:	52                   	push   edx
c001c4ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c4f2:	e8 df 42 ff ff       	call   c00107d6 <VgaText::setTitle(char*)>
c001c4f7:	83 c4 10             	add    esp,0x10
c001c4fa:	31 c0                	xor    eax,eax
c001c4fc:	eb af                	jmp    c001c4ad <sysAppSettings(regs*)+0x4e>
c001c4fe:	83 ec 08             	sub    esp,0x8
c001c501:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c507:	83 e0 0f             	and    eax,0xf
c001c50a:	50                   	push   eax
c001c50b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c510:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c513:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c519:	e8 aa 42 ff ff       	call   c00107c8 <VgaText::setTitleColour(VgaColour)>
c001c51e:	5f                   	pop    edi
c001c51f:	58                   	pop    eax
c001c520:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c526:	c1 e8 04             	shr    eax,0x4
c001c529:	83 e0 0f             	and    eax,0xf
c001c52c:	50                   	push   eax
c001c52d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c532:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c535:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c53b:	e8 7a 42 ff ff       	call   c00107ba <VgaText::setTitleTextColour(VgaColour)>
c001c540:	eb b5                	jmp    c001c4f7 <sysAppSettings(regs*)+0x98>
c001c542:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c547:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c54a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c550:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c556:	c0 e8 06             	shr    al,0x6
c001c559:	83 e0 01             	and    eax,0x1
c001c55c:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c562:	31 c0                	xor    eax,eax
c001c564:	e9 44 ff ff ff       	jmp    c001c4ad <sysAppSettings(regs*)+0x4e>
c001c569:	b8 02 00 00 00       	mov    eax,0x2
c001c56e:	e9 3a ff ff ff       	jmp    c001c4ad <sysAppSettings(regs*)+0x4e>

c001c573 <sysSetFatAttrib(regs*)>:
c001c573:	57                   	push   edi
c001c574:	56                   	push   esi
c001c575:	53                   	push   ebx
c001c576:	83 ec 1c             	sub    esp,0x1c
c001c579:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c57d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c580:	68 14 01 00 00       	push   0x114
c001c585:	e8 02 33 ff ff       	call   c000f88c <malloc>
c001c58a:	83 c4 0c             	add    esp,0xc
c001c58d:	89 c3                	mov    ebx,eax
c001c58f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c594:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c597:	57                   	push   edi
c001c598:	53                   	push   ebx
c001c599:	e8 c8 6a ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001c59e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c5a1:	83 c4 0c             	add    esp,0xc
c001c5a4:	0f b6 d4             	movzx  edx,ah
c001c5a7:	0f b6 c0             	movzx  eax,al
c001c5aa:	52                   	push   edx
c001c5ab:	50                   	push   eax
c001c5ac:	53                   	push   ebx
c001c5ad:	e8 2a 6d ff ff       	call   c00132dc <File::chfatattr(unsigned char, unsigned char)>
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	85 db                	test   ebx,ebx
c001c5b7:	74 14                	je     c001c5cd <sysSetFatAttrib(regs*)+0x5a>
c001c5b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5bd:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c5bf:	83 ec 0c             	sub    esp,0xc
c001c5c2:	53                   	push   ebx
c001c5c3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c5c6:	83 c4 10             	add    esp,0x10
c001c5c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5cd:	85 c0                	test   eax,eax
c001c5cf:	0f 95 c0             	setne  al
c001c5d2:	31 d2                	xor    edx,edx
c001c5d4:	0f b6 c0             	movzx  eax,al
c001c5d7:	f7 d8                	neg    eax
c001c5d9:	83 d2 00             	adc    edx,0x0
c001c5dc:	83 c4 10             	add    esp,0x10
c001c5df:	f7 da                	neg    edx
c001c5e1:	5b                   	pop    ebx
c001c5e2:	5e                   	pop    esi
c001c5e3:	5f                   	pop    edi
c001c5e4:	c3                   	ret    

c001c5e5 <sysPipe(regs*)>:
c001c5e5:	57                   	push   edi
c001c5e6:	56                   	push   esi
c001c5e7:	53                   	push   ebx
c001c5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ec:	83 ec 0c             	sub    esp,0xc
c001c5ef:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c5f2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c5f5:	6a 20                	push   0x20
c001c5f7:	e8 90 32 ff ff       	call   c000f88c <malloc>
c001c5fc:	89 c3                	mov    ebx,eax
c001c5fe:	58                   	pop    eax
c001c5ff:	5a                   	pop    edx
c001c600:	68 00 50 00 00       	push   0x5000
c001c605:	53                   	push   ebx
c001c606:	e8 73 3b ff ff       	call   c001017e <Pipe::Pipe(int)>
c001c60b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c60e:	e8 a3 4c ff ff       	call   c00112b6 <UnixFile::getFileDescriptor()>
c001c613:	89 07                	mov    DWORD PTR [edi],eax
c001c615:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c618:	e8 99 4c ff ff       	call   c00112b6 <UnixFile::getFileDescriptor()>
c001c61d:	83 c4 10             	add    esp,0x10
c001c620:	89 06                	mov    DWORD PTR [esi],eax
c001c622:	31 d2                	xor    edx,edx
c001c624:	5b                   	pop    ebx
c001c625:	31 c0                	xor    eax,eax
c001c627:	5e                   	pop    esi
c001c628:	5f                   	pop    edi
c001c629:	c3                   	ret    

c001c62a <sysGetUnixTime(regs*)>:
c001c62a:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001c62f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c635:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c639:	e9 1a 74 ff ff       	jmp    c0013a58 <Clock::timeInSecondsLocal()>

c001c63e <string_ends_with(char const*, char const*)>:
c001c63e:	57                   	push   edi
c001c63f:	56                   	push   esi
c001c640:	53                   	push   ebx
c001c641:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c645:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c649:	83 ec 0c             	sub    esp,0xc
c001c64c:	53                   	push   ebx
c001c64d:	e8 1a 41 fe ff       	call   c000076c <strlen>
c001c652:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c655:	89 c6                	mov    esi,eax
c001c657:	e8 10 41 fe ff       	call   c000076c <strlen>
c001c65c:	83 c4 10             	add    esp,0x10
c001c65f:	39 c6                	cmp    esi,eax
c001c661:	7d 06                	jge    c001c669 <string_ends_with(char const*, char const*)+0x2b>
c001c663:	5b                   	pop    ebx
c001c664:	31 c0                	xor    eax,eax
c001c666:	5e                   	pop    esi
c001c667:	5f                   	pop    edi
c001c668:	c3                   	ret    
c001c669:	83 ec 08             	sub    esp,0x8
c001c66c:	29 c6                	sub    esi,eax
c001c66e:	57                   	push   edi
c001c66f:	01 f3                	add    ebx,esi
c001c671:	53                   	push   ebx
c001c672:	e8 21 42 fe ff       	call   c0000898 <strcmp>
c001c677:	83 c4 10             	add    esp,0x10
c001c67a:	85 c0                	test   eax,eax
c001c67c:	5b                   	pop    ebx
c001c67d:	0f 94 c0             	sete   al
c001c680:	5e                   	pop    esi
c001c681:	0f b6 c0             	movzx  eax,al
c001c684:	5f                   	pop    edi
c001c685:	c3                   	ret    

c001c686 <sysCallOpen(regs*)>:
c001c686:	56                   	push   esi
c001c687:	53                   	push   ebx
c001c688:	81 ec 04 01 00 00    	sub    esp,0x104
c001c68e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c695:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c698:	85 c9                	test   ecx,ecx
c001c69a:	0f 84 b3 00 00 00    	je     c001c753 <sysCallOpen(regs*)+0xcd>
c001c6a0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c6a3:	85 c0                	test   eax,eax
c001c6a5:	0f 84 a8 00 00 00    	je     c001c753 <sysCallOpen(regs*)+0xcd>
c001c6ab:	52                   	push   edx
c001c6ac:	68 cf cb 02 c0       	push   0xc002cbcf
c001c6b1:	50                   	push   eax
c001c6b2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c6b6:	56                   	push   esi
c001c6b7:	e8 00 68 ff ff       	call   c0012ebc <Fs::standardiseFiles(char*, char const*, char const*)>
c001c6bc:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6bf:	e8 a8 40 fe ff       	call   c000076c <strlen>
c001c6c4:	83 c4 10             	add    esp,0x10
c001c6c7:	48                   	dec    eax
c001c6c8:	74 1d                	je     c001c6e7 <sysCallOpen(regs*)+0x61>
c001c6ca:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c6cd:	eb 0f                	jmp    c001c6de <sysCallOpen(regs*)+0x58>
c001c6cf:	80 fa 3a             	cmp    dl,0x3a
c001c6d2:	74 0f                	je     c001c6e3 <sysCallOpen(regs*)+0x5d>
c001c6d4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c6d8:	48                   	dec    eax
c001c6d9:	74 0c                	je     c001c6e7 <sysCallOpen(regs*)+0x61>
c001c6db:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c6de:	80 fa 2e             	cmp    dl,0x2e
c001c6e1:	75 ec                	jne    c001c6cf <sysCallOpen(regs*)+0x49>
c001c6e3:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c6e7:	83 ec 08             	sub    esp,0x8
c001c6ea:	68 d3 cb 02 c0       	push   0xc002cbd3
c001c6ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c6f2:	e8 47 ff ff ff       	call   c001c63e <string_ends_with(char const*, char const*)>
c001c6f7:	83 c4 10             	add    esp,0x10
c001c6fa:	85 c0                	test   eax,eax
c001c6fc:	75 17                	jne    c001c715 <sysCallOpen(regs*)+0x8f>
c001c6fe:	83 ec 08             	sub    esp,0x8
c001c701:	68 f4 cb 02 c0       	push   0xc002cbf4
c001c706:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c709:	e8 30 ff ff ff       	call   c001c63e <string_ends_with(char const*, char const*)>
c001c70e:	83 c4 10             	add    esp,0x10
c001c711:	85 c0                	test   eax,eax
c001c713:	74 51                	je     c001c766 <sysCallOpen(regs*)+0xe0>
c001c715:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c718:	83 ec 08             	sub    esp,0x8
c001c71b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c721:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c728:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c72b:	ff 30                	push   DWORD PTR [eax]
c001c72d:	68 d8 cb 02 c0       	push   0xc002cbd8
c001c732:	e8 d0 63 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c737:	c7 04 24 e7 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbe7
c001c73e:	e8 c4 63 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001c743:	83 c4 10             	add    esp,0x10
c001c746:	81 c4 04 01 00 00    	add    esp,0x104
c001c74c:	31 c0                	xor    eax,eax
c001c74e:	31 d2                	xor    edx,edx
c001c750:	5b                   	pop    ebx
c001c751:	5e                   	pop    esi
c001c752:	c3                   	ret    
c001c753:	81 c4 04 01 00 00    	add    esp,0x104
c001c759:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c75e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c763:	5b                   	pop    ebx
c001c764:	5e                   	pop    esi
c001c765:	c3                   	ret    
c001c766:	83 ec 08             	sub    esp,0x8
c001c769:	68 d4 cb 02 c0       	push   0xc002cbd4
c001c76e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c771:	e8 22 41 fe ff       	call   c0000898 <strcmp>
c001c776:	83 c4 10             	add    esp,0x10
c001c779:	85 c0                	test   eax,eax
c001c77b:	74 98                	je     c001c715 <sysCallOpen(regs*)+0x8f>
c001c77d:	83 ec 08             	sub    esp,0x8
c001c780:	68 d3 cb 02 c0       	push   0xc002cbd3
c001c785:	56                   	push   esi
c001c786:	e8 b3 fe ff ff       	call   c001c63e <string_ends_with(char const*, char const*)>
c001c78b:	83 c4 10             	add    esp,0x10
c001c78e:	85 c0                	test   eax,eax
c001c790:	75 83                	jne    c001c715 <sysCallOpen(regs*)+0x8f>
c001c792:	83 ec 08             	sub    esp,0x8
c001c795:	68 f9 cb 02 c0       	push   0xc002cbf9
c001c79a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c79d:	e8 9c fe ff ff       	call   c001c63e <string_ends_with(char const*, char const*)>
c001c7a2:	83 c4 10             	add    esp,0x10
c001c7a5:	85 c0                	test   eax,eax
c001c7a7:	0f 85 d9 00 00 00    	jne    c001c886 <sysCallOpen(regs*)+0x200>
c001c7ad:	83 ec 08             	sub    esp,0x8
c001c7b0:	68 fe cb 02 c0       	push   0xc002cbfe
c001c7b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7b8:	e8 81 fe ff ff       	call   c001c63e <string_ends_with(char const*, char const*)>
c001c7bd:	83 c4 10             	add    esp,0x10
c001c7c0:	85 c0                	test   eax,eax
c001c7c2:	0f 85 be 00 00 00    	jne    c001c886 <sysCallOpen(regs*)+0x200>
c001c7c8:	83 ec 08             	sub    esp,0x8
c001c7cb:	68 fa cb 02 c0       	push   0xc002cbfa
c001c7d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7d3:	e8 c0 40 fe ff       	call   c0000898 <strcmp>
c001c7d8:	83 c4 10             	add    esp,0x10
c001c7db:	85 c0                	test   eax,eax
c001c7dd:	0f 84 a3 00 00 00    	je     c001c886 <sysCallOpen(regs*)+0x200>
c001c7e3:	83 ec 08             	sub    esp,0x8
c001c7e6:	68 f9 cb 02 c0       	push   0xc002cbf9
c001c7eb:	56                   	push   esi
c001c7ec:	e8 4d fe ff ff       	call   c001c63e <string_ends_with(char const*, char const*)>
c001c7f1:	83 c4 10             	add    esp,0x10
c001c7f4:	85 c0                	test   eax,eax
c001c7f6:	0f 85 8a 00 00 00    	jne    c001c886 <sysCallOpen(regs*)+0x200>
c001c7fc:	83 ec 0c             	sub    esp,0xc
c001c7ff:	68 14 01 00 00       	push   0x114
c001c804:	e8 83 30 ff ff       	call   c000f88c <malloc>
c001c809:	83 c4 0c             	add    esp,0xc
c001c80c:	89 c6                	mov    esi,eax
c001c80e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c813:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c816:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c819:	56                   	push   esi
c001c81a:	e8 47 68 ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001c81f:	83 c4 10             	add    esp,0x10
c001c822:	85 f6                	test   esi,esi
c001c824:	0f 84 29 ff ff ff    	je     c001c753 <sysCallOpen(regs*)+0xcd>
c001c82a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c82d:	0f b6 c2             	movzx  eax,dl
c001c830:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c833:	89 d0                	mov    eax,edx
c001c835:	83 e0 01             	and    eax,0x1
c001c838:	f6 c2 02             	test   dl,0x2
c001c83b:	74 03                	je     c001c840 <sysCallOpen(regs*)+0x1ba>
c001c83d:	83 c8 02             	or     eax,0x2
c001c840:	f6 c2 04             	test   dl,0x4
c001c843:	74 03                	je     c001c848 <sysCallOpen(regs*)+0x1c2>
c001c845:	83 c8 04             	or     eax,0x4
c001c848:	f6 c2 08             	test   dl,0x8
c001c84b:	74 03                	je     c001c850 <sysCallOpen(regs*)+0x1ca>
c001c84d:	83 c8 0a             	or     eax,0xa
c001c850:	83 e2 10             	and    edx,0x10
c001c853:	74 03                	je     c001c858 <sysCallOpen(regs*)+0x1d2>
c001c855:	83 c8 12             	or     eax,0x12
c001c858:	83 ec 08             	sub    esp,0x8
c001c85b:	50                   	push   eax
c001c85c:	56                   	push   esi
c001c85d:	e8 68 68 ff ff       	call   c00130ca <File::open(FileOpenMode)>
c001c862:	83 c4 10             	add    esp,0x10
c001c865:	85 c0                	test   eax,eax
c001c867:	0f 85 e6 fe ff ff    	jne    c001c753 <sysCallOpen(regs*)+0xcd>
c001c86d:	83 ec 0c             	sub    esp,0xc
c001c870:	56                   	push   esi
c001c871:	e8 40 4a ff ff       	call   c00112b6 <UnixFile::getFileDescriptor()>
c001c876:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c879:	89 02                	mov    DWORD PTR [edx],eax
c001c87b:	c1 f8 1f             	sar    eax,0x1f
c001c87e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c881:	e9 bd fe ff ff       	jmp    c001c743 <sysCallOpen(regs*)+0xbd>
c001c886:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c889:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c88f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c896:	e9 ab fe ff ff       	jmp    c001c746 <sysCallOpen(regs*)+0xc0>

c001c89b <Sys::loadSyscalls()>:
c001c89b:	c7 05 20 1d 03 c0 8b b9 01 c0 	mov    DWORD PTR ds:0xc0031d20,0xc001b98b
c001c8a5:	c7 05 24 1d 03 c0 f0 b4 01 c0 	mov    DWORD PTR ds:0xc0031d24,0xc001b4f0
c001c8af:	c7 05 28 1d 03 c0 de b6 01 c0 	mov    DWORD PTR ds:0xc0031d28,0xc001b6de
c001c8b9:	c7 05 2c 1d 03 c0 c1 b8 01 c0 	mov    DWORD PTR ds:0xc0031d2c,0xc001b8c1
c001c8c3:	c7 05 30 1d 03 c0 76 b6 01 c0 	mov    DWORD PTR ds:0xc0031d30,0xc001b676
c001c8cd:	c7 05 34 1d 03 c0 27 b5 01 c0 	mov    DWORD PTR ds:0xc0031d34,0xc001b527
c001c8d7:	c7 05 38 1d 03 c0 08 b5 01 c0 	mov    DWORD PTR ds:0xc0031d38,0xc001b508
c001c8e1:	c7 05 3c 1d 03 c0 33 b7 01 c0 	mov    DWORD PTR ds:0xc0031d3c,0xc001b733
c001c8eb:	c7 05 44 1d 03 c0 c6 be 01 c0 	mov    DWORD PTR ds:0xc0031d44,0xc001bec6
c001c8f5:	c7 05 40 1d 03 c0 86 c6 01 c0 	mov    DWORD PTR ds:0xc0031d40,0xc001c686
c001c8ff:	c7 05 48 1d 03 c0 4e bf 01 c0 	mov    DWORD PTR ds:0xc0031d48,0xc001bf4e
c001c909:	c7 05 4c 1d 03 c0 b5 bb 01 c0 	mov    DWORD PTR ds:0xc0031d4c,0xc001bbb5
c001c913:	c7 05 50 1d 03 c0 d1 b9 01 c0 	mov    DWORD PTR ds:0xc0031d50,0xc001b9d1
c001c91d:	c7 05 54 1d 03 c0 d6 b9 01 c0 	mov    DWORD PTR ds:0xc0031d54,0xc001b9d6
c001c927:	c7 05 58 1d 03 c0 29 c0 01 c0 	mov    DWORD PTR ds:0xc0031d58,0xc001c029
c001c931:	c7 05 5c 1d 03 c0 c3 bf 01 c0 	mov    DWORD PTR ds:0xc0031d5c,0xc001bfc3
c001c93b:	c7 05 60 1d 03 c0 9d bc 01 c0 	mov    DWORD PTR ds:0xc0031d60,0xc001bc9d
c001c945:	c7 05 64 1d 03 c0 06 bd 01 c0 	mov    DWORD PTR ds:0xc0031d64,0xc001bd06
c001c94f:	c7 05 68 1d 03 c0 83 bd 01 c0 	mov    DWORD PTR ds:0xc0031d68,0xc001bd83
c001c959:	c7 05 6c 1d 03 c0 db b9 01 c0 	mov    DWORD PTR ds:0xc0031d6c,0xc001b9db
c001c963:	c7 05 70 1d 03 c0 99 c0 01 c0 	mov    DWORD PTR ds:0xc0031d70,0xc001c099
c001c96d:	c7 05 74 1d 03 c0 b3 c0 01 c0 	mov    DWORD PTR ds:0xc0031d74,0xc001c0b3
c001c977:	c7 05 78 1d 03 c0 b3 c0 01 c0 	mov    DWORD PTR ds:0xc0031d78,0xc001c0b3
c001c981:	c7 05 7c 1d 03 c0 f4 c0 01 c0 	mov    DWORD PTR ds:0xc0031d7c,0xc001c0f4
c001c98b:	c7 05 80 1d 03 c0 58 c1 01 c0 	mov    DWORD PTR ds:0xc0031d80,0xc001c158
c001c995:	c7 05 84 1d 03 c0 87 bb 01 c0 	mov    DWORD PTR ds:0xc0031d84,0xc001bb87
c001c99f:	c7 05 88 1d 03 c0 bc c1 01 c0 	mov    DWORD PTR ds:0xc0031d88,0xc001c1bc
c001c9a9:	c7 05 8c 1d 03 c0 44 bb 01 c0 	mov    DWORD PTR ds:0xc0031d8c,0xc001bb44
c001c9b3:	c7 05 90 1d 03 c0 08 c2 01 c0 	mov    DWORD PTR ds:0xc0031d90,0xc001c208
c001c9bd:	c7 05 94 1d 03 c0 43 bc 01 c0 	mov    DWORD PTR ds:0xc0031d94,0xc001bc43
c001c9c7:	c7 05 98 1d 03 c0 8b c2 01 c0 	mov    DWORD PTR ds:0xc0031d98,0xc001c28b
c001c9d1:	c7 05 9c 1d 03 c0 06 be 01 c0 	mov    DWORD PTR ds:0xc0031d9c,0xc001be06
c001c9db:	c7 05 a0 1d 03 c0 b2 c2 01 c0 	mov    DWORD PTR ds:0xc0031da0,0xc001c2b2
c001c9e5:	c7 05 a4 1d 03 c0 27 c3 01 c0 	mov    DWORD PTR ds:0xc0031da4,0xc001c327
c001c9ef:	c7 05 a8 1d 03 c0 5f c4 01 c0 	mov    DWORD PTR ds:0xc0031da8,0xc001c45f
c001c9f9:	c7 05 ac 1d 03 c0 e5 b9 01 c0 	mov    DWORD PTR ds:0xc0031dac,0xc001b9e5
c001ca03:	c7 05 b0 1d 03 c0 4f ba 01 c0 	mov    DWORD PTR ds:0xc0031db0,0xc001ba4f
c001ca0d:	c7 05 b4 1d 03 c0 95 ba 01 c0 	mov    DWORD PTR ds:0xc0031db4,0xc001ba95
c001ca17:	c7 05 b8 1d 03 c0 73 c5 01 c0 	mov    DWORD PTR ds:0xc0031db8,0xc001c573
c001ca21:	c7 05 bc 1d 03 c0 ce c0 01 c0 	mov    DWORD PTR ds:0xc0031dbc,0xc001c0ce
c001ca2b:	c7 05 c0 1d 03 c0 e6 ba 01 c0 	mov    DWORD PTR ds:0xc0031dc0,0xc001bae6
c001ca35:	c7 05 c4 1d 03 c0 e5 c5 01 c0 	mov    DWORD PTR ds:0xc0031dc4,0xc001c5e5
c001ca3f:	c7 05 c8 1d 03 c0 2a c6 01 c0 	mov    DWORD PTR ds:0xc0031dc8,0xc001c62a
c001ca49:	c7 05 cc 1d 03 c0 ce b5 01 c0 	mov    DWORD PTR ds:0xc0031dcc,0xc001b5ce
c001ca53:	c7 05 d0 1d 03 c0 4f b7 01 c0 	mov    DWORD PTR ds:0xc0031dd0,0xc001b74f
c001ca5d:	c7 05 d4 1d 03 c0 77 b8 01 c0 	mov    DWORD PTR ds:0xc0031dd4,0xc001b877
c001ca67:	c7 05 d8 1d 03 c0 ba b4 01 c0 	mov    DWORD PTR ds:0xc0031dd8,0xc001b4ba
c001ca71:	c7 05 dc 1d 03 c0 29 b9 01 c0 	mov    DWORD PTR ds:0xc0031ddc,0xc001b929
c001ca7b:	c7 05 e0 1d 03 c0 33 b5 01 c0 	mov    DWORD PTR ds:0xc0031de0,0xc001b533
c001ca85:	c7 05 e4 1d 03 c0 4a b5 01 c0 	mov    DWORD PTR ds:0xc0031de4,0xc001b54a
c001ca8f:	c3                   	ret    

c001ca90 <Sys::systemCall(regs*, void*)>:
c001ca90:	53                   	push   ebx
c001ca91:	83 ec 08             	sub    esp,0x8
c001ca94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca98:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ca9b:	83 f8 7f             	cmp    eax,0x7f
c001ca9e:	77 16                	ja     c001cab6 <Sys::systemCall(regs*, void*)+0x26>
c001caa0:	8b 14 85 20 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce2e0]
c001caa7:	85 d2                	test   edx,edx
c001caa9:	74 0b                	je     c001cab6 <Sys::systemCall(regs*, void*)+0x26>
c001caab:	83 ec 0c             	sub    esp,0xc
c001caae:	53                   	push   ebx
c001caaf:	ff d2                	call   edx
c001cab1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cab4:	eb 0d                	jmp    c001cac3 <Sys::systemCall(regs*, void*)+0x33>
c001cab6:	52                   	push   edx
c001cab7:	52                   	push   edx
c001cab8:	50                   	push   eax
c001cab9:	68 03 cc 02 c0       	push   0xc002cc03
c001cabe:	e8 44 60 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001cac3:	83 c4 10             	add    esp,0x10
c001cac6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cacb:	31 d2                	xor    edx,edx
c001cacd:	83 c4 08             	add    esp,0x8
c001cad0:	5b                   	pop    ebx
c001cad1:	c3                   	ret    

c001cad2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cad2:	55                   	push   ebp
c001cad3:	57                   	push   edi
c001cad4:	56                   	push   esi
c001cad5:	53                   	push   ebx
c001cad6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cadc:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cae3:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001caea:	85 c0                	test   eax,eax
c001caec:	0f 95 c1             	setne  cl
c001caef:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001caf7:	0f 94 c2             	sete   dl
c001cafa:	84 d1                	test   cl,dl
c001cafc:	74 23                	je     c001cb21 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cafe:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cb04:	74 1b                	je     c001cb21 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb06:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb0c:	89 da                	mov    edx,ebx
c001cb0e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cb14:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cb1a:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cb21:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cb28:	05 ff 0f 00 00       	add    eax,0xfff
c001cb2d:	83 ec 0c             	sub    esp,0xc
c001cb30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb34:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001cb3a:	c1 e8 0c             	shr    eax,0xc
c001cb3d:	89 fe                	mov    esi,edi
c001cb3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb43:	c1 ee 0c             	shr    esi,0xc
c001cb46:	6a 01                	push   0x1
c001cb48:	e8 b4 4b ff ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c001cb4d:	89 c5                	mov    ebp,eax
c001cb4f:	58                   	pop    eax
c001cb50:	5a                   	pop    edx
c001cb51:	56                   	push   esi
c001cb52:	68 87 cc 02 c0       	push   0xc002cc87
c001cb57:	e8 ab 5f ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001cb5c:	59                   	pop    ecx
c001cb5d:	58                   	pop    eax
c001cb5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb62:	68 99 cc 02 c0       	push   0xc002cc99
c001cb67:	e8 9b 5f ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001cb6c:	83 c4 10             	add    esp,0x10
c001cb6f:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001cb75:	0f 86 31 01 00 00    	jbe    c001ccac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cb7b:	c1 e6 0c             	shl    esi,0xc
c001cb7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb81:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001cb84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb88:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001cb8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb92:	01 df                	add    edi,ebx
c001cb94:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001cb97:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cb9b:	0f 84 08 01 00 00    	je     c001cca9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001cba1:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001cba7:	76 05                	jbe    c001cbae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001cba9:	bf 00 10 00 00       	mov    edi,0x1000
c001cbae:	83 ec 0c             	sub    esp,0xc
c001cbb1:	31 d2                	xor    edx,edx
c001cbb3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cbba:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cbbc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cbc0:	50                   	push   eax
c001cbc1:	8d 74 24 30          	lea    esi,[esp+0x30]
c001cbc5:	56                   	push   esi
c001cbc6:	52                   	push   edx
c001cbc7:	57                   	push   edi
c001cbc8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cbcf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbd2:	83 c4 20             	add    esp,0x20
c001cbd5:	85 c0                	test   eax,eax
c001cbd7:	74 0a                	je     c001cbe3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001cbd9:	53                   	push   ebx
c001cbda:	53                   	push   ebx
c001cbdb:	50                   	push   eax
c001cbdc:	68 ab cc 02 c0       	push   0xc002ccab
c001cbe1:	eb 0f                	jmp    c001cbf2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001cbe3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001cbe7:	74 20                	je     c001cc09 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001cbe9:	51                   	push   ecx
c001cbea:	51                   	push   ecx
c001cbeb:	6a 00                	push   0x0
c001cbed:	68 d6 cc 02 c0       	push   0xc002ccd6
c001cbf2:	e8 10 5f ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001cbf7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cbfa:	e8 c2 4f ff ff       	call   c0011bc1 <Virt::freeKernelVirtualPages(unsigned long)>
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	31 c0                	xor    eax,eax
c001cc04:	e9 68 01 00 00       	jmp    c001cd71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cc09:	fa                   	cli    
c001cc0a:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001cc10:	e8 b3 2f ff ff       	call   c000fbc8 <Phys::allocatePage()>
c001cc15:	6a 07                	push   0x7
c001cc17:	89 c7                	mov    edi,eax
c001cc19:	55                   	push   ebp
c001cc1a:	50                   	push   eax
c001cc1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc23:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc29:	e8 0a 53 ff ff       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cc2e:	83 c4 0c             	add    esp,0xc
c001cc31:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cc38:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc3e:	6a 00                	push   0x0
c001cc40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc45:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc48:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc4e:	e8 3f 51 ff ff       	call   c0011d92 <VAS::mapOtherVASIn(bool, VAS*)>
c001cc53:	58                   	pop    eax
c001cc54:	5a                   	pop    edx
c001cc55:	68 07 0c 00 00       	push   0xc07
c001cc5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cc5e:	57                   	push   edi
c001cc5f:	89 ef                	mov    edi,ebp
c001cc61:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cc68:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc6e:	6a 00                	push   0x0
c001cc70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc75:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc78:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc7e:	e8 71 56 ff ff       	call   c00122f4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cc83:	b9 00 10 00 00       	mov    ecx,0x1000
c001cc88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc8a:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001cc8f:	83 c4 20             	add    esp,0x20
c001cc92:	48                   	dec    eax
c001cc93:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001cc98:	85 c0                	test   eax,eax
c001cc9a:	75 01                	jne    c001cc9d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001cc9c:	fb                   	sti    
c001cc9d:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cca4:	e9 df fe ff ff       	jmp    c001cb88 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001cca9:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001ccac:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ccb4:	0f 86 a9 00 00 00    	jbe    c001cd63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001ccba:	fa                   	cli    
c001ccbb:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001ccc1:	51                   	push   ecx
c001ccc2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ccc9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cccf:	6a 00                	push   0x0
c001ccd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccd6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ccd9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccdf:	e8 ae 50 ff ff       	call   c0011d92 <VAS::mapOtherVASIn(bool, VAS*)>
c001cce4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cce8:	c1 e6 0c             	shl    esi,0xc
c001cceb:	01 de                	add    esi,ebx
c001cced:	83 c4 10             	add    esp,0x10
c001ccf0:	39 de                	cmp    esi,ebx
c001ccf2:	74 61                	je     c001cd55 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001ccf4:	e8 cf 2e ff ff       	call   c000fbc8 <Phys::allocatePage()>
c001ccf9:	6a 07                	push   0x7
c001ccfb:	89 c7                	mov    edi,eax
c001ccfd:	55                   	push   ebp
c001ccfe:	50                   	push   eax
c001ccff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd04:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd07:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd0d:	e8 26 52 ff ff       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd12:	58                   	pop    eax
c001cd13:	5a                   	pop    edx
c001cd14:	68 07 0c 00 00       	push   0xc07
c001cd19:	53                   	push   ebx
c001cd1a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd20:	57                   	push   edi
c001cd21:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cd28:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd2e:	6a 00                	push   0x0
c001cd30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd38:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd3e:	e8 b1 55 ff ff       	call   c00122f4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cd43:	83 c4 1c             	add    esp,0x1c
c001cd46:	68 00 10 00 00       	push   0x1000
c001cd4b:	6a 00                	push   0x0
c001cd4d:	55                   	push   ebp
c001cd4e:	e8 fd 39 fe ff       	call   c0000750 <memset>
c001cd53:	eb 98                	jmp    c001cced <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cd55:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001cd5a:	48                   	dec    eax
c001cd5b:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001cd60:	75 01                	jne    c001cd63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cd62:	fb                   	sti    
c001cd63:	83 ec 0c             	sub    esp,0xc
c001cd66:	55                   	push   ebp
c001cd67:	e8 55 4e ff ff       	call   c0011bc1 <Virt::freeKernelVirtualPages(unsigned long)>
c001cd6c:	83 c4 10             	add    esp,0x10
c001cd6f:	b0 01                	mov    al,0x1
c001cd71:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cd77:	5b                   	pop    ebx
c001cd78:	5e                   	pop    esi
c001cd79:	5f                   	pop    edi
c001cd7a:	5d                   	pop    ebp
c001cd7b:	c3                   	ret    

c001cd7c <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cd7c:	55                   	push   ebp
c001cd7d:	57                   	push   edi
c001cd7e:	56                   	push   esi
c001cd7f:	53                   	push   ebx
c001cd80:	83 ec 48             	sub    esp,0x48
c001cd83:	68 14 01 00 00       	push   0x114
c001cd88:	e8 ff 2a ff ff       	call   c000f88c <malloc>
c001cd8d:	83 c4 0c             	add    esp,0xc
c001cd90:	89 c6                	mov    esi,eax
c001cd92:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cd96:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cd9a:	50                   	push   eax
c001cd9b:	e8 c6 62 ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001cda0:	58                   	pop    eax
c001cda1:	5a                   	pop    edx
c001cda2:	6a 01                	push   0x1
c001cda4:	56                   	push   esi
c001cda5:	e8 20 63 ff ff       	call   c00130ca <File::open(FileOpenMode)>
c001cdaa:	83 c4 10             	add    esp,0x10
c001cdad:	85 c0                	test   eax,eax
c001cdaf:	0f 85 47 01 00 00    	jne    c001cefc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdb5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cdbd:	83 ec 0c             	sub    esp,0xc
c001cdc0:	6a 34                	push   0x34
c001cdc2:	e8 c5 2a ff ff       	call   c000f88c <malloc>
c001cdc7:	89 c3                	mov    ebx,eax
c001cdc9:	58                   	pop    eax
c001cdca:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdcc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cdd0:	57                   	push   edi
c001cdd1:	53                   	push   ebx
c001cdd2:	6a 00                	push   0x0
c001cdd4:	6a 34                	push   0x34
c001cdd6:	56                   	push   esi
c001cdd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdda:	83 c4 20             	add    esp,0x20
c001cddd:	85 c0                	test   eax,eax
c001cddf:	0f 85 17 01 00 00    	jne    c001cefc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cde5:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cdeb:	0f 85 0b 01 00 00    	jne    c001cefc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdf1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cdf4:	85 c0                	test   eax,eax
c001cdf6:	0f 84 00 01 00 00    	je     c001cefc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdfc:	31 d2                	xor    edx,edx
c001cdfe:	55                   	push   ebp
c001cdff:	52                   	push   edx
c001ce00:	50                   	push   eax
c001ce01:	56                   	push   esi
c001ce02:	e8 81 63 ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001ce07:	83 c4 10             	add    esp,0x10
c001ce0a:	85 c0                	test   eax,eax
c001ce0c:	0f 85 ea 00 00 00    	jne    c001cefc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce12:	83 ec 0c             	sub    esp,0xc
c001ce15:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ce18:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ce20:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce24:	0f af c2             	imul   eax,edx
c001ce27:	50                   	push   eax
c001ce28:	e8 5f 2a ff ff       	call   c000f88c <malloc>
c001ce2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce2f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce33:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce3a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce3e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce42:	0f af c2             	imul   eax,edx
c001ce45:	99                   	cdq    
c001ce46:	52                   	push   edx
c001ce47:	50                   	push   eax
c001ce48:	56                   	push   esi
c001ce49:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce4c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ce4f:	83 c4 20             	add    esp,0x20
c001ce52:	85 c0                	test   eax,eax
c001ce54:	0f 84 a2 00 00 00    	je     c001cefc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce5a:	31 d2                	xor    edx,edx
c001ce5c:	51                   	push   ecx
c001ce5d:	52                   	push   edx
c001ce5e:	50                   	push   eax
c001ce5f:	56                   	push   esi
c001ce60:	e8 23 63 ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001ce65:	83 c4 10             	add    esp,0x10
c001ce68:	85 c0                	test   eax,eax
c001ce6a:	0f 85 8c 00 00 00    	jne    c001cefc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce70:	83 ec 0c             	sub    esp,0xc
c001ce73:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ce77:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ce7b:	31 ed                	xor    ebp,ebp
c001ce7d:	0f af c2             	imul   eax,edx
c001ce80:	50                   	push   eax
c001ce81:	e8 06 2a ff ff       	call   c000f88c <malloc>
c001ce86:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce93:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ce97:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ce9b:	0f af c2             	imul   eax,edx
c001ce9e:	99                   	cdq    
c001ce9f:	52                   	push   edx
c001cea0:	50                   	push   eax
c001cea1:	56                   	push   esi
c001cea2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cea5:	83 c4 20             	add    esp,0x20
c001cea8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ceb0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ceb4:	0f 86 80 00 00 00    	jbe    c001cf3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ceba:	0f b7 fd             	movzx  edi,bp
c001cebd:	c1 e7 05             	shl    edi,0x5
c001cec0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cec4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cec7:	75 6b                	jne    c001cf34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cec9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ced0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ced3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ced7:	52                   	push   edx
c001ced8:	31 d2                	xor    edx,edx
c001ceda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cedd:	52                   	push   edx
c001cede:	50                   	push   eax
c001cedf:	56                   	push   esi
c001cee0:	e8 a3 62 ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001cee5:	83 c4 10             	add    esp,0x10
c001cee8:	85 c0                	test   eax,eax
c001ceea:	74 17                	je     c001cf03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ceec:	83 ec 0c             	sub    esp,0xc
c001ceef:	68 02 cd 02 c0       	push   0xc002cd02
c001cef4:	e8 0e 5c ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001cef9:	83 c4 10             	add    esp,0x10
c001cefc:	31 c0                	xor    eax,eax
c001cefe:	e9 87 00 00 00       	jmp    c001cf8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cf03:	83 ec 0c             	sub    esp,0xc
c001cf06:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cf09:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cf0c:	50                   	push   eax
c001cf0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cf11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf15:	56                   	push   esi
c001cf16:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cf1a:	e8 b3 fb ff ff       	call   c001cad2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cf1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf23:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cf27:	83 c4 20             	add    esp,0x20
c001cf2a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cf2e:	73 04                	jae    c001cf34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf34:	45                   	inc    ebp
c001cf35:	e9 76 ff ff ff       	jmp    c001ceb0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cf3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cf3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf46:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cf4c:	83 ec 0c             	sub    esp,0xc
c001cf4f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cf55:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cf5a:	05 00 10 00 00       	add    eax,0x1000
c001cf5f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cf62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf66:	e8 31 29 ff ff       	call   c000f89c <free>
c001cf6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf6e:	e8 29 29 ff ff       	call   c000f89c <free>
c001cf73:	58                   	pop    eax
c001cf74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf78:	e8 1f 29 ff ff       	call   c000f89c <free>
c001cf7d:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf80:	e8 a3 61 ff ff       	call   c0013128 <File::close()>
c001cf85:	83 c4 10             	add    esp,0x10
c001cf88:	b0 01                	mov    al,0x1
c001cf8a:	83 c4 3c             	add    esp,0x3c
c001cf8d:	5b                   	pop    ebx
c001cf8e:	5e                   	pop    esi
c001cf8f:	5f                   	pop    edi
c001cf90:	5d                   	pop    ebp
c001cf91:	c3                   	ret    

c001cf92 <Thr::runtimeReferenceHelper()>:
c001cf92:	83 ec 18             	sub    esp,0x18
c001cf95:	68 0a cd 02 c0       	push   0xc002cd0a
c001cf9a:	e8 68 5b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001cf9f:	fa                   	cli    
c001cfa0:	83 c4 10             	add    esp,0x10
c001cfa3:	eb fe                	jmp    c001cfa3 <Thr::runtimeReferenceHelper()+0x11>

c001cfa5 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cfa5:	57                   	push   edi
c001cfa6:	56                   	push   esi
c001cfa7:	53                   	push   ebx
c001cfa8:	31 db                	xor    ebx,ebx
c001cfaa:	39 1d c0 26 03 c0    	cmp    DWORD PTR ds:0xc00326c0,ebx
c001cfb0:	7e 3c                	jle    c001cfee <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cfb2:	8b 34 9d 40 26 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd9c0]
c001cfb9:	31 ff                	xor    edi,edi
c001cfbb:	39 3c 9d 40 25 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdac0],edi
c001cfc2:	7e 27                	jle    c001cfeb <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cfc4:	50                   	push   eax
c001cfc5:	50                   	push   eax
c001cfc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfca:	8b 06                	mov    eax,DWORD PTR [esi]
c001cfcc:	03 04 9d c0 25 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcda40]
c001cfd3:	50                   	push   eax
c001cfd4:	e8 bf 38 fe ff       	call   c0000898 <strcmp>
c001cfd9:	83 c4 10             	add    esp,0x10
c001cfdc:	85 c0                	test   eax,eax
c001cfde:	75 05                	jne    c001cfe5 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cfe0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cfe3:	eb 0b                	jmp    c001cff0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cfe5:	83 c6 10             	add    esi,0x10
c001cfe8:	47                   	inc    edi
c001cfe9:	eb d0                	jmp    c001cfbb <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cfeb:	43                   	inc    ebx
c001cfec:	eb bc                	jmp    c001cfaa <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cfee:	31 c0                	xor    eax,eax
c001cff0:	5b                   	pop    ebx
c001cff1:	5e                   	pop    esi
c001cff2:	5f                   	pop    edi
c001cff3:	c3                   	ret    

c001cff4 <Thr::loadKernelSymbolTable(char const*)>:
c001cff4:	55                   	push   ebp
c001cff5:	57                   	push   edi
c001cff6:	56                   	push   esi
c001cff7:	53                   	push   ebx
c001cff8:	83 ec 68             	sub    esp,0x68
c001cffb:	8b 35 10 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032710
c001d001:	68 14 01 00 00       	push   0x114
c001d006:	e8 81 28 ff ff       	call   c000f88c <malloc>
c001d00b:	83 c4 0c             	add    esp,0xc
c001d00e:	89 c3                	mov    ebx,eax
c001d010:	56                   	push   esi
c001d011:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d015:	50                   	push   eax
c001d016:	e8 4b 60 ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001d01b:	5e                   	pop    esi
c001d01c:	5f                   	pop    edi
c001d01d:	6a 01                	push   0x1
c001d01f:	53                   	push   ebx
c001d020:	e8 a5 60 ff ff       	call   c00130ca <File::open(FileOpenMode)>
c001d025:	83 c4 10             	add    esp,0x10
c001d028:	85 c0                	test   eax,eax
c001d02a:	74 0a                	je     c001d036 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d02c:	83 ec 0c             	sub    esp,0xc
c001d02f:	68 2c cd 02 c0       	push   0xc002cd2c
c001d034:	eb 34                	jmp    c001d06a <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d036:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d03e:	83 ec 0c             	sub    esp,0xc
c001d041:	6a 34                	push   0x34
c001d043:	e8 44 28 ff ff       	call   c000f88c <malloc>
c001d048:	59                   	pop    ecx
c001d049:	89 c7                	mov    edi,eax
c001d04b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d04f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d051:	56                   	push   esi
c001d052:	57                   	push   edi
c001d053:	6a 00                	push   0x0
c001d055:	6a 34                	push   0x34
c001d057:	53                   	push   ebx
c001d058:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d05b:	83 c4 20             	add    esp,0x20
c001d05e:	85 c0                	test   eax,eax
c001d060:	74 17                	je     c001d079 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d062:	83 ec 0c             	sub    esp,0xc
c001d065:	68 43 cd 02 c0       	push   0xc002cd43
c001d06a:	e8 28 d6 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001d06f:	83 c4 10             	add    esp,0x10
c001d072:	31 c0                	xor    eax,eax
c001d074:	e9 31 02 00 00       	jmp    c001d2aa <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d079:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d07f:	75 e1                	jne    c001d062 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d081:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d084:	85 c0                	test   eax,eax
c001d086:	74 da                	je     c001d062 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d088:	52                   	push   edx
c001d089:	31 d2                	xor    edx,edx
c001d08b:	52                   	push   edx
c001d08c:	50                   	push   eax
c001d08d:	53                   	push   ebx
c001d08e:	e8 f5 60 ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d093:	83 c4 10             	add    esp,0x10
c001d096:	85 c0                	test   eax,eax
c001d098:	75 c8                	jne    c001d062 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d09a:	83 ec 0c             	sub    esp,0xc
c001d09d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0a1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0a5:	31 ed                	xor    ebp,ebp
c001d0a7:	0f af c2             	imul   eax,edx
c001d0aa:	50                   	push   eax
c001d0ab:	e8 dc 27 ff ff       	call   c000f88c <malloc>
c001d0b0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d0b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0b6:	89 34 24             	mov    DWORD PTR [esp],esi
c001d0b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0bd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0c5:	0f af c2             	imul   eax,edx
c001d0c8:	99                   	cdq    
c001d0c9:	52                   	push   edx
c001d0ca:	50                   	push   eax
c001d0cb:	53                   	push   ebx
c001d0cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0cf:	83 c4 20             	add    esp,0x20
c001d0d2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d0da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d0e2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d0ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d0f2:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d0f6:	0f 86 aa 00 00 00    	jbe    c001d1a6 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d0fc:	0f b7 f5             	movzx  esi,bp
c001d0ff:	6b f6 28             	imul   esi,esi,0x28
c001d102:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d106:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d109:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d10d:	50                   	push   eax
c001d10e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d112:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d116:	8b 16                	mov    edx,DWORD PTR [esi]
c001d118:	6b c0 28             	imul   eax,eax,0x28
c001d11b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d11f:	89 d0                	mov    eax,edx
c001d121:	31 d2                	xor    edx,edx
c001d123:	52                   	push   edx
c001d124:	50                   	push   eax
c001d125:	53                   	push   ebx
c001d126:	e8 5d 60 ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d12b:	83 c4 0c             	add    esp,0xc
c001d12e:	6a 20                	push   0x20
c001d130:	6a 00                	push   0x0
c001d132:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d136:	52                   	push   edx
c001d137:	e8 14 36 fe ff       	call   c0000750 <memset>
c001d13c:	58                   	pop    eax
c001d13d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d13f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d143:	51                   	push   ecx
c001d144:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d148:	52                   	push   edx
c001d149:	6a 00                	push   0x0
c001d14b:	6a 1f                	push   0x1f
c001d14d:	53                   	push   ebx
c001d14e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d151:	83 c4 18             	add    esp,0x18
c001d154:	68 5a cd 02 c0       	push   0xc002cd5a
c001d159:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d15d:	52                   	push   edx
c001d15e:	e8 35 37 fe ff       	call   c0000898 <strcmp>
c001d163:	83 c4 10             	add    esp,0x10
c001d166:	85 c0                	test   eax,eax
c001d168:	75 0f                	jne    c001d179 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d16a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d16d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d171:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d179:	50                   	push   eax
c001d17a:	50                   	push   eax
c001d17b:	68 62 cd 02 c0       	push   0xc002cd62
c001d180:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d184:	50                   	push   eax
c001d185:	e8 0e 37 fe ff       	call   c0000898 <strcmp>
c001d18a:	83 c4 10             	add    esp,0x10
c001d18d:	85 c0                	test   eax,eax
c001d18f:	75 0f                	jne    c001d1a0 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d191:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d194:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d198:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d19c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1a0:	45                   	inc    ebp
c001d1a1:	e9 4c ff ff ff       	jmp    c001d0f2 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d1a6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d1ab:	75 10                	jne    c001d1bd <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d1ad:	83 ec 0c             	sub    esp,0xc
c001d1b0:	68 6a cd 02 c0       	push   0xc002cd6a
c001d1b5:	e8 dd d4 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001d1ba:	83 c4 10             	add    esp,0x10
c001d1bd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d1c2:	75 10                	jne    c001d1d4 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d1c4:	83 ec 0c             	sub    esp,0xc
c001d1c7:	68 6a cd 02 c0       	push   0xc002cd6a
c001d1cc:	e8 c6 d4 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001d1d1:	83 c4 10             	add    esp,0x10
c001d1d4:	31 d2                	xor    edx,edx
c001d1d6:	50                   	push   eax
c001d1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1db:	52                   	push   edx
c001d1dc:	50                   	push   eax
c001d1dd:	53                   	push   ebx
c001d1de:	e8 a5 5f ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d1e3:	5a                   	pop    edx
c001d1e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d1e8:	e8 9f 26 ff ff       	call   c000f88c <malloc>
c001d1ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d1f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d1f5:	31 c9                	xor    ecx,ecx
c001d1f7:	5e                   	pop    esi
c001d1f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d1fa:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d1fe:	55                   	push   ebp
c001d1ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d203:	51                   	push   ecx
c001d204:	52                   	push   edx
c001d205:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d209:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d20d:	53                   	push   ebx
c001d20e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d211:	83 c4 14             	add    esp,0x14
c001d214:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d218:	e8 6f 26 ff ff       	call   c000f88c <malloc>
c001d21d:	89 c6                	mov    esi,eax
c001d21f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d221:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d224:	56                   	push   esi
c001d225:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d229:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d22d:	51                   	push   ecx
c001d22e:	52                   	push   edx
c001d22f:	53                   	push   ebx
c001d230:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d233:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d237:	8b 15 c0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326c0
c001d23d:	83 c4 1c             	add    esp,0x1c
c001d240:	c1 e8 04             	shr    eax,0x4
c001d243:	89 04 95 40 25 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdac0],eax
c001d24a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d24e:	31 d2                	xor    edx,edx
c001d250:	52                   	push   edx
c001d251:	50                   	push   eax
c001d252:	53                   	push   ebx
c001d253:	e8 30 5f ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d258:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d25a:	31 d2                	xor    edx,edx
c001d25c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d25f:	56                   	push   esi
c001d260:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d264:	52                   	push   edx
c001d265:	50                   	push   eax
c001d266:	53                   	push   ebx
c001d267:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d26a:	83 c4 14             	add    esp,0x14
c001d26d:	53                   	push   ebx
c001d26e:	e8 b5 5e ff ff       	call   c0013128 <File::close()>
c001d273:	5d                   	pop    ebp
c001d274:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d278:	e8 1f 26 ff ff       	call   c000f89c <free>
c001d27d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d280:	e8 17 26 ff ff       	call   c000f89c <free>
c001d285:	a1 c0 26 03 c0       	mov    eax,ds:0xc00326c0
c001d28a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d28e:	8d 50 01             	lea    edx,[eax+0x1]
c001d291:	89 0c 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],ecx
c001d298:	89 34 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],esi
c001d29f:	89 15 c0 26 03 c0    	mov    DWORD PTR ds:0xc00326c0,edx
c001d2a5:	83 c4 10             	add    esp,0x10
c001d2a8:	b0 01                	mov    al,0x1
c001d2aa:	83 c4 5c             	add    esp,0x5c
c001d2ad:	5b                   	pop    ebx
c001d2ae:	5e                   	pop    esi
c001d2af:	5f                   	pop    edi
c001d2b0:	5d                   	pop    ebp
c001d2b1:	c3                   	ret    

c001d2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d2b2:	55                   	push   ebp
c001d2b3:	57                   	push   edi
c001d2b4:	56                   	push   esi
c001d2b5:	53                   	push   ebx
c001d2b6:	81 ec 68 03 00 00    	sub    esp,0x368
c001d2bc:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d2c3:	8b 1d 10 27 03 c0    	mov    ebx,DWORD PTR ds:0xc0032710
c001d2c9:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d2cd:	68 14 01 00 00       	push   0x114
c001d2d2:	e8 b5 25 ff ff       	call   c000f88c <malloc>
c001d2d7:	83 c4 0c             	add    esp,0xc
c001d2da:	89 c5                	mov    ebp,eax
c001d2dc:	53                   	push   ebx
c001d2dd:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d2e4:	50                   	push   eax
c001d2e5:	e8 7c 5d ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001d2ea:	5e                   	pop    esi
c001d2eb:	5f                   	pop    edi
c001d2ec:	6a 01                	push   0x1
c001d2ee:	55                   	push   ebp
c001d2ef:	e8 d6 5d ff ff       	call   c00130ca <File::open(FileOpenMode)>
c001d2f4:	83 c4 10             	add    esp,0x10
c001d2f7:	85 c0                	test   eax,eax
c001d2f9:	0f 85 a7 06 00 00    	jne    c001d9a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d2ff:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d307:	83 ec 0c             	sub    esp,0xc
c001d30a:	6a 34                	push   0x34
c001d30c:	e8 7b 25 ff ff       	call   c000f88c <malloc>
c001d311:	5b                   	pop    ebx
c001d312:	89 c7                	mov    edi,eax
c001d314:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d318:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d31b:	53                   	push   ebx
c001d31c:	57                   	push   edi
c001d31d:	6a 00                	push   0x0
c001d31f:	6a 34                	push   0x34
c001d321:	55                   	push   ebp
c001d322:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d325:	83 c4 20             	add    esp,0x20
c001d328:	85 c0                	test   eax,eax
c001d32a:	0f 85 76 06 00 00    	jne    c001d9a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d330:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d336:	0f 85 6a 06 00 00    	jne    c001d9a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d33c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d33f:	85 c0                	test   eax,eax
c001d341:	0f 84 5f 06 00 00    	je     c001d9a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d347:	31 d2                	xor    edx,edx
c001d349:	51                   	push   ecx
c001d34a:	52                   	push   edx
c001d34b:	50                   	push   eax
c001d34c:	55                   	push   ebp
c001d34d:	e8 36 5e ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d352:	83 c4 10             	add    esp,0x10
c001d355:	85 c0                	test   eax,eax
c001d357:	0f 85 49 06 00 00    	jne    c001d9a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d35d:	83 ec 0c             	sub    esp,0xc
c001d360:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d363:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d367:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d36b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d36f:	0f af c2             	imul   eax,edx
c001d372:	50                   	push   eax
c001d373:	e8 14 25 ff ff       	call   c000f88c <malloc>
c001d378:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d37b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d37f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d382:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d386:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d38a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d38e:	0f af c2             	imul   eax,edx
c001d391:	99                   	cdq    
c001d392:	52                   	push   edx
c001d393:	50                   	push   eax
c001d394:	55                   	push   ebp
c001d395:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d398:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d39b:	83 c4 20             	add    esp,0x20
c001d39e:	85 c0                	test   eax,eax
c001d3a0:	0f 84 00 06 00 00    	je     c001d9a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3a6:	52                   	push   edx
c001d3a7:	31 d2                	xor    edx,edx
c001d3a9:	52                   	push   edx
c001d3aa:	50                   	push   eax
c001d3ab:	55                   	push   ebp
c001d3ac:	e8 d7 5d ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d3b1:	83 c4 10             	add    esp,0x10
c001d3b4:	85 c0                	test   eax,eax
c001d3b6:	0f 85 ea 05 00 00    	jne    c001d9a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3bc:	83 ec 0c             	sub    esp,0xc
c001d3bf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d3c3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d3c7:	31 f6                	xor    esi,esi
c001d3c9:	0f af c2             	imul   eax,edx
c001d3cc:	50                   	push   eax
c001d3cd:	e8 ba 24 ff ff       	call   c000f88c <malloc>
c001d3d2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3e0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d3e4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d3e8:	0f af c2             	imul   eax,edx
c001d3eb:	99                   	cdq    
c001d3ec:	52                   	push   edx
c001d3ed:	50                   	push   eax
c001d3ee:	55                   	push   ebp
c001d3ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3f2:	83 c4 20             	add    esp,0x20
c001d3f5:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d3f9:	0f 86 8a 00 00 00    	jbe    c001d489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d3ff:	0f b7 de             	movzx  ebx,si
c001d402:	c1 e3 05             	shl    ebx,0x5
c001d405:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d409:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d40c:	75 75                	jne    c001d483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d40e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d411:	31 d2                	xor    edx,edx
c001d413:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d417:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d41a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d41e:	50                   	push   eax
c001d41f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d422:	52                   	push   edx
c001d423:	50                   	push   eax
c001d424:	55                   	push   ebp
c001d425:	e8 5e 5d ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d42a:	83 c4 10             	add    esp,0x10
c001d42d:	85 c0                	test   eax,eax
c001d42f:	0f 85 71 05 00 00    	jne    c001d9a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d435:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d43c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d43f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d443:	31 d2                	xor    edx,edx
c001d445:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d449:	83 ec 0c             	sub    esp,0xc
c001d44c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d450:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d457:	50                   	push   eax
c001d458:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d45c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d460:	52                   	push   edx
c001d461:	50                   	push   eax
c001d462:	55                   	push   ebp
c001d463:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d466:	83 c4 1c             	add    esp,0x1c
c001d469:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d46c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d46f:	50                   	push   eax
c001d470:	6a 00                	push   0x0
c001d472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d476:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d47a:	50                   	push   eax
c001d47b:	e8 d0 32 fe ff       	call   c0000750 <memset>
c001d480:	83 c4 10             	add    esp,0x10
c001d483:	46                   	inc    esi
c001d484:	e9 6c ff ff ff       	jmp    c001d3f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d489:	53                   	push   ebx
c001d48a:	31 db                	xor    ebx,ebx
c001d48c:	68 00 01 00 00       	push   0x100
c001d491:	6a 00                	push   0x0
c001d493:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d497:	50                   	push   eax
c001d498:	e8 b3 32 fe ff       	call   c0000750 <memset>
c001d49d:	83 c4 0c             	add    esp,0xc
c001d4a0:	68 00 01 00 00       	push   0x100
c001d4a5:	6a 00                	push   0x0
c001d4a7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d4ae:	50                   	push   eax
c001d4af:	e8 9c 32 fe ff       	call   c0000750 <memset>
c001d4b4:	83 c4 10             	add    esp,0x10
c001d4b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d4bf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d4c7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d4cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d4d7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d4df:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d4e3:	0f 86 30 01 00 00    	jbe    c001d619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d4e9:	0f b7 f3             	movzx  esi,bx
c001d4ec:	6b f6 28             	imul   esi,esi,0x28
c001d4ef:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d4f3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d4f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4fa:	52                   	push   edx
c001d4fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d4ff:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d503:	8b 06                	mov    eax,DWORD PTR [esi]
c001d505:	6b d2 28             	imul   edx,edx,0x28
c001d508:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d50c:	31 d2                	xor    edx,edx
c001d50e:	52                   	push   edx
c001d50f:	50                   	push   eax
c001d510:	55                   	push   ebp
c001d511:	e8 72 5c ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d516:	83 c4 0c             	add    esp,0xc
c001d519:	6a 20                	push   0x20
c001d51b:	6a 00                	push   0x0
c001d51d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d524:	51                   	push   ecx
c001d525:	e8 26 32 fe ff       	call   c0000750 <memset>
c001d52a:	59                   	pop    ecx
c001d52b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d52e:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d532:	52                   	push   edx
c001d533:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d53a:	51                   	push   ecx
c001d53b:	6a 00                	push   0x0
c001d53d:	6a 1f                	push   0x1f
c001d53f:	55                   	push   ebp
c001d540:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d543:	83 c4 1c             	add    esp,0x1c
c001d546:	6a 09                	push   0x9
c001d548:	68 84 cd 02 c0       	push   0xc002cd84
c001d54d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d554:	51                   	push   ecx
c001d555:	e8 f2 30 fe ff       	call   c000064c <memcmp>
c001d55a:	83 c4 10             	add    esp,0x10
c001d55d:	85 c0                	test   eax,eax
c001d55f:	75 21                	jne    c001d582 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d565:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d569:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d56d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d571:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d574:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d57b:	89 d0                	mov    eax,edx
c001d57d:	40                   	inc    eax
c001d57e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d582:	50                   	push   eax
c001d583:	6a 09                	push   0x9
c001d585:	68 8e cd 02 c0       	push   0xc002cd8e
c001d58a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d591:	50                   	push   eax
c001d592:	e8 b5 30 fe ff       	call   c000064c <memcmp>
c001d597:	83 c4 10             	add    esp,0x10
c001d59a:	85 c0                	test   eax,eax
c001d59c:	75 21                	jne    c001d5bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d59e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5a6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5b1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5b8:	89 d0                	mov    eax,edx
c001d5ba:	40                   	inc    eax
c001d5bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5bf:	50                   	push   eax
c001d5c0:	50                   	push   eax
c001d5c1:	68 5a cd 02 c0       	push   0xc002cd5a
c001d5c6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5cd:	50                   	push   eax
c001d5ce:	e8 c5 32 fe ff       	call   c0000898 <strcmp>
c001d5d3:	83 c4 10             	add    esp,0x10
c001d5d6:	85 c0                	test   eax,eax
c001d5d8:	75 0f                	jne    c001d5e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d5da:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d5e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d5e9:	50                   	push   eax
c001d5ea:	50                   	push   eax
c001d5eb:	68 62 cd 02 c0       	push   0xc002cd62
c001d5f0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5f7:	50                   	push   eax
c001d5f8:	e8 9b 32 fe ff       	call   c0000898 <strcmp>
c001d5fd:	83 c4 10             	add    esp,0x10
c001d600:	85 c0                	test   eax,eax
c001d602:	75 0f                	jne    c001d613 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d604:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d607:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d60b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d60f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d613:	43                   	inc    ebx
c001d614:	e9 c6 fe ff ff       	jmp    c001d4df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d619:	31 d2                	xor    edx,edx
c001d61b:	50                   	push   eax
c001d61c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d620:	52                   	push   edx
c001d621:	50                   	push   eax
c001d622:	55                   	push   ebp
c001d623:	e8 60 5b ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d628:	58                   	pop    eax
c001d629:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d62d:	e8 5a 22 ff ff       	call   c000f88c <malloc>
c001d632:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d635:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d639:	31 d2                	xor    edx,edx
c001d63b:	58                   	pop    eax
c001d63c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d640:	53                   	push   ebx
c001d641:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d645:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d649:	52                   	push   edx
c001d64a:	50                   	push   eax
c001d64b:	55                   	push   ebp
c001d64c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d64f:	83 c4 14             	add    esp,0x14
c001d652:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d656:	e8 31 22 ff ff       	call   c000f88c <malloc>
c001d65b:	31 d2                	xor    edx,edx
c001d65d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d661:	83 c4 0c             	add    esp,0xc
c001d664:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d668:	52                   	push   edx
c001d669:	50                   	push   eax
c001d66a:	55                   	push   ebp
c001d66b:	e8 18 5b ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d670:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d673:	31 d2                	xor    edx,edx
c001d675:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d678:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d67c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d680:	52                   	push   edx
c001d681:	50                   	push   eax
c001d682:	55                   	push   ebp
c001d683:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d686:	83 c4 20             	add    esp,0x20
c001d689:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d691:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d695:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d699:	0f 84 0b 03 00 00    	je     c001d9aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d69f:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d6a6:	31 d2                	xor    edx,edx
c001d6a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6ac:	c1 e8 03             	shr    eax,0x3
c001d6af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d6b3:	51                   	push   ecx
c001d6b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d6b8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d6bc:	52                   	push   edx
c001d6bd:	50                   	push   eax
c001d6be:	55                   	push   ebp
c001d6bf:	e8 c4 5a ff ff       	call   c0013188 <File::seek(unsigned long long)>
c001d6c4:	5b                   	pop    ebx
c001d6c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6c9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d6d0:	e8 b7 21 ff ff       	call   c000f88c <malloc>
c001d6d5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d6dc:	31 d2                	xor    edx,edx
c001d6de:	5e                   	pop    esi
c001d6df:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d6e3:	50                   	push   eax
c001d6e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6ec:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d6f3:	52                   	push   edx
c001d6f4:	50                   	push   eax
c001d6f5:	55                   	push   ebp
c001d6f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6f9:	83 c4 20             	add    esp,0x20
c001d6fc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d704:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d708:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d70c:	0f 8d 7c 02 00 00    	jge    c001d98e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d712:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d716:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d71a:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d71f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d722:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d72a:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d72e:	89 d8                	mov    eax,ebx
c001d730:	c1 e8 08             	shr    eax,0x8
c001d733:	89 c6                	mov    esi,eax
c001d735:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d739:	c1 e6 04             	shl    esi,0x4
c001d73c:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d740:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d743:	85 d2                	test   edx,edx
c001d745:	0f 85 bf 00 00 00    	jne    c001d80a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d74b:	83 ec 0c             	sub    esp,0xc
c001d74e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d752:	03 06                	add    eax,DWORD PTR [esi]
c001d754:	50                   	push   eax
c001d755:	e8 4b f8 ff ff       	call   c001cfa5 <Thr::getAddressOfKernelSymbol(char const*)>
c001d75a:	83 c4 10             	add    esp,0x10
c001d75d:	89 c2                	mov    edx,eax
c001d75f:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d764:	85 c0                	test   eax,eax
c001d766:	0f 85 9e 00 00 00    	jne    c001d80a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d76c:	83 ec 0c             	sub    esp,0xc
c001d76f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d773:	03 06                	add    eax,DWORD PTR [esi]
c001d775:	50                   	push   eax
c001d776:	e8 c4 0d ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d77b:	83 c4 10             	add    esp,0x10
c001d77e:	89 c2                	mov    edx,eax
c001d780:	85 c0                	test   eax,eax
c001d782:	0f 85 82 00 00 00    	jne    c001d80a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d788:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d78c:	50                   	push   eax
c001d78d:	50                   	push   eax
c001d78e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d792:	03 06                	add    eax,DWORD PTR [esi]
c001d794:	50                   	push   eax
c001d795:	68 98 cd 02 c0       	push   0xc002cd98
c001d79a:	e8 68 53 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001d79f:	58                   	pop    eax
c001d7a0:	5a                   	pop    edx
c001d7a1:	68 b2 cd 02 c0       	push   0xc002cdb2
c001d7a6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7ad:	50                   	push   eax
c001d7ae:	e8 59 30 fe ff       	call   c000080c <strcpy>
c001d7b3:	59                   	pop    ecx
c001d7b4:	58                   	pop    eax
c001d7b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7b9:	03 06                	add    eax,DWORD PTR [esi]
c001d7bb:	50                   	push   eax
c001d7bc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7c3:	50                   	push   eax
c001d7c4:	e8 83 31 fe ff       	call   c000094c <strcat>
c001d7c9:	58                   	pop    eax
c001d7ca:	5a                   	pop    edx
c001d7cb:	68 48 ce 02 c0       	push   0xc002ce48
c001d7d0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7d7:	50                   	push   eax
c001d7d8:	e8 6f 31 fe ff       	call   c000094c <strcat>
c001d7dd:	83 c4 10             	add    esp,0x10
c001d7e0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d7e5:	0f 84 5d 01 00 00    	je     c001d948 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d7eb:	83 ec 0c             	sub    esp,0xc
c001d7ee:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7f5:	50                   	push   eax
c001d7f6:	e8 9c ce ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d802:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d806:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d80a:	80 fb 01             	cmp    bl,0x1
c001d80d:	0f 85 88 00 00 00    	jne    c001d89b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d813:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d81a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d81e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d822:	01 ce                	add    esi,ecx
c001d824:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d82a:	0f 94 c0             	sete   al
c001d82d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d833:	0f 94 c3             	sete   bl
c001d836:	09 c3                	or     ebx,eax
c001d838:	8b 06                	mov    eax,DWORD PTR [esi]
c001d83a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d83f:	74 41                	je     c001d882 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d841:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d844:	84 db                	test   bl,bl
c001d846:	75 15                	jne    c001d85d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d848:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d84c:	66 83 f8 0c          	cmp    ax,0xc
c001d850:	76 05                	jbe    c001d857 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d852:	b8 0c 00 00 00       	mov    eax,0xc
c001d857:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d85b:	76 37                	jbe    c001d894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d85d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d861:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d866:	0f 84 dc 00 00 00    	je     c001d948 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d86c:	83 ec 0c             	sub    esp,0xc
c001d86f:	68 c9 cd 02 c0       	push   0xc002cdc9
c001d874:	e8 1e ce ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001d879:	83 c4 10             	add    esp,0x10
c001d87c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d880:	eb 12                	jmp    c001d894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d882:	01 c1                	add    ecx,eax
c001d884:	84 db                	test   bl,bl
c001d886:	75 0c                	jne    c001d894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d888:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d88c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d890:	77 02                	ja     c001d894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d892:	01 d1                	add    ecx,edx
c001d894:	89 0e                	mov    DWORD PTR [esi],ecx
c001d896:	e9 ea 00 00 00       	jmp    c001d985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d89b:	80 fb 02             	cmp    bl,0x2
c001d89e:	75 7c                	jne    c001d91c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d8a0:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d8a7:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d8ab:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d8af:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d8b5:	74 20                	je     c001d8d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d8b7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d8bd:	74 18                	je     c001d8d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d8bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8c3:	b9 0a 00 00 00       	mov    ecx,0xa
c001d8c8:	66 83 f8 0e          	cmp    ax,0xe
c001d8cc:	77 03                	ja     c001d8d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d8ce:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d8d1:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d8d5:	76 1f                	jbe    c001d8f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d8d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d8db:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d8e0:	74 66                	je     c001d948 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d8e2:	83 ec 0c             	sub    esp,0xc
c001d8e5:	68 e5 cd 02 c0       	push   0xc002cde5
c001d8ea:	e8 a8 cd ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001d8ef:	83 c4 10             	add    esp,0x10
c001d8f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8f6:	8b 06                	mov    eax,DWORD PTR [esi]
c001d8f8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d8fd:	74 13                	je     c001d912 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d8ff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d903:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d90a:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d90e:	01 c8                	add    eax,ecx
c001d910:	eb 04                	jmp    c001d916 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d912:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d916:	01 c2                	add    edx,eax
c001d918:	89 16                	mov    DWORD PTR [esi],edx
c001d91a:	eb 69                	jmp    c001d985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d91c:	0f b6 db             	movzx  ebx,bl
c001d91f:	50                   	push   eax
c001d920:	50                   	push   eax
c001d921:	53                   	push   ebx
c001d922:	68 01 ce 02 c0       	push   0xc002ce01
c001d927:	e8 db 51 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001d92c:	83 c4 10             	add    esp,0x10
c001d92f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d934:	74 12                	je     c001d948 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d936:	83 ec 0c             	sub    esp,0xc
c001d939:	68 0c ce 02 c0       	push   0xc002ce0c
c001d93e:	e8 54 cd ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001d943:	83 c4 10             	add    esp,0x10
c001d946:	eb 3d                	jmp    c001d985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d948:	83 ec 0c             	sub    esp,0xc
c001d94b:	55                   	push   ebp
c001d94c:	e8 d7 57 ff ff       	call   c0013128 <File::close()>
c001d951:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d954:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d957:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d95a:	59                   	pop    ecx
c001d95b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d95f:	e8 38 1f ff ff       	call   c000f89c <free>
c001d964:	5b                   	pop    ebx
c001d965:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d969:	e8 2e 1f ff ff       	call   c000f89c <free>
c001d96e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d971:	e8 26 1f ff ff       	call   c000f89c <free>
c001d976:	5e                   	pop    esi
c001d977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d97b:	e8 1c 1f ff ff       	call   c000f89c <free>
c001d980:	83 c4 10             	add    esp,0x10
c001d983:	eb 21                	jmp    c001d9a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d985:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d989:	e9 76 fd ff ff       	jmp    c001d704 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d98e:	83 ec 0c             	sub    esp,0xc
c001d991:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d995:	e8 02 1f ff ff       	call   c000f89c <free>
c001d99a:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d99e:	83 c4 10             	add    esp,0x10
c001d9a1:	e9 eb fc ff ff       	jmp    c001d691 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d9a6:	31 c0                	xor    eax,eax
c001d9a8:	eb 33                	jmp    c001d9dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d9aa:	83 ec 0c             	sub    esp,0xc
c001d9ad:	55                   	push   ebp
c001d9ae:	e8 75 57 ff ff       	call   c0013128 <File::close()>
c001d9b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d9b6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d9b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9bc:	58                   	pop    eax
c001d9bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9c1:	e8 d6 1e ff ff       	call   c000f89c <free>
c001d9c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d9c9:	e8 ce 1e ff ff       	call   c000f89c <free>
c001d9ce:	5a                   	pop    edx
c001d9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9d3:	e8 c4 1e ff ff       	call   c000f89c <free>
c001d9d8:	83 c4 10             	add    esp,0x10
c001d9db:	b0 01                	mov    al,0x1
c001d9dd:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d9e3:	5b                   	pop    ebx
c001d9e4:	5e                   	pop    esi
c001d9e5:	5f                   	pop    edi
c001d9e6:	5d                   	pop    ebp
c001d9e7:	c3                   	ret    

c001d9e8 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d9e8:	56                   	push   esi
c001d9e9:	31 d2                	xor    edx,edx
c001d9eb:	53                   	push   ebx
c001d9ec:	8b 1d 20 1f 03 c0    	mov    ebx,DWORD PTR ds:0xc0031f20
c001d9f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d9f6:	39 d3                	cmp    ebx,edx
c001d9f8:	7e 1b                	jle    c001da15 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d9fa:	8b 04 95 40 21 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdec0]
c001da01:	39 c8                	cmp    eax,ecx
c001da03:	77 0d                	ja     c001da12 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001da05:	8b 34 95 40 1f 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce0c0]
c001da0c:	01 c6                	add    esi,eax
c001da0e:	39 ce                	cmp    esi,ecx
c001da10:	77 05                	ja     c001da17 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001da12:	42                   	inc    edx
c001da13:	eb e1                	jmp    c001d9f6 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001da15:	31 c0                	xor    eax,eax
c001da17:	5b                   	pop    ebx
c001da18:	5e                   	pop    esi
c001da19:	c3                   	ret    

c001da1a <Thr::getDriverNameFromAddress(unsigned long)>:
c001da1a:	53                   	push   ebx
c001da1b:	31 c0                	xor    eax,eax
c001da1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da21:	8b 1d 20 1f 03 c0    	mov    ebx,DWORD PTR ds:0xc0031f20
c001da27:	39 c3                	cmp    ebx,eax
c001da29:	7e 22                	jle    c001da4d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001da2b:	8b 14 85 40 21 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdec0]
c001da32:	39 ca                	cmp    edx,ecx
c001da34:	77 14                	ja     c001da4a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da36:	03 14 85 40 1f 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce0c0]
c001da3d:	39 ca                	cmp    edx,ecx
c001da3f:	76 09                	jbe    c001da4a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da41:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c001da48:	eb 05                	jmp    c001da4f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001da4a:	40                   	inc    eax
c001da4b:	eb da                	jmp    c001da27 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001da4d:	31 c0                	xor    eax,eax
c001da4f:	5b                   	pop    ebx
c001da50:	c3                   	ret    

c001da51 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001da51:	53                   	push   ebx
c001da52:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001da56:	53                   	push   ebx
c001da57:	e8 8c ff ff ff       	call   c001d9e8 <Thr::getDriverBaseFromAddress(unsigned long)>
c001da5c:	5a                   	pop    edx
c001da5d:	31 d2                	xor    edx,edx
c001da5f:	85 c0                	test   eax,eax
c001da61:	74 04                	je     c001da67 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001da63:	89 da                	mov    edx,ebx
c001da65:	29 c2                	sub    edx,eax
c001da67:	89 d0                	mov    eax,edx
c001da69:	5b                   	pop    ebx
c001da6a:	c3                   	ret    

c001da6b <Thr::loadDLL(char const*, bool)>:
c001da6b:	55                   	push   ebp
c001da6c:	57                   	push   edi
c001da6d:	56                   	push   esi
c001da6e:	53                   	push   ebx
c001da6f:	81 ec 34 01 00 00    	sub    esp,0x134
c001da75:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001da7c:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001da83:	56                   	push   esi
c001da84:	68 24 ce 02 c0       	push   0xc002ce24
c001da89:	e8 79 50 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001da8e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001da95:	e8 f2 1d ff ff       	call   c000f88c <malloc>
c001da9a:	83 c4 0c             	add    esp,0xc
c001da9d:	89 c3                	mov    ebx,eax
c001da9f:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c001daa5:	56                   	push   esi
c001daa6:	50                   	push   eax
c001daa7:	e8 ba 55 ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001daac:	83 c4 10             	add    esp,0x10
c001daaf:	85 db                	test   ebx,ebx
c001dab1:	75 3c                	jne    c001daef <Thr::loadDLL(char const*, bool)+0x84>
c001dab3:	89 f8                	mov    eax,edi
c001dab5:	84 c0                	test   al,al
c001dab7:	0f 84 cc 01 00 00    	je     c001dc89 <Thr::loadDLL(char const*, bool)+0x21e>
c001dabd:	55                   	push   ebp
c001dabe:	55                   	push   ebp
c001dabf:	68 35 ce 02 c0       	push   0xc002ce35
c001dac4:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dac8:	55                   	push   ebp
c001dac9:	e8 3e 2d fe ff       	call   c000080c <strcpy>
c001dace:	58                   	pop    eax
c001dacf:	5a                   	pop    edx
c001dad0:	56                   	push   esi
c001dad1:	55                   	push   ebp
c001dad2:	e8 75 2e fe ff       	call   c000094c <strcat>
c001dad7:	59                   	pop    ecx
c001dad8:	58                   	pop    eax
c001dad9:	68 48 ce 02 c0       	push   0xc002ce48
c001dade:	55                   	push   ebp
c001dadf:	e8 68 2e fe ff       	call   c000094c <strcat>
c001dae4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dae7:	e8 ab cb ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001daec:	83 c4 10             	add    esp,0x10
c001daef:	51                   	push   ecx
c001daf0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001daf4:	50                   	push   eax
c001daf5:	8d 44 24 20          	lea    eax,[esp+0x20]
c001daf9:	50                   	push   eax
c001dafa:	53                   	push   ebx
c001dafb:	e8 76 58 ff ff       	call   c0013376 <File::stat(unsigned long long*, bool*)>
c001db00:	83 c4 10             	add    esp,0x10
c001db03:	85 db                	test   ebx,ebx
c001db05:	74 0c                	je     c001db13 <Thr::loadDLL(char const*, bool)+0xa8>
c001db07:	83 ec 0c             	sub    esp,0xc
c001db0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001db0c:	53                   	push   ebx
c001db0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db10:	83 c4 10             	add    esp,0x10
c001db13:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001db18:	75 0a                	jne    c001db24 <Thr::loadDLL(char const*, bool)+0xb9>
c001db1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db1e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001db22:	75 3c                	jne    c001db60 <Thr::loadDLL(char const*, bool)+0xf5>
c001db24:	89 f8                	mov    eax,edi
c001db26:	84 c0                	test   al,al
c001db28:	0f 84 43 01 00 00    	je     c001dc71 <Thr::loadDLL(char const*, bool)+0x206>
c001db2e:	51                   	push   ecx
c001db2f:	51                   	push   ecx
c001db30:	68 35 ce 02 c0       	push   0xc002ce35
c001db35:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001db39:	53                   	push   ebx
c001db3a:	e8 cd 2c fe ff       	call   c000080c <strcpy>
c001db3f:	5d                   	pop    ebp
c001db40:	58                   	pop    eax
c001db41:	56                   	push   esi
c001db42:	53                   	push   ebx
c001db43:	e8 04 2e fe ff       	call   c000094c <strcat>
c001db48:	58                   	pop    eax
c001db49:	5a                   	pop    edx
c001db4a:	68 48 ce 02 c0       	push   0xc002ce48
c001db4f:	53                   	push   ebx
c001db50:	e8 f7 2d fe ff       	call   c000094c <strcat>
c001db55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db58:	e8 3a cb ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001db5d:	83 c4 10             	add    esp,0x10
c001db60:	52                   	push   edx
c001db61:	6a 03                	push   0x3
c001db63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001db6b:	05 ff 0f 00 00       	add    eax,0xfff
c001db70:	83 d2 00             	adc    edx,0x0
c001db73:	0f ac d0 0c          	shrd   eax,edx,0xc
c001db77:	50                   	push   eax
c001db78:	ff 35 30 f3 02 c0    	push   DWORD PTR ds:0xc002f330
c001db7e:	e8 b7 44 ff ff       	call   c001203a <VAS::allocatePages(int, int)>
c001db83:	59                   	pop    ecx
c001db84:	89 c3                	mov    ebx,eax
c001db86:	5d                   	pop    ebp
c001db87:	50                   	push   eax
c001db88:	68 4a ce 02 c0       	push   0xc002ce4a
c001db8d:	e8 75 4f ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001db92:	89 34 24             	mov    DWORD PTR [esp],esi
c001db95:	e8 d2 2b fe ff       	call   c000076c <strlen>
c001db9a:	8b 2d 20 1f 03 c0    	mov    ebp,DWORD PTR ds:0xc0031f20
c001dba0:	40                   	inc    eax
c001dba1:	89 04 24             	mov    DWORD PTR [esp],eax
c001dba4:	e8 e3 1c ff ff       	call   c000f88c <malloc>
c001dba9:	89 04 ad 40 23 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdcc0],eax
c001dbb0:	58                   	pop    eax
c001dbb1:	a1 20 1f 03 c0       	mov    eax,ds:0xc0031f20
c001dbb6:	5a                   	pop    edx
c001dbb7:	56                   	push   esi
c001dbb8:	ff 34 85 40 23 03 c0 	push   DWORD PTR [eax*4-0x3ffcdcc0]
c001dbbf:	e8 48 2c fe ff       	call   c000080c <strcpy>
c001dbc4:	a1 20 1f 03 c0       	mov    eax,ds:0xc0031f20
c001dbc9:	8d 50 01             	lea    edx,[eax+0x1]
c001dbcc:	89 1c 85 40 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdec0],ebx
c001dbd3:	89 15 20 1f 03 c0    	mov    DWORD PTR ds:0xc0031f20,edx
c001dbd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbdd:	83 c4 0c             	add    esp,0xc
c001dbe0:	89 14 85 40 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce0c0],edx
c001dbe7:	6a 01                	push   0x1
c001dbe9:	53                   	push   ebx
c001dbea:	56                   	push   esi
c001dbeb:	e8 c2 f6 ff ff       	call   c001d2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dbf0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dbf4:	83 c4 10             	add    esp,0x10
c001dbf7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dbfc:	0f 85 83 00 00 00    	jne    c001dc85 <Thr::loadDLL(char const*, bool)+0x21a>
c001dc02:	89 f8                	mov    eax,edi
c001dc04:	84 c0                	test   al,al
c001dc06:	74 6d                	je     c001dc75 <Thr::loadDLL(char const*, bool)+0x20a>
c001dc08:	83 ec 0c             	sub    esp,0xc
c001dc0b:	68 57 ce 02 c0       	push   0xc002ce57
c001dc10:	e8 82 ca ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001dc15:	83 c4 10             	add    esp,0x10
c001dc18:	eb 5b                	jmp    c001dc75 <Thr::loadDLL(char const*, bool)+0x20a>
c001dc1a:	89 ee                	mov    esi,ebp
c001dc1c:	50                   	push   eax
c001dc1d:	c1 e6 0c             	shl    esi,0xc
c001dc20:	50                   	push   eax
c001dc21:	01 de                	add    esi,ebx
c001dc23:	56                   	push   esi
c001dc24:	ff 35 30 f3 02 c0    	push   DWORD PTR ds:0xc002f330
c001dc2a:	e8 73 3f ff ff       	call   c0011ba2 <VAS::getPageTableEntry(unsigned long)>
c001dc2f:	83 c4 10             	add    esp,0x10
c001dc32:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dc35:	75 0c                	jne    c001dc43 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dc37:	83 ec 0c             	sub    esp,0xc
c001dc3a:	56                   	push   esi
c001dc3b:	e8 fe 1e ff ff       	call   c000fb3e <Phys::freePage(unsigned long)>
c001dc40:	83 c4 10             	add    esp,0x10
c001dc43:	45                   	inc    ebp
c001dc44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc4c:	05 ff 0f 00 00       	add    eax,0xfff
c001dc51:	bf 00 00 00 00       	mov    edi,0x0
c001dc56:	83 d2 00             	adc    edx,0x0
c001dc59:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dc5d:	c1 ea 0c             	shr    edx,0xc
c001dc60:	39 c5                	cmp    ebp,eax
c001dc62:	89 d1                	mov    ecx,edx
c001dc64:	89 f8                	mov    eax,edi
c001dc66:	19 c8                	sbb    eax,ecx
c001dc68:	72 b0                	jb     c001dc1a <Thr::loadDLL(char const*, bool)+0x1af>
c001dc6a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dc6f:	75 18                	jne    c001dc89 <Thr::loadDLL(char const*, bool)+0x21e>
c001dc71:	31 db                	xor    ebx,ebx
c001dc73:	eb 14                	jmp    c001dc89 <Thr::loadDLL(char const*, bool)+0x21e>
c001dc75:	83 ec 0c             	sub    esp,0xc
c001dc78:	68 76 ce 02 c0       	push   0xc002ce76
c001dc7d:	e8 15 ca ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001dc82:	83 c4 10             	add    esp,0x10
c001dc85:	31 ed                	xor    ebp,ebp
c001dc87:	eb bb                	jmp    c001dc44 <Thr::loadDLL(char const*, bool)+0x1d9>
c001dc89:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dc8f:	89 d8                	mov    eax,ebx
c001dc91:	5b                   	pop    ebx
c001dc92:	5e                   	pop    esi
c001dc93:	5f                   	pop    edi
c001dc94:	5d                   	pop    ebp
c001dc95:	c3                   	ret    

c001dc96 <Thr::executeDLL(unsigned long, void*)>:
c001dc96:	56                   	push   esi
c001dc97:	53                   	push   ebx
c001dc98:	52                   	push   edx
c001dc99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc9d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dca1:	85 db                	test   ebx,ebx
c001dca3:	75 10                	jne    c001dcb5 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dca5:	83 ec 0c             	sub    esp,0xc
c001dca8:	68 92 ce 02 c0       	push   0xc002ce92
c001dcad:	e8 e5 c9 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001dcb2:	83 c4 10             	add    esp,0x10
c001dcb5:	50                   	push   eax
c001dcb6:	50                   	push   eax
c001dcb7:	53                   	push   ebx
c001dcb8:	68 bc ce 02 c0       	push   0xc002cebc
c001dcbd:	e8 45 4e ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001dcc2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dcc6:	89 d8                	mov    eax,ebx
c001dcc8:	83 c4 14             	add    esp,0x14
c001dccb:	5b                   	pop    ebx
c001dccc:	5e                   	pop    esi
c001dccd:	ff e0                	jmp    eax
c001dccf:	90                   	nop

c001dcd0 <userModeEntryPoint(void*)>:
c001dcd0:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001dcd5:	48                   	dec    eax
c001dcd6:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001dcdb:	75 01                	jne    c001dcde <userModeEntryPoint(void*)+0xe>
c001dcdd:	fb                   	sti    
c001dcde:	fb                   	sti    
c001dcdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dce4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dce7:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcf1:	e9 34 26 fe ff       	jmp    c000032a <goToUsermode>

c001dcf6 <changeTSS>:
c001dcf6:	83 ec 14             	sub    esp,0x14
c001dcf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcfe:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dd01:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dd06:	c1 e2 15             	shl    edx,0x15
c001dd09:	29 d0                	sub    eax,edx
c001dd0b:	50                   	push   eax
c001dd0c:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001dd11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd17:	05 7c 11 00 00       	add    eax,0x117c
c001dd1c:	50                   	push   eax
c001dd1d:	e8 1e 33 ff ff       	call   c0011040 <TSS::setESP(unsigned long)>
c001dd22:	83 c4 1c             	add    esp,0x1c
c001dd25:	c3                   	ret    

c001dd26 <switchToThread(ThreadControlBlock*)>:
c001dd26:	57                   	push   edi
c001dd27:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001dd2c:	56                   	push   esi
c001dd2d:	85 c0                	test   eax,eax
c001dd2f:	53                   	push   ebx
c001dd30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd34:	0f 85 88 00 00 00    	jne    c001ddc2 <switchToThread(ThreadControlBlock*)+0x9c>
c001dd3a:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dd3d:	3c ff                	cmp    al,0xff
c001dd3f:	74 7d                	je     c001ddbe <switchToThread(ThreadControlBlock*)+0x98>
c001dd41:	0f b6 d0             	movzx  edx,al
c001dd44:	b8 84 03 00 00       	mov    eax,0x384
c001dd49:	29 d0                	sub    eax,edx
c001dd4b:	c1 e0 10             	shl    eax,0x10
c001dd4e:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dd51:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dd54:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001dd59:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd5f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dd66:	74 4a                	je     c001ddb2 <switchToThread(ThreadControlBlock*)+0x8c>
c001dd68:	0f 31                	rdtsc  
c001dd6a:	a3 28 27 03 c0       	mov    ds:0xc0032728,eax
c001dd6f:	89 c6                	mov    esi,eax
c001dd71:	89 d7                	mov    edi,edx
c001dd73:	2b 35 18 27 03 c0    	sub    esi,DWORD PTR ds:0xc0032718
c001dd79:	89 15 2c 27 03 c0    	mov    DWORD PTR ds:0xc003272c,edx
c001dd7f:	1b 3d 1c 27 03 c0    	sbb    edi,DWORD PTR ds:0xc003271c
c001dd85:	89 35 20 27 03 c0    	mov    DWORD PTR ds:0xc0032720,esi
c001dd8b:	a3 18 27 03 c0       	mov    ds:0xc0032718,eax
c001dd90:	89 3d 24 27 03 c0    	mov    DWORD PTR ds:0xc0032724,edi
c001dd96:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001dd9c:	89 15 1c 27 03 c0    	mov    DWORD PTR ds:0xc003271c,edx
c001dda2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dda5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001dda8:	01 c6                	add    esi,eax
c001ddaa:	11 d7                	adc    edi,edx
c001ddac:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001ddaf:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001ddb2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ddb6:	5b                   	pop    ebx
c001ddb7:	5e                   	pop    esi
c001ddb8:	5f                   	pop    edi
c001ddb9:	e9 a4 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001ddbe:	31 c0                	xor    eax,eax
c001ddc0:	eb 8f                	jmp    c001dd51 <switchToThread(ThreadControlBlock*)+0x2b>
c001ddc2:	5b                   	pop    ebx
c001ddc3:	c7 05 e0 26 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x1
c001ddcd:	5e                   	pop    esi
c001ddce:	5f                   	pop    edi
c001ddcf:	c3                   	ret    

c001ddd0 <Process::addArgs(char**)>:
c001ddd0:	57                   	push   edi
c001ddd1:	56                   	push   esi
c001ddd2:	53                   	push   ebx
c001ddd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddd7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dddb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dde5:	85 ff                	test   edi,edi
c001dde7:	74 3d                	je     c001de26 <Process::addArgs(char**)+0x56>
c001dde9:	8b 07                	mov    eax,DWORD PTR [edi]
c001ddeb:	85 c0                	test   eax,eax
c001dded:	74 37                	je     c001de26 <Process::addArgs(char**)+0x56>
c001ddef:	31 db                	xor    ebx,ebx
c001ddf1:	83 ec 0c             	sub    esp,0xc
c001ddf4:	50                   	push   eax
c001ddf5:	e8 72 29 fe ff       	call   c000076c <strlen>
c001ddfa:	40                   	inc    eax
c001ddfb:	89 04 24             	mov    DWORD PTR [esp],eax
c001ddfe:	e8 89 1a ff ff       	call   c000f88c <malloc>
c001de03:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001de0a:	5a                   	pop    edx
c001de0b:	59                   	pop    ecx
c001de0c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001de0f:	43                   	inc    ebx
c001de10:	50                   	push   eax
c001de11:	e8 f6 29 fe ff       	call   c000080c <strcpy>
c001de16:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001de1c:	83 c4 10             	add    esp,0x10
c001de1f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001de22:	85 c0                	test   eax,eax
c001de24:	75 cb                	jne    c001ddf1 <Process::addArgs(char**)+0x21>
c001de26:	5b                   	pop    ebx
c001de27:	5e                   	pop    esi
c001de28:	5f                   	pop    edi
c001de29:	c3                   	ret    

c001de2a <Process::Process(char const*, Process*, char**)>:
c001de2a:	56                   	push   esi
c001de2b:	53                   	push   ebx
c001de2c:	83 ec 14             	sub    esp,0x14
c001de2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de33:	05 0c 02 00 00       	add    eax,0x20c
c001de38:	bb 07 00 00 00       	mov    ebx,0x7
c001de3d:	89 c6                	mov    esi,eax
c001de3f:	85 db                	test   ebx,ebx
c001de41:	78 12                	js     c001de55 <Process::Process(char const*, Process*, char**)+0x2b>
c001de43:	83 ec 0c             	sub    esp,0xc
c001de46:	56                   	push   esi
c001de47:	e8 c6 b9 00 00       	call   c0029812 <ThreadControlBlock::ThreadControlBlock()>
c001de4c:	83 c4 10             	add    esp,0x10
c001de4f:	83 c6 63             	add    esi,0x63
c001de52:	4b                   	dec    ebx
c001de53:	eb ea                	jmp    c001de3f <Process::Process(char const*, Process*, char**)+0x15>
c001de55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de59:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001de60:	83 ec 0c             	sub    esp,0xc
c001de63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de67:	e8 84 c6 ff ff       	call   c001a4f0 <Krnl::newProcessEnv(Process*)>
c001de6c:	83 c4 10             	add    esp,0x10
c001de6f:	89 c2                	mov    edx,eax
c001de71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de75:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001de7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de7f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001de88:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c001de8d:	8d 50 01             	lea    edx,[eax+0x1]
c001de90:	89 15 30 e7 02 c0    	mov    DWORD PTR ds:0xc002e730,edx
c001de96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001de9a:	89 02                	mov    DWORD PTR [edx],eax
c001de9c:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dea4:	83 ec 0c             	sub    esp,0xc
c001dea7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001deab:	e8 dc 19 ff ff       	call   c000f88c <malloc>
c001deb0:	83 c4 10             	add    esp,0x10
c001deb3:	89 c3                	mov    ebx,eax
c001deb5:	83 ec 08             	sub    esp,0x8
c001deb8:	6a 00                	push   0x0
c001deba:	53                   	push   ebx
c001debb:	e8 22 45 ff ff       	call   c00123e2 <VAS::VAS(bool)>
c001dec0:	83 c4 10             	add    esp,0x10
c001dec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dec7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001decd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ded1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dedb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dedf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dee3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deed:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001def3:	85 c0                	test   eax,eax
c001def5:	74 42                	je     c001df39 <Process::Process(char const*, Process*, char**)+0x10f>
c001def7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001defb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df01:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df0b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001df11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df15:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df1b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001df21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df25:	05 0c 01 00 00       	add    eax,0x10c
c001df2a:	83 ec 08             	sub    esp,0x8
c001df2d:	52                   	push   edx
c001df2e:	50                   	push   eax
c001df2f:	e8 d8 28 fe ff       	call   c000080c <strcpy>
c001df34:	83 c4 10             	add    esp,0x10
c001df37:	eb 63                	jmp    c001df9c <Process::Process(char const*, Process*, char**)+0x172>
c001df39:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001df41:	83 ec 0c             	sub    esp,0xc
c001df44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001df48:	e8 3f 19 ff ff       	call   c000f88c <malloc>
c001df4d:	83 c4 10             	add    esp,0x10
c001df50:	89 c3                	mov    ebx,eax
c001df52:	83 ec 08             	sub    esp,0x8
c001df55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df59:	53                   	push   ebx
c001df5a:	e8 c3 2d ff ff       	call   c0010d22 <VgaText::VgaText(char const*)>
c001df5f:	83 c4 10             	add    esp,0x10
c001df62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df66:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001df6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df70:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001df76:	83 ec 0c             	sub    esp,0xc
c001df79:	50                   	push   eax
c001df7a:	e8 da 22 ff ff       	call   c0010259 <addToTerminalCycle(VgaText*)>
c001df7f:	83 c4 10             	add    esp,0x10
c001df82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df86:	05 0c 01 00 00       	add    eax,0x10c
c001df8b:	83 ec 08             	sub    esp,0x8
c001df8e:	68 db ce 02 c0       	push   0xc002cedb
c001df93:	50                   	push   eax
c001df94:	e8 73 28 fe ff       	call   c000080c <strcpy>
c001df99:	83 c4 10             	add    esp,0x10
c001df9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfa0:	83 c0 0c             	add    eax,0xc
c001dfa3:	83 ec 08             	sub    esp,0x8
c001dfa6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfaa:	50                   	push   eax
c001dfab:	e8 5c 28 fe ff       	call   c000080c <strcpy>
c001dfb0:	83 c4 10             	add    esp,0x10
c001dfb3:	83 ec 08             	sub    esp,0x8
c001dfb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dfba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfbe:	e8 0d fe ff ff       	call   c001ddd0 <Process::addArgs(char**)>
c001dfc3:	83 c4 10             	add    esp,0x10
c001dfc6:	83 ec 08             	sub    esp,0x8
c001dfc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfd1:	e8 a6 ed ff ff       	call   c001cd7c <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dfd6:	83 c4 10             	add    esp,0x10
c001dfd9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dfdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dfe1:	83 f0 01             	xor    eax,0x1
c001dfe4:	88 c2                	mov    dl,al
c001dfe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfea:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dff0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dff5:	83 ec 08             	sub    esp,0x8
c001dff8:	50                   	push   eax
c001dff9:	68 08 d0 02 c0       	push   0xc002d008
c001dffe:	e8 04 4b ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e003:	83 c4 10             	add    esp,0x10
c001e006:	90                   	nop
c001e007:	83 c4 14             	add    esp,0x14
c001e00a:	5b                   	pop    ebx
c001e00b:	5e                   	pop    esi
c001e00c:	c3                   	ret    
c001e00d:	90                   	nop

c001e00e <Process::Process(bool, char const*, Process*, char**)>:
c001e00e:	56                   	push   esi
c001e00f:	53                   	push   ebx
c001e010:	83 ec 24             	sub    esp,0x24
c001e013:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e017:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e01b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e01f:	05 0c 02 00 00       	add    eax,0x20c
c001e024:	bb 07 00 00 00       	mov    ebx,0x7
c001e029:	89 c6                	mov    esi,eax
c001e02b:	85 db                	test   ebx,ebx
c001e02d:	78 12                	js     c001e041 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e02f:	83 ec 0c             	sub    esp,0xc
c001e032:	56                   	push   esi
c001e033:	e8 da b7 00 00       	call   c0029812 <ThreadControlBlock::ThreadControlBlock()>
c001e038:	83 c4 10             	add    esp,0x10
c001e03b:	83 c6 63             	add    esi,0x63
c001e03e:	4b                   	dec    ebx
c001e03f:	eb ea                	jmp    c001e02b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e041:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e045:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e04c:	83 ec 0c             	sub    esp,0xc
c001e04f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e053:	e8 98 c4 ff ff       	call   c001a4f0 <Krnl::newProcessEnv(Process*)>
c001e058:	83 c4 10             	add    esp,0x10
c001e05b:	89 c2                	mov    edx,eax
c001e05d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e061:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e06b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e074:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c001e079:	8d 50 01             	lea    edx,[eax+0x1]
c001e07c:	89 15 30 e7 02 c0    	mov    DWORD PTR ds:0xc002e730,edx
c001e082:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e086:	89 02                	mov    DWORD PTR [edx],eax
c001e088:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e090:	83 ec 0c             	sub    esp,0xc
c001e093:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e097:	e8 f0 17 ff ff       	call   c000f88c <malloc>
c001e09c:	83 c4 10             	add    esp,0x10
c001e09f:	89 c3                	mov    ebx,eax
c001e0a1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e0a6:	83 ec 08             	sub    esp,0x8
c001e0a9:	50                   	push   eax
c001e0aa:	53                   	push   ebx
c001e0ab:	e8 32 43 ff ff       	call   c00123e2 <VAS::VAS(bool)>
c001e0b0:	83 c4 10             	add    esp,0x10
c001e0b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0b7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0c1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e0cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e0d3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e0d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0dd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0e3:	85 c0                	test   eax,eax
c001e0e5:	74 42                	je     c001e129 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e0e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0eb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0f1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e0f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0fb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e105:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e10b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e111:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e115:	05 0c 01 00 00       	add    eax,0x10c
c001e11a:	83 ec 08             	sub    esp,0x8
c001e11d:	52                   	push   edx
c001e11e:	50                   	push   eax
c001e11f:	e8 e8 26 fe ff       	call   c000080c <strcpy>
c001e124:	83 c4 10             	add    esp,0x10
c001e127:	eb 63                	jmp    c001e18c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e129:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e131:	83 ec 0c             	sub    esp,0xc
c001e134:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e138:	e8 4f 17 ff ff       	call   c000f88c <malloc>
c001e13d:	83 c4 10             	add    esp,0x10
c001e140:	89 c3                	mov    ebx,eax
c001e142:	83 ec 08             	sub    esp,0x8
c001e145:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e149:	53                   	push   ebx
c001e14a:	e8 d3 2b ff ff       	call   c0010d22 <VgaText::VgaText(char const*)>
c001e14f:	83 c4 10             	add    esp,0x10
c001e152:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e156:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e15c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e160:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e166:	83 ec 0c             	sub    esp,0xc
c001e169:	50                   	push   eax
c001e16a:	e8 ea 20 ff ff       	call   c0010259 <addToTerminalCycle(VgaText*)>
c001e16f:	83 c4 10             	add    esp,0x10
c001e172:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e176:	05 0c 01 00 00       	add    eax,0x10c
c001e17b:	83 ec 08             	sub    esp,0x8
c001e17e:	68 db ce 02 c0       	push   0xc002cedb
c001e183:	50                   	push   eax
c001e184:	e8 83 26 fe ff       	call   c000080c <strcpy>
c001e189:	83 c4 10             	add    esp,0x10
c001e18c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e190:	83 c0 0c             	add    eax,0xc
c001e193:	83 ec 08             	sub    esp,0x8
c001e196:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e19a:	50                   	push   eax
c001e19b:	e8 6c 26 fe ff       	call   c000080c <strcpy>
c001e1a0:	83 c4 10             	add    esp,0x10
c001e1a3:	83 ec 08             	sub    esp,0x8
c001e1a6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e1aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1ae:	e8 1d fc ff ff       	call   c001ddd0 <Process::addArgs(char**)>
c001e1b3:	83 c4 10             	add    esp,0x10
c001e1b6:	90                   	nop
c001e1b7:	83 c4 24             	add    esp,0x24
c001e1ba:	5b                   	pop    ebx
c001e1bb:	5e                   	pop    esi
c001e1bc:	c3                   	ret    

c001e1bd <taskStartupFunction>:
c001e1bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1c2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e1c5:	c3                   	ret    

c001e1c6 <Semaphore::Semaphore(int)>:
c001e1c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e1ce:	89 10                	mov    DWORD PTR [eax],edx
c001e1d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1d4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e1db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e1e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1ea:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e1f1:	90                   	nop
c001e1f2:	c3                   	ret    
c001e1f3:	90                   	nop

c001e1f4 <Mutex::Mutex()>:
c001e1f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1f8:	6a 01                	push   0x1
c001e1fa:	50                   	push   eax
c001e1fb:	e8 c6 ff ff ff       	call   c001e1c6 <Semaphore::Semaphore(int)>
c001e200:	83 c4 08             	add    esp,0x8
c001e203:	90                   	nop
c001e204:	c3                   	ret    
c001e205:	90                   	nop

c001e206 <Process::createThread(void (*)(void*), void*, int)>:
c001e206:	55                   	push   ebp
c001e207:	31 c9                	xor    ecx,ecx
c001e209:	57                   	push   edi
c001e20a:	56                   	push   esi
c001e20b:	53                   	push   ebx
c001e20c:	83 ec 1c             	sub    esp,0x1c
c001e20f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e213:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e21a:	89 f2                	mov    edx,esi
c001e21c:	0f b7 c2             	movzx  eax,dx
c001e21f:	83 e2 01             	and    edx,0x1
c001e222:	74 16                	je     c001e23a <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e224:	d1 f8                	sar    eax,1
c001e226:	41                   	inc    ecx
c001e227:	89 c2                	mov    edx,eax
c001e229:	83 f9 10             	cmp    ecx,0x10
c001e22c:	75 ee                	jne    c001e21c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e22e:	83 c4 1c             	add    esp,0x1c
c001e231:	31 db                	xor    ebx,ebx
c001e233:	89 d8                	mov    eax,ebx
c001e235:	5b                   	pop    ebx
c001e236:	5e                   	pop    esi
c001e237:	5f                   	pop    edi
c001e238:	5d                   	pop    ebp
c001e239:	c3                   	ret    
c001e23a:	b8 01 00 00 00       	mov    eax,0x1
c001e23f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e242:	d3 e0                	shl    eax,cl
c001e244:	09 c6                	or     esi,eax
c001e246:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e249:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e250:	89 c6                	mov    esi,eax
c001e252:	c1 e6 05             	shl    esi,0x5
c001e255:	01 f0                	add    eax,esi
c001e257:	01 d8                	add    eax,ebx
c001e259:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e260:	75 0a                	jne    c001e26c <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e262:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e26c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e272:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e276:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e279:	01 ca                	add    edx,ecx
c001e27b:	83 ec 08             	sub    esp,0x8
c001e27e:	89 d0                	mov    eax,edx
c001e280:	c1 e0 05             	shl    eax,0x5
c001e283:	01 d0                	add    eax,edx
c001e285:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e289:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e28d:	01 d8                	add    eax,ebx
c001e28f:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e295:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e29b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e2a1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e2a7:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e2ad:	89 cd                	mov    ebp,ecx
c001e2af:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e2b3:	f7 dd                	neg    ebp
c001e2b5:	c1 e5 15             	shl    ebp,0x15
c001e2b8:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e2be:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e2c4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e2ce:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e2d4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e2de:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e2e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2ec:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e2f3:	53                   	push   ebx
c001e2f4:	68 04 27 03 c0       	push   0xc0032704
c001e2f9:	e8 ce b2 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2fe:	89 d8                	mov    eax,ebx
c001e300:	83 c4 10             	add    esp,0x10
c001e303:	83 c4 1c             	add    esp,0x1c
c001e306:	5b                   	pop    ebx
c001e307:	5e                   	pop    esi
c001e308:	5f                   	pop    edi
c001e309:	5d                   	pop    ebp
c001e30a:	c3                   	ret    
c001e30b:	90                   	nop

c001e30c <Process::createUserThread()>:
c001e30c:	83 ec 0c             	sub    esp,0xc
c001e30f:	68 80 00 00 00       	push   0x80
c001e314:	6a 00                	push   0x0
c001e316:	68 d0 dc 01 c0       	push   0xc001dcd0
c001e31b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e31f:	e8 e2 fe ff ff       	call   c001e206 <Process::createThread(void (*)(void*), void*, int)>
c001e324:	83 c4 1c             	add    esp,0x1c
c001e327:	c3                   	ret    

c001e328 <setupMultitasking(void (*)())>:
c001e328:	56                   	push   esi
c001e329:	53                   	push   ebx
c001e32a:	51                   	push   ecx
c001e32b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e32f:	eb 10                	jmp    c001e341 <setupMultitasking(void (*)())+0x19>
c001e331:	83 ec 0c             	sub    esp,0xc
c001e334:	68 04 27 03 c0       	push   0xc0032704
c001e339:	e8 e0 b1 00 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e33e:	83 c4 10             	add    esp,0x10
c001e341:	83 ec 0c             	sub    esp,0xc
c001e344:	68 04 27 03 c0       	push   0xc0032704
c001e349:	e8 ac b1 00 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e34e:	83 c4 10             	add    esp,0x10
c001e351:	84 c0                	test   al,al
c001e353:	74 dc                	je     c001e331 <setupMultitasking(void (*)())+0x9>
c001e355:	83 ec 0c             	sub    esp,0xc
c001e358:	68 3f 07 00 00       	push   0x73f
c001e35d:	e8 2a 15 ff ff       	call   c000f88c <malloc>
c001e362:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e369:	89 c3                	mov    ebx,eax
c001e36b:	6a 00                	push   0x0
c001e36d:	68 df ce 02 c0       	push   0xc002cedf
c001e372:	6a 01                	push   0x1
c001e374:	50                   	push   eax
c001e375:	e8 94 fc ff ff       	call   c001e00e <Process::Process(bool, char const*, Process*, char**)>
c001e37a:	83 c4 18             	add    esp,0x18
c001e37d:	89 1d 10 27 03 c0    	mov    DWORD PTR ds:0xc0032710,ebx
c001e383:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e389:	68 30 d0 02 c0       	push   0xc002d030
c001e38e:	e8 74 47 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e393:	58                   	pop    eax
c001e394:	5a                   	pop    edx
c001e395:	6a 63                	push   0x63
c001e397:	68 64 d0 02 c0       	push   0xc002d064
c001e39c:	e8 66 47 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e3a1:	59                   	pop    ecx
c001e3a2:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3a8:	e8 7d 25 ff ff       	call   c001092a <setActiveTerminal(VgaText*)>
c001e3ad:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e3b5:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e3bf:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e3c5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e3c8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e3d2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e3d8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e3de:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e3e8:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e3f2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e3fc:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e402:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e40c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e412:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e41c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e422:	58                   	pop    eax
c001e423:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e429:	5a                   	pop    edx
c001e42a:	68 db ce 02 c0       	push   0xc002cedb
c001e42f:	50                   	push   eax
c001e430:	e8 d7 23 fe ff       	call   c000080c <strcpy>
c001e435:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e43c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e440:	83 c4 14             	add    esp,0x14
c001e443:	5b                   	pop    ebx
c001e444:	5e                   	pop    esi
c001e445:	e9 0a 1f fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e44a <schedule()>:
c001e44a:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001e44f:	85 c0                	test   eax,eax
c001e451:	74 0b                	je     c001e45e <schedule()+0x14>
c001e453:	c7 05 e0 26 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x1
c001e45d:	c3                   	ret    
c001e45e:	53                   	push   ebx
c001e45f:	83 ec 14             	sub    esp,0x14
c001e462:	68 04 27 03 c0       	push   0xc0032704
c001e467:	e8 8e b0 00 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e46c:	83 c4 10             	add    esp,0x10
c001e46f:	84 c0                	test   al,al
c001e471:	75 38                	jne    c001e4ab <schedule()+0x61>
c001e473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e478:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e47b:	4a                   	dec    edx
c001e47c:	74 32                	je     c001e4b0 <schedule()+0x66>
c001e47e:	83 ec 0c             	sub    esp,0xc
c001e481:	68 04 27 03 c0       	push   0xc0032704
c001e486:	e8 8b b0 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e48b:	c7 04 24 04 27 03 c0 	mov    DWORD PTR [esp],0xc0032704
c001e492:	89 c3                	mov    ebx,eax
c001e494:	e8 85 b0 00 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e499:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e4a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e4a3:	e8 7e f8 ff ff       	call   c001dd26 <switchToThread(ThreadControlBlock*)>
c001e4a8:	83 c4 10             	add    esp,0x10
c001e4ab:	83 c4 08             	add    esp,0x8
c001e4ae:	5b                   	pop    ebx
c001e4af:	c3                   	ret    
c001e4b0:	83 ec 08             	sub    esp,0x8
c001e4b3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e4ba:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e4c0:	68 04 27 03 c0       	push   0xc0032704
c001e4c5:	e8 02 b1 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4ca:	83 c4 10             	add    esp,0x10
c001e4cd:	eb af                	jmp    c001e47e <schedule()+0x34>
c001e4cf:	90                   	nop

c001e4d0 <Semaphore::tryAcquire()>:
c001e4d0:	53                   	push   ebx
c001e4d1:	83 ec 08             	sub    esp,0x8
c001e4d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4d8:	fa                   	cli    
c001e4d9:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e4de:	8d 50 01             	lea    edx,[eax+0x1]
c001e4e1:	89 15 e8 26 03 c0    	mov    DWORD PTR ds:0xc00326e8,edx
c001e4e7:	8b 15 e4 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326e4
c001e4ed:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e4f0:	89 1d e4 26 03 c0    	mov    DWORD PTR ds:0xc00326e4,ebx
c001e4f6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e4f9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e4fb:	7c 2a                	jl     c001e527 <Semaphore::tryAcquire()+0x57>
c001e4fd:	89 15 e4 26 03 c0    	mov    DWORD PTR ds:0xc00326e4,edx
c001e503:	85 d2                	test   edx,edx
c001e505:	75 0a                	jne    c001e511 <Semaphore::tryAcquire()+0x41>
c001e507:	8b 15 e0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326e0
c001e50d:	85 d2                	test   edx,edx
c001e50f:	75 5b                	jne    c001e56c <Semaphore::tryAcquire()+0x9c>
c001e511:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e516:	85 c0                	test   eax,eax
c001e518:	74 07                	je     c001e521 <Semaphore::tryAcquire()+0x51>
c001e51a:	31 c0                	xor    eax,eax
c001e51c:	83 c4 08             	add    esp,0x8
c001e51f:	5b                   	pop    ebx
c001e520:	c3                   	ret    
c001e521:	fb                   	sti    
c001e522:	83 c4 08             	add    esp,0x8
c001e525:	5b                   	pop    ebx
c001e526:	c3                   	ret    
c001e527:	43                   	inc    ebx
c001e528:	89 15 e4 26 03 c0    	mov    DWORD PTR ds:0xc00326e4,edx
c001e52e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e531:	85 d2                	test   edx,edx
c001e533:	75 1f                	jne    c001e554 <Semaphore::tryAcquire()+0x84>
c001e535:	8b 0d e0 26 03 c0    	mov    ecx,DWORD PTR ds:0xc00326e0
c001e53b:	85 c9                	test   ecx,ecx
c001e53d:	74 15                	je     c001e554 <Semaphore::tryAcquire()+0x84>
c001e53f:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c001e549:	e8 fc fe ff ff       	call   c001e44a <schedule()>
c001e54e:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e553:	48                   	dec    eax
c001e554:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e559:	85 c0                	test   eax,eax
c001e55b:	75 08                	jne    c001e565 <Semaphore::tryAcquire()+0x95>
c001e55d:	fb                   	sti    
c001e55e:	b0 01                	mov    al,0x1
c001e560:	83 c4 08             	add    esp,0x8
c001e563:	5b                   	pop    ebx
c001e564:	c3                   	ret    
c001e565:	b0 01                	mov    al,0x1
c001e567:	83 c4 08             	add    esp,0x8
c001e56a:	5b                   	pop    ebx
c001e56b:	c3                   	ret    
c001e56c:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c001e576:	e8 cf fe ff ff       	call   c001e44a <schedule()>
c001e57b:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e580:	48                   	dec    eax
c001e581:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e586:	85 c0                	test   eax,eax
c001e588:	75 90                	jne    c001e51a <Semaphore::tryAcquire()+0x4a>
c001e58a:	eb 95                	jmp    c001e521 <Semaphore::tryAcquire()+0x51>

c001e58c <Semaphore::assertLocked(char const*)>:
c001e58c:	83 ec 0c             	sub    esp,0xc
c001e58f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e593:	fa                   	cli    
c001e594:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001e59a:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001e59f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5a2:	89 0d e4 26 03 c0    	mov    DWORD PTR ds:0xc00326e4,ecx
c001e5a8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e5aa:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e5ad:	7c 24                	jl     c001e5d3 <Semaphore::assertLocked(char const*)+0x47>
c001e5af:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c001e5b4:	85 c0                	test   eax,eax
c001e5b6:	75 09                	jne    c001e5c1 <Semaphore::assertLocked(char const*)+0x35>
c001e5b8:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c001e5bd:	85 c0                	test   eax,eax
c001e5bf:	75 29                	jne    c001e5ea <Semaphore::assertLocked(char const*)+0x5e>
c001e5c1:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e5c6:	48                   	dec    eax
c001e5c7:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e5cc:	75 01                	jne    c001e5cf <Semaphore::assertLocked(char const*)+0x43>
c001e5ce:	fb                   	sti    
c001e5cf:	83 c4 0c             	add    esp,0xc
c001e5d2:	c3                   	ret    
c001e5d3:	83 ec 0c             	sub    esp,0xc
c001e5d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e5da:	e8 b8 c0 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001e5df:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001e5e4:	83 c4 10             	add    esp,0x10
c001e5e7:	48                   	dec    eax
c001e5e8:	eb c5                	jmp    c001e5af <Semaphore::assertLocked(char const*)+0x23>
c001e5ea:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c001e5f4:	e8 51 fe ff ff       	call   c001e44a <schedule()>
c001e5f9:	eb c6                	jmp    c001e5c1 <Semaphore::assertLocked(char const*)+0x35>

c001e5fb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e5fb:	83 ec 14             	sub    esp,0x14
c001e5fe:	ff 35 e8 26 03 c0    	push   DWORD PTR ds:0xc00326e8
c001e604:	68 88 d0 02 c0       	push   0xc002d088
c001e609:	e8 f9 44 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e60e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e613:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e617:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e61a:	e8 2b fe ff ff       	call   c001e44a <schedule()>
c001e61f:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e624:	83 c4 10             	add    esp,0x10
c001e627:	48                   	dec    eax
c001e628:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e62d:	85 c0                	test   eax,eax
c001e62f:	75 06                	jne    c001e637 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e631:	fb                   	sti    
c001e632:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e637:	83 ec 08             	sub    esp,0x8
c001e63a:	50                   	push   eax
c001e63b:	68 bc d0 02 c0       	push   0xc002d0bc
c001e640:	e8 c2 44 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e645:	83 c4 1c             	add    esp,0x1c
c001e648:	c3                   	ret    

c001e649 <blockTask(TaskState)>:
c001e649:	83 ec 0c             	sub    esp,0xc
c001e64c:	fa                   	cli    
c001e64d:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001e653:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e65c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e65f:	e8 e6 fd ff ff       	call   c001e44a <schedule()>
c001e664:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e669:	48                   	dec    eax
c001e66a:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e66f:	75 01                	jne    c001e672 <blockTask(TaskState)+0x29>
c001e671:	fb                   	sti    
c001e672:	83 c4 0c             	add    esp,0xc
c001e675:	c3                   	ret    

c001e676 <waitTask(int, int*, int)>:
c001e676:	83 ec 18             	sub    esp,0x18
c001e679:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e67e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e682:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e685:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e68e:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e691:	6a 07                	push   0x7
c001e693:	e8 b1 ff ff ff       	call   c001e649 <blockTask(TaskState)>
c001e698:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e69d:	83 c4 10             	add    esp,0x10
c001e6a0:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e6a3:	85 d2                	test   edx,edx
c001e6a5:	74 0a                	je     c001e6b1 <waitTask(int, int*, int)+0x3b>
c001e6a7:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e6aa:	89 02                	mov    DWORD PTR [edx],eax
c001e6ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6b1:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e6b4:	83 c4 0c             	add    esp,0xc
c001e6b7:	c3                   	ret    

c001e6b8 <nanoSleepUntil(unsigned long long)>:
c001e6b8:	83 ec 0c             	sub    esp,0xc
c001e6bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6c3:	3b 05 30 f8 02 c0    	cmp    eax,DWORD PTR ds:0xc002f830
c001e6c9:	89 d1                	mov    ecx,edx
c001e6cb:	1b 0d 34 f8 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f834
c001e6d1:	73 04                	jae    c001e6d7 <nanoSleepUntil(unsigned long long)+0x1f>
c001e6d3:	83 c4 0c             	add    esp,0xc
c001e6d6:	c3                   	ret    
c001e6d7:	fa                   	cli    
c001e6d8:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001e6de:	83 ec 08             	sub    esp,0x8
c001e6e1:	ff 05 e4 26 03 c0    	inc    DWORD PTR ds:0xc00326e4
c001e6e7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e6ed:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e6f0:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e6f3:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e6f9:	68 f8 26 03 c0       	push   0xc00326f8
c001e6fe:	e8 c9 ae 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e703:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e70a:	e8 3a ff ff ff       	call   c001e649 <blockTask(TaskState)>
c001e70f:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001e714:	83 c4 10             	add    esp,0x10
c001e717:	48                   	dec    eax
c001e718:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c001e71d:	85 c0                	test   eax,eax
c001e71f:	75 09                	jne    c001e72a <nanoSleepUntil(unsigned long long)+0x72>
c001e721:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c001e726:	85 c0                	test   eax,eax
c001e728:	75 12                	jne    c001e73c <nanoSleepUntil(unsigned long long)+0x84>
c001e72a:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e72f:	48                   	dec    eax
c001e730:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e735:	75 9c                	jne    c001e6d3 <nanoSleepUntil(unsigned long long)+0x1b>
c001e737:	fb                   	sti    
c001e738:	83 c4 0c             	add    esp,0xc
c001e73b:	c3                   	ret    
c001e73c:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c001e746:	e8 ff fc ff ff       	call   c001e44a <schedule()>
c001e74b:	eb dd                	jmp    c001e72a <nanoSleepUntil(unsigned long long)+0x72>

c001e74d <nanoSleep(unsigned long long)>:
c001e74d:	a1 30 f8 02 c0       	mov    eax,ds:0xc002f830
c001e752:	8b 15 34 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f834
c001e758:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e75c:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e760:	e9 53 ff ff ff       	jmp    c001e6b8 <nanoSleepUntil(unsigned long long)>

c001e765 <sleep(unsigned long long)>:
c001e765:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e76d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e772:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e776:	01 ca                	add    edx,ecx
c001e778:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e77c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e780:	eb cb                	jmp    c001e74d <nanoSleep(unsigned long long)>

c001e782 <Semaphore::acquire()>:
c001e782:	83 ec 0c             	sub    esp,0xc
c001e785:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e789:	fa                   	cli    
c001e78a:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001e78f:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001e795:	8d 48 01             	lea    ecx,[eax+0x1]
c001e798:	89 0d e4 26 03 c0    	mov    DWORD PTR ds:0xc00326e4,ecx
c001e79e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e7a1:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e7a3:	7d 28                	jge    c001e7cd <Semaphore::acquire()+0x4b>
c001e7a5:	41                   	inc    ecx
c001e7a6:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e7a9:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c001e7ae:	85 c0                	test   eax,eax
c001e7b0:	75 09                	jne    c001e7bb <Semaphore::acquire()+0x39>
c001e7b2:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c001e7b7:	85 c0                	test   eax,eax
c001e7b9:	75 4e                	jne    c001e809 <Semaphore::acquire()+0x87>
c001e7bb:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e7c0:	48                   	dec    eax
c001e7c1:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e7c6:	75 01                	jne    c001e7c9 <Semaphore::acquire()+0x47>
c001e7c8:	fb                   	sti    
c001e7c9:	83 c4 0c             	add    esp,0xc
c001e7cc:	c3                   	ret    
c001e7cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7d2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e7d9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e7dc:	85 c9                	test   ecx,ecx
c001e7de:	74 3a                	je     c001e81a <Semaphore::acquire()+0x98>
c001e7e0:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e7e3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e7e9:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e7ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7f1:	83 ec 0c             	sub    esp,0xc
c001e7f4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e7f7:	6a 05                	push   0x5
c001e7f9:	e8 4b fe ff ff       	call   c001e649 <blockTask(TaskState)>
c001e7fe:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001e803:	83 c4 10             	add    esp,0x10
c001e806:	48                   	dec    eax
c001e807:	eb a0                	jmp    c001e7a9 <Semaphore::acquire()+0x27>
c001e809:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c001e813:	e8 32 fc ff ff       	call   c001e44a <schedule()>
c001e818:	eb a1                	jmp    c001e7bb <Semaphore::acquire()+0x39>
c001e81a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e81f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e822:	eb c8                	jmp    c001e7ec <Semaphore::acquire()+0x6a>

c001e824 <taskReturned>:
c001e824:	83 ec 18             	sub    esp,0x18
c001e827:	68 f0 d0 02 c0       	push   0xc002d0f0
c001e82c:	e8 66 be ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001e831:	83 c4 10             	add    esp,0x10
c001e834:	83 ec 0c             	sub    esp,0xc
c001e837:	6a 02                	push   0x2
c001e839:	e8 0b fe ff ff       	call   c001e649 <blockTask(TaskState)>
c001e83e:	fa                   	cli    
c001e83f:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001e845:	e8 00 fc ff ff       	call   c001e44a <schedule()>
c001e84a:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e84f:	83 c4 10             	add    esp,0x10
c001e852:	48                   	dec    eax
c001e853:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e858:	85 c0                	test   eax,eax
c001e85a:	75 d8                	jne    c001e834 <taskReturned+0x10>
c001e85c:	fb                   	sti    
c001e85d:	eb d5                	jmp    c001e834 <taskReturned+0x10>

c001e85f <Thr::processFromPID(int)>:
c001e85f:	57                   	push   edi
c001e860:	56                   	push   esi
c001e861:	53                   	push   ebx
c001e862:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e866:	83 ec 0c             	sub    esp,0xc
c001e869:	68 e6 ce 02 c0       	push   0xc002cee6
c001e86e:	e8 94 42 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e873:	fa                   	cli    
c001e874:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001e87a:	c7 04 24 04 27 03 c0 	mov    DWORD PTR [esp],0xc0032704
c001e881:	e8 90 ac 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e886:	83 c4 10             	add    esp,0x10
c001e889:	89 c7                	mov    edi,eax
c001e88b:	eb 14                	jmp    c001e8a1 <Thr::processFromPID(int)+0x42>
c001e88d:	83 ec 0c             	sub    esp,0xc
c001e890:	68 04 27 03 c0       	push   0xc0032704
c001e895:	e8 7c ac 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e89a:	83 c4 10             	add    esp,0x10
c001e89d:	39 f8                	cmp    eax,edi
c001e89f:	74 49                	je     c001e8ea <Thr::processFromPID(int)+0x8b>
c001e8a1:	83 ec 0c             	sub    esp,0xc
c001e8a4:	68 04 27 03 c0       	push   0xc0032704
c001e8a9:	e8 68 ac 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8ae:	c7 04 24 04 27 03 c0 	mov    DWORD PTR [esp],0xc0032704
c001e8b5:	89 c3                	mov    ebx,eax
c001e8b7:	e8 62 ac 00 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8bc:	58                   	pop    eax
c001e8bd:	5a                   	pop    edx
c001e8be:	53                   	push   ebx
c001e8bf:	68 04 27 03 c0       	push   0xc0032704
c001e8c4:	e8 03 ad 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8c9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8cc:	83 c4 10             	add    esp,0x10
c001e8cf:	39 30                	cmp    DWORD PTR [eax],esi
c001e8d1:	75 ba                	jne    c001e88d <Thr::processFromPID(int)+0x2e>
c001e8d3:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e8d8:	48                   	dec    eax
c001e8d9:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e8de:	74 07                	je     c001e8e7 <Thr::processFromPID(int)+0x88>
c001e8e0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8e3:	5b                   	pop    ebx
c001e8e4:	5e                   	pop    esi
c001e8e5:	5f                   	pop    edi
c001e8e6:	c3                   	ret    
c001e8e7:	fb                   	sti    
c001e8e8:	eb f6                	jmp    c001e8e0 <Thr::processFromPID(int)+0x81>
c001e8ea:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e8ef:	48                   	dec    eax
c001e8f0:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e8f5:	75 01                	jne    c001e8f8 <Thr::processFromPID(int)+0x99>
c001e8f7:	fb                   	sti    
c001e8f8:	83 ec 0c             	sub    esp,0xc
c001e8fb:	68 01 cf 02 c0       	push   0xc002cf01
c001e900:	e8 02 42 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	31 c0                	xor    eax,eax
c001e90a:	5b                   	pop    ebx
c001e90b:	5e                   	pop    esi
c001e90c:	5f                   	pop    edi
c001e90d:	c3                   	ret    

c001e90e <unblockTask(ThreadControlBlock*)>:
c001e90e:	53                   	push   ebx
c001e90f:	83 ec 08             	sub    esp,0x8
c001e912:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e916:	fa                   	cli    
c001e917:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001e91d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e920:	85 c0                	test   eax,eax
c001e922:	74 66                	je     c001e98a <unblockTask(ThreadControlBlock*)+0x7c>
c001e924:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e927:	48                   	dec    eax
c001e928:	74 31                	je     c001e95b <unblockTask(ThreadControlBlock*)+0x4d>
c001e92a:	83 ec 0c             	sub    esp,0xc
c001e92d:	68 04 27 03 c0       	push   0xc0032704
c001e932:	e8 df ab 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e937:	83 c4 10             	add    esp,0x10
c001e93a:	85 c0                	test   eax,eax
c001e93c:	75 17                	jne    c001e955 <unblockTask(ThreadControlBlock*)+0x47>
c001e93e:	eb 68                	jmp    c001e9a8 <unblockTask(ThreadControlBlock*)+0x9a>
c001e940:	83 ec 08             	sub    esp,0x8
c001e943:	50                   	push   eax
c001e944:	68 04 27 03 c0       	push   0xc0032704
c001e949:	e8 66 af 00 00       	call   c00298b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e94e:	83 c4 10             	add    esp,0x10
c001e951:	85 c0                	test   eax,eax
c001e953:	74 53                	je     c001e9a8 <unblockTask(ThreadControlBlock*)+0x9a>
c001e955:	39 c3                	cmp    ebx,eax
c001e957:	75 e7                	jne    c001e940 <unblockTask(ThreadControlBlock*)+0x32>
c001e959:	eb 1c                	jmp    c001e977 <unblockTask(ThreadControlBlock*)+0x69>
c001e95b:	83 ec 0c             	sub    esp,0xc
c001e95e:	68 e0 d1 02 c0       	push   0xc002d1e0
c001e963:	e8 9f 41 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e968:	c7 04 24 6c d1 02 c0 	mov    DWORD PTR [esp],0xc002d16c
c001e96f:	e8 93 41 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e974:	83 c4 10             	add    esp,0x10
c001e977:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001e97c:	48                   	dec    eax
c001e97d:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001e982:	75 01                	jne    c001e985 <unblockTask(ThreadControlBlock*)+0x77>
c001e984:	fb                   	sti    
c001e985:	83 c4 08             	add    esp,0x8
c001e988:	5b                   	pop    ebx
c001e989:	c3                   	ret    
c001e98a:	83 ec 0c             	sub    esp,0xc
c001e98d:	68 24 d1 02 c0       	push   0xc002d124
c001e992:	e8 70 41 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e997:	c7 04 24 6c d1 02 c0 	mov    DWORD PTR [esp],0xc002d16c
c001e99e:	e8 64 41 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	eb cf                	jmp    c001e977 <unblockTask(ThreadControlBlock*)+0x69>
c001e9a8:	83 ec 08             	sub    esp,0x8
c001e9ab:	53                   	push   ebx
c001e9ac:	68 04 27 03 c0       	push   0xc0032704
c001e9b1:	e8 16 ac 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e9b6:	83 c4 10             	add    esp,0x10
c001e9b9:	eb bc                	jmp    c001e977 <unblockTask(ThreadControlBlock*)+0x69>

c001e9bb <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e9bb:	55                   	push   ebp
c001e9bc:	57                   	push   edi
c001e9bd:	56                   	push   esi
c001e9be:	53                   	push   ebx
c001e9bf:	83 ec 1c             	sub    esp,0x1c
c001e9c2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e9c6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e9c9:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e9cf:	85 ff                	test   edi,edi
c001e9d1:	7e 20                	jle    c001e9f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e9d3:	31 f6                	xor    esi,esi
c001e9d5:	83 ec 0c             	sub    esp,0xc
c001e9d8:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e9df:	46                   	inc    esi
c001e9e0:	e8 b7 0e ff ff       	call   c000f89c <free>
c001e9e5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e9e8:	83 c4 10             	add    esp,0x10
c001e9eb:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e9f1:	7f e2                	jg     c001e9d5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e9f3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e9fd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ea02:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ea05:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea08:	d3 c0                	rol    eax,cl
c001ea0a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ea11:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea14:	89 f7                	mov    edi,esi
c001ea16:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ea1e:	0f 85 74 01 00 00    	jne    c001eb98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ea24:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ea2a:	85 ed                	test   ebp,ebp
c001ea2c:	74 1b                	je     c001ea49 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ea2e:	83 ec 0c             	sub    esp,0xc
c001ea31:	55                   	push   ebp
c001ea32:	e8 d5 b9 ff ff       	call   c001a40c <EnvVarContainer::~EnvVarContainer()>
c001ea37:	59                   	pop    ecx
c001ea38:	5e                   	pop    esi
c001ea39:	6a 0c                	push   0xc
c001ea3b:	55                   	push   ebp
c001ea3c:	e8 e6 3f ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c001ea41:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea44:	83 c4 10             	add    esp,0x10
c001ea47:	89 f7                	mov    edi,esi
c001ea49:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea4f:	85 c0                	test   eax,eax
c001ea51:	0f 84 aa 00 00 00    	je     c001eb01 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ea57:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ea5a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ea5e:	31 c9                	xor    ecx,ecx
c001ea60:	eb 10                	jmp    c001ea72 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ea62:	41                   	inc    ecx
c001ea63:	83 f9 10             	cmp    ecx,0x10
c001ea66:	0f 84 95 00 00 00    	je     c001eb01 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ea6c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea72:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ea79:	d3 fa                	sar    edx,cl
c001ea7b:	83 e2 01             	and    edx,0x1
c001ea7e:	74 e2                	je     c001ea62 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ea80:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ea83:	01 ca                	add    edx,ecx
c001ea85:	89 d5                	mov    ebp,edx
c001ea87:	c1 e5 05             	shl    ebp,0x5
c001ea8a:	01 ea                	add    edx,ebp
c001ea8c:	01 d0                	add    eax,edx
c001ea8e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ea94:	83 fd 07             	cmp    ebp,0x7
c001ea97:	75 c9                	jne    c001ea62 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ea99:	05 40 02 00 00       	add    eax,0x240
c001ea9e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001eaa1:	83 fd ff             	cmp    ebp,0xffffffff
c001eaa4:	0f 8c 08 01 00 00    	jl     c001ebb2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001eaaa:	0f 84 b9 01 00 00    	je     c001ec69 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eab0:	85 ed                	test   ebp,ebp
c001eab2:	0f 84 a0 01 00 00    	je     c001ec58 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eab8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001eaba:	75 a6                	jne    c001ea62 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eabc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eac2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eac6:	01 d0                	add    eax,edx
c001eac8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eacc:	83 ec 0c             	sub    esp,0xc
c001eacf:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ead5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ead8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001eade:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001eae5:	50                   	push   eax
c001eae6:	e8 23 fe ff ff       	call   c001e90e <unblockTask(ThreadControlBlock*)>
c001eaeb:	83 c4 10             	add    esp,0x10
c001eaee:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eaf1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eaf5:	89 f7                	mov    edi,esi
c001eaf7:	41                   	inc    ecx
c001eaf8:	83 f9 10             	cmp    ecx,0x10
c001eafb:	0f 85 6b ff ff ff    	jne    c001ea6c <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001eb01:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eb07:	85 c0                	test   eax,eax
c001eb09:	74 5d                	je     c001eb68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb0b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001eb11:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001eb17:	74 4f                	je     c001eb68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb19:	83 ec 0c             	sub    esp,0xc
c001eb1c:	68 04 27 03 c0       	push   0xc0032704
c001eb21:	e8 f0 a9 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb26:	c7 04 24 04 27 03 c0 	mov    DWORD PTR [esp],0xc0032704
c001eb2d:	89 c7                	mov    edi,eax
c001eb2f:	e8 c6 a9 00 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eb34:	83 c4 10             	add    esp,0x10
c001eb37:	84 c0                	test   al,al
c001eb39:	0f 84 e4 00 00 00    	je     c001ec23 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001eb3f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb42:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001eb48:	85 d2                	test   edx,edx
c001eb4a:	74 0f                	je     c001eb5b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001eb4c:	83 ec 0c             	sub    esp,0xc
c001eb4f:	8b 02                	mov    eax,DWORD PTR [edx]
c001eb51:	52                   	push   edx
c001eb52:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb55:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb58:	83 c4 10             	add    esp,0x10
c001eb5b:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001eb65:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001eb68:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001eb6e:	85 db                	test   ebx,ebx
c001eb70:	74 16                	je     c001eb88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001eb72:	83 ec 0c             	sub    esp,0xc
c001eb75:	53                   	push   ebx
c001eb76:	e8 41 32 ff ff       	call   c0011dbc <VAS::~VAS()>
c001eb7b:	58                   	pop    eax
c001eb7c:	5a                   	pop    edx
c001eb7d:	6a 14                	push   0x14
c001eb7f:	53                   	push   ebx
c001eb80:	e8 a2 3e ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c001eb85:	83 c4 10             	add    esp,0x10
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	68 18 cf 02 c0       	push   0xc002cf18
c001eb90:	e8 72 3f ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001eb95:	83 c4 10             	add    esp,0x10
c001eb98:	83 ec 08             	sub    esp,0x8
c001eb9b:	68 3f 07 00 00       	push   0x73f
c001eba0:	68 26 cf 02 c0       	push   0xc002cf26
c001eba5:	e8 5d 3f ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001ebaa:	83 c4 2c             	add    esp,0x2c
c001ebad:	5b                   	pop    ebx
c001ebae:	5e                   	pop    esi
c001ebaf:	5f                   	pop    edi
c001ebb0:	5d                   	pop    ebp
c001ebb1:	c3                   	ret    
c001ebb2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	68 24 d2 02 c0       	push   0xc002d224
c001ebbe:	e8 d4 ba ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001ebc3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ebc6:	83 c4 10             	add    esp,0x10
c001ebc9:	89 f7                	mov    edi,esi
c001ebcb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ebcf:	e9 8e fe ff ff       	jmp    c001ea62 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ebd4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ebda:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ebe0:	75 1c                	jne    c001ebfe <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ebe2:	83 ec 0c             	sub    esp,0xc
c001ebe5:	68 8c d2 02 c0       	push   0xc002d28c
c001ebea:	e8 18 3f ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001ebef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ebf6:	e8 4e fa ff ff       	call   c001e649 <blockTask(TaskState)>
c001ebfb:	83 c4 10             	add    esp,0x10
c001ebfe:	83 ec 08             	sub    esp,0x8
c001ec01:	56                   	push   esi
c001ec02:	68 04 27 03 c0       	push   0xc0032704
c001ec07:	e8 c0 a9 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec0c:	c7 04 24 04 27 03 c0 	mov    DWORD PTR [esp],0xc0032704
c001ec13:	e8 fe a8 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec18:	83 c4 10             	add    esp,0x10
c001ec1b:	39 f8                	cmp    eax,edi
c001ec1d:	0f 84 1c ff ff ff    	je     c001eb3f <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ec23:	83 ec 0c             	sub    esp,0xc
c001ec26:	68 04 27 03 c0       	push   0xc0032704
c001ec2b:	e8 e6 a8 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec30:	c7 04 24 04 27 03 c0 	mov    DWORD PTR [esp],0xc0032704
c001ec37:	89 c6                	mov    esi,eax
c001ec39:	e8 e0 a8 00 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ec3e:	83 c4 10             	add    esp,0x10
c001ec41:	39 f3                	cmp    ebx,esi
c001ec43:	74 b9                	je     c001ebfe <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec45:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ec48:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec4b:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ec51:	75 ab                	jne    c001ebfe <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec53:	e9 7c ff ff ff       	jmp    c001ebd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ec58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec5c:	83 ec 0c             	sub    esp,0xc
c001ec5f:	68 58 d2 02 c0       	push   0xc002d258
c001ec64:	e9 55 ff ff ff       	jmp    c001ebbe <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ec69:	8b 36                	mov    esi,DWORD PTR [esi]
c001ec6b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec6f:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ec72:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec75:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ec7b:	01 d7                	add    edi,edx
c001ec7d:	89 f8                	mov    eax,edi
c001ec7f:	e9 44 fe ff ff       	jmp    c001eac8 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ec84 <cleanerTaskFunction(void*)>:
c001ec84:	53                   	push   ebx
c001ec85:	83 ec 08             	sub    esp,0x8
c001ec88:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001ec8d:	48                   	dec    eax
c001ec8e:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001ec93:	75 01                	jne    c001ec96 <cleanerTaskFunction(void*)+0x12>
c001ec95:	fb                   	sti    
c001ec96:	fa                   	cli    
c001ec97:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001ec9c:	80 3d cc 26 03 c0 00 	cmp    BYTE PTR ds:0xc00326cc,0x0
c001eca3:	8d 50 01             	lea    edx,[eax+0x1]
c001eca6:	89 15 e8 26 03 c0    	mov    DWORD PTR ds:0xc00326e8,edx
c001ecac:	0f 84 b9 00 00 00    	je     c001ed6b <cleanerTaskFunction(void*)+0xe7>
c001ecb2:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001ecb7:	85 c0                	test   eax,eax
c001ecb9:	75 01                	jne    c001ecbc <cleanerTaskFunction(void*)+0x38>
c001ecbb:	fb                   	sti    
c001ecbc:	c6 05 cc 26 03 c0 00 	mov    BYTE PTR ds:0xc00326cc,0x0
c001ecc3:	fa                   	cli    
c001ecc4:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001ecca:	ff 05 e4 26 03 c0    	inc    DWORD PTR ds:0xc00326e4
c001ecd0:	fa                   	cli    
c001ecd1:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001ecd7:	eb 3e                	jmp    c001ed17 <cleanerTaskFunction(void*)+0x93>
c001ecd9:	83 ec 0c             	sub    esp,0xc
c001ecdc:	68 ec 26 03 c0       	push   0xc00326ec
c001ece1:	e8 30 a8 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ece6:	c7 04 24 ec 26 03 c0 	mov    DWORD PTR [esp],0xc00326ec
c001eced:	89 c3                	mov    ebx,eax
c001ecef:	e8 2a a8 00 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ecf4:	c7 04 24 3c cf 02 c0 	mov    DWORD PTR [esp],0xc002cf3c
c001ecfb:	e8 07 3e ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001ed00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed03:	e8 b3 fc ff ff       	call   c001e9bb <cleanupTerminatedTask(ThreadControlBlock*)>
c001ed08:	c7 04 24 55 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf55
c001ed0f:	e8 f3 3d ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001ed14:	83 c4 10             	add    esp,0x10
c001ed17:	83 ec 0c             	sub    esp,0xc
c001ed1a:	68 ec 26 03 c0       	push   0xc00326ec
c001ed1f:	e8 d6 a7 00 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed24:	83 c4 10             	add    esp,0x10
c001ed27:	84 c0                	test   al,al
c001ed29:	74 ae                	je     c001ecd9 <cleanerTaskFunction(void*)+0x55>
c001ed2b:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001ed30:	48                   	dec    eax
c001ed31:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001ed36:	75 01                	jne    c001ed39 <cleanerTaskFunction(void*)+0xb5>
c001ed38:	fb                   	sti    
c001ed39:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001ed3e:	48                   	dec    eax
c001ed3f:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c001ed44:	0f 85 3e ff ff ff    	jne    c001ec88 <cleanerTaskFunction(void*)+0x4>
c001ed4a:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c001ed4f:	85 c0                	test   eax,eax
c001ed51:	0f 84 31 ff ff ff    	je     c001ec88 <cleanerTaskFunction(void*)+0x4>
c001ed57:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c001ed61:	e8 e4 f6 ff ff       	call   c001e44a <schedule()>
c001ed66:	e9 1d ff ff ff       	jmp    c001ec88 <cleanerTaskFunction(void*)+0x4>
c001ed6b:	83 ec 0c             	sub    esp,0xc
c001ed6e:	6a 02                	push   0x2
c001ed70:	e8 86 f8 ff ff       	call   c001e5fb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ed75:	83 c4 10             	add    esp,0x10
c001ed78:	e9 3f ff ff ff       	jmp    c001ecbc <cleanerTaskFunction(void*)+0x38>

c001ed7d <terminateTask(int)>:
c001ed7d:	83 ec 14             	sub    esp,0x14
c001ed80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ed88:	83 c0 0c             	add    eax,0xc
c001ed8b:	50                   	push   eax
c001ed8c:	68 b4 d2 02 c0       	push   0xc002d2b4
c001ed91:	e8 71 3d ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001ed96:	fa                   	cli    
c001ed97:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001ed9d:	ff 05 e4 26 03 c0    	inc    DWORD PTR ds:0xc00326e4
c001eda3:	fa                   	cli    
c001eda4:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001edaa:	c7 04 24 68 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf68
c001edb1:	e8 51 3d ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001edb6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001edba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edbf:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001edc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edc7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001edca:	5a                   	pop    edx
c001edcb:	59                   	pop    ecx
c001edcc:	50                   	push   eax
c001edcd:	68 ec 26 03 c0       	push   0xc00326ec
c001edd2:	e8 f5 a7 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001edd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eddc:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ede3:	c7 04 24 82 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf82
c001edea:	e8 18 3d ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001edef:	83 c4 10             	add    esp,0x10
c001edf2:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001edf7:	85 c0                	test   eax,eax
c001edf9:	0f 84 8d 00 00 00    	je     c001ee8c <terminateTask(int)+0x10f>
c001edff:	83 ec 0c             	sub    esp,0xc
c001ee02:	68 9c cf 02 c0       	push   0xc002cf9c
c001ee07:	e8 fb 3c ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001ee0c:	58                   	pop    eax
c001ee0d:	c6 05 cc 26 03 c0 01 	mov    BYTE PTR ds:0xc00326cc,0x1
c001ee14:	ff 35 c8 26 03 c0    	push   DWORD PTR ds:0xc00326c8
c001ee1a:	e8 ef fa ff ff       	call   c001e90e <unblockTask(ThreadControlBlock*)>
c001ee1f:	c7 04 24 b6 cf 02 c0 	mov    DWORD PTR [esp],0xc002cfb6
c001ee26:	e8 dc 3c ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001ee2b:	83 c4 10             	add    esp,0x10
c001ee2e:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001ee33:	48                   	dec    eax
c001ee34:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001ee39:	75 01                	jne    c001ee3c <terminateTask(int)+0xbf>
c001ee3b:	fb                   	sti    
c001ee3c:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001ee41:	48                   	dec    eax
c001ee42:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c001ee47:	75 09                	jne    c001ee52 <terminateTask(int)+0xd5>
c001ee49:	83 3d e0 26 03 c0 00 	cmp    DWORD PTR ds:0xc00326e0,0x0
c001ee50:	75 4c                	jne    c001ee9e <terminateTask(int)+0x121>
c001ee52:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001ee57:	48                   	dec    eax
c001ee58:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001ee5d:	75 01                	jne    c001ee60 <terminateTask(int)+0xe3>
c001ee5f:	fb                   	sti    
c001ee60:	83 ec 0c             	sub    esp,0xc
c001ee63:	68 ee cf 02 c0       	push   0xc002cfee
c001ee68:	e8 9a 3c ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001ee6d:	83 c4 10             	add    esp,0x10
c001ee70:	fa                   	cli    
c001ee71:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001ee77:	e8 ce f5 ff ff       	call   c001e44a <schedule()>
c001ee7c:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001ee81:	48                   	dec    eax
c001ee82:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001ee87:	75 e7                	jne    c001ee70 <terminateTask(int)+0xf3>
c001ee89:	fb                   	sti    
c001ee8a:	eb e4                	jmp    c001ee70 <terminateTask(int)+0xf3>
c001ee8c:	83 ec 0c             	sub    esp,0xc
c001ee8f:	68 d0 cf 02 c0       	push   0xc002cfd0
c001ee94:	e8 6e 3c ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001ee99:	83 c4 10             	add    esp,0x10
c001ee9c:	eb 90                	jmp    c001ee2e <terminateTask(int)+0xb1>
c001ee9e:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c001eea8:	e8 9d f5 ff ff       	call   c001e44a <schedule()>
c001eead:	eb a3                	jmp    c001ee52 <terminateTask(int)+0xd5>

c001eeaf <Thr::terminateFromIRQ(int)>:
c001eeaf:	83 ec 18             	sub    esp,0x18
c001eeb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb6:	e8 c2 fe ff ff       	call   c001ed7d <terminateTask(int)>
c001eebb:	90                   	nop

c001eebc <Semaphore::release()>:
c001eebc:	83 ec 0c             	sub    esp,0xc
c001eebf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eec3:	fa                   	cli    
c001eec4:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001eec9:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001eecf:	8d 48 01             	lea    ecx,[eax+0x1]
c001eed2:	89 0d e4 26 03 c0    	mov    DWORD PTR ds:0xc00326e4,ecx
c001eed8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001eedb:	85 c9                	test   ecx,ecx
c001eedd:	74 3c                	je     c001ef1b <Semaphore::release()+0x5f>
c001eedf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001eee2:	83 ec 0c             	sub    esp,0xc
c001eee5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eee8:	51                   	push   ecx
c001eee9:	e8 20 fa ff ff       	call   c001e90e <unblockTask(ThreadControlBlock*)>
c001eeee:	a1 e4 26 03 c0       	mov    eax,ds:0xc00326e4
c001eef3:	83 c4 10             	add    esp,0x10
c001eef6:	48                   	dec    eax
c001eef7:	a3 e4 26 03 c0       	mov    ds:0xc00326e4,eax
c001eefc:	85 c0                	test   eax,eax
c001eefe:	75 09                	jne    c001ef09 <Semaphore::release()+0x4d>
c001ef00:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c001ef05:	85 c0                	test   eax,eax
c001ef07:	75 17                	jne    c001ef20 <Semaphore::release()+0x64>
c001ef09:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001ef0e:	48                   	dec    eax
c001ef0f:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001ef14:	75 01                	jne    c001ef17 <Semaphore::release()+0x5b>
c001ef16:	fb                   	sti    
c001ef17:	83 c4 0c             	add    esp,0xc
c001ef1a:	c3                   	ret    
c001ef1b:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ef1e:	eb d7                	jmp    c001eef7 <Semaphore::release()+0x3b>
c001ef20:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c001ef2a:	e8 1b f5 ff ff       	call   c001e44a <schedule()>
c001ef2f:	eb d8                	jmp    c001ef09 <Semaphore::release()+0x4d>

c001ef31 <__static_initialization_and_destruction_0(int, int)>:
c001ef31:	83 ec 0c             	sub    esp,0xc
c001ef34:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ef39:	0f 85 88 00 00 00    	jne    c001efc7 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef3f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ef47:	75 7e                	jne    c001efc7 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef49:	83 ec 0c             	sub    esp,0xc
c001ef4c:	68 04 27 03 c0       	push   0xc0032704
c001ef51:	e8 06 a9 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ef56:	83 c4 10             	add    esp,0x10
c001ef59:	83 ec 04             	sub    esp,0x4
c001ef5c:	68 c4 e0 02 c0       	push   0xc002e0c4
c001ef61:	68 04 27 03 c0       	push   0xc0032704
c001ef66:	68 10 98 02 c0       	push   0xc0029810
c001ef6b:	e8 31 3a ff ff       	call   c00129a1 <__cxa_atexit>
c001ef70:	83 c4 10             	add    esp,0x10
c001ef73:	83 ec 0c             	sub    esp,0xc
c001ef76:	68 f8 26 03 c0       	push   0xc00326f8
c001ef7b:	e8 dc a8 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ef80:	83 c4 10             	add    esp,0x10
c001ef83:	83 ec 04             	sub    esp,0x4
c001ef86:	68 c4 e0 02 c0       	push   0xc002e0c4
c001ef8b:	68 f8 26 03 c0       	push   0xc00326f8
c001ef90:	68 10 98 02 c0       	push   0xc0029810
c001ef95:	e8 07 3a ff ff       	call   c00129a1 <__cxa_atexit>
c001ef9a:	83 c4 10             	add    esp,0x10
c001ef9d:	83 ec 0c             	sub    esp,0xc
c001efa0:	68 ec 26 03 c0       	push   0xc00326ec
c001efa5:	e8 b2 a8 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efaa:	83 c4 10             	add    esp,0x10
c001efad:	83 ec 04             	sub    esp,0x4
c001efb0:	68 c4 e0 02 c0       	push   0xc002e0c4
c001efb5:	68 ec 26 03 c0       	push   0xc00326ec
c001efba:	68 10 98 02 c0       	push   0xc0029810
c001efbf:	e8 dd 39 ff ff       	call   c00129a1 <__cxa_atexit>
c001efc4:	83 c4 10             	add    esp,0x10
c001efc7:	90                   	nop
c001efc8:	83 c4 0c             	add    esp,0xc
c001efcb:	c3                   	ret    

c001efcc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001efcc:	83 ec 0c             	sub    esp,0xc
c001efcf:	83 ec 08             	sub    esp,0x8
c001efd2:	68 ff ff 00 00       	push   0xffff
c001efd7:	6a 01                	push   0x1
c001efd9:	e8 53 ff ff ff       	call   c001ef31 <__static_initialization_and_destruction_0(int, int)>
c001efde:	83 c4 10             	add    esp,0x10
c001efe1:	83 c4 0c             	add    esp,0xc
c001efe4:	c3                   	ret    

c001efe5 <Vm::inbv(unsigned short)>:
c001efe5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001efe9:	66 81 fa fe fe       	cmp    dx,0xfefe
c001efee:	75 06                	jne    c001eff6 <Vm::inbv(unsigned short)+0x11>
c001eff0:	a0 4c 27 03 c0       	mov    al,ds:0xc003274c
c001eff5:	c3                   	ret    
c001eff6:	ec                   	in     al,dx
c001eff7:	c3                   	ret    

c001eff8 <Vm::outbv(unsigned short, unsigned char)>:
c001eff8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001effc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f000:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f005:	75 25                	jne    c001f02c <Vm::outbv(unsigned short, unsigned char)+0x34>
c001f007:	8b 0d 4c 27 03 c0    	mov    ecx,DWORD PTR ds:0xc003274c
c001f00d:	8d 51 01             	lea    edx,[ecx+0x1]
c001f010:	88 81 60 27 03 c0    	mov    BYTE PTR [ecx-0x3ffcd8a0],al
c001f016:	89 15 4c 27 03 c0    	mov    DWORD PTR ds:0xc003274c,edx
c001f01c:	83 fa 20             	cmp    edx,0x20
c001f01f:	75 0c                	jne    c001f02d <Vm::outbv(unsigned short, unsigned char)+0x35>
c001f021:	c7 05 4c 27 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003274c,0x1f
c001f02b:	c3                   	ret    
c001f02c:	ee                   	out    dx,al
c001f02d:	c3                   	ret    

c001f02e <Vm::realToLinear(unsigned short, unsigned short)>:
c001f02e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f033:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f038:	c1 e0 04             	shl    eax,0x4
c001f03b:	01 d0                	add    eax,edx
c001f03d:	c3                   	ret    

c001f03e <Vm::getSegment(unsigned int)>:
c001f03e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f042:	c1 e8 10             	shr    eax,0x10
c001f045:	c3                   	ret    

c001f046 <Vm::getOffset(unsigned int)>:
c001f046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f04a:	c3                   	ret    

c001f04b <Vm::mainloop2()>:
c001f04b:	83 ec 18             	sub    esp,0x18
c001f04e:	fa                   	cli    
c001f04f:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001f055:	6a 02                	push   0x2
c001f057:	c6 05 45 27 03 c0 01 	mov    BYTE PTR ds:0xc0032745,0x1
c001f05e:	e8 98 f5 ff ff       	call   c001e5fb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f063:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f068:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f06c:	52                   	push   edx
c001f06d:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f071:	52                   	push   edx
c001f072:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f076:	52                   	push   edx
c001f077:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f07b:	50                   	push   eax
c001f07c:	e8 79 12 fe ff       	call   c00002fa <goToVM86>
c001f081:	83 c4 2c             	add    esp,0x2c
c001f084:	c3                   	ret    

c001f085 <Vm::mainVm8086Loop(void*)>:
c001f085:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001f08a:	48                   	dec    eax
c001f08b:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001f090:	75 01                	jne    c001f093 <Vm::mainVm8086Loop(void*)+0xe>
c001f092:	fb                   	sti    
c001f093:	eb b6                	jmp    c001f04b <Vm::mainloop2()>

c001f095 <Vm::mainloop3(unsigned long)>:
c001f095:	83 ec 18             	sub    esp,0x18
c001f098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f09c:	fa                   	cli    
c001f09d:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001f0a3:	6a 02                	push   0x2
c001f0a5:	c6 05 44 27 03 c0 01 	mov    BYTE PTR ds:0xc0032744,0x1
c001f0ac:	a3 40 27 03 c0       	mov    ds:0xc0032740,eax
c001f0b1:	e8 45 f5 ff ff       	call   c001e5fb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f0b6:	83 c4 1c             	add    esp,0x1c
c001f0b9:	eb 90                	jmp    c001f04b <Vm::mainloop2()>

c001f0bb <Vm::initialise8086()>:
c001f0bb:	83 ec 0c             	sub    esp,0xc
c001f0be:	68 80 00 00 00       	push   0x80
c001f0c3:	6a 00                	push   0x0
c001f0c5:	68 85 f0 01 c0       	push   0xc001f085
c001f0ca:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c001f0d0:	e8 31 f1 ff ff       	call   c001e206 <Process::createThread(void (*)(void*), void*, int)>
c001f0d5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f0dc:	a3 48 27 03 c0       	mov    ds:0xc0032748,eax
c001f0e1:	68 00 01 00 00       	push   0x100
c001f0e6:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c001f0eb:	6a 00                	push   0x0
c001f0ed:	6a 00                	push   0x0
c001f0ef:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f0f5:	e8 34 31 ff ff       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f0fa:	83 c4 2c             	add    esp,0x2c
c001f0fd:	c3                   	ret    

c001f0fe <Vm::finish8086()>:
c001f0fe:	53                   	push   ebx
c001f0ff:	83 ec 08             	sub    esp,0x8
c001f102:	fa                   	cli    
c001f103:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001f109:	80 3d 44 27 03 c0 00 	cmp    BYTE PTR ds:0xc0032744,0x0
c001f110:	75 15                	jne    c001f127 <Vm::finish8086()+0x29>
c001f112:	e8 33 f3 ff ff       	call   c001e44a <schedule()>
c001f117:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001f11c:	48                   	dec    eax
c001f11d:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001f122:	75 de                	jne    c001f102 <Vm::finish8086()+0x4>
c001f124:	fb                   	sti    
c001f125:	eb db                	jmp    c001f102 <Vm::finish8086()+0x4>
c001f127:	83 ec 0c             	sub    esp,0xc
c001f12a:	8b 1d 40 27 03 c0    	mov    ebx,DWORD PTR ds:0xc0032740
c001f130:	ff 35 48 27 03 c0    	push   DWORD PTR ds:0xc0032748
c001f136:	c6 05 44 27 03 c0 00 	mov    BYTE PTR ds:0xc0032744,0x0
c001f13d:	e8 cc f7 ff ff       	call   c001e90e <unblockTask(ThreadControlBlock*)>
c001f142:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001f147:	83 c4 10             	add    esp,0x10
c001f14a:	8d 50 ff             	lea    edx,[eax-0x1]
c001f14d:	89 15 e8 26 03 c0    	mov    DWORD PTR ds:0xc00326e8,edx
c001f153:	85 d2                	test   edx,edx
c001f155:	75 01                	jne    c001f158 <Vm::finish8086()+0x5a>
c001f157:	fb                   	sti    
c001f158:	89 d8                	mov    eax,ebx
c001f15a:	83 c4 08             	add    esp,0x8
c001f15d:	5b                   	pop    ebx
c001f15e:	c3                   	ret    

c001f15f <Vm::getOutput8086(unsigned char*)>:
c001f15f:	57                   	push   edi
c001f160:	8b 0d 4c 27 03 c0    	mov    ecx,DWORD PTR ds:0xc003274c
c001f166:	56                   	push   esi
c001f167:	be 60 27 03 c0       	mov    esi,0xc0032760
c001f16c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f170:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f172:	a1 4c 27 03 c0       	mov    eax,ds:0xc003274c
c001f177:	5e                   	pop    esi
c001f178:	c7 05 4c 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003274c,0x0
c001f182:	5f                   	pop    edi
c001f183:	c3                   	ret    

c001f184 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f184:	55                   	push   ebp
c001f185:	57                   	push   edi
c001f186:	56                   	push   esi
c001f187:	53                   	push   ebx
c001f188:	83 ec 2c             	sub    esp,0x2c
c001f18b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f18f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f193:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f197:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f19b:	fa                   	cli    
c001f19c:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c001f1a2:	0f b6 35 45 27 03 c0 	movzx  esi,BYTE PTR ds:0xc0032745
c001f1a9:	89 f0                	mov    eax,esi
c001f1ab:	84 c0                	test   al,al
c001f1ad:	75 1d                	jne    c001f1cc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f1af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f1b3:	e8 92 f2 ff ff       	call   c001e44a <schedule()>
c001f1b8:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001f1bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f1c1:	48                   	dec    eax
c001f1c2:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001f1c7:	75 d2                	jne    c001f19b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f1c9:	fb                   	sti    
c001f1ca:	eb cf                	jmp    c001f19b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f1cc:	a1 48 27 03 c0       	mov    eax,ds:0xc0032748
c001f1d1:	c7 05 4c 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003274c,0x0
c001f1db:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f1df:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f1e3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f1e7:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f1eb:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f1ef:	50                   	push   eax
c001f1f0:	6a 20                	push   0x20
c001f1f2:	6a 00                	push   0x0
c001f1f4:	68 60 27 03 c0       	push   0xc0032760
c001f1f9:	e8 52 15 fe ff       	call   c0000750 <memset>
c001f1fe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f205:	e8 82 06 ff ff       	call   c000f88c <malloc>
c001f20a:	83 c4 0c             	add    esp,0xc
c001f20d:	89 c3                	mov    ebx,eax
c001f20f:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c001f215:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f219:	50                   	push   eax
c001f21a:	e8 47 3e ff ff       	call   c0013066 <File::File(char const*, Process*)>
c001f21f:	83 c4 10             	add    esp,0x10
c001f222:	85 db                	test   ebx,ebx
c001f224:	75 0a                	jne    c001f230 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f226:	83 ec 0c             	sub    esp,0xc
c001f229:	68 d3 d2 02 c0       	push   0xc002d2d3
c001f22e:	eb 3e                	jmp    c001f26e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f230:	50                   	push   eax
c001f231:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f235:	50                   	push   eax
c001f236:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f23a:	50                   	push   eax
c001f23b:	53                   	push   ebx
c001f23c:	e8 35 41 ff ff       	call   c0013376 <File::stat(unsigned long long*, bool*)>
c001f241:	83 c4 10             	add    esp,0x10
c001f244:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f249:	74 0a                	je     c001f255 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f24b:	83 ec 0c             	sub    esp,0xc
c001f24e:	68 e7 d2 02 c0       	push   0xc002d2e7
c001f253:	eb 19                	jmp    c001f26e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f255:	51                   	push   ecx
c001f256:	51                   	push   ecx
c001f257:	6a 01                	push   0x1
c001f259:	53                   	push   ebx
c001f25a:	e8 6b 3e ff ff       	call   c00130ca <File::open(FileOpenMode)>
c001f25f:	83 c4 10             	add    esp,0x10
c001f262:	85 c0                	test   eax,eax
c001f264:	74 24                	je     c001f28a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f266:	83 ec 0c             	sub    esp,0xc
c001f269:	68 00 d3 02 c0       	push   0xc002d300
c001f26e:	e8 24 b4 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001f273:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001f278:	83 c4 10             	add    esp,0x10
c001f27b:	48                   	dec    eax
c001f27c:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001f281:	85 c0                	test   eax,eax
c001f283:	75 01                	jne    c001f286 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f285:	fb                   	sti    
c001f286:	31 f6                	xor    esi,esi
c001f288:	eb 58                	jmp    c001f2e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f28a:	0f b7 ed             	movzx  ebp,bp
c001f28d:	50                   	push   eax
c001f28e:	0f b7 ff             	movzx  edi,di
c001f291:	50                   	push   eax
c001f292:	55                   	push   ebp
c001f293:	57                   	push   edi
c001f294:	e8 95 fd ff ff       	call   c001f02e <Vm::realToLinear(unsigned short, unsigned short)>
c001f299:	5a                   	pop    edx
c001f29a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f29c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f2a0:	51                   	push   ecx
c001f2a1:	50                   	push   eax
c001f2a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f2a6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f2aa:	53                   	push   ebx
c001f2ab:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f2ae:	83 c4 14             	add    esp,0x14
c001f2b1:	53                   	push   ebx
c001f2b2:	e8 71 3e ff ff       	call   c0013128 <File::close()>
c001f2b7:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c001f2bc:	83 c4 10             	add    esp,0x10
c001f2bf:	48                   	dec    eax
c001f2c0:	c6 05 45 27 03 c0 00 	mov    BYTE PTR ds:0xc0032745,0x0
c001f2c7:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c001f2cc:	85 c0                	test   eax,eax
c001f2ce:	75 01                	jne    c001f2d1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f2d0:	fb                   	sti    
c001f2d1:	83 ec 0c             	sub    esp,0xc
c001f2d4:	ff 35 48 27 03 c0    	push   DWORD PTR ds:0xc0032748
c001f2da:	e8 2f f6 ff ff       	call   c001e90e <unblockTask(ThreadControlBlock*)>
c001f2df:	83 c4 10             	add    esp,0x10
c001f2e2:	83 c4 2c             	add    esp,0x2c
c001f2e5:	89 f0                	mov    eax,esi
c001f2e7:	5b                   	pop    ebx
c001f2e8:	5e                   	pop    esi
c001f2e9:	5f                   	pop    edi
c001f2ea:	5d                   	pop    ebp
c001f2eb:	c3                   	ret    

c001f2ec <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f2ec:	57                   	push   edi
c001f2ed:	56                   	push   esi
c001f2ee:	53                   	push   ebx
c001f2ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f2f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f2fb:	83 e8 06             	sub    eax,0x6
c001f2fe:	0f b7 c0             	movzx  eax,ax
c001f301:	50                   	push   eax
c001f302:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f307:	50                   	push   eax
c001f308:	e8 21 fd ff ff       	call   c001f02e <Vm::realToLinear(unsigned short, unsigned short)>
c001f30d:	5a                   	pop    edx
c001f30e:	5e                   	pop    esi
c001f30f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f312:	8d 56 fa             	lea    edx,[esi-0x6]
c001f315:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f31b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f31e:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f321:	83 c2 02             	add    edx,0x2
c001f324:	66 89 10             	mov    WORD PTR [eax],dx
c001f327:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f32a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f32e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f331:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f335:	89 d6                	mov    esi,edx
c001f337:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f33d:	66 81 e6 ff fd       	and    si,0xfdff
c001f342:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f346:	74 07                	je     c001f34f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f348:	89 d6                	mov    esi,edx
c001f34a:	66 81 ce 00 02       	or     si,0x200
c001f34f:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f358:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f35c:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f364:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f367:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f36f:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f372:	5b                   	pop    ebx
c001f373:	5e                   	pop    esi
c001f374:	5f                   	pop    edi
c001f375:	c3                   	ret    

c001f376 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f376:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f37b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f380:	c1 e0 04             	shl    eax,0x4
c001f383:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f386:	c3                   	ret    

c001f387 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f387:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f38c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f391:	c1 e0 04             	shl    eax,0x4
c001f394:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f398:	c3                   	ret    

c001f399 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f399:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f39e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3a3:	c1 e0 04             	shl    eax,0x4
c001f3a6:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f3a9:	c3                   	ret    

c001f3aa <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f3aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3b4:	c1 e0 04             	shl    eax,0x4
c001f3b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3bb:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f3be:	c3                   	ret    

c001f3bf <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f3bf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3c4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3c9:	c1 e0 04             	shl    eax,0x4
c001f3cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3d0:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f3d4:	c3                   	ret    

c001f3d5 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f3d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3da:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3df:	c1 e0 04             	shl    eax,0x4
c001f3e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3e6:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f3e9:	c3                   	ret    

c001f3ea <Vm::faultHandler(regs*)>:
c001f3ea:	55                   	push   ebp
c001f3eb:	57                   	push   edi
c001f3ec:	56                   	push   esi
c001f3ed:	53                   	push   ebx
c001f3ee:	83 ec 1c             	sub    esp,0x1c
c001f3f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f3f5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f3f8:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f3fc:	0f b7 f8             	movzx  edi,ax
c001f3ff:	52                   	push   edx
c001f400:	0f b7 c0             	movzx  eax,ax
c001f403:	50                   	push   eax
c001f404:	e8 25 fc ff ff       	call   c001f02e <Vm::realToLinear(unsigned short, unsigned short)>
c001f409:	5a                   	pop    edx
c001f40a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f40d:	59                   	pop    ecx
c001f40e:	89 c1                	mov    ecx,eax
c001f410:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f413:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f417:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f41c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f420:	0f b7 c5             	movzx  eax,bp
c001f423:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f427:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f42b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f42f:	e8 fa fb ff ff       	call   c001f02e <Vm::realToLinear(unsigned short, unsigned short)>
c001f434:	5e                   	pop    esi
c001f435:	be 06 00 00 00       	mov    esi,0x6
c001f43a:	5a                   	pop    edx
c001f43b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f440:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f445:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f448:	80 fa 9d             	cmp    dl,0x9d
c001f44b:	0f 84 2c 02 00 00    	je     c001f67d <Vm::faultHandler(regs*)+0x293>
c001f451:	0f 87 91 00 00 00    	ja     c001f4e8 <Vm::faultHandler(regs*)+0xfe>
c001f457:	80 fa 66             	cmp    dl,0x66
c001f45a:	0f 84 98 01 00 00    	je     c001f5f8 <Vm::faultHandler(regs*)+0x20e>
c001f460:	77 47                	ja     c001f4a9 <Vm::faultHandler(regs*)+0xbf>
c001f462:	80 fa 36             	cmp    dl,0x36
c001f465:	0f 84 80 01 00 00    	je     c001f5eb <Vm::faultHandler(regs*)+0x201>
c001f46b:	77 1a                	ja     c001f487 <Vm::faultHandler(regs*)+0x9d>
c001f46d:	80 fa 26             	cmp    dl,0x26
c001f470:	0f 84 4e 01 00 00    	je     c001f5c4 <Vm::faultHandler(regs*)+0x1da>
c001f476:	80 fa 2e             	cmp    dl,0x2e
c001f479:	0f 85 e2 05 00 00    	jne    c001fa61 <Vm::faultHandler(regs*)+0x677>
c001f47f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f482:	31 f6                	xor    esi,esi
c001f484:	41                   	inc    ecx
c001f485:	eb be                	jmp    c001f445 <Vm::faultHandler(regs*)+0x5b>
c001f487:	80 fa 64             	cmp    dl,0x64
c001f48a:	0f 84 41 01 00 00    	je     c001f5d1 <Vm::faultHandler(regs*)+0x1e7>
c001f490:	0f 87 48 01 00 00    	ja     c001f5de <Vm::faultHandler(regs*)+0x1f4>
c001f496:	80 fa 3e             	cmp    dl,0x3e
c001f499:	0f 85 c2 05 00 00    	jne    c001fa61 <Vm::faultHandler(regs*)+0x677>
c001f49f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f4a2:	be 01 00 00 00       	mov    esi,0x1
c001f4a7:	eb db                	jmp    c001f484 <Vm::faultHandler(regs*)+0x9a>
c001f4a9:	80 fa 6d             	cmp    dl,0x6d
c001f4ac:	0f 84 ec 02 00 00    	je     c001f79e <Vm::faultHandler(regs*)+0x3b4>
c001f4b2:	77 17                	ja     c001f4cb <Vm::faultHandler(regs*)+0xe1>
c001f4b4:	80 fa 67             	cmp    dl,0x67
c001f4b7:	0f 84 48 01 00 00    	je     c001f605 <Vm::faultHandler(regs*)+0x21b>
c001f4bd:	80 fa 6c             	cmp    dl,0x6c
c001f4c0:	0f 84 69 02 00 00    	je     c001f72f <Vm::faultHandler(regs*)+0x345>
c001f4c6:	e9 96 05 00 00       	jmp    c001fa61 <Vm::faultHandler(regs*)+0x677>
c001f4cb:	80 fa 6f             	cmp    dl,0x6f
c001f4ce:	0f 84 f4 03 00 00    	je     c001f8c8 <Vm::faultHandler(regs*)+0x4de>
c001f4d4:	0f 82 59 03 00 00    	jb     c001f833 <Vm::faultHandler(regs*)+0x449>
c001f4da:	80 fa 9c             	cmp    dl,0x9c
c001f4dd:	0f 84 2f 01 00 00    	je     c001f612 <Vm::faultHandler(regs*)+0x228>
c001f4e3:	e9 79 05 00 00       	jmp    c001fa61 <Vm::faultHandler(regs*)+0x677>
c001f4e8:	80 fa ec             	cmp    dl,0xec
c001f4eb:	0f 84 14 05 00 00    	je     c001fa05 <Vm::faultHandler(regs*)+0x61b>
c001f4f1:	77 7b                	ja     c001f56e <Vm::faultHandler(regs*)+0x184>
c001f4f3:	80 fa e4             	cmp    dl,0xe4
c001f4f6:	0f 84 93 04 00 00    	je     c001f98f <Vm::faultHandler(regs*)+0x5a5>
c001f4fc:	77 53                	ja     c001f551 <Vm::faultHandler(regs*)+0x167>
c001f4fe:	80 fa cd             	cmp    dl,0xcd
c001f501:	0f 84 d9 01 00 00    	je     c001f6e0 <Vm::faultHandler(regs*)+0x2f6>
c001f507:	80 fa cf             	cmp    dl,0xcf
c001f50a:	0f 85 51 05 00 00    	jne    c001fa61 <Vm::faultHandler(regs*)+0x677>
c001f510:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f513:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f516:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f51a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f51d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f521:	81 ca 00 02 02 00    	or     edx,0x20200
c001f527:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f52a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f52e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f534:	66 c1 e8 09          	shr    ax,0x9
c001f538:	83 e0 01             	and    eax,0x1
c001f53b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f53e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f541:	83 c0 06             	add    eax,0x6
c001f544:	25 ff ff 00 00       	and    eax,0xffff
c001f549:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f54c:	e9 0c 05 00 00       	jmp    c001fa5d <Vm::faultHandler(regs*)+0x673>
c001f551:	80 fa e6             	cmp    dl,0xe6
c001f554:	0f 84 7f 04 00 00    	je     c001f9d9 <Vm::faultHandler(regs*)+0x5ef>
c001f55a:	0f 82 4b 04 00 00    	jb     c001f9ab <Vm::faultHandler(regs*)+0x5c1>
c001f560:	80 fa e7             	cmp    dl,0xe7
c001f563:	0f 84 87 04 00 00    	je     c001f9f0 <Vm::faultHandler(regs*)+0x606>
c001f569:	e9 f3 04 00 00       	jmp    c001fa61 <Vm::faultHandler(regs*)+0x677>
c001f56e:	80 fa ef             	cmp    dl,0xef
c001f571:	0f 84 d1 04 00 00    	je     c001fa48 <Vm::faultHandler(regs*)+0x65e>
c001f577:	77 28                	ja     c001f5a1 <Vm::faultHandler(regs*)+0x1b7>
c001f579:	80 fa ed             	cmp    dl,0xed
c001f57c:	0f 84 9f 04 00 00    	je     c001fa21 <Vm::faultHandler(regs*)+0x637>
c001f582:	80 fa ee             	cmp    dl,0xee
c001f585:	0f 85 d6 04 00 00    	jne    c001fa61 <Vm::faultHandler(regs*)+0x677>
c001f58b:	50                   	push   eax
c001f58c:	50                   	push   eax
c001f58d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f591:	50                   	push   eax
c001f592:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f596:	50                   	push   eax
c001f597:	e8 5c fa ff ff       	call   c001eff8 <Vm::outbv(unsigned short, unsigned char)>
c001f59c:	e9 9f 04 00 00       	jmp    c001fa40 <Vm::faultHandler(regs*)+0x656>
c001f5a1:	80 fa fa             	cmp    dl,0xfa
c001f5a4:	0f 84 69 01 00 00    	je     c001f713 <Vm::faultHandler(regs*)+0x329>
c001f5aa:	80 fa fb             	cmp    dl,0xfb
c001f5ad:	0f 84 6e 01 00 00    	je     c001f721 <Vm::faultHandler(regs*)+0x337>
c001f5b3:	80 fa f3             	cmp    dl,0xf3
c001f5b6:	0f 85 a5 04 00 00    	jne    c001fa61 <Vm::faultHandler(regs*)+0x677>
c001f5bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5bf:	e9 c0 fe ff ff       	jmp    c001f484 <Vm::faultHandler(regs*)+0x9a>
c001f5c4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5c7:	be 02 00 00 00       	mov    esi,0x2
c001f5cc:	e9 b3 fe ff ff       	jmp    c001f484 <Vm::faultHandler(regs*)+0x9a>
c001f5d1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5d4:	be 03 00 00 00       	mov    esi,0x3
c001f5d9:	e9 a6 fe ff ff       	jmp    c001f484 <Vm::faultHandler(regs*)+0x9a>
c001f5de:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5e1:	be 04 00 00 00       	mov    esi,0x4
c001f5e6:	e9 99 fe ff ff       	jmp    c001f484 <Vm::faultHandler(regs*)+0x9a>
c001f5eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5ee:	be 05 00 00 00       	mov    esi,0x5
c001f5f3:	e9 8c fe ff ff       	jmp    c001f484 <Vm::faultHandler(regs*)+0x9a>
c001f5f8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5fb:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f600:	e9 7f fe ff ff       	jmp    c001f484 <Vm::faultHandler(regs*)+0x9a>
c001f605:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f608:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f60d:	e9 72 fe ff ff       	jmp    c001f484 <Vm::faultHandler(regs*)+0x9a>
c001f612:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f615:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f619:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f61e:	74 30                	je     c001f650 <Vm::faultHandler(regs*)+0x266>
c001f620:	83 e9 04             	sub    ecx,0x4
c001f623:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f629:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f62f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f632:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f635:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f63b:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f63f:	0f 84 15 04 00 00    	je     c001fa5a <Vm::faultHandler(regs*)+0x670>
c001f645:	80 ce 02             	or     dh,0x2
c001f648:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f64b:	e9 0a 04 00 00       	jmp    c001fa5a <Vm::faultHandler(regs*)+0x670>
c001f650:	83 e9 02             	sub    ecx,0x2
c001f653:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f659:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f65c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f660:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f666:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f66a:	74 05                	je     c001f671 <Vm::faultHandler(regs*)+0x287>
c001f66c:	80 ce 02             	or     dh,0x2
c001f66f:	eb 03                	jmp    c001f674 <Vm::faultHandler(regs*)+0x28a>
c001f671:	80 e6 fd             	and    dh,0xfd
c001f674:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f678:	e9 dd 03 00 00       	jmp    c001fa5a <Vm::faultHandler(regs*)+0x670>
c001f67d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f682:	74 2a                	je     c001f6ae <Vm::faultHandler(regs*)+0x2c4>
c001f684:	8b 10                	mov    edx,DWORD PTR [eax]
c001f686:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f68c:	81 ca 00 02 02 00    	or     edx,0x20200
c001f692:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f695:	8b 00                	mov    eax,DWORD PTR [eax]
c001f697:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f69d:	c1 e8 09             	shr    eax,0x9
c001f6a0:	83 e0 01             	and    eax,0x1
c001f6a3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f6a6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f6a9:	83 c0 04             	add    eax,0x4
c001f6ac:	eb 25                	jmp    c001f6d3 <Vm::faultHandler(regs*)+0x2e9>
c001f6ae:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f6b1:	81 ca 00 02 02 00    	or     edx,0x20200
c001f6b7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f6ba:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f6bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f6c3:	66 c1 e8 09          	shr    ax,0x9
c001f6c7:	83 e0 01             	and    eax,0x1
c001f6ca:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f6cd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f6d0:	83 c0 02             	add    eax,0x2
c001f6d3:	25 ff ff 00 00       	and    eax,0xffff
c001f6d8:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f6db:	e9 7a 03 00 00       	jmp    c001fa5a <Vm::faultHandler(regs*)+0x670>
c001f6e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f6e4:	3c ee                	cmp    al,0xee
c001f6e6:	75 10                	jne    c001f6f8 <Vm::faultHandler(regs*)+0x30e>
c001f6e8:	83 ec 0c             	sub    esp,0xc
c001f6eb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f6ee:	e8 a2 f9 ff ff       	call   c001f095 <Vm::mainloop3(unsigned long)>
c001f6f3:	e9 4b 03 00 00       	jmp    c001fa43 <Vm::faultHandler(regs*)+0x659>
c001f6f8:	83 ec 0c             	sub    esp,0xc
c001f6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f6ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f703:	51                   	push   ecx
c001f704:	50                   	push   eax
c001f705:	53                   	push   ebx
c001f706:	e8 e1 fb ff ff       	call   c001f2ec <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f70b:	83 c4 20             	add    esp,0x20
c001f70e:	e9 4a 03 00 00       	jmp    c001fa5d <Vm::faultHandler(regs*)+0x673>
c001f713:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f718:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f71c:	e9 39 03 00 00       	jmp    c001fa5a <Vm::faultHandler(regs*)+0x670>
c001f721:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f726:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f72a:	e9 2b 03 00 00       	jmp    c001fa5a <Vm::faultHandler(regs*)+0x670>
c001f72f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f732:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f737:	74 2b                	je     c001f764 <Vm::faultHandler(regs*)+0x37a>
c001f739:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f740:	76 22                	jbe    c001f764 <Vm::faultHandler(regs*)+0x37a>
c001f742:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f746:	50                   	push   eax
c001f747:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f74b:	50                   	push   eax
c001f74c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f750:	50                   	push   eax
c001f751:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f755:	50                   	push   eax
c001f756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f75a:	50                   	push   eax
c001f75b:	6a 6c                	push   0x6c
c001f75d:	6a 6c                	push   0x6c
c001f75f:	e9 b9 01 00 00       	jmp    c001f91d <Vm::faultHandler(regs*)+0x533>
c001f764:	83 ec 0c             	sub    esp,0xc
c001f767:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f76b:	0f b7 f6             	movzx  esi,si
c001f76e:	50                   	push   eax
c001f76f:	e8 71 f8 ff ff       	call   c001efe5 <Vm::inbv(unsigned short)>
c001f774:	83 c4 0c             	add    esp,0xc
c001f777:	0f b6 c0             	movzx  eax,al
c001f77a:	50                   	push   eax
c001f77b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f77f:	50                   	push   eax
c001f780:	56                   	push   esi
c001f781:	e8 24 fc ff ff       	call   c001f3aa <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f786:	83 c4 10             	add    esp,0x10
c001f789:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f78c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f790:	74 03                	je     c001f795 <Vm::faultHandler(regs*)+0x3ab>
c001f792:	48                   	dec    eax
c001f793:	eb 01                	jmp    c001f796 <Vm::faultHandler(regs*)+0x3ac>
c001f795:	40                   	inc    eax
c001f796:	0f b7 c0             	movzx  eax,ax
c001f799:	e9 8d 00 00 00       	jmp    c001f82b <Vm::faultHandler(regs*)+0x441>
c001f79e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f7a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f7a4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f7a9:	74 29                	je     c001f7d4 <Vm::faultHandler(regs*)+0x3ea>
c001f7ab:	3d ff ff 00 00       	cmp    eax,0xffff
c001f7b0:	76 22                	jbe    c001f7d4 <Vm::faultHandler(regs*)+0x3ea>
c001f7b2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f7b6:	50                   	push   eax
c001f7b7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f7bb:	50                   	push   eax
c001f7bc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f7c0:	50                   	push   eax
c001f7c1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f7c5:	50                   	push   eax
c001f7c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f7ca:	50                   	push   eax
c001f7cb:	6a 6d                	push   0x6d
c001f7cd:	6a 6d                	push   0x6d
c001f7cf:	e9 49 01 00 00       	jmp    c001f91d <Vm::faultHandler(regs*)+0x533>
c001f7d4:	0f b7 c8             	movzx  ecx,ax
c001f7d7:	0f b7 f6             	movzx  esi,si
c001f7da:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f7dd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f7e2:	74 20                	je     c001f804 <Vm::faultHandler(regs*)+0x41a>
c001f7e4:	ed                   	in     eax,dx
c001f7e5:	55                   	push   ebp
c001f7e6:	50                   	push   eax
c001f7e7:	51                   	push   ecx
c001f7e8:	56                   	push   esi
c001f7e9:	e8 e7 fb ff ff       	call   c001f3d5 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f7ee:	83 c4 10             	add    esp,0x10
c001f7f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f7f4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f7f8:	74 05                	je     c001f7ff <Vm::faultHandler(regs*)+0x415>
c001f7fa:	83 e8 04             	sub    eax,0x4
c001f7fd:	eb 27                	jmp    c001f826 <Vm::faultHandler(regs*)+0x43c>
c001f7ff:	83 c0 04             	add    eax,0x4
c001f802:	eb 22                	jmp    c001f826 <Vm::faultHandler(regs*)+0x43c>
c001f804:	66 ed                	in     ax,dx
c001f806:	0f b7 c0             	movzx  eax,ax
c001f809:	57                   	push   edi
c001f80a:	50                   	push   eax
c001f80b:	51                   	push   ecx
c001f80c:	56                   	push   esi
c001f80d:	e8 ad fb ff ff       	call   c001f3bf <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f812:	83 c4 10             	add    esp,0x10
c001f815:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f818:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f81c:	74 05                	je     c001f823 <Vm::faultHandler(regs*)+0x439>
c001f81e:	83 e8 02             	sub    eax,0x2
c001f821:	eb 03                	jmp    c001f826 <Vm::faultHandler(regs*)+0x43c>
c001f823:	83 c0 02             	add    eax,0x2
c001f826:	25 ff ff 00 00       	and    eax,0xffff
c001f82b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f82e:	e9 27 02 00 00       	jmp    c001fa5a <Vm::faultHandler(regs*)+0x670>
c001f833:	8d 46 ff             	lea    eax,[esi-0x1]
c001f836:	3c 05                	cmp    al,0x5
c001f838:	77 24                	ja     c001f85e <Vm::faultHandler(regs*)+0x474>
c001f83a:	0f b6 c0             	movzx  eax,al
c001f83d:	ff 24 85 74 d3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2c8c]
c001f844:	0f b7 fd             	movzx  edi,bp
c001f847:	eb 15                	jmp    c001f85e <Vm::faultHandler(regs*)+0x474>
c001f849:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f84d:	eb 0f                	jmp    c001f85e <Vm::faultHandler(regs*)+0x474>
c001f84f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f853:	eb 09                	jmp    c001f85e <Vm::faultHandler(regs*)+0x474>
c001f855:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f859:	eb 03                	jmp    c001f85e <Vm::faultHandler(regs*)+0x474>
c001f85b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f85e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f861:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f866:	74 29                	je     c001f891 <Vm::faultHandler(regs*)+0x4a7>
c001f868:	3d ff ff 00 00       	cmp    eax,0xffff
c001f86d:	76 22                	jbe    c001f891 <Vm::faultHandler(regs*)+0x4a7>
c001f86f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f873:	50                   	push   eax
c001f874:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f878:	50                   	push   eax
c001f879:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f87d:	50                   	push   eax
c001f87e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f882:	50                   	push   eax
c001f883:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f887:	50                   	push   eax
c001f888:	6a 6e                	push   0x6e
c001f88a:	6a 6e                	push   0x6e
c001f88c:	e9 8c 00 00 00       	jmp    c001f91d <Vm::faultHandler(regs*)+0x533>
c001f891:	0f b7 c0             	movzx  eax,ax
c001f894:	52                   	push   edx
c001f895:	52                   	push   edx
c001f896:	50                   	push   eax
c001f897:	57                   	push   edi
c001f898:	e8 d9 fa ff ff       	call   c001f376 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f89d:	59                   	pop    ecx
c001f89e:	0f b6 c0             	movzx  eax,al
c001f8a1:	5e                   	pop    esi
c001f8a2:	50                   	push   eax
c001f8a3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f8a7:	50                   	push   eax
c001f8a8:	e8 4b f7 ff ff       	call   c001eff8 <Vm::outbv(unsigned short, unsigned char)>
c001f8ad:	83 c4 10             	add    esp,0x10
c001f8b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f8b3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f8b7:	74 03                	je     c001f8bc <Vm::faultHandler(regs*)+0x4d2>
c001f8b9:	48                   	dec    eax
c001f8ba:	eb 01                	jmp    c001f8bd <Vm::faultHandler(regs*)+0x4d3>
c001f8bc:	40                   	inc    eax
c001f8bd:	0f b7 c0             	movzx  eax,ax
c001f8c0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f8c3:	e9 92 01 00 00       	jmp    c001fa5a <Vm::faultHandler(regs*)+0x670>
c001f8c8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f8cb:	3c 05                	cmp    al,0x5
c001f8cd:	77 1f                	ja     c001f8ee <Vm::faultHandler(regs*)+0x504>
c001f8cf:	0f b6 c0             	movzx  eax,al
c001f8d2:	ff 24 85 8c d3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2c74]
c001f8d9:	89 ef                	mov    edi,ebp
c001f8db:	eb 11                	jmp    c001f8ee <Vm::faultHandler(regs*)+0x504>
c001f8dd:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f8e0:	eb 0c                	jmp    c001f8ee <Vm::faultHandler(regs*)+0x504>
c001f8e2:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f8e5:	eb 07                	jmp    c001f8ee <Vm::faultHandler(regs*)+0x504>
c001f8e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f8ea:	eb 02                	jmp    c001f8ee <Vm::faultHandler(regs*)+0x504>
c001f8ec:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f8ee:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f8f1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f8f6:	74 37                	je     c001f92f <Vm::faultHandler(regs*)+0x545>
c001f8f8:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f8fe:	76 2f                	jbe    c001f92f <Vm::faultHandler(regs*)+0x545>
c001f900:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f904:	50                   	push   eax
c001f905:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f909:	50                   	push   eax
c001f90a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f90e:	50                   	push   eax
c001f90f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f913:	50                   	push   eax
c001f914:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f918:	50                   	push   eax
c001f919:	6a 6f                	push   0x6f
c001f91b:	6a 6f                	push   0x6f
c001f91d:	68 19 d3 02 c0       	push   0xc002d319
c001f922:	e8 e0 31 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001f927:	83 c4 20             	add    esp,0x20
c001f92a:	e9 86 01 00 00       	jmp    c001fab5 <Vm::faultHandler(regs*)+0x6cb>
c001f92f:	0f b7 d7             	movzx  edx,di
c001f932:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f935:	0f b7 c6             	movzx  eax,si
c001f938:	81 e1 00 04 00 00    	and    ecx,0x400
c001f93e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f941:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f946:	74 1d                	je     c001f965 <Vm::faultHandler(regs*)+0x57b>
c001f948:	55                   	push   ebp
c001f949:	55                   	push   ebp
c001f94a:	50                   	push   eax
c001f94b:	52                   	push   edx
c001f94c:	e8 48 fa ff ff       	call   c001f399 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f951:	83 c4 10             	add    esp,0x10
c001f954:	89 fa                	mov    edx,edi
c001f956:	ef                   	out    dx,eax
c001f957:	85 c9                	test   ecx,ecx
c001f959:	74 05                	je     c001f960 <Vm::faultHandler(regs*)+0x576>
c001f95b:	83 ee 04             	sub    esi,0x4
c001f95e:	eb 21                	jmp    c001f981 <Vm::faultHandler(regs*)+0x597>
c001f960:	83 c6 04             	add    esi,0x4
c001f963:	eb 1c                	jmp    c001f981 <Vm::faultHandler(regs*)+0x597>
c001f965:	55                   	push   ebp
c001f966:	55                   	push   ebp
c001f967:	50                   	push   eax
c001f968:	52                   	push   edx
c001f969:	e8 19 fa ff ff       	call   c001f387 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f96e:	83 c4 10             	add    esp,0x10
c001f971:	89 fa                	mov    edx,edi
c001f973:	66 ef                	out    dx,ax
c001f975:	85 c9                	test   ecx,ecx
c001f977:	74 05                	je     c001f97e <Vm::faultHandler(regs*)+0x594>
c001f979:	83 ee 02             	sub    esi,0x2
c001f97c:	eb 03                	jmp    c001f981 <Vm::faultHandler(regs*)+0x597>
c001f97e:	83 c6 02             	add    esi,0x2
c001f981:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f987:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f98a:	e9 cb 00 00 00       	jmp    c001fa5a <Vm::faultHandler(regs*)+0x670>
c001f98f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f996:	83 ec 0c             	sub    esp,0xc
c001f999:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f99d:	50                   	push   eax
c001f99e:	e8 42 f6 ff ff       	call   c001efe5 <Vm::inbv(unsigned short)>
c001f9a3:	0f b6 c0             	movzx  eax,al
c001f9a6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f9a9:	eb 3f                	jmp    c001f9ea <Vm::faultHandler(regs*)+0x600>
c001f9ab:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f9b0:	74 07                	je     c001f9b9 <Vm::faultHandler(regs*)+0x5cf>
c001f9b2:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f9b6:	ed                   	in     eax,dx
c001f9b7:	eb 14                	jmp    c001f9cd <Vm::faultHandler(regs*)+0x5e3>
c001f9b9:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f9bc:	66 31 f6             	xor    si,si
c001f9bf:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f9c2:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f9c6:	66 ed                	in     ax,dx
c001f9c8:	0f b7 c0             	movzx  eax,ax
c001f9cb:	09 f0                	or     eax,esi
c001f9cd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f9d0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9d4:	e9 84 00 00 00       	jmp    c001fa5d <Vm::faultHandler(regs*)+0x673>
c001f9d9:	52                   	push   edx
c001f9da:	52                   	push   edx
c001f9db:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f9df:	50                   	push   eax
c001f9e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f9e4:	50                   	push   eax
c001f9e5:	e8 0e f6 ff ff       	call   c001eff8 <Vm::outbv(unsigned short, unsigned char)>
c001f9ea:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9ee:	eb 53                	jmp    c001fa43 <Vm::faultHandler(regs*)+0x659>
c001f9f0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f9f3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f9f7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f9fc:	74 03                	je     c001fa01 <Vm::faultHandler(regs*)+0x617>
c001f9fe:	ef                   	out    dx,eax
c001f9ff:	eb cf                	jmp    c001f9d0 <Vm::faultHandler(regs*)+0x5e6>
c001fa01:	66 ef                	out    dx,ax
c001fa03:	eb cb                	jmp    c001f9d0 <Vm::faultHandler(regs*)+0x5e6>
c001fa05:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001fa0c:	83 ec 0c             	sub    esp,0xc
c001fa0f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001fa13:	50                   	push   eax
c001fa14:	e8 cc f5 ff ff       	call   c001efe5 <Vm::inbv(unsigned short)>
c001fa19:	0f b6 c0             	movzx  eax,al
c001fa1c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001fa1f:	eb 1f                	jmp    c001fa40 <Vm::faultHandler(regs*)+0x656>
c001fa21:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001fa24:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001fa29:	74 03                	je     c001fa2e <Vm::faultHandler(regs*)+0x644>
c001fa2b:	ed                   	in     eax,dx
c001fa2c:	eb 0d                	jmp    c001fa3b <Vm::faultHandler(regs*)+0x651>
c001fa2e:	66 ed                	in     ax,dx
c001fa30:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001fa33:	0f b7 c0             	movzx  eax,ax
c001fa36:	66 31 d2             	xor    dx,dx
c001fa39:	09 d0                	or     eax,edx
c001fa3b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001fa3e:	eb 1a                	jmp    c001fa5a <Vm::faultHandler(regs*)+0x670>
c001fa40:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001fa43:	83 c4 10             	add    esp,0x10
c001fa46:	eb 15                	jmp    c001fa5d <Vm::faultHandler(regs*)+0x673>
c001fa48:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001fa4b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001fa4e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001fa53:	74 03                	je     c001fa58 <Vm::faultHandler(regs*)+0x66e>
c001fa55:	ef                   	out    dx,eax
c001fa56:	eb 02                	jmp    c001fa5a <Vm::faultHandler(regs*)+0x670>
c001fa58:	66 ef                	out    dx,ax
c001fa5a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001fa5d:	b0 01                	mov    al,0x1
c001fa5f:	eb 56                	jmp    c001fab7 <Vm::faultHandler(regs*)+0x6cd>
c001fa61:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001fa65:	50                   	push   eax
c001fa66:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001fa6a:	50                   	push   eax
c001fa6b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001fa6f:	50                   	push   eax
c001fa70:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001fa74:	50                   	push   eax
c001fa75:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001fa79:	50                   	push   eax
c001fa7a:	52                   	push   edx
c001fa7b:	52                   	push   edx
c001fa7c:	68 46 d3 02 c0       	push   0xc002d346
c001fa81:	e8 81 30 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c001fa86:	83 c4 20             	add    esp,0x20
c001fa89:	83 ec 0c             	sub    esp,0xc
c001fa8c:	6a 60                	push   0x60
c001fa8e:	e8 52 f5 ff ff       	call   c001efe5 <Vm::inbv(unsigned short)>
c001fa93:	83 c4 10             	add    esp,0x10
c001fa96:	3c 1c                	cmp    al,0x1c
c001fa98:	74 04                	je     c001fa9e <Vm::faultHandler(regs*)+0x6b4>
c001fa9a:	3c 5a                	cmp    al,0x5a
c001fa9c:	75 eb                	jne    c001fa89 <Vm::faultHandler(regs*)+0x69f>
c001fa9e:	3c 5a                	cmp    al,0x5a
c001faa0:	74 04                	je     c001faa6 <Vm::faultHandler(regs*)+0x6bc>
c001faa2:	3c 1c                	cmp    al,0x1c
c001faa4:	75 0f                	jne    c001fab5 <Vm::faultHandler(regs*)+0x6cb>
c001faa6:	83 ec 0c             	sub    esp,0xc
c001faa9:	6a 60                	push   0x60
c001faab:	e8 35 f5 ff ff       	call   c001efe5 <Vm::inbv(unsigned short)>
c001fab0:	83 c4 10             	add    esp,0x10
c001fab3:	eb e9                	jmp    c001fa9e <Vm::faultHandler(regs*)+0x6b4>
c001fab5:	31 c0                	xor    eax,eax
c001fab7:	83 c4 1c             	add    esp,0x1c
c001faba:	5b                   	pop    ebx
c001fabb:	5e                   	pop    esi
c001fabc:	5f                   	pop    edi
c001fabd:	5d                   	pop    ebp
c001fabe:	c3                   	ret    

c001fabf <Vm::fpuInternalTo32(unsigned long long)>:
c001fabf:	57                   	push   edi
c001fac0:	56                   	push   esi
c001fac1:	53                   	push   ebx
c001fac2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faca:	89 d6                	mov    esi,edx
c001facc:	89 d7                	mov    edi,edx
c001face:	89 c1                	mov    ecx,eax
c001fad0:	c1 ef 14             	shr    edi,0x14
c001fad3:	89 d3                	mov    ebx,edx
c001fad5:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fadb:	31 d2                	xor    edx,edx
c001fadd:	89 f8                	mov    eax,edi
c001fadf:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fae5:	bf ff 00 00 00       	mov    edi,0xff
c001faea:	05 80 fc ff ff       	add    eax,0xfffffc80
c001faef:	83 d2 ff             	adc    edx,0xffffffff
c001faf2:	39 c7                	cmp    edi,eax
c001faf4:	bf 00 00 00 00       	mov    edi,0x0
c001faf9:	19 d7                	sbb    edi,edx
c001fafb:	72 15                	jb     c001fb12 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fafd:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fb01:	c1 e0 17             	shl    eax,0x17
c001fb04:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fb0a:	09 f1                	or     ecx,esi
c001fb0c:	09 c1                	or     ecx,eax
c001fb0e:	89 cf                	mov    edi,ecx
c001fb10:	eb 02                	jmp    c001fb14 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fb12:	31 ff                	xor    edi,edi
c001fb14:	89 f8                	mov    eax,edi
c001fb16:	5b                   	pop    ebx
c001fb17:	5e                   	pop    esi
c001fb18:	5f                   	pop    edi
c001fb19:	c3                   	ret    

c001fb1a <Vm::fpuInternalTo64(unsigned long long)>:
c001fb1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fb22:	c3                   	ret    

c001fb23 <Vm::fpu32ToInternal(unsigned int)>:
c001fb23:	57                   	push   edi
c001fb24:	31 ff                	xor    edi,edi
c001fb26:	56                   	push   esi
c001fb27:	53                   	push   ebx
c001fb28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fb2c:	89 cb                	mov    ebx,ecx
c001fb2e:	89 ce                	mov    esi,ecx
c001fb30:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fb36:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fb3c:	c1 e9 17             	shr    ecx,0x17
c001fb3f:	89 f0                	mov    eax,esi
c001fb41:	0f b6 d1             	movzx  edx,cl
c001fb44:	81 c2 80 03 00 00    	add    edx,0x380
c001fb4a:	89 d1                	mov    ecx,edx
c001fb4c:	89 fa                	mov    edx,edi
c001fb4e:	c1 e1 14             	shl    ecx,0x14
c001fb51:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fb55:	c1 e0 1d             	shl    eax,0x1d
c001fb58:	89 d7                	mov    edi,edx
c001fb5a:	89 c6                	mov    esi,eax
c001fb5c:	89 ca                	mov    edx,ecx
c001fb5e:	89 f0                	mov    eax,esi
c001fb60:	09 fa                	or     edx,edi
c001fb62:	09 da                	or     edx,ebx
c001fb64:	5b                   	pop    ebx
c001fb65:	5e                   	pop    esi
c001fb66:	5f                   	pop    edi
c001fb67:	c3                   	ret    

c001fb68 <Vm::fpu64ToInternal(unsigned long long)>:
c001fb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fb70:	c3                   	ret    

c001fb71 <Vm::fpuFloatToLong(unsigned long long)>:
c001fb71:	57                   	push   edi
c001fb72:	31 c0                	xor    eax,eax
c001fb74:	56                   	push   esi
c001fb75:	31 d2                	xor    edx,edx
c001fb77:	53                   	push   ebx
c001fb78:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fb7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb80:	89 d9                	mov    ecx,ebx
c001fb82:	c1 e9 14             	shr    ecx,0x14
c001fb85:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fb8b:	89 cf                	mov    edi,ecx
c001fb8d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fb93:	78 33                	js     c001fbc8 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fb95:	89 d9                	mov    ecx,ebx
c001fb97:	89 f0                	mov    eax,esi
c001fb99:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fb9f:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fba5:	89 ca                	mov    edx,ecx
c001fba7:	b9 34 00 00 00       	mov    ecx,0x34
c001fbac:	29 f9                	sub    ecx,edi
c001fbae:	0f ad d0             	shrd   eax,edx,cl
c001fbb1:	d3 fa                	sar    edx,cl
c001fbb3:	f6 c1 20             	test   cl,0x20
c001fbb6:	74 05                	je     c001fbbd <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fbb8:	89 d0                	mov    eax,edx
c001fbba:	c1 fa 1f             	sar    edx,0x1f
c001fbbd:	85 db                	test   ebx,ebx
c001fbbf:	79 07                	jns    c001fbc8 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fbc1:	f7 d8                	neg    eax
c001fbc3:	83 d2 00             	adc    edx,0x0
c001fbc6:	f7 da                	neg    edx
c001fbc8:	5b                   	pop    ebx
c001fbc9:	5e                   	pop    esi
c001fbca:	5f                   	pop    edi
c001fbcb:	c3                   	ret    

c001fbcc <Vm::fpuULongToFloat(unsigned long long)>:
c001fbcc:	57                   	push   edi
c001fbcd:	31 c9                	xor    ecx,ecx
c001fbcf:	56                   	push   esi
c001fbd0:	53                   	push   ebx
c001fbd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fbd5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fbd9:	0f ba e7 14          	bt     edi,0x14
c001fbdd:	72 07                	jb     c001fbe6 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fbdf:	01 f6                	add    esi,esi
c001fbe1:	11 ff                	adc    edi,edi
c001fbe3:	41                   	inc    ecx
c001fbe4:	eb f3                	jmp    c001fbd9 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fbe6:	89 fa                	mov    edx,edi
c001fbe8:	89 f0                	mov    eax,esi
c001fbea:	bb 33 04 00 00       	mov    ebx,0x433
c001fbef:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fbf5:	29 cb                	sub    ebx,ecx
c001fbf7:	89 d9                	mov    ecx,ebx
c001fbf9:	5b                   	pop    ebx
c001fbfa:	c1 e1 14             	shl    ecx,0x14
c001fbfd:	5e                   	pop    esi
c001fbfe:	09 ca                	or     edx,ecx
c001fc00:	5f                   	pop    edi
c001fc01:	c3                   	ret    

c001fc02 <Vm::fpuLongToFloat(long long)>:
c001fc02:	56                   	push   esi
c001fc03:	31 c0                	xor    eax,eax
c001fc05:	53                   	push   ebx
c001fc06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fc0e:	39 c8                	cmp    eax,ecx
c001fc10:	19 d8                	sbb    eax,ebx
c001fc12:	7d 04                	jge    c001fc18 <Vm::fpuLongToFloat(long long)+0x16>
c001fc14:	31 f6                	xor    esi,esi
c001fc16:	eb 0c                	jmp    c001fc24 <Vm::fpuLongToFloat(long long)+0x22>
c001fc18:	f7 d9                	neg    ecx
c001fc1a:	be 01 00 00 00       	mov    esi,0x1
c001fc1f:	83 d3 00             	adc    ebx,0x0
c001fc22:	f7 db                	neg    ebx
c001fc24:	31 c0                	xor    eax,eax
c001fc26:	0f ba e3 14          	bt     ebx,0x14
c001fc2a:	72 07                	jb     c001fc33 <Vm::fpuLongToFloat(long long)+0x31>
c001fc2c:	01 c9                	add    ecx,ecx
c001fc2e:	11 db                	adc    ebx,ebx
c001fc30:	40                   	inc    eax
c001fc31:	eb f3                	jmp    c001fc26 <Vm::fpuLongToFloat(long long)+0x24>
c001fc33:	ba 33 04 00 00       	mov    edx,0x433
c001fc38:	29 c2                	sub    edx,eax
c001fc3a:	89 c8                	mov    eax,ecx
c001fc3c:	c1 e2 14             	shl    edx,0x14
c001fc3f:	89 d9                	mov    ecx,ebx
c001fc41:	89 f3                	mov    ebx,esi
c001fc43:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fc49:	09 ca                	or     edx,ecx
c001fc4b:	84 db                	test   bl,bl
c001fc4d:	74 06                	je     c001fc55 <Vm::fpuLongToFloat(long long)+0x53>
c001fc4f:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fc55:	5b                   	pop    ebx
c001fc56:	5e                   	pop    esi
c001fc57:	c3                   	ret    

c001fc58 <Vm::fpuGet0()>:
c001fc58:	31 c0                	xor    eax,eax
c001fc5a:	31 d2                	xor    edx,edx
c001fc5c:	c3                   	ret    

c001fc5d <Vm::fpuGet1()>:
c001fc5d:	b8 01 00 00 00       	mov    eax,0x1
c001fc62:	31 d2                	xor    edx,edx
c001fc64:	c3                   	ret    

c001fc65 <Vm::fpuGetPi()>:
c001fc65:	b8 03 00 00 00       	mov    eax,0x3
c001fc6a:	31 d2                	xor    edx,edx
c001fc6c:	c3                   	ret    

c001fc6d <Vm::fpuGetLog2E()>:
c001fc6d:	83 ec 18             	sub    esp,0x18
c001fc70:	68 a4 d3 02 c0       	push   0xc002d3a4
c001fc75:	e8 1d aa ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001fc7a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fc7f:	31 d2                	xor    edx,edx
c001fc81:	83 c4 1c             	add    esp,0x1c
c001fc84:	c3                   	ret    

c001fc85 <Vm::fpuGetLogE2()>:
c001fc85:	83 ec 18             	sub    esp,0x18
c001fc88:	68 b0 d3 02 c0       	push   0xc002d3b0
c001fc8d:	e8 05 aa ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001fc92:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fc97:	31 d2                	xor    edx,edx
c001fc99:	83 c4 1c             	add    esp,0x1c
c001fc9c:	c3                   	ret    

c001fc9d <Vm::fpuGetLog210()>:
c001fc9d:	83 ec 18             	sub    esp,0x18
c001fca0:	68 bc d3 02 c0       	push   0xc002d3bc
c001fca5:	e8 ed a9 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001fcaa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fcaf:	31 d2                	xor    edx,edx
c001fcb1:	83 c4 1c             	add    esp,0x1c
c001fcb4:	c3                   	ret    

c001fcb5 <Vm::fpuGetLog102()>:
c001fcb5:	83 ec 18             	sub    esp,0x18
c001fcb8:	68 c9 d3 02 c0       	push   0xc002d3c9
c001fcbd:	e8 d5 a9 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001fcc2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fcc7:	31 d2                	xor    edx,edx
c001fcc9:	83 c4 1c             	add    esp,0x1c
c001fccc:	c3                   	ret    

c001fccd <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fccd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcd1:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fcd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcd9:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fcdd:	0f 92 c0             	setb   al
c001fce0:	c3                   	ret    

c001fce1 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fce1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce9:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fced:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001fcf1:	09 c2                	or     edx,eax
c001fcf3:	0f 94 c0             	sete   al
c001fcf6:	c3                   	ret    

c001fcf7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fcf7:	57                   	push   edi
c001fcf8:	56                   	push   esi
c001fcf9:	53                   	push   ebx
c001fcfa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fcfe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd02:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fd06:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fd0a:	57                   	push   edi
c001fd0b:	56                   	push   esi
c001fd0c:	53                   	push   ebx
c001fd0d:	51                   	push   ecx
c001fd0e:	e8 ce ff ff ff       	call   c001fce1 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	88 c2                	mov    dl,al
c001fd18:	31 c0                	xor    eax,eax
c001fd1a:	84 d2                	test   dl,dl
c001fd1c:	75 0c                	jne    c001fd2a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fd1e:	57                   	push   edi
c001fd1f:	56                   	push   esi
c001fd20:	53                   	push   ebx
c001fd21:	51                   	push   ecx
c001fd22:	e8 a6 ff ff ff       	call   c001fccd <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fd27:	83 c4 10             	add    esp,0x10
c001fd2a:	83 e0 01             	and    eax,0x1
c001fd2d:	5b                   	pop    ebx
c001fd2e:	88 c1                	mov    cl,al
c001fd30:	83 e2 01             	and    edx,0x1
c001fd33:	a0 81 27 03 c0       	mov    al,ds:0xc0032781
c001fd38:	c1 e2 06             	shl    edx,0x6
c001fd3b:	83 e0 ba             	and    eax,0xffffffba
c001fd3e:	5e                   	pop    esi
c001fd3f:	09 c8                	or     eax,ecx
c001fd41:	5f                   	pop    edi
c001fd42:	09 d0                	or     eax,edx
c001fd44:	a2 81 27 03 c0       	mov    ds:0xc0032781,al
c001fd49:	c3                   	ret    

c001fd4a <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001fd4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fd52:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001fd56:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001fd5a:	c3                   	ret    

c001fd5b <Vm::fpuAbs(unsigned long long)>:
c001fd5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd63:	c3                   	ret    

c001fd64 <Vm::fpuChs(unsigned long long)>:
c001fd64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd6c:	f7 d8                	neg    eax
c001fd6e:	83 d2 00             	adc    edx,0x0
c001fd71:	f7 da                	neg    edx
c001fd73:	c3                   	ret    

c001fd74 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001fd74:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001fd78:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001fd7d:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001fd81:	eb c7                	jmp    c001fd4a <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001fd83 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001fd83:	53                   	push   ebx
c001fd84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fd8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd90:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd94:	0f af ca             	imul   ecx,edx
c001fd97:	0f af d8             	imul   ebx,eax
c001fd9a:	f7 e2                	mul    edx
c001fd9c:	01 d9                	add    ecx,ebx
c001fd9e:	5b                   	pop    ebx
c001fd9f:	01 ca                	add    edx,ecx
c001fda1:	c3                   	ret    

c001fda2 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fda2:	83 ec 0c             	sub    esp,0xc
c001fda5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb5:	e8 ba 76 00 00       	call   c0027474 <__udivdi3>
c001fdba:	83 c4 1c             	add    esp,0x1c
c001fdbd:	c3                   	ret    

c001fdbe <Vm::fpuSquare(unsigned long long)>:
c001fdbe:	50                   	push   eax
c001fdbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fdc7:	52                   	push   edx
c001fdc8:	50                   	push   eax
c001fdc9:	52                   	push   edx
c001fdca:	50                   	push   eax
c001fdcb:	e8 b3 ff ff ff       	call   c001fd83 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdd0:	83 c4 14             	add    esp,0x14
c001fdd3:	c3                   	ret    

c001fdd4 <Vm::fpuGetReg(int)>:
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fddc:	76 10                	jbe    c001fdee <Vm::fpuGetReg(int)+0x1a>
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	68 d6 d3 02 c0       	push   0xc002d3d6
c001fde6:	e8 ac a8 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	a0 81 27 03 c0       	mov    al,ds:0xc0032781
c001fdf3:	b9 08 00 00 00       	mov    ecx,0x8
c001fdf8:	c0 e8 03             	shr    al,0x3
c001fdfb:	83 e0 07             	and    eax,0x7
c001fdfe:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fe02:	99                   	cdq    
c001fe03:	f7 f9                	idiv   ecx
c001fe05:	8b 04 d5 84 27 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd87c]
c001fe0c:	8b 14 d5 88 27 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd878]
c001fe13:	83 c4 0c             	add    esp,0xc
c001fe16:	c3                   	ret    

c001fe17 <Vm::fpuSetReg(int, unsigned long long)>:
c001fe17:	57                   	push   edi
c001fe18:	56                   	push   esi
c001fe19:	52                   	push   edx
c001fe1a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fe1e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fe22:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fe27:	76 10                	jbe    c001fe39 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fe29:	83 ec 0c             	sub    esp,0xc
c001fe2c:	68 e9 d3 02 c0       	push   0xc002d3e9
c001fe31:	e8 61 a8 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c001fe36:	83 c4 10             	add    esp,0x10
c001fe39:	a0 81 27 03 c0       	mov    al,ds:0xc0032781
c001fe3e:	b9 08 00 00 00       	mov    ecx,0x8
c001fe43:	c0 e8 03             	shr    al,0x3
c001fe46:	83 e0 07             	and    eax,0x7
c001fe49:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fe4d:	99                   	cdq    
c001fe4e:	f7 f9                	idiv   ecx
c001fe50:	89 34 d5 84 27 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd87c],esi
c001fe57:	89 3c d5 88 27 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd878],edi
c001fe5e:	58                   	pop    eax
c001fe5f:	5e                   	pop    esi
c001fe60:	5f                   	pop    edi
c001fe61:	c3                   	ret    

c001fe62 <Vm::fpuPush(unsigned long long)>:
c001fe62:	a0 81 27 03 c0       	mov    al,ds:0xc0032781
c001fe67:	c0 e8 03             	shr    al,0x3
c001fe6a:	83 e0 07             	and    eax,0x7
c001fe6d:	83 c0 07             	add    eax,0x7
c001fe70:	88 c2                	mov    dl,al
c001fe72:	83 e0 07             	and    eax,0x7
c001fe75:	83 e2 07             	and    edx,0x7
c001fe78:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fe7f:	8a 15 81 27 03 c0    	mov    dl,BYTE PTR ds:0xc0032781
c001fe85:	83 e2 c7             	and    edx,0xffffffc7
c001fe88:	09 ca                	or     edx,ecx
c001fe8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe8e:	88 15 81 27 03 c0    	mov    BYTE PTR ds:0xc0032781,dl
c001fe94:	89 0c c5 88 27 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd878],ecx
c001fe9b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fe9f:	89 14 c5 84 27 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd87c],edx
c001fea6:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001feab:	83 f8 08             	cmp    eax,0x8
c001feae:	75 08                	jne    c001feb8 <Vm::fpuPush(unsigned long long)+0x56>
c001feb0:	80 0d 80 27 03 c0 40 	or     BYTE PTR ds:0xc0032780,0x40
c001feb7:	c3                   	ret    
c001feb8:	40                   	inc    eax
c001feb9:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c001febe:	c3                   	ret    

c001febf <Vm::fpuPop()>:
c001febf:	8a 0d 81 27 03 c0    	mov    cl,BYTE PTR ds:0xc0032781
c001fec5:	53                   	push   ebx
c001fec6:	c0 e9 03             	shr    cl,0x3
c001fec9:	8a 1d 81 27 03 c0    	mov    bl,BYTE PTR ds:0xc0032781
c001fecf:	83 e1 07             	and    ecx,0x7
c001fed2:	83 e3 c7             	and    ebx,0xffffffc7
c001fed5:	8b 04 cd 84 27 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd87c]
c001fedc:	8b 14 cd 88 27 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd878]
c001fee3:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001feea:	83 e1 38             	and    ecx,0x38
c001feed:	09 d9                	or     ecx,ebx
c001feef:	88 0d 81 27 03 c0    	mov    BYTE PTR ds:0xc0032781,cl
c001fef5:	8b 0d c4 27 03 c0    	mov    ecx,DWORD PTR ds:0xc00327c4
c001fefb:	85 c9                	test   ecx,ecx
c001fefd:	74 09                	je     c001ff08 <Vm::fpuPop()+0x49>
c001feff:	49                   	dec    ecx
c001ff00:	89 0d c4 27 03 c0    	mov    DWORD PTR ds:0xc00327c4,ecx
c001ff06:	eb 07                	jmp    c001ff0f <Vm::fpuPop()+0x50>
c001ff08:	80 0d 80 27 03 c0 40 	or     BYTE PTR ds:0xc0032780,0x40
c001ff0f:	5b                   	pop    ebx
c001ff10:	c3                   	ret    

c001ff11 <Vm::x87Handler(regs*)>:
c001ff11:	55                   	push   ebp
c001ff12:	57                   	push   edi
c001ff13:	56                   	push   esi
c001ff14:	53                   	push   ebx
c001ff15:	83 ec 1c             	sub    esp,0x1c
c001ff18:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ff1c:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001ff21:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001ff24:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001ff2c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ff30:	50                   	push   eax
c001ff31:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001ff35:	50                   	push   eax
c001ff36:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ff3a:	50                   	push   eax
c001ff3b:	53                   	push   ebx
c001ff3c:	e8 23 9e ff ff       	call   c0019d64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ff41:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ff44:	83 c4 10             	add    esp,0x10
c001ff47:	89 c6                	mov    esi,eax
c001ff49:	80 fa d9             	cmp    dl,0xd9
c001ff4c:	0f 85 52 01 00 00    	jne    c00200a4 <Vm::x87Handler(regs*)+0x193>
c001ff52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff56:	8d 50 20             	lea    edx,[eax+0x20]
c001ff59:	80 fa 0e             	cmp    dl,0xe
c001ff5c:	0f 87 86 00 00 00    	ja     c001ffe8 <Vm::x87Handler(regs*)+0xd7>
c001ff62:	0f b6 d2             	movzx  edx,dl
c001ff65:	ff 24 95 fc d3 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2c04]
c001ff6c:	e8 e7 fc ff ff       	call   c001fc58 <Vm::fpuGet0()>
c001ff71:	eb 05                	jmp    c001ff78 <Vm::x87Handler(regs*)+0x67>
c001ff73:	e8 e5 fc ff ff       	call   c001fc5d <Vm::fpuGet1()>
c001ff78:	57                   	push   edi
c001ff79:	57                   	push   edi
c001ff7a:	52                   	push   edx
c001ff7b:	50                   	push   eax
c001ff7c:	e8 e1 fe ff ff       	call   c001fe62 <Vm::fpuPush(unsigned long long)>
c001ff81:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff85:	83 c4 10             	add    esp,0x10
c001ff88:	b0 01                	mov    al,0x1
c001ff8a:	e9 e3 09 00 00       	jmp    c0020972 <Vm::x87Handler(regs*)+0xa61>
c001ff8f:	83 ec 0c             	sub    esp,0xc
c001ff92:	6a 00                	push   0x0
c001ff94:	e8 3b fe ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c001ff99:	59                   	pop    ecx
c001ff9a:	5e                   	pop    esi
c001ff9b:	52                   	push   edx
c001ff9c:	50                   	push   eax
c001ff9d:	e8 c2 fd ff ff       	call   c001fd64 <Vm::fpuChs(unsigned long long)>
c001ffa2:	eb 13                	jmp    c001ffb7 <Vm::x87Handler(regs*)+0xa6>
c001ffa4:	83 ec 0c             	sub    esp,0xc
c001ffa7:	6a 00                	push   0x0
c001ffa9:	e8 26 fe ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c001ffae:	5f                   	pop    edi
c001ffaf:	5d                   	pop    ebp
c001ffb0:	52                   	push   edx
c001ffb1:	50                   	push   eax
c001ffb2:	e8 a4 fd ff ff       	call   c001fd5b <Vm::fpuAbs(unsigned long long)>
c001ffb7:	83 c4 0c             	add    esp,0xc
c001ffba:	52                   	push   edx
c001ffbb:	50                   	push   eax
c001ffbc:	6a 00                	push   0x0
c001ffbe:	e8 54 fe ff ff       	call   c001fe17 <Vm::fpuSetReg(int, unsigned long long)>
c001ffc3:	eb bc                	jmp    c001ff81 <Vm::x87Handler(regs*)+0x70>
c001ffc5:	e8 d3 fc ff ff       	call   c001fc9d <Vm::fpuGetLog210()>
c001ffca:	eb ac                	jmp    c001ff78 <Vm::x87Handler(regs*)+0x67>
c001ffcc:	e8 9c fc ff ff       	call   c001fc6d <Vm::fpuGetLog2E()>
c001ffd1:	eb a5                	jmp    c001ff78 <Vm::x87Handler(regs*)+0x67>
c001ffd3:	e8 8d fc ff ff       	call   c001fc65 <Vm::fpuGetPi()>
c001ffd8:	eb 9e                	jmp    c001ff78 <Vm::x87Handler(regs*)+0x67>
c001ffda:	e8 d6 fc ff ff       	call   c001fcb5 <Vm::fpuGetLog102()>
c001ffdf:	eb 97                	jmp    c001ff78 <Vm::x87Handler(regs*)+0x67>
c001ffe1:	e8 9f fc ff ff       	call   c001fc85 <Vm::fpuGetLogE2()>
c001ffe6:	eb 90                	jmp    c001ff78 <Vm::x87Handler(regs*)+0x67>
c001ffe8:	8d 50 40             	lea    edx,[eax+0x40]
c001ffeb:	80 fa 07             	cmp    dl,0x7
c001ffee:	77 15                	ja     c0020005 <Vm::x87Handler(regs*)+0xf4>
c001fff0:	83 ec 0c             	sub    esp,0xc
c001fff3:	2d c0 00 00 00       	sub    eax,0xc0
c001fff8:	50                   	push   eax
c001fff9:	e8 d6 fd ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c001fffe:	59                   	pop    ecx
c001ffff:	5e                   	pop    esi
c0020000:	e9 75 ff ff ff       	jmp    c001ff7a <Vm::x87Handler(regs*)+0x69>
c0020005:	8d 50 38             	lea    edx,[eax+0x38]
c0020008:	80 fa 07             	cmp    dl,0x7
c002000b:	77 3c                	ja     c0020049 <Vm::x87Handler(regs*)+0x138>
c002000d:	83 ec 0c             	sub    esp,0xc
c0020010:	2d c8 00 00 00       	sub    eax,0xc8
c0020015:	50                   	push   eax
c0020016:	e8 b9 fd ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002001b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020022:	89 c6                	mov    esi,eax
c0020024:	89 d7                	mov    edi,edx
c0020026:	e8 a9 fd ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002002b:	83 c4 0c             	add    esp,0xc
c002002e:	52                   	push   edx
c002002f:	50                   	push   eax
c0020030:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020034:	2d c8 00 00 00       	sub    eax,0xc8
c0020039:	50                   	push   eax
c002003a:	e8 d8 fd ff ff       	call   c001fe17 <Vm::fpuSetReg(int, unsigned long long)>
c002003f:	83 c4 0c             	add    esp,0xc
c0020042:	57                   	push   edi
c0020043:	56                   	push   esi
c0020044:	e9 73 ff ff ff       	jmp    c001ffbc <Vm::x87Handler(regs*)+0xab>
c0020049:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002004d:	84 d2                	test   dl,dl
c002004f:	75 0f                	jne    c0020060 <Vm::x87Handler(regs*)+0x14f>
c0020051:	83 ec 0c             	sub    esp,0xc
c0020054:	ff 36                	push   DWORD PTR [esi]
c0020056:	e8 c8 fa ff ff       	call   c001fb23 <Vm::fpu32ToInternal(unsigned int)>
c002005b:	e9 bf 00 00 00       	jmp    c002011f <Vm::x87Handler(regs*)+0x20e>
c0020060:	80 fa 03             	cmp    dl,0x3
c0020063:	75 13                	jne    c0020078 <Vm::x87Handler(regs*)+0x167>
c0020065:	e8 55 fe ff ff       	call   c001febf <Vm::fpuPop()>
c002006a:	55                   	push   ebp
c002006b:	55                   	push   ebp
c002006c:	52                   	push   edx
c002006d:	50                   	push   eax
c002006e:	e8 4c fa ff ff       	call   c001fabf <Vm::fpuInternalTo32(unsigned long long)>
c0020073:	e9 88 00 00 00       	jmp    c0020100 <Vm::x87Handler(regs*)+0x1ef>
c0020078:	80 fa 05             	cmp    dl,0x5
c002007b:	75 0e                	jne    c002008b <Vm::x87Handler(regs*)+0x17a>
c002007d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020080:	66 a3 82 27 03 c0    	mov    ds:0xc0032782,ax
c0020086:	e9 df 00 00 00       	jmp    c002016a <Vm::x87Handler(regs*)+0x259>
c002008b:	31 c0                	xor    eax,eax
c002008d:	80 fa 07             	cmp    dl,0x7
c0020090:	0f 85 dc 08 00 00    	jne    c0020972 <Vm::x87Handler(regs*)+0xa61>
c0020096:	66 a1 82 27 03 c0    	mov    ax,ds:0xc0032782
c002009c:	66 89 06             	mov    WORD PTR [esi],ax
c002009f:	e9 c6 00 00 00       	jmp    c002016a <Vm::x87Handler(regs*)+0x259>
c00200a4:	80 fa d8             	cmp    dl,0xd8
c00200a7:	0f 84 c9 00 00 00    	je     c0020176 <Vm::x87Handler(regs*)+0x265>
c00200ad:	80 fa dc             	cmp    dl,0xdc
c00200b0:	0f 84 0d 02 00 00    	je     c00202c3 <Vm::x87Handler(regs*)+0x3b2>
c00200b6:	80 fa de             	cmp    dl,0xde
c00200b9:	0f 84 cd 02 00 00    	je     c002038c <Vm::x87Handler(regs*)+0x47b>
c00200bf:	80 fa dd             	cmp    dl,0xdd
c00200c2:	0f 84 5f 04 00 00    	je     c0020527 <Vm::x87Handler(regs*)+0x616>
c00200c8:	80 fa da             	cmp    dl,0xda
c00200cb:	0f 84 24 05 00 00    	je     c00205f5 <Vm::x87Handler(regs*)+0x6e4>
c00200d1:	80 fa df             	cmp    dl,0xdf
c00200d4:	0f 84 68 05 00 00    	je     c0020642 <Vm::x87Handler(regs*)+0x731>
c00200da:	31 c0                	xor    eax,eax
c00200dc:	80 fa db             	cmp    dl,0xdb
c00200df:	0f 85 8d 08 00 00    	jne    c0020972 <Vm::x87Handler(regs*)+0xa61>
c00200e5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200e9:	80 fa 03             	cmp    dl,0x3
c00200ec:	0f 85 70 06 00 00    	jne    c0020762 <Vm::x87Handler(regs*)+0x851>
c00200f2:	e8 c8 fd ff ff       	call   c001febf <Vm::fpuPop()>
c00200f7:	55                   	push   ebp
c00200f8:	55                   	push   ebp
c00200f9:	52                   	push   edx
c00200fa:	50                   	push   eax
c00200fb:	e8 71 fa ff ff       	call   c001fb71 <Vm::fpuFloatToLong(unsigned long long)>
c0020100:	83 c4 10             	add    esp,0x10
c0020103:	89 06                	mov    DWORD PTR [esi],eax
c0020105:	eb 63                	jmp    c002016a <Vm::x87Handler(regs*)+0x259>
c0020107:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002010b:	84 d2                	test   dl,dl
c002010d:	0f 85 e6 05 00 00    	jne    c00206f9 <Vm::x87Handler(regs*)+0x7e8>
c0020113:	57                   	push   edi
c0020114:	57                   	push   edi
c0020115:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020118:	ff 36                	push   DWORD PTR [esi]
c002011a:	e8 49 fa ff ff       	call   c001fb68 <Vm::fpu64ToInternal(unsigned long long)>
c002011f:	5e                   	pop    esi
c0020120:	5f                   	pop    edi
c0020121:	52                   	push   edx
c0020122:	50                   	push   eax
c0020123:	e8 3a fd ff ff       	call   c001fe62 <Vm::fpuPush(unsigned long long)>
c0020128:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002012c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002012f:	e9 51 fe ff ff       	jmp    c001ff85 <Vm::x87Handler(regs*)+0x74>
c0020134:	80 fa 03             	cmp    dl,0x3
c0020137:	0f 85 d7 06 00 00    	jne    c0020814 <Vm::x87Handler(regs*)+0x903>
c002013d:	57                   	push   edi
c002013e:	57                   	push   edi
c002013f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020142:	ff 36                	push   DWORD PTR [esi]
c0020144:	e8 1f fa ff ff       	call   c001fb68 <Vm::fpu64ToInternal(unsigned long long)>
c0020149:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020150:	89 c6                	mov    esi,eax
c0020152:	89 d7                	mov    edi,edx
c0020154:	e8 7b fc ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020159:	57                   	push   edi
c002015a:	56                   	push   esi
c002015b:	52                   	push   edx
c002015c:	50                   	push   eax
c002015d:	e8 95 fb ff ff       	call   c001fcf7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020162:	83 c4 20             	add    esp,0x20
c0020165:	e8 55 fd ff ff       	call   c001febf <Vm::fpuPop()>
c002016a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002016e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020171:	e9 12 fe ff ff       	jmp    c001ff88 <Vm::x87Handler(regs*)+0x77>
c0020176:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002017a:	8d 50 40             	lea    edx,[eax+0x40]
c002017d:	80 fa 07             	cmp    dl,0x7
c0020180:	77 29                	ja     c00201ab <Vm::x87Handler(regs*)+0x29a>
c0020182:	83 ec 0c             	sub    esp,0xc
c0020185:	2d c0 00 00 00       	sub    eax,0xc0
c002018a:	50                   	push   eax
c002018b:	e8 44 fc ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020190:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020197:	89 c6                	mov    esi,eax
c0020199:	89 d7                	mov    edi,edx
c002019b:	e8 34 fc ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00201a0:	57                   	push   edi
c00201a1:	56                   	push   esi
c00201a2:	52                   	push   edx
c00201a3:	50                   	push   eax
c00201a4:	e8 a1 fb ff ff       	call   c001fd4a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201a9:	eb 2f                	jmp    c00201da <Vm::x87Handler(regs*)+0x2c9>
c00201ab:	8d 50 38             	lea    edx,[eax+0x38]
c00201ae:	80 fa 07             	cmp    dl,0x7
c00201b1:	77 2f                	ja     c00201e2 <Vm::x87Handler(regs*)+0x2d1>
c00201b3:	83 ec 0c             	sub    esp,0xc
c00201b6:	2d c8 00 00 00       	sub    eax,0xc8
c00201bb:	50                   	push   eax
c00201bc:	e8 13 fc ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00201c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201c8:	89 c6                	mov    esi,eax
c00201ca:	89 d7                	mov    edi,edx
c00201cc:	e8 03 fc ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00201d1:	57                   	push   edi
c00201d2:	56                   	push   esi
c00201d3:	52                   	push   edx
c00201d4:	50                   	push   eax
c00201d5:	e8 a9 fb ff ff       	call   c001fd83 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00201da:	83 c4 1c             	add    esp,0x1c
c00201dd:	e9 d8 fd ff ff       	jmp    c001ffba <Vm::x87Handler(regs*)+0xa9>
c00201e2:	8d 50 30             	lea    edx,[eax+0x30]
c00201e5:	80 fa 07             	cmp    dl,0x7
c00201e8:	77 0d                	ja     c00201f7 <Vm::x87Handler(regs*)+0x2e6>
c00201ea:	83 ec 0c             	sub    esp,0xc
c00201ed:	2d d0 00 00 00       	sub    eax,0xd0
c00201f2:	e9 99 03 00 00       	jmp    c0020590 <Vm::x87Handler(regs*)+0x67f>
c00201f7:	8d 50 28             	lea    edx,[eax+0x28]
c00201fa:	80 fa 07             	cmp    dl,0x7
c00201fd:	77 0d                	ja     c002020c <Vm::x87Handler(regs*)+0x2fb>
c00201ff:	83 ec 0c             	sub    esp,0xc
c0020202:	2d d8 00 00 00       	sub    eax,0xd8
c0020207:	e9 c0 03 00 00       	jmp    c00205cc <Vm::x87Handler(regs*)+0x6bb>
c002020c:	8d 50 20             	lea    edx,[eax+0x20]
c002020f:	80 fa 07             	cmp    dl,0x7
c0020212:	77 1b                	ja     c002022f <Vm::x87Handler(regs*)+0x31e>
c0020214:	83 ec 0c             	sub    esp,0xc
c0020217:	2d e0 00 00 00       	sub    eax,0xe0
c002021c:	50                   	push   eax
c002021d:	e8 b2 fb ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020222:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020229:	89 c6                	mov    esi,eax
c002022b:	89 d7                	mov    edi,edx
c002022d:	eb 22                	jmp    c0020251 <Vm::x87Handler(regs*)+0x340>
c002022f:	8d 50 18             	lea    edx,[eax+0x18]
c0020232:	80 fa 07             	cmp    dl,0x7
c0020235:	77 2d                	ja     c0020264 <Vm::x87Handler(regs*)+0x353>
c0020237:	83 ec 0c             	sub    esp,0xc
c002023a:	6a 00                	push   0x0
c002023c:	e8 93 fb ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020241:	89 c6                	mov    esi,eax
c0020243:	89 d7                	mov    edi,edx
c0020245:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020249:	2d e8 00 00 00       	sub    eax,0xe8
c002024e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020251:	e8 7e fb ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020256:	57                   	push   edi
c0020257:	56                   	push   esi
c0020258:	52                   	push   edx
c0020259:	50                   	push   eax
c002025a:	e8 15 fb ff ff       	call   c001fd74 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002025f:	e9 76 ff ff ff       	jmp    c00201da <Vm::x87Handler(regs*)+0x2c9>
c0020264:	8d 50 10             	lea    edx,[eax+0x10]
c0020267:	80 fa 07             	cmp    dl,0x7
c002026a:	77 1b                	ja     c0020287 <Vm::x87Handler(regs*)+0x376>
c002026c:	83 ec 0c             	sub    esp,0xc
c002026f:	2d f0 00 00 00       	sub    eax,0xf0
c0020274:	50                   	push   eax
c0020275:	e8 5a fb ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002027a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020281:	89 c6                	mov    esi,eax
c0020283:	89 d7                	mov    edi,edx
c0020285:	eb 22                	jmp    c00202a9 <Vm::x87Handler(regs*)+0x398>
c0020287:	3c f7                	cmp    al,0xf7
c0020289:	0f 86 d1 03 00 00    	jbe    c0020660 <Vm::x87Handler(regs*)+0x74f>
c002028f:	83 ec 0c             	sub    esp,0xc
c0020292:	6a 00                	push   0x0
c0020294:	e8 3b fb ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020299:	89 c6                	mov    esi,eax
c002029b:	89 d7                	mov    edi,edx
c002029d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202a1:	2d f8 00 00 00       	sub    eax,0xf8
c00202a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00202a9:	e8 26 fb ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00202ae:	57                   	push   edi
c00202af:	56                   	push   esi
c00202b0:	52                   	push   edx
c00202b1:	50                   	push   eax
c00202b2:	e8 eb fa ff ff       	call   c001fda2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202b7:	83 c4 1c             	add    esp,0x1c
c00202ba:	52                   	push   edx
c00202bb:	50                   	push   eax
c00202bc:	6a 00                	push   0x0
c00202be:	e9 51 02 00 00       	jmp    c0020514 <Vm::x87Handler(regs*)+0x603>
c00202c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202c7:	8d 50 40             	lea    edx,[eax+0x40]
c00202ca:	80 fa 07             	cmp    dl,0x7
c00202cd:	77 37                	ja     c0020306 <Vm::x87Handler(regs*)+0x3f5>
c00202cf:	83 ec 0c             	sub    esp,0xc
c00202d2:	2d c0 00 00 00       	sub    eax,0xc0
c00202d7:	50                   	push   eax
c00202d8:	e8 f7 fa ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00202dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202e4:	89 c6                	mov    esi,eax
c00202e6:	89 d7                	mov    edi,edx
c00202e8:	e8 e7 fa ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00202ed:	57                   	push   edi
c00202ee:	56                   	push   esi
c00202ef:	52                   	push   edx
c00202f0:	50                   	push   eax
c00202f1:	e8 54 fa ff ff       	call   c001fd4a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00202f6:	83 c4 1c             	add    esp,0x1c
c00202f9:	52                   	push   edx
c00202fa:	50                   	push   eax
c00202fb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202ff:	2d c0 00 00 00       	sub    eax,0xc0
c0020304:	eb 3d                	jmp    c0020343 <Vm::x87Handler(regs*)+0x432>
c0020306:	8d 50 38             	lea    edx,[eax+0x38]
c0020309:	80 fa 07             	cmp    dl,0x7
c002030c:	77 3b                	ja     c0020349 <Vm::x87Handler(regs*)+0x438>
c002030e:	83 ec 0c             	sub    esp,0xc
c0020311:	2d c8 00 00 00       	sub    eax,0xc8
c0020316:	50                   	push   eax
c0020317:	e8 b8 fa ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002031c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020323:	89 c6                	mov    esi,eax
c0020325:	89 d7                	mov    edi,edx
c0020327:	e8 a8 fa ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002032c:	57                   	push   edi
c002032d:	56                   	push   esi
c002032e:	52                   	push   edx
c002032f:	50                   	push   eax
c0020330:	e8 4e fa ff ff       	call   c001fd83 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020335:	83 c4 1c             	add    esp,0x1c
c0020338:	52                   	push   edx
c0020339:	50                   	push   eax
c002033a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002033e:	2d c8 00 00 00       	sub    eax,0xc8
c0020343:	50                   	push   eax
c0020344:	e9 75 fc ff ff       	jmp    c001ffbe <Vm::x87Handler(regs*)+0xad>
c0020349:	83 c0 18             	add    eax,0x18
c002034c:	3c 07                	cmp    al,0x7
c002034e:	0f 87 3b 04 00 00    	ja     c002078f <Vm::x87Handler(regs*)+0x87e>
c0020354:	83 ec 0c             	sub    esp,0xc
c0020357:	6a 00                	push   0x0
c0020359:	e8 76 fa ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002035e:	89 c6                	mov    esi,eax
c0020360:	89 d7                	mov    edi,edx
c0020362:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020366:	2d e8 00 00 00       	sub    eax,0xe8
c002036b:	89 04 24             	mov    DWORD PTR [esp],eax
c002036e:	e8 61 fa ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020373:	57                   	push   edi
c0020374:	56                   	push   esi
c0020375:	52                   	push   edx
c0020376:	50                   	push   eax
c0020377:	e8 f8 f9 ff ff       	call   c001fd74 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002037c:	83 c4 1c             	add    esp,0x1c
c002037f:	52                   	push   edx
c0020380:	50                   	push   eax
c0020381:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020385:	2d e8 00 00 00       	sub    eax,0xe8
c002038a:	eb b7                	jmp    c0020343 <Vm::x87Handler(regs*)+0x432>
c002038c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020390:	8d 50 40             	lea    edx,[eax+0x40]
c0020393:	80 fa 07             	cmp    dl,0x7
c0020396:	77 3a                	ja     c00203d2 <Vm::x87Handler(regs*)+0x4c1>
c0020398:	83 ec 0c             	sub    esp,0xc
c002039b:	2d c0 00 00 00       	sub    eax,0xc0
c00203a0:	50                   	push   eax
c00203a1:	e8 2e fa ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00203a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ad:	89 c6                	mov    esi,eax
c00203af:	89 d7                	mov    edi,edx
c00203b1:	e8 1e fa ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00203b6:	57                   	push   edi
c00203b7:	56                   	push   esi
c00203b8:	52                   	push   edx
c00203b9:	50                   	push   eax
c00203ba:	e8 8b f9 ff ff       	call   c001fd4a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203bf:	83 c4 1c             	add    esp,0x1c
c00203c2:	52                   	push   edx
c00203c3:	50                   	push   eax
c00203c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00203c8:	2d c0 00 00 00       	sub    eax,0xc0
c00203cd:	e9 9e 01 00 00       	jmp    c0020570 <Vm::x87Handler(regs*)+0x65f>
c00203d2:	8d 50 20             	lea    edx,[eax+0x20]
c00203d5:	80 fa 07             	cmp    dl,0x7
c00203d8:	77 3a                	ja     c0020414 <Vm::x87Handler(regs*)+0x503>
c00203da:	83 ec 0c             	sub    esp,0xc
c00203dd:	2d e0 00 00 00       	sub    eax,0xe0
c00203e2:	50                   	push   eax
c00203e3:	e8 ec f9 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00203e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ef:	89 c6                	mov    esi,eax
c00203f1:	89 d7                	mov    edi,edx
c00203f3:	e8 dc f9 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00203f8:	57                   	push   edi
c00203f9:	56                   	push   esi
c00203fa:	52                   	push   edx
c00203fb:	50                   	push   eax
c00203fc:	e8 73 f9 ff ff       	call   c001fd74 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020401:	83 c4 1c             	add    esp,0x1c
c0020404:	52                   	push   edx
c0020405:	50                   	push   eax
c0020406:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002040a:	2d e0 00 00 00       	sub    eax,0xe0
c002040f:	e9 5c 01 00 00       	jmp    c0020570 <Vm::x87Handler(regs*)+0x65f>
c0020414:	8d 50 18             	lea    edx,[eax+0x18]
c0020417:	80 fa 07             	cmp    dl,0x7
c002041a:	77 3b                	ja     c0020457 <Vm::x87Handler(regs*)+0x546>
c002041c:	83 ec 0c             	sub    esp,0xc
c002041f:	6a 00                	push   0x0
c0020421:	e8 ae f9 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020426:	89 c6                	mov    esi,eax
c0020428:	89 d7                	mov    edi,edx
c002042a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002042e:	2d e8 00 00 00       	sub    eax,0xe8
c0020433:	89 04 24             	mov    DWORD PTR [esp],eax
c0020436:	e8 99 f9 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002043b:	57                   	push   edi
c002043c:	56                   	push   esi
c002043d:	52                   	push   edx
c002043e:	50                   	push   eax
c002043f:	e8 30 f9 ff ff       	call   c001fd74 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020444:	83 c4 1c             	add    esp,0x1c
c0020447:	52                   	push   edx
c0020448:	50                   	push   eax
c0020449:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002044d:	2d e8 00 00 00       	sub    eax,0xe8
c0020452:	e9 19 01 00 00       	jmp    c0020570 <Vm::x87Handler(regs*)+0x65f>
c0020457:	8d 50 38             	lea    edx,[eax+0x38]
c002045a:	80 fa 07             	cmp    dl,0x7
c002045d:	77 37                	ja     c0020496 <Vm::x87Handler(regs*)+0x585>
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	2d c8 00 00 00       	sub    eax,0xc8
c0020467:	50                   	push   eax
c0020468:	e8 67 f9 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002046d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020474:	89 c6                	mov    esi,eax
c0020476:	89 d7                	mov    edi,edx
c0020478:	e8 57 f9 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002047d:	57                   	push   edi
c002047e:	56                   	push   esi
c002047f:	52                   	push   edx
c0020480:	50                   	push   eax
c0020481:	e8 fd f8 ff ff       	call   c001fd83 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020486:	83 c4 1c             	add    esp,0x1c
c0020489:	52                   	push   edx
c002048a:	50                   	push   eax
c002048b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002048f:	2d c8 00 00 00       	sub    eax,0xc8
c0020494:	eb 7d                	jmp    c0020513 <Vm::x87Handler(regs*)+0x602>
c0020496:	3c f7                	cmp    al,0xf7
c0020498:	76 38                	jbe    c00204d2 <Vm::x87Handler(regs*)+0x5c1>
c002049a:	83 ec 0c             	sub    esp,0xc
c002049d:	6a 00                	push   0x0
c002049f:	e8 30 f9 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00204a4:	89 c6                	mov    esi,eax
c00204a6:	89 d7                	mov    edi,edx
c00204a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204ac:	2d f8 00 00 00       	sub    eax,0xf8
c00204b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00204b4:	e8 1b f9 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00204b9:	57                   	push   edi
c00204ba:	56                   	push   esi
c00204bb:	52                   	push   edx
c00204bc:	50                   	push   eax
c00204bd:	e8 e0 f8 ff ff       	call   c001fda2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204c2:	83 c4 1c             	add    esp,0x1c
c00204c5:	52                   	push   edx
c00204c6:	50                   	push   eax
c00204c7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204cb:	2d f8 00 00 00       	sub    eax,0xf8
c00204d0:	eb 41                	jmp    c0020513 <Vm::x87Handler(regs*)+0x602>
c00204d2:	8d 50 10             	lea    edx,[eax+0x10]
c00204d5:	80 fa 07             	cmp    dl,0x7
c00204d8:	0f 87 5a 01 00 00    	ja     c0020638 <Vm::x87Handler(regs*)+0x727>
c00204de:	83 ec 0c             	sub    esp,0xc
c00204e1:	2d f0 00 00 00       	sub    eax,0xf0
c00204e6:	50                   	push   eax
c00204e7:	e8 e8 f8 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00204ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204f3:	89 c6                	mov    esi,eax
c00204f5:	89 d7                	mov    edi,edx
c00204f7:	e8 d8 f8 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00204fc:	57                   	push   edi
c00204fd:	56                   	push   esi
c00204fe:	52                   	push   edx
c00204ff:	50                   	push   eax
c0020500:	e8 9d f8 ff ff       	call   c001fda2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020505:	83 c4 1c             	add    esp,0x1c
c0020508:	52                   	push   edx
c0020509:	50                   	push   eax
c002050a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002050e:	2d f0 00 00 00       	sub    eax,0xf0
c0020513:	50                   	push   eax
c0020514:	e8 fe f8 ff ff       	call   c001fe17 <Vm::fpuSetReg(int, unsigned long long)>
c0020519:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002051d:	e8 9d f9 ff ff       	call   c001febf <Vm::fpuPop()>
c0020522:	e9 5e fa ff ff       	jmp    c001ff85 <Vm::x87Handler(regs*)+0x74>
c0020527:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002052b:	8d 50 30             	lea    edx,[eax+0x30]
c002052e:	80 fa 07             	cmp    dl,0x7
c0020531:	77 1d                	ja     c0020550 <Vm::x87Handler(regs*)+0x63f>
c0020533:	83 ec 0c             	sub    esp,0xc
c0020536:	6a 00                	push   0x0
c0020538:	e8 97 f8 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002053d:	83 c4 0c             	add    esp,0xc
c0020540:	52                   	push   edx
c0020541:	50                   	push   eax
c0020542:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020546:	2d d0 00 00 00       	sub    eax,0xd0
c002054b:	e9 f3 fd ff ff       	jmp    c0020343 <Vm::x87Handler(regs*)+0x432>
c0020550:	8d 50 28             	lea    edx,[eax+0x28]
c0020553:	80 fa 07             	cmp    dl,0x7
c0020556:	77 28                	ja     c0020580 <Vm::x87Handler(regs*)+0x66f>
c0020558:	83 ec 0c             	sub    esp,0xc
c002055b:	6a 00                	push   0x0
c002055d:	e8 72 f8 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020562:	83 c4 0c             	add    esp,0xc
c0020565:	52                   	push   edx
c0020566:	50                   	push   eax
c0020567:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002056b:	2d d8 00 00 00       	sub    eax,0xd8
c0020570:	50                   	push   eax
c0020571:	e8 a1 f8 ff ff       	call   c001fe17 <Vm::fpuSetReg(int, unsigned long long)>
c0020576:	e8 44 f9 ff ff       	call   c001febf <Vm::fpuPop()>
c002057b:	e9 01 fa ff ff       	jmp    c001ff81 <Vm::x87Handler(regs*)+0x70>
c0020580:	8d 50 20             	lea    edx,[eax+0x20]
c0020583:	80 fa 07             	cmp    dl,0x7
c0020586:	77 30                	ja     c00205b8 <Vm::x87Handler(regs*)+0x6a7>
c0020588:	83 ec 0c             	sub    esp,0xc
c002058b:	2d e0 00 00 00       	sub    eax,0xe0
c0020590:	50                   	push   eax
c0020591:	e8 3e f8 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020596:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002059d:	89 c6                	mov    esi,eax
c002059f:	89 d7                	mov    edi,edx
c00205a1:	e8 2e f8 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00205a6:	57                   	push   edi
c00205a7:	56                   	push   esi
c00205a8:	52                   	push   edx
c00205a9:	50                   	push   eax
c00205aa:	e8 48 f7 ff ff       	call   c001fcf7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00205af:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00205b3:	e9 54 02 00 00       	jmp    c002080c <Vm::x87Handler(regs*)+0x8fb>
c00205b8:	8d 50 18             	lea    edx,[eax+0x18]
c00205bb:	80 fa 07             	cmp    dl,0x7
c00205be:	0f 87 43 fb ff ff    	ja     c0020107 <Vm::x87Handler(regs*)+0x1f6>
c00205c4:	83 ec 0c             	sub    esp,0xc
c00205c7:	2d e8 00 00 00       	sub    eax,0xe8
c00205cc:	50                   	push   eax
c00205cd:	e8 02 f8 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00205d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205d9:	89 c6                	mov    esi,eax
c00205db:	89 d7                	mov    edi,edx
c00205dd:	e8 f2 f7 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00205e2:	57                   	push   edi
c00205e3:	56                   	push   esi
c00205e4:	52                   	push   edx
c00205e5:	50                   	push   eax
c00205e6:	e8 0c f7 ff ff       	call   c001fcf7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00205eb:	83 c4 20             	add    esp,0x20
c00205ee:	e8 cc f8 ff ff       	call   c001febf <Vm::fpuPop()>
c00205f3:	eb 62                	jmp    c0020657 <Vm::x87Handler(regs*)+0x746>
c00205f5:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00205f9:	0f 85 0f 01 00 00    	jne    c002070e <Vm::x87Handler(regs*)+0x7fd>
c00205ff:	83 ec 0c             	sub    esp,0xc
c0020602:	6a 01                	push   0x1
c0020604:	e8 cb f7 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020609:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020610:	89 c6                	mov    esi,eax
c0020612:	89 d7                	mov    edi,edx
c0020614:	e8 bb f7 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020619:	57                   	push   edi
c002061a:	56                   	push   esi
c002061b:	52                   	push   edx
c002061c:	50                   	push   eax
c002061d:	e8 d5 f6 ff ff       	call   c001fcf7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020622:	83 c4 20             	add    esp,0x20
c0020625:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020629:	e8 91 f8 ff ff       	call   c001febf <Vm::fpuPop()>
c002062e:	e8 8c f8 ff ff       	call   c001febf <Vm::fpuPop()>
c0020633:	e9 50 f9 ff ff       	jmp    c001ff88 <Vm::x87Handler(regs*)+0x77>
c0020638:	3c d9                	cmp    al,0xd9
c002063a:	0f 85 b5 02 00 00    	jne    c00208f5 <Vm::x87Handler(regs*)+0x9e4>
c0020640:	eb bd                	jmp    c00205ff <Vm::x87Handler(regs*)+0x6ee>
c0020642:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020646:	0f 85 ea 02 00 00    	jne    c0020936 <Vm::x87Handler(regs*)+0xa25>
c002064c:	0f b7 05 80 27 03 c0 	movzx  eax,WORD PTR ds:0xc0032780
c0020653:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020657:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002065b:	e9 28 f9 ff ff       	jmp    c001ff88 <Vm::x87Handler(regs*)+0x77>
c0020660:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020664:	84 d2                	test   dl,dl
c0020666:	75 0f                	jne    c0020677 <Vm::x87Handler(regs*)+0x766>
c0020668:	83 ec 0c             	sub    esp,0xc
c002066b:	ff 36                	push   DWORD PTR [esi]
c002066d:	e8 b1 f4 ff ff       	call   c001fb23 <Vm::fpu32ToInternal(unsigned int)>
c0020672:	e9 2c 01 00 00       	jmp    c00207a3 <Vm::x87Handler(regs*)+0x892>
c0020677:	80 fa 01             	cmp    dl,0x1
c002067a:	75 0f                	jne    c002068b <Vm::x87Handler(regs*)+0x77a>
c002067c:	83 ec 0c             	sub    esp,0xc
c002067f:	ff 36                	push   DWORD PTR [esi]
c0020681:	e8 9d f4 ff ff       	call   c001fb23 <Vm::fpu32ToInternal(unsigned int)>
c0020686:	e9 81 02 00 00       	jmp    c002090c <Vm::x87Handler(regs*)+0x9fb>
c002068b:	80 fa 04             	cmp    dl,0x4
c002068e:	75 0f                	jne    c002069f <Vm::x87Handler(regs*)+0x78e>
c0020690:	83 ec 0c             	sub    esp,0xc
c0020693:	ff 36                	push   DWORD PTR [esi]
c0020695:	e8 89 f4 ff ff       	call   c001fb23 <Vm::fpu32ToInternal(unsigned int)>
c002069a:	e9 86 01 00 00       	jmp    c0020825 <Vm::x87Handler(regs*)+0x914>
c002069f:	80 fa 05             	cmp    dl,0x5
c00206a2:	75 1b                	jne    c00206bf <Vm::x87Handler(regs*)+0x7ae>
c00206a4:	83 ec 0c             	sub    esp,0xc
c00206a7:	6a 00                	push   0x0
c00206a9:	e8 26 f7 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00206ae:	89 c7                	mov    edi,eax
c00206b0:	89 d5                	mov    ebp,edx
c00206b2:	58                   	pop    eax
c00206b3:	ff 36                	push   DWORD PTR [esi]
c00206b5:	e8 69 f4 ff ff       	call   c001fb23 <Vm::fpu32ToInternal(unsigned int)>
c00206ba:	e9 a3 01 00 00       	jmp    c0020862 <Vm::x87Handler(regs*)+0x951>
c00206bf:	80 fa 06             	cmp    dl,0x6
c00206c2:	75 0f                	jne    c00206d3 <Vm::x87Handler(regs*)+0x7c2>
c00206c4:	83 ec 0c             	sub    esp,0xc
c00206c7:	ff 36                	push   DWORD PTR [esi]
c00206c9:	e8 55 f4 ff ff       	call   c001fb23 <Vm::fpu32ToInternal(unsigned int)>
c00206ce:	e9 ae 01 00 00       	jmp    c0020881 <Vm::x87Handler(regs*)+0x970>
c00206d3:	31 c0                	xor    eax,eax
c00206d5:	80 fa 07             	cmp    dl,0x7
c00206d8:	0f 85 94 02 00 00    	jne    c0020972 <Vm::x87Handler(regs*)+0xa61>
c00206de:	83 ec 0c             	sub    esp,0xc
c00206e1:	6a 00                	push   0x0
c00206e3:	e8 ec f6 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00206e8:	89 c7                	mov    edi,eax
c00206ea:	89 d5                	mov    ebp,edx
c00206ec:	58                   	pop    eax
c00206ed:	ff 36                	push   DWORD PTR [esi]
c00206ef:	e8 2f f4 ff ff       	call   c001fb23 <Vm::fpu32ToInternal(unsigned int)>
c00206f4:	e9 cb 01 00 00       	jmp    c00208c4 <Vm::x87Handler(regs*)+0x9b3>
c00206f9:	80 fa 03             	cmp    dl,0x3
c00206fc:	0f 85 d3 01 00 00    	jne    c00208d5 <Vm::x87Handler(regs*)+0x9c4>
c0020702:	e8 b8 f7 ff ff       	call   c001febf <Vm::fpuPop()>
c0020707:	51                   	push   ecx
c0020708:	51                   	push   ecx
c0020709:	e9 de 01 00 00       	jmp    c00208ec <Vm::x87Handler(regs*)+0x9db>
c002070e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020712:	80 fa 01             	cmp    dl,0x1
c0020715:	75 09                	jne    c0020720 <Vm::x87Handler(regs*)+0x80f>
c0020717:	57                   	push   edi
c0020718:	57                   	push   edi
c0020719:	8b 06                	mov    eax,DWORD PTR [esi]
c002071b:	e9 e3 01 00 00       	jmp    c0020903 <Vm::x87Handler(regs*)+0x9f2>
c0020720:	80 fa 04             	cmp    dl,0x4
c0020723:	75 12                	jne    c0020737 <Vm::x87Handler(regs*)+0x826>
c0020725:	31 d2                	xor    edx,edx
c0020727:	51                   	push   ecx
c0020728:	51                   	push   ecx
c0020729:	8b 06                	mov    eax,DWORD PTR [esi]
c002072b:	52                   	push   edx
c002072c:	50                   	push   eax
c002072d:	e8 d0 f4 ff ff       	call   c001fc02 <Vm::fpuLongToFloat(long long)>
c0020732:	e9 ee 00 00 00       	jmp    c0020825 <Vm::x87Handler(regs*)+0x914>
c0020737:	31 c0                	xor    eax,eax
c0020739:	80 fa 07             	cmp    dl,0x7
c002073c:	0f 85 30 02 00 00    	jne    c0020972 <Vm::x87Handler(regs*)+0xa61>
c0020742:	83 ec 0c             	sub    esp,0xc
c0020745:	6a 00                	push   0x0
c0020747:	e8 88 f6 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002074c:	89 c7                	mov    edi,eax
c002074e:	89 d5                	mov    ebp,edx
c0020750:	58                   	pop    eax
c0020751:	8b 06                	mov    eax,DWORD PTR [esi]
c0020753:	5a                   	pop    edx
c0020754:	31 d2                	xor    edx,edx
c0020756:	52                   	push   edx
c0020757:	50                   	push   eax
c0020758:	e8 a5 f4 ff ff       	call   c001fc02 <Vm::fpuLongToFloat(long long)>
c002075d:	e9 62 01 00 00       	jmp    c00208c4 <Vm::x87Handler(regs*)+0x9b3>
c0020762:	84 d2                	test   dl,dl
c0020764:	75 0d                	jne    c0020773 <Vm::x87Handler(regs*)+0x862>
c0020766:	31 d2                	xor    edx,edx
c0020768:	55                   	push   ebp
c0020769:	55                   	push   ebp
c002076a:	8b 06                	mov    eax,DWORD PTR [esi]
c002076c:	52                   	push   edx
c002076d:	50                   	push   eax
c002076e:	e9 d3 01 00 00       	jmp    c0020946 <Vm::x87Handler(regs*)+0xa35>
c0020773:	31 c0                	xor    eax,eax
c0020775:	80 fa 02             	cmp    dl,0x2
c0020778:	0f 85 f4 01 00 00    	jne    c0020972 <Vm::x87Handler(regs*)+0xa61>
c002077e:	83 ec 0c             	sub    esp,0xc
c0020781:	6a 00                	push   0x0
c0020783:	e8 4c f6 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020788:	59                   	pop    ecx
c0020789:	5f                   	pop    edi
c002078a:	e9 6a f9 ff ff       	jmp    c00200f9 <Vm::x87Handler(regs*)+0x1e8>
c002078f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020793:	84 d2                	test   dl,dl
c0020795:	75 2a                	jne    c00207c1 <Vm::x87Handler(regs*)+0x8b0>
c0020797:	50                   	push   eax
c0020798:	50                   	push   eax
c0020799:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002079c:	ff 36                	push   DWORD PTR [esi]
c002079e:	e8 c5 f3 ff ff       	call   c001fb68 <Vm::fpu64ToInternal(unsigned long long)>
c00207a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207aa:	89 c6                	mov    esi,eax
c00207ac:	89 d7                	mov    edi,edx
c00207ae:	e8 21 f6 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00207b3:	57                   	push   edi
c00207b4:	56                   	push   esi
c00207b5:	52                   	push   edx
c00207b6:	50                   	push   eax
c00207b7:	e8 8e f5 ff ff       	call   c001fd4a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00207bc:	e9 64 01 00 00       	jmp    c0020925 <Vm::x87Handler(regs*)+0xa14>
c00207c1:	80 fa 01             	cmp    dl,0x1
c00207c4:	75 11                	jne    c00207d7 <Vm::x87Handler(regs*)+0x8c6>
c00207c6:	50                   	push   eax
c00207c7:	50                   	push   eax
c00207c8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00207cb:	ff 36                	push   DWORD PTR [esi]
c00207cd:	e8 96 f3 ff ff       	call   c001fb68 <Vm::fpu64ToInternal(unsigned long long)>
c00207d2:	e9 35 01 00 00       	jmp    c002090c <Vm::x87Handler(regs*)+0x9fb>
c00207d7:	80 fa 02             	cmp    dl,0x2
c00207da:	0f 85 54 f9 ff ff    	jne    c0020134 <Vm::x87Handler(regs*)+0x223>
c00207e0:	55                   	push   ebp
c00207e1:	55                   	push   ebp
c00207e2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00207e5:	ff 36                	push   DWORD PTR [esi]
c00207e7:	e8 7c f3 ff ff       	call   c001fb68 <Vm::fpu64ToInternal(unsigned long long)>
c00207ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207f3:	89 c6                	mov    esi,eax
c00207f5:	89 d7                	mov    edi,edx
c00207f7:	e8 d8 f5 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00207fc:	57                   	push   edi
c00207fd:	56                   	push   esi
c00207fe:	52                   	push   edx
c00207ff:	50                   	push   eax
c0020800:	e8 f2 f4 ff ff       	call   c001fcf7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020805:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020809:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002080c:	83 c4 20             	add    esp,0x20
c002080f:	e9 74 f7 ff ff       	jmp    c001ff88 <Vm::x87Handler(regs*)+0x77>
c0020814:	80 fa 04             	cmp    dl,0x4
c0020817:	75 2a                	jne    c0020843 <Vm::x87Handler(regs*)+0x932>
c0020819:	51                   	push   ecx
c002081a:	51                   	push   ecx
c002081b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002081e:	ff 36                	push   DWORD PTR [esi]
c0020820:	e8 43 f3 ff ff       	call   c001fb68 <Vm::fpu64ToInternal(unsigned long long)>
c0020825:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002082c:	89 c6                	mov    esi,eax
c002082e:	89 d7                	mov    edi,edx
c0020830:	e8 9f f5 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020835:	57                   	push   edi
c0020836:	56                   	push   esi
c0020837:	52                   	push   edx
c0020838:	50                   	push   eax
c0020839:	e8 36 f5 ff ff       	call   c001fd74 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002083e:	e9 e2 00 00 00       	jmp    c0020925 <Vm::x87Handler(regs*)+0xa14>
c0020843:	80 fa 05             	cmp    dl,0x5
c0020846:	75 28                	jne    c0020870 <Vm::x87Handler(regs*)+0x95f>
c0020848:	83 ec 0c             	sub    esp,0xc
c002084b:	6a 00                	push   0x0
c002084d:	e8 82 f5 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020852:	89 c7                	mov    edi,eax
c0020854:	89 d5                	mov    ebp,edx
c0020856:	58                   	pop    eax
c0020857:	5a                   	pop    edx
c0020858:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002085b:	ff 36                	push   DWORD PTR [esi]
c002085d:	e8 06 f3 ff ff       	call   c001fb68 <Vm::fpu64ToInternal(unsigned long long)>
c0020862:	83 c4 10             	add    esp,0x10
c0020865:	55                   	push   ebp
c0020866:	57                   	push   edi
c0020867:	52                   	push   edx
c0020868:	50                   	push   eax
c0020869:	e8 06 f5 ff ff       	call   c001fd74 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002086e:	eb 60                	jmp    c00208d0 <Vm::x87Handler(regs*)+0x9bf>
c0020870:	80 fa 06             	cmp    dl,0x6
c0020873:	75 2a                	jne    c002089f <Vm::x87Handler(regs*)+0x98e>
c0020875:	51                   	push   ecx
c0020876:	51                   	push   ecx
c0020877:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002087a:	ff 36                	push   DWORD PTR [esi]
c002087c:	e8 e7 f2 ff ff       	call   c001fb68 <Vm::fpu64ToInternal(unsigned long long)>
c0020881:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020888:	89 c6                	mov    esi,eax
c002088a:	89 d7                	mov    edi,edx
c002088c:	e8 43 f5 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c0020891:	57                   	push   edi
c0020892:	56                   	push   esi
c0020893:	52                   	push   edx
c0020894:	50                   	push   eax
c0020895:	e8 08 f5 ff ff       	call   c001fda2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002089a:	e9 86 00 00 00       	jmp    c0020925 <Vm::x87Handler(regs*)+0xa14>
c002089f:	31 c0                	xor    eax,eax
c00208a1:	80 fa 07             	cmp    dl,0x7
c00208a4:	0f 85 c8 00 00 00    	jne    c0020972 <Vm::x87Handler(regs*)+0xa61>
c00208aa:	83 ec 0c             	sub    esp,0xc
c00208ad:	6a 00                	push   0x0
c00208af:	e8 20 f5 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00208b4:	89 c7                	mov    edi,eax
c00208b6:	89 d5                	mov    ebp,edx
c00208b8:	58                   	pop    eax
c00208b9:	5a                   	pop    edx
c00208ba:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00208bd:	ff 36                	push   DWORD PTR [esi]
c00208bf:	e8 a4 f2 ff ff       	call   c001fb68 <Vm::fpu64ToInternal(unsigned long long)>
c00208c4:	83 c4 10             	add    esp,0x10
c00208c7:	55                   	push   ebp
c00208c8:	57                   	push   edi
c00208c9:	52                   	push   edx
c00208ca:	50                   	push   eax
c00208cb:	e8 d2 f4 ff ff       	call   c001fda2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00208d0:	83 c4 0c             	add    esp,0xc
c00208d3:	eb 53                	jmp    c0020928 <Vm::x87Handler(regs*)+0xa17>
c00208d5:	31 c0                	xor    eax,eax
c00208d7:	80 fa 02             	cmp    dl,0x2
c00208da:	0f 85 92 00 00 00    	jne    c0020972 <Vm::x87Handler(regs*)+0xa61>
c00208e0:	83 ec 0c             	sub    esp,0xc
c00208e3:	6a 00                	push   0x0
c00208e5:	e8 ea f4 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c00208ea:	59                   	pop    ecx
c00208eb:	5f                   	pop    edi
c00208ec:	52                   	push   edx
c00208ed:	50                   	push   eax
c00208ee:	e8 27 f2 ff ff       	call   c001fb1a <Vm::fpuInternalTo64(unsigned long long)>
c00208f3:	eb 70                	jmp    c0020965 <Vm::x87Handler(regs*)+0xa54>
c00208f5:	31 c0                	xor    eax,eax
c00208f7:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00208fc:	75 74                	jne    c0020972 <Vm::x87Handler(regs*)+0xa61>
c00208fe:	50                   	push   eax
c00208ff:	50                   	push   eax
c0020900:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020903:	31 d2                	xor    edx,edx
c0020905:	52                   	push   edx
c0020906:	50                   	push   eax
c0020907:	e8 f6 f2 ff ff       	call   c001fc02 <Vm::fpuLongToFloat(long long)>
c002090c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020913:	89 c6                	mov    esi,eax
c0020915:	89 d7                	mov    edi,edx
c0020917:	e8 b8 f4 ff ff       	call   c001fdd4 <Vm::fpuGetReg(int)>
c002091c:	57                   	push   edi
c002091d:	56                   	push   esi
c002091e:	52                   	push   edx
c002091f:	50                   	push   eax
c0020920:	e8 5e f4 ff ff       	call   c001fd83 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020925:	83 c4 1c             	add    esp,0x1c
c0020928:	52                   	push   edx
c0020929:	50                   	push   eax
c002092a:	6a 00                	push   0x0
c002092c:	e8 e6 f4 ff ff       	call   c001fe17 <Vm::fpuSetReg(int, unsigned long long)>
c0020931:	e9 f2 f7 ff ff       	jmp    c0020128 <Vm::x87Handler(regs*)+0x217>
c0020936:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002093a:	80 fa 05             	cmp    dl,0x5
c002093d:	75 11                	jne    c0020950 <Vm::x87Handler(regs*)+0xa3f>
c002093f:	55                   	push   ebp
c0020940:	55                   	push   ebp
c0020941:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020944:	ff 36                	push   DWORD PTR [esi]
c0020946:	e8 81 f2 ff ff       	call   c001fbcc <Vm::fpuULongToFloat(unsigned long long)>
c002094b:	e9 cf f7 ff ff       	jmp    c002011f <Vm::x87Handler(regs*)+0x20e>
c0020950:	31 c0                	xor    eax,eax
c0020952:	80 fa 07             	cmp    dl,0x7
c0020955:	75 1b                	jne    c0020972 <Vm::x87Handler(regs*)+0xa61>
c0020957:	e8 63 f5 ff ff       	call   c001febf <Vm::fpuPop()>
c002095c:	51                   	push   ecx
c002095d:	51                   	push   ecx
c002095e:	52                   	push   edx
c002095f:	50                   	push   eax
c0020960:	e8 0c f2 ff ff       	call   c001fb71 <Vm::fpuFloatToLong(unsigned long long)>
c0020965:	83 c4 10             	add    esp,0x10
c0020968:	89 06                	mov    DWORD PTR [esi],eax
c002096a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002096d:	e9 f8 f7 ff ff       	jmp    c002016a <Vm::x87Handler(regs*)+0x259>
c0020972:	83 c4 1c             	add    esp,0x1c
c0020975:	5b                   	pop    ebx
c0020976:	5e                   	pop    esi
c0020977:	5f                   	pop    edi
c0020978:	5d                   	pop    ebp
c0020979:	c3                   	ret    

c002097a <__static_initialization_and_destruction_0(int, int)>:
c002097a:	83 ec 0c             	sub    esp,0xc
c002097d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020982:	75 1a                	jne    c002099e <__static_initialization_and_destruction_0(int, int)+0x24>
c0020984:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002098c:	75 10                	jne    c002099e <__static_initialization_and_destruction_0(int, int)+0x24>
c002098e:	83 ec 0c             	sub    esp,0xc
c0020991:	68 80 27 03 c0       	push   0xc0032780
c0020996:	e8 21 8f 00 00       	call   c00298bc <Vm::_FPUState::_FPUState()>
c002099b:	83 c4 10             	add    esp,0x10
c002099e:	90                   	nop
c002099f:	83 c4 0c             	add    esp,0xc
c00209a2:	c3                   	ret    

c00209a3 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00209a3:	83 ec 0c             	sub    esp,0xc
c00209a6:	83 ec 08             	sub    esp,0x8
c00209a9:	68 ff ff 00 00       	push   0xffff
c00209ae:	6a 01                	push   0x1
c00209b0:	e8 c5 ff ff ff       	call   c002097a <__static_initialization_and_destruction_0(int, int)>
c00209b5:	83 c4 10             	add    esp,0x10
c00209b8:	83 c4 0c             	add    esp,0xc
c00209bb:	c3                   	ret    

c00209bc <FAT::getName()>:
c00209bc:	b8 38 d4 02 c0       	mov    eax,0xc002d438
c00209c1:	c3                   	ret    

c00209c2 <FAT::tell(void*, unsigned long long*)>:
c00209c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00209c7:	75 06                	jne    c00209cf <FAT::tell(void*, unsigned long long*)+0xd>
c00209c9:	b8 04 00 00 00       	mov    eax,0x4
c00209ce:	c3                   	ret    
c00209cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00209d4:	75 06                	jne    c00209dc <FAT::tell(void*, unsigned long long*)+0x1a>
c00209d6:	b8 04 00 00 00       	mov    eax,0x4
c00209db:	c3                   	ret    
c00209dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209e0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00209e3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00209e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00209ea:	89 01                	mov    DWORD PTR [ecx],eax
c00209ec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00209ef:	b8 00 00 00 00       	mov    eax,0x0
c00209f4:	c3                   	ret    
c00209f5:	90                   	nop

c00209f6 <FAT::stat(void*, unsigned long long*)>:
c00209f6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00209fb:	75 06                	jne    c0020a03 <FAT::stat(void*, unsigned long long*)+0xd>
c00209fd:	b8 04 00 00 00       	mov    eax,0x4
c0020a02:	c3                   	ret    
c0020a03:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020a08:	75 06                	jne    c0020a10 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020a0a:	b8 04 00 00 00       	mov    eax,0x4
c0020a0f:	c3                   	ret    
c0020a10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a14:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020a17:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020a1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020a1e:	89 01                	mov    DWORD PTR [ecx],eax
c0020a20:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020a23:	b8 00 00 00 00       	mov    eax,0x0
c0020a28:	c3                   	ret    
c0020a29:	90                   	nop

c0020a2a <FAT::~FAT()>:
c0020a2a:	83 ec 0c             	sub    esp,0xc
c0020a2d:	ba c8 d4 02 c0       	mov    edx,0xc002d4c8
c0020a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a36:	89 10                	mov    DWORD PTR [eax],edx
c0020a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a3c:	83 ec 0c             	sub    esp,0xc
c0020a3f:	50                   	push   eax
c0020a40:	e8 f1 23 ff ff       	call   c0012e36 <Filesystem::~Filesystem()>
c0020a45:	83 c4 10             	add    esp,0x10
c0020a48:	90                   	nop
c0020a49:	83 c4 0c             	add    esp,0xc
c0020a4c:	c3                   	ret    
c0020a4d:	90                   	nop

c0020a4e <FAT::~FAT()>:
c0020a4e:	83 ec 0c             	sub    esp,0xc
c0020a51:	83 ec 0c             	sub    esp,0xc
c0020a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a58:	e8 cd ff ff ff       	call   c0020a2a <FAT::~FAT()>
c0020a5d:	83 c4 10             	add    esp,0x10
c0020a60:	83 ec 08             	sub    esp,0x8
c0020a63:	6a 08                	push   0x8
c0020a65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a69:	e8 b9 1f ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0020a6e:	83 c4 10             	add    esp,0x10
c0020a71:	83 c4 0c             	add    esp,0xc
c0020a74:	c3                   	ret    
c0020a75:	90                   	nop

c0020a76 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020a76:	83 ec 1c             	sub    esp,0x1c
c0020a79:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020a80:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020a85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020a89:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0020a90:	83 f8 ff             	cmp    eax,0xffffffff
c0020a93:	75 34                	jne    c0020ac9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020a95:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020a99:	88 c2                	mov    dl,al
c0020a9b:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0020aa0:	01 d0                	add    eax,edx
c0020aa2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020aa6:	8b 15 e0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327e0
c0020aac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ab0:	89 14 85 00 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd800],edx
c0020ab7:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0020abc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020ac0:	89 14 85 80 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd780],edx
c0020ac7:	eb 17                	jmp    c0020ae0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020ac9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020acd:	88 c2                	mov    dl,al
c0020acf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ad3:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0020ada:	01 d0                	add    eax,edx
c0020adc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020ae0:	83 ec 04             	sub    esp,0x4
c0020ae3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020aeb:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020aef:	50                   	push   eax
c0020af0:	e8 09 62 fe ff       	call   c0006cfe <f_getlabel>
c0020af5:	83 c4 10             	add    esp,0x10
c0020af8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020afc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020b01:	75 07                	jne    c0020b0a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020b03:	b8 00 00 00 00       	mov    eax,0x0
c0020b08:	eb 05                	jmp    c0020b0f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020b0a:	b8 01 00 00 00       	mov    eax,0x1
c0020b0f:	83 c4 1c             	add    esp,0x1c
c0020b12:	c3                   	ret    
c0020b13:	90                   	nop

c0020b14 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020b14:	57                   	push   edi
c0020b15:	83 ec 58             	sub    esp,0x58
c0020b18:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020b20:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020b24:	b9 0f 00 00 00       	mov    ecx,0xf
c0020b29:	b8 00 00 00 00       	mov    eax,0x0
c0020b2e:	fc                   	cld    
c0020b2f:	89 d7                	mov    edi,edx
c0020b31:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020b33:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020b37:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0020b3e:	83 f8 ff             	cmp    eax,0xffffffff
c0020b41:	75 34                	jne    c0020b77 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020b43:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b47:	88 c2                	mov    dl,al
c0020b49:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0020b4e:	01 d0                	add    eax,edx
c0020b50:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020b54:	8b 15 e0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327e0
c0020b5a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020b5e:	89 14 85 00 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd800],edx
c0020b65:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0020b6a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020b6e:	89 14 85 80 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd780],edx
c0020b75:	eb 17                	jmp    c0020b8e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020b77:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b7b:	88 c2                	mov    dl,al
c0020b7d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020b81:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0020b88:	01 d0                	add    eax,edx
c0020b8a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020b8e:	83 ec 08             	sub    esp,0x8
c0020b91:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020b95:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b99:	50                   	push   eax
c0020b9a:	e8 ad fd fd ff       	call   c000094c <strcat>
c0020b9f:	83 c4 10             	add    esp,0x10
c0020ba2:	83 ec 0c             	sub    esp,0xc
c0020ba5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ba9:	50                   	push   eax
c0020baa:	e8 3d 63 fe ff       	call   c0006eec <f_setlabel>
c0020baf:	83 c4 10             	add    esp,0x10
c0020bb2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020bb6:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020bbb:	75 07                	jne    c0020bc4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020bbd:	b8 00 00 00 00       	mov    eax,0x0
c0020bc2:	eb 05                	jmp    c0020bc9 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020bc4:	b8 01 00 00 00       	mov    eax,0x1
c0020bc9:	83 c4 58             	add    esp,0x58
c0020bcc:	5f                   	pop    edi
c0020bcd:	c3                   	ret    

c0020bce <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020bce:	83 ec 2c             	sub    esp,0x2c
c0020bd1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020bd9:	83 ec 08             	sub    esp,0x8
c0020bdc:	68 5c d4 02 c0       	push   0xc002d45c
c0020be1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020be5:	e8 ae fc fd ff       	call   c0000898 <strcmp>
c0020bea:	83 c4 10             	add    esp,0x10
c0020bed:	85 c0                	test   eax,eax
c0020bef:	0f 94 c0             	sete   al
c0020bf2:	84 c0                	test   al,al
c0020bf4:	74 0d                	je     c0020c03 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020bf6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020bfe:	e9 a6 00 00 00       	jmp    c0020ca9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020c03:	83 ec 08             	sub    esp,0x8
c0020c06:	68 4e d4 02 c0       	push   0xc002d44e
c0020c0b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020c0f:	e8 84 fc fd ff       	call   c0000898 <strcmp>
c0020c14:	83 c4 10             	add    esp,0x10
c0020c17:	85 c0                	test   eax,eax
c0020c19:	0f 94 c0             	sete   al
c0020c1c:	84 c0                	test   al,al
c0020c1e:	74 0a                	je     c0020c2a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020c20:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020c28:	eb 7f                	jmp    c0020ca9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020c2a:	83 ec 08             	sub    esp,0x8
c0020c2d:	68 54 d4 02 c0       	push   0xc002d454
c0020c32:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020c36:	e8 5d fc fd ff       	call   c0000898 <strcmp>
c0020c3b:	83 c4 10             	add    esp,0x10
c0020c3e:	85 c0                	test   eax,eax
c0020c40:	0f 94 c0             	sete   al
c0020c43:	84 c0                	test   al,al
c0020c45:	74 0a                	je     c0020c51 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020c47:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020c4f:	eb 58                	jmp    c0020ca9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020c51:	83 ec 08             	sub    esp,0x8
c0020c54:	68 2c a0 02 c0       	push   0xc002a02c
c0020c59:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020c5d:	e8 36 fc fd ff       	call   c0000898 <strcmp>
c0020c62:	83 c4 10             	add    esp,0x10
c0020c65:	85 c0                	test   eax,eax
c0020c67:	0f 94 c0             	sete   al
c0020c6a:	84 c0                	test   al,al
c0020c6c:	74 0a                	je     c0020c78 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020c6e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020c76:	eb 31                	jmp    c0020ca9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020c78:	83 ec 08             	sub    esp,0x8
c0020c7b:	68 5a d4 02 c0       	push   0xc002d45a
c0020c80:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020c84:	e8 0f fc fd ff       	call   c0000898 <strcmp>
c0020c89:	83 c4 10             	add    esp,0x10
c0020c8c:	85 c0                	test   eax,eax
c0020c8e:	0f 94 c0             	sete   al
c0020c91:	84 c0                	test   al,al
c0020c93:	74 0a                	je     c0020c9f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020c95:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020c9d:	eb 0a                	jmp    c0020ca9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020c9f:	b8 08 00 00 00       	mov    eax,0x8
c0020ca4:	e9 04 01 00 00       	jmp    c0020dad <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020ca9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020cb0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020cb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020cb9:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0020cc0:	83 f8 ff             	cmp    eax,0xffffffff
c0020cc3:	75 34                	jne    c0020cf9 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020cc5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020cc9:	88 c2                	mov    dl,al
c0020ccb:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0020cd0:	01 d0                	add    eax,edx
c0020cd2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020cd6:	8b 15 e0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327e0
c0020cdc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ce0:	89 14 85 00 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd800],edx
c0020ce7:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0020cec:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020cf0:	89 14 85 80 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd780],edx
c0020cf7:	eb 17                	jmp    c0020d10 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020cf9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020cfd:	88 c2                	mov    dl,al
c0020cff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d03:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0020d0a:	01 d0                	add    eax,edx
c0020d0c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d14:	88 04 24             	mov    BYTE PTR [esp],al
c0020d17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020d1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d1f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020d27:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020d2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020d34:	83 ec 0c             	sub    esp,0xc
c0020d37:	68 00 20 00 00       	push   0x2000
c0020d3c:	e8 4b eb fe ff       	call   c000f88c <malloc>
c0020d41:	83 c4 10             	add    esp,0x10
c0020d44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d48:	68 00 20 00 00       	push   0x2000
c0020d4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d51:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d55:	50                   	push   eax
c0020d56:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020d5a:	50                   	push   eax
c0020d5b:	e8 d7 65 fe ff       	call   c0007337 <f_mkfs>
c0020d60:	83 c4 10             	add    esp,0x10
c0020d63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020d67:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020d6c:	75 07                	jne    c0020d75 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020d6e:	b8 00 00 00 00       	mov    eax,0x0
c0020d73:	eb 38                	jmp    c0020dad <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020d75:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020d7a:	75 17                	jne    c0020d93 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020d7c:	83 ec 0c             	sub    esp,0xc
c0020d7f:	68 98 d4 02 c0       	push   0xc002d498
c0020d84:	e8 7e 1d ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0020d89:	83 c4 10             	add    esp,0x10
c0020d8c:	b8 09 00 00 00       	mov    eax,0x9
c0020d91:	eb 1a                	jmp    c0020dad <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020d93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d97:	83 ec 08             	sub    esp,0x8
c0020d9a:	50                   	push   eax
c0020d9b:	68 60 d4 02 c0       	push   0xc002d460
c0020da0:	e8 62 1d ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0020da5:	83 c4 10             	add    esp,0x10
c0020da8:	b8 01 00 00 00       	mov    eax,0x1
c0020dad:	83 c4 2c             	add    esp,0x2c
c0020db0:	c3                   	ret    
c0020db1:	90                   	nop

c0020db2 <FAT::tryMount(LogicalDisk*, int)>:
c0020db2:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020db8:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0020dbd:	83 f8 14             	cmp    eax,0x14
c0020dc0:	75 17                	jne    c0020dd9 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020dc2:	83 ec 0c             	sub    esp,0xc
c0020dc5:	68 72 d4 02 c0       	push   0xc002d472
c0020dca:	e8 c8 98 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0020dcf:	83 c4 10             	add    esp,0x10
c0020dd2:	b0 00                	mov    al,0x0
c0020dd4:	e9 d7 01 00 00       	jmp    c0020fb0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020dd9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020de0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020de6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020dec:	3d 00 02 00 00       	cmp    eax,0x200
c0020df1:	74 07                	je     c0020dfa <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020df3:	b0 00                	mov    al,0x0
c0020df5:	e9 b6 01 00 00       	jmp    c0020fb0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020dfa:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020e02:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020e09:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0020e10:	83 f8 ff             	cmp    eax,0xffffffff
c0020e13:	74 07                	je     c0020e1c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020e15:	b0 01                	mov    al,0x1
c0020e17:	e9 94 01 00 00       	jmp    c0020fb0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020e1c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020e26:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020e2e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020e35:	88 c2                	mov    dl,al
c0020e37:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0020e3c:	01 d0                	add    eax,edx
c0020e3e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020e45:	8b 15 e0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327e0
c0020e4b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020e52:	89 14 85 00 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd800],edx
c0020e59:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0020e5e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020e65:	89 14 85 80 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd780],edx
c0020e6c:	83 ec 0c             	sub    esp,0xc
c0020e6f:	68 54 02 00 00       	push   0x254
c0020e74:	e8 13 ea fe ff       	call   c000f88c <malloc>
c0020e79:	83 c4 10             	add    esp,0x10
c0020e7c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020e83:	83 ec 04             	sub    esp,0x4
c0020e86:	6a 00                	push   0x0
c0020e88:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020e8f:	50                   	push   eax
c0020e90:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020e97:	e8 59 40 fe ff       	call   c0004ef5 <f_mount>
c0020e9c:	83 c4 10             	add    esp,0x10
c0020e9f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ea6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020eae:	74 19                	je     c0020ec9 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020eb0:	83 ec 0c             	sub    esp,0xc
c0020eb3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020eba:	e8 ed e9 fe ff       	call   c000f8ac <rfree>
c0020ebf:	83 c4 10             	add    esp,0x10
c0020ec2:	b0 00                	mov    al,0x0
c0020ec4:	e9 e7 00 00 00       	jmp    c0020fb0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ec9:	83 ec 04             	sub    esp,0x4
c0020ecc:	68 00 01 00 00       	push   0x100
c0020ed1:	6a 00                	push   0x0
c0020ed3:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020eda:	50                   	push   eax
c0020edb:	e8 70 f8 fd ff       	call   c0000750 <memset>
c0020ee0:	83 c4 10             	add    esp,0x10
c0020ee3:	83 ec 08             	sub    esp,0x8
c0020ee6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020eed:	50                   	push   eax
c0020eee:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ef5:	50                   	push   eax
c0020ef6:	e8 51 fa fd ff       	call   c000094c <strcat>
c0020efb:	83 c4 10             	add    esp,0x10
c0020efe:	83 ec 08             	sub    esp,0x8
c0020f01:	68 80 d4 02 c0       	push   0xc002d480
c0020f06:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020f0d:	50                   	push   eax
c0020f0e:	e8 39 fa fd ff       	call   c000094c <strcat>
c0020f13:	83 c4 10             	add    esp,0x10
c0020f16:	83 ec 04             	sub    esp,0x4
c0020f19:	6a 01                	push   0x1
c0020f1b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020f22:	50                   	push   eax
c0020f23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f27:	50                   	push   eax
c0020f28:	e8 2a 40 fe ff       	call   c0004f57 <f_open>
c0020f2d:	83 c4 10             	add    esp,0x10
c0020f30:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020f37:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020f3e:	85 c0                	test   eax,eax
c0020f40:	74 0a                	je     c0020f4c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020f42:	78 2d                	js     c0020f71 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020f44:	83 e8 04             	sub    eax,0x4
c0020f47:	83 f8 01             	cmp    eax,0x1
c0020f4a:	77 25                	ja     c0020f71 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020f4c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020f54:	83 ec 0c             	sub    esp,0xc
c0020f57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f5b:	50                   	push   eax
c0020f5c:	e8 48 4b fe ff       	call   c0005aa9 <f_close>
c0020f61:	83 c4 10             	add    esp,0x10
c0020f64:	90                   	nop
c0020f65:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020f6d:	74 3a                	je     c0020fa9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020f6f:	eb 2d                	jmp    c0020f9e <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020f71:	83 ec 0c             	sub    esp,0xc
c0020f74:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020f7b:	e8 2c e9 fe ff       	call   c000f8ac <rfree>
c0020f80:	83 c4 10             	add    esp,0x10
c0020f83:	83 ec 04             	sub    esp,0x4
c0020f86:	6a 00                	push   0x0
c0020f88:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020f8f:	50                   	push   eax
c0020f90:	6a 00                	push   0x0
c0020f92:	e8 5e 3f fe ff       	call   c0004ef5 <f_mount>
c0020f97:	83 c4 10             	add    esp,0x10
c0020f9a:	b0 00                	mov    al,0x0
c0020f9c:	eb 12                	jmp    c0020fb0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020f9e:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0020fa3:	40                   	inc    eax
c0020fa4:	a3 e0 27 03 c0       	mov    ds:0xc00327e0,eax
c0020fa9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020fb0:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020fb6:	c3                   	ret    
c0020fb7:	90                   	nop

c0020fb8 <FAT::getFileFirstSector(char const*)>:
c0020fb8:	53                   	push   ebx
c0020fb9:	83 ec 28             	sub    esp,0x28
c0020fbc:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020fc4:	83 ec 0c             	sub    esp,0xc
c0020fc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fcb:	e8 bc e8 fe ff       	call   c000f88c <malloc>
c0020fd0:	83 c4 10             	add    esp,0x10
c0020fd3:	89 c3                	mov    ebx,eax
c0020fd5:	a1 10 27 03 c0       	mov    eax,ds:0xc0032710
c0020fda:	83 ec 04             	sub    esp,0x4
c0020fdd:	50                   	push   eax
c0020fde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020fe2:	53                   	push   ebx
c0020fe3:	e8 7e 20 ff ff       	call   c0013066 <File::File(char const*, Process*)>
c0020fe8:	83 c4 10             	add    esp,0x10
c0020feb:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020fef:	83 ec 08             	sub    esp,0x8
c0020ff2:	6a 01                	push   0x1
c0020ff4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020ff8:	e8 cd 20 ff ff       	call   c00130ca <File::open(FileOpenMode)>
c0020ffd:	83 c4 10             	add    esp,0x10
c0021000:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021004:	8b 00                	mov    eax,DWORD PTR [eax]
c0021006:	83 c0 0c             	add    eax,0xc
c0021009:	8b 00                	mov    eax,DWORD PTR [eax]
c002100b:	83 ec 0c             	sub    esp,0xc
c002100e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021012:	52                   	push   edx
c0021013:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021017:	52                   	push   edx
c0021018:	6a 00                	push   0x0
c002101a:	6a 04                	push   0x4
c002101c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021020:	ff d0                	call   eax
c0021022:	83 c4 20             	add    esp,0x20
c0021025:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021029:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002102f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021033:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021037:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002103a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002103d:	83 ec 04             	sub    esp,0x4
c0021040:	52                   	push   edx
c0021041:	50                   	push   eax
c0021042:	68 8b d4 02 c0       	push   0xc002d48b
c0021047:	e8 bb 1a ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c002104c:	83 c4 10             	add    esp,0x10
c002104f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021053:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021056:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021059:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002105d:	83 ec 0c             	sub    esp,0xc
c0021060:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021064:	e8 bf 20 ff ff       	call   c0013128 <File::close()>
c0021069:	83 c4 10             	add    esp,0x10
c002106c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021070:	ba 00 00 00 00       	mov    edx,0x0
c0021075:	83 c4 28             	add    esp,0x28
c0021078:	5b                   	pop    ebx
c0021079:	c3                   	ret    

c002107a <FAT::readDir(void*, unsigned long, void*, int*)>:
c002107a:	57                   	push   edi
c002107b:	56                   	push   esi
c002107c:	53                   	push   ebx
c002107d:	81 ec 50 02 00 00    	sub    esp,0x250
c0021083:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002108b:	74 0a                	je     c0021097 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c002108d:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0021095:	75 0a                	jne    c00210a1 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0021097:	b8 04 00 00 00       	mov    eax,0x4
c002109c:	e9 29 01 00 00       	jmp    c00211ca <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00210a1:	83 ec 08             	sub    esp,0x8
c00210a4:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00210ab:	50                   	push   eax
c00210ac:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00210b3:	e8 fb 4f fe ff       	call   c00060b3 <f_readdir>
c00210b8:	83 c4 10             	add    esp,0x10
c00210bb:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00210c2:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00210c9:	83 ec 0c             	sub    esp,0xc
c00210cc:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00210d3:	83 c0 1a             	add    eax,0x1a
c00210d6:	50                   	push   eax
c00210d7:	e8 90 f6 fd ff       	call   c000076c <strlen>
c00210dc:	83 c4 10             	add    esp,0x10
c00210df:	ba 00 00 00 00       	mov    edx,0x0
c00210e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00210e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00210ec:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00210f3:	0f b6 c0             	movzx  eax,al
c00210f6:	83 e0 10             	and    eax,0x10
c00210f9:	74 07                	je     c0021102 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00210fb:	b8 02 00 00 00       	mov    eax,0x2
c0021100:	eb 05                	jmp    c0021107 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0021102:	b8 01 00 00 00       	mov    eax,0x1
c0021107:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002110b:	83 ec 08             	sub    esp,0x8
c002110e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021115:	83 c0 1a             	add    eax,0x1a
c0021118:	50                   	push   eax
c0021119:	8d 44 24 10          	lea    eax,[esp+0x10]
c002111d:	83 c0 10             	add    eax,0x10
c0021120:	50                   	push   eax
c0021121:	e8 e6 f6 fd ff       	call   c000080c <strcpy>
c0021126:	83 c4 10             	add    esp,0x10
c0021129:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0021130:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0021137:	8d 44 24 04          	lea    eax,[esp+0x4]
c002113b:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0021142:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0021149:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0021150:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0021157:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002115e:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0021165:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002116c:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0021173:	89 c6                	mov    esi,eax
c0021175:	89 d7                	mov    edi,edx
c0021177:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021179:	89 c8                	mov    eax,ecx
c002117b:	89 fa                	mov    edx,edi
c002117d:	89 f3                	mov    ebx,esi
c002117f:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0021186:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002118d:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0021194:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c002119b:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00211a1:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00211a8:	84 c0                	test   al,al
c00211aa:	75 07                	jne    c00211b3 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00211ac:	b8 07 00 00 00       	mov    eax,0x7
c00211b1:	eb 17                	jmp    c00211ca <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00211b3:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00211ba:	85 c0                	test   eax,eax
c00211bc:	75 07                	jne    c00211c5 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00211be:	b8 00 00 00 00       	mov    eax,0x0
c00211c3:	eb 05                	jmp    c00211ca <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00211c5:	b8 01 00 00 00       	mov    eax,0x1
c00211ca:	81 c4 50 02 00 00    	add    esp,0x250
c00211d0:	5b                   	pop    ebx
c00211d1:	5e                   	pop    esi
c00211d2:	5f                   	pop    edi
c00211d3:	c3                   	ret    

c00211d4 <FAT::read(void*, unsigned long, void*, int*)>:
c00211d4:	83 ec 1c             	sub    esp,0x1c
c00211d7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00211dc:	74 07                	je     c00211e5 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00211de:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00211e3:	75 07                	jne    c00211ec <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00211e5:	b8 04 00 00 00       	mov    eax,0x4
c00211ea:	eb 3d                	jmp    c0021229 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00211ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211f0:	50                   	push   eax
c00211f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00211f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00211f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00211fd:	e8 91 41 fe ff       	call   c0005393 <f_read>
c0021202:	83 c4 10             	add    esp,0x10
c0021205:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021209:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002120d:	89 c2                	mov    edx,eax
c002120f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021213:	89 10                	mov    DWORD PTR [eax],edx
c0021215:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021219:	85 c0                	test   eax,eax
c002121b:	75 07                	jne    c0021224 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002121d:	b8 00 00 00 00       	mov    eax,0x0
c0021222:	eb 05                	jmp    c0021229 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021224:	b8 01 00 00 00       	mov    eax,0x1
c0021229:	83 c4 1c             	add    esp,0x1c
c002122c:	c3                   	ret    
c002122d:	90                   	nop

c002122e <FAT::write(void*, unsigned long, void*, int*)>:
c002122e:	83 ec 1c             	sub    esp,0x1c
c0021231:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021236:	74 07                	je     c002123f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0021238:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002123d:	75 07                	jne    c0021246 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002123f:	b8 04 00 00 00       	mov    eax,0x4
c0021244:	eb 3d                	jmp    c0021283 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021246:	8d 44 24 08          	lea    eax,[esp+0x8]
c002124a:	50                   	push   eax
c002124b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002124f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021253:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021257:	e8 b7 43 fe ff       	call   c0005613 <f_write>
c002125c:	83 c4 10             	add    esp,0x10
c002125f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021263:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021267:	89 c2                	mov    edx,eax
c0021269:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002126d:	89 10                	mov    DWORD PTR [eax],edx
c002126f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021273:	85 c0                	test   eax,eax
c0021275:	75 07                	jne    c002127e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0021277:	b8 00 00 00 00       	mov    eax,0x0
c002127c:	eb 05                	jmp    c0021283 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002127e:	b8 01 00 00 00       	mov    eax,0x1
c0021283:	83 c4 1c             	add    esp,0x1c
c0021286:	c3                   	ret    
c0021287:	90                   	nop

c0021288 <FAT::close(void*)>:
c0021288:	83 ec 1c             	sub    esp,0x1c
c002128b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021290:	75 07                	jne    c0021299 <FAT::close(void*)+0x11>
c0021292:	b8 04 00 00 00       	mov    eax,0x4
c0021297:	eb 36                	jmp    c00212cf <FAT::close(void*)+0x47>
c0021299:	83 ec 0c             	sub    esp,0xc
c002129c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00212a0:	e8 04 48 fe ff       	call   c0005aa9 <f_close>
c00212a5:	83 c4 10             	add    esp,0x10
c00212a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212ac:	83 ec 0c             	sub    esp,0xc
c00212af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00212b3:	e8 e4 e5 fe ff       	call   c000f89c <free>
c00212b8:	83 c4 10             	add    esp,0x10
c00212bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212bf:	85 c0                	test   eax,eax
c00212c1:	75 07                	jne    c00212ca <FAT::close(void*)+0x42>
c00212c3:	b8 00 00 00 00       	mov    eax,0x0
c00212c8:	eb 05                	jmp    c00212cf <FAT::close(void*)+0x47>
c00212ca:	b8 01 00 00 00       	mov    eax,0x1
c00212cf:	83 c4 1c             	add    esp,0x1c
c00212d2:	c3                   	ret    
c00212d3:	90                   	nop

c00212d4 <FAT::closeDir(void*)>:
c00212d4:	83 ec 1c             	sub    esp,0x1c
c00212d7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00212dc:	75 07                	jne    c00212e5 <FAT::closeDir(void*)+0x11>
c00212de:	b8 04 00 00 00       	mov    eax,0x4
c00212e3:	eb 36                	jmp    c002131b <FAT::closeDir(void*)+0x47>
c00212e5:	83 ec 0c             	sub    esp,0xc
c00212e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00212ec:	e8 a0 4d fe ff       	call   c0006091 <f_closedir>
c00212f1:	83 c4 10             	add    esp,0x10
c00212f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212f8:	83 ec 0c             	sub    esp,0xc
c00212fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00212ff:	e8 98 e5 fe ff       	call   c000f89c <free>
c0021304:	83 c4 10             	add    esp,0x10
c0021307:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002130b:	85 c0                	test   eax,eax
c002130d:	75 07                	jne    c0021316 <FAT::closeDir(void*)+0x42>
c002130f:	b8 00 00 00 00       	mov    eax,0x0
c0021314:	eb 05                	jmp    c002131b <FAT::closeDir(void*)+0x47>
c0021316:	b8 01 00 00 00       	mov    eax,0x1
c002131b:	83 c4 1c             	add    esp,0x1c
c002131e:	c3                   	ret    
c002131f:	90                   	nop

c0021320 <FAT::seek(void*, unsigned long long)>:
c0021320:	83 ec 2c             	sub    esp,0x2c
c0021323:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021327:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002132b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002132f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021333:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0021338:	75 07                	jne    c0021341 <FAT::seek(void*, unsigned long long)+0x21>
c002133a:	b8 04 00 00 00       	mov    eax,0x4
c002133f:	eb 2f                	jmp    c0021370 <FAT::seek(void*, unsigned long long)+0x50>
c0021341:	83 ec 04             	sub    esp,0x4
c0021344:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021348:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002134c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021350:	e8 83 47 fe ff       	call   c0005ad8 <f_lseek>
c0021355:	83 c4 10             	add    esp,0x10
c0021358:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002135c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021360:	85 c0                	test   eax,eax
c0021362:	75 07                	jne    c002136b <FAT::seek(void*, unsigned long long)+0x4b>
c0021364:	b8 00 00 00 00       	mov    eax,0x0
c0021369:	eb 05                	jmp    c0021370 <FAT::seek(void*, unsigned long long)+0x50>
c002136b:	b8 01 00 00 00       	mov    eax,0x1
c0021370:	83 c4 2c             	add    esp,0x2c
c0021373:	c3                   	ret    

c0021374 <fatWrapperReadDisk>:
c0021374:	83 ec 1c             	sub    esp,0x1c
c0021377:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002137b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002137f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021383:	89 04 24             	mov    DWORD PTR [esp],eax
c0021386:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002138a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002138e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021393:	8b 04 85 c0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0840]
c002139a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002139e:	83 ec 0c             	sub    esp,0xc
c00213a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213a5:	52                   	push   edx
c00213a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213ae:	50                   	push   eax
c00213af:	e8 d0 50 ff ff       	call   c0016484 <LogicalDisk::read(unsigned long long, int, void*)>
c00213b4:	83 c4 20             	add    esp,0x20
c00213b7:	83 c4 1c             	add    esp,0x1c
c00213ba:	c3                   	ret    

c00213bb <fatWrapperWriteDisk>:
c00213bb:	83 ec 1c             	sub    esp,0x1c
c00213be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213c2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00213c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00213ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00213cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00213d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00213d5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213da:	8b 04 85 c0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0840]
c00213e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00213e5:	83 ec 0c             	sub    esp,0xc
c00213e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213ec:	52                   	push   edx
c00213ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213f5:	50                   	push   eax
c00213f6:	e8 f5 50 ff ff       	call   c00164f0 <LogicalDisk::write(unsigned long long, int, void*)>
c00213fb:	83 c4 20             	add    esp,0x20
c00213fe:	83 c4 1c             	add    esp,0x1c
c0021401:	c3                   	ret    

c0021402 <fatWrapperIoctl>:
c0021402:	53                   	push   ebx
c0021403:	83 ec 28             	sub    esp,0x28
c0021406:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002140a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002140e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021412:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021416:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002141b:	75 31                	jne    c002144e <fatWrapperIoctl+0x4c>
c002141d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021421:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021425:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002142a:	8b 04 85 c0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0840]
c0021431:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021437:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002143d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021441:	66 89 02             	mov    WORD PTR [edx],ax
c0021444:	b8 00 00 00 00       	mov    eax,0x0
c0021449:	e9 b2 00 00 00       	jmp    c0021500 <fatWrapperIoctl+0xfe>
c002144e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021453:	75 6a                	jne    c00214bf <fatWrapperIoctl+0xbd>
c0021455:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021459:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002145d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021462:	8b 04 85 c0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0840]
c0021469:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002146f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021475:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002147b:	89 c8                	mov    eax,ecx
c002147d:	89 da                	mov    edx,ebx
c002147f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021483:	c1 e0 0a             	shl    eax,0xa
c0021486:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002148b:	8b 0c 8d c0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0840]
c0021492:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021498:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002149e:	89 cb                	mov    ebx,ecx
c00214a0:	c1 fb 1f             	sar    ebx,0x1f
c00214a3:	53                   	push   ebx
c00214a4:	51                   	push   ecx
c00214a5:	52                   	push   edx
c00214a6:	50                   	push   eax
c00214a7:	e8 c8 5f 00 00       	call   c0027474 <__udivdi3>
c00214ac:	83 c4 10             	add    esp,0x10
c00214af:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00214b3:	89 01                	mov    DWORD PTR [ecx],eax
c00214b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00214b8:	b8 00 00 00 00       	mov    eax,0x0
c00214bd:	eb 41                	jmp    c0021500 <fatWrapperIoctl+0xfe>
c00214bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00214c4:	75 07                	jne    c00214cd <fatWrapperIoctl+0xcb>
c00214c6:	b8 00 00 00 00       	mov    eax,0x0
c00214cb:	eb 33                	jmp    c0021500 <fatWrapperIoctl+0xfe>
c00214cd:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00214d2:	75 19                	jne    c00214ed <fatWrapperIoctl+0xeb>
c00214d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00214d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00214dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214e0:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00214e6:	b8 00 00 00 00       	mov    eax,0x0
c00214eb:	eb 13                	jmp    c0021500 <fatWrapperIoctl+0xfe>
c00214ed:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00214f2:	75 07                	jne    c00214fb <fatWrapperIoctl+0xf9>
c00214f4:	b8 00 00 00 00       	mov    eax,0x0
c00214f9:	eb 05                	jmp    c0021500 <fatWrapperIoctl+0xfe>
c00214fb:	b8 04 00 00 00       	mov    eax,0x4
c0021500:	83 c4 28             	add    esp,0x28
c0021503:	5b                   	pop    ebx
c0021504:	c3                   	ret    
c0021505:	90                   	nop

c0021506 <FAT::FAT()>:
c0021506:	83 ec 1c             	sub    esp,0x1c
c0021509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002150d:	83 ec 0c             	sub    esp,0xc
c0021510:	50                   	push   eax
c0021511:	e8 fc 18 ff ff       	call   c0012e12 <Filesystem::Filesystem()>
c0021516:	83 c4 10             	add    esp,0x10
c0021519:	ba c8 d4 02 c0       	mov    edx,0xc002d4c8
c002151e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021522:	89 10                	mov    DWORD PTR [eax],edx
c0021524:	c7 05 e0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327e0,0x0
c002152e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021536:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002153b:	7f 15                	jg     c0021552 <FAT::FAT()+0x4c>
c002153d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021541:	c7 04 85 00 28 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd800],0xffffffff
c002154c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021550:	eb e4                	jmp    c0021536 <FAT::FAT()+0x30>
c0021552:	90                   	nop
c0021553:	83 c4 1c             	add    esp,0x1c
c0021556:	c3                   	ret    
c0021557:	90                   	nop

c0021558 <FAT::fixFilepath(char*)>:
c0021558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002155c:	8a 00                	mov    al,BYTE PTR [eax]
c002155e:	3c 40                	cmp    al,0x40
c0021560:	7e 2c                	jle    c002158e <FAT::fixFilepath(char*)+0x36>
c0021562:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021566:	8a 00                	mov    al,BYTE PTR [eax]
c0021568:	83 e8 41             	sub    eax,0x41
c002156b:	88 c2                	mov    dl,al
c002156d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021571:	88 10                	mov    BYTE PTR [eax],dl
c0021573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021577:	8a 00                	mov    al,BYTE PTR [eax]
c0021579:	0f be c0             	movsx  eax,al
c002157c:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0021583:	83 c0 30             	add    eax,0x30
c0021586:	88 c2                	mov    dl,al
c0021588:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002158c:	88 10                	mov    BYTE PTR [eax],dl
c002158e:	90                   	nop
c002158f:	c3                   	ret    

c0021590 <FAT::open(char const*, void**, FileOpenMode)>:
c0021590:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021596:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002159e:	74 0a                	je     c00215aa <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00215a0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00215a8:	75 0a                	jne    c00215b4 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00215aa:	b8 04 00 00 00       	mov    eax,0x4
c00215af:	e9 fd 00 00 00       	jmp    c00216b1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00215b4:	83 ec 08             	sub    esp,0x8
c00215b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215c2:	50                   	push   eax
c00215c3:	e8 44 f2 fd ff       	call   c000080c <strcpy>
c00215c8:	83 c4 10             	add    esp,0x10
c00215cb:	83 ec 08             	sub    esp,0x8
c00215ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c00215d2:	50                   	push   eax
c00215d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215da:	e8 79 ff ff ff       	call   c0021558 <FAT::fixFilepath(char*)>
c00215df:	83 c4 10             	add    esp,0x10
c00215e2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00215ea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00215f1:	83 e0 01             	and    eax,0x1
c00215f4:	74 08                	je     c00215fe <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00215f6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00215fe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021605:	83 e0 04             	and    eax,0x4
c0021608:	74 10                	je     c002161a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002160a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021612:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002161a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021621:	83 e0 02             	and    eax,0x2
c0021624:	74 08                	je     c002162e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021626:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002162e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021635:	83 e0 08             	and    eax,0x8
c0021638:	74 08                	je     c0021642 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002163a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021642:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021649:	83 e0 10             	and    eax,0x10
c002164c:	74 08                	je     c0021656 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002164e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021656:	83 ec 0c             	sub    esp,0xc
c0021659:	68 50 02 00 00       	push   0x250
c002165e:	e8 29 e2 fe ff       	call   c000f88c <malloc>
c0021663:	83 c4 10             	add    esp,0x10
c0021666:	89 c2                	mov    edx,eax
c0021668:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002166f:	89 10                	mov    DWORD PTR [eax],edx
c0021671:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021679:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021680:	8b 00                	mov    eax,DWORD PTR [eax]
c0021682:	83 ec 04             	sub    esp,0x4
c0021685:	52                   	push   edx
c0021686:	8d 54 24 10          	lea    edx,[esp+0x10]
c002168a:	52                   	push   edx
c002168b:	50                   	push   eax
c002168c:	e8 c6 38 fe ff       	call   c0004f57 <f_open>
c0021691:	83 c4 10             	add    esp,0x10
c0021694:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002169b:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00216a3:	74 07                	je     c00216ac <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00216a5:	b8 01 00 00 00       	mov    eax,0x1
c00216aa:	eb 05                	jmp    c00216b1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00216ac:	b8 00 00 00 00       	mov    eax,0x0
c00216b1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00216b7:	c3                   	ret    

c00216b8 <FAT::openDir(char const*, void**)>:
c00216b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00216c6:	74 0a                	je     c00216d2 <FAT::openDir(char const*, void**)+0x1a>
c00216c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00216d0:	75 07                	jne    c00216d9 <FAT::openDir(char const*, void**)+0x21>
c00216d2:	b8 04 00 00 00       	mov    eax,0x4
c00216d7:	eb 7d                	jmp    c0021756 <FAT::openDir(char const*, void**)+0x9e>
c00216d9:	83 ec 08             	sub    esp,0x8
c00216dc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00216e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216e7:	50                   	push   eax
c00216e8:	e8 1f f1 fd ff       	call   c000080c <strcpy>
c00216ed:	83 c4 10             	add    esp,0x10
c00216f0:	83 ec 08             	sub    esp,0x8
c00216f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216f7:	50                   	push   eax
c00216f8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00216ff:	e8 54 fe ff ff       	call   c0021558 <FAT::fixFilepath(char*)>
c0021704:	83 c4 10             	add    esp,0x10
c0021707:	83 ec 0c             	sub    esp,0xc
c002170a:	6a 4c                	push   0x4c
c002170c:	e8 7b e1 fe ff       	call   c000f88c <malloc>
c0021711:	83 c4 10             	add    esp,0x10
c0021714:	89 c2                	mov    edx,eax
c0021716:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002171d:	89 10                	mov    DWORD PTR [eax],edx
c002171f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021726:	8b 00                	mov    eax,DWORD PTR [eax]
c0021728:	83 ec 08             	sub    esp,0x8
c002172b:	8d 54 24 14          	lea    edx,[esp+0x14]
c002172f:	52                   	push   edx
c0021730:	50                   	push   eax
c0021731:	e8 59 48 fe ff       	call   c0005f8f <f_opendir>
c0021736:	83 c4 10             	add    esp,0x10
c0021739:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021740:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021748:	74 07                	je     c0021751 <FAT::openDir(char const*, void**)+0x99>
c002174a:	b8 01 00 00 00       	mov    eax,0x1
c002174f:	eb 05                	jmp    c0021756 <FAT::openDir(char const*, void**)+0x9e>
c0021751:	b8 00 00 00 00       	mov    eax,0x0
c0021756:	81 c4 1c 01 00 00    	add    esp,0x11c
c002175c:	c3                   	ret    
c002175d:	90                   	nop

c002175e <FAT::stat(char const*, unsigned long long*, bool*)>:
c002175e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021764:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002176c:	75 0a                	jne    c0021778 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002176e:	b8 04 00 00 00       	mov    eax,0x4
c0021773:	e9 c9 00 00 00       	jmp    c0021841 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021778:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021780:	75 0a                	jne    c002178c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021782:	b8 04 00 00 00       	mov    eax,0x4
c0021787:	e9 b5 00 00 00       	jmp    c0021841 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002178c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021794:	75 0a                	jne    c00217a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021796:	b8 04 00 00 00       	mov    eax,0x4
c002179b:	e9 a1 00 00 00       	jmp    c0021841 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00217a0:	83 ec 08             	sub    esp,0x8
c00217a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217aa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00217b1:	50                   	push   eax
c00217b2:	e8 55 f0 fd ff       	call   c000080c <strcpy>
c00217b7:	83 c4 10             	add    esp,0x10
c00217ba:	83 ec 08             	sub    esp,0x8
c00217bd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00217c4:	50                   	push   eax
c00217c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217cc:	e8 87 fd ff ff       	call   c0021558 <FAT::fixFilepath(char*)>
c00217d1:	83 c4 10             	add    esp,0x10
c00217d4:	83 ec 08             	sub    esp,0x8
c00217d7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217db:	50                   	push   eax
c00217dc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00217e3:	50                   	push   eax
c00217e4:	e8 65 49 fe ff       	call   c000614e <f_stat>
c00217e9:	83 c4 10             	add    esp,0x10
c00217ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00217f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00217fa:	85 c0                	test   eax,eax
c00217fc:	74 07                	je     c0021805 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00217fe:	83 f8 04             	cmp    eax,0x4
c0021801:	74 32                	je     c0021835 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021803:	eb 37                	jmp    c002183c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021805:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021809:	0f b6 c0             	movzx  eax,al
c002180c:	83 e0 10             	and    eax,0x10
c002180f:	0f 95 c2             	setne  dl
c0021812:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021819:	88 10                	mov    BYTE PTR [eax],dl
c002181b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002181e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021822:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021829:	89 01                	mov    DWORD PTR [ecx],eax
c002182b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002182e:	b8 00 00 00 00       	mov    eax,0x0
c0021833:	eb 0c                	jmp    c0021841 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021835:	b8 02 00 00 00       	mov    eax,0x2
c002183a:	eb 05                	jmp    c0021841 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002183c:	b8 01 00 00 00       	mov    eax,0x1
c0021841:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021847:	c3                   	ret    

c0021848 <FAT::unlink(char const*)>:
c0021848:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002184e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021856:	75 07                	jne    c002185f <FAT::unlink(char const*)+0x17>
c0021858:	b8 04 00 00 00       	mov    eax,0x4
c002185d:	eb 5c                	jmp    c00218bb <FAT::unlink(char const*)+0x73>
c002185f:	83 ec 08             	sub    esp,0x8
c0021862:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021869:	8d 44 24 18          	lea    eax,[esp+0x18]
c002186d:	50                   	push   eax
c002186e:	e8 99 ef fd ff       	call   c000080c <strcpy>
c0021873:	83 c4 10             	add    esp,0x10
c0021876:	83 ec 08             	sub    esp,0x8
c0021879:	8d 44 24 14          	lea    eax,[esp+0x14]
c002187d:	50                   	push   eax
c002187e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021885:	e8 ce fc ff ff       	call   c0021558 <FAT::fixFilepath(char*)>
c002188a:	83 c4 10             	add    esp,0x10
c002188d:	83 ec 0c             	sub    esp,0xc
c0021890:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021894:	50                   	push   eax
c0021895:	e8 06 4c fe ff       	call   c00064a0 <f_unlink>
c002189a:	83 c4 10             	add    esp,0x10
c002189d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00218a4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00218ab:	85 c0                	test   eax,eax
c00218ad:	75 07                	jne    c00218b6 <FAT::unlink(char const*)+0x6e>
c00218af:	b8 00 00 00 00       	mov    eax,0x0
c00218b4:	eb 05                	jmp    c00218bb <FAT::unlink(char const*)+0x73>
c00218b6:	b8 01 00 00 00       	mov    eax,0x1
c00218bb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218c1:	c3                   	ret    

c00218c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00218c2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00218c8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00218cf:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00218d6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00218da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00218de:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00218e6:	75 0a                	jne    c00218f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00218e8:	b8 04 00 00 00       	mov    eax,0x4
c00218ed:	e9 1c 01 00 00       	jmp    c0021a0e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00218f2:	83 ec 08             	sub    esp,0x8
c00218f5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00218fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021900:	50                   	push   eax
c0021901:	e8 06 ef fd ff       	call   c000080c <strcpy>
c0021906:	83 c4 10             	add    esp,0x10
c0021909:	83 ec 08             	sub    esp,0x8
c002190c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021910:	50                   	push   eax
c0021911:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021918:	e8 3b fc ff ff       	call   c0021558 <FAT::fixFilepath(char*)>
c002191d:	83 c4 10             	add    esp,0x10
c0021920:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021928:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021930:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021935:	83 e0 01             	and    eax,0x1
c0021938:	74 08                	je     c0021942 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002193a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021942:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021947:	83 e0 02             	and    eax,0x2
c002194a:	74 08                	je     c0021954 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002194c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021954:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021959:	83 e0 04             	and    eax,0x4
c002195c:	74 08                	je     c0021966 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002195e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021966:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002196b:	83 e0 08             	and    eax,0x8
c002196e:	74 08                	je     c0021978 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021970:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021978:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002197d:	83 e0 01             	and    eax,0x1
c0021980:	74 08                	je     c002198a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021982:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002198a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002198f:	83 e0 02             	and    eax,0x2
c0021992:	74 08                	je     c002199c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021994:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002199c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00219a1:	83 e0 04             	and    eax,0x4
c00219a4:	74 08                	je     c00219ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00219a6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00219ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00219b3:	83 e0 08             	and    eax,0x8
c00219b6:	74 08                	je     c00219c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00219b8:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00219c0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00219c7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00219ce:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00219d6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00219de:	83 ec 04             	sub    esp,0x4
c00219e1:	52                   	push   edx
c00219e2:	50                   	push   eax
c00219e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00219e7:	50                   	push   eax
c00219e8:	e8 55 51 fe ff       	call   c0006b42 <f_chmod>
c00219ed:	83 c4 10             	add    esp,0x10
c00219f0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00219f7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00219fe:	85 c0                	test   eax,eax
c0021a00:	75 07                	jne    c0021a09 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021a02:	b8 00 00 00 00       	mov    eax,0x0
c0021a07:	eb 05                	jmp    c0021a0e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021a09:	b8 01 00 00 00       	mov    eax,0x1
c0021a0e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021a14:	c3                   	ret    
c0021a15:	90                   	nop

c0021a16 <FAT::rename(char const*, char const*)>:
c0021a16:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021a1c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021a24:	74 0a                	je     c0021a30 <FAT::rename(char const*, char const*)+0x1a>
c0021a26:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021a2e:	75 0a                	jne    c0021a3a <FAT::rename(char const*, char const*)+0x24>
c0021a30:	b8 04 00 00 00       	mov    eax,0x4
c0021a35:	e9 98 00 00 00       	jmp    c0021ad2 <FAT::rename(char const*, char const*)+0xbc>
c0021a3a:	83 ec 08             	sub    esp,0x8
c0021a3d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021a44:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021a4b:	50                   	push   eax
c0021a4c:	e8 bb ed fd ff       	call   c000080c <strcpy>
c0021a51:	83 c4 10             	add    esp,0x10
c0021a54:	83 ec 08             	sub    esp,0x8
c0021a57:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021a5e:	50                   	push   eax
c0021a5f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021a66:	e8 ed fa ff ff       	call   c0021558 <FAT::fixFilepath(char*)>
c0021a6b:	83 c4 10             	add    esp,0x10
c0021a6e:	83 ec 08             	sub    esp,0x8
c0021a71:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021a78:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a7c:	50                   	push   eax
c0021a7d:	e8 8a ed fd ff       	call   c000080c <strcpy>
c0021a82:	83 c4 10             	add    esp,0x10
c0021a85:	83 ec 08             	sub    esp,0x8
c0021a88:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a8c:	50                   	push   eax
c0021a8d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021a94:	e8 bf fa ff ff       	call   c0021558 <FAT::fixFilepath(char*)>
c0021a99:	83 c4 10             	add    esp,0x10
c0021a9c:	83 ec 08             	sub    esp,0x8
c0021a9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021aa3:	50                   	push   eax
c0021aa4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021aab:	50                   	push   eax
c0021aac:	e8 9e 4d fe ff       	call   c000684f <f_rename>
c0021ab1:	83 c4 10             	add    esp,0x10
c0021ab4:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021abb:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021ac2:	85 c0                	test   eax,eax
c0021ac4:	75 07                	jne    c0021acd <FAT::rename(char const*, char const*)+0xb7>
c0021ac6:	b8 00 00 00 00       	mov    eax,0x0
c0021acb:	eb 05                	jmp    c0021ad2 <FAT::rename(char const*, char const*)+0xbc>
c0021acd:	b8 01 00 00 00       	mov    eax,0x1
c0021ad2:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021ad8:	c3                   	ret    
c0021ad9:	90                   	nop

c0021ada <FAT::mkdir(char const*)>:
c0021ada:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ae0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021ae8:	75 07                	jne    c0021af1 <FAT::mkdir(char const*)+0x17>
c0021aea:	b8 04 00 00 00       	mov    eax,0x4
c0021aef:	eb 5c                	jmp    c0021b4d <FAT::mkdir(char const*)+0x73>
c0021af1:	83 ec 08             	sub    esp,0x8
c0021af4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021afb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021aff:	50                   	push   eax
c0021b00:	e8 07 ed fd ff       	call   c000080c <strcpy>
c0021b05:	83 c4 10             	add    esp,0x10
c0021b08:	83 ec 08             	sub    esp,0x8
c0021b0b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b0f:	50                   	push   eax
c0021b10:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b17:	e8 3c fa ff ff       	call   c0021558 <FAT::fixFilepath(char*)>
c0021b1c:	83 c4 10             	add    esp,0x10
c0021b1f:	83 ec 0c             	sub    esp,0xc
c0021b22:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b26:	50                   	push   eax
c0021b27:	e8 f7 4a fe ff       	call   c0006623 <f_mkdir>
c0021b2c:	83 c4 10             	add    esp,0x10
c0021b2f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021b36:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021b3d:	85 c0                	test   eax,eax
c0021b3f:	75 07                	jne    c0021b48 <FAT::mkdir(char const*)+0x6e>
c0021b41:	b8 00 00 00 00       	mov    eax,0x0
c0021b46:	eb 05                	jmp    c0021b4d <FAT::mkdir(char const*)+0x73>
c0021b48:	b8 01 00 00 00       	mov    eax,0x1
c0021b4d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b53:	c3                   	ret    

c0021b54 <FAT::exists(char const*)>:
c0021b54:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021b5a:	83 ec 08             	sub    esp,0x8
c0021b5d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b64:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021b68:	50                   	push   eax
c0021b69:	e8 9e ec fd ff       	call   c000080c <strcpy>
c0021b6e:	83 c4 10             	add    esp,0x10
c0021b71:	83 ec 08             	sub    esp,0x8
c0021b74:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021b78:	50                   	push   eax
c0021b79:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b80:	e8 d3 f9 ff ff       	call   c0021558 <FAT::fixFilepath(char*)>
c0021b85:	83 c4 10             	add    esp,0x10
c0021b88:	83 ec 08             	sub    esp,0x8
c0021b8b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021b92:	50                   	push   eax
c0021b93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021b97:	50                   	push   eax
c0021b98:	e8 b1 45 fe ff       	call   c000614e <f_stat>
c0021b9d:	83 c4 10             	add    esp,0x10
c0021ba0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021ba7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021bae:	85 c0                	test   eax,eax
c0021bb0:	75 04                	jne    c0021bb6 <FAT::exists(char const*)+0x62>
c0021bb2:	b0 01                	mov    al,0x1
c0021bb4:	eb 02                	jmp    c0021bb8 <FAT::exists(char const*)+0x64>
c0021bb6:	b0 00                	mov    al,0x0
c0021bb8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021bbe:	c3                   	ret    
c0021bbf:	90                   	nop

c0021bc0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021bc0:	b8 08 00 00 00       	mov    eax,0x8
c0021bc5:	c3                   	ret    

c0021bc6 <ISO9660::seek(void*, unsigned long long)>:
c0021bc6:	53                   	push   ebx
c0021bc7:	b8 04 00 00 00       	mov    eax,0x4
c0021bcc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021bd4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021bd8:	85 d2                	test   edx,edx
c0021bda:	74 17                	je     c0021bf3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021bdc:	89 c8                	mov    eax,ecx
c0021bde:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021be1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021be4:	b8 01 00 00 00       	mov    eax,0x1
c0021be9:	73 08                	jae    c0021bf3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021beb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021bee:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021bf1:	31 c0                	xor    eax,eax
c0021bf3:	5b                   	pop    ebx
c0021bf4:	c3                   	ret    
c0021bf5:	90                   	nop

c0021bf6 <ISO9660::tell(void*, unsigned long long*)>:
c0021bf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021bfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021bfe:	85 d2                	test   edx,edx
c0021c00:	74 12                	je     c0021c14 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021c02:	85 c0                	test   eax,eax
c0021c04:	74 0e                	je     c0021c14 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021c06:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021c09:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021c0c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021c0f:	89 10                	mov    DWORD PTR [eax],edx
c0021c11:	31 c0                	xor    eax,eax
c0021c13:	c3                   	ret    
c0021c14:	b8 04 00 00 00       	mov    eax,0x4
c0021c19:	c3                   	ret    

c0021c1a <ISO9660::getName()>:
c0021c1a:	b8 28 d5 02 c0       	mov    eax,0xc002d528
c0021c1f:	c3                   	ret    

c0021c20 <ISO9660::stat(void*, unsigned long long*)>:
c0021c20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c28:	85 d2                	test   edx,edx
c0021c2a:	74 12                	je     c0021c3e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021c2c:	85 c0                	test   eax,eax
c0021c2e:	74 0e                	je     c0021c3e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021c30:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021c33:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021c36:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021c39:	89 10                	mov    DWORD PTR [eax],edx
c0021c3b:	31 c0                	xor    eax,eax
c0021c3d:	c3                   	ret    
c0021c3e:	b8 04 00 00 00       	mov    eax,0x4
c0021c43:	c3                   	ret    

c0021c44 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021c44:	b8 01 00 00 00       	mov    eax,0x1
c0021c49:	c3                   	ret    

c0021c4a <ISO9660::unlink(char const*)>:
c0021c4a:	b8 01 00 00 00       	mov    eax,0x1
c0021c4f:	c3                   	ret    

c0021c50 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021c50:	b8 01 00 00 00       	mov    eax,0x1
c0021c55:	c3                   	ret    

c0021c56 <ISO9660::rename(char const*, char const*)>:
c0021c56:	b8 01 00 00 00       	mov    eax,0x1
c0021c5b:	c3                   	ret    

c0021c5c <ISO9660::mkdir(char const*)>:
c0021c5c:	b8 01 00 00 00       	mov    eax,0x1
c0021c61:	c3                   	ret    

c0021c62 <ISO9660::close(void*)>:
c0021c62:	83 ec 0c             	sub    esp,0xc
c0021c65:	b8 04 00 00 00       	mov    eax,0x4
c0021c6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c6e:	85 d2                	test   edx,edx
c0021c70:	74 0e                	je     c0021c80 <ISO9660::close(void*)+0x1e>
c0021c72:	83 ec 0c             	sub    esp,0xc
c0021c75:	52                   	push   edx
c0021c76:	e8 21 dc fe ff       	call   c000f89c <free>
c0021c7b:	83 c4 10             	add    esp,0x10
c0021c7e:	31 c0                	xor    eax,eax
c0021c80:	83 c4 0c             	add    esp,0xc
c0021c83:	c3                   	ret    

c0021c84 <ISO9660::closeDir(void*)>:
c0021c84:	83 ec 0c             	sub    esp,0xc
c0021c87:	b8 04 00 00 00       	mov    eax,0x4
c0021c8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c90:	85 d2                	test   edx,edx
c0021c92:	74 0e                	je     c0021ca2 <ISO9660::closeDir(void*)+0x1e>
c0021c94:	83 ec 0c             	sub    esp,0xc
c0021c97:	52                   	push   edx
c0021c98:	e8 ff db fe ff       	call   c000f89c <free>
c0021c9d:	83 c4 10             	add    esp,0x10
c0021ca0:	31 c0                	xor    eax,eax
c0021ca2:	83 c4 0c             	add    esp,0xc
c0021ca5:	c3                   	ret    

c0021ca6 <ISO9660::~ISO9660()>:
c0021ca6:	83 ec 0c             	sub    esp,0xc
c0021ca9:	ba 8c d5 02 c0       	mov    edx,0xc002d58c
c0021cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb2:	89 10                	mov    DWORD PTR [eax],edx
c0021cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb8:	83 ec 0c             	sub    esp,0xc
c0021cbb:	50                   	push   eax
c0021cbc:	e8 75 11 ff ff       	call   c0012e36 <Filesystem::~Filesystem()>
c0021cc1:	83 c4 10             	add    esp,0x10
c0021cc4:	90                   	nop
c0021cc5:	83 c4 0c             	add    esp,0xc
c0021cc8:	c3                   	ret    
c0021cc9:	90                   	nop

c0021cca <ISO9660::~ISO9660()>:
c0021cca:	83 ec 0c             	sub    esp,0xc
c0021ccd:	83 ec 0c             	sub    esp,0xc
c0021cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cd4:	e8 cd ff ff ff       	call   c0021ca6 <ISO9660::~ISO9660()>
c0021cd9:	83 c4 10             	add    esp,0x10
c0021cdc:	83 ec 08             	sub    esp,0x8
c0021cdf:	6a 08                	push   0x8
c0021ce1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ce5:	e8 3d 0d ff ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0021cea:	83 c4 10             	add    esp,0x10
c0021ced:	83 c4 0c             	add    esp,0xc
c0021cf0:	c3                   	ret    

c0021cf1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021cf1:	55                   	push   ebp
c0021cf2:	31 c9                	xor    ecx,ecx
c0021cf4:	57                   	push   edi
c0021cf5:	56                   	push   esi
c0021cf6:	53                   	push   ebx
c0021cf7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021cfb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021cff:	89 eb                	mov    ebx,ebp
c0021d01:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021d05:	39 ce                	cmp    esi,ecx
c0021d07:	7e 17                	jle    c0021d20 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021d09:	31 d2                	xor    edx,edx
c0021d0b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021d0f:	7d 13                	jge    c0021d24 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021d11:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021d15:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d18:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021d1b:	75 0d                	jne    c0021d2a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021d1d:	42                   	inc    edx
c0021d1e:	eb eb                	jmp    c0021d0b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021d20:	31 c0                	xor    eax,eax
c0021d22:	eb 0a                	jmp    c0021d2e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021d24:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021d28:	eb 04                	jmp    c0021d2e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021d2a:	41                   	inc    ecx
c0021d2b:	43                   	inc    ebx
c0021d2c:	eb d7                	jmp    c0021d05 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021d2e:	5b                   	pop    ebx
c0021d2f:	5e                   	pop    esi
c0021d30:	5f                   	pop    edi
c0021d31:	5d                   	pop    ebp
c0021d32:	c3                   	ret    

c0021d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021d33:	57                   	push   edi
c0021d34:	56                   	push   esi
c0021d35:	53                   	push   ebx
c0021d36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021d3e:	39 0d e0 28 03 c0    	cmp    DWORD PTR ds:0xc00328e0,ecx
c0021d44:	75 08                	jne    c0021d4e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021d46:	38 05 34 e7 02 c0    	cmp    BYTE PTR ds:0xc002e734,al
c0021d4c:	74 2b                	je     c0021d79 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021d4e:	83 ec 0c             	sub    esp,0xc
c0021d51:	a2 34 e7 02 c0       	mov    ds:0xc002e734,al
c0021d56:	68 00 29 03 c0       	push   0xc0032900
c0021d5b:	0f be c0             	movsx  eax,al
c0021d5e:	6a 01                	push   0x1
c0021d60:	89 0d e0 28 03 c0    	mov    DWORD PTR ds:0xc00328e0,ecx
c0021d66:	31 db                	xor    ebx,ebx
c0021d68:	53                   	push   ebx
c0021d69:	51                   	push   ecx
c0021d6a:	ff 34 85 bc f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0944]
c0021d71:	e8 0e 47 ff ff       	call   c0016484 <LogicalDisk::read(unsigned long long, int, void*)>
c0021d76:	83 c4 20             	add    esp,0x20
c0021d79:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021d7d:	be 00 29 03 c0       	mov    esi,0xc0032900
c0021d82:	b9 00 08 00 00       	mov    ecx,0x800
c0021d87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021d89:	5b                   	pop    ebx
c0021d8a:	5e                   	pop    esi
c0021d8b:	5f                   	pop    edi
c0021d8c:	c3                   	ret    
c0021d8d:	90                   	nop

c0021d8e <ISO9660::tryMount(LogicalDisk*, int)>:
c0021d8e:	81 ec 10 08 00 00    	sub    esp,0x810
c0021d94:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021d9b:	83 c0 41             	add    eax,0x41
c0021d9e:	0f be c0             	movsx  eax,al
c0021da1:	50                   	push   eax
c0021da2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021da6:	50                   	push   eax
c0021da7:	6a 10                	push   0x10
c0021da9:	e8 85 ff ff ff       	call   c0021d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dae:	83 c4 10             	add    esp,0x10
c0021db1:	31 c0                	xor    eax,eax
c0021db3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021db8:	75 1d                	jne    c0021dd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021dba:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021dbf:	75 16                	jne    c0021dd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021dc1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021dc6:	75 0f                	jne    c0021dd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021dc8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021dcd:	75 08                	jne    c0021dd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021dcf:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021dd4:	0f 94 c0             	sete   al
c0021dd7:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021ddd:	c3                   	ret    

c0021dde <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021dde:	55                   	push   ebp
c0021ddf:	57                   	push   edi
c0021de0:	56                   	push   esi
c0021de1:	53                   	push   ebx
c0021de2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021de8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021def:	85 ed                	test   ebp,ebp
c0021df1:	0f 84 da 01 00 00    	je     c0021fd1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021df7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021dff:	0f 84 cc 01 00 00    	je     c0021fd1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021e05:	b8 01 00 00 00       	mov    eax,0x1
c0021e0a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021e0e:	0f 85 c2 01 00 00    	jne    c0021fd6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021e14:	31 d2                	xor    edx,edx
c0021e16:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021e1d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021e20:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021e23:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021e26:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021e2d:	01 c8                	add    eax,ecx
c0021e2f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021e32:	11 da                	adc    edx,ebx
c0021e34:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021e38:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021e3c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021e40:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021e44:	19 d7                	sbb    edi,edx
c0021e46:	72 11                	jb     c0021e59 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021e48:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021e4b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021e4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021e57:	eb 0c                	jmp    c0021e65 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021e59:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021e5d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021e61:	29 ce                	sub    esi,ecx
c0021e63:	19 df                	sbb    edi,ebx
c0021e65:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021e68:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021e6b:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021e6f:	c1 e0 0b             	shl    eax,0xb
c0021e72:	01 c8                	add    eax,ecx
c0021e74:	11 da                	adc    edx,ebx
c0021e76:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021e7d:	51                   	push   ecx
c0021e7e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021e82:	50                   	push   eax
c0021e83:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021e87:	53                   	push   ebx
c0021e88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021e8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e90:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021e94:	50                   	push   eax
c0021e95:	e8 99 fe ff ff       	call   c0021d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e9a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021e9d:	b8 00 08 00 00       	mov    eax,0x800
c0021ea2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021ea8:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021eac:	29 d0                	sub    eax,edx
c0021eae:	83 c4 10             	add    esp,0x10
c0021eb1:	89 f9                	mov    ecx,edi
c0021eb3:	39 c6                	cmp    esi,eax
c0021eb5:	83 d9 00             	sbb    ecx,0x0
c0021eb8:	7d 1b                	jge    c0021ed5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021eba:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021ebf:	75 12                	jne    c0021ed3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021ec1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ec8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021ece:	e9 fa 00 00 00       	jmp    c0021fcd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021ed3:	89 f0                	mov    eax,esi
c0021ed5:	01 d3                	add    ebx,edx
c0021ed7:	31 d2                	xor    edx,edx
c0021ed9:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021edd:	39 c2                	cmp    edx,eax
c0021edf:	7d 14                	jge    c0021ef5 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021ee1:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021ee8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021eec:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021eef:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021ef2:	42                   	inc    edx
c0021ef3:	eb e8                	jmp    c0021edd <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021ef5:	89 c2                	mov    edx,eax
c0021ef7:	85 c0                	test   eax,eax
c0021ef9:	79 02                	jns    c0021efd <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021efb:	31 d2                	xor    edx,edx
c0021efd:	01 c2                	add    edx,eax
c0021eff:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021f02:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021f09:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021f0d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021f11:	99                   	cdq    
c0021f12:	01 c1                	add    ecx,eax
c0021f14:	11 d3                	adc    ebx,edx
c0021f16:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021f1a:	29 c6                	sub    esi,eax
c0021f1c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021f20:	19 d7                	sbb    edi,edx
c0021f22:	89 34 24             	mov    DWORD PTR [esp],esi
c0021f25:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021f29:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021f2e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021f31:	b8 00 00 00 00       	mov    eax,0x0
c0021f36:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021f3a:	7d 43                	jge    c0021f7f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021f3c:	52                   	push   edx
c0021f3d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021f41:	50                   	push   eax
c0021f42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f4a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021f4e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021f52:	50                   	push   eax
c0021f53:	e8 db fd ff ff       	call   c0021d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f58:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021f60:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021f65:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021f6d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021f75:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021f7a:	83 c4 10             	add    esp,0x10
c0021f7d:	eb aa                	jmp    c0021f29 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f83:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021f86:	74 2a                	je     c0021fb2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021f88:	50                   	push   eax
c0021f89:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021f8d:	50                   	push   eax
c0021f8e:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021f92:	56                   	push   esi
c0021f93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021f97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021f9b:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021f9f:	51                   	push   ecx
c0021fa0:	e8 8e fd ff ff       	call   c0021d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021fa5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fa9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021fad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021faf:	83 c4 10             	add    esp,0x10
c0021fb2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021fb9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021fbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fc1:	89 18                	mov    DWORD PTR [eax],ebx
c0021fc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fc7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021fca:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021fcd:	31 c0                	xor    eax,eax
c0021fcf:	eb 05                	jmp    c0021fd6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021fd1:	b8 04 00 00 00       	mov    eax,0x4
c0021fd6:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021fdc:	5b                   	pop    ebx
c0021fdd:	5e                   	pop    esi
c0021fde:	5f                   	pop    edi
c0021fdf:	5d                   	pop    ebp
c0021fe0:	c3                   	ret    
c0021fe1:	90                   	nop

c0021fe2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021fe2:	55                   	push   ebp
c0021fe3:	57                   	push   edi
c0021fe4:	56                   	push   esi
c0021fe5:	53                   	push   ebx
c0021fe6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021fec:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021ff3:	85 ed                	test   ebp,ebp
c0021ff5:	0f 84 51 02 00 00    	je     c002224c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021ffb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0022003:	0f 84 43 02 00 00    	je     c002224c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0022009:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002200c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002200f:	75 0a                	jne    c002201b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0022011:	b8 07 00 00 00       	mov    eax,0x7
c0022016:	e9 36 02 00 00       	jmp    c0022251 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002201b:	50                   	push   eax
c002201c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022020:	50                   	push   eax
c0022021:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022028:	53                   	push   ebx
c0022029:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002202c:	c1 e0 0b             	shl    eax,0xb
c002202f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0022032:	c1 e8 0b             	shr    eax,0xb
c0022035:	50                   	push   eax
c0022036:	e8 f8 fc ff ff       	call   c0021d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002203b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002203e:	83 c4 10             	add    esp,0x10
c0022041:	89 c1                	mov    ecx,eax
c0022043:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0022046:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002204c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002204f:	84 db                	test   bl,bl
c0022051:	0f 85 8b 00 00 00    	jne    c00220e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0022057:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002205d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0022060:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0022066:	29 c6                	sub    esi,eax
c0022068:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002206c:	89 f3                	mov    ebx,esi
c002206e:	89 f1                	mov    ecx,esi
c0022070:	c1 fb 1f             	sar    ebx,0x1f
c0022073:	01 f0                	add    eax,esi
c0022075:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0022078:	11 da                	adc    edx,ebx
c002207a:	89 04 24             	mov    DWORD PTR [esp],eax
c002207d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022081:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022084:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022087:	89 d8                	mov    eax,ebx
c0022089:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c002208d:	ba 00 00 00 00       	mov    edx,0x0
c0022092:	19 f8                	sbb    eax,edi
c0022094:	b8 00 00 00 00       	mov    eax,0x0
c0022099:	73 08                	jae    c00220a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c002209b:	89 f0                	mov    eax,esi
c002209d:	89 fa                	mov    edx,edi
c002209f:	29 c8                	sub    eax,ecx
c00220a1:	19 da                	sbb    edx,ebx
c00220a3:	89 d7                	mov    edi,edx
c00220a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00220a8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00220ab:	09 c7                	or     edi,eax
c00220ad:	0f 84 5e ff ff ff    	je     c0022011 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00220b3:	57                   	push   edi
c00220b4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220b8:	50                   	push   eax
c00220b9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00220c0:	53                   	push   ebx
c00220c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00220c4:	c1 e0 0b             	shl    eax,0xb
c00220c7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00220cb:	c1 e8 0b             	shr    eax,0xb
c00220ce:	50                   	push   eax
c00220cf:	e8 5f fc ff ff       	call   c0021d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00220d7:	83 c4 10             	add    esp,0x10
c00220da:	25 ff 07 00 00       	and    eax,0x7ff
c00220df:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00220e2:	31 ff                	xor    edi,edi
c00220e4:	56                   	push   esi
c00220e5:	6a 28                	push   0x28
c00220e7:	6a 00                	push   0x0
c00220e9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00220ed:	50                   	push   eax
c00220ee:	e8 5d e6 fd ff       	call   c0000750 <memset>
c00220f3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00220f6:	25 ff 07 00 00       	and    eax,0x7ff
c00220fb:	89 c6                	mov    esi,eax
c00220fd:	83 c6 21             	add    esi,0x21
c0022100:	83 d7 00             	adc    edi,0x0
c0022103:	83 c4 10             	add    esp,0x10
c0022106:	31 c9                	xor    ecx,ecx
c0022108:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002210f:	83 f9 28             	cmp    ecx,0x28
c0022112:	88 04 24             	mov    BYTE PTR [esp],al
c0022115:	0f 94 c2             	sete   dl
c0022118:	88 d0                	mov    al,dl
c002211a:	ba ff 07 00 00       	mov    edx,0x7ff
c002211f:	39 f2                	cmp    edx,esi
c0022121:	ba 00 00 00 00       	mov    edx,0x0
c0022126:	19 fa                	sbb    edx,edi
c0022128:	0f 92 c2             	setb   dl
c002212b:	09 c2                	or     edx,eax
c002212d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0022131:	0f 94 c0             	sete   al
c0022134:	08 d0                	or     al,dl
c0022136:	75 16                	jne    c002214e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0022138:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002213c:	74 10                	je     c002214e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002213e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0022141:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0022145:	41                   	inc    ecx
c0022146:	83 c6 01             	add    esi,0x1
c0022149:	83 d7 00             	adc    edi,0x0
c002214c:	eb ba                	jmp    c0022108 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002214e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0022155:	83 ec 0c             	sub    esp,0xc
c0022158:	8d 74 24 24          	lea    esi,[esp+0x24]
c002215c:	56                   	push   esi
c002215d:	e8 0a e6 fd ff       	call   c000076c <strlen>
c0022162:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0022169:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002216d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0022175:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022178:	5a                   	pop    edx
c0022179:	25 ff 07 00 00       	and    eax,0x7ff
c002217e:	59                   	pop    ecx
c002217f:	01 f8                	add    eax,edi
c0022181:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0022187:	83 e0 02             	and    eax,0x2
c002218a:	3c 01                	cmp    al,0x1
c002218c:	19 c0                	sbb    eax,eax
c002218e:	83 c0 02             	add    eax,0x2
c0022191:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022195:	56                   	push   esi
c0022196:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002219a:	50                   	push   eax
c002219b:	e8 6c e6 fd ff       	call   c000080c <strcpy>
c00221a0:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00221a4:	83 c4 10             	add    esp,0x10
c00221a7:	84 c0                	test   al,al
c00221a9:	75 21                	jne    c00221cc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00221ab:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00221b3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00221bb:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00221c3:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00221ca:	eb 28                	jmp    c00221f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00221cc:	fe c8                	dec    al
c00221ce:	75 24                	jne    c00221f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00221d0:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00221d8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00221e0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00221e8:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00221ef:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00221f4:	8d 74 24 40          	lea    esi,[esp+0x40]
c00221f8:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00221ff:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0022206:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022208:	0f b6 f3             	movzx  esi,bl
c002220b:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0022212:	31 db                	xor    ebx,ebx
c0022214:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002221a:	89 df                	mov    edi,ebx
c002221c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002221f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022222:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0022225:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022228:	39 c6                	cmp    esi,eax
c002222a:	19 d7                	sbb    edi,edx
c002222c:	72 10                	jb     c002223e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002222e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0022235:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002223c:	eb 0a                	jmp    c0022248 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002223e:	29 f0                	sub    eax,esi
c0022240:	19 da                	sbb    edx,ebx
c0022242:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022245:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022248:	31 c0                	xor    eax,eax
c002224a:	eb 05                	jmp    c0022251 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002224c:	b8 04 00 00 00       	mov    eax,0x4
c0022251:	81 c4 5c 09 00 00    	add    esp,0x95c
c0022257:	5b                   	pop    ebx
c0022258:	5e                   	pop    esi
c0022259:	5f                   	pop    edi
c002225a:	5d                   	pop    ebp
c002225b:	c3                   	ret    

c002225c <readRoot(unsigned int*, unsigned int*, char)>:
c002225c:	57                   	push   edi
c002225d:	56                   	push   esi
c002225e:	81 ec 38 08 00 00    	sub    esp,0x838
c0022264:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002226c:	50                   	push   eax
c002226d:	8d 44 24 38          	lea    eax,[esp+0x38]
c0022271:	50                   	push   eax
c0022272:	6a 10                	push   0x10
c0022274:	e8 ba fa ff ff       	call   c0021d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022279:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0022280:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0022284:	b9 22 00 00 00       	mov    ecx,0x22
c0022289:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002228b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022292:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022296:	89 10                	mov    DWORD PTR [eax],edx
c0022298:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002229f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00222a3:	89 10                	mov    DWORD PTR [eax],edx
c00222a5:	81 c4 44 08 00 00    	add    esp,0x844
c00222ab:	b0 01                	mov    al,0x1
c00222ad:	5e                   	pop    esi
c00222ae:	5f                   	pop    edi
c00222af:	c3                   	ret    

c00222b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00222b0:	55                   	push   ebp
c00222b1:	57                   	push   edi
c00222b2:	56                   	push   esi
c00222b3:	53                   	push   ebx
c00222b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00222ba:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00222c1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00222c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00222cc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00222d0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00222d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00222d8:	75 03                	jne    c00222dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00222da:	83 c3 02             	add    ebx,0x2
c00222dd:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00222e0:	75 03                	jne    c00222e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00222e2:	43                   	inc    ebx
c00222e3:	eb f8                	jmp    c00222dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00222e5:	51                   	push   ecx
c00222e6:	68 00 01 00 00       	push   0x100
c00222eb:	6a 00                	push   0x0
c00222ed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222f1:	50                   	push   eax
c00222f2:	e8 59 e4 fd ff       	call   c0000750 <memset>
c00222f7:	83 c4 10             	add    esp,0x10
c00222fa:	31 d2                	xor    edx,edx
c00222fc:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00222ff:	84 c0                	test   al,al
c0022301:	74 21                	je     c0022324 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022303:	3c 2f                	cmp    al,0x2f
c0022305:	75 0b                	jne    c0022312 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022307:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002230b:	bd 01 00 00 00       	mov    ebp,0x1
c0022310:	eb 14                	jmp    c0022326 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0022312:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022315:	80 f9 19             	cmp    cl,0x19
c0022318:	77 03                	ja     c002231d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002231a:	83 e8 20             	sub    eax,0x20
c002231d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0022321:	42                   	inc    edx
c0022322:	eb d8                	jmp    c00222fc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0022324:	31 ed                	xor    ebp,ebp
c0022326:	83 ec 0c             	sub    esp,0xc
c0022329:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0022330:	e8 57 d5 fe ff       	call   c000f88c <malloc>
c0022335:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002233c:	89 c6                	mov    esi,eax
c002233e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022344:	c1 ef 0b             	shr    edi,0xb
c0022347:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002234e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022352:	83 c4 10             	add    esp,0x10
c0022355:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002235a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002235e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022365:	74 28                	je     c002238f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022367:	52                   	push   edx
c0022368:	57                   	push   edi
c0022369:	50                   	push   eax
c002236a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002236e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022375:	e8 b9 f9 ff ff       	call   c0021d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002237a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002237e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022385:	05 00 08 00 00       	add    eax,0x800
c002238a:	83 c4 10             	add    esp,0x10
c002238d:	eb cb                	jmp    c002235a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002238f:	83 ec 0c             	sub    esp,0xc
c0022392:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022396:	57                   	push   edi
c0022397:	e8 d0 e3 fd ff       	call   c000076c <strlen>
c002239c:	50                   	push   eax
c002239d:	57                   	push   edi
c002239e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00223a5:	56                   	push   esi
c00223a6:	e8 46 f9 ff ff       	call   c0021cf1 <__memmem(unsigned char*, int, unsigned char*, int)>
c00223ab:	83 c4 20             	add    esp,0x20
c00223ae:	85 c0                	test   eax,eax
c00223b0:	75 13                	jne    c00223c5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00223b2:	83 ec 0c             	sub    esp,0xc
c00223b5:	56                   	push   esi
c00223b6:	e8 e1 d4 fe ff       	call   c000f89c <free>
c00223bb:	83 c4 10             	add    esp,0x10
c00223be:	31 c0                	xor    eax,eax
c00223c0:	e9 b3 00 00 00       	jmp    c0022478 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00223c5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00223c9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00223cd:	c1 e7 08             	shl    edi,0x8
c00223d0:	c1 e2 10             	shl    edx,0x10
c00223d3:	09 d7                	or     edi,edx
c00223d5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00223d9:	09 d7                	or     edi,edx
c00223db:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00223df:	c1 e2 18             	shl    edx,0x18
c00223e2:	09 d7                	or     edi,edx
c00223e4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00223e8:	89 d1                	mov    ecx,edx
c00223ea:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00223ee:	c1 e1 08             	shl    ecx,0x8
c00223f1:	c1 e2 10             	shl    edx,0x10
c00223f4:	09 ca                	or     edx,ecx
c00223f6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00223fa:	09 ca                	or     edx,ecx
c00223fc:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022400:	c1 e1 18             	shl    ecx,0x18
c0022403:	09 ca                	or     edx,ecx
c0022405:	89 e9                	mov    ecx,ebp
c0022407:	84 c9                	test   cl,cl
c0022409:	74 3c                	je     c0022447 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002240b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002240f:	83 ec 0c             	sub    esp,0xc
c0022412:	56                   	push   esi
c0022413:	e8 84 d4 fe ff       	call   c000f89c <free>
c0022418:	83 c4 0c             	add    esp,0xc
c002241b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022422:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022427:	50                   	push   eax
c0022428:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002242f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022436:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002243a:	52                   	push   edx
c002243b:	57                   	push   edi
c002243c:	53                   	push   ebx
c002243d:	e8 6e fe ff ff       	call   c00222b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022442:	83 c4 20             	add    esp,0x20
c0022445:	eb 31                	jmp    c0022478 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022447:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002244a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0022451:	d0 e8                	shr    al,1
c0022453:	89 3b                	mov    DWORD PTR [ebx],edi
c0022455:	83 e0 01             	and    eax,0x1
c0022458:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002245f:	83 ec 0c             	sub    esp,0xc
c0022462:	89 13                	mov    DWORD PTR [ebx],edx
c0022464:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002246b:	89 03                	mov    DWORD PTR [ebx],eax
c002246d:	56                   	push   esi
c002246e:	e8 29 d4 fe ff       	call   c000f89c <free>
c0022473:	83 c4 10             	add    esp,0x10
c0022476:	b0 01                	mov    al,0x1
c0022478:	81 c4 1c 01 00 00    	add    esp,0x11c
c002247e:	5b                   	pop    ebx
c002247f:	5e                   	pop    esi
c0022480:	5f                   	pop    edi
c0022481:	5d                   	pop    ebp
c0022482:	c3                   	ret    

c0022483 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022483:	55                   	push   ebp
c0022484:	57                   	push   edi
c0022485:	56                   	push   esi
c0022486:	53                   	push   ebx
c0022487:	83 ec 20             	sub    esp,0x20
c002248a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002248e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022492:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022496:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002249e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00224a6:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00224ab:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00224b1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00224b7:	57                   	push   edi
c00224b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224bc:	50                   	push   eax
c00224bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224c1:	50                   	push   eax
c00224c2:	e8 95 fd ff ff       	call   c002225c <readRoot(unsigned int*, unsigned int*, char)>
c00224c7:	5a                   	pop    edx
c00224c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00224cc:	e8 9b e2 fd ff       	call   c000076c <strlen>
c00224d1:	83 c4 10             	add    esp,0x10
c00224d4:	83 f8 03             	cmp    eax,0x3
c00224d7:	77 17                	ja     c00224f0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00224d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00224dd:	89 03                	mov    DWORD PTR [ebx],eax
c00224df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224e3:	89 06                	mov    DWORD PTR [esi],eax
c00224e5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00224ec:	b0 01                	mov    al,0x1
c00224ee:	eb 19                	jmp    c0022509 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00224f0:	50                   	push   eax
c00224f1:	55                   	push   ebp
c00224f2:	57                   	push   edi
c00224f3:	56                   	push   esi
c00224f4:	53                   	push   ebx
c00224f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00224f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00224fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022501:	e8 aa fd ff ff       	call   c00222b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022506:	83 c4 20             	add    esp,0x20
c0022509:	83 c4 1c             	add    esp,0x1c
c002250c:	5b                   	pop    ebx
c002250d:	5e                   	pop    esi
c002250e:	5f                   	pop    edi
c002250f:	5d                   	pop    ebp
c0022510:	c3                   	ret    
c0022511:	90                   	nop

c0022512 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022512:	57                   	push   edi
c0022513:	56                   	push   esi
c0022514:	53                   	push   ebx
c0022515:	83 ec 10             	sub    esp,0x10
c0022518:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002251c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022520:	85 ff                	test   edi,edi
c0022522:	0f 84 9d 00 00 00    	je     c00225c5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022528:	85 f6                	test   esi,esi
c002252a:	0f 84 95 00 00 00    	je     c00225c5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022530:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022535:	74 17                	je     c002254e <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022537:	83 ec 0c             	sub    esp,0xc
c002253a:	68 43 d5 02 c0       	push   0xc002d543
c002253f:	e8 c3 05 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0022544:	83 c4 10             	add    esp,0x10
c0022547:	b8 03 00 00 00       	mov    eax,0x3
c002254c:	eb 7c                	jmp    c00225ca <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002254e:	83 ec 0c             	sub    esp,0xc
c0022551:	6a 1c                	push   0x1c
c0022553:	e8 34 d3 fe ff       	call   c000f88c <malloc>
c0022558:	89 07                	mov    DWORD PTR [edi],eax
c002255a:	89 c3                	mov    ebx,eax
c002255c:	58                   	pop    eax
c002255d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022561:	50                   	push   eax
c0022562:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022565:	50                   	push   eax
c0022566:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002256a:	50                   	push   eax
c002256b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002256f:	50                   	push   eax
c0022570:	56                   	push   esi
c0022571:	e8 0d ff ff ff       	call   c0022483 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022576:	83 c4 20             	add    esp,0x20
c0022579:	84 c0                	test   al,al
c002257b:	74 07                	je     c0022584 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002257d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022582:	74 0b                	je     c002258f <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022584:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022588:	b8 01 00 00 00       	mov    eax,0x1
c002258d:	eb 3b                	jmp    c00225ca <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002258f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022593:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022597:	89 03                	mov    DWORD PTR [ebx],eax
c0022599:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00225a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00225a4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00225ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00225b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00225b5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00225bc:	8a 06                	mov    al,BYTE PTR [esi]
c00225be:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00225c1:	31 c0                	xor    eax,eax
c00225c3:	eb 05                	jmp    c00225ca <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00225c5:	b8 04 00 00 00       	mov    eax,0x4
c00225ca:	83 c4 10             	add    esp,0x10
c00225cd:	5b                   	pop    ebx
c00225ce:	5e                   	pop    esi
c00225cf:	5f                   	pop    edi
c00225d0:	c3                   	ret    
c00225d1:	90                   	nop

c00225d2 <ISO9660::exists(char const*)>:
c00225d2:	83 ec 28             	sub    esp,0x28
c00225d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225d9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00225dd:	52                   	push   edx
c00225de:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00225e1:	52                   	push   edx
c00225e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00225e6:	52                   	push   edx
c00225e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00225eb:	52                   	push   edx
c00225ec:	50                   	push   eax
c00225ed:	e8 91 fe ff ff       	call   c0022483 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00225f2:	83 c4 3c             	add    esp,0x3c
c00225f5:	c3                   	ret    

c00225f6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00225f6:	56                   	push   esi
c00225f7:	53                   	push   ebx
c00225f8:	83 ec 14             	sub    esp,0x14
c00225fb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00225ff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022603:	85 db                	test   ebx,ebx
c0022605:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022609:	0f 94 c2             	sete   dl
c002260c:	85 f6                	test   esi,esi
c002260e:	0f 94 c0             	sete   al
c0022611:	08 c2                	or     dl,al
c0022613:	75 68                	jne    c002267d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022615:	85 c9                	test   ecx,ecx
c0022617:	74 64                	je     c002267d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022619:	83 ec 0c             	sub    esp,0xc
c002261c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002261f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022623:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022629:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022630:	50                   	push   eax
c0022631:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022634:	50                   	push   eax
c0022635:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022639:	50                   	push   eax
c002263a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002263e:	50                   	push   eax
c002263f:	51                   	push   ecx
c0022640:	e8 3e fe ff ff       	call   c0022483 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022645:	83 c4 20             	add    esp,0x20
c0022648:	ba 01 00 00 00       	mov    edx,0x1
c002264d:	84 c0                	test   al,al
c002264f:	74 31                	je     c0022682 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022655:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002265c:	89 03                	mov    DWORD PTR [ebx],eax
c002265e:	ba 00 00 00 00       	mov    edx,0x0
c0022663:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022667:	85 c0                	test   eax,eax
c0022669:	0f 95 06             	setne  BYTE PTR [esi]
c002266c:	74 14                	je     c0022682 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002266e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022674:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002267b:	eb 05                	jmp    c0022682 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002267d:	ba 04 00 00 00       	mov    edx,0x4
c0022682:	83 c4 14             	add    esp,0x14
c0022685:	89 d0                	mov    eax,edx
c0022687:	5b                   	pop    ebx
c0022688:	5e                   	pop    esi
c0022689:	c3                   	ret    

c002268a <ISO9660::openDir(char const*, void**)>:
c002268a:	57                   	push   edi
c002268b:	56                   	push   esi
c002268c:	53                   	push   ebx
c002268d:	83 ec 10             	sub    esp,0x10
c0022690:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022694:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022698:	85 ff                	test   edi,edi
c002269a:	0f 84 95 00 00 00    	je     c0022735 <ISO9660::openDir(char const*, void**)+0xab>
c00226a0:	85 f6                	test   esi,esi
c00226a2:	0f 84 8d 00 00 00    	je     c0022735 <ISO9660::openDir(char const*, void**)+0xab>
c00226a8:	83 ec 0c             	sub    esp,0xc
c00226ab:	6a 1c                	push   0x1c
c00226ad:	e8 da d1 fe ff       	call   c000f88c <malloc>
c00226b2:	89 07                	mov    DWORD PTR [edi],eax
c00226b4:	89 c3                	mov    ebx,eax
c00226b6:	59                   	pop    ecx
c00226b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00226bb:	50                   	push   eax
c00226bc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00226bf:	50                   	push   eax
c00226c0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226c4:	50                   	push   eax
c00226c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226c9:	50                   	push   eax
c00226ca:	56                   	push   esi
c00226cb:	e8 b3 fd ff ff       	call   c0022483 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00226d0:	83 c4 20             	add    esp,0x20
c00226d3:	84 c0                	test   al,al
c00226d5:	74 07                	je     c00226de <ISO9660::openDir(char const*, void**)+0x54>
c00226d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00226dc:	75 21                	jne    c00226ff <ISO9660::openDir(char const*, void**)+0x75>
c00226de:	0f b6 c0             	movzx  eax,al
c00226e1:	52                   	push   edx
c00226e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00226e6:	50                   	push   eax
c00226e7:	68 69 d5 02 c0       	push   0xc002d569
c00226ec:	e8 16 04 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00226f1:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00226f5:	83 c4 10             	add    esp,0x10
c00226f8:	b8 01 00 00 00       	mov    eax,0x1
c00226fd:	eb 3b                	jmp    c002273a <ISO9660::openDir(char const*, void**)+0xb0>
c00226ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022703:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022707:	89 03                	mov    DWORD PTR [ebx],eax
c0022709:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022710:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022714:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002271b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022722:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022725:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002272c:	8a 06                	mov    al,BYTE PTR [esi]
c002272e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022731:	31 c0                	xor    eax,eax
c0022733:	eb 05                	jmp    c002273a <ISO9660::openDir(char const*, void**)+0xb0>
c0022735:	b8 04 00 00 00       	mov    eax,0x4
c002273a:	83 c4 10             	add    esp,0x10
c002273d:	5b                   	pop    ebx
c002273e:	5e                   	pop    esi
c002273f:	5f                   	pop    edi
c0022740:	c3                   	ret    
c0022741:	90                   	nop

c0022742 <ISO9660::ISO9660()>:
c0022742:	83 ec 0c             	sub    esp,0xc
c0022745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022749:	83 ec 0c             	sub    esp,0xc
c002274c:	50                   	push   eax
c002274d:	e8 c0 06 ff ff       	call   c0012e12 <Filesystem::Filesystem()>
c0022752:	83 c4 10             	add    esp,0x10
c0022755:	ba 8c d5 02 c0       	mov    edx,0xc002d58c
c002275a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002275e:	89 10                	mov    DWORD PTR [eax],edx
c0022760:	90                   	nop
c0022761:	83 c4 0c             	add    esp,0xc
c0022764:	c3                   	ret    
c0022765:	90                   	nop

c0022766 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022766:	83 ec 1c             	sub    esp,0x1c
c0022769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002276d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022771:	89 10                	mov    DWORD PTR [eax],edx
c0022773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022777:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002277b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002277e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022782:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022786:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022789:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002278e:	75 23                	jne    c00227b3 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0022790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022794:	8b 10                	mov    edx,DWORD PTR [eax]
c0022796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002279a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002279d:	0f af c2             	imul   eax,edx
c00227a0:	85 c0                	test   eax,eax
c00227a2:	79 03                	jns    c00227a7 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00227a4:	83 c0 03             	add    eax,0x3
c00227a7:	c1 f8 02             	sar    eax,0x2
c00227aa:	05 a0 0f 00 00       	add    eax,0xfa0
c00227af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00227b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00227bb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00227be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227c2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00227c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227cd:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00227d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00227db:	c1 e0 02             	shl    eax,0x2
c00227de:	83 ec 0c             	sub    esp,0xc
c00227e1:	50                   	push   eax
c00227e2:	e8 a5 d0 fe ff       	call   c000f88c <malloc>
c00227e7:	83 c4 10             	add    esp,0x10
c00227ea:	89 c2                	mov    edx,eax
c00227ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00227f3:	83 ec 04             	sub    esp,0x4
c00227f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00227fa:	50                   	push   eax
c00227fb:	6a 01                	push   0x1
c00227fd:	6a 04                	push   0x4
c00227ff:	e8 61 63 fe ff       	call   c0008b65 <src_new>
c0022804:	83 c4 10             	add    esp,0x10
c0022807:	89 c2                	mov    edx,eax
c0022809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002280d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022810:	83 ec 0c             	sub    esp,0xc
c0022813:	68 ec d5 02 c0       	push   0xc002d5ec
c0022818:	e8 ea 02 ff ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c002281d:	83 c4 10             	add    esp,0x10
c0022820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022824:	85 c0                	test   eax,eax
c0022826:	74 10                	je     c0022838 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c0022828:	83 ec 0c             	sub    esp,0xc
c002282b:	68 02 d6 02 c0       	push   0xc002d602
c0022830:	e8 62 7e ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0022835:	83 c4 10             	add    esp,0x10
c0022838:	a0 00 35 03 c0       	mov    al,ds:0xc0033500
c002283d:	83 f0 01             	xor    eax,0x1
c0022840:	84 c0                	test   al,al
c0022842:	74 57                	je     c002289b <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c0022844:	a1 1c d6 02 c0       	mov    eax,ds:0xc002d61c
c0022849:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002284d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022855:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002285d:	7f 35                	jg     c0022894 <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c002285f:	83 ec 0c             	sub    esp,0xc
c0022862:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022866:	e8 34 55 00 00       	call   c0027d9f <__floatsisf>
c002286b:	83 c4 10             	add    esp,0x10
c002286e:	8b 15 1c d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d61c
c0022874:	83 ec 08             	sub    esp,0x8
c0022877:	52                   	push   edx
c0022878:	50                   	push   eax
c0022879:	e8 33 51 00 00       	call   c00279b1 <__mulsf3>
c002287e:	83 c4 10             	add    esp,0x10
c0022881:	89 c2                	mov    edx,eax
c0022883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022887:	89 14 85 00 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffccf00],edx
c002288e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022892:	eb c1                	jmp    c0022855 <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c0022894:	c6 05 00 35 03 c0 01 	mov    BYTE PTR ds:0xc0033500,0x1
c002289b:	90                   	nop
c002289c:	83 c4 1c             	add    esp,0x1c
c002289f:	c3                   	ret    

c00228a0 <SoundChannel::~SoundChannel()>:
c00228a0:	83 ec 0c             	sub    esp,0xc
c00228a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00228aa:	83 ec 0c             	sub    esp,0xc
c00228ad:	50                   	push   eax
c00228ae:	e8 e9 cf fe ff       	call   c000f89c <free>
c00228b3:	83 c4 10             	add    esp,0x10
c00228b6:	90                   	nop
c00228b7:	83 c4 0c             	add    esp,0xc
c00228ba:	c3                   	ret    
c00228bb:	90                   	nop

c00228bc <SoundChannel::getSampleRate()>:
c00228bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00228c2:	c3                   	ret    
c00228c3:	90                   	nop

c00228c4 <SoundChannel::getBits()>:
c00228c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228cb:	c3                   	ret    

c00228cc <SoundChannel::getBufferUsed()>:
c00228cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228d0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00228d3:	c3                   	ret    

c00228d4 <SoundChannel::getBufferSize()>:
c00228d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00228db:	c3                   	ret    

c00228dc <SoundChannel::unbuffer(float*, int, int)>:
c00228dc:	56                   	push   esi
c00228dd:	53                   	push   ebx
c00228de:	83 ec 40             	sub    esp,0x40
c00228e1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00228e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00228e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00228ec:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00228ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00228f3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00228f7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00228fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00228ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022903:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022907:	e8 93 54 00 00       	call   c0027d9f <__floatsisf>
c002290c:	5a                   	pop    edx
c002290d:	89 c6                	mov    esi,eax
c002290f:	ff 33                	push   DWORD PTR [ebx]
c0022911:	e8 89 54 00 00       	call   c0027d9f <__floatsisf>
c0022916:	59                   	pop    ecx
c0022917:	5a                   	pop    edx
c0022918:	50                   	push   eax
c0022919:	56                   	push   esi
c002291a:	e8 55 52 00 00       	call   c0027b74 <__divsf3>
c002291f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022922:	e8 48 67 00 00       	call   c002906f <__extendsfdf2>
c0022927:	59                   	pop    ecx
c0022928:	5e                   	pop    esi
c0022929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002292d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022931:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022939:	8d 44 24 14          	lea    eax,[esp+0x14]
c002293d:	50                   	push   eax
c002293e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022941:	e8 14 5e fe ff       	call   c000875a <src_process>
c0022946:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002294a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002294d:	83 c4 0c             	add    esp,0xc
c0022950:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022953:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022956:	29 d0                	sub    eax,edx
c0022958:	c1 e0 02             	shl    eax,0x2
c002295b:	50                   	push   eax
c002295c:	8d 04 91             	lea    eax,[ecx+edx*4]
c002295f:	50                   	push   eax
c0022960:	51                   	push   ecx
c0022961:	e8 22 dd fd ff       	call   c0000688 <memmove>
c0022966:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002296a:	83 c4 44             	add    esp,0x44
c002296d:	5b                   	pop    ebx
c002296e:	5e                   	pop    esi
c002296f:	c3                   	ret    

c0022970 <SoundChannel::buffer16(short*, int)>:
c0022970:	55                   	push   ebp
c0022971:	57                   	push   edi
c0022972:	56                   	push   esi
c0022973:	53                   	push   ebx
c0022974:	83 ec 1c             	sub    esp,0x1c
c0022977:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002297b:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c002297e:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022981:	0f 84 d2 00 00 00    	je     c0022a59 <SoundChannel::buffer16(short*, int)+0xe9>
c0022987:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002298b:	85 ed                	test   ebp,ebp
c002298d:	0f 8e c6 00 00 00    	jle    c0022a59 <SoundChannel::buffer16(short*, int)+0xe9>
c0022993:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022997:	bd 00 00 00 38       	mov    ebp,0x38000000
c002299c:	83 ec 0c             	sub    esp,0xc
c002299f:	0f bf 00             	movsx  eax,WORD PTR [eax]
c00229a2:	50                   	push   eax
c00229a3:	e8 f7 53 00 00       	call   c0027d9f <__floatsisf>
c00229a8:	59                   	pop    ecx
c00229a9:	8d 4e 01             	lea    ecx,[esi+0x1]
c00229ac:	5f                   	pop    edi
c00229ad:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00229b0:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00229b3:	55                   	push   ebp
c00229b4:	50                   	push   eax
c00229b5:	e8 f7 4f 00 00       	call   c00279b1 <__mulsf3>
c00229ba:	83 c4 10             	add    esp,0x10
c00229bd:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00229c0:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00229c3:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00229c6:	0f 84 99 00 00 00    	je     c0022a65 <SoundChannel::buffer16(short*, int)+0xf5>
c00229cc:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00229d1:	74 78                	je     c0022a4b <SoundChannel::buffer16(short*, int)+0xdb>
c00229d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00229d7:	83 ec 0c             	sub    esp,0xc
c00229da:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00229de:	50                   	push   eax
c00229df:	e8 bb 53 00 00       	call   c0027d9f <__floatsisf>
c00229e4:	5f                   	pop    edi
c00229e5:	8d 4e 01             	lea    ecx,[esi+0x1]
c00229e8:	5a                   	pop    edx
c00229e9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00229ec:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00229ef:	55                   	push   ebp
c00229f0:	50                   	push   eax
c00229f1:	e8 bb 4f 00 00       	call   c00279b1 <__mulsf3>
c00229f6:	83 c4 10             	add    esp,0x10
c00229f9:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00229fc:	be 02 00 00 00       	mov    esi,0x2
c0022a01:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022a04:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022a07:	74 46                	je     c0022a4f <SoundChannel::buffer16(short*, int)+0xdf>
c0022a09:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022a0d:	eb 36                	jmp    c0022a45 <SoundChannel::buffer16(short*, int)+0xd5>
c0022a0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022a13:	83 ec 0c             	sub    esp,0xc
c0022a16:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022a1a:	46                   	inc    esi
c0022a1b:	50                   	push   eax
c0022a1c:	e8 7e 53 00 00       	call   c0027d9f <__floatsisf>
c0022a21:	5a                   	pop    edx
c0022a22:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022a25:	59                   	pop    ecx
c0022a26:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022a29:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022a2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a30:	50                   	push   eax
c0022a31:	e8 7b 4f 00 00       	call   c00279b1 <__mulsf3>
c0022a36:	83 c4 10             	add    esp,0x10
c0022a39:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0022a3d:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022a40:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022a43:	74 0a                	je     c0022a4f <SoundChannel::buffer16(short*, int)+0xdf>
c0022a45:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022a49:	75 c4                	jne    c0022a0f <SoundChannel::buffer16(short*, int)+0x9f>
c0022a4b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022a4f:	83 c4 1c             	add    esp,0x1c
c0022a52:	89 f0                	mov    eax,esi
c0022a54:	5b                   	pop    ebx
c0022a55:	5e                   	pop    esi
c0022a56:	5f                   	pop    edi
c0022a57:	5d                   	pop    ebp
c0022a58:	c3                   	ret    
c0022a59:	83 c4 1c             	add    esp,0x1c
c0022a5c:	31 f6                	xor    esi,esi
c0022a5e:	5b                   	pop    ebx
c0022a5f:	89 f0                	mov    eax,esi
c0022a61:	5e                   	pop    esi
c0022a62:	5f                   	pop    edi
c0022a63:	5d                   	pop    ebp
c0022a64:	c3                   	ret    
c0022a65:	be 01 00 00 00       	mov    esi,0x1
c0022a6a:	eb e3                	jmp    c0022a4f <SoundChannel::buffer16(short*, int)+0xdf>

c0022a6c <SoundChannel::buffer8(unsigned char*, int)>:
c0022a6c:	55                   	push   ebp
c0022a6d:	57                   	push   edi
c0022a6e:	56                   	push   esi
c0022a6f:	53                   	push   ebx
c0022a70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a74:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022a78:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022a7b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022a7f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022a82:	74 7a                	je     c0022afe <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022a84:	85 ff                	test   edi,edi
c0022a86:	7e 76                	jle    c0022afe <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022a88:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022a8c:	8d 70 01             	lea    esi,[eax+0x1]
c0022a8f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022a92:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022a95:	8b 1c 9d 00 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccf00]
c0022a9c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022a9f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022aa2:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022aa5:	74 5e                	je     c0022b05 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022aa7:	83 ff 01             	cmp    edi,0x1
c0022aaa:	74 4b                	je     c0022af7 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022aac:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022ab0:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022ab3:	8d 70 01             	lea    esi,[eax+0x1]
c0022ab6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022ab9:	8b 1c 9d 00 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccf00]
c0022ac0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022ac3:	b8 02 00 00 00       	mov    eax,0x2
c0022ac8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022acb:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022ace:	75 23                	jne    c0022af3 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022ad0:	eb 27                	jmp    c0022af9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022ad2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022ad7:	8d 71 01             	lea    esi,[ecx+0x1]
c0022ada:	40                   	inc    eax
c0022adb:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022ade:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022ae1:	8b 1c 9d 00 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccf00]
c0022ae8:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022aeb:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022aee:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022af1:	74 06                	je     c0022af9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022af3:	39 c7                	cmp    edi,eax
c0022af5:	75 db                	jne    c0022ad2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022af7:	89 f8                	mov    eax,edi
c0022af9:	5b                   	pop    ebx
c0022afa:	5e                   	pop    esi
c0022afb:	5f                   	pop    edi
c0022afc:	5d                   	pop    ebp
c0022afd:	c3                   	ret    
c0022afe:	5b                   	pop    ebx
c0022aff:	31 c0                	xor    eax,eax
c0022b01:	5e                   	pop    esi
c0022b02:	5f                   	pop    edi
c0022b03:	5d                   	pop    ebp
c0022b04:	c3                   	ret    
c0022b05:	b8 01 00 00 00       	mov    eax,0x1
c0022b0a:	eb ed                	jmp    c0022af9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022b0c <SoundDevice::SoundDevice(char const*)>:
c0022b0c:	83 ec 1c             	sub    esp,0x1c
c0022b0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b13:	83 ec 08             	sub    esp,0x8
c0022b16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b1a:	50                   	push   eax
c0022b1b:	e8 24 16 ff ff       	call   c0014144 <Device::Device(char const*)>
c0022b20:	83 c4 10             	add    esp,0x10
c0022b23:	ba 1c d7 02 c0       	mov    edx,0xc002d71c
c0022b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b2c:	89 10                	mov    DWORD PTR [eax],edx
c0022b2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b32:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b40:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022b4a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b52:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022b57:	7f 19                	jg     c0022b72 <SoundDevice::SoundDevice(char const*)+0x66>
c0022b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022b61:	83 c2 54             	add    edx,0x54
c0022b64:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022b6c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022b70:	eb e0                	jmp    c0022b52 <SoundDevice::SoundDevice(char const*)+0x46>
c0022b72:	90                   	nop
c0022b73:	83 c4 1c             	add    esp,0x1c
c0022b76:	c3                   	ret    
c0022b77:	90                   	nop

c0022b78 <SoundDevice::~SoundDevice()>:
c0022b78:	53                   	push   ebx
c0022b79:	83 ec 18             	sub    esp,0x18
c0022b7c:	ba 1c d7 02 c0       	mov    edx,0xc002d71c
c0022b81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b85:	89 10                	mov    DWORD PTR [eax],edx
c0022b87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b8f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022b94:	7f 46                	jg     c0022bdc <SoundDevice::~SoundDevice()+0x64>
c0022b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022b9e:	83 c2 54             	add    edx,0x54
c0022ba1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022ba5:	85 c0                	test   eax,eax
c0022ba7:	74 2d                	je     c0022bd6 <SoundDevice::~SoundDevice()+0x5e>
c0022ba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022bb1:	83 c2 54             	add    edx,0x54
c0022bb4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022bb8:	85 db                	test   ebx,ebx
c0022bba:	74 1a                	je     c0022bd6 <SoundDevice::~SoundDevice()+0x5e>
c0022bbc:	83 ec 0c             	sub    esp,0xc
c0022bbf:	53                   	push   ebx
c0022bc0:	e8 db fc ff ff       	call   c00228a0 <SoundChannel::~SoundChannel()>
c0022bc5:	83 c4 10             	add    esp,0x10
c0022bc8:	83 ec 08             	sub    esp,0x8
c0022bcb:	6a 2c                	push   0x2c
c0022bcd:	53                   	push   ebx
c0022bce:	e8 54 fe fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0022bd3:	83 c4 10             	add    esp,0x10
c0022bd6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022bda:	eb b3                	jmp    c0022b8f <SoundDevice::~SoundDevice()+0x17>
c0022bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022be0:	83 ec 0c             	sub    esp,0xc
c0022be3:	50                   	push   eax
c0022be4:	e8 25 12 ff ff       	call   c0013e0e <Device::~Device()>
c0022be9:	83 c4 10             	add    esp,0x10
c0022bec:	90                   	nop
c0022bed:	83 c4 18             	add    esp,0x18
c0022bf0:	5b                   	pop    ebx
c0022bf1:	c3                   	ret    

c0022bf2 <SoundDevice::~SoundDevice()>:
c0022bf2:	83 ec 0c             	sub    esp,0xc
c0022bf5:	83 ec 0c             	sub    esp,0xc
c0022bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bfc:	e8 77 ff ff ff       	call   c0022b78 <SoundDevice::~SoundDevice()>
c0022c01:	83 c4 10             	add    esp,0x10
c0022c04:	83 ec 08             	sub    esp,0x8
c0022c07:	68 e4 01 00 00       	push   0x1e4
c0022c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c10:	e8 12 fe fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0022c15:	83 c4 10             	add    esp,0x10
c0022c18:	83 c4 0c             	add    esp,0xc
c0022c1b:	c3                   	ret    

c0022c1c <SoundDevice::getFreeChannelNum()>:
c0022c1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022c20:	31 c0                	xor    eax,eax
c0022c22:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022c2a:	74 09                	je     c0022c35 <SoundDevice::getFreeChannelNum()+0x19>
c0022c2c:	40                   	inc    eax
c0022c2d:	83 f8 20             	cmp    eax,0x20
c0022c30:	75 f0                	jne    c0022c22 <SoundDevice::getFreeChannelNum()+0x6>
c0022c32:	83 c8 ff             	or     eax,0xffffffff
c0022c35:	c3                   	ret    

c0022c36 <SoundDevice::addChannel(SoundChannel*)>:
c0022c36:	56                   	push   esi
c0022c37:	53                   	push   ebx
c0022c38:	51                   	push   ecx
c0022c39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022c3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022c41:	53                   	push   ebx
c0022c42:	e8 d5 ff ff ff       	call   c0022c1c <SoundDevice::getFreeChannelNum()>
c0022c47:	5a                   	pop    edx
c0022c48:	83 f8 ff             	cmp    eax,0xffffffff
c0022c4b:	74 51                	je     c0022c9e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022c4d:	85 f6                	test   esi,esi
c0022c4f:	74 4d                	je     c0022c9e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022c51:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022c58:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022c5f:	75 30                	jne    c0022c91 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022c61:	83 ec 0c             	sub    esp,0xc
c0022c64:	56                   	push   esi
c0022c65:	e8 52 fc ff ff       	call   c00228bc <SoundChannel::getSampleRate()>
c0022c6a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022c70:	89 34 24             	mov    DWORD PTR [esp],esi
c0022c73:	e8 4c fc ff ff       	call   c00228c4 <SoundChannel::getBits()>
c0022c78:	83 c4 0c             	add    esp,0xc
c0022c7b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022c81:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022c83:	50                   	push   eax
c0022c84:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022c8a:	53                   	push   ebx
c0022c8b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022c8e:	83 c4 10             	add    esp,0x10
c0022c91:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022c97:	b8 01 00 00 00       	mov    eax,0x1
c0022c9c:	eb 03                	jmp    c0022ca1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022c9e:	83 c8 ff             	or     eax,0xffffffff
c0022ca1:	5a                   	pop    edx
c0022ca2:	5b                   	pop    ebx
c0022ca3:	5e                   	pop    esi
c0022ca4:	c3                   	ret    
c0022ca5:	90                   	nop

c0022ca6 <SoundDevice::removeChannel(int)>:
c0022ca6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cae:	83 fa 1f             	cmp    edx,0x1f
c0022cb1:	77 23                	ja     c0022cd6 <SoundDevice::removeChannel(int)+0x30>
c0022cb3:	8d 14 90             	lea    edx,[eax+edx*4]
c0022cb6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022cbd:	74 17                	je     c0022cd6 <SoundDevice::removeChannel(int)+0x30>
c0022cbf:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022cc9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022ccf:	75 05                	jne    c0022cd6 <SoundDevice::removeChannel(int)+0x30>
c0022cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cd3:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022cd6:	c3                   	ret    
c0022cd7:	90                   	nop

c0022cd8 <SoundDevice::floatTo16(float*, short*, int)>:
c0022cd8:	57                   	push   edi
c0022cd9:	56                   	push   esi
c0022cda:	53                   	push   ebx
c0022cdb:	31 db                	xor    ebx,ebx
c0022cdd:	83 ec 10             	sub    esp,0x10
c0022ce0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022ce4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022ce8:	0f 8d d0 00 00 00    	jge    c0022dbe <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022cee:	83 ec 0c             	sub    esp,0xc
c0022cf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022cf5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022cf8:	e8 72 63 00 00       	call   c002906f <__extendsfdf2>
c0022cfd:	83 c4 10             	add    esp,0x10
c0022d00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d08:	68 00 00 f0 3f       	push   0x3ff00000
c0022d0d:	6a 00                	push   0x0
c0022d0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d17:	e8 df 52 00 00       	call   c0027ffb <__adddf3>
c0022d1c:	83 c4 10             	add    esp,0x10
c0022d1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d27:	68 00 00 e0 3f       	push   0x3fe00000
c0022d2c:	6a 00                	push   0x0
c0022d2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d36:	e8 3d 59 00 00       	call   c0028678 <__muldf3>
c0022d3b:	83 c4 10             	add    esp,0x10
c0022d3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d46:	68 c0 ff df 40       	push   0x40dfffc0
c0022d4b:	6a 00                	push   0x0
c0022d4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d55:	e8 1e 59 00 00       	call   c0028678 <__muldf3>
c0022d5a:	59                   	pop    ecx
c0022d5b:	5f                   	pop    edi
c0022d5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022d64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d6c:	e8 da 61 00 00       	call   c0028f4b <__truncdfsf2>
c0022d71:	5a                   	pop    edx
c0022d72:	89 c7                	mov    edi,eax
c0022d74:	59                   	pop    ecx
c0022d75:	68 00 fe ff 46       	push   0x46fffe00
c0022d7a:	50                   	push   eax
c0022d7b:	e8 75 52 00 00       	call   c0027ff5 <__gesf2>
c0022d80:	83 c4 10             	add    esp,0x10
c0022d83:	85 c0                	test   eax,eax
c0022d85:	78 08                	js     c0022d8f <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022d87:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022d8d:	eb 29                	jmp    c0022db8 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022d8f:	50                   	push   eax
c0022d90:	50                   	push   eax
c0022d91:	6a 00                	push   0x0
c0022d93:	57                   	push   edi
c0022d94:	e8 60 52 00 00       	call   c0027ff9 <__lesf2>
c0022d99:	83 c4 10             	add    esp,0x10
c0022d9c:	85 c0                	test   eax,eax
c0022d9e:	7f 08                	jg     c0022da8 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022da0:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022da6:	eb 10                	jmp    c0022db8 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022da8:	83 ec 0c             	sub    esp,0xc
c0022dab:	57                   	push   edi
c0022dac:	e8 5b 63 00 00       	call   c002910c <lrintf>
c0022db1:	83 c4 10             	add    esp,0x10
c0022db4:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022db8:	43                   	inc    ebx
c0022db9:	e9 26 ff ff ff       	jmp    c0022ce4 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022dbe:	83 c4 10             	add    esp,0x10
c0022dc1:	5b                   	pop    ebx
c0022dc2:	5e                   	pop    esi
c0022dc3:	5f                   	pop    edi
c0022dc4:	c3                   	ret    
c0022dc5:	90                   	nop

c0022dc6 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022dc6:	57                   	push   edi
c0022dc7:	56                   	push   esi
c0022dc8:	53                   	push   ebx
c0022dc9:	31 db                	xor    ebx,ebx
c0022dcb:	83 ec 10             	sub    esp,0x10
c0022dce:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022dd2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022dd6:	0f 8d cb 00 00 00    	jge    c0022ea7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022ddc:	83 ec 0c             	sub    esp,0xc
c0022ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022de3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022de6:	e8 84 62 00 00       	call   c002906f <__extendsfdf2>
c0022deb:	83 c4 10             	add    esp,0x10
c0022dee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022df2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022df6:	68 00 00 f0 3f       	push   0x3ff00000
c0022dfb:	6a 00                	push   0x0
c0022dfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e05:	e8 f1 51 00 00       	call   c0027ffb <__adddf3>
c0022e0a:	83 c4 10             	add    esp,0x10
c0022e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e15:	68 00 00 e0 3f       	push   0x3fe00000
c0022e1a:	6a 00                	push   0x0
c0022e1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e24:	e8 4f 58 00 00       	call   c0028678 <__muldf3>
c0022e29:	83 c4 10             	add    esp,0x10
c0022e2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e34:	68 00 00 60 40       	push   0x40600000
c0022e39:	6a 00                	push   0x0
c0022e3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e43:	e8 30 58 00 00       	call   c0028678 <__muldf3>
c0022e48:	59                   	pop    ecx
c0022e49:	5f                   	pop    edi
c0022e4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022e52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e5a:	e8 ec 60 00 00       	call   c0028f4b <__truncdfsf2>
c0022e5f:	5a                   	pop    edx
c0022e60:	89 c7                	mov    edi,eax
c0022e62:	59                   	pop    ecx
c0022e63:	68 00 00 fe 42       	push   0x42fe0000
c0022e68:	50                   	push   eax
c0022e69:	e8 87 51 00 00       	call   c0027ff5 <__gesf2>
c0022e6e:	83 c4 10             	add    esp,0x10
c0022e71:	85 c0                	test   eax,eax
c0022e73:	78 06                	js     c0022e7b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022e75:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022e79:	eb 26                	jmp    c0022ea1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022e7b:	50                   	push   eax
c0022e7c:	50                   	push   eax
c0022e7d:	6a 00                	push   0x0
c0022e7f:	57                   	push   edi
c0022e80:	e8 74 51 00 00       	call   c0027ff9 <__lesf2>
c0022e85:	83 c4 10             	add    esp,0x10
c0022e88:	85 c0                	test   eax,eax
c0022e8a:	7f 06                	jg     c0022e92 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022e8c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022e90:	eb 0f                	jmp    c0022ea1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022e92:	83 ec 0c             	sub    esp,0xc
c0022e95:	57                   	push   edi
c0022e96:	e8 71 62 00 00       	call   c002910c <lrintf>
c0022e9b:	83 c4 10             	add    esp,0x10
c0022e9e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022ea1:	43                   	inc    ebx
c0022ea2:	e9 2b ff ff ff       	jmp    c0022dd2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022ea7:	83 c4 10             	add    esp,0x10
c0022eaa:	5b                   	pop    ebx
c0022eab:	5e                   	pop    esi
c0022eac:	5f                   	pop    edi
c0022ead:	c3                   	ret    

c0022eae <SoundDevice::getAudio(int, float*, float*)>:
c0022eae:	55                   	push   ebp
c0022eaf:	57                   	push   edi
c0022eb0:	56                   	push   esi
c0022eb1:	53                   	push   ebx
c0022eb2:	83 ec 28             	sub    esp,0x28
c0022eb5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022eb9:	68 20 d6 02 c0       	push   0xc002d620
c0022ebe:	e8 44 fc fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0022ec3:	59                   	pop    ecx
c0022ec4:	5e                   	pop    esi
c0022ec5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022ec9:	68 37 d6 02 c0       	push   0xc002d637
c0022ece:	e8 34 fc fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0022ed3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022ed7:	83 c4 0c             	add    esp,0xc
c0022eda:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022ee1:	56                   	push   esi
c0022ee2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ee6:	68 59 d6 02 c0       	push   0xc002d659
c0022eeb:	e8 17 fc fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0022ef0:	83 c4 0c             	add    esp,0xc
c0022ef3:	56                   	push   esi
c0022ef4:	31 f6                	xor    esi,esi
c0022ef6:	6a 00                	push   0x0
c0022ef8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022efc:	e8 4f d8 fd ff       	call   c0000750 <memset>
c0022f01:	83 c4 10             	add    esp,0x10
c0022f04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022f0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022f14:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022f1b:	85 c0                	test   eax,eax
c0022f1d:	0f 84 d7 00 00 00    	je     c0022ffa <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022f23:	83 ec 0c             	sub    esp,0xc
c0022f26:	50                   	push   eax
c0022f27:	e8 a8 f9 ff ff       	call   c00228d4 <SoundChannel::getBufferSize()>
c0022f2c:	5f                   	pop    edi
c0022f2d:	5d                   	pop    ebp
c0022f2e:	50                   	push   eax
c0022f2f:	68 7d d6 02 c0       	push   0xc002d67d
c0022f34:	e8 ce fb fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0022f39:	58                   	pop    eax
c0022f3a:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022f41:	e8 86 f9 ff ff       	call   c00228cc <SoundChannel::getBufferUsed()>
c0022f46:	5a                   	pop    edx
c0022f47:	59                   	pop    ecx
c0022f48:	50                   	push   eax
c0022f49:	68 90 d6 02 c0       	push   0xc002d690
c0022f4e:	e8 b4 fb fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0022f53:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022f57:	99                   	cdq    
c0022f58:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022f5e:	50                   	push   eax
c0022f5f:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022f65:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022f69:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022f70:	e8 67 f9 ff ff       	call   c00228dc <SoundChannel::unbuffer(float*, int, int)>
c0022f75:	83 c4 14             	add    esp,0x14
c0022f78:	89 c5                	mov    ebp,eax
c0022f7a:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022f81:	e8 46 f9 ff ff       	call   c00228cc <SoundChannel::getBufferUsed()>
c0022f86:	5f                   	pop    edi
c0022f87:	5a                   	pop    edx
c0022f88:	50                   	push   eax
c0022f89:	68 a8 d6 02 c0       	push   0xc002d6a8
c0022f8e:	e8 74 fb fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0022f93:	56                   	push   esi
c0022f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022f98:	99                   	cdq    
c0022f99:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022f9f:	50                   	push   eax
c0022fa0:	55                   	push   ebp
c0022fa1:	68 c0 d6 02 c0       	push   0xc002d6c0
c0022fa6:	e8 5c fb fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0022fab:	83 c4 20             	add    esp,0x20
c0022fae:	31 c0                	xor    eax,eax
c0022fb0:	39 e8                	cmp    eax,ebp
c0022fb2:	7d 1e                	jge    c0022fd2 <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022fb4:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022fba:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022fbe:	0f af d0             	imul   edx,eax
c0022fc1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022fc4:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022fc8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022fcc:	40                   	inc    eax
c0022fcd:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022fd0:	eb de                	jmp    c0022fb0 <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022fd2:	50                   	push   eax
c0022fd3:	50                   	push   eax
c0022fd4:	55                   	push   ebp
c0022fd5:	68 ed d6 02 c0       	push   0xc002d6ed
c0022fda:	e8 28 fb fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0022fdf:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022fe3:	5a                   	pop    edx
c0022fe4:	59                   	pop    ecx
c0022fe5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022fe9:	68 fe d6 02 c0       	push   0xc002d6fe
c0022fee:	e8 14 fb fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0022ff3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022ff7:	83 c4 10             	add    esp,0x10
c0022ffa:	46                   	inc    esi
c0022ffb:	83 fe 20             	cmp    esi,0x20
c0022ffe:	0f 85 10 ff ff ff    	jne    c0022f14 <SoundDevice::getAudio(int, float*, float*)+0x66>
c0023004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023008:	83 c4 1c             	add    esp,0x1c
c002300b:	5b                   	pop    ebx
c002300c:	5e                   	pop    esi
c002300d:	5f                   	pop    edi
c002300e:	5d                   	pop    ebp
c002300f:	c3                   	ret    

c0023010 <PCI::open(int, int, void*)>:
c0023010:	83 ec 18             	sub    esp,0x18
c0023013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023017:	8b 10                	mov    edx,DWORD PTR [eax]
c0023019:	50                   	push   eax
c002301a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002301d:	31 c0                	xor    eax,eax
c002301f:	83 c4 1c             	add    esp,0x1c
c0023022:	c3                   	ret    
c0023023:	90                   	nop

c0023024 <PCI::close(int, int, void*)>:
c0023024:	31 c0                	xor    eax,eax
c0023026:	c3                   	ret    
c0023027:	90                   	nop

c0023028 <PCI::PCI()>:
c0023028:	83 ec 0c             	sub    esp,0xc
c002302b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302f:	83 ec 08             	sub    esp,0x8
c0023032:	68 4c d7 02 c0       	push   0xc002d74c
c0023037:	50                   	push   eax
c0023038:	e8 6b 07 ff ff       	call   c00137a8 <Bus::Bus(char const*)>
c002303d:	83 c4 10             	add    esp,0x10
c0023040:	ba f8 d7 02 c0       	mov    edx,0xc002d7f8
c0023045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023049:	89 10                	mov    DWORD PTR [eax],edx
c002304b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304f:	a3 04 35 03 c0       	mov    ds:0xc0033504,eax
c0023054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023058:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002305e:	0f b6 d0             	movzx  edx,al
c0023061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023065:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002306c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023070:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023076:	0f b6 d0             	movzx  edx,al
c0023079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0023082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023086:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002308c:	8d 50 01             	lea    edx,[eax+0x1]
c002308f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023093:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023099:	0f b6 d0             	movzx  edx,al
c002309c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00230a4:	83 c9 c0             	or     ecx,0xffffffc0
c00230a7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00230ab:	90                   	nop
c00230ac:	83 c4 0c             	add    esp,0xc
c00230af:	c3                   	ret    

c00230b0 <PCI::readBAR8(unsigned int, int)>:
c00230b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230b8:	f6 c2 01             	test   dl,0x1
c00230bb:	74 07                	je     c00230c4 <PCI::readBAR8(unsigned int, int)+0x14>
c00230bd:	83 e2 fc             	and    edx,0xfffffffc
c00230c0:	01 c2                	add    edx,eax
c00230c2:	ec                   	in     al,dx
c00230c3:	c3                   	ret    
c00230c4:	83 e2 f0             	and    edx,0xfffffff0
c00230c7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00230ca:	c3                   	ret    
c00230cb:	90                   	nop

c00230cc <PCI::readBAR16(unsigned int, int)>:
c00230cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230d4:	f6 c2 01             	test   dl,0x1
c00230d7:	74 08                	je     c00230e1 <PCI::readBAR16(unsigned int, int)+0x15>
c00230d9:	83 e2 fc             	and    edx,0xfffffffc
c00230dc:	01 c2                	add    edx,eax
c00230de:	66 ed                	in     ax,dx
c00230e0:	c3                   	ret    
c00230e1:	83 e2 f0             	and    edx,0xfffffff0
c00230e4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00230e8:	c3                   	ret    
c00230e9:	90                   	nop

c00230ea <PCI::readBAR32(unsigned int, int)>:
c00230ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230f2:	f6 c2 01             	test   dl,0x1
c00230f5:	74 07                	je     c00230fe <PCI::readBAR32(unsigned int, int)+0x14>
c00230f7:	83 e2 fc             	and    edx,0xfffffffc
c00230fa:	01 c2                	add    edx,eax
c00230fc:	ed                   	in     eax,dx
c00230fd:	c3                   	ret    
c00230fe:	83 e2 f0             	and    edx,0xfffffff0
c0023101:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0023104:	c3                   	ret    
c0023105:	90                   	nop

c0023106 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0023106:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002310a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002310e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023112:	f6 c2 01             	test   dl,0x1
c0023115:	74 07                	je     c002311e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0023117:	83 e2 fc             	and    edx,0xfffffffc
c002311a:	01 ca                	add    edx,ecx
c002311c:	ee                   	out    dx,al
c002311d:	c3                   	ret    
c002311e:	83 e2 f0             	and    edx,0xfffffff0
c0023121:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0023124:	c3                   	ret    
c0023125:	90                   	nop

c0023126 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0023126:	57                   	push   edi
c0023127:	56                   	push   esi
c0023128:	53                   	push   ebx
c0023129:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002312d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023131:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0023135:	f6 c2 01             	test   dl,0x1
c0023138:	74 24                	je     c002315e <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c002313a:	89 d3                	mov    ebx,edx
c002313c:	83 e3 fc             	and    ebx,0xfffffffc
c002313f:	50                   	push   eax
c0023140:	0f b7 c7             	movzx  eax,di
c0023143:	50                   	push   eax
c0023144:	8d 04 33             	lea    eax,[ebx+esi*1]
c0023147:	50                   	push   eax
c0023148:	68 54 d7 02 c0       	push   0xc002d754
c002314d:	e8 b5 f9 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0023152:	8d 14 33             	lea    edx,[ebx+esi*1]
c0023155:	89 f8                	mov    eax,edi
c0023157:	66 ef                	out    dx,ax
c0023159:	83 c4 10             	add    esp,0x10
c002315c:	eb 07                	jmp    c0023165 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c002315e:	83 e2 f0             	and    edx,0xfffffff0
c0023161:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0023165:	5b                   	pop    ebx
c0023166:	5e                   	pop    esi
c0023167:	5f                   	pop    edi
c0023168:	c3                   	ret    
c0023169:	90                   	nop

c002316a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002316a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002316e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023172:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023176:	f6 c2 01             	test   dl,0x1
c0023179:	74 07                	je     c0023182 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002317b:	83 e2 fc             	and    edx,0xfffffffc
c002317e:	01 ca                	add    edx,ecx
c0023180:	ef                   	out    dx,eax
c0023181:	c3                   	ret    
c0023182:	83 e2 f0             	and    edx,0xfffffff0
c0023185:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023188:	c3                   	ret    
c0023189:	90                   	nop

c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002318a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002318e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023193:	89 ca                	mov    edx,ecx
c0023195:	c1 e0 10             	shl    eax,0x10
c0023198:	81 e2 fc 00 00 00    	and    edx,0xfc
c002319e:	09 d0                	or     eax,edx
c00231a0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00231a5:	c1 e2 08             	shl    edx,0x8
c00231a8:	09 d0                	or     eax,edx
c00231aa:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00231af:	c1 e2 0b             	shl    edx,0xb
c00231b2:	09 d0                	or     eax,edx
c00231b4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00231b9:	0d 00 00 00 80       	or     eax,0x80000000
c00231be:	ef                   	out    dx,eax
c00231bf:	ba fc 0c 00 00       	mov    edx,0xcfc
c00231c4:	ed                   	in     eax,dx
c00231c5:	83 e1 02             	and    ecx,0x2
c00231c8:	0f b6 c9             	movzx  ecx,cl
c00231cb:	c1 e1 03             	shl    ecx,0x3
c00231ce:	d3 e8                	shr    eax,cl
c00231d0:	c3                   	ret    
c00231d1:	90                   	nop

c00231d2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00231d2:	6a 00                	push   0x0
c00231d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231d9:	50                   	push   eax
c00231da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231df:	50                   	push   eax
c00231e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231e5:	50                   	push   eax
c00231e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231ea:	e8 9b ff ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231ef:	83 c4 14             	add    esp,0x14
c00231f2:	c3                   	ret    
c00231f3:	90                   	nop

c00231f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00231f4:	6a 0e                	push   0xe
c00231f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231fb:	50                   	push   eax
c00231fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023201:	50                   	push   eax
c0023202:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023207:	50                   	push   eax
c0023208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002320c:	e8 79 ff ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023211:	83 c4 14             	add    esp,0x14
c0023214:	0f b6 c0             	movzx  eax,al
c0023217:	c3                   	ret    

c0023218 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0023218:	55                   	push   ebp
c0023219:	57                   	push   edi
c002321a:	56                   	push   esi
c002321b:	53                   	push   ebx
c002321c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0023221:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0023226:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002322b:	6a 0a                	push   0xa
c002322d:	56                   	push   esi
c002322e:	55                   	push   ebp
c002322f:	57                   	push   edi
c0023230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023234:	e8 51 ff ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023239:	6a 0a                	push   0xa
c002323b:	89 c3                	mov    ebx,eax
c002323d:	56                   	push   esi
c002323e:	0f b6 db             	movzx  ebx,bl
c0023241:	55                   	push   ebp
c0023242:	57                   	push   edi
c0023243:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023247:	e8 3e ff ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002324c:	83 c4 28             	add    esp,0x28
c002324f:	25 00 ff 00 00       	and    eax,0xff00
c0023254:	09 d8                	or     eax,ebx
c0023256:	5b                   	pop    ebx
c0023257:	5e                   	pop    esi
c0023258:	5f                   	pop    edi
c0023259:	5d                   	pop    ebp
c002325a:	c3                   	ret    
c002325b:	90                   	nop

c002325c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002325c:	6a 08                	push   0x8
c002325e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023263:	50                   	push   eax
c0023264:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023269:	50                   	push   eax
c002326a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002326f:	50                   	push   eax
c0023270:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023274:	e8 11 ff ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023279:	83 c4 14             	add    esp,0x14
c002327c:	0f b6 c4             	movzx  eax,ah
c002327f:	c3                   	ret    

c0023280 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023280:	6a 08                	push   0x8
c0023282:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023287:	50                   	push   eax
c0023288:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002328d:	50                   	push   eax
c002328e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023293:	50                   	push   eax
c0023294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023298:	e8 ed fe ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002329d:	83 c4 14             	add    esp,0x14
c00232a0:	c3                   	ret    
c00232a1:	90                   	nop

c00232a2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00232a2:	6a 3c                	push   0x3c
c00232a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232a9:	50                   	push   eax
c00232aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232af:	50                   	push   eax
c00232b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232b5:	50                   	push   eax
c00232b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232ba:	e8 cb fe ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232bf:	83 c4 14             	add    esp,0x14
c00232c2:	c3                   	ret    
c00232c3:	90                   	nop

c00232c4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00232c4:	6a 18                	push   0x18
c00232c6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232cb:	50                   	push   eax
c00232cc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232d1:	50                   	push   eax
c00232d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232d7:	50                   	push   eax
c00232d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232dc:	e8 a9 fe ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232e1:	83 c4 14             	add    esp,0x14
c00232e4:	0f b6 c4             	movzx  eax,ah
c00232e7:	c3                   	ret    

c00232e8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00232e8:	55                   	push   ebp
c00232e9:	57                   	push   edi
c00232ea:	56                   	push   esi
c00232eb:	53                   	push   ebx
c00232ec:	50                   	push   eax
c00232ed:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00232f1:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00232f6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00232fb:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0023300:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023307:	8d 43 12             	lea    eax,[ebx+0x12]
c002330a:	83 c3 10             	add    ebx,0x10
c002330d:	0f b6 c0             	movzx  eax,al
c0023310:	0f b6 db             	movzx  ebx,bl
c0023313:	50                   	push   eax
c0023314:	51                   	push   ecx
c0023315:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023319:	57                   	push   edi
c002331a:	55                   	push   ebp
c002331b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002331f:	e8 66 fe ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023324:	53                   	push   ebx
c0023325:	89 c6                	mov    esi,eax
c0023327:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002332b:	c1 e6 10             	shl    esi,0x10
c002332e:	51                   	push   ecx
c002332f:	57                   	push   edi
c0023330:	55                   	push   ebp
c0023331:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023335:	e8 50 fe ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002333a:	83 c4 2c             	add    esp,0x2c
c002333d:	0f b7 c0             	movzx  eax,ax
c0023340:	5b                   	pop    ebx
c0023341:	09 f0                	or     eax,esi
c0023343:	5e                   	pop    esi
c0023344:	5f                   	pop    edi
c0023345:	5d                   	pop    ebp
c0023346:	c3                   	ret    
c0023347:	90                   	nop

c0023348 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023348:	53                   	push   ebx
c0023349:	ba f8 0c 00 00       	mov    edx,0xcf8
c002334e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0023353:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023357:	c1 e1 10             	shl    ecx,0x10
c002335a:	25 fc 00 00 00       	and    eax,0xfc
c002335f:	09 c1                	or     ecx,eax
c0023361:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023366:	c1 e0 08             	shl    eax,0x8
c0023369:	09 c1                	or     ecx,eax
c002336b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023370:	c1 e0 0b             	shl    eax,0xb
c0023373:	09 c1                	or     ecx,eax
c0023375:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002337b:	89 c8                	mov    eax,ecx
c002337d:	ef                   	out    dx,eax
c002337e:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023383:	ed                   	in     eax,dx
c0023384:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023389:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002338e:	74 0a                	je     c002339a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023390:	0f b7 d8             	movzx  ebx,ax
c0023393:	89 d0                	mov    eax,edx
c0023395:	c1 e0 10             	shl    eax,0x10
c0023398:	eb 05                	jmp    c002339f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002339a:	66 31 c0             	xor    ax,ax
c002339d:	89 d3                	mov    ebx,edx
c002339f:	09 c3                	or     ebx,eax
c00233a1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00233a6:	89 c8                	mov    eax,ecx
c00233a8:	ef                   	out    dx,eax
c00233a9:	ba fc 0c 00 00       	mov    edx,0xcfc
c00233ae:	89 d8                	mov    eax,ebx
c00233b0:	ef                   	out    dx,eax
c00233b1:	5b                   	pop    ebx
c00233b2:	c3                   	ret    
c00233b3:	90                   	nop

c00233b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00233b4:	55                   	push   ebp
c00233b5:	57                   	push   edi
c00233b6:	56                   	push   esi
c00233b7:	53                   	push   ebx
c00233b8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00233be:	80 3d 10 35 03 c0 00 	cmp    BYTE PTR ds:0xc0033510,0x0
c00233c5:	0f 85 96 00 00 00    	jne    c0023461 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c00233cb:	83 ec 0c             	sub    esp,0xc
c00233ce:	68 14 01 00 00       	push   0x114
c00233d3:	e8 b4 c4 fe ff       	call   c000f88c <malloc>
c00233d8:	83 c4 0c             	add    esp,0xc
c00233db:	89 c3                	mov    ebx,eax
c00233dd:	ff 35 10 27 03 c0    	push   DWORD PTR ds:0xc0032710
c00233e3:	68 6b d7 02 c0       	push   0xc002d76b
c00233e8:	50                   	push   eax
c00233e9:	e8 78 fc fe ff       	call   c0013066 <File::File(char const*, Process*)>
c00233ee:	5a                   	pop    edx
c00233ef:	59                   	pop    ecx
c00233f0:	6a 01                	push   0x1
c00233f2:	53                   	push   ebx
c00233f3:	e8 d2 fc fe ff       	call   c00130ca <File::open(FileOpenMode)>
c00233f8:	83 c4 0c             	add    esp,0xc
c00233fb:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00233ff:	50                   	push   eax
c0023400:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023404:	50                   	push   eax
c0023405:	53                   	push   ebx
c0023406:	e8 6b ff fe ff       	call   c0013376 <File::stat(unsigned long long*, bool*)>
c002340b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002340f:	40                   	inc    eax
c0023410:	89 04 24             	mov    DWORD PTR [esp],eax
c0023413:	e8 74 c4 fe ff       	call   c000f88c <malloc>
c0023418:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002341c:	a3 0c 35 03 c0       	mov    ds:0xc003350c,eax
c0023421:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0023425:	5e                   	pop    esi
c0023426:	8b 13                	mov    edx,DWORD PTR [ebx]
c0023428:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c002342c:	51                   	push   ecx
c002342d:	50                   	push   eax
c002342e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023432:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023436:	53                   	push   ebx
c0023437:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002343a:	83 c4 14             	add    esp,0x14
c002343d:	53                   	push   ebx
c002343e:	e8 e5 fc fe ff       	call   c0013128 <File::close()>
c0023443:	5f                   	pop    edi
c0023444:	5d                   	pop    ebp
c0023445:	ff 35 0c 35 03 c0    	push   DWORD PTR ds:0xc003350c
c002344b:	68 84 d7 02 c0       	push   0xc002d784
c0023450:	e8 b2 f6 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0023455:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023459:	83 c4 10             	add    esp,0x10
c002345c:	a3 08 35 03 c0       	mov    ds:0xc0033508,eax
c0023461:	a1 08 35 03 c0       	mov    eax,ds:0xc0033508
c0023466:	8b 15 0c 35 03 c0    	mov    edx,DWORD PTR ds:0xc003350c
c002346c:	89 04 24             	mov    DWORD PTR [esp],eax
c002346f:	31 ff                	xor    edi,edi
c0023471:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023479:	31 f6                	xor    esi,esi
c002347b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0023480:	31 db                	xor    ebx,ebx
c0023482:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002348a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002348f:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023496:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002349a:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00234a1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00234a5:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00234a8:	0f 8e 6b 01 00 00    	jle    c0023619 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c00234ae:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00234b1:	d4 40                	aam    0x40
c00234b3:	d5 39                	aad    0x39
c00234b5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00234b9:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00234bd:	d4 40                	aam    0x40
c00234bf:	d5 39                	aad    0x39
c00234c1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00234c5:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00234c9:	d4 40                	aam    0x40
c00234cb:	d5 39                	aad    0x39
c00234cd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00234d1:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00234d5:	d4 40                	aam    0x40
c00234d7:	d5 39                	aad    0x39
c00234d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00234dd:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00234e1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00234e5:	3c 56                	cmp    al,0x56
c00234e7:	74 45                	je     c002352e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c00234e9:	d4 40                	aam    0x40
c00234eb:	d5 39                	aad    0x39
c00234ed:	8d 48 d0             	lea    ecx,[eax-0x30]
c00234f0:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00234f4:	0f b6 c9             	movzx  ecx,cl
c00234f7:	c1 e1 04             	shl    ecx,0x4
c00234fa:	d4 40                	aam    0x40
c00234fc:	d5 39                	aad    0x39
c00234fe:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023501:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0023505:	0f b6 db             	movzx  ebx,bl
c0023508:	09 cb                	or     ebx,ecx
c002350a:	c1 e3 04             	shl    ebx,0x4
c002350d:	d4 40                	aam    0x40
c002350f:	d5 39                	aad    0x39
c0023511:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023514:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0023518:	0f b6 c9             	movzx  ecx,cl
c002351b:	09 cb                	or     ebx,ecx
c002351d:	c1 e3 04             	shl    ebx,0x4
c0023520:	89 d9                	mov    ecx,ebx
c0023522:	d4 40                	aam    0x40
c0023524:	d5 39                	aad    0x39
c0023526:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023529:	0f b6 db             	movzx  ebx,bl
c002352c:	09 cb                	or     ebx,ecx
c002352e:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0023532:	80 f9 44             	cmp    cl,0x44
c0023535:	74 47                	je     c002357e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c0023537:	88 c8                	mov    al,cl
c0023539:	d4 40                	aam    0x40
c002353b:	d5 39                	aad    0x39
c002353d:	83 e8 30             	sub    eax,0x30
c0023540:	0f b6 e8             	movzx  ebp,al
c0023543:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0023547:	c1 e5 04             	shl    ebp,0x4
c002354a:	d4 40                	aam    0x40
c002354c:	d5 39                	aad    0x39
c002354e:	83 e8 30             	sub    eax,0x30
c0023551:	0f b6 f0             	movzx  esi,al
c0023554:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0023558:	09 ee                	or     esi,ebp
c002355a:	c1 e6 04             	shl    esi,0x4
c002355d:	d4 40                	aam    0x40
c002355f:	d5 39                	aad    0x39
c0023561:	83 e8 30             	sub    eax,0x30
c0023564:	0f b6 e8             	movzx  ebp,al
c0023567:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c002356b:	09 ee                	or     esi,ebp
c002356d:	c1 e6 04             	shl    esi,0x4
c0023570:	89 f5                	mov    ebp,esi
c0023572:	d4 40                	aam    0x40
c0023574:	d5 39                	aad    0x39
c0023576:	83 e8 30             	sub    eax,0x30
c0023579:	0f b6 f0             	movzx  esi,al
c002357c:	09 ee                	or     esi,ebp
c002357e:	83 c7 10             	add    edi,0x10
c0023581:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0023585:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023588:	3c 0a                	cmp    al,0xa
c002358a:	74 09                	je     c0023595 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c002358c:	45                   	inc    ebp
c002358d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023590:	75 16                	jne    c00235a8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c0023592:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023595:	3c 0a                	cmp    al,0xa
c0023597:	0f 94 c0             	sete   al
c002359a:	0f b6 c0             	movzx  eax,al
c002359d:	01 c7                	add    edi,eax
c002359f:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00235a4:	75 0c                	jne    c00235b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c00235a6:	eb 15                	jmp    c00235bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c00235a8:	47                   	inc    edi
c00235a9:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00235ac:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00235b0:	eb d3                	jmp    c0023585 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c00235b2:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00235b7:	0f 85 e8 fe ff ff    	jne    c00234a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00235bd:	80 f9 44             	cmp    cl,0x44
c00235c0:	74 0b                	je     c00235cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c00235c2:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00235c7:	0f 85 d8 fe ff ff    	jne    c00234a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00235cd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00235d1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00235d5:	c1 e1 04             	shl    ecx,0x4
c00235d8:	83 e8 30             	sub    eax,0x30
c00235db:	09 c8                	or     eax,ecx
c00235dd:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00235e1:	0f 85 be fe ff ff    	jne    c00234a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00235e7:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00235eb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00235ef:	c1 e1 04             	shl    ecx,0x4
c00235f2:	83 e8 30             	sub    eax,0x30
c00235f5:	09 c8                	or     eax,ecx
c00235f7:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00235fb:	0f 85 a4 fe ff ff    	jne    c00234a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023601:	50                   	push   eax
c0023602:	50                   	push   eax
c0023603:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023607:	50                   	push   eax
c0023608:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c002360f:	e8 f8 d1 fd ff       	call   c000080c <strcpy>
c0023614:	83 c4 10             	add    esp,0x10
c0023617:	eb 15                	jmp    c002362e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c0023619:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023620:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c002362b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002362e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023635:	81 c4 2c 01 00 00    	add    esp,0x12c
c002363b:	5b                   	pop    ebx
c002363c:	5e                   	pop    esi
c002363d:	5f                   	pop    edi
c002363e:	5d                   	pop    ebp
c002363f:	c3                   	ret    

c0023640 <PCI::checkBus(unsigned char)>:
c0023640:	56                   	push   esi
c0023641:	53                   	push   ebx
c0023642:	31 db                	xor    ebx,ebx
c0023644:	51                   	push   ecx
c0023645:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002364a:	52                   	push   edx
c002364b:	53                   	push   ebx
c002364c:	43                   	inc    ebx
c002364d:	56                   	push   esi
c002364e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023652:	e8 2b 03 00 00       	call   c0023982 <PCI::checkDevice(unsigned char, unsigned char)>
c0023657:	83 c4 10             	add    esp,0x10
c002365a:	83 fb 20             	cmp    ebx,0x20
c002365d:	75 eb                	jne    c002364a <PCI::checkBus(unsigned char)+0xa>
c002365f:	58                   	pop    eax
c0023660:	5b                   	pop    ebx
c0023661:	5e                   	pop    esi
c0023662:	c3                   	ret    
c0023663:	90                   	nop

c0023664 <PCI::foundDevice(PCIDeviceInfo)>:
c0023664:	55                   	push   ebp
c0023665:	57                   	push   edi
c0023666:	56                   	push   esi
c0023667:	53                   	push   ebx
c0023668:	83 ec 1c             	sub    esp,0x1c
c002366b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002366f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023675:	0f 84 52 01 00 00    	je     c00237cd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002367b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002367f:	66 81 f9 06 04       	cmp    cx,0x406
c0023684:	75 2c                	jne    c00236b2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023686:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002368b:	50                   	push   eax
c002368c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023691:	50                   	push   eax
c0023692:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023697:	50                   	push   eax
c0023698:	56                   	push   esi
c0023699:	e8 26 fc ff ff       	call   c00232c4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002369e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236a2:	0f b6 c0             	movzx  eax,al
c00236a5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00236a9:	83 c4 2c             	add    esp,0x2c
c00236ac:	5b                   	pop    ebx
c00236ad:	5e                   	pop    esi
c00236ae:	5f                   	pop    edi
c00236af:	5d                   	pop    ebp
c00236b0:	eb 8e                	jmp    c0023640 <PCI::checkBus(unsigned char)>
c00236b2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00236b6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00236bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00236c0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00236c4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00236c8:	88 d3                	mov    bl,dl
c00236ca:	85 c0                	test   eax,eax
c00236cc:	74 33                	je     c0023701 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00236ce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00236d1:	85 d2                	test   edx,edx
c00236d3:	74 28                	je     c00236fd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00236d5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00236db:	31 ef                	xor    edi,ebp
c00236dd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00236e3:	75 18                	jne    c00236fd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00236e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00236e9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00236ef:	75 0c                	jne    c00236fd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00236f1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00236f7:	0f 84 d0 00 00 00    	je     c00237cd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00236fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00236ff:	eb c9                	jmp    c00236ca <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023701:	66 81 f9 01 06       	cmp    cx,0x601
c0023706:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002370a:	75 19                	jne    c0023725 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002370c:	83 ec 0c             	sub    esp,0xc
c002370f:	68 64 01 00 00       	push   0x164
c0023714:	e8 73 c1 fe ff       	call   c000f88c <malloc>
c0023719:	89 c5                	mov    ebp,eax
c002371b:	89 04 24             	mov    DWORD PTR [esp],eax
c002371e:	e8 95 0f 00 00       	call   c00246b8 <SATABus::SATABus()>
c0023723:	eb 1e                	jmp    c0023743 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023725:	66 81 f9 01 01       	cmp    cx,0x101
c002372a:	75 60                	jne    c002378c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002372c:	83 ec 0c             	sub    esp,0xc
c002372f:	68 70 02 00 00       	push   0x270
c0023734:	e8 53 c1 fe ff       	call   c000f88c <malloc>
c0023739:	89 c5                	mov    ebp,eax
c002373b:	89 04 24             	mov    DWORD PTR [esp],eax
c002373e:	e8 03 03 00 00       	call   c0023a46 <IDE::IDE()>
c0023743:	58                   	pop    eax
c0023744:	5a                   	pop    edx
c0023745:	55                   	push   ebp
c0023746:	56                   	push   esi
c0023747:	e8 f4 07 ff ff       	call   c0013f40 <Device::addChild(Device*)>
c002374c:	83 ec 1c             	sub    esp,0x1c
c002374f:	b9 09 00 00 00       	mov    ecx,0x9
c0023754:	fc                   	cld    
c0023755:	89 e7                	mov    edi,esp
c0023757:	89 de                	mov    esi,ebx
c0023759:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002375b:	55                   	push   ebp
c002375c:	e8 f1 06 ff ff       	call   c0013e52 <Device::preOpenPCI(PCIDeviceInfo)>
c0023761:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023764:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023768:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023770:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023778:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023780:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023783:	83 c4 4c             	add    esp,0x4c
c0023786:	5b                   	pop    ebx
c0023787:	5e                   	pop    esi
c0023788:	5f                   	pop    edi
c0023789:	5d                   	pop    ebp
c002378a:	ff e0                	jmp    eax
c002378c:	83 ec 0c             	sub    esp,0xc
c002378f:	68 58 01 00 00       	push   0x158
c0023794:	e8 f3 c0 fe ff       	call   c000f88c <malloc>
c0023799:	89 c5                	mov    ebp,eax
c002379b:	58                   	pop    eax
c002379c:	5a                   	pop    edx
c002379d:	68 96 d7 02 c0       	push   0xc002d796
c00237a2:	55                   	push   ebp
c00237a3:	e8 a2 0a ff ff       	call   c001424a <DriverlessDevice::DriverlessDevice(char const*)>
c00237a8:	59                   	pop    ecx
c00237a9:	5f                   	pop    edi
c00237aa:	55                   	push   ebp
c00237ab:	56                   	push   esi
c00237ac:	e8 8f 07 ff ff       	call   c0013f40 <Device::addChild(Device*)>
c00237b1:	b9 09 00 00 00       	mov    ecx,0x9
c00237b6:	fc                   	cld    
c00237b7:	89 df                	mov    edi,ebx
c00237b9:	89 de                	mov    esi,ebx
c00237bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00237bd:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00237c1:	83 c4 2c             	add    esp,0x2c
c00237c4:	5b                   	pop    ebx
c00237c5:	5e                   	pop    esi
c00237c6:	5f                   	pop    edi
c00237c7:	5d                   	pop    ebp
c00237c8:	e9 85 06 ff ff       	jmp    c0013e52 <Device::preOpenPCI(PCIDeviceInfo)>
c00237cd:	83 c4 1c             	add    esp,0x1c
c00237d0:	5b                   	pop    ebx
c00237d1:	5e                   	pop    esi
c00237d2:	5f                   	pop    edi
c00237d3:	5d                   	pop    ebp
c00237d4:	c3                   	ret    
c00237d5:	90                   	nop

c00237d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00237d6:	55                   	push   ebp
c00237d7:	57                   	push   edi
c00237d8:	56                   	push   esi
c00237d9:	53                   	push   ebx
c00237da:	83 ec 5c             	sub    esp,0x5c
c00237dd:	8b 6c 24 70          	mov    ebp,DWORD PTR [esp+0x70]
c00237e1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00237e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00237e9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00237ed:	0f b6 74 24 0c       	movzx  esi,BYTE PTR [esp+0xc]
c00237f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00237f6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00237fa:	0f b6 5c 24 10       	movzx  ebx,BYTE PTR [esp+0x10]
c00237ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023803:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023808:	6a 0c                	push   0xc
c002380a:	57                   	push   edi
c002380b:	53                   	push   ebx
c002380c:	56                   	push   esi
c002380d:	55                   	push   ebp
c002380e:	e8 77 f9 ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023813:	57                   	push   edi
c0023814:	53                   	push   ebx
c0023815:	56                   	push   esi
c0023816:	55                   	push   ebp
c0023817:	e8 fc f9 ff ff       	call   c0023218 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002381c:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c0023821:	83 c4 24             	add    esp,0x24
c0023824:	57                   	push   edi
c0023825:	53                   	push   ebx
c0023826:	56                   	push   esi
c0023827:	55                   	push   ebp
c0023828:	e8 75 fa ff ff       	call   c00232a2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002382d:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0023831:	6a 3c                	push   0x3c
c0023833:	57                   	push   edi
c0023834:	53                   	push   ebx
c0023835:	56                   	push   esi
c0023836:	55                   	push   ebp
c0023837:	e8 4e f9 ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002383c:	0f b6 c4             	movzx  eax,ah
c002383f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023843:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023847:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002384b:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0023850:	83 c4 24             	add    esp,0x24
c0023853:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023859:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023860:	74 7c                	je     c00238de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x108>
c0023862:	31 c0                	xor    eax,eax
c0023864:	8b 15 a8 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1a8
c002386a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023870:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023876:	7e 66                	jle    c00238de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x108>
c0023878:	8d 14 c2             	lea    edx,[edx+eax*8]
c002387b:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023882:	39 cb                	cmp    ebx,ecx
c0023884:	75 55                	jne    c00238db <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x105>
c0023886:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002388d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023891:	75 48                	jne    c00238db <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x105>
c0023893:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023897:	83 ec 0c             	sub    esp,0xc
c002389a:	68 b0 d7 02 c0       	push   0xc002d7b0
c002389f:	e8 63 f2 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00238a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00238a8:	8b 15 a8 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1a8
c00238ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00238b2:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00238b8:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c00238c0:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00238c4:	52                   	push   edx
c00238c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238c9:	53                   	push   ebx
c00238ca:	68 d5 d7 02 c0       	push   0xc002d7d5
c00238cf:	e8 33 f2 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00238d4:	83 c4 20             	add    esp,0x20
c00238d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238db:	40                   	inc    eax
c00238dc:	eb 86                	jmp    c0023864 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x8e>
c00238de:	31 d2                	xor    edx,edx
c00238e0:	83 ec 0c             	sub    esp,0xc
c00238e3:	57                   	push   edi
c00238e4:	53                   	push   ebx
c00238e5:	56                   	push   esi
c00238e6:	52                   	push   edx
c00238e7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00238eb:	55                   	push   ebp
c00238ec:	e8 f7 f9 ff ff       	call   c00232e8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00238f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00238f5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00238f9:	42                   	inc    edx
c00238fa:	83 c4 20             	add    esp,0x20
c00238fd:	83 fa 06             	cmp    edx,0x6
c0023900:	75 de                	jne    c00238e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10a>
c0023902:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0023907:	83 ec 0c             	sub    esp,0xc
c002390a:	86 e0                	xchg   al,ah
c002390c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023911:	6a 02                	push   0x2
c0023913:	57                   	push   edi
c0023914:	53                   	push   ebx
c0023915:	56                   	push   esi
c0023916:	55                   	push   ebp
c0023917:	e8 6e f8 ff ff       	call   c002318a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002391c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023921:	83 c4 20             	add    esp,0x20
c0023924:	57                   	push   edi
c0023925:	53                   	push   ebx
c0023926:	56                   	push   esi
c0023927:	55                   	push   ebp
c0023928:	e8 2f f9 ff ff       	call   c002325c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002392d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023931:	57                   	push   edi
c0023932:	53                   	push   ebx
c0023933:	56                   	push   esi
c0023934:	55                   	push   ebp
c0023935:	e8 98 f8 ff ff       	call   c00231d2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002393a:	b9 09 00 00 00       	mov    ecx,0x9
c002393f:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023944:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0023948:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002394c:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023950:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023954:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023958:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002395c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023960:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023964:	83 ec 0c             	sub    esp,0xc
c0023967:	fc                   	cld    
c0023968:	89 e7                	mov    edi,esp
c002396a:	8d 74 24 58          	lea    esi,[esp+0x58]
c002396e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023970:	55                   	push   ebp
c0023971:	e8 ee fc ff ff       	call   c0023664 <PCI::foundDevice(PCIDeviceInfo)>
c0023976:	81 c4 8c 00 00 00    	add    esp,0x8c
c002397c:	5b                   	pop    ebx
c002397d:	5e                   	pop    esi
c002397e:	5f                   	pop    edi
c002397f:	5d                   	pop    ebp
c0023980:	c3                   	ret    
c0023981:	90                   	nop

c0023982 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023982:	55                   	push   ebp
c0023983:	57                   	push   edi
c0023984:	56                   	push   esi
c0023985:	53                   	push   ebx
c0023986:	83 ec 0c             	sub    esp,0xc
c0023989:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002398d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023992:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023997:	6a 00                	push   0x0
c0023999:	56                   	push   esi
c002399a:	57                   	push   edi
c002399b:	55                   	push   ebp
c002399c:	e8 31 f8 ff ff       	call   c00231d2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00239a1:	6a 00                	push   0x0
c00239a3:	56                   	push   esi
c00239a4:	57                   	push   edi
c00239a5:	55                   	push   ebp
c00239a6:	e8 2b fe ff ff       	call   c00237d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00239ab:	83 c4 20             	add    esp,0x20
c00239ae:	6a 00                	push   0x0
c00239b0:	56                   	push   esi
c00239b1:	57                   	push   edi
c00239b2:	55                   	push   ebp
c00239b3:	e8 3c f8 ff ff       	call   c00231f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00239b8:	83 c4 10             	add    esp,0x10
c00239bb:	84 c0                	test   al,al
c00239bd:	79 27                	jns    c00239e6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00239bf:	bb 01 00 00 00       	mov    ebx,0x1
c00239c4:	53                   	push   ebx
c00239c5:	56                   	push   esi
c00239c6:	57                   	push   edi
c00239c7:	55                   	push   ebp
c00239c8:	e8 05 f8 ff ff       	call   c00231d2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00239cd:	83 c4 10             	add    esp,0x10
c00239d0:	66 40                	inc    ax
c00239d2:	74 0c                	je     c00239e0 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00239d4:	53                   	push   ebx
c00239d5:	56                   	push   esi
c00239d6:	57                   	push   edi
c00239d7:	55                   	push   ebp
c00239d8:	e8 f9 fd ff ff       	call   c00237d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00239dd:	83 c4 10             	add    esp,0x10
c00239e0:	43                   	inc    ebx
c00239e1:	83 fb 08             	cmp    ebx,0x8
c00239e4:	75 de                	jne    c00239c4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00239e6:	83 c4 0c             	add    esp,0xc
c00239e9:	5b                   	pop    ebx
c00239ea:	5e                   	pop    esi
c00239eb:	5f                   	pop    edi
c00239ec:	5d                   	pop    ebp
c00239ed:	c3                   	ret    

c00239ee <PCI::detect()>:
c00239ee:	56                   	push   esi
c00239ef:	53                   	push   ebx
c00239f0:	53                   	push   ebx
c00239f1:	31 db                	xor    ebx,ebx
c00239f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00239f7:	6a 00                	push   0x0
c00239f9:	6a 00                	push   0x0
c00239fb:	6a 00                	push   0x0
c00239fd:	56                   	push   esi
c00239fe:	e8 f1 f7 ff ff       	call   c00231f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023a03:	83 c4 10             	add    esp,0x10
c0023a06:	a8 80                	test   al,0x80
c0023a08:	75 21                	jne    c0023a2b <PCI::detect()+0x3d>
c0023a0a:	51                   	push   ecx
c0023a0b:	51                   	push   ecx
c0023a0c:	6a 00                	push   0x0
c0023a0e:	56                   	push   esi
c0023a0f:	e8 2c fc ff ff       	call   c0023640 <PCI::checkBus(unsigned char)>
c0023a14:	83 c4 10             	add    esp,0x10
c0023a17:	eb 24                	jmp    c0023a3d <PCI::detect()+0x4f>
c0023a19:	52                   	push   edx
c0023a1a:	52                   	push   edx
c0023a1b:	53                   	push   ebx
c0023a1c:	43                   	inc    ebx
c0023a1d:	56                   	push   esi
c0023a1e:	e8 1d fc ff ff       	call   c0023640 <PCI::checkBus(unsigned char)>
c0023a23:	83 c4 10             	add    esp,0x10
c0023a26:	83 fb 08             	cmp    ebx,0x8
c0023a29:	74 12                	je     c0023a3d <PCI::detect()+0x4f>
c0023a2b:	53                   	push   ebx
c0023a2c:	6a 00                	push   0x0
c0023a2e:	6a 00                	push   0x0
c0023a30:	56                   	push   esi
c0023a31:	e8 9c f7 ff ff       	call   c00231d2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023a36:	83 c4 10             	add    esp,0x10
c0023a39:	66 40                	inc    ax
c0023a3b:	74 dc                	je     c0023a19 <PCI::detect()+0x2b>
c0023a3d:	58                   	pop    eax
c0023a3e:	5b                   	pop    ebx
c0023a3f:	5e                   	pop    esi
c0023a40:	c3                   	ret    
c0023a41:	90                   	nop

c0023a42 <IDE::close(int, int, void*)>:
c0023a42:	83 c8 ff             	or     eax,0xffffffff
c0023a45:	c3                   	ret    

c0023a46 <IDE::IDE()>:
c0023a46:	83 ec 0c             	sub    esp,0xc
c0023a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a4d:	83 ec 08             	sub    esp,0x8
c0023a50:	68 1c d8 02 c0       	push   0xc002d81c
c0023a55:	50                   	push   eax
c0023a56:	e8 93 08 ff ff       	call   c00142ee <HardDiskController::HardDiskController(char const*)>
c0023a5b:	83 c4 10             	add    esp,0x10
c0023a5e:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0023a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a67:	89 10                	mov    DWORD PTR [eax],edx
c0023a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a6d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023a74:	90                   	nop
c0023a75:	83 c4 0c             	add    esp,0xc
c0023a78:	c3                   	ret    
c0023a79:	90                   	nop

c0023a7a <IDE::prepareInterrupt(unsigned char)>:
c0023a7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023a7f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023a83:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023a8b:	c3                   	ret    

c0023a8c <selectDrive(unsigned char, unsigned char)>:
c0023a8c:	c3                   	ret    
c0023a8d:	90                   	nop

c0023a8e <IDE::getBase(unsigned char)>:
c0023a8e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023a93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a97:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023a9f:	c3                   	ret    

c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023aa0:	55                   	push   ebp
c0023aa1:	57                   	push   edi
c0023aa2:	56                   	push   esi
c0023aa3:	53                   	push   ebx
c0023aa4:	83 ec 1c             	sub    esp,0x1c
c0023aa7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023aab:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023aaf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023ab2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023ab6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023aba:	80 f9 03             	cmp    cl,0x3
c0023abd:	77 51                	ja     c0023b10 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023abf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ac3:	0f b6 f2             	movzx  esi,dl
c0023ac6:	0f b6 db             	movzx  ebx,bl
c0023ac9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023acc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023ad0:	83 ca 80             	or     edx,0xffffff80
c0023ad3:	0f b6 d2             	movzx  edx,dl
c0023ad6:	52                   	push   edx
c0023ad7:	6a 0c                	push   0xc
c0023ad9:	56                   	push   esi
c0023ada:	57                   	push   edi
c0023adb:	e8 c0 ff ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ae0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023ae5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ae9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023aed:	ee                   	out    dx,al
c0023aee:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023af3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023af7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023afb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023aff:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023b07:	83 c4 2c             	add    esp,0x2c
c0023b0a:	5b                   	pop    ebx
c0023b0b:	5e                   	pop    esi
c0023b0c:	5f                   	pop    edi
c0023b0d:	5d                   	pop    ebp
c0023b0e:	eb 90                	jmp    c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b10:	80 fb 07             	cmp    bl,0x7
c0023b13:	77 12                	ja     c0023b27 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023b15:	0f b6 d2             	movzx  edx,dl
c0023b18:	0f b6 db             	movzx  ebx,bl
c0023b1b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023b23:	89 da                	mov    edx,ebx
c0023b25:	eb 2f                	jmp    c0023b56 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023b27:	80 fb 0d             	cmp    bl,0xd
c0023b2a:	77 13                	ja     c0023b3f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023b2c:	0f b6 d2             	movzx  edx,dl
c0023b2f:	0f b6 db             	movzx  ebx,bl
c0023b32:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023b39:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023b3d:	eb 17                	jmp    c0023b56 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023b3f:	80 fb 15             	cmp    bl,0x15
c0023b42:	77 13                	ja     c0023b57 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023b44:	0f b6 d2             	movzx  edx,dl
c0023b47:	0f b6 db             	movzx  ebx,bl
c0023b4a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023b52:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023b56:	ee                   	out    dx,al
c0023b57:	83 c4 1c             	add    esp,0x1c
c0023b5a:	5b                   	pop    ebx
c0023b5b:	5e                   	pop    esi
c0023b5c:	5f                   	pop    edi
c0023b5d:	5d                   	pop    ebp
c0023b5e:	c3                   	ret    
c0023b5f:	90                   	nop

c0023b60 <IDE::read(unsigned char, unsigned char)>:
c0023b60:	55                   	push   ebp
c0023b61:	57                   	push   edi
c0023b62:	56                   	push   esi
c0023b63:	53                   	push   ebx
c0023b64:	83 ec 1c             	sub    esp,0x1c
c0023b67:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023b6b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023b6f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023b72:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023b76:	3c 03                	cmp    al,0x3
c0023b78:	77 43                	ja     c0023bbd <IDE::read(unsigned char, unsigned char)+0x5d>
c0023b7a:	0f b6 f2             	movzx  esi,dl
c0023b7d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023b80:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023b84:	83 c8 80             	or     eax,0xffffff80
c0023b87:	0f b6 c0             	movzx  eax,al
c0023b8a:	50                   	push   eax
c0023b8b:	6a 0c                	push   0xc
c0023b8d:	56                   	push   esi
c0023b8e:	57                   	push   edi
c0023b8f:	e8 0c ff ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b94:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023b99:	0f b6 c3             	movzx  eax,bl
c0023b9c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023ba0:	ec                   	in     al,dx
c0023ba1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023ba5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023baa:	52                   	push   edx
c0023bab:	6a 0c                	push   0xc
c0023bad:	56                   	push   esi
c0023bae:	57                   	push   edi
c0023baf:	e8 ec fe ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bb4:	83 c4 20             	add    esp,0x20
c0023bb7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023bbb:	eb 49                	jmp    c0023c06 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023bbd:	80 fb 07             	cmp    bl,0x7
c0023bc0:	77 12                	ja     c0023bd4 <IDE::read(unsigned char, unsigned char)+0x74>
c0023bc2:	0f b6 d2             	movzx  edx,dl
c0023bc5:	0f b6 c3             	movzx  eax,bl
c0023bc8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023bd0:	89 c2                	mov    edx,eax
c0023bd2:	eb 31                	jmp    c0023c05 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023bd4:	80 fb 0d             	cmp    bl,0xd
c0023bd7:	77 13                	ja     c0023bec <IDE::read(unsigned char, unsigned char)+0x8c>
c0023bd9:	0f b6 d2             	movzx  edx,dl
c0023bdc:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023be3:	0f b6 d3             	movzx  edx,bl
c0023be6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023bea:	eb 19                	jmp    c0023c05 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023bec:	31 c0                	xor    eax,eax
c0023bee:	80 fb 15             	cmp    bl,0x15
c0023bf1:	77 13                	ja     c0023c06 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023bf3:	0f b6 d2             	movzx  edx,dl
c0023bf6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023bfe:	0f b6 d3             	movzx  edx,bl
c0023c01:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023c05:	ec                   	in     al,dx
c0023c06:	83 c4 1c             	add    esp,0x1c
c0023c09:	5b                   	pop    ebx
c0023c0a:	5e                   	pop    esi
c0023c0b:	5f                   	pop    edi
c0023c0c:	5d                   	pop    ebp
c0023c0d:	c3                   	ret    

c0023c0e <IDE::waitInterrupt(unsigned char)>:
c0023c0e:	55                   	push   ebp
c0023c0f:	57                   	push   edi
c0023c10:	56                   	push   esi
c0023c11:	53                   	push   ebx
c0023c12:	31 db                	xor    ebx,ebx
c0023c14:	83 ec 0c             	sub    esp,0xc
c0023c17:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023c1b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023c20:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023c28:	89 e8                	mov    eax,ebp
c0023c2a:	84 c0                	test   al,al
c0023c2c:	75 34                	jne    c0023c62 <IDE::waitInterrupt(unsigned char)+0x54>
c0023c2e:	52                   	push   edx
c0023c2f:	6a 0c                	push   0xc
c0023c31:	56                   	push   esi
c0023c32:	57                   	push   edi
c0023c33:	e8 28 ff ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0023c38:	83 c4 10             	add    esp,0x10
c0023c3b:	a8 01                	test   al,0x1
c0023c3d:	75 2b                	jne    c0023c6a <IDE::waitInterrupt(unsigned char)+0x5c>
c0023c3f:	f6 c3 04             	test   bl,0x4
c0023c42:	75 16                	jne    c0023c5a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023c44:	83 fb 32             	cmp    ebx,0x32
c0023c47:	7e 11                	jle    c0023c5a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023c49:	50                   	push   eax
c0023c4a:	50                   	push   eax
c0023c4b:	6a 00                	push   0x0
c0023c4d:	68 80 96 98 00       	push   0x989680
c0023c52:	e8 f6 aa ff ff       	call   c001e74d <nanoSleep(unsigned long long)>
c0023c57:	83 c4 10             	add    esp,0x10
c0023c5a:	83 fb 3c             	cmp    ebx,0x3c
c0023c5d:	74 0b                	je     c0023c6a <IDE::waitInterrupt(unsigned char)+0x5c>
c0023c5f:	43                   	inc    ebx
c0023c60:	eb be                	jmp    c0023c20 <IDE::waitInterrupt(unsigned char)+0x12>
c0023c62:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023c6a:	83 c4 0c             	add    esp,0xc
c0023c6d:	89 e8                	mov    eax,ebp
c0023c6f:	5b                   	pop    ebx
c0023c70:	5e                   	pop    esi
c0023c71:	5f                   	pop    edi
c0023c72:	5d                   	pop    ebp
c0023c73:	c3                   	ret    

c0023c74 <ideChannel0IRQHandler(regs*, void*)>:
c0023c74:	83 ec 10             	sub    esp,0x10
c0023c77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c7b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023c82:	6a 07                	push   0x7
c0023c84:	6a 00                	push   0x0
c0023c86:	50                   	push   eax
c0023c87:	e8 d4 fe ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0023c8c:	83 c4 1c             	add    esp,0x1c
c0023c8f:	c3                   	ret    

c0023c90 <ideChannel1IRQHandler(regs*, void*)>:
c0023c90:	83 ec 10             	sub    esp,0x10
c0023c93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c97:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023c9e:	6a 07                	push   0x7
c0023ca0:	6a 01                	push   0x1
c0023ca2:	50                   	push   eax
c0023ca3:	e8 b8 fe ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0023ca8:	83 c4 1c             	add    esp,0x1c
c0023cab:	c3                   	ret    

c0023cac <IDE::enableIRQs(unsigned char, bool)>:
c0023cac:	57                   	push   edi
c0023cad:	56                   	push   esi
c0023cae:	be 04 00 00 00       	mov    esi,0x4
c0023cb3:	53                   	push   ebx
c0023cb4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023cb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023cbd:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023cc2:	0f 94 c0             	sete   al
c0023cc5:	d1 e0                	shl    eax,1
c0023cc7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023cce:	0f b6 c0             	movzx  eax,al
c0023cd1:	50                   	push   eax
c0023cd2:	6a 0c                	push   0xc
c0023cd4:	57                   	push   edi
c0023cd5:	53                   	push   ebx
c0023cd6:	e8 c5 fd ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cdb:	83 c4 10             	add    esp,0x10
c0023cde:	50                   	push   eax
c0023cdf:	6a 0c                	push   0xc
c0023ce1:	57                   	push   edi
c0023ce2:	53                   	push   ebx
c0023ce3:	e8 78 fe ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0023ce8:	83 c4 10             	add    esp,0x10
c0023ceb:	4e                   	dec    esi
c0023cec:	75 f0                	jne    c0023cde <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023cee:	5b                   	pop    ebx
c0023cef:	5e                   	pop    esi
c0023cf0:	5f                   	pop    edi
c0023cf1:	c3                   	ret    

c0023cf2 <IDE::open(int, int, void*)>:
c0023cf2:	55                   	push   ebp
c0023cf3:	57                   	push   edi
c0023cf4:	56                   	push   esi
c0023cf5:	53                   	push   ebx
c0023cf6:	83 ec 1c             	sub    esp,0x1c
c0023cf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023cfd:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023d06:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023d0f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023d16:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023d1d:	0f 85 b0 02 00 00    	jne    c0023fd3 <IDE::open(int, int, void*)+0x2e1>
c0023d23:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023d29:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023d2d:	83 e0 7f             	and    eax,0x7f
c0023d30:	3c 05                	cmp    al,0x5
c0023d32:	74 04                	je     c0023d38 <IDE::open(int, int, void*)+0x46>
c0023d34:	3c 0f                	cmp    al,0xf
c0023d36:	75 32                	jne    c0023d6a <IDE::open(int, int, void*)+0x78>
c0023d38:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023d3e:	83 e0 fc             	and    eax,0xfffffffc
c0023d41:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023d48:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023d4e:	83 e0 fc             	and    eax,0xfffffffc
c0023d51:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023d58:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023d5e:	83 e0 fc             	and    eax,0xfffffffc
c0023d61:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023d68:	eb 14                	jmp    c0023d7e <IDE::open(int, int, void*)+0x8c>
c0023d6a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d74:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d7e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023d85:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023d8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023d90:	89 c6                	mov    esi,eax
c0023d92:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023d97:	c1 e6 10             	shl    esi,0x10
c0023d9a:	89 e8                	mov    eax,ebp
c0023d9c:	89 fa                	mov    edx,edi
c0023d9e:	c1 e0 0b             	shl    eax,0xb
c0023da1:	09 f0                	or     eax,esi
c0023da3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023daa:	c1 e6 08             	shl    esi,0x8
c0023dad:	09 c6                	or     esi,eax
c0023daf:	89 f0                	mov    eax,esi
c0023db1:	0d 08 00 00 80       	or     eax,0x80000008
c0023db6:	ef                   	out    dx,eax
c0023db7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023dbc:	89 ca                	mov    edx,ecx
c0023dbe:	ed                   	in     eax,dx
c0023dbf:	c1 e8 10             	shr    eax,0x10
c0023dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0023dc7:	0f 84 f5 00 00 00    	je     c0023ec2 <IDE::open(int, int, void*)+0x1d0>
c0023dcd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023dd3:	89 fa                	mov    edx,edi
c0023dd5:	89 f0                	mov    eax,esi
c0023dd7:	ef                   	out    dx,eax
c0023dd8:	b0 fe                	mov    al,0xfe
c0023dda:	89 ca                	mov    edx,ecx
c0023ddc:	ee                   	out    dx,al
c0023ddd:	89 f0                	mov    eax,esi
c0023ddf:	89 fa                	mov    edx,edi
c0023de1:	ef                   	out    dx,eax
c0023de2:	89 ca                	mov    edx,ecx
c0023de4:	ed                   	in     eax,dx
c0023de5:	3c fe                	cmp    al,0xfe
c0023de7:	0f 85 a9 00 00 00    	jne    c0023e96 <IDE::open(int, int, void*)+0x1a4>
c0023ded:	8b 15 a8 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1a8
c0023df3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023dfa:	74 33                	je     c0023e2f <IDE::open(int, int, void*)+0x13d>
c0023dfc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023e02:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023e06:	40                   	inc    eax
c0023e07:	83 ec 0c             	sub    esp,0xc
c0023e0a:	0f b6 c0             	movzx  eax,al
c0023e0d:	50                   	push   eax
c0023e0e:	55                   	push   ebp
c0023e0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023e13:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023e19:	51                   	push   ecx
c0023e1a:	e8 e7 41 ff ff       	call   c0018006 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023e1f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023e24:	83 c4 1c             	add    esp,0x1c
c0023e27:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023e2d:	eb 0a                	jmp    c0023e39 <IDE::open(int, int, void*)+0x147>
c0023e2f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023e39:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023e40:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023e47:	c1 e1 10             	shl    ecx,0x10
c0023e4a:	c1 e0 08             	shl    eax,0x8
c0023e4d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023e52:	09 c1                	or     ecx,eax
c0023e54:	89 fa                	mov    edx,edi
c0023e56:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023e5d:	c1 e0 0b             	shl    eax,0xb
c0023e60:	09 c1                	or     ecx,eax
c0023e62:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023e68:	89 c8                	mov    eax,ecx
c0023e6a:	ef                   	out    dx,eax
c0023e6b:	be fc 0c 00 00       	mov    esi,0xcfc
c0023e70:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023e76:	89 f2                	mov    edx,esi
c0023e78:	ee                   	out    dx,al
c0023e79:	89 c8                	mov    eax,ecx
c0023e7b:	89 fa                	mov    edx,edi
c0023e7d:	ef                   	out    dx,eax
c0023e7e:	89 f2                	mov    edx,esi
c0023e80:	ed                   	in     eax,dx
c0023e81:	0f b6 c0             	movzx  eax,al
c0023e84:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023e8a:	74 46                	je     c0023ed2 <IDE::open(int, int, void*)+0x1e0>
c0023e8c:	83 ec 0c             	sub    esp,0xc
c0023e8f:	68 34 d8 02 c0       	push   0xc002d834
c0023e94:	eb 34                	jmp    c0023eca <IDE::open(int, int, void*)+0x1d8>
c0023e96:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023e9f:	75 17                	jne    c0023eb8 <IDE::open(int, int, void*)+0x1c6>
c0023ea1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023ea6:	74 07                	je     c0023eaf <IDE::open(int, int, void*)+0x1bd>
c0023ea8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023ead:	75 09                	jne    c0023eb8 <IDE::open(int, int, void*)+0x1c6>
c0023eaf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023eb6:	eb 1a                	jmp    c0023ed2 <IDE::open(int, int, void*)+0x1e0>
c0023eb8:	83 ec 0c             	sub    esp,0xc
c0023ebb:	68 3c d8 02 c0       	push   0xc002d83c
c0023ec0:	eb 08                	jmp    c0023eca <IDE::open(int, int, void*)+0x1d8>
c0023ec2:	83 ec 0c             	sub    esp,0xc
c0023ec5:	68 6d d8 02 c0       	push   0xc002d86d
c0023eca:	e8 c8 67 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0023ecf:	83 c4 10             	add    esp,0x10
c0023ed2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023ed9:	79 1a                	jns    c0023ef5 <IDE::open(int, int, void*)+0x203>
c0023edb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023ee1:	83 e0 fc             	and    eax,0xfffffffc
c0023ee4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023eeb:	83 c0 08             	add    eax,0x8
c0023eee:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023ef5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023efb:	89 c2                	mov    edx,eax
c0023efd:	83 e2 0f             	and    edx,0xf
c0023f00:	66 83 fa 08          	cmp    dx,0x8
c0023f04:	75 0a                	jne    c0023f10 <IDE::open(int, int, void*)+0x21e>
c0023f06:	83 e8 02             	sub    eax,0x2
c0023f09:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023f10:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023f16:	89 c2                	mov    edx,eax
c0023f18:	83 e2 0f             	and    edx,0xf
c0023f1b:	66 83 fa 08          	cmp    dx,0x8
c0023f1f:	75 0a                	jne    c0023f2b <IDE::open(int, int, void*)+0x239>
c0023f21:	83 e8 02             	sub    eax,0x2
c0023f24:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023f2b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023f32:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023f39:	89 d0                	mov    eax,edx
c0023f3b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023f3e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023f42:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023f46:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023f49:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023f4e:	0f b6 c9             	movzx  ecx,cl
c0023f51:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023f58:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023f5b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023f5f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023f63:	8d 50 02             	lea    edx,[eax+0x2]
c0023f66:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023f6b:	0f b6 d2             	movzx  edx,dl
c0023f6e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023f74:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023f77:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023f7b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023f7f:	8d 48 03             	lea    ecx,[eax+0x3]
c0023f82:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023f87:	0f b6 c9             	movzx  ecx,cl
c0023f8a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023f90:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023f93:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023f97:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023f9b:	8d 50 04             	lea    edx,[eax+0x4]
c0023f9e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023fa4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023fa9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023fb0:	66 85 f6             	test   si,si
c0023fb3:	74 3e                	je     c0023ff3 <IDE::open(int, int, void*)+0x301>
c0023fb5:	0f b6 d2             	movzx  edx,dl
c0023fb8:	83 c0 05             	add    eax,0x5
c0023fbb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023fbe:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023fc2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023fc6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023fcc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023fd1:	eb 20                	jmp    c0023ff3 <IDE::open(int, int, void*)+0x301>
c0023fd3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023fdd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023fe7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023fee:	e9 02 ff ff ff       	jmp    c0023ef5 <IDE::open(int, int, void*)+0x203>
c0023ff3:	52                   	push   edx
c0023ff4:	52                   	push   edx
c0023ff5:	6a 00                	push   0x0
c0023ff7:	53                   	push   ebx
c0023ff8:	e8 7d fa ff ff       	call   c0023a7a <IDE::prepareInterrupt(unsigned char)>
c0023ffd:	59                   	pop    ecx
c0023ffe:	5e                   	pop    esi
c0023fff:	6a 01                	push   0x1
c0024001:	53                   	push   ebx
c0024002:	e8 73 fa ff ff       	call   c0023a7a <IDE::prepareInterrupt(unsigned char)>
c0024007:	83 c4 0c             	add    esp,0xc
c002400a:	6a 00                	push   0x0
c002400c:	6a 00                	push   0x0
c002400e:	53                   	push   ebx
c002400f:	e8 98 fc ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c0024014:	83 c4 0c             	add    esp,0xc
c0024017:	6a 00                	push   0x0
c0024019:	6a 01                	push   0x1
c002401b:	53                   	push   ebx
c002401c:	e8 8b fc ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c0024021:	83 c4 10             	add    esp,0x10
c0024024:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002402b:	74 40                	je     c002406d <IDE::open(int, int, void*)+0x37b>
c002402d:	83 ec 0c             	sub    esp,0xc
c0024030:	68 97 d8 02 c0       	push   0xc002d897
c0024035:	e8 cd ea fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c002403a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002403d:	6a 01                	push   0x1
c002403f:	68 74 3c 02 c0       	push   0xc0023c74
c0024044:	6a 0e                	push   0xe
c0024046:	53                   	push   ebx
c0024047:	e8 6c fe fe ff       	call   c0013eb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002404c:	83 c4 14             	add    esp,0x14
c002404f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0024055:	53                   	push   ebx
c0024056:	6a 01                	push   0x1
c0024058:	68 90 3c 02 c0       	push   0xc0023c90
c002405d:	6a 0f                	push   0xf
c002405f:	53                   	push   ebx
c0024060:	e8 53 fe fe ff       	call   c0013eb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024065:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002406b:	eb 4a                	jmp    c00240b7 <IDE::open(int, int, void*)+0x3c5>
c002406d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0024077:	50                   	push   eax
c0024078:	6a 0f                	push   0xf
c002407a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024080:	68 b3 d8 02 c0       	push   0xc002d8b3
c0024085:	e8 7d ea fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c002408a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002408d:	6a 00                	push   0x0
c002408f:	68 74 3c 02 c0       	push   0xc0023c74
c0024094:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002409a:	53                   	push   ebx
c002409b:	e8 18 fe fe ff       	call   c0013eb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00240a0:	83 c4 14             	add    esp,0x14
c00240a3:	53                   	push   ebx
c00240a4:	6a 00                	push   0x0
c00240a6:	68 90 3c 02 c0       	push   0xc0023c90
c00240ab:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00240b1:	53                   	push   ebx
c00240b2:	e8 01 fe fe ff       	call   c0013eb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00240b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00240b9:	83 c4 20             	add    esp,0x20
c00240bc:	83 ec 0c             	sub    esp,0xc
c00240bf:	53                   	push   ebx
c00240c0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00240c3:	83 c4 0c             	add    esp,0xc
c00240c6:	6a 07                	push   0x7
c00240c8:	6a 00                	push   0x0
c00240ca:	53                   	push   ebx
c00240cb:	e8 90 fa ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00240d0:	83 c4 0c             	add    esp,0xc
c00240d3:	6a 07                	push   0x7
c00240d5:	6a 01                	push   0x1
c00240d7:	53                   	push   ebx
c00240d8:	e8 83 fa ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00240dd:	83 c4 0c             	add    esp,0xc
c00240e0:	6a 01                	push   0x1
c00240e2:	6a 00                	push   0x0
c00240e4:	53                   	push   ebx
c00240e5:	e8 c2 fb ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c00240ea:	83 c4 0c             	add    esp,0xc
c00240ed:	6a 01                	push   0x1
c00240ef:	6a 01                	push   0x1
c00240f1:	53                   	push   ebx
c00240f2:	e8 b5 fb ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c00240f7:	83 c4 2c             	add    esp,0x2c
c00240fa:	31 c0                	xor    eax,eax
c00240fc:	5b                   	pop    ebx
c00240fd:	5e                   	pop    esi
c00240fe:	5f                   	pop    edi
c00240ff:	5d                   	pop    ebp
c0024100:	c3                   	ret    
c0024101:	90                   	nop

c0024102 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0024102:	55                   	push   ebp
c0024103:	57                   	push   edi
c0024104:	56                   	push   esi
c0024105:	53                   	push   ebx
c0024106:	83 ec 1c             	sub    esp,0x1c
c0024109:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002410d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024111:	8d 50 f8             	lea    edx,[eax-0x8]
c0024114:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024118:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002411c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0024120:	80 fa 03             	cmp    dl,0x3
c0024123:	77 5d                	ja     c0024182 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0024125:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024129:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002412d:	0f b6 db             	movzx  ebx,bl
c0024130:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0024133:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0024137:	83 ca 80             	or     edx,0xffffff80
c002413a:	0f b6 d2             	movzx  edx,dl
c002413d:	52                   	push   edx
c002413e:	6a 0c                	push   0xc
c0024140:	53                   	push   ebx
c0024141:	56                   	push   esi
c0024142:	e8 59 f9 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024147:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002414c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024150:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024154:	0f b6 c0             	movzx  eax,al
c0024157:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002415b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002415d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0024162:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0024166:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002416a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002416e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0024176:	83 c4 2c             	add    esp,0x2c
c0024179:	5b                   	pop    ebx
c002417a:	5e                   	pop    esi
c002417b:	5f                   	pop    edi
c002417c:	5d                   	pop    ebp
c002417d:	e9 1e f9 ff ff       	jmp    c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024182:	3c 07                	cmp    al,0x7
c0024184:	77 10                	ja     c0024196 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0024186:	0f b6 db             	movzx  ebx,bl
c0024189:	0f b6 d0             	movzx  edx,al
c002418c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0024194:	eb 2d                	jmp    c00241c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024196:	3c 0d                	cmp    al,0xd
c0024198:	77 13                	ja     c00241ad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002419a:	0f b6 db             	movzx  ebx,bl
c002419d:	0f b6 c0             	movzx  eax,al
c00241a0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00241a7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00241ab:	eb 16                	jmp    c00241c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00241ad:	3c 15                	cmp    al,0x15
c00241af:	77 14                	ja     c00241c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00241b1:	0f b6 db             	movzx  ebx,bl
c00241b4:	0f b6 c0             	movzx  eax,al
c00241b7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00241bf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00241c3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00241c5:	83 c4 1c             	add    esp,0x1c
c00241c8:	5b                   	pop    ebx
c00241c9:	5e                   	pop    esi
c00241ca:	5f                   	pop    edi
c00241cb:	5d                   	pop    ebp
c00241cc:	c3                   	ret    
c00241cd:	90                   	nop

c00241ce <IDE::detect()>:
c00241ce:	55                   	push   ebp
c00241cf:	57                   	push   edi
c00241d0:	56                   	push   esi
c00241d1:	53                   	push   ebx
c00241d2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00241d8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00241df:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00241e6:	0f 85 be 02 00 00    	jne    c00244aa <IDE::detect()+0x2dc>
c00241ec:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00241f3:	31 f6                	xor    esi,esi
c00241f5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00241fd:	31 ed                	xor    ebp,ebp
c00241ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024203:	c1 e0 06             	shl    eax,0x6
c0024206:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002420e:	89 e8                	mov    eax,ebp
c0024210:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024214:	c1 e0 04             	shl    eax,0x4
c0024217:	83 c8 a0             	or     eax,0xffffffa0
c002421a:	0f b6 c0             	movzx  eax,al
c002421d:	50                   	push   eax
c002421e:	6a 06                	push   0x6
c0024220:	56                   	push   esi
c0024221:	53                   	push   ebx
c0024222:	e8 79 f8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024227:	83 c4 0c             	add    esp,0xc
c002422a:	6a 0c                	push   0xc
c002422c:	56                   	push   esi
c002422d:	53                   	push   ebx
c002422e:	e8 2d f9 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024233:	83 c4 0c             	add    esp,0xc
c0024236:	6a 0c                	push   0xc
c0024238:	56                   	push   esi
c0024239:	53                   	push   ebx
c002423a:	e8 21 f9 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002423f:	83 c4 0c             	add    esp,0xc
c0024242:	6a 0c                	push   0xc
c0024244:	56                   	push   esi
c0024245:	53                   	push   ebx
c0024246:	e8 15 f9 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002424b:	83 c4 0c             	add    esp,0xc
c002424e:	6a 0c                	push   0xc
c0024250:	56                   	push   esi
c0024251:	53                   	push   ebx
c0024252:	e8 09 f9 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024257:	68 ec 00 00 00       	push   0xec
c002425c:	6a 07                	push   0x7
c002425e:	56                   	push   esi
c002425f:	53                   	push   ebx
c0024260:	e8 3b f8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024265:	83 c4 1c             	add    esp,0x1c
c0024268:	6a 0c                	push   0xc
c002426a:	56                   	push   esi
c002426b:	53                   	push   ebx
c002426c:	e8 ef f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024271:	83 c4 0c             	add    esp,0xc
c0024274:	6a 0c                	push   0xc
c0024276:	56                   	push   esi
c0024277:	53                   	push   ebx
c0024278:	e8 e3 f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002427d:	83 c4 0c             	add    esp,0xc
c0024280:	6a 0c                	push   0xc
c0024282:	56                   	push   esi
c0024283:	53                   	push   ebx
c0024284:	e8 d7 f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024289:	83 c4 0c             	add    esp,0xc
c002428c:	6a 0c                	push   0xc
c002428e:	56                   	push   esi
c002428f:	53                   	push   ebx
c0024290:	e8 cb f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024295:	83 c4 0c             	add    esp,0xc
c0024298:	6a 0c                	push   0xc
c002429a:	56                   	push   esi
c002429b:	53                   	push   ebx
c002429c:	e8 bf f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00242a1:	83 c4 10             	add    esp,0x10
c00242a4:	84 c0                	test   al,al
c00242a6:	0f 84 8b 01 00 00    	je     c0024437 <IDE::detect()+0x269>
c00242ac:	31 ff                	xor    edi,edi
c00242ae:	50                   	push   eax
c00242af:	6a 0c                	push   0xc
c00242b1:	56                   	push   esi
c00242b2:	53                   	push   ebx
c00242b3:	e8 a8 f8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00242b8:	83 c4 10             	add    esp,0x10
c00242bb:	a8 01                	test   al,0x1
c00242bd:	0f 85 8e 01 00 00    	jne    c0024451 <IDE::detect()+0x283>
c00242c3:	84 c0                	test   al,al
c00242c5:	78 04                	js     c00242cb <IDE::detect()+0xfd>
c00242c7:	a8 08                	test   al,0x8
c00242c9:	75 27                	jne    c00242f2 <IDE::detect()+0x124>
c00242cb:	47                   	inc    edi
c00242cc:	81 ff 17 01 00 00    	cmp    edi,0x117
c00242d2:	7e da                	jle    c00242ae <IDE::detect()+0xe0>
c00242d4:	50                   	push   eax
c00242d5:	50                   	push   eax
c00242d6:	6a 00                	push   0x0
c00242d8:	68 40 4b 4c 00       	push   0x4c4b40
c00242dd:	e8 6b a4 ff ff       	call   c001e74d <nanoSleep(unsigned long long)>
c00242e2:	83 c4 10             	add    esp,0x10
c00242e5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00242eb:	75 c1                	jne    c00242ae <IDE::detect()+0xe0>
c00242ed:	e9 5f 01 00 00       	jmp    c0024451 <IDE::detect()+0x283>
c00242f2:	31 c9                	xor    ecx,ecx
c00242f4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00242f8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00242fc:	83 ec 0c             	sub    esp,0xc
c00242ff:	68 80 00 00 00       	push   0x80
c0024304:	57                   	push   edi
c0024305:	6a 00                	push   0x0
c0024307:	56                   	push   esi
c0024308:	53                   	push   ebx
c0024309:	e8 f4 fd ff ff       	call   c0024102 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002430e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024313:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024317:	89 d1                	mov    ecx,edx
c0024319:	c1 e0 06             	shl    eax,0x6
c002431c:	01 d8                	add    eax,ebx
c002431e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024325:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002432c:	89 f2                	mov    edx,esi
c002432e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024334:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024338:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002433e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024342:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024349:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024351:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024358:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024360:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0024366:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002436d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024373:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024377:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002437b:	83 c4 20             	add    esp,0x20
c002437e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024381:	83 c0 02             	add    eax,0x2
c0024384:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002438a:	83 c7 02             	add    edi,0x2
c002438d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024390:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0024396:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002439a:	75 e2                	jne    c002437e <IDE::detect()+0x1b0>
c002439c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00243a0:	c1 e0 06             	shl    eax,0x6
c00243a3:	01 d8                	add    eax,ebx
c00243a5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00243ab:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00243b2:	66 c1 ea 09          	shr    dx,0x9
c00243b6:	83 e2 01             	and    edx,0x1
c00243b9:	84 c9                	test   cl,cl
c00243bb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00243c1:	75 2f                	jne    c00243f2 <IDE::detect()+0x224>
c00243c3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00243c9:	85 c0                	test   eax,eax
c00243cb:	74 66                	je     c0024433 <IDE::detect()+0x265>
c00243cd:	50                   	push   eax
c00243ce:	55                   	push   ebp
c00243cf:	56                   	push   esi
c00243d0:	68 cf d8 02 c0       	push   0xc002d8cf
c00243d5:	e8 2d e7 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00243da:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00243e1:	e8 a6 b4 fe ff       	call   c000f88c <malloc>
c00243e6:	89 c7                	mov    edi,eax
c00243e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00243eb:	e8 78 06 00 00       	call   c0024a68 <ATA::ATA()>
c00243f0:	eb 28                	jmp    c002441a <IDE::detect()+0x24c>
c00243f2:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00243f8:	55                   	push   ebp
c00243f9:	56                   	push   esi
c00243fa:	68 fe d8 02 c0       	push   0xc002d8fe
c00243ff:	e8 03 e7 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0024404:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002440b:	e8 7c b4 fe ff       	call   c000f88c <malloc>
c0024410:	89 c7                	mov    edi,eax
c0024412:	89 04 24             	mov    DWORD PTR [esp],eax
c0024415:	e8 8e 0c 00 00       	call   c00250a8 <ATAPI::ATAPI()>
c002441a:	5a                   	pop    edx
c002441b:	59                   	pop    ecx
c002441c:	57                   	push   edi
c002441d:	53                   	push   ebx
c002441e:	e8 1d fb fe ff       	call   c0013f40 <Device::addChild(Device*)>
c0024423:	8b 07                	mov    eax,DWORD PTR [edi]
c0024425:	53                   	push   ebx
c0024426:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002442a:	6a 00                	push   0x0
c002442c:	57                   	push   edi
c002442d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024430:	83 c4 20             	add    esp,0x20
c0024433:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0024437:	4d                   	dec    ebp
c0024438:	74 0a                	je     c0024444 <IDE::detect()+0x276>
c002443a:	bd 01 00 00 00       	mov    ebp,0x1
c002443f:	e9 bb fd ff ff       	jmp    c00241ff <IDE::detect()+0x31>
c0024444:	4e                   	dec    esi
c0024445:	74 63                	je     c00244aa <IDE::detect()+0x2dc>
c0024447:	be 01 00 00 00       	mov    esi,0x1
c002444c:	e9 ac fd ff ff       	jmp    c00241fd <IDE::detect()+0x2f>
c0024451:	50                   	push   eax
c0024452:	6a 04                	push   0x4
c0024454:	56                   	push   esi
c0024455:	53                   	push   ebx
c0024456:	e8 05 f7 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002445b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002445f:	83 c4 0c             	add    esp,0xc
c0024462:	6a 05                	push   0x5
c0024464:	56                   	push   esi
c0024465:	53                   	push   ebx
c0024466:	e8 f5 f6 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002446b:	83 c4 10             	add    esp,0x10
c002446e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024472:	80 fa 14             	cmp    dl,0x14
c0024475:	75 04                	jne    c002447b <IDE::detect()+0x2ad>
c0024477:	3c eb                	cmp    al,0xeb
c0024479:	eb 07                	jmp    c0024482 <IDE::detect()+0x2b4>
c002447b:	3c 96                	cmp    al,0x96
c002447d:	75 b8                	jne    c0024437 <IDE::detect()+0x269>
c002447f:	80 fa 69             	cmp    dl,0x69
c0024482:	75 b3                	jne    c0024437 <IDE::detect()+0x269>
c0024484:	68 a1 00 00 00       	push   0xa1
c0024489:	6a 07                	push   0x7
c002448b:	56                   	push   esi
c002448c:	53                   	push   ebx
c002448d:	e8 0e f6 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024492:	5f                   	pop    edi
c0024493:	58                   	pop    eax
c0024494:	6a 00                	push   0x0
c0024496:	68 40 42 0f 00       	push   0xf4240
c002449b:	e8 ad a2 ff ff       	call   c001e74d <nanoSleep(unsigned long long)>
c00244a0:	83 c4 10             	add    esp,0x10
c00244a3:	b1 01                	mov    cl,0x1
c00244a5:	e9 4a fe ff ff       	jmp    c00242f4 <IDE::detect()+0x126>
c00244aa:	81 c4 1c 02 00 00    	add    esp,0x21c
c00244b0:	5b                   	pop    ebx
c00244b1:	5e                   	pop    esi
c00244b2:	5f                   	pop    edi
c00244b3:	5d                   	pop    ebp
c00244b4:	c3                   	ret    
c00244b5:	90                   	nop

c00244b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00244b6:	55                   	push   ebp
c00244b7:	57                   	push   edi
c00244b8:	56                   	push   esi
c00244b9:	53                   	push   ebx
c00244ba:	83 ec 1c             	sub    esp,0x1c
c00244bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00244c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00244c5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00244c9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00244cd:	88 c3                	mov    bl,al
c00244cf:	84 c0                	test   al,al
c00244d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244d5:	0f 84 67 01 00 00    	je     c0024642 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00244db:	83 ec 0c             	sub    esp,0xc
c00244de:	68 2f d9 02 c0       	push   0xc002d92f
c00244e3:	e8 1f e6 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00244e8:	83 c4 10             	add    esp,0x10
c00244eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244ef:	3c 01                	cmp    al,0x1
c00244f1:	75 17                	jne    c002450a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00244f3:	83 ec 0c             	sub    esp,0xc
c00244f6:	b3 13                	mov    bl,0x13
c00244f8:	68 3b d9 02 c0       	push   0xc002d93b
c00244fd:	e8 05 e6 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0024502:	83 c4 10             	add    esp,0x10
c0024505:	e9 25 01 00 00       	jmp    c002462f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002450a:	3c 02                	cmp    al,0x2
c002450c:	0f 85 ef 00 00 00    	jne    c0024601 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024512:	d1 e6                	shl    esi,1
c0024514:	09 ee                	or     esi,ebp
c0024516:	52                   	push   edx
c0024517:	89 f0                	mov    eax,esi
c0024519:	6a 01                	push   0x1
c002451b:	0f b6 f0             	movzx  esi,al
c002451e:	c1 e6 06             	shl    esi,0x6
c0024521:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024529:	50                   	push   eax
c002452a:	57                   	push   edi
c002452b:	e8 30 f6 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024530:	83 c4 10             	add    esp,0x10
c0024533:	89 c6                	mov    esi,eax
c0024535:	a8 01                	test   al,0x1
c0024537:	74 12                	je     c002454b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024539:	83 ec 0c             	sub    esp,0xc
c002453c:	b3 07                	mov    bl,0x7
c002453e:	68 50 d9 02 c0       	push   0xc002d950
c0024543:	e8 bf e5 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0024548:	83 c4 10             	add    esp,0x10
c002454b:	f7 c6 02 00 00 00    	test   esi,0x2
c0024551:	74 12                	je     c0024565 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024553:	83 ec 0c             	sub    esp,0xc
c0024556:	b3 03                	mov    bl,0x3
c0024558:	68 6e d9 02 c0       	push   0xc002d96e
c002455d:	e8 a5 e5 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0024562:	83 c4 10             	add    esp,0x10
c0024565:	f7 c6 04 00 00 00    	test   esi,0x4
c002456b:	74 12                	je     c002457f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002456d:	83 ec 0c             	sub    esp,0xc
c0024570:	b3 14                	mov    bl,0x14
c0024572:	68 8e d9 02 c0       	push   0xc002d98e
c0024577:	e8 8b e5 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c002457c:	83 c4 10             	add    esp,0x10
c002457f:	f7 c6 08 00 00 00    	test   esi,0x8
c0024585:	74 12                	je     c0024599 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0024587:	83 ec 0c             	sub    esp,0xc
c002458a:	b3 03                	mov    bl,0x3
c002458c:	68 6e d9 02 c0       	push   0xc002d96e
c0024591:	e8 71 e5 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0024596:	83 c4 10             	add    esp,0x10
c0024599:	f7 c6 10 00 00 00    	test   esi,0x10
c002459f:	74 12                	je     c00245b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00245a1:	83 ec 0c             	sub    esp,0xc
c00245a4:	b3 15                	mov    bl,0x15
c00245a6:	68 a6 d9 02 c0       	push   0xc002d9a6
c00245ab:	e8 57 e5 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00245b0:	83 c4 10             	add    esp,0x10
c00245b3:	f7 c6 20 00 00 00    	test   esi,0x20
c00245b9:	74 12                	je     c00245cd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00245bb:	83 ec 0c             	sub    esp,0xc
c00245be:	b3 03                	mov    bl,0x3
c00245c0:	68 6e d9 02 c0       	push   0xc002d96e
c00245c5:	e8 3d e5 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00245ca:	83 c4 10             	add    esp,0x10
c00245cd:	f7 c6 40 00 00 00    	test   esi,0x40
c00245d3:	74 12                	je     c00245e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00245d5:	83 ec 0c             	sub    esp,0xc
c00245d8:	b3 16                	mov    bl,0x16
c00245da:	68 c0 d9 02 c0       	push   0xc002d9c0
c00245df:	e8 23 e5 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00245e4:	83 c4 10             	add    esp,0x10
c00245e7:	89 f0                	mov    eax,esi
c00245e9:	84 c0                	test   al,al
c00245eb:	79 42                	jns    c002462f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00245ed:	83 ec 0c             	sub    esp,0xc
c00245f0:	b3 0d                	mov    bl,0xd
c00245f2:	68 e1 d9 02 c0       	push   0xc002d9e1
c00245f7:	e8 0b e5 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00245fc:	83 c4 10             	add    esp,0x10
c00245ff:	eb 2e                	jmp    c002462f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024601:	3c 03                	cmp    al,0x3
c0024603:	75 14                	jne    c0024619 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024605:	83 ec 0c             	sub    esp,0xc
c0024608:	b3 17                	mov    bl,0x17
c002460a:	68 f5 d9 02 c0       	push   0xc002d9f5
c002460f:	e8 f3 e4 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0024614:	83 c4 10             	add    esp,0x10
c0024617:	eb 16                	jmp    c002462f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024619:	3c 04                	cmp    al,0x4
c002461b:	75 12                	jne    c002462f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002461d:	83 ec 0c             	sub    esp,0xc
c0024620:	b3 08                	mov    bl,0x8
c0024622:	68 0b da 02 c0       	push   0xc002da0b
c0024627:	e8 db e4 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c002462c:	83 c4 10             	add    esp,0x10
c002462f:	50                   	push   eax
c0024630:	50                   	push   eax
c0024631:	0f b6 c3             	movzx  eax,bl
c0024634:	50                   	push   eax
c0024635:	68 23 da 02 c0       	push   0xc002da23
c002463a:	e8 c8 e4 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c002463f:	83 c4 10             	add    esp,0x10
c0024642:	83 c4 1c             	add    esp,0x1c
c0024645:	88 d8                	mov    al,bl
c0024647:	5b                   	pop    ebx
c0024648:	5e                   	pop    esi
c0024649:	5f                   	pop    edi
c002464a:	5d                   	pop    ebp
c002464b:	c3                   	ret    

c002464c <IDE::polling(unsigned char, unsigned int)>:
c002464c:	57                   	push   edi
c002464d:	56                   	push   esi
c002464e:	53                   	push   ebx
c002464f:	bb 04 00 00 00       	mov    ebx,0x4
c0024654:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024658:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002465d:	52                   	push   edx
c002465e:	6a 0c                	push   0xc
c0024660:	56                   	push   esi
c0024661:	57                   	push   edi
c0024662:	e8 f9 f4 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024667:	83 c4 10             	add    esp,0x10
c002466a:	4b                   	dec    ebx
c002466b:	75 f0                	jne    c002465d <IDE::polling(unsigned char, unsigned int)+0x11>
c002466d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024672:	50                   	push   eax
c0024673:	6a 0c                	push   0xc
c0024675:	56                   	push   esi
c0024676:	57                   	push   edi
c0024677:	e8 e4 f4 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c002467c:	83 c4 10             	add    esp,0x10
c002467f:	a8 01                	test   al,0x1
c0024681:	74 12                	je     c0024695 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024683:	83 ec 0c             	sub    esp,0xc
c0024686:	68 3d da 02 c0       	push   0xc002da3d
c002468b:	e8 77 e4 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0024690:	83 c4 10             	add    esp,0x10
c0024693:	eb 17                	jmp    c00246ac <IDE::polling(unsigned char, unsigned int)+0x60>
c0024695:	a8 20                	test   al,0x20
c0024697:	75 0f                	jne    c00246a8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024699:	4b                   	dec    ebx
c002469a:	74 10                	je     c00246ac <IDE::polling(unsigned char, unsigned int)+0x60>
c002469c:	84 c0                	test   al,al
c002469e:	78 d2                	js     c0024672 <IDE::polling(unsigned char, unsigned int)+0x26>
c00246a0:	a8 08                	test   al,0x8
c00246a2:	74 ce                	je     c0024672 <IDE::polling(unsigned char, unsigned int)+0x26>
c00246a4:	31 c0                	xor    eax,eax
c00246a6:	eb 06                	jmp    c00246ae <IDE::polling(unsigned char, unsigned int)+0x62>
c00246a8:	b0 01                	mov    al,0x1
c00246aa:	eb 02                	jmp    c00246ae <IDE::polling(unsigned char, unsigned int)+0x62>
c00246ac:	b0 02                	mov    al,0x2
c00246ae:	5b                   	pop    ebx
c00246af:	5e                   	pop    esi
c00246b0:	5f                   	pop    edi
c00246b1:	c3                   	ret    

c00246b2 <SATABus::close(int, int, void*)>:
c00246b2:	31 c0                	xor    eax,eax
c00246b4:	c3                   	ret    
c00246b5:	90                   	nop

c00246b6 <SATABus::detect()>:
c00246b6:	c3                   	ret    
c00246b7:	90                   	nop

c00246b8 <SATABus::SATABus()>:
c00246b8:	83 ec 0c             	sub    esp,0xc
c00246bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246bf:	83 ec 08             	sub    esp,0x8
c00246c2:	68 80 da 02 c0       	push   0xc002da80
c00246c7:	50                   	push   eax
c00246c8:	e8 21 fc fe ff       	call   c00142ee <HardDiskController::HardDiskController(char const*)>
c00246cd:	83 c4 10             	add    esp,0x10
c00246d0:	ba 3c db 02 c0       	mov    edx,0xc002db3c
c00246d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d9:	89 10                	mov    DWORD PTR [eax],edx
c00246db:	83 ec 0c             	sub    esp,0xc
c00246de:	6a 50                	push   0x50
c00246e0:	e8 c8 b5 fe ff       	call   c000fcad <Phys::allocateContiguousPages(int)>
c00246e5:	83 c4 10             	add    esp,0x10
c00246e8:	89 c2                	mov    edx,eax
c00246ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00246f4:	83 ec 0c             	sub    esp,0xc
c00246f7:	6a 50                	push   0x50
c00246f9:	e8 03 d0 fe ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c00246fe:	83 c4 10             	add    esp,0x10
c0024701:	89 c2                	mov    edx,eax
c0024703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024707:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002470d:	a1 30 f3 02 c0       	mov    eax,ds:0xc002f330
c0024712:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024716:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002471c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024720:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024726:	83 ec 0c             	sub    esp,0xc
c0024729:	6a 03                	push   0x3
c002472b:	6a 50                	push   0x50
c002472d:	51                   	push   ecx
c002472e:	52                   	push   edx
c002472f:	50                   	push   eax
c0024730:	e8 f9 da fe ff       	call   c001222e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024735:	83 c4 20             	add    esp,0x20
c0024738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002473c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024746:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002474c:	83 ec 04             	sub    esp,0x4
c002474f:	52                   	push   edx
c0024750:	50                   	push   eax
c0024751:	68 a4 da 02 c0       	push   0xc002daa4
c0024756:	e8 ac e3 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c002475b:	83 c4 10             	add    esp,0x10
c002475e:	90                   	nop
c002475f:	83 c4 0c             	add    esp,0xc
c0024762:	c3                   	ret    
c0024763:	90                   	nop

c0024764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024764:	83 ec 0c             	sub    esp,0xc
c0024767:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002476b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002476e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024771:	09 c2                	or     edx,eax
c0024773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024777:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002477d:	8b 08                	mov    ecx,DWORD PTR [eax]
c002477f:	31 c0                	xor    eax,eax
c0024781:	c1 e9 08             	shr    ecx,0x8
c0024784:	83 e1 0f             	and    ecx,0xf
c0024787:	39 c8                	cmp    eax,ecx
c0024789:	74 0a                	je     c0024795 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002478b:	f6 c2 01             	test   dl,0x1
c002478e:	74 18                	je     c00247a8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024790:	d1 ea                	shr    edx,1
c0024792:	40                   	inc    eax
c0024793:	eb f2                	jmp    c0024787 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024795:	83 ec 0c             	sub    esp,0xc
c0024798:	68 c8 da 02 c0       	push   0xc002dac8
c002479d:	e8 f5 5e ff ff       	call   c001a697 <Krnl::panic(char const*)>
c00247a2:	83 c4 10             	add    esp,0x10
c00247a5:	83 c8 ff             	or     eax,0xffffffff
c00247a8:	83 c4 0c             	add    esp,0xc
c00247ab:	c3                   	ret    

c00247ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00247ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00247b0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00247b3:	89 c2                	mov    edx,eax
c00247b5:	c1 ea 08             	shr    edx,0x8
c00247b8:	83 e2 0f             	and    edx,0xf
c00247bb:	fe ca                	dec    dl
c00247bd:	75 31                	jne    c00247f0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00247bf:	83 e0 0f             	and    eax,0xf
c00247c2:	3c 03                	cmp    al,0x3
c00247c4:	75 2a                	jne    c00247f0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00247c6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00247c9:	b8 02 00 00 00       	mov    eax,0x2
c00247ce:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00247d4:	74 1c                	je     c00247f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00247d6:	b8 04 00 00 00       	mov    eax,0x4
c00247db:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00247e1:	74 0f                	je     c00247f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00247e3:	31 c0                	xor    eax,eax
c00247e5:	83 fa 03             	cmp    edx,0x3
c00247e8:	0f 94 c0             	sete   al
c00247eb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00247ef:	c3                   	ret    
c00247f0:	31 c0                	xor    eax,eax
c00247f2:	c3                   	ret    
c00247f3:	90                   	nop

c00247f4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00247f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00247f8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247fb:	0f ba e2 0f          	bt     edx,0xf
c00247ff:	72 f7                	jb     c00247f8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024801:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024804:	83 ca 10             	or     edx,0x10
c0024807:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002480a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002480d:	83 ca 01             	or     edx,0x1
c0024810:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024813:	c3                   	ret    

c0024814 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024818:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002481b:	83 e2 fe             	and    edx,0xfffffffe
c002481e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024821:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024824:	83 e2 ef             	and    edx,0xffffffef
c0024827:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002482a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002482d:	0f ba e2 0e          	bt     edx,0xe
c0024831:	72 f7                	jb     c002482a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024833:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024836:	0f ba e2 0f          	bt     edx,0xf
c002483a:	72 ee                	jb     c002482a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002483c:	c3                   	ret    
c002483d:	90                   	nop

c002483e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002483e:	55                   	push   ebp
c002483f:	57                   	push   edi
c0024840:	56                   	push   esi
c0024841:	53                   	push   ebx
c0024842:	83 ec 1c             	sub    esp,0x1c
c0024845:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024849:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002484d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024851:	53                   	push   ebx
c0024852:	89 fd                	mov    ebp,edi
c0024854:	56                   	push   esi
c0024855:	c1 e5 0a             	shl    ebp,0xa
c0024858:	e8 b7 ff ff ff       	call   c0024814 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002485d:	83 ec 0c             	sub    esp,0xc
c0024860:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024866:	01 e8                	add    eax,ebp
c0024868:	89 03                	mov    DWORD PTR [ebx],eax
c002486a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002486c:	68 00 04 00 00       	push   0x400
c0024871:	6a 00                	push   0x0
c0024873:	50                   	push   eax
c0024874:	e8 d7 be fd ff       	call   c0000750 <memset>
c0024879:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002487f:	89 fa                	mov    edx,edi
c0024881:	01 e8                	add    eax,ebp
c0024883:	c1 e7 0d             	shl    edi,0xd
c0024886:	89 03                	mov    DWORD PTR [ebx],eax
c0024888:	c1 e2 08             	shl    edx,0x8
c002488b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024892:	81 c2 00 80 00 00    	add    edx,0x8000
c0024898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002489c:	89 d0                	mov    eax,edx
c002489e:	83 c4 1c             	add    esp,0x1c
c00248a1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00248a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00248aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00248ad:	68 00 01 00 00       	push   0x100
c00248b2:	6a 00                	push   0x0
c00248b4:	50                   	push   eax
c00248b5:	e8 96 be fd ff       	call   c0000750 <memset>
c00248ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248be:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00248c4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00248ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00248ce:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00248d1:	83 c4 10             	add    esp,0x10
c00248d4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00248db:	31 ff                	xor    edi,edi
c00248dd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00248e3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00248e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00248ed:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00248f3:	83 c5 20             	add    ebp,0x20
c00248f6:	01 f8                	add    eax,edi
c00248f8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00248fb:	52                   	push   edx
c00248fc:	68 00 01 00 00       	push   0x100
c0024901:	6a 00                	push   0x0
c0024903:	50                   	push   eax
c0024904:	e8 47 be fd ff       	call   c0000750 <memset>
c0024909:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002490d:	83 c4 10             	add    esp,0x10
c0024910:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024916:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002491d:	01 f8                	add    eax,edi
c002491f:	81 c7 00 01 00 00    	add    edi,0x100
c0024925:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024928:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002492e:	75 b3                	jne    c00248e3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024930:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024934:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024938:	83 c4 1c             	add    esp,0x1c
c002493b:	5b                   	pop    ebx
c002493c:	5e                   	pop    esi
c002493d:	5f                   	pop    edi
c002493e:	5d                   	pop    ebp
c002493f:	e9 b0 fe ff ff       	jmp    c00247f4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024944 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024944:	55                   	push   ebp
c0024945:	57                   	push   edi
c0024946:	56                   	push   esi
c0024947:	53                   	push   ebx
c0024948:	31 db                	xor    ebx,ebx
c002494a:	83 ec 0c             	sub    esp,0xc
c002494d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024951:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024955:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024958:	f7 c7 01 00 00 00    	test   edi,0x1
c002495e:	0f 84 aa 00 00 00    	je     c0024a0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024964:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024968:	89 d8                	mov    eax,ebx
c002496a:	c1 e0 07             	shl    eax,0x7
c002496d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024974:	55                   	push   ebp
c0024975:	56                   	push   esi
c0024976:	e8 31 fe ff ff       	call   c00247ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002497b:	5a                   	pop    edx
c002497c:	83 f8 01             	cmp    eax,0x1
c002497f:	59                   	pop    ecx
c0024980:	75 30                	jne    c00249b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024982:	50                   	push   eax
c0024983:	50                   	push   eax
c0024984:	53                   	push   ebx
c0024985:	68 ed da 02 c0       	push   0xc002daed
c002498a:	e8 78 e1 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c002498f:	83 c4 0c             	add    esp,0xc
c0024992:	53                   	push   ebx
c0024993:	55                   	push   ebp
c0024994:	56                   	push   esi
c0024995:	e8 a4 fe ff ff       	call   c002483e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002499a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00249a1:	e8 e6 ae fe ff       	call   c000f88c <malloc>
c00249a6:	89 c5                	mov    ebp,eax
c00249a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00249ab:	e8 5c 0d 00 00       	call   c002570c <SATA::SATA()>
c00249b0:	eb 33                	jmp    c00249e5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00249b2:	83 f8 04             	cmp    eax,0x4
c00249b5:	75 47                	jne    c00249fe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00249b7:	50                   	push   eax
c00249b8:	50                   	push   eax
c00249b9:	53                   	push   ebx
c00249ba:	68 04 db 02 c0       	push   0xc002db04
c00249bf:	e8 43 e1 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00249c4:	83 c4 0c             	add    esp,0xc
c00249c7:	53                   	push   ebx
c00249c8:	55                   	push   ebp
c00249c9:	56                   	push   esi
c00249ca:	e8 6f fe ff ff       	call   c002483e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00249cf:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00249d6:	e8 b1 ae fe ff       	call   c000f88c <malloc>
c00249db:	89 c5                	mov    ebp,eax
c00249dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00249e0:	e8 d3 10 00 00       	call   c0025ab8 <SATAPI::SATAPI()>
c00249e5:	5a                   	pop    edx
c00249e6:	59                   	pop    ecx
c00249e7:	55                   	push   ebp
c00249e8:	56                   	push   esi
c00249e9:	e8 52 f5 fe ff       	call   c0013f40 <Device::addChild(Device*)>
c00249ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00249f1:	56                   	push   esi
c00249f2:	6a 00                	push   0x0
c00249f4:	53                   	push   ebx
c00249f5:	55                   	push   ebp
c00249f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00249f9:	83 c4 20             	add    esp,0x20
c00249fc:	eb 10                	jmp    c0024a0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00249fe:	50                   	push   eax
c00249ff:	50                   	push   eax
c0024a00:	53                   	push   ebx
c0024a01:	68 1d db 02 c0       	push   0xc002db1d
c0024a06:	e8 fc e0 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0024a0b:	83 c4 10             	add    esp,0x10
c0024a0e:	d1 ef                	shr    edi,1
c0024a10:	43                   	inc    ebx
c0024a11:	83 fb 20             	cmp    ebx,0x20
c0024a14:	0f 85 3e ff ff ff    	jne    c0024958 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024a1a:	83 c4 0c             	add    esp,0xc
c0024a1d:	5b                   	pop    ebx
c0024a1e:	5e                   	pop    esi
c0024a1f:	5f                   	pop    edi
c0024a20:	5d                   	pop    ebp
c0024a21:	c3                   	ret    

c0024a22 <SATABus::open(int, int, void*)>:
c0024a22:	83 ec 14             	sub    esp,0x14
c0024a25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a29:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024a2f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024a35:	52                   	push   edx
c0024a36:	50                   	push   eax
c0024a37:	e8 08 ff ff ff       	call   c0024944 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024a3c:	31 c0                	xor    eax,eax
c0024a3e:	83 c4 1c             	add    esp,0x1c
c0024a41:	c3                   	ret    

c0024a42 <ATA::close(int, int, void*)>:
c0024a42:	83 ec 0c             	sub    esp,0xc
c0024a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a49:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a4f:	85 c0                	test   eax,eax
c0024a51:	74 0c                	je     c0024a5f <ATA::close(int, int, void*)+0x1d>
c0024a53:	83 ec 0c             	sub    esp,0xc
c0024a56:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a58:	50                   	push   eax
c0024a59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a5c:	83 c4 10             	add    esp,0x10
c0024a5f:	31 c0                	xor    eax,eax
c0024a61:	83 c4 0c             	add    esp,0xc
c0024a64:	c3                   	ret    
c0024a65:	90                   	nop

c0024a66 <ATA::powerSaving(PowerSavingLevel)>:
c0024a66:	c3                   	ret    
c0024a67:	90                   	nop

c0024a68 <ATA::ATA()>:
c0024a68:	83 ec 0c             	sub    esp,0xc
c0024a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a6f:	83 ec 04             	sub    esp,0x4
c0024a72:	68 00 02 00 00       	push   0x200
c0024a77:	68 05 dc 02 c0       	push   0xc002dc05
c0024a7c:	50                   	push   eax
c0024a7d:	e8 04 f9 fe ff       	call   c0014386 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a82:	83 c4 10             	add    esp,0x10
c0024a85:	ba 88 db 02 c0       	mov    edx,0xc002db88
c0024a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a8e:	89 10                	mov    DWORD PTR [eax],edx
c0024a90:	90                   	nop
c0024a91:	83 c4 0c             	add    esp,0xc
c0024a94:	c3                   	ret    
c0024a95:	90                   	nop

c0024a96 <ATA::flush(bool)>:
c0024a96:	53                   	push   ebx
c0024a97:	83 ec 08             	sub    esp,0x8
c0024a9a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024a9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024aa3:	19 c0                	sbb    eax,eax
c0024aa5:	83 e0 fd             	and    eax,0xfffffffd
c0024aa8:	05 ea 00 00 00       	add    eax,0xea
c0024aad:	50                   	push   eax
c0024aae:	6a 07                	push   0x7
c0024ab0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab7:	50                   	push   eax
c0024ab8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024abe:	e8 dd ef ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ac3:	83 c4 0c             	add    esp,0xc
c0024ac6:	6a 00                	push   0x0
c0024ac8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024acf:	50                   	push   eax
c0024ad0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ad6:	e8 71 fb ff ff       	call   c002464c <IDE::polling(unsigned char, unsigned int)>
c0024adb:	83 c4 18             	add    esp,0x18
c0024ade:	5b                   	pop    ebx
c0024adf:	c3                   	ret    

c0024ae0 <ATA::readyForCommand()>:
c0024ae0:	56                   	push   esi
c0024ae1:	53                   	push   ebx
c0024ae2:	31 db                	xor    ebx,ebx
c0024ae4:	50                   	push   eax
c0024ae5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024ae9:	50                   	push   eax
c0024aea:	6a 0c                	push   0xc
c0024aec:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024af3:	50                   	push   eax
c0024af4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024afa:	e8 61 f0 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c0024aff:	83 c4 10             	add    esp,0x10
c0024b02:	a8 88                	test   al,0x88
c0024b04:	74 23                	je     c0024b29 <ATA::readyForCommand()+0x49>
c0024b06:	43                   	inc    ebx
c0024b07:	83 fb 63             	cmp    ebx,0x63
c0024b0a:	7e dd                	jle    c0024ae9 <ATA::readyForCommand()+0x9>
c0024b0c:	51                   	push   ecx
c0024b0d:	51                   	push   ecx
c0024b0e:	6a 00                	push   0x0
c0024b10:	68 40 42 0f 00       	push   0xf4240
c0024b15:	e8 33 9c ff ff       	call   c001e74d <nanoSleep(unsigned long long)>
c0024b1a:	83 c4 10             	add    esp,0x10
c0024b1d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024b23:	75 c4                	jne    c0024ae9 <ATA::readyForCommand()+0x9>
c0024b25:	31 c0                	xor    eax,eax
c0024b27:	eb 02                	jmp    c0024b2b <ATA::readyForCommand()+0x4b>
c0024b29:	b0 01                	mov    al,0x1
c0024b2b:	5a                   	pop    edx
c0024b2c:	5b                   	pop    ebx
c0024b2d:	5e                   	pop    esi
c0024b2e:	c3                   	ret    
c0024b2f:	90                   	nop

c0024b30 <ATA::access(unsigned long long, int, void*, bool)>:
c0024b30:	55                   	push   ebp
c0024b31:	57                   	push   edi
c0024b32:	56                   	push   esi
c0024b33:	53                   	push   ebx
c0024b34:	83 ec 2c             	sub    esp,0x2c
c0024b37:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024b3b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b3f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024b47:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024b4b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024b4f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024b53:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024b5d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024b63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024b67:	c1 e0 06             	shl    eax,0x6
c0024b6a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024b72:	74 5d                	je     c0024bd1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024b74:	89 fa                	mov    edx,edi
c0024b76:	89 f0                	mov    eax,esi
c0024b78:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024b7c:	c1 ea 1c             	shr    edx,0x1c
c0024b7f:	89 d1                	mov    ecx,edx
c0024b81:	09 c1                	or     ecx,eax
c0024b83:	74 25                	je     c0024baa <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024b85:	31 ed                	xor    ebp,ebp
c0024b87:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024b8e:	89 fa                	mov    edx,edi
c0024b90:	89 f0                	mov    eax,esi
c0024b92:	0f ad d0             	shrd   eax,edx,cl
c0024b95:	d3 ea                	shr    edx,cl
c0024b97:	f6 c1 20             	test   cl,0x20
c0024b9a:	74 02                	je     c0024b9e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024b9c:	89 d0                	mov    eax,edx
c0024b9e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024ba2:	45                   	inc    ebp
c0024ba3:	83 fd 06             	cmp    ebp,0x6
c0024ba6:	75 df                	jne    c0024b87 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024ba8:	eb 76                	jmp    c0024c20 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024baa:	89 f0                	mov    eax,esi
c0024bac:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024bb1:	89 fa                	mov    edx,edi
c0024bb3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024bba:	0f ac d0 10          	shrd   eax,edx,0x10
c0024bbe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024bc3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024bc7:	c1 ee 18             	shr    esi,0x18
c0024bca:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024bcf:	eb 56                	jmp    c0024c27 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024bd1:	6a 00                	push   0x0
c0024bd3:	6a 3f                	push   0x3f
c0024bd5:	57                   	push   edi
c0024bd6:	56                   	push   esi
c0024bd7:	e8 98 29 00 00       	call   c0027574 <__umoddi3>
c0024bdc:	83 c4 10             	add    esp,0x10
c0024bdf:	40                   	inc    eax
c0024be0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024be4:	6a 00                	push   0x0
c0024be6:	68 f0 03 00 00       	push   0x3f0
c0024beb:	57                   	push   edi
c0024bec:	56                   	push   esi
c0024bed:	e8 82 28 00 00       	call   c0027474 <__udivdi3>
c0024bf2:	83 c4 10             	add    esp,0x10
c0024bf5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024bfa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024c01:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024c06:	6a 00                	push   0x0
c0024c08:	6a 3f                	push   0x3f
c0024c0a:	57                   	push   edi
c0024c0b:	56                   	push   esi
c0024c0c:	e8 63 28 00 00       	call   c0027474 <__udivdi3>
c0024c11:	83 c4 10             	add    esp,0x10
c0024c14:	89 c6                	mov    esi,eax
c0024c16:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024c1b:	83 e6 0f             	and    esi,0xf
c0024c1e:	eb 07                	jmp    c0024c27 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024c20:	31 f6                	xor    esi,esi
c0024c22:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024c27:	bf 01 00 00 00       	mov    edi,0x1
c0024c2c:	50                   	push   eax
c0024c2d:	6a 00                	push   0x0
c0024c2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c36:	50                   	push   eax
c0024c37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c3b:	e8 6c f0 ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c0024c40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c43:	e8 98 fe ff ff       	call   c0024ae0 <ATA::readyForCommand()>
c0024c48:	83 c4 10             	add    esp,0x10
c0024c4b:	84 c0                	test   al,al
c0024c4d:	0f 84 5a 02 00 00    	je     c0024ead <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c53:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024c59:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024c5f:	c1 e0 04             	shl    eax,0x4
c0024c62:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024c69:	09 c6                	or     esi,eax
c0024c6b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024c70:	75 05                	jne    c0024c77 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024c72:	83 ce a0             	or     esi,0xffffffa0
c0024c75:	eb 03                	jmp    c0024c7a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024c77:	83 ce e0             	or     esi,0xffffffe0
c0024c7a:	89 f0                	mov    eax,esi
c0024c7c:	0f b6 f0             	movzx  esi,al
c0024c7f:	56                   	push   esi
c0024c80:	6a 06                	push   0x6
c0024c82:	51                   	push   ecx
c0024c83:	52                   	push   edx
c0024c84:	e8 17 ee ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c89:	83 c4 10             	add    esp,0x10
c0024c8c:	6a 00                	push   0x0
c0024c8e:	6a 01                	push   0x1
c0024c90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c97:	50                   	push   eax
c0024c98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c9e:	e8 fd ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ca3:	83 c4 10             	add    esp,0x10
c0024ca6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024cab:	75 6e                	jne    c0024d1b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024cad:	6a 00                	push   0x0
c0024caf:	6a 08                	push   0x8
c0024cb1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cb8:	50                   	push   eax
c0024cb9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cbf:	e8 dc ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cc4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024cc9:	50                   	push   eax
c0024cca:	6a 09                	push   0x9
c0024ccc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cd3:	50                   	push   eax
c0024cd4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cda:	e8 c1 ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cdf:	83 c4 20             	add    esp,0x20
c0024ce2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024ce7:	50                   	push   eax
c0024ce8:	6a 0a                	push   0xa
c0024cea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cf1:	50                   	push   eax
c0024cf2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cf8:	e8 a3 ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cfd:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024d02:	50                   	push   eax
c0024d03:	6a 0b                	push   0xb
c0024d05:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d0c:	50                   	push   eax
c0024d0d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d13:	e8 88 ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d18:	83 c4 20             	add    esp,0x20
c0024d1b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024d20:	50                   	push   eax
c0024d21:	6a 02                	push   0x2
c0024d23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d2a:	50                   	push   eax
c0024d2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d31:	e8 6a ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d36:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024d3b:	50                   	push   eax
c0024d3c:	6a 03                	push   0x3
c0024d3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d45:	50                   	push   eax
c0024d46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d4c:	e8 4f ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d51:	83 c4 20             	add    esp,0x20
c0024d54:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024d59:	50                   	push   eax
c0024d5a:	6a 04                	push   0x4
c0024d5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d63:	50                   	push   eax
c0024d64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d6a:	e8 31 ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024d74:	50                   	push   eax
c0024d75:	6a 05                	push   0x5
c0024d77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d7e:	50                   	push   eax
c0024d7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d85:	e8 16 ed ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d8a:	83 c4 20             	add    esp,0x20
c0024d8d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024d92:	0f 94 c0             	sete   al
c0024d95:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024d9a:	74 09                	je     c0024da5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024d9c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024da3:	eb 07                	jmp    c0024dac <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024da5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024dac:	0f b6 c0             	movzx  eax,al
c0024daf:	50                   	push   eax
c0024db0:	6a 07                	push   0x7
c0024db2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024db9:	50                   	push   eax
c0024dba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024dc0:	e8 db ec ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dc5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024dc9:	83 c4 10             	add    esp,0x10
c0024dcc:	85 f6                	test   esi,esi
c0024dce:	0f 84 ba 00 00 00    	je     c0024e8e <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024dd4:	50                   	push   eax
c0024dd5:	6a 01                	push   0x1
c0024dd7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024dde:	50                   	push   eax
c0024ddf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024de5:	e8 62 f8 ff ff       	call   c002464c <IDE::polling(unsigned char, unsigned int)>
c0024dea:	83 c4 10             	add    esp,0x10
c0024ded:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024df3:	84 c0                	test   al,al
c0024df5:	74 2c                	je     c0024e23 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024df7:	0f b6 f8             	movzx  edi,al
c0024dfa:	0f b6 d2             	movzx  edx,dl
c0024dfd:	57                   	push   edi
c0024dfe:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024e05:	50                   	push   eax
c0024e06:	52                   	push   edx
c0024e07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e0d:	e8 a4 f6 ff ff       	call   c00244b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024e12:	c7 04 24 60 db 02 c0 	mov    DWORD PTR [esp],0xc002db60
c0024e19:	e8 e9 dc fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0024e1e:	e9 87 00 00 00       	jmp    c0024eaa <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024e23:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024e28:	74 33                	je     c0024e5d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024e2a:	31 ed                	xor    ebp,ebp
c0024e2c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024e30:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024e34:	50                   	push   eax
c0024e35:	50                   	push   eax
c0024e36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e3d:	50                   	push   eax
c0024e3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e44:	e8 45 ec ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c0024e49:	89 c2                	mov    edx,eax
c0024e4b:	89 f8                	mov    eax,edi
c0024e4d:	66 ef                	out    dx,ax
c0024e4f:	45                   	inc    ebp
c0024e50:	83 c4 10             	add    esp,0x10
c0024e53:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024e59:	75 d1                	jne    c0024e2c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024e5b:	eb 23                	jmp    c0024e80 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024e5d:	0f b6 d2             	movzx  edx,dl
c0024e60:	51                   	push   ecx
c0024e61:	51                   	push   ecx
c0024e62:	52                   	push   edx
c0024e63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e69:	e8 20 ec ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c0024e6e:	b9 00 01 00 00       	mov    ecx,0x100
c0024e73:	89 c2                	mov    edx,eax
c0024e75:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024e79:	fc                   	cld    
c0024e7a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024e7d:	83 c4 10             	add    esp,0x10
c0024e80:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024e88:	4e                   	dec    esi
c0024e89:	e9 3e ff ff ff       	jmp    c0024dcc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024e8e:	31 ff                	xor    edi,edi
c0024e90:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024e95:	74 16                	je     c0024ead <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024e97:	50                   	push   eax
c0024e98:	50                   	push   eax
c0024e99:	31 c0                	xor    eax,eax
c0024e9b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024ea0:	0f 94 c0             	sete   al
c0024ea3:	50                   	push   eax
c0024ea4:	53                   	push   ebx
c0024ea5:	e8 ec fb ff ff       	call   c0024a96 <ATA::flush(bool)>
c0024eaa:	83 c4 10             	add    esp,0x10
c0024ead:	83 c4 2c             	add    esp,0x2c
c0024eb0:	89 f8                	mov    eax,edi
c0024eb2:	5b                   	pop    ebx
c0024eb3:	5e                   	pop    esi
c0024eb4:	5f                   	pop    edi
c0024eb5:	5d                   	pop    ebp
c0024eb6:	c3                   	ret    
c0024eb7:	90                   	nop

c0024eb8 <ATA::read(unsigned long long, int, void*)>:
c0024eb8:	57                   	push   edi
c0024eb9:	b8 04 00 00 00       	mov    eax,0x4
c0024ebe:	56                   	push   esi
c0024ebf:	53                   	push   ebx
c0024ec0:	83 ec 10             	sub    esp,0x10
c0024ec3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ec7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024ecb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024ece:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024ed2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ed6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024edc:	77 3b                	ja     c0024f19 <ATA::read(unsigned long long, int, void*)+0x61>
c0024ede:	b8 06 00 00 00       	mov    eax,0x6
c0024ee3:	85 d2                	test   edx,edx
c0024ee5:	74 32                	je     c0024f19 <ATA::read(unsigned long long, int, void*)+0x61>
c0024ee7:	50                   	push   eax
c0024ee8:	50                   	push   eax
c0024ee9:	6a 00                	push   0x0
c0024eeb:	52                   	push   edx
c0024eec:	53                   	push   ebx
c0024eed:	57                   	push   edi
c0024eee:	56                   	push   esi
c0024eef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ef3:	e8 38 fc ff ff       	call   c0024b30 <ATA::access(unsigned long long, int, void*, bool)>
c0024ef8:	83 c4 20             	add    esp,0x20
c0024efb:	85 c0                	test   eax,eax
c0024efd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f01:	75 11                	jne    c0024f14 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024f03:	01 1d 18 35 03 c0    	add    DWORD PTR ds:0xc0033518,ebx
c0024f09:	e8 fe b6 fe ff       	call   c001060c <VgaText::updateDiskUsage()>
c0024f0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f12:	eb 05                	jmp    c0024f19 <ATA::read(unsigned long long, int, void*)+0x61>
c0024f14:	b8 01 00 00 00       	mov    eax,0x1
c0024f19:	83 c4 10             	add    esp,0x10
c0024f1c:	5b                   	pop    ebx
c0024f1d:	5e                   	pop    esi
c0024f1e:	5f                   	pop    edi
c0024f1f:	c3                   	ret    

c0024f20 <ATA::write(unsigned long long, int, void*)>:
c0024f20:	57                   	push   edi
c0024f21:	b8 04 00 00 00       	mov    eax,0x4
c0024f26:	56                   	push   esi
c0024f27:	53                   	push   ebx
c0024f28:	83 ec 10             	sub    esp,0x10
c0024f2b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f33:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f36:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f3e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f44:	77 3b                	ja     c0024f81 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f46:	b8 06 00 00 00       	mov    eax,0x6
c0024f4b:	85 d2                	test   edx,edx
c0024f4d:	74 32                	je     c0024f81 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f4f:	50                   	push   eax
c0024f50:	50                   	push   eax
c0024f51:	6a 01                	push   0x1
c0024f53:	52                   	push   edx
c0024f54:	53                   	push   ebx
c0024f55:	57                   	push   edi
c0024f56:	56                   	push   esi
c0024f57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f5b:	e8 d0 fb ff ff       	call   c0024b30 <ATA::access(unsigned long long, int, void*, bool)>
c0024f60:	83 c4 20             	add    esp,0x20
c0024f63:	85 c0                	test   eax,eax
c0024f65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f69:	75 11                	jne    c0024f7c <ATA::write(unsigned long long, int, void*)+0x5c>
c0024f6b:	01 1d 14 35 03 c0    	add    DWORD PTR ds:0xc0033514,ebx
c0024f71:	e8 96 b6 fe ff       	call   c001060c <VgaText::updateDiskUsage()>
c0024f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f7a:	eb 05                	jmp    c0024f81 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f7c:	b8 01 00 00 00       	mov    eax,0x1
c0024f81:	83 c4 10             	add    esp,0x10
c0024f84:	5b                   	pop    ebx
c0024f85:	5e                   	pop    esi
c0024f86:	5f                   	pop    edi
c0024f87:	c3                   	ret    

c0024f88 <ATA::detectCHS()>:
c0024f88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024f8c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024f92:	c1 e0 06             	shl    eax,0x6
c0024f95:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024f9b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024fa5:	c7 44 24 04 6b db 02 c0 	mov    DWORD PTR [esp+0x4],0xc002db6b
c0024fad:	e9 e5 56 ff ff       	jmp    c001a697 <Krnl::panic(char const*)>

c0024fb2 <ATA::open(int, int, void*)>:
c0024fb2:	53                   	push   ebx
c0024fb3:	83 ec 08             	sub    esp,0x8
c0024fb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024fba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024fc2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024fc8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024fce:	c1 e0 06             	shl    eax,0x6
c0024fd1:	01 d0                	add    eax,edx
c0024fd3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024fda:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024fe0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024fe7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024ff1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024ff7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ffe:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0025005:	75 0c                	jne    c0025013 <ATA::open(int, int, void*)+0x61>
c0025007:	83 ec 0c             	sub    esp,0xc
c002500a:	53                   	push   ebx
c002500b:	e8 78 ff ff ff       	call   c0024f88 <ATA::detectCHS()>
c0025010:	83 c4 10             	add    esp,0x10
c0025013:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025019:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002501f:	c1 e0 06             	shl    eax,0x6
c0025022:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0025029:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025033:	d1 e8                	shr    eax,1
c0025035:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002503b:	6a 04                	push   0x4
c002503d:	6a 0c                	push   0xc
c002503f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025046:	50                   	push   eax
c0025047:	52                   	push   edx
c0025048:	e8 53 ea ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002504d:	90                   	nop
c002504e:	90                   	nop
c002504f:	6a 00                	push   0x0
c0025051:	6a 0c                	push   0xc
c0025053:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002505a:	50                   	push   eax
c002505b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025061:	e8 3a ea ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025066:	83 c4 14             	add    esp,0x14
c0025069:	53                   	push   ebx
c002506a:	e8 7f f3 fe ff       	call   c00143ee <PhysicalDisk::startCache()>
c002506f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025072:	e8 31 16 ff ff       	call   c00166a8 <createPartitionsForDisk(PhysicalDisk*)>
c0025077:	31 c0                	xor    eax,eax
c0025079:	83 c4 18             	add    esp,0x18
c002507c:	5b                   	pop    ebx
c002507d:	c3                   	ret    

c002507e <ATAPI::write(unsigned long long, int, void*)>:
c002507e:	b8 03 00 00 00       	mov    eax,0x3
c0025083:	c3                   	ret    

c0025084 <ATAPI::close(int, int, void*)>:
c0025084:	83 ec 0c             	sub    esp,0xc
c0025087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002508b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025091:	85 c0                	test   eax,eax
c0025093:	74 0c                	je     c00250a1 <ATAPI::close(int, int, void*)+0x1d>
c0025095:	83 ec 0c             	sub    esp,0xc
c0025098:	8b 10                	mov    edx,DWORD PTR [eax]
c002509a:	50                   	push   eax
c002509b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002509e:	83 c4 10             	add    esp,0x10
c00250a1:	31 c0                	xor    eax,eax
c00250a3:	83 c4 0c             	add    esp,0xc
c00250a6:	c3                   	ret    
c00250a7:	90                   	nop

c00250a8 <ATAPI::ATAPI()>:
c00250a8:	83 ec 0c             	sub    esp,0xc
c00250ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250af:	83 ec 04             	sub    esp,0x4
c00250b2:	68 00 08 00 00       	push   0x800
c00250b7:	68 a5 dc 02 c0       	push   0xc002dca5
c00250bc:	50                   	push   eax
c00250bd:	e8 c4 f2 fe ff       	call   c0014386 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250c2:	83 c4 10             	add    esp,0x10
c00250c5:	ba c0 db 02 c0       	mov    edx,0xc002dbc0
c00250ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ce:	89 10                	mov    DWORD PTR [eax],edx
c00250d0:	90                   	nop
c00250d1:	83 c4 0c             	add    esp,0xc
c00250d4:	c3                   	ret    
c00250d5:	90                   	nop

c00250d6 <ATAPI::readyForCommand()>:
c00250d6:	56                   	push   esi
c00250d7:	53                   	push   ebx
c00250d8:	31 db                	xor    ebx,ebx
c00250da:	50                   	push   eax
c00250db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00250df:	50                   	push   eax
c00250e0:	6a 0c                	push   0xc
c00250e2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00250e9:	50                   	push   eax
c00250ea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00250f0:	e8 6b ea ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00250f5:	83 c4 10             	add    esp,0x10
c00250f8:	a8 88                	test   al,0x88
c00250fa:	74 23                	je     c002511f <ATAPI::readyForCommand()+0x49>
c00250fc:	43                   	inc    ebx
c00250fd:	83 fb 63             	cmp    ebx,0x63
c0025100:	7e dd                	jle    c00250df <ATAPI::readyForCommand()+0x9>
c0025102:	51                   	push   ecx
c0025103:	51                   	push   ecx
c0025104:	6a 00                	push   0x0
c0025106:	68 40 42 0f 00       	push   0xf4240
c002510b:	e8 3d 96 ff ff       	call   c001e74d <nanoSleep(unsigned long long)>
c0025110:	83 c4 10             	add    esp,0x10
c0025113:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0025119:	75 c4                	jne    c00250df <ATAPI::readyForCommand()+0x9>
c002511b:	31 c0                	xor    eax,eax
c002511d:	eb 02                	jmp    c0025121 <ATAPI::readyForCommand()+0x4b>
c002511f:	b0 01                	mov    al,0x1
c0025121:	5a                   	pop    edx
c0025122:	5b                   	pop    ebx
c0025123:	5e                   	pop    esi
c0025124:	c3                   	ret    
c0025125:	90                   	nop

c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0025126:	55                   	push   ebp
c0025127:	57                   	push   edi
c0025128:	56                   	push   esi
c0025129:	53                   	push   ebx
c002512a:	83 ec 20             	sub    esp,0x20
c002512d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0025131:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0025135:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0025139:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002513d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025141:	6a 01                	push   0x1
c0025143:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002514a:	50                   	push   eax
c002514b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025151:	e8 56 eb ff ff       	call   c0023cac <IDE::enableIRQs(unsigned char, bool)>
c0025156:	5e                   	pop    esi
c0025157:	58                   	pop    eax
c0025158:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002515f:	50                   	push   eax
c0025160:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025166:	e8 0f e9 ff ff       	call   c0023a7a <IDE::prepareInterrupt(unsigned char)>
c002516b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002516e:	e8 63 ff ff ff       	call   c00250d6 <ATAPI::readyForCommand()>
c0025173:	83 c4 10             	add    esp,0x10
c0025176:	84 c0                	test   al,al
c0025178:	75 0a                	jne    c0025184 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002517a:	bb 01 00 00 00       	mov    ebx,0x1
c002517f:	e9 57 02 00 00       	jmp    c00253db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025184:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002518a:	c1 e0 04             	shl    eax,0x4
c002518d:	0f b6 c0             	movzx  eax,al
c0025190:	50                   	push   eax
c0025191:	6a 06                	push   0x6
c0025193:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002519a:	50                   	push   eax
c002519b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251a1:	e8 fa e8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251a6:	6a 00                	push   0x0
c00251a8:	6a 01                	push   0x1
c00251aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251b1:	50                   	push   eax
c00251b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251b8:	e8 e3 e8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251bd:	83 c4 20             	add    esp,0x20
c00251c0:	0f b6 c3             	movzx  eax,bl
c00251c3:	0f b6 df             	movzx  ebx,bh
c00251c6:	50                   	push   eax
c00251c7:	6a 04                	push   0x4
c00251c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251d0:	50                   	push   eax
c00251d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251d7:	e8 c4 e8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251dc:	53                   	push   ebx
c00251dd:	6a 05                	push   0x5
c00251df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251e6:	50                   	push   eax
c00251e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251ed:	e8 ae e8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251f2:	83 c4 20             	add    esp,0x20
c00251f5:	68 a0 00 00 00       	push   0xa0
c00251fa:	6a 07                	push   0x7
c00251fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025203:	50                   	push   eax
c0025204:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002520a:	e8 91 e8 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002520f:	83 c4 0c             	add    esp,0xc
c0025212:	6a 01                	push   0x1
c0025214:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002521b:	50                   	push   eax
c002521c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025222:	e8 25 f4 ff ff       	call   c002464c <IDE::polling(unsigned char, unsigned int)>
c0025227:	83 c4 10             	add    esp,0x10
c002522a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0025230:	84 c0                	test   al,al
c0025232:	74 23                	je     c0025257 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0025234:	0f b6 d8             	movzx  ebx,al
c0025237:	0f b6 d2             	movzx  edx,dl
c002523a:	53                   	push   ebx
c002523b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025242:	50                   	push   eax
c0025243:	52                   	push   edx
c0025244:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002524a:	e8 67 f2 ff ff       	call   c00244b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002524f:	83 c4 10             	add    esp,0x10
c0025252:	e9 84 01 00 00       	jmp    c00253db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025257:	0f b6 d2             	movzx  edx,dl
c002525a:	53                   	push   ebx
c002525b:	53                   	push   ebx
c002525c:	52                   	push   edx
c002525d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025263:	e8 26 e8 ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c0025268:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002526c:	b9 06 00 00 00       	mov    ecx,0x6
c0025271:	89 c2                	mov    edx,eax
c0025273:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025276:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002527a:	83 c4 10             	add    esp,0x10
c002527d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025283:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002528a:	85 db                	test   ebx,ebx
c002528c:	0f 84 ec 00 00 00    	je     c002537e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025292:	51                   	push   ecx
c0025293:	51                   	push   ecx
c0025294:	52                   	push   edx
c0025295:	50                   	push   eax
c0025296:	e8 73 e9 ff ff       	call   c0023c0e <IDE::waitInterrupt(unsigned char)>
c002529b:	83 c4 10             	add    esp,0x10
c002529e:	84 c0                	test   al,al
c00252a0:	0f 84 d4 fe ff ff    	je     c002517a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00252a6:	56                   	push   esi
c00252a7:	56                   	push   esi
c00252a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252af:	50                   	push   eax
c00252b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252b6:	e8 bf e7 ff ff       	call   c0023a7a <IDE::prepareInterrupt(unsigned char)>
c00252bb:	83 c4 0c             	add    esp,0xc
c00252be:	6a 04                	push   0x4
c00252c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252c7:	50                   	push   eax
c00252c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252ce:	e8 8d e8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00252d3:	83 c4 0c             	add    esp,0xc
c00252d6:	89 c6                	mov    esi,eax
c00252d8:	6a 05                	push   0x5
c00252da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252e1:	50                   	push   eax
c00252e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252e8:	e8 73 e8 ff ff       	call   c0023b60 <IDE::read(unsigned char, unsigned char)>
c00252ed:	89 f1                	mov    ecx,esi
c00252ef:	0f b6 c0             	movzx  eax,al
c00252f2:	0f b6 f1             	movzx  esi,cl
c00252f5:	c1 e0 08             	shl    eax,0x8
c00252f8:	09 c6                	or     esi,eax
c00252fa:	d1 fe                	sar    esi,1
c00252fc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025300:	83 c4 10             	add    esp,0x10
c0025303:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025308:	74 41                	je     c002534b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002530a:	31 c9                	xor    ecx,ecx
c002530c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025312:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025319:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002531d:	75 0a                	jne    c0025329 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002531f:	01 c9                	add    ecx,ecx
c0025321:	01 cd                	add    ebp,ecx
c0025323:	4b                   	dec    ebx
c0025324:	e9 54 ff ff ff       	jmp    c002527d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025329:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002532e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025332:	51                   	push   ecx
c0025333:	51                   	push   ecx
c0025334:	52                   	push   edx
c0025335:	50                   	push   eax
c0025336:	e8 53 e7 ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c002533b:	89 c2                	mov    edx,eax
c002533d:	89 f0                	mov    eax,esi
c002533f:	66 ef                	out    dx,ax
c0025341:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025345:	83 c4 10             	add    esp,0x10
c0025348:	41                   	inc    ecx
c0025349:	eb c1                	jmp    c002530c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002534b:	31 f6                	xor    esi,esi
c002534d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025353:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002535a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002535e:	75 06                	jne    c0025366 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025360:	01 f6                	add    esi,esi
c0025362:	01 f5                	add    ebp,esi
c0025364:	eb bd                	jmp    c0025323 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025366:	51                   	push   ecx
c0025367:	51                   	push   ecx
c0025368:	52                   	push   edx
c0025369:	50                   	push   eax
c002536a:	e8 1f e7 ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c002536f:	89 c2                	mov    edx,eax
c0025371:	66 ed                	in     ax,dx
c0025373:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025378:	83 c4 10             	add    esp,0x10
c002537b:	46                   	inc    esi
c002537c:	eb cf                	jmp    c002534d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002537e:	51                   	push   ecx
c002537f:	51                   	push   ecx
c0025380:	52                   	push   edx
c0025381:	50                   	push   eax
c0025382:	e8 87 e8 ff ff       	call   c0023c0e <IDE::waitInterrupt(unsigned char)>
c0025387:	83 c4 10             	add    esp,0x10
c002538a:	84 c0                	test   al,al
c002538c:	0f 84 e8 fd ff ff    	je     c002517a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025392:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025397:	52                   	push   edx
c0025398:	52                   	push   edx
c0025399:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253a0:	50                   	push   eax
c00253a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253a7:	e8 ce e6 ff ff       	call   c0023a7a <IDE::prepareInterrupt(unsigned char)>
c00253ac:	83 c4 10             	add    esp,0x10
c00253af:	50                   	push   eax
c00253b0:	50                   	push   eax
c00253b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253b8:	50                   	push   eax
c00253b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253bf:	e8 ca e6 ff ff       	call   c0023a8e <IDE::getBase(unsigned char)>
c00253c4:	8d 50 07             	lea    edx,[eax+0x7]
c00253c7:	ec                   	in     al,dx
c00253c8:	83 c4 10             	add    esp,0x10
c00253cb:	a8 88                	test   al,0x88
c00253cd:	74 0a                	je     c00253d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00253cf:	4b                   	dec    ebx
c00253d0:	75 dd                	jne    c00253af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00253d2:	bb 02 00 00 00       	mov    ebx,0x2
c00253d7:	eb 02                	jmp    c00253db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00253d9:	31 db                	xor    ebx,ebx
c00253db:	83 c4 1c             	add    esp,0x1c
c00253de:	89 d8                	mov    eax,ebx
c00253e0:	5b                   	pop    ebx
c00253e1:	5e                   	pop    esi
c00253e2:	5f                   	pop    edi
c00253e3:	5d                   	pop    ebp
c00253e4:	c3                   	ret    
c00253e5:	90                   	nop

c00253e6 <ATAPI::diskRemoved()>:
c00253e6:	83 ec 18             	sub    esp,0x18
c00253e9:	68 b1 dc 02 c0       	push   0xc002dcb1
c00253ee:	e8 14 d7 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00253f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00253f7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00253fe:	83 c4 1c             	add    esp,0x1c
c0025401:	c3                   	ret    

c0025402 <ATAPI::eject()>:
c0025402:	57                   	push   edi
c0025403:	b9 03 00 00 00       	mov    ecx,0x3
c0025408:	53                   	push   ebx
c0025409:	83 ec 14             	sub    esp,0x14
c002540c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025410:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025414:	fc                   	cld    
c0025415:	31 c0                	xor    eax,eax
c0025417:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025419:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002541e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025423:	50                   	push   eax
c0025424:	50                   	push   eax
c0025425:	6a 00                	push   0x0
c0025427:	6a 00                	push   0x0
c0025429:	6a 00                	push   0x0
c002542b:	6a 02                	push   0x2
c002542d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025431:	50                   	push   eax
c0025432:	53                   	push   ebx
c0025433:	e8 ee fc ff ff       	call   c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025438:	83 c4 14             	add    esp,0x14
c002543b:	53                   	push   ebx
c002543c:	e8 a5 ff ff ff       	call   c00253e6 <ATAPI::diskRemoved()>
c0025441:	83 c4 24             	add    esp,0x24
c0025444:	31 c0                	xor    eax,eax
c0025446:	5b                   	pop    ebx
c0025447:	5f                   	pop    edi
c0025448:	c3                   	ret    
c0025449:	90                   	nop

c002544a <ATAPI::diskInserted()>:
c002544a:	53                   	push   ebx
c002544b:	83 ec 14             	sub    esp,0x14
c002544e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025452:	68 c8 dc 02 c0       	push   0xc002dcc8
c0025457:	e8 ab d6 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c002545c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025463:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025466:	e8 83 ef fe ff       	call   c00143ee <PhysicalDisk::startCache()>
c002546b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002546f:	83 c4 18             	add    esp,0x18
c0025472:	5b                   	pop    ebx
c0025473:	e9 30 12 ff ff       	jmp    c00166a8 <createPartitionsForDisk(PhysicalDisk*)>

c0025478 <ATAPI::detectMedia()>:
c0025478:	56                   	push   esi
c0025479:	53                   	push   ebx
c002547a:	83 ec 28             	sub    esp,0x28
c002547d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025481:	6a 0c                	push   0xc
c0025483:	6a 00                	push   0x0
c0025485:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025489:	56                   	push   esi
c002548a:	e8 c1 b2 fd ff       	call   c0000750 <memset>
c002548f:	58                   	pop    eax
c0025490:	5a                   	pop    edx
c0025491:	6a 00                	push   0x0
c0025493:	6a 00                	push   0x0
c0025495:	6a 00                	push   0x0
c0025497:	6a 00                	push   0x0
c0025499:	56                   	push   esi
c002549a:	53                   	push   ebx
c002549b:	e8 86 fc ff ff       	call   c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00254a0:	83 c4 1c             	add    esp,0x1c
c00254a3:	6a 0c                	push   0xc
c00254a5:	6a 00                	push   0x0
c00254a7:	56                   	push   esi
c00254a8:	e8 a3 b2 fd ff       	call   c0000750 <memset>
c00254ad:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00254b2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00254b7:	59                   	pop    ecx
c00254b8:	58                   	pop    eax
c00254b9:	6a 01                	push   0x1
c00254bb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00254bf:	50                   	push   eax
c00254c0:	6a 00                	push   0x0
c00254c2:	6a 12                	push   0x12
c00254c4:	56                   	push   esi
c00254c5:	53                   	push   ebx
c00254c6:	e8 5b fc ff ff       	call   c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00254cb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00254cf:	83 c4 20             	add    esp,0x20
c00254d2:	83 e0 7f             	and    eax,0x7f
c00254d5:	3c 70                	cmp    al,0x70
c00254d7:	74 15                	je     c00254ee <ATAPI::detectMedia()+0x76>
c00254d9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00254e0:	75 0c                	jne    c00254ee <ATAPI::detectMedia()+0x76>
c00254e2:	83 ec 0c             	sub    esp,0xc
c00254e5:	53                   	push   ebx
c00254e6:	e8 5f ff ff ff       	call   c002544a <ATAPI::diskInserted()>
c00254eb:	83 c4 10             	add    esp,0x10
c00254ee:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00254f2:	83 e0 0f             	and    eax,0xf
c00254f5:	3c 02                	cmp    al,0x2
c00254f7:	75 1b                	jne    c0025514 <ATAPI::detectMedia()+0x9c>
c00254f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00254fe:	75 2d                	jne    c002552d <ATAPI::detectMedia()+0xb5>
c0025500:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025507:	74 24                	je     c002552d <ATAPI::detectMedia()+0xb5>
c0025509:	83 ec 0c             	sub    esp,0xc
c002550c:	53                   	push   ebx
c002550d:	e8 d4 fe ff ff       	call   c00253e6 <ATAPI::diskRemoved()>
c0025512:	eb 16                	jmp    c002552a <ATAPI::detectMedia()+0xb2>
c0025514:	84 c0                	test   al,al
c0025516:	75 15                	jne    c002552d <ATAPI::detectMedia()+0xb5>
c0025518:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002551f:	75 0c                	jne    c002552d <ATAPI::detectMedia()+0xb5>
c0025521:	83 ec 0c             	sub    esp,0xc
c0025524:	53                   	push   ebx
c0025525:	e8 20 ff ff ff       	call   c002544a <ATAPI::diskInserted()>
c002552a:	83 c4 10             	add    esp,0x10
c002552d:	83 c4 24             	add    esp,0x24
c0025530:	5b                   	pop    ebx
c0025531:	5e                   	pop    esi
c0025532:	c3                   	ret    
c0025533:	90                   	nop

c0025534 <ATAPI::open(int, int, void*)>:
c0025534:	53                   	push   ebx
c0025535:	83 ec 08             	sub    esp,0x8
c0025538:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002553c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025540:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025544:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002554a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025550:	c1 e0 06             	shl    eax,0x6
c0025553:	01 d0                	add    eax,edx
c0025555:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002555c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025562:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025569:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025573:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025579:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025580:	6a 04                	push   0x4
c0025582:	6a 0c                	push   0xc
c0025584:	51                   	push   ecx
c0025585:	52                   	push   edx
c0025586:	e8 15 e5 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002558b:	90                   	nop
c002558c:	90                   	nop
c002558d:	6a 00                	push   0x0
c002558f:	6a 0c                	push   0xc
c0025591:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025598:	50                   	push   eax
c0025599:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002559f:	e8 fc e4 ff ff       	call   c0023aa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00255a4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00255ab:	83 c4 14             	add    esp,0x14
c00255ae:	53                   	push   ebx
c00255af:	e8 c4 fe ff ff       	call   c0025478 <ATAPI::detectMedia()>
c00255b4:	31 c0                	xor    eax,eax
c00255b6:	83 c4 18             	add    esp,0x18
c00255b9:	5b                   	pop    ebx
c00255ba:	c3                   	ret    
c00255bb:	90                   	nop

c00255bc <ATAPI::read(unsigned long long, int, void*)>:
c00255bc:	55                   	push   ebp
c00255bd:	57                   	push   edi
c00255be:	56                   	push   esi
c00255bf:	53                   	push   ebx
c00255c0:	83 ec 1c             	sub    esp,0x1c
c00255c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00255c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00255cb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00255cf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00255d6:	74 41                	je     c0025619 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00255d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00255dc:	b9 03 00 00 00       	mov    ecx,0x3
c00255e1:	fc                   	cld    
c00255e2:	31 c0                	xor    eax,eax
c00255e4:	86 fb                	xchg   bl,bh
c00255e6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00255e8:	c1 c3 10             	rol    ebx,0x10
c00255eb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00255f0:	89 e8                	mov    eax,ebp
c00255f2:	86 fb                	xchg   bl,bh
c00255f4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00255f8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00255fc:	50                   	push   eax
c00255fd:	50                   	push   eax
c00255fe:	55                   	push   ebp
c00255ff:	c1 e5 0b             	shl    ebp,0xb
c0025602:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025606:	6a 00                	push   0x0
c0025608:	55                   	push   ebp
c0025609:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002560d:	50                   	push   eax
c002560e:	56                   	push   esi
c002560f:	e8 12 fb ff ff       	call   c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025614:	83 c4 20             	add    esp,0x20
c0025617:	eb 1a                	jmp    c0025633 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025619:	83 ec 0c             	sub    esp,0xc
c002561c:	56                   	push   esi
c002561d:	e8 56 fe ff ff       	call   c0025478 <ATAPI::detectMedia()>
c0025622:	83 c4 10             	add    esp,0x10
c0025625:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002562c:	75 aa                	jne    c00255d8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002562e:	b8 02 00 00 00       	mov    eax,0x2
c0025633:	83 c4 1c             	add    esp,0x1c
c0025636:	5b                   	pop    ebx
c0025637:	5e                   	pop    esi
c0025638:	5f                   	pop    edi
c0025639:	5d                   	pop    ebp
c002563a:	c3                   	ret    
c002563b:	90                   	nop

c002563c <SATA::close(int, int, void*)>:
c002563c:	83 ec 0c             	sub    esp,0xc
c002563f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025643:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025649:	85 c0                	test   eax,eax
c002564b:	74 0c                	je     c0025659 <SATA::close(int, int, void*)+0x1d>
c002564d:	83 ec 0c             	sub    esp,0xc
c0025650:	8b 10                	mov    edx,DWORD PTR [eax]
c0025652:	50                   	push   eax
c0025653:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025656:	83 c4 10             	add    esp,0x10
c0025659:	31 c0                	xor    eax,eax
c002565b:	83 c4 0c             	add    esp,0xc
c002565e:	c3                   	ret    
c002565f:	90                   	nop

c0025660 <SATA::powerSaving(PowerSavingLevel)>:
c0025660:	c3                   	ret    
c0025661:	90                   	nop

c0025662 <SATA::open(int, int, void*)>:
c0025662:	56                   	push   esi
c0025663:	53                   	push   ebx
c0025664:	50                   	push   eax
c0025665:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025669:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002566d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025677:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002567d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025687:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002568b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025695:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002569b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00256a2:	e8 21 a5 fe ff       	call   c000fbc8 <Phys::allocatePage()>
c00256a7:	89 c6                	mov    esi,eax
c00256a9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00256af:	81 c6 00 10 00 00    	add    esi,0x1000
c00256b5:	e8 0e a5 fe ff       	call   c000fbc8 <Phys::allocatePage()>
c00256ba:	39 c6                	cmp    esi,eax
c00256bc:	74 10                	je     c00256ce <SATA::open(int, int, void*)+0x6c>
c00256be:	83 ec 0c             	sub    esp,0xc
c00256c1:	68 f0 db 02 c0       	push   0xc002dbf0
c00256c6:	e8 cc 4f ff ff       	call   c001a697 <Krnl::panic(char const*)>
c00256cb:	83 c4 10             	add    esp,0x10
c00256ce:	83 ec 0c             	sub    esp,0xc
c00256d1:	6a 02                	push   0x2
c00256d3:	e8 29 c0 fe ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c00256d8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00256de:	6a 03                	push   0x3
c00256e0:	50                   	push   eax
c00256e1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00256e7:	ff 35 30 f3 02 c0    	push   DWORD PTR ds:0xc002f330
c00256ed:	e8 46 c8 fe ff       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c00256f2:	83 c4 14             	add    esp,0x14
c00256f5:	53                   	push   ebx
c00256f6:	e8 f3 ec fe ff       	call   c00143ee <PhysicalDisk::startCache()>
c00256fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00256fe:	e8 a5 0f ff ff       	call   c00166a8 <createPartitionsForDisk(PhysicalDisk*)>
c0025703:	83 c4 14             	add    esp,0x14
c0025706:	31 c0                	xor    eax,eax
c0025708:	5b                   	pop    ebx
c0025709:	5e                   	pop    esi
c002570a:	c3                   	ret    
c002570b:	90                   	nop

c002570c <SATA::SATA()>:
c002570c:	83 ec 0c             	sub    esp,0xc
c002570f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025713:	83 ec 04             	sub    esp,0x4
c0025716:	68 00 02 00 00       	push   0x200
c002571b:	68 04 dc 02 c0       	push   0xc002dc04
c0025720:	50                   	push   eax
c0025721:	e8 60 ec fe ff       	call   c0014386 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025726:	83 c4 10             	add    esp,0x10
c0025729:	ba 74 dc 02 c0       	mov    edx,0xc002dc74
c002572e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025732:	89 10                	mov    DWORD PTR [eax],edx
c0025734:	90                   	nop
c0025735:	83 c4 0c             	add    esp,0xc
c0025738:	c3                   	ret    
c0025739:	90                   	nop

c002573a <SATA::access(unsigned long long, int, void*, bool)>:
c002573a:	55                   	push   ebp
c002573b:	57                   	push   edi
c002573c:	56                   	push   esi
c002573d:	53                   	push   ebx
c002573e:	83 ec 2c             	sub    esp,0x2c
c0025741:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025745:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002574d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025751:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025755:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002575a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002575e:	7e 10                	jle    c0025770 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025760:	83 ec 0c             	sub    esp,0xc
c0025763:	68 14 dc 02 c0       	push   0xc002dc14
c0025768:	e8 2a 4f ff ff       	call   c001a697 <Krnl::panic(char const*)>
c002576d:	83 c4 10             	add    esp,0x10
c0025770:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025776:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002577c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025782:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025786:	89 d0                	mov    eax,edx
c0025788:	c1 e0 07             	shl    eax,0x7
c002578b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002578f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025799:	51                   	push   ecx
c002579a:	8d 42 02             	lea    eax,[edx+0x2]
c002579d:	51                   	push   ecx
c002579e:	c1 e0 07             	shl    eax,0x7
c00257a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00257a5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00257a9:	50                   	push   eax
c00257aa:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00257b0:	e8 af ef ff ff       	call   c0024764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00257b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00257b9:	83 c4 10             	add    esp,0x10
c00257bc:	b8 01 00 00 00       	mov    eax,0x1
c00257c1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00257c6:	0f 84 cb 01 00 00    	je     c0025997 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00257cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00257d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00257d4:	c1 e0 09             	shl    eax,0x9
c00257d7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00257dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00257e0:	74 0e                	je     c00257f0 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00257e2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00257e8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00257ec:	89 c1                	mov    ecx,eax
c00257ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00257f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00257f4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00257fa:	8d 42 02             	lea    eax,[edx+0x2]
c00257fd:	c1 e0 07             	shl    eax,0x7
c0025800:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025804:	8b 00                	mov    eax,DWORD PTR [eax]
c0025806:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002580c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025816:	c1 e1 05             	shl    ecx,0x5
c0025819:	01 c8                	add    eax,ecx
c002581b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002581f:	83 e1 01             	and    ecx,0x1
c0025822:	89 ce                	mov    esi,ecx
c0025824:	8a 08                	mov    cl,BYTE PTR [eax]
c0025826:	c1 e6 06             	shl    esi,0x6
c0025829:	83 e1 bf             	and    ecx,0xffffffbf
c002582c:	09 f1                	or     ecx,esi
c002582e:	88 08                	mov    BYTE PTR [eax],cl
c0025830:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025832:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025838:	81 c9 05 00 01 00    	or     ecx,0x10005
c002583e:	89 08                	mov    DWORD PTR [eax],ecx
c0025840:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025846:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002584c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025852:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025855:	50                   	push   eax
c0025856:	68 90 00 00 00       	push   0x90
c002585b:	6a 00                	push   0x0
c002585d:	56                   	push   esi
c002585e:	e8 ed ae fd ff       	call   c0000750 <memset>
c0025863:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025869:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002586d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025873:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025877:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002587b:	83 c4 10             	add    esp,0x10
c002587e:	48                   	dec    eax
c002587f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025884:	89 c1                	mov    ecx,eax
c0025886:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002588c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025891:	09 c8                	or     eax,ecx
c0025893:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025899:	66 8b 06             	mov    ax,WORD PTR [esi]
c002589c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00258a3:	66 25 00 7f          	and    ax,0x7f00
c00258a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00258ab:	66 0d 27 80          	or     ax,0x8027
c00258af:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00258b4:	66 89 06             	mov    WORD PTR [esi],ax
c00258b7:	19 c0                	sbb    eax,eax
c00258b9:	83 e0 f0             	and    eax,0xfffffff0
c00258bc:	83 c0 35             	add    eax,0x35
c00258bf:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00258c2:	89 e8                	mov    eax,ebp
c00258c4:	c1 e8 10             	shr    eax,0x10
c00258c7:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00258ca:	89 e8                	mov    eax,ebp
c00258cc:	c1 e8 18             	shr    eax,0x18
c00258cf:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00258d2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00258d6:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00258d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00258dd:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00258e0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00258e4:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00258e8:	89 d6                	mov    esi,edx
c00258ea:	31 c0                	xor    eax,eax
c00258ec:	c1 e6 07             	shl    esi,0x7
c00258ef:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00258f3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00258f9:	80 e1 88             	and    cl,0x88
c00258fc:	74 0a                	je     c0025908 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00258fe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025903:	74 0a                	je     c002590f <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025905:	40                   	inc    eax
c0025906:	eb eb                	jmp    c00258f3 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025908:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002590d:	75 0a                	jne    c0025919 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002590f:	83 ec 0c             	sub    esp,0xc
c0025912:	68 4d dc 02 c0       	push   0xc002dc4d
c0025917:	eb 56                	jmp    c002596f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025919:	b8 01 00 00 00       	mov    eax,0x1
c002591e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025922:	c1 e2 07             	shl    edx,0x7
c0025925:	d3 e0                	shl    eax,cl
c0025927:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002592b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025931:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025937:	85 c8                	test   eax,ecx
c0025939:	74 20                	je     c002595b <SATA::access(unsigned long long, int, void*, bool)+0x221>
c002593b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025941:	0f ba e1 1e          	bt     ecx,0x1e
c0025945:	73 ea                	jae    c0025931 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025947:	83 ec 0c             	sub    esp,0xc
c002594a:	68 5b dc 02 c0       	push   0xc002dc5b
c002594f:	e8 43 4d ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0025954:	83 c4 10             	add    esp,0x10
c0025957:	31 c0                	xor    eax,eax
c0025959:	eb 3c                	jmp    c0025997 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002595b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025961:	0f ba e0 1e          	bt     eax,0x1e
c0025965:	73 17                	jae    c002597e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025967:	83 ec 0c             	sub    esp,0xc
c002596a:	68 5b dc 02 c0       	push   0xc002dc5b
c002596f:	e8 23 4d ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0025974:	83 c4 10             	add    esp,0x10
c0025977:	b8 01 00 00 00       	mov    eax,0x1
c002597c:	eb 19                	jmp    c0025997 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002597e:	31 c0                	xor    eax,eax
c0025980:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025985:	75 10                	jne    c0025997 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025987:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002598d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025991:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025995:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025997:	83 c4 2c             	add    esp,0x2c
c002599a:	5b                   	pop    ebx
c002599b:	5e                   	pop    esi
c002599c:	5f                   	pop    edi
c002599d:	5d                   	pop    ebp
c002599e:	c3                   	ret    
c002599f:	90                   	nop

c00259a0 <SATA::read(unsigned long long, int, void*)>:
c00259a0:	57                   	push   edi
c00259a1:	b8 04 00 00 00       	mov    eax,0x4
c00259a6:	56                   	push   esi
c00259a7:	53                   	push   ebx
c00259a8:	83 ec 10             	sub    esp,0x10
c00259ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00259af:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00259b3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00259b6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00259ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00259be:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00259c4:	77 3b                	ja     c0025a01 <SATA::read(unsigned long long, int, void*)+0x61>
c00259c6:	b8 06 00 00 00       	mov    eax,0x6
c00259cb:	85 d2                	test   edx,edx
c00259cd:	74 32                	je     c0025a01 <SATA::read(unsigned long long, int, void*)+0x61>
c00259cf:	50                   	push   eax
c00259d0:	50                   	push   eax
c00259d1:	6a 00                	push   0x0
c00259d3:	52                   	push   edx
c00259d4:	53                   	push   ebx
c00259d5:	57                   	push   edi
c00259d6:	56                   	push   esi
c00259d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00259db:	e8 5a fd ff ff       	call   c002573a <SATA::access(unsigned long long, int, void*, bool)>
c00259e0:	83 c4 20             	add    esp,0x20
c00259e3:	85 c0                	test   eax,eax
c00259e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00259e9:	75 11                	jne    c00259fc <SATA::read(unsigned long long, int, void*)+0x5c>
c00259eb:	01 1d 18 35 03 c0    	add    DWORD PTR ds:0xc0033518,ebx
c00259f1:	e8 16 ac fe ff       	call   c001060c <VgaText::updateDiskUsage()>
c00259f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00259fa:	eb 05                	jmp    c0025a01 <SATA::read(unsigned long long, int, void*)+0x61>
c00259fc:	b8 01 00 00 00       	mov    eax,0x1
c0025a01:	83 c4 10             	add    esp,0x10
c0025a04:	5b                   	pop    ebx
c0025a05:	5e                   	pop    esi
c0025a06:	5f                   	pop    edi
c0025a07:	c3                   	ret    

c0025a08 <SATA::write(unsigned long long, int, void*)>:
c0025a08:	55                   	push   ebp
c0025a09:	b8 04 00 00 00       	mov    eax,0x4
c0025a0e:	57                   	push   edi
c0025a0f:	56                   	push   esi
c0025a10:	53                   	push   ebx
c0025a11:	83 ec 1c             	sub    esp,0x1c
c0025a14:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025a18:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025a1c:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025a1f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025a23:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025a27:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025a2d:	77 56                	ja     c0025a85 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025a2f:	b8 06 00 00 00       	mov    eax,0x6
c0025a34:	85 ff                	test   edi,edi
c0025a36:	74 4d                	je     c0025a85 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025a38:	89 ee                	mov    esi,ebp
c0025a3a:	c1 e6 09             	shl    esi,0x9
c0025a3d:	01 fe                	add    esi,edi
c0025a3f:	89 c8                	mov    eax,ecx
c0025a41:	89 da                	mov    edx,ebx
c0025a43:	83 c0 01             	add    eax,0x1
c0025a46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a4a:	83 d2 00             	adc    edx,0x0
c0025a4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025a51:	50                   	push   eax
c0025a52:	50                   	push   eax
c0025a53:	6a 01                	push   0x1
c0025a55:	57                   	push   edi
c0025a56:	81 c7 00 02 00 00    	add    edi,0x200
c0025a5c:	6a 01                	push   0x1
c0025a5e:	53                   	push   ebx
c0025a5f:	51                   	push   ecx
c0025a60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025a64:	e8 d1 fc ff ff       	call   c002573a <SATA::access(unsigned long long, int, void*, bool)>
c0025a69:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025a6d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025a71:	83 c4 20             	add    esp,0x20
c0025a74:	39 f7                	cmp    edi,esi
c0025a76:	75 c7                	jne    c0025a3f <SATA::write(unsigned long long, int, void*)+0x37>
c0025a78:	01 2d 14 35 03 c0    	add    DWORD PTR ds:0xc0033514,ebp
c0025a7e:	e8 89 ab fe ff       	call   c001060c <VgaText::updateDiskUsage()>
c0025a83:	31 c0                	xor    eax,eax
c0025a85:	83 c4 1c             	add    esp,0x1c
c0025a88:	5b                   	pop    ebx
c0025a89:	5e                   	pop    esi
c0025a8a:	5f                   	pop    edi
c0025a8b:	5d                   	pop    ebp
c0025a8c:	c3                   	ret    
c0025a8d:	90                   	nop

c0025a8e <SATAPI::write(unsigned long long, int, void*)>:
c0025a8e:	b8 03 00 00 00       	mov    eax,0x3
c0025a93:	c3                   	ret    

c0025a94 <SATAPI::close(int, int, void*)>:
c0025a94:	83 ec 0c             	sub    esp,0xc
c0025a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a9b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025aa1:	85 c0                	test   eax,eax
c0025aa3:	74 0c                	je     c0025ab1 <SATAPI::close(int, int, void*)+0x1d>
c0025aa5:	83 ec 0c             	sub    esp,0xc
c0025aa8:	8b 10                	mov    edx,DWORD PTR [eax]
c0025aaa:	50                   	push   eax
c0025aab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025aae:	83 c4 10             	add    esp,0x10
c0025ab1:	31 c0                	xor    eax,eax
c0025ab3:	83 c4 0c             	add    esp,0xc
c0025ab6:	c3                   	ret    
c0025ab7:	90                   	nop

c0025ab8 <SATAPI::SATAPI()>:
c0025ab8:	83 ec 0c             	sub    esp,0xc
c0025abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025abf:	83 ec 04             	sub    esp,0x4
c0025ac2:	68 00 08 00 00       	push   0x800
c0025ac7:	68 a4 dc 02 c0       	push   0xc002dca4
c0025acc:	50                   	push   eax
c0025acd:	e8 b4 e8 fe ff       	call   c0014386 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025ad2:	83 c4 10             	add    esp,0x10
c0025ad5:	ba 50 dd 02 c0       	mov    edx,0xc002dd50
c0025ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ade:	89 10                	mov    DWORD PTR [eax],edx
c0025ae0:	90                   	nop
c0025ae1:	83 c4 0c             	add    esp,0xc
c0025ae4:	c3                   	ret    
c0025ae5:	90                   	nop

c0025ae6 <SATAPI::diskRemoved()>:
c0025ae6:	83 ec 18             	sub    esp,0x18
c0025ae9:	68 b0 dc 02 c0       	push   0xc002dcb0
c0025aee:	e8 14 d0 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0025af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025af7:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025afe:	83 c4 1c             	add    esp,0x1c
c0025b01:	c3                   	ret    

c0025b02 <SATAPI::diskInserted()>:
c0025b02:	53                   	push   ebx
c0025b03:	83 ec 14             	sub    esp,0x14
c0025b06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025b0a:	68 c7 dc 02 c0       	push   0xc002dcc7
c0025b0f:	e8 f3 cf fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0025b14:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025b1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025b1e:	e8 cb e8 fe ff       	call   c00143ee <PhysicalDisk::startCache()>
c0025b23:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025b27:	83 c4 18             	add    esp,0x18
c0025b2a:	5b                   	pop    ebx
c0025b2b:	e9 78 0b ff ff       	jmp    c00166a8 <createPartitionsForDisk(PhysicalDisk*)>

c0025b30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025b30:	55                   	push   ebp
c0025b31:	57                   	push   edi
c0025b32:	56                   	push   esi
c0025b33:	53                   	push   ebx
c0025b34:	83 ec 34             	sub    esp,0x34
c0025b37:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025b3b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025b3f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025b43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025b47:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025b4b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025b51:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025b5b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025b61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025b65:	c1 e0 07             	shl    eax,0x7
c0025b68:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025b6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025b70:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025b7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b7e:	8d 58 02             	lea    ebx,[eax+0x2]
c0025b81:	c1 e3 07             	shl    ebx,0x7
c0025b84:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025b88:	53                   	push   ebx
c0025b89:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025b8f:	e8 d0 eb ff ff       	call   c0024764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025b94:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025b98:	83 c4 10             	add    esp,0x10
c0025b9b:	b8 01 00 00 00       	mov    eax,0x1
c0025ba0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025ba5:	0f 84 85 01 00 00    	je     c0025d30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025bab:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025bb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025bb3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025bb9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025bbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025bc3:	c1 e1 05             	shl    ecx,0x5
c0025bc6:	01 c8                	add    eax,ecx
c0025bc8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025bca:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025bd0:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025bd6:	89 08                	mov    DWORD PTR [eax],ecx
c0025bd8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025bde:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025be4:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025bea:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025bed:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025bf0:	50                   	push   eax
c0025bf1:	68 90 00 00 00       	push   0x90
c0025bf6:	6a 00                	push   0x0
c0025bf8:	53                   	push   ebx
c0025bf9:	e8 52 ab fd ff       	call   c0000750 <memset>
c0025bfe:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025c02:	b9 0c 00 00 00       	mov    ecx,0xc
c0025c07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025c09:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025c0f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025c13:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025c19:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025c1d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025c21:	48                   	dec    eax
c0025c22:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025c27:	89 c1                	mov    ecx,eax
c0025c29:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025c2f:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025c34:	09 c8                	or     eax,ecx
c0025c36:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025c3c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025c3f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025c46:	66 25 00 7f          	and    ax,0x7f00
c0025c4a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025c4e:	66 0d 27 80          	or     ax,0x8027
c0025c52:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025c56:	66 89 03             	mov    WORD PTR [ebx],ax
c0025c59:	89 d0                	mov    eax,edx
c0025c5b:	c1 ea 18             	shr    edx,0x18
c0025c5e:	c1 e8 10             	shr    eax,0x10
c0025c61:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025c64:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025c67:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025c6b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025c6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025c72:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025c75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025c79:	83 c4 10             	add    esp,0x10
c0025c7c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025c80:	31 c0                	xor    eax,eax
c0025c82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025c86:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025c8c:	80 e2 88             	and    dl,0x88
c0025c8f:	74 0a                	je     c0025c9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025c91:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025c96:	74 0a                	je     c0025ca2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025c98:	40                   	inc    eax
c0025c99:	eb eb                	jmp    c0025c86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025c9b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025ca0:	75 0f                	jne    c0025cb1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025ca2:	83 ec 0c             	sub    esp,0xc
c0025ca5:	68 4d dc 02 c0       	push   0xc002dc4d
c0025caa:	e8 e8 49 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0025caf:	eb 3f                	jmp    c0025cf0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025cb1:	ba 01 00 00 00       	mov    edx,0x1
c0025cb6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025cbe:	d3 e2                	shl    edx,cl
c0025cc0:	c1 e0 07             	shl    eax,0x7
c0025cc3:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025cc9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025ccd:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025cd3:	85 ca                	test   edx,ecx
c0025cd5:	74 23                	je     c0025cfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025cd7:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025cdd:	0f ba e1 1e          	bt     ecx,0x1e
c0025ce1:	73 ea                	jae    c0025ccd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025ce3:	83 ec 0c             	sub    esp,0xc
c0025ce6:	68 df dc 02 c0       	push   0xc002dcdf
c0025ceb:	e8 17 ce fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0025cf0:	83 c4 10             	add    esp,0x10
c0025cf3:	b8 01 00 00 00       	mov    eax,0x1
c0025cf8:	eb 36                	jmp    c0025d30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025cfa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025d00:	0f ba e0 1e          	bt     eax,0x1e
c0025d04:	73 0a                	jae    c0025d10 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025d06:	83 ec 0c             	sub    esp,0xc
c0025d09:	68 f2 dc 02 c0       	push   0xc002dcf2
c0025d0e:	eb db                	jmp    c0025ceb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025d10:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025d15:	74 17                	je     c0025d2e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025d17:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025d1c:	74 10                	je     c0025d2e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025d1e:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025d24:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025d28:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025d2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025d2e:	31 c0                	xor    eax,eax
c0025d30:	83 c4 2c             	add    esp,0x2c
c0025d33:	5b                   	pop    ebx
c0025d34:	5e                   	pop    esi
c0025d35:	5f                   	pop    edi
c0025d36:	5d                   	pop    ebp
c0025d37:	c3                   	ret    

c0025d38 <SATAPI::eject()>:
c0025d38:	57                   	push   edi
c0025d39:	b9 03 00 00 00       	mov    ecx,0x3
c0025d3e:	53                   	push   ebx
c0025d3f:	83 ec 14             	sub    esp,0x14
c0025d42:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025d46:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025d4a:	fc                   	cld    
c0025d4b:	31 c0                	xor    eax,eax
c0025d4d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025d4f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025d54:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025d59:	50                   	push   eax
c0025d5a:	6a 00                	push   0x0
c0025d5c:	6a 00                	push   0x0
c0025d5e:	6a 00                	push   0x0
c0025d60:	6a 00                	push   0x0
c0025d62:	6a 02                	push   0x2
c0025d64:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025d68:	50                   	push   eax
c0025d69:	53                   	push   ebx
c0025d6a:	e8 c1 fd ff ff       	call   c0025b30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d6f:	83 c4 14             	add    esp,0x14
c0025d72:	53                   	push   ebx
c0025d73:	e8 6e fd ff ff       	call   c0025ae6 <SATAPI::diskRemoved()>
c0025d78:	83 c4 24             	add    esp,0x24
c0025d7b:	31 c0                	xor    eax,eax
c0025d7d:	5b                   	pop    ebx
c0025d7e:	5f                   	pop    edi
c0025d7f:	c3                   	ret    

c0025d80 <SATAPI::detectMedia()>:
c0025d80:	56                   	push   esi
c0025d81:	53                   	push   ebx
c0025d82:	83 ec 28             	sub    esp,0x28
c0025d85:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d89:	6a 0c                	push   0xc
c0025d8b:	6a 00                	push   0x0
c0025d8d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025d91:	56                   	push   esi
c0025d92:	e8 b9 a9 fd ff       	call   c0000750 <memset>
c0025d97:	83 c4 0c             	add    esp,0xc
c0025d9a:	6a 00                	push   0x0
c0025d9c:	6a 00                	push   0x0
c0025d9e:	6a 00                	push   0x0
c0025da0:	6a 00                	push   0x0
c0025da2:	6a 00                	push   0x0
c0025da4:	56                   	push   esi
c0025da5:	53                   	push   ebx
c0025da6:	e8 85 fd ff ff       	call   c0025b30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025dab:	83 c4 1c             	add    esp,0x1c
c0025dae:	6a 0c                	push   0xc
c0025db0:	6a 00                	push   0x0
c0025db2:	56                   	push   esi
c0025db3:	e8 98 a9 fd ff       	call   c0000750 <memset>
c0025db8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025dbd:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025dc2:	83 c4 0c             	add    esp,0xc
c0025dc5:	6a 01                	push   0x1
c0025dc7:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025dcb:	50                   	push   eax
c0025dcc:	6a 00                	push   0x0
c0025dce:	6a 00                	push   0x0
c0025dd0:	6a 12                	push   0x12
c0025dd2:	56                   	push   esi
c0025dd3:	53                   	push   ebx
c0025dd4:	e8 57 fd ff ff       	call   c0025b30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025dd9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025ddd:	83 c4 20             	add    esp,0x20
c0025de0:	83 e0 7f             	and    eax,0x7f
c0025de3:	3c 70                	cmp    al,0x70
c0025de5:	74 15                	je     c0025dfc <SATAPI::detectMedia()+0x7c>
c0025de7:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025dee:	75 0c                	jne    c0025dfc <SATAPI::detectMedia()+0x7c>
c0025df0:	83 ec 0c             	sub    esp,0xc
c0025df3:	53                   	push   ebx
c0025df4:	e8 09 fd ff ff       	call   c0025b02 <SATAPI::diskInserted()>
c0025df9:	83 c4 10             	add    esp,0x10
c0025dfc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025e00:	83 e0 0f             	and    eax,0xf
c0025e03:	3c 02                	cmp    al,0x2
c0025e05:	75 1b                	jne    c0025e22 <SATAPI::detectMedia()+0xa2>
c0025e07:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025e0c:	75 2d                	jne    c0025e3b <SATAPI::detectMedia()+0xbb>
c0025e0e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025e15:	74 24                	je     c0025e3b <SATAPI::detectMedia()+0xbb>
c0025e17:	83 ec 0c             	sub    esp,0xc
c0025e1a:	53                   	push   ebx
c0025e1b:	e8 c6 fc ff ff       	call   c0025ae6 <SATAPI::diskRemoved()>
c0025e20:	eb 16                	jmp    c0025e38 <SATAPI::detectMedia()+0xb8>
c0025e22:	84 c0                	test   al,al
c0025e24:	75 15                	jne    c0025e3b <SATAPI::detectMedia()+0xbb>
c0025e26:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025e2d:	75 0c                	jne    c0025e3b <SATAPI::detectMedia()+0xbb>
c0025e2f:	83 ec 0c             	sub    esp,0xc
c0025e32:	53                   	push   ebx
c0025e33:	e8 ca fc ff ff       	call   c0025b02 <SATAPI::diskInserted()>
c0025e38:	83 c4 10             	add    esp,0x10
c0025e3b:	83 c4 24             	add    esp,0x24
c0025e3e:	5b                   	pop    ebx
c0025e3f:	5e                   	pop    esi
c0025e40:	c3                   	ret    
c0025e41:	90                   	nop

c0025e42 <SATAPI::open(int, int, void*)>:
c0025e42:	56                   	push   esi
c0025e43:	53                   	push   ebx
c0025e44:	50                   	push   eax
c0025e45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e4d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025e57:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025e5d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025e67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e6b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025e75:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025e7b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025e82:	e8 41 9d fe ff       	call   c000fbc8 <Phys::allocatePage()>
c0025e87:	89 c6                	mov    esi,eax
c0025e89:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025e8f:	81 c6 00 10 00 00    	add    esi,0x1000
c0025e95:	e8 2e 9d fe ff       	call   c000fbc8 <Phys::allocatePage()>
c0025e9a:	39 c6                	cmp    esi,eax
c0025e9c:	74 10                	je     c0025eae <SATAPI::open(int, int, void*)+0x6c>
c0025e9e:	83 ec 0c             	sub    esp,0xc
c0025ea1:	68 07 dd 02 c0       	push   0xc002dd07
c0025ea6:	e8 ec 47 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0025eab:	83 c4 10             	add    esp,0x10
c0025eae:	83 ec 0c             	sub    esp,0xc
c0025eb1:	6a 02                	push   0x2
c0025eb3:	e8 49 b8 fe ff       	call   c0011701 <Virt::allocateKernelVirtualPages(int)>
c0025eb8:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025ebe:	6a 03                	push   0x3
c0025ec0:	50                   	push   eax
c0025ec1:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025ec7:	ff 35 30 f3 02 c0    	push   DWORD PTR ds:0xc002f330
c0025ecd:	e8 66 c0 fe ff       	call   c0011f38 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025ed2:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025ed9:	83 c4 14             	add    esp,0x14
c0025edc:	53                   	push   ebx
c0025edd:	e8 9e fe ff ff       	call   c0025d80 <SATAPI::detectMedia()>
c0025ee2:	83 c4 14             	add    esp,0x14
c0025ee5:	31 c0                	xor    eax,eax
c0025ee7:	5b                   	pop    ebx
c0025ee8:	5e                   	pop    esi
c0025ee9:	c3                   	ret    

c0025eea <SATAPI::read(unsigned long long, int, void*)>:
c0025eea:	55                   	push   ebp
c0025eeb:	57                   	push   edi
c0025eec:	56                   	push   esi
c0025eed:	53                   	push   ebx
c0025eee:	83 ec 1c             	sub    esp,0x1c
c0025ef1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025ef5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025ef9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025efd:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025f04:	74 19                	je     c0025f1f <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025f06:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025f0b:	7e 2e                	jle    c0025f3b <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025f0d:	83 ec 0c             	sub    esp,0xc
c0025f10:	68 1d dd 02 c0       	push   0xc002dd1d
c0025f15:	e8 7d 47 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0025f1a:	83 c4 10             	add    esp,0x10
c0025f1d:	eb 1c                	jmp    c0025f3b <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025f1f:	83 ec 0c             	sub    esp,0xc
c0025f22:	55                   	push   ebp
c0025f23:	e8 58 fe ff ff       	call   c0025d80 <SATAPI::detectMedia()>
c0025f28:	83 c4 10             	add    esp,0x10
c0025f2b:	b8 02 00 00 00       	mov    eax,0x2
c0025f30:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025f37:	75 cd                	jne    c0025f06 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025f39:	eb 49                	jmp    c0025f84 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025f3b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025f3f:	b9 03 00 00 00       	mov    ecx,0x3
c0025f44:	fc                   	cld    
c0025f45:	31 c0                	xor    eax,eax
c0025f47:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025f49:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025f4e:	89 d8                	mov    eax,ebx
c0025f50:	86 e0                	xchg   al,ah
c0025f52:	c1 c0 10             	rol    eax,0x10
c0025f55:	86 e0                	xchg   al,ah
c0025f57:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025f5b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025f5f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025f63:	50                   	push   eax
c0025f64:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025f68:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025f6c:	56                   	push   esi
c0025f6d:	53                   	push   ebx
c0025f6e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025f72:	c1 e0 0b             	shl    eax,0xb
c0025f75:	50                   	push   eax
c0025f76:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025f7a:	50                   	push   eax
c0025f7b:	55                   	push   ebp
c0025f7c:	e8 af fb ff ff       	call   c0025b30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f81:	83 c4 20             	add    esp,0x20
c0025f84:	83 c4 1c             	add    esp,0x1c
c0025f87:	5b                   	pop    ebx
c0025f88:	5e                   	pop    esi
c0025f89:	5f                   	pop    edi
c0025f8a:	5d                   	pop    ebp
c0025f8b:	c3                   	ret    

c0025f8c <AVX::open(int, int, void*)>:
c0025f8c:	83 ec 0c             	sub    esp,0xc
c0025f8f:	e8 44 11 00 00       	call   c00270d8 <avxInit>
c0025f94:	b8 00 00 00 00       	mov    eax,0x0
c0025f99:	83 c4 0c             	add    esp,0xc
c0025f9c:	c3                   	ret    
c0025f9d:	90                   	nop

c0025f9e <AVX::close(int, int, void*)>:
c0025f9e:	83 ec 0c             	sub    esp,0xc
c0025fa1:	e8 33 11 00 00       	call   c00270d9 <avxClose>
c0025fa6:	b8 00 00 00 00       	mov    eax,0x0
c0025fab:	83 c4 0c             	add    esp,0xc
c0025fae:	c3                   	ret    
c0025faf:	90                   	nop

c0025fb0 <AVX::available()>:
c0025fb0:	83 ec 0c             	sub    esp,0xc
c0025fb3:	e8 18 11 00 00       	call   c00270d0 <avxDetect>
c0025fb8:	85 c0                	test   eax,eax
c0025fba:	0f 95 c0             	setne  al
c0025fbd:	83 c4 0c             	add    esp,0xc
c0025fc0:	c3                   	ret    
c0025fc1:	90                   	nop

c0025fc2 <AVX::save(void*)>:
c0025fc2:	83 ec 0c             	sub    esp,0xc
c0025fc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fc9:	83 ec 0c             	sub    esp,0xc
c0025fcc:	50                   	push   eax
c0025fcd:	e8 04 11 00 00       	call   c00270d6 <avxSave>
c0025fd2:	83 c4 10             	add    esp,0x10
c0025fd5:	90                   	nop
c0025fd6:	83 c4 0c             	add    esp,0xc
c0025fd9:	c3                   	ret    

c0025fda <AVX::load(void*)>:
c0025fda:	83 ec 0c             	sub    esp,0xc
c0025fdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fe1:	83 ec 0c             	sub    esp,0xc
c0025fe4:	50                   	push   eax
c0025fe5:	e8 ed 10 00 00       	call   c00270d7 <avxLoad>
c0025fea:	83 c4 10             	add    esp,0x10
c0025fed:	90                   	nop
c0025fee:	83 c4 0c             	add    esp,0xc
c0025ff1:	c3                   	ret    

c0025ff2 <AVX::AVX()>:
c0025ff2:	83 ec 0c             	sub    esp,0xc
c0025ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff9:	83 ec 08             	sub    esp,0x8
c0025ffc:	68 80 dd 02 c0       	push   0xc002dd80
c0026001:	50                   	push   eax
c0026002:	e8 5d e4 fe ff       	call   c0014464 <FPU::FPU(char const*)>
c0026007:	83 c4 10             	add    esp,0x10
c002600a:	ba 90 dd 02 c0       	mov    edx,0xc002dd90
c002600f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026013:	89 10                	mov    DWORD PTR [eax],edx
c0026015:	90                   	nop
c0026016:	83 c4 0c             	add    esp,0xc
c0026019:	c3                   	ret    

c002601a <MMX::available()>:
c002601a:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c002601f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026025:	83 e0 20             	and    eax,0x20
c0026028:	84 c0                	test   al,al
c002602a:	0f 95 c0             	setne  al
c002602d:	c3                   	ret    

c002602e <MMX::open(int, int, void*)>:
c002602e:	83 ec 0c             	sub    esp,0xc
c0026031:	e8 2c 11 00 00       	call   c0027162 <x87Init>
c0026036:	b8 00 00 00 00       	mov    eax,0x0
c002603b:	83 c4 0c             	add    esp,0xc
c002603e:	c3                   	ret    
c002603f:	90                   	nop

c0026040 <MMX::close(int, int, void*)>:
c0026040:	83 ec 0c             	sub    esp,0xc
c0026043:	e8 34 11 00 00       	call   c002717c <x87Close>
c0026048:	b8 00 00 00 00       	mov    eax,0x0
c002604d:	83 c4 0c             	add    esp,0xc
c0026050:	c3                   	ret    
c0026051:	90                   	nop

c0026052 <MMX::save(void*)>:
c0026052:	83 ec 0c             	sub    esp,0xc
c0026055:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026059:	83 ec 0c             	sub    esp,0xc
c002605c:	50                   	push   eax
c002605d:	e8 ef 10 00 00       	call   c0027151 <x87Save>
c0026062:	83 c4 10             	add    esp,0x10
c0026065:	90                   	nop
c0026066:	83 c4 0c             	add    esp,0xc
c0026069:	c3                   	ret    

c002606a <MMX::load(void*)>:
c002606a:	83 ec 0c             	sub    esp,0xc
c002606d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026071:	83 ec 0c             	sub    esp,0xc
c0026074:	50                   	push   eax
c0026075:	e8 e0 10 00 00       	call   c002715a <x87Load>
c002607a:	83 c4 10             	add    esp,0x10
c002607d:	90                   	nop
c002607e:	83 c4 0c             	add    esp,0xc
c0026081:	c3                   	ret    

c0026082 <MMX::MMX()>:
c0026082:	83 ec 0c             	sub    esp,0xc
c0026085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026089:	83 ec 08             	sub    esp,0x8
c002608c:	68 c0 dd 02 c0       	push   0xc002ddc0
c0026091:	50                   	push   eax
c0026092:	e8 cd e3 fe ff       	call   c0014464 <FPU::FPU(char const*)>
c0026097:	83 c4 10             	add    esp,0x10
c002609a:	ba d0 dd 02 c0       	mov    edx,0xc002ddd0
c002609f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260a3:	89 10                	mov    DWORD PTR [eax],edx
c00260a5:	90                   	nop
c00260a6:	83 c4 0c             	add    esp,0xc
c00260a9:	c3                   	ret    

c00260aa <SSE::open(int, int, void*)>:
c00260aa:	83 ec 0c             	sub    esp,0xc
c00260ad:	e8 62 10 00 00       	call   c0027114 <sseInit>
c00260b2:	b8 00 00 00 00       	mov    eax,0x0
c00260b7:	83 c4 0c             	add    esp,0xc
c00260ba:	c3                   	ret    
c00260bb:	90                   	nop

c00260bc <SSE::close(int, int, void*)>:
c00260bc:	83 ec 0c             	sub    esp,0xc
c00260bf:	e8 60 10 00 00       	call   c0027124 <sseClose>
c00260c4:	b8 00 00 00 00       	mov    eax,0x0
c00260c9:	83 c4 0c             	add    esp,0xc
c00260cc:	c3                   	ret    
c00260cd:	90                   	nop

c00260ce <SSE::available()>:
c00260ce:	83 ec 1c             	sub    esp,0x1c
c00260d1:	e8 1a 10 00 00       	call   c00270f0 <absolutelyNoChanceInHell>
c00260d6:	85 c0                	test   eax,eax
c00260d8:	0f 95 c0             	setne  al
c00260db:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00260df:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00260e3:	83 c4 1c             	add    esp,0x1c
c00260e6:	c3                   	ret    
c00260e7:	90                   	nop

c00260e8 <SSE::save(void*)>:
c00260e8:	83 ec 0c             	sub    esp,0xc
c00260eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260ef:	83 ec 0c             	sub    esp,0xc
c00260f2:	50                   	push   eax
c00260f3:	e8 10 10 00 00       	call   c0027108 <sseSave>
c00260f8:	83 c4 10             	add    esp,0x10
c00260fb:	90                   	nop
c00260fc:	83 c4 0c             	add    esp,0xc
c00260ff:	c3                   	ret    

c0026100 <SSE::load(void*)>:
c0026100:	83 ec 0c             	sub    esp,0xc
c0026103:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026107:	83 ec 0c             	sub    esp,0xc
c002610a:	50                   	push   eax
c002610b:	e8 fe 0f 00 00       	call   c002710e <sseLoad>
c0026110:	83 c4 10             	add    esp,0x10
c0026113:	90                   	nop
c0026114:	83 c4 0c             	add    esp,0xc
c0026117:	c3                   	ret    

c0026118 <SSE::SSE()>:
c0026118:	83 ec 0c             	sub    esp,0xc
c002611b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002611f:	83 ec 08             	sub    esp,0x8
c0026122:	68 00 de 02 c0       	push   0xc002de00
c0026127:	50                   	push   eax
c0026128:	e8 37 e3 fe ff       	call   c0014464 <FPU::FPU(char const*)>
c002612d:	83 c4 10             	add    esp,0x10
c0026130:	ba 10 de 02 c0       	mov    edx,0xc002de10
c0026135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026139:	89 10                	mov    DWORD PTR [eax],edx
c002613b:	90                   	nop
c002613c:	83 c4 0c             	add    esp,0xc
c002613f:	c3                   	ret    

c0026140 <x87::open(int, int, void*)>:
c0026140:	83 ec 0c             	sub    esp,0xc
c0026143:	e8 1a 10 00 00       	call   c0027162 <x87Init>
c0026148:	b8 00 00 00 00       	mov    eax,0x0
c002614d:	83 c4 0c             	add    esp,0xc
c0026150:	c3                   	ret    
c0026151:	90                   	nop

c0026152 <x87::close(int, int, void*)>:
c0026152:	83 ec 0c             	sub    esp,0xc
c0026155:	e8 22 10 00 00       	call   c002717c <x87Close>
c002615a:	b8 00 00 00 00       	mov    eax,0x0
c002615f:	83 c4 0c             	add    esp,0xc
c0026162:	c3                   	ret    
c0026163:	90                   	nop

c0026164 <x87::available()>:
c0026164:	83 ec 0c             	sub    esp,0xc
c0026167:	e8 ca 0f 00 00       	call   c0027136 <x87Detect>
c002616c:	85 c0                	test   eax,eax
c002616e:	0f 95 c0             	setne  al
c0026171:	83 c4 0c             	add    esp,0xc
c0026174:	c3                   	ret    
c0026175:	90                   	nop

c0026176 <x87::save(void*)>:
c0026176:	83 ec 0c             	sub    esp,0xc
c0026179:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002617d:	83 ec 0c             	sub    esp,0xc
c0026180:	50                   	push   eax
c0026181:	e8 cb 0f 00 00       	call   c0027151 <x87Save>
c0026186:	83 c4 10             	add    esp,0x10
c0026189:	90                   	nop
c002618a:	83 c4 0c             	add    esp,0xc
c002618d:	c3                   	ret    

c002618e <x87::load(void*)>:
c002618e:	83 ec 0c             	sub    esp,0xc
c0026191:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026195:	83 ec 0c             	sub    esp,0xc
c0026198:	50                   	push   eax
c0026199:	e8 bc 0f 00 00       	call   c002715a <x87Load>
c002619e:	83 c4 10             	add    esp,0x10
c00261a1:	90                   	nop
c00261a2:	83 c4 0c             	add    esp,0xc
c00261a5:	c3                   	ret    

c00261a6 <x87::x87()>:
c00261a6:	83 ec 0c             	sub    esp,0xc
c00261a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ad:	83 ec 08             	sub    esp,0x8
c00261b0:	68 40 de 02 c0       	push   0xc002de40
c00261b5:	50                   	push   eax
c00261b6:	e8 a9 e2 fe ff       	call   c0014464 <FPU::FPU(char const*)>
c00261bb:	83 c4 10             	add    esp,0x10
c00261be:	ba 50 de 02 c0       	mov    edx,0xc002de50
c00261c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c7:	89 10                	mov    DWORD PTR [eax],edx
c00261c9:	90                   	nop
c00261ca:	83 c4 0c             	add    esp,0xc
c00261cd:	c3                   	ret    

c00261ce <APIC::disable()>:
c00261ce:	90                   	nop
c00261cf:	c3                   	ret    

c00261d0 <APIC::close(int, int, void*)>:
c00261d0:	55                   	push   ebp
c00261d1:	89 e5                	mov    ebp,esp
c00261d3:	83 ec 08             	sub    esp,0x8
c00261d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00261db:	83 c0 3c             	add    eax,0x3c
c00261de:	8b 00                	mov    eax,DWORD PTR [eax]
c00261e0:	83 ec 0c             	sub    esp,0xc
c00261e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e6:	ff d0                	call   eax
c00261e8:	83 c4 10             	add    esp,0x10
c00261eb:	b8 00 00 00 00       	mov    eax,0x0
c00261f0:	c9                   	leave  
c00261f1:	c3                   	ret    

c00261f2 <IOAPIC::close(int, int, void*)>:
c00261f2:	b8 00 00 00 00       	mov    eax,0x0
c00261f7:	c3                   	ret    

c00261f8 <APIC::io_wait()>:
c00261f8:	eb 00                	jmp    c00261fa <APIC::io_wait()+0x2>
c00261fa:	eb 00                	jmp    c00261fc <APIC::io_wait()+0x4>
c00261fc:	90                   	nop
c00261fd:	c3                   	ret    

c00261fe <APIC::getBase()>:
c00261fe:	55                   	push   ebp
c00261ff:	89 e5                	mov    ebp,esp
c0026201:	83 ec 18             	sub    esp,0x18
c0026204:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0026209:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002620f:	83 e0 08             	and    eax,0x8
c0026212:	84 c0                	test   al,al
c0026214:	75 07                	jne    c002621d <APIC::getBase()+0x1f>
c0026216:	b8 00 00 00 00       	mov    eax,0x0
c002621b:	eb 21                	jmp    c002623e <APIC::getBase()+0x40>
c002621d:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0026222:	83 ec 08             	sub    esp,0x8
c0026225:	6a 1b                	push   0x1b
c0026227:	50                   	push   eax
c0026228:	e8 05 8c fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c002622d:	83 c4 10             	add    esp,0x10
c0026230:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026233:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026236:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026239:	25 00 f0 ff ff       	and    eax,0xfffff000
c002623e:	c9                   	leave  
c002623f:	c3                   	ret    

c0026240 <APIC::eoi(unsigned char)>:
c0026240:	55                   	push   ebp
c0026241:	89 e5                	mov    ebp,esp
c0026243:	83 ec 28             	sub    esp,0x28
c0026246:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026249:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002624c:	83 ec 0c             	sub    esp,0xc
c002624f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026252:	e8 a7 ff ff ff       	call   c00261fe <APIC::getBase()>
c0026257:	83 c4 10             	add    esp,0x10
c002625a:	05 b0 00 00 00       	add    eax,0xb0
c002625f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026262:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026265:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002626b:	90                   	nop
c002626c:	c9                   	leave  
c002626d:	c3                   	ret    

c002626e <APIC::open(int, int, void*)>:
c002626e:	55                   	push   ebp
c002626f:	89 e5                	mov    ebp,esp
c0026271:	57                   	push   edi
c0026272:	56                   	push   esi
c0026273:	53                   	push   ebx
c0026274:	83 ec 2c             	sub    esp,0x2c
c0026277:	83 ec 0c             	sub    esp,0xc
c002627a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002627d:	e8 7c ff ff ff       	call   c00261fe <APIC::getBase()>
c0026282:	83 c4 10             	add    esp,0x10
c0026285:	89 c2                	mov    edx,eax
c0026287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002628a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026290:	0f b6 f8             	movzx  edi,al
c0026293:	89 d0                	mov    eax,edx
c0026295:	ba 00 00 00 00       	mov    edx,0x0
c002629a:	89 c1                	mov    ecx,eax
c002629c:	80 e5 ff             	and    ch,0xff
c002629f:	89 cb                	mov    ebx,ecx
c00262a1:	0f b6 f2             	movzx  esi,dl
c00262a4:	89 d8                	mov    eax,ebx
c00262a6:	89 f2                	mov    edx,esi
c00262a8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262ab:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262ae:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262b2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262b6:	83 e0 00             	and    eax,0x0
c00262b9:	09 d0                	or     eax,edx
c00262bb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262c2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262c8:	8d 50 01             	lea    edx,[eax+0x1]
c00262cb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262ce:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00262d4:	0f b6 d0             	movzx  edx,al
c00262d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262da:	83 c2 08             	add    edx,0x8
c00262dd:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00262e1:	0f b6 c9             	movzx  ecx,cl
c00262e4:	81 c9 00 00 01 00    	or     ecx,0x10000
c00262ea:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00262ee:	83 ec 0c             	sub    esp,0xc
c00262f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262f4:	e8 05 ff ff ff       	call   c00261fe <APIC::getBase()>
c00262f9:	83 c4 10             	add    esp,0x10
c00262fc:	05 f0 00 00 00       	add    eax,0xf0
c0026301:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026304:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026307:	8b 00                	mov    eax,DWORD PTR [eax]
c0026309:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002630c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026313:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002631a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002631d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026320:	89 10                	mov    DWORD PTR [eax],edx
c0026322:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0026329:	a1 90 1a 03 c0       	mov    eax,ds:0xc0031a90
c002632e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026331:	7d 7c                	jge    c00263af <APIC::open(int, int, void*)+0x141>
c0026333:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026336:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c002633d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026340:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026343:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c002634a:	c1 e8 08             	shr    eax,0x8
c002634d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026351:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026354:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c002635b:	c1 e8 18             	shr    eax,0x18
c002635e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026361:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026365:	75 40                	jne    c00263a7 <APIC::open(int, int, void*)+0x139>
c0026367:	83 ec 0c             	sub    esp,0xc
c002636a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002636d:	e8 8c fe ff ff       	call   c00261fe <APIC::getBase()>
c0026372:	83 c4 10             	add    esp,0x10
c0026375:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0026379:	75 07                	jne    c0026382 <APIC::open(int, int, void*)+0x114>
c002637b:	ba 60 03 00 00       	mov    edx,0x360
c0026380:	eb 05                	jmp    c0026387 <APIC::open(int, int, void*)+0x119>
c0026382:	ba 50 03 00 00       	mov    edx,0x350
c0026387:	01 d0                	add    eax,edx
c0026389:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002638c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002638f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026391:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026394:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002639b:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002639f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00263a2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00263a5:	89 10                	mov    DWORD PTR [eax],edx
c00263a7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00263aa:	e9 7a ff ff ff       	jmp    c0026329 <APIC::open(int, int, void*)+0xbb>
c00263af:	b8 00 00 00 00       	mov    eax,0x0
c00263b4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00263b7:	5b                   	pop    ebx
c00263b8:	5e                   	pop    esi
c00263b9:	5f                   	pop    edi
c00263ba:	5d                   	pop    ebp
c00263bb:	c3                   	ret    

c00263bc <IOAPIC::IOAPIC()>:
c00263bc:	83 ec 0c             	sub    esp,0xc
c00263bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c3:	83 ec 08             	sub    esp,0x8
c00263c6:	68 80 de 02 c0       	push   0xc002de80
c00263cb:	50                   	push   eax
c00263cc:	e8 73 dd fe ff       	call   c0014144 <Device::Device(char const*)>
c00263d1:	83 c4 10             	add    esp,0x10
c00263d4:	ba a8 df 02 c0       	mov    edx,0xc002dfa8
c00263d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263dd:	89 10                	mov    DWORD PTR [eax],edx
c00263df:	90                   	nop
c00263e0:	83 c4 0c             	add    esp,0xc
c00263e3:	c3                   	ret    

c00263e4 <APIC::APIC()>:
c00263e4:	53                   	push   ebx
c00263e5:	83 ec 18             	sub    esp,0x18
c00263e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00263ec:	83 ec 08             	sub    esp,0x8
c00263ef:	68 88 de 02 c0       	push   0xc002de88
c00263f4:	50                   	push   eax
c00263f5:	e8 c4 e4 fe ff       	call   c00148be <InterruptController::InterruptController(char const*)>
c00263fa:	83 c4 10             	add    esp,0x10
c00263fd:	ba 60 df 02 c0       	mov    edx,0xc002df60
c0026402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026406:	89 10                	mov    DWORD PTR [eax],edx
c0026408:	a0 60 35 03 c0       	mov    al,ds:0xc0033560
c002640d:	83 f0 01             	xor    eax,0x1
c0026410:	84 c0                	test   al,al
c0026412:	0f 84 a1 00 00 00    	je     c00264b9 <APIC::APIC()+0xd5>
c0026418:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002641d:	a0 40 1b 03 c0       	mov    al,ds:0xc0031b40
c0026422:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0026426:	0f 83 86 00 00 00    	jae    c00264b2 <APIC::APIC()+0xce>
c002642c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0026434:	83 ec 0c             	sub    esp,0xc
c0026437:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002643b:	e8 4c 94 fe ff       	call   c000f88c <malloc>
c0026440:	83 c4 10             	add    esp,0x10
c0026443:	89 c3                	mov    ebx,eax
c0026445:	83 ec 0c             	sub    esp,0xc
c0026448:	53                   	push   ebx
c0026449:	e8 6e ff ff ff       	call   c00263bc <IOAPIC::IOAPIC()>
c002644e:	83 c4 10             	add    esp,0x10
c0026451:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026455:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002645a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002645e:	89 14 85 40 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffccac0],edx
c0026465:	a1 20 35 03 c0       	mov    eax,ds:0xc0033520
c002646a:	40                   	inc    eax
c002646b:	a3 20 35 03 c0       	mov    ds:0xc0033520,eax
c0026470:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0026475:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002647b:	83 ec 08             	sub    esp,0x8
c002647e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026482:	50                   	push   eax
c0026483:	e8 b8 da fe ff       	call   c0013f40 <Device::addChild(Device*)>
c0026488:	83 c4 10             	add    esp,0x10
c002648b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002648f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026491:	83 c0 08             	add    eax,0x8
c0026494:	8b 00                	mov    eax,DWORD PTR [eax]
c0026496:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002649b:	6a 00                	push   0x0
c002649d:	6a 00                	push   0x0
c002649f:	52                   	push   edx
c00264a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00264a4:	ff d0                	call   eax
c00264a6:	83 c4 10             	add    esp,0x10
c00264a9:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00264ad:	e9 6b ff ff ff       	jmp    c002641d <APIC::APIC()+0x39>
c00264b2:	c6 05 60 35 03 c0 01 	mov    BYTE PTR ds:0xc0033560,0x1
c00264b9:	90                   	nop
c00264ba:	83 c4 18             	add    esp,0x18
c00264bd:	5b                   	pop    ebx
c00264be:	c3                   	ret    
c00264bf:	90                   	nop

c00264c0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00264c0:	55                   	push   ebp
c00264c1:	89 e5                	mov    ebp,esp
c00264c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00264cc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00264cf:	72 1d                	jb     c00264ee <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00264d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00264da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264dd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00264e3:	01 d0                	add    eax,edx
c00264e5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00264e8:	73 04                	jae    c00264ee <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00264ea:	b0 01                	mov    al,0x1
c00264ec:	eb 02                	jmp    c00264f0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00264ee:	b0 00                	mov    al,0x0
c00264f0:	5d                   	pop    ebp
c00264f1:	c3                   	ret    

c00264f2 <IOAPIC::read(int)>:
c00264f2:	55                   	push   ebp
c00264f3:	89 e5                	mov    ebp,esp
c00264f5:	83 ec 10             	sub    esp,0x10
c00264f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264fb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026501:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026504:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026507:	0f b6 d0             	movzx  edx,al
c002650a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002650d:	89 10                	mov    DWORD PTR [eax],edx
c002650f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026512:	83 c0 10             	add    eax,0x10
c0026515:	8b 00                	mov    eax,DWORD PTR [eax]
c0026517:	c9                   	leave  
c0026518:	c3                   	ret    
c0026519:	90                   	nop

c002651a <IOAPIC::open(int, int, void*)>:
c002651a:	55                   	push   ebp
c002651b:	89 e5                	mov    ebp,esp
c002651d:	57                   	push   edi
c002651e:	56                   	push   esi
c002651f:	53                   	push   ebx
c0026520:	83 ec 0c             	sub    esp,0xc
c0026523:	83 ec 0c             	sub    esp,0xc
c0026526:	68 b3 de 02 c0       	push   0xc002deb3
c002652b:	e8 d7 c5 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c0026530:	83 c4 10             	add    esp,0x10
c0026533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026536:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026539:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002653f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026542:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026548:	8b 14 85 80 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce480]
c002654f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026552:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002655b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026561:	8b 14 85 00 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce400]
c0026568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002656b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026574:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002657a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002657d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026583:	0f b6 f8             	movzx  edi,al
c0026586:	89 d0                	mov    eax,edx
c0026588:	ba 00 00 00 00       	mov    edx,0x0
c002658d:	89 c1                	mov    ecx,eax
c002658f:	80 e5 ff             	and    ch,0xff
c0026592:	89 cb                	mov    ebx,ecx
c0026594:	0f b6 f2             	movzx  esi,dl
c0026597:	89 d8                	mov    eax,ebx
c0026599:	89 f2                	mov    edx,esi
c002659b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002659e:	8d 5f 08             	lea    ebx,[edi+0x8]
c00265a1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00265a5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00265a9:	83 e0 00             	and    eax,0x0
c00265ac:	09 d0                	or     eax,edx
c00265ae:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00265b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265b5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00265bb:	8d 50 01             	lea    edx,[eax+0x1]
c00265be:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00265c1:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00265c7:	0f b6 d0             	movzx  edx,al
c00265ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265cd:	83 c2 08             	add    edx,0x8
c00265d0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00265d4:	0f b6 c9             	movzx  ecx,cl
c00265d7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00265dd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00265e1:	83 ec 08             	sub    esp,0x8
c00265e4:	6a 01                	push   0x1
c00265e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265e9:	e8 04 ff ff ff       	call   c00264f2 <IOAPIC::read(int)>
c00265ee:	83 c4 10             	add    esp,0x10
c00265f1:	c1 f8 10             	sar    eax,0x10
c00265f4:	0f b6 c0             	movzx  eax,al
c00265f7:	8d 50 01             	lea    edx,[eax+0x1]
c00265fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265fd:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026603:	b8 00 00 00 00       	mov    eax,0x0
c0026608:	8d 65 f4             	lea    esp,[ebp-0xc]
c002660b:	5b                   	pop    ebx
c002660c:	5e                   	pop    esi
c002660d:	5f                   	pop    edi
c002660e:	5d                   	pop    ebp
c002660f:	c3                   	ret    

c0026610 <IOAPIC::write(int, int)>:
c0026610:	55                   	push   ebp
c0026611:	89 e5                	mov    ebp,esp
c0026613:	83 ec 10             	sub    esp,0x10
c0026616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026619:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002661f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026622:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026625:	0f b6 d0             	movzx  edx,al
c0026628:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002662b:	89 10                	mov    DWORD PTR [eax],edx
c002662d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026630:	8d 50 10             	lea    edx,[eax+0x10]
c0026633:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026636:	89 02                	mov    DWORD PTR [edx],eax
c0026638:	90                   	nop
c0026639:	c9                   	leave  
c002663a:	c3                   	ret    
c002663b:	90                   	nop

c002663c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002663c:	55                   	push   ebp
c002663d:	89 e5                	mov    ebp,esp
c002663f:	53                   	push   ebx
c0026640:	83 ec 2c             	sub    esp,0x2c
c0026643:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026646:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0026649:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002664c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002664f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026652:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026655:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026658:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002665b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002665e:	88 d8                	mov    al,bl
c0026660:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026663:	88 c8                	mov    al,cl
c0026665:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026668:	88 d0                	mov    al,dl
c002666a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002666d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026671:	83 c0 08             	add    eax,0x8
c0026674:	01 c0                	add    eax,eax
c0026676:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026679:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002667d:	83 c0 08             	add    eax,0x8
c0026680:	01 c0                	add    eax,eax
c0026682:	40                   	inc    eax
c0026683:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026686:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026689:	50                   	push   eax
c002668a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002668d:	e8 60 fe ff ff       	call   c00264f2 <IOAPIC::read(int)>
c0026692:	83 c4 08             	add    esp,0x8
c0026695:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026698:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002669f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00266a2:	c1 e0 18             	shl    eax,0x18
c00266a5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00266a8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00266ab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00266ae:	52                   	push   edx
c00266af:	50                   	push   eax
c00266b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266b3:	e8 58 ff ff ff       	call   c0026610 <IOAPIC::write(int, int)>
c00266b8:	83 c4 0c             	add    esp,0xc
c00266bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00266be:	50                   	push   eax
c00266bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266c2:	e8 2b fe ff ff       	call   c00264f2 <IOAPIC::read(int)>
c00266c7:	83 c4 08             	add    esp,0x8
c00266ca:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00266cd:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00266d4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00266db:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00266e2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00266e6:	74 09                	je     c00266f1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00266e8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00266ef:	eb 07                	jmp    c00266f8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00266f1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00266f8:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00266fc:	74 09                	je     c0026707 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00266fe:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026705:	eb 07                	jmp    c002670e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026707:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002670e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026715:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026719:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002671c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002671f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026722:	52                   	push   edx
c0026723:	50                   	push   eax
c0026724:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026727:	e8 e4 fe ff ff       	call   c0026610 <IOAPIC::write(int, int)>
c002672c:	83 c4 0c             	add    esp,0xc
c002672f:	90                   	nop
c0026730:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026733:	c9                   	leave  
c0026734:	c3                   	ret    
c0026735:	90                   	nop

c0026736 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0026736:	55                   	push   ebp
c0026737:	89 e5                	mov    ebp,esp
c0026739:	57                   	push   edi
c002673a:	56                   	push   esi
c002673b:	53                   	push   ebx
c002673c:	83 ec 2c             	sub    esp,0x2c
c002673f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026742:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026745:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026749:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002674d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026751:	74 5a                	je     c00267ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026753:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026757:	7f 44                	jg     c002679d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0026759:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002675c:	05 00 e4 02 c0       	add    eax,0xc002e400
c0026761:	8a 00                	mov    al,BYTE PTR [eax]
c0026763:	0f b6 c0             	movzx  eax,al
c0026766:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026769:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002676c:	66 8b 84 00 20 1b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce4e0]
c0026774:	0f b7 c0             	movzx  eax,ax
c0026777:	83 e0 02             	and    eax,0x2
c002677a:	85 c0                	test   eax,eax
c002677c:	74 04                	je     c0026782 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002677e:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026782:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026785:	66 8b 84 00 20 1b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce4e0]
c002678d:	0f b7 c0             	movzx  eax,ax
c0026790:	83 e0 08             	and    eax,0x8
c0026793:	85 c0                	test   eax,eax
c0026795:	74 16                	je     c00267ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026797:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002679b:	eb 10                	jmp    c00267ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002679d:	83 ec 0c             	sub    esp,0xc
c00267a0:	68 c4 de 02 c0       	push   0xc002dec4
c00267a5:	e8 ed 3e ff ff       	call   c001a697 <Krnl::panic(char const*)>
c00267aa:	83 c4 10             	add    esp,0x10
c00267ad:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00267b1:	a1 20 35 03 c0       	mov    eax,ds:0xc0033520
c00267b6:	83 ec 08             	sub    esp,0x8
c00267b9:	50                   	push   eax
c00267ba:	68 fc de 02 c0       	push   0xc002defc
c00267bf:	e8 43 c3 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00267c4:	83 c4 10             	add    esp,0x10
c00267c7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00267ce:	a1 20 35 03 c0       	mov    eax,ds:0xc0033520
c00267d3:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00267d6:	7d 67                	jge    c002683f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00267d8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00267db:	8b 04 85 40 35 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccac0]
c00267e2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00267e5:	83 ec 08             	sub    esp,0x8
c00267e8:	52                   	push   edx
c00267e9:	50                   	push   eax
c00267ea:	e8 d1 fc ff ff       	call   c00264c0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00267ef:	83 c4 10             	add    esp,0x10
c00267f2:	84 c0                	test   al,al
c00267f4:	74 44                	je     c002683a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00267f6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00267f9:	8b 1c 85 40 35 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccac0]
c0026800:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026804:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026807:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002680b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002680e:	83 c0 20             	add    eax,0x20
c0026811:	0f b6 f0             	movzx  esi,al
c0026814:	b8 00 00 00 00       	mov    eax,0x0
c0026819:	99                   	cdq    
c002681a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002681d:	0f b6 c9             	movzx  ecx,cl
c0026820:	83 ec 04             	sub    esp,0x4
c0026823:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026826:	57                   	push   edi
c0026827:	56                   	push   esi
c0026828:	52                   	push   edx
c0026829:	50                   	push   eax
c002682a:	51                   	push   ecx
c002682b:	53                   	push   ebx
c002682c:	e8 0b fe ff ff       	call   c002663c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026831:	83 c4 20             	add    esp,0x20
c0026834:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0026838:	eb 05                	jmp    c002683f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002683a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002683d:	eb 8f                	jmp    c00267ce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002683f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026842:	83 f0 01             	xor    eax,0x1
c0026845:	84 c0                	test   al,al
c0026847:	74 10                	je     c0026859 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026849:	83 ec 0c             	sub    esp,0xc
c002684c:	68 13 df 02 c0       	push   0xc002df13
c0026851:	e8 41 3e ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0026856:	83 c4 10             	add    esp,0x10
c0026859:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002685d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026864:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026868:	7f 65                	jg     c00268cf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002686a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002686d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026870:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026877:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002687a:	01 ca                	add    edx,ecx
c002687c:	83 c2 54             	add    edx,0x54
c002687f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026883:	85 c0                	test   eax,eax
c0026885:	75 43                	jne    c00268ca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002688a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002688d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026894:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026897:	01 ca                	add    edx,ecx
c0026899:	8d 4a 54             	lea    ecx,[edx+0x54]
c002689c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002689f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00268a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00268a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00268a9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00268b0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00268b3:	01 ca                	add    edx,ecx
c00268b5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00268bb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00268be:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00268c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268c5:	83 e8 20             	sub    eax,0x20
c00268c8:	eb 1a                	jmp    c00268e4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00268ca:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00268cd:	eb 95                	jmp    c0026864 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00268cf:	83 ec 0c             	sub    esp,0xc
c00268d2:	68 20 df 02 c0       	push   0xc002df20
c00268d7:	e8 bb 3d ff ff       	call   c001a697 <Krnl::panic(char const*)>
c00268dc:	83 c4 10             	add    esp,0x10
c00268df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00268e4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00268e7:	5b                   	pop    ebx
c00268e8:	5e                   	pop    esi
c00268e9:	5f                   	pop    edi
c00268ea:	5d                   	pop    ebp
c00268eb:	c3                   	ret    

c00268ec <PIC::disable()>:
c00268ec:	55                   	push   ebp
c00268ed:	89 e5                	mov    ebp,esp
c00268ef:	83 ec 10             	sub    esp,0x10
c00268f2:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00268f8:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00268fc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00268ff:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026903:	ee                   	out    dx,al
c0026904:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002690a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002690e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026911:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026915:	ee                   	out    dx,al
c0026916:	90                   	nop
c0026917:	c9                   	leave  
c0026918:	c3                   	ret    
c0026919:	90                   	nop

c002691a <PIC::close(int, int, void*)>:
c002691a:	55                   	push   ebp
c002691b:	89 e5                	mov    ebp,esp
c002691d:	83 ec 08             	sub    esp,0x8
c0026920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026923:	8b 00                	mov    eax,DWORD PTR [eax]
c0026925:	83 c0 3c             	add    eax,0x3c
c0026928:	8b 00                	mov    eax,DWORD PTR [eax]
c002692a:	83 ec 0c             	sub    esp,0xc
c002692d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026930:	ff d0                	call   eax
c0026932:	83 c4 10             	add    esp,0x10
c0026935:	b8 00 00 00 00       	mov    eax,0x0
c002693a:	c9                   	leave  
c002693b:	c3                   	ret    

c002693c <PIC::PIC()>:
c002693c:	83 ec 0c             	sub    esp,0xc
c002693f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026943:	83 ec 08             	sub    esp,0x8
c0026946:	68 cc df 02 c0       	push   0xc002dfcc
c002694b:	50                   	push   eax
c002694c:	e8 6d df fe ff       	call   c00148be <InterruptController::InterruptController(char const*)>
c0026951:	83 c4 10             	add    esp,0x10
c0026954:	ba f8 df 02 c0       	mov    edx,0xc002dff8
c0026959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002695d:	89 10                	mov    DWORD PTR [eax],edx
c002695f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026963:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026969:	0f b6 d0             	movzx  edx,al
c002696c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026970:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002697b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026981:	0f b6 d0             	movzx  edx,al
c0026984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026988:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026991:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026997:	8d 50 01             	lea    edx,[eax+0x1]
c002699a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002699e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00269a4:	0f b6 d0             	movzx  edx,al
c00269a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269ab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00269af:	83 e1 3f             	and    ecx,0x3f
c00269b2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00269b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269c0:	0f b6 d0             	movzx  edx,al
c00269c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269c7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00269ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269d8:	0f b6 d0             	movzx  edx,al
c00269db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269df:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00269e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269ee:	8d 50 01             	lea    edx,[eax+0x1]
c00269f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00269f5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00269fb:	0f b6 d0             	movzx  edx,al
c00269fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a02:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026a06:	83 e1 3f             	and    ecx,0x3f
c0026a09:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026a0d:	90                   	nop
c0026a0e:	83 c4 0c             	add    esp,0xc
c0026a11:	c3                   	ret    

c0026a12 <PIC::ioWait()>:
c0026a12:	eb 00                	jmp    c0026a14 <PIC::ioWait()+0x2>
c0026a14:	eb 00                	jmp    c0026a16 <PIC::ioWait()+0x4>
c0026a16:	90                   	nop
c0026a17:	c3                   	ret    

c0026a18 <PIC::getIRQReg(int)>:
c0026a18:	55                   	push   ebp
c0026a19:	89 e5                	mov    ebp,esp
c0026a1b:	83 ec 10             	sub    esp,0x10
c0026a1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a21:	0f b6 c0             	movzx  eax,al
c0026a24:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026a2a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026a2d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a30:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a34:	ee                   	out    dx,al
c0026a35:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a38:	0f b6 c0             	movzx  eax,al
c0026a3b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026a41:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026a44:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a47:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a4b:	ee                   	out    dx,al
c0026a4c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026a52:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026a56:	89 c2                	mov    edx,eax
c0026a58:	ec                   	in     al,dx
c0026a59:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026a5c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026a5f:	0f b6 c0             	movzx  eax,al
c0026a62:	c1 e0 08             	shl    eax,0x8
c0026a65:	89 c1                	mov    ecx,eax
c0026a67:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026a6d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026a71:	89 c2                	mov    edx,eax
c0026a73:	ec                   	in     al,dx
c0026a74:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026a77:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026a7a:	0f b6 c0             	movzx  eax,al
c0026a7d:	09 c8                	or     eax,ecx
c0026a7f:	c9                   	leave  
c0026a80:	c3                   	ret    
c0026a81:	90                   	nop

c0026a82 <PIC::eoi(unsigned char)>:
c0026a82:	55                   	push   ebp
c0026a83:	89 e5                	mov    ebp,esp
c0026a85:	83 ec 14             	sub    esp,0x14
c0026a88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a8b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026a8e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026a92:	75 1e                	jne    c0026ab2 <PIC::eoi(unsigned char)+0x30>
c0026a94:	6a 0b                	push   0xb
c0026a96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a99:	e8 7a ff ff ff       	call   c0026a18 <PIC::getIRQReg(int)>
c0026a9e:	83 c4 08             	add    esp,0x8
c0026aa1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026aa5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026aa9:	25 80 00 00 00       	and    eax,0x80
c0026aae:	85 c0                	test   eax,eax
c0026ab0:	74 5f                	je     c0026b11 <PIC::eoi(unsigned char)+0x8f>
c0026ab2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026ab6:	75 2d                	jne    c0026ae5 <PIC::eoi(unsigned char)+0x63>
c0026ab8:	6a 0b                	push   0xb
c0026aba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026abd:	e8 56 ff ff ff       	call   c0026a18 <PIC::getIRQReg(int)>
c0026ac2:	83 c4 08             	add    esp,0x8
c0026ac5:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026ac9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026acc:	66 85 c0             	test   ax,ax
c0026acf:	78 14                	js     c0026ae5 <PIC::eoi(unsigned char)+0x63>
c0026ad1:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026ad7:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026adb:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026ade:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026ae2:	ee                   	out    dx,al
c0026ae3:	eb 2d                	jmp    c0026b12 <PIC::eoi(unsigned char)+0x90>
c0026ae5:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026ae9:	76 12                	jbe    c0026afd <PIC::eoi(unsigned char)+0x7b>
c0026aeb:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026af1:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026af5:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026af8:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026afc:	ee                   	out    dx,al
c0026afd:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026b03:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026b07:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026b0a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026b0e:	ee                   	out    dx,al
c0026b0f:	eb 01                	jmp    c0026b12 <PIC::eoi(unsigned char)+0x90>
c0026b11:	90                   	nop
c0026b12:	c9                   	leave  
c0026b13:	c3                   	ret    

c0026b14 <PIC::remap()>:
c0026b14:	55                   	push   ebp
c0026b15:	89 e5                	mov    ebp,esp
c0026b17:	83 ec 48             	sub    esp,0x48
c0026b1a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026b21:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026b28:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026b2e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026b31:	89 c2                	mov    edx,eax
c0026b33:	ec                   	in     al,dx
c0026b34:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026b37:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026b3a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026b3d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026b43:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026b46:	89 c2                	mov    edx,eax
c0026b48:	ec                   	in     al,dx
c0026b49:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026b4c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026b4f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026b52:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026b58:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026b5c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026b5f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026b62:	ee                   	out    dx,al
c0026b63:	83 ec 0c             	sub    esp,0xc
c0026b66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b69:	e8 a4 fe ff ff       	call   c0026a12 <PIC::ioWait()>
c0026b6e:	83 c4 10             	add    esp,0x10
c0026b71:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026b77:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026b7b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026b7e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026b81:	ee                   	out    dx,al
c0026b82:	83 ec 0c             	sub    esp,0xc
c0026b85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b88:	e8 85 fe ff ff       	call   c0026a12 <PIC::ioWait()>
c0026b8d:	83 c4 10             	add    esp,0x10
c0026b90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026b93:	0f b6 c0             	movzx  eax,al
c0026b96:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026b9c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026b9f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026ba2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026ba5:	ee                   	out    dx,al
c0026ba6:	83 ec 0c             	sub    esp,0xc
c0026ba9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bac:	e8 61 fe ff ff       	call   c0026a12 <PIC::ioWait()>
c0026bb1:	83 c4 10             	add    esp,0x10
c0026bb4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bb7:	0f b6 c0             	movzx  eax,al
c0026bba:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026bc0:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026bc3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026bc6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026bc9:	ee                   	out    dx,al
c0026bca:	83 ec 0c             	sub    esp,0xc
c0026bcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bd0:	e8 3d fe ff ff       	call   c0026a12 <PIC::ioWait()>
c0026bd5:	83 c4 10             	add    esp,0x10
c0026bd8:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026bde:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026be2:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026be5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026be8:	ee                   	out    dx,al
c0026be9:	83 ec 0c             	sub    esp,0xc
c0026bec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bef:	e8 1e fe ff ff       	call   c0026a12 <PIC::ioWait()>
c0026bf4:	83 c4 10             	add    esp,0x10
c0026bf7:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026bfd:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026c01:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026c04:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026c07:	ee                   	out    dx,al
c0026c08:	83 ec 0c             	sub    esp,0xc
c0026c0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c0e:	e8 ff fd ff ff       	call   c0026a12 <PIC::ioWait()>
c0026c13:	83 c4 10             	add    esp,0x10
c0026c16:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026c1c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026c20:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026c23:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026c26:	ee                   	out    dx,al
c0026c27:	83 ec 0c             	sub    esp,0xc
c0026c2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c2d:	e8 e0 fd ff ff       	call   c0026a12 <PIC::ioWait()>
c0026c32:	83 c4 10             	add    esp,0x10
c0026c35:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026c3b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026c3f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026c42:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c45:	ee                   	out    dx,al
c0026c46:	83 ec 0c             	sub    esp,0xc
c0026c49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c4c:	e8 c1 fd ff ff       	call   c0026a12 <PIC::ioWait()>
c0026c51:	83 c4 10             	add    esp,0x10
c0026c54:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026c58:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026c5e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026c61:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026c64:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026c67:	ee                   	out    dx,al
c0026c68:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026c6c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026c72:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026c75:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026c78:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026c7b:	ee                   	out    dx,al
c0026c7c:	90                   	nop
c0026c7d:	c9                   	leave  
c0026c7e:	c3                   	ret    
c0026c7f:	90                   	nop

c0026c80 <PIC::open(int, int, void*)>:
c0026c80:	55                   	push   ebp
c0026c81:	89 e5                	mov    ebp,esp
c0026c83:	83 ec 18             	sub    esp,0x18
c0026c86:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026c8c:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026c90:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026c93:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026c97:	ee                   	out    dx,al
c0026c98:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026c9e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026ca2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026ca5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026ca9:	ee                   	out    dx,al
c0026caa:	83 ec 0c             	sub    esp,0xc
c0026cad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026cb0:	e8 5f fe ff ff       	call   c0026b14 <PIC::remap()>
c0026cb5:	83 c4 10             	add    esp,0x10
c0026cb8:	b8 00 00 00 00       	mov    eax,0x0
c0026cbd:	c9                   	leave  
c0026cbe:	c3                   	ret    
c0026cbf:	90                   	nop

c0026cc0 <APICTimer::close(int, int, void*)>:
c0026cc0:	b8 00 00 00 00       	mov    eax,0x0
c0026cc5:	c3                   	ret    

c0026cc6 <apicTimerHandler(regs*, void*)>:
c0026cc6:	83 ec 0c             	sub    esp,0xc
c0026cc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ccf:	99                   	cdq    
c0026cd0:	52                   	push   edx
c0026cd1:	50                   	push   eax
c0026cd2:	6a 00                	push   0x0
c0026cd4:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026cd9:	e8 96 07 00 00       	call   c0027474 <__udivdi3>
c0026cde:	83 c4 10             	add    esp,0x10
c0026ce1:	83 ec 08             	sub    esp,0x8
c0026ce4:	52                   	push   edx
c0026ce5:	50                   	push   eax
c0026ce6:	e8 62 fd fe ff       	call   c0016a4d <timerHandler(unsigned long long)>
c0026ceb:	83 c4 10             	add    esp,0x10
c0026cee:	90                   	nop
c0026cef:	83 c4 0c             	add    esp,0xc
c0026cf2:	c3                   	ret    
c0026cf3:	90                   	nop

c0026cf4 <APICTimer::write(int)>:
c0026cf4:	53                   	push   ebx
c0026cf5:	83 ec 28             	sub    esp,0x28
c0026cf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026cfc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026d00:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026d06:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0026d0b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026d11:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026d17:	83 ec 0c             	sub    esp,0xc
c0026d1a:	50                   	push   eax
c0026d1b:	e8 de f4 ff ff       	call   c00261fe <APIC::getBase()>
c0026d20:	83 c4 10             	add    esp,0x10
c0026d23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026d27:	a1 30 f8 02 c0       	mov    eax,ds:0xc002f830
c0026d2c:	8b 15 34 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f834
c0026d32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026d36:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026d3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d3e:	05 e0 03 00 00       	add    eax,0x3e0
c0026d43:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026d49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d4d:	05 80 03 00 00       	add    eax,0x380
c0026d52:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026d58:	fb                   	sti    
c0026d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026d61:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026d66:	83 d2 00             	adc    edx,0x0
c0026d69:	89 c1                	mov    ecx,eax
c0026d6b:	89 d3                	mov    ebx,edx
c0026d6d:	a1 30 f8 02 c0       	mov    eax,ds:0xc002f830
c0026d72:	8b 15 34 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f834
c0026d78:	39 c8                	cmp    eax,ecx
c0026d7a:	89 d0                	mov    eax,edx
c0026d7c:	19 d8                	sbb    eax,ebx
c0026d7e:	73 02                	jae    c0026d82 <APICTimer::write(int)+0x8e>
c0026d80:	eb d7                	jmp    c0026d59 <APICTimer::write(int)+0x65>
c0026d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d86:	05 20 03 00 00       	add    eax,0x320
c0026d8b:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026d91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d95:	05 90 03 00 00       	add    eax,0x390
c0026d9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d9c:	f7 d0                	not    eax
c0026d9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026da2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026da6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026daa:	ba 00 00 00 00       	mov    edx,0x0
c0026daf:	f7 f3                	div    ebx
c0026db1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026db5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026db9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026dbf:	0d 00 00 02 00       	or     eax,0x20000
c0026dc4:	89 c2                	mov    edx,eax
c0026dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026dca:	05 20 03 00 00       	add    eax,0x320
c0026dcf:	89 10                	mov    DWORD PTR [eax],edx
c0026dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026dd5:	05 e0 03 00 00       	add    eax,0x3e0
c0026dda:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026de4:	05 80 03 00 00       	add    eax,0x380
c0026de9:	89 c2                	mov    edx,eax
c0026deb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026def:	89 02                	mov    DWORD PTR [edx],eax
c0026df1:	90                   	nop
c0026df2:	83 c4 28             	add    esp,0x28
c0026df5:	5b                   	pop    ebx
c0026df6:	c3                   	ret    
c0026df7:	90                   	nop

c0026df8 <APICTimer::open(int, int, void*)>:
c0026df8:	57                   	push   edi
c0026df9:	56                   	push   esi
c0026dfa:	53                   	push   ebx
c0026dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dff:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e01:	83 c0 24             	add    eax,0x24
c0026e04:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e06:	83 ec 08             	sub    esp,0x8
c0026e09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e11:	ff d0                	call   eax
c0026e13:	83 c4 10             	add    esp,0x10
c0026e16:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0026e1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026e21:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026e27:	83 ec 0c             	sub    esp,0xc
c0026e2a:	50                   	push   eax
c0026e2b:	e8 ce f3 ff ff       	call   c00261fe <APIC::getBase()>
c0026e30:	83 c4 10             	add    esp,0x10
c0026e33:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e3d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026e43:	0f b6 f8             	movzx  edi,al
c0026e46:	89 d0                	mov    eax,edx
c0026e48:	ba 00 00 00 00       	mov    edx,0x0
c0026e4d:	89 c1                	mov    ecx,eax
c0026e4f:	80 e5 ff             	and    ch,0xff
c0026e52:	89 cb                	mov    ebx,ecx
c0026e54:	0f b6 f2             	movzx  esi,dl
c0026e57:	89 d8                	mov    eax,ebx
c0026e59:	89 f2                	mov    edx,esi
c0026e5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e5f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026e62:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026e66:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026e6a:	83 e0 00             	and    eax,0x0
c0026e6d:	09 d0                	or     eax,edx
c0026e6f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e77:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026e7d:	8d 50 01             	lea    edx,[eax+0x1]
c0026e80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e84:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026e8a:	0f b6 d0             	movzx  edx,al
c0026e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e91:	83 c2 08             	add    edx,0x8
c0026e94:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026e98:	0f b6 c9             	movzx  ecx,cl
c0026e9b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026ea1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ea9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026ead:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026ebb:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026ec1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026ec5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026ecb:	83 ec 0c             	sub    esp,0xc
c0026ece:	51                   	push   ecx
c0026ecf:	6a 01                	push   0x1
c0026ed1:	68 c6 6c 02 c0       	push   0xc0026cc6
c0026ed6:	52                   	push   edx
c0026ed7:	50                   	push   eax
c0026ed8:	e8 db cf fe ff       	call   c0013eb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026edd:	83 c4 20             	add    esp,0x20
c0026ee0:	89 c2                	mov    edx,eax
c0026ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ee6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026eec:	b8 00 00 00 00       	mov    eax,0x0
c0026ef1:	5b                   	pop    ebx
c0026ef2:	5e                   	pop    esi
c0026ef3:	5f                   	pop    edi
c0026ef4:	c3                   	ret    
c0026ef5:	90                   	nop

c0026ef6 <APICTimer::APICTimer()>:
c0026ef6:	83 ec 0c             	sub    esp,0xc
c0026ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026efd:	83 ec 08             	sub    esp,0x8
c0026f00:	68 38 e0 02 c0       	push   0xc002e038
c0026f05:	50                   	push   eax
c0026f06:	e8 b3 fa fe ff       	call   c00169be <Timer::Timer(char const*)>
c0026f0b:	83 c4 10             	add    esp,0x10
c0026f0e:	ba 4c e0 02 c0       	mov    edx,0xc002e04c
c0026f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f17:	89 10                	mov    DWORD PTR [eax],edx
c0026f19:	90                   	nop
c0026f1a:	83 c4 0c             	add    esp,0xc
c0026f1d:	c3                   	ret    

c0026f1e <PIT::write(int)>:
c0026f1e:	83 ec 10             	sub    esp,0x10
c0026f21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f25:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026f29:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026f2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026f33:	a3 64 35 03 c0       	mov    ds:0xc0033564,eax
c0026f38:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026f3d:	99                   	cdq    
c0026f3e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026f42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026f46:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026f4d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026f52:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026f56:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026f5b:	ee                   	out    dx,al
c0026f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f60:	0f b6 c0             	movzx  eax,al
c0026f63:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026f6a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026f6e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026f72:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026f77:	ee                   	out    dx,al
c0026f78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f7c:	c1 f8 08             	sar    eax,0x8
c0026f7f:	0f b6 c0             	movzx  eax,al
c0026f82:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026f89:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026f8d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026f91:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026f96:	ee                   	out    dx,al
c0026f97:	90                   	nop
c0026f98:	83 c4 10             	add    esp,0x10
c0026f9b:	c3                   	ret    

c0026f9c <pitHandler(regs*, void*)>:
c0026f9c:	83 ec 0c             	sub    esp,0xc
c0026f9f:	a1 64 35 03 c0       	mov    eax,ds:0xc0033564
c0026fa4:	99                   	cdq    
c0026fa5:	52                   	push   edx
c0026fa6:	50                   	push   eax
c0026fa7:	6a 00                	push   0x0
c0026fa9:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026fae:	e8 c1 04 00 00       	call   c0027474 <__udivdi3>
c0026fb3:	83 c4 10             	add    esp,0x10
c0026fb6:	83 ec 08             	sub    esp,0x8
c0026fb9:	52                   	push   edx
c0026fba:	50                   	push   eax
c0026fbb:	e8 8d fa fe ff       	call   c0016a4d <timerHandler(unsigned long long)>
c0026fc0:	83 c4 10             	add    esp,0x10
c0026fc3:	90                   	nop
c0026fc4:	83 c4 0c             	add    esp,0xc
c0026fc7:	c3                   	ret    

c0026fc8 <PIT::open(int, int, void*)>:
c0026fc8:	83 ec 0c             	sub    esp,0xc
c0026fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fd1:	83 c0 24             	add    eax,0x24
c0026fd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fd6:	83 ec 08             	sub    esp,0x8
c0026fd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fe1:	ff d0                	call   eax
c0026fe3:	83 c4 10             	add    esp,0x10
c0026fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fea:	83 ec 0c             	sub    esp,0xc
c0026fed:	6a 00                	push   0x0
c0026fef:	6a 01                	push   0x1
c0026ff1:	68 9c 6f 02 c0       	push   0xc0026f9c
c0026ff6:	6a 00                	push   0x0
c0026ff8:	50                   	push   eax
c0026ff9:	e8 ba ce fe ff       	call   c0013eb8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026ffe:	83 c4 20             	add    esp,0x20
c0027001:	89 c2                	mov    edx,eax
c0027003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027007:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002700d:	b8 00 00 00 00       	mov    eax,0x0
c0027012:	83 c4 0c             	add    esp,0xc
c0027015:	c3                   	ret    

c0027016 <PIT::close(int, int, void*)>:
c0027016:	83 ec 0c             	sub    esp,0xc
c0027019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002701d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0027027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002702b:	6a 01                	push   0x1
c002702d:	68 9c 6f 02 c0       	push   0xc0026f9c
c0027032:	6a 00                	push   0x0
c0027034:	50                   	push   eax
c0027035:	e8 c8 ce fe ff       	call   c0013f02 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002703a:	83 c4 10             	add    esp,0x10
c002703d:	b8 00 00 00 00       	mov    eax,0x0
c0027042:	83 c4 0c             	add    esp,0xc
c0027045:	c3                   	ret    

c0027046 <PIT::PIT()>:
c0027046:	83 ec 0c             	sub    esp,0xc
c0027049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002704d:	83 ec 08             	sub    esp,0x8
c0027050:	68 74 e0 02 c0       	push   0xc002e074
c0027055:	50                   	push   eax
c0027056:	e8 63 f9 fe ff       	call   c00169be <Timer::Timer(char const*)>
c002705b:	83 c4 10             	add    esp,0x10
c002705e:	ba 9c e0 02 c0       	mov    edx,0xc002e09c
c0027063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027067:	89 10                	mov    DWORD PTR [eax],edx
c0027069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002706d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027073:	0f b6 d0             	movzx  edx,al
c0027076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002707a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0027081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027085:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002708b:	0f b6 d0             	movzx  edx,al
c002708e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027092:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0027097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002709b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00270a1:	8d 50 01             	lea    edx,[eax+0x1]
c00270a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270a8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00270ae:	0f b6 d0             	movzx  edx,al
c00270b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270b5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00270b9:	83 e1 3f             	and    ecx,0x3f
c00270bc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00270c0:	90                   	nop
c00270c1:	83 c4 0c             	add    esp,0xc
c00270c4:	c3                   	ret    
c00270c5:	66 90                	xchg   ax,ax
c00270c7:	66 90                	xchg   ax,ax
c00270c9:	66 90                	xchg   ax,ax
c00270cb:	66 90                	xchg   ax,ax
c00270cd:	66 90                	xchg   ax,ax
c00270cf:	90                   	nop

c00270d0 <avxDetect>:
c00270d0:	b8 00 00 00 00       	mov    eax,0x0
c00270d5:	c3                   	ret    

c00270d6 <avxSave>:
c00270d6:	c3                   	ret    

c00270d7 <avxLoad>:
c00270d7:	c3                   	ret    

c00270d8 <avxInit>:
c00270d8:	c3                   	ret    

c00270d9 <avxClose>:
c00270d9:	c3                   	ret    

c00270da <wouldSheSayYes>:
c00270da:	c3                   	ret    
c00270db:	49                   	dec    ecx
c00270dc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00270e0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00270e4:	75 20                	jne    c0027106 <sseDetect.noSSE+0x1>
c00270e6:	4e                   	dec    esi
c00270e7:	79 61                	jns    c002714a <x87Detect+0x14>
c00270e9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00270ee:	66 90                	xchg   ax,ax

c00270f0 <absolutelyNoChanceInHell>:
c00270f0:	b8 01 00 00 00       	mov    eax,0x1
c00270f5:	0f a2                	cpuid  
c00270f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00270fd:	74 06                	je     c0027105 <sseDetect.noSSE>
c00270ff:	b8 01 00 00 00       	mov    eax,0x1
c0027104:	c3                   	ret    

c0027105 <sseDetect.noSSE>:
c0027105:	31 c0                	xor    eax,eax
c0027107:	c3                   	ret    

c0027108 <sseSave>:
c0027108:	0f ae 44 24 04       	fxsave [esp+0x4]
c002710d:	c3                   	ret    

c002710e <sseLoad>:
c002710e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0027113:	c3                   	ret    

c0027114 <sseInit>:
c0027114:	e8 49 00 00 00       	call   c0027162 <x87Init>
c0027119:	0f 20 e0             	mov    eax,cr4
c002711c:	66 0d 00 06          	or     ax,0x600
c0027120:	0f 22 e0             	mov    cr4,eax
c0027123:	c3                   	ret    

c0027124 <sseClose>:
c0027124:	c3                   	ret    
c0027125:	66 90                	xchg   ax,ax
c0027127:	66 90                	xchg   ax,ax
c0027129:	66 90                	xchg   ax,ax
c002712b:	66 90                	xchg   ax,ax
c002712d:	66 90                	xchg   ax,ax
c002712f:	90                   	nop

c0027130 <value_37F>:
c0027130:	7f 03                	jg     c0027135 <value_37A+0x1>

c0027132 <value_37E>:
c0027132:	7e 03                	jle    c0027137 <x87Detect+0x1>

c0027134 <value_37A>:
c0027134:	7a 03                	jp     c0027139 <x87Detect+0x3>

c0027136 <x87Detect>:
c0027136:	b8 01 00 00 00       	mov    eax,0x1
c002713b:	0f a2                	cpuid  
c002713d:	f7 c2 01 00 00 00    	test   edx,0x1
c0027143:	74 06                	je     c002714b <x87Detect.nox87>
c0027145:	b8 01 00 00 00       	mov    eax,0x1
c002714a:	c3                   	ret    

c002714b <x87Detect.nox87>:
c002714b:	b8 00 00 00 00       	mov    eax,0x0
c0027150:	c3                   	ret    

c0027151 <x87Save>:
c0027151:	55                   	push   ebp
c0027152:	89 e5                	mov    ebp,esp
c0027154:	9b dd 75 08          	fsave  [ebp+0x8]
c0027158:	c9                   	leave  
c0027159:	c3                   	ret    

c002715a <x87Load>:
c002715a:	55                   	push   ebp
c002715b:	89 e5                	mov    ebp,esp
c002715d:	dd 65 08             	frstor [ebp+0x8]
c0027160:	c9                   	leave  
c0027161:	c3                   	ret    

c0027162 <x87Init>:
c0027162:	9b db e3             	finit  
c0027165:	0f 20 c0             	mov    eax,cr0
c0027168:	66 25 fb ff          	and    ax,0xfffb
c002716c:	66 0d 22 00          	or     ax,0x22
c0027170:	0f 22 c0             	mov    cr0,eax
c0027173:	0f 06                	clts   
c0027175:	d9 2d 34 71 02 c0    	fldcw  WORD PTR ds:0xc0027134
c002717b:	c3                   	ret    

c002717c <x87Close>:
c002717c:	c3                   	ret    
c002717d:	66 90                	xchg   ax,ax
c002717f:	90                   	nop

c0027180 <__do_global_ctors_aux>:
c0027180:	a1 b8 9d 02 c0       	mov    eax,ds:0xc0029db8
c0027185:	83 f8 ff             	cmp    eax,0xffffffff
c0027188:	74 1a                	je     c00271a4 <__do_global_ctors_aux+0x24>
c002718a:	55                   	push   ebp
c002718b:	89 e5                	mov    ebp,esp
c002718d:	53                   	push   ebx
c002718e:	52                   	push   edx
c002718f:	bb b8 9d 02 c0       	mov    ebx,0xc0029db8
c0027194:	ff d0                	call   eax
c0027196:	83 eb 04             	sub    ebx,0x4
c0027199:	8b 03                	mov    eax,DWORD PTR [ebx]
c002719b:	83 f8 ff             	cmp    eax,0xffffffff
c002719e:	75 f4                	jne    c0027194 <__do_global_ctors_aux+0x14>
c00271a0:	58                   	pop    eax
c00271a1:	5b                   	pop    ebx
c00271a2:	5d                   	pop    ebp
c00271a3:	c3                   	ret    
c00271a4:	c3                   	ret    
c00271a5:	66 90                	xchg   ax,ax
c00271a7:	90                   	nop

c00271a8 <__divdi3>:
c00271a8:	55                   	push   ebp
c00271a9:	57                   	push   edi
c00271aa:	56                   	push   esi
c00271ab:	53                   	push   ebx
c00271ac:	83 ec 1c             	sub    esp,0x1c
c00271af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00271b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00271b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00271ba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00271be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00271c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00271c6:	85 db                	test   ebx,ebx
c00271c8:	0f 88 8e 00 00 00    	js     c002725c <__divdi3+0xb4>
c00271ce:	89 dd                	mov    ebp,ebx
c00271d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00271d8:	89 d3                	mov    ebx,edx
c00271da:	85 d2                	test   edx,edx
c00271dc:	79 0d                	jns    c00271eb <__divdi3+0x43>
c00271de:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00271e2:	f7 d8                	neg    eax
c00271e4:	83 d2 00             	adc    edx,0x0
c00271e7:	f7 da                	neg    edx
c00271e9:	89 d3                	mov    ebx,edx
c00271eb:	89 c7                	mov    edi,eax
c00271ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00271f0:	85 db                	test   ebx,ebx
c00271f2:	75 48                	jne    c002723c <__divdi3+0x94>
c00271f4:	39 ef                	cmp    edi,ebp
c00271f6:	76 24                	jbe    c002721c <__divdi3+0x74>
c00271f8:	89 ea                	mov    edx,ebp
c00271fa:	f7 f7                	div    edi
c00271fc:	89 c1                	mov    ecx,eax
c00271fe:	31 f6                	xor    esi,esi
c0027200:	89 c8                	mov    eax,ecx
c0027202:	89 f2                	mov    edx,esi
c0027204:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027208:	85 c9                	test   ecx,ecx
c002720a:	74 07                	je     c0027213 <__divdi3+0x6b>
c002720c:	f7 d8                	neg    eax
c002720e:	83 d2 00             	adc    edx,0x0
c0027211:	f7 da                	neg    edx
c0027213:	83 c4 1c             	add    esp,0x1c
c0027216:	5b                   	pop    ebx
c0027217:	5e                   	pop    esi
c0027218:	5f                   	pop    edi
c0027219:	5d                   	pop    ebp
c002721a:	c3                   	ret    
c002721b:	90                   	nop
c002721c:	85 ff                	test   edi,edi
c002721e:	75 0b                	jne    c002722b <__divdi3+0x83>
c0027220:	b8 01 00 00 00       	mov    eax,0x1
c0027225:	31 d2                	xor    edx,edx
c0027227:	f7 f3                	div    ebx
c0027229:	89 c7                	mov    edi,eax
c002722b:	31 d2                	xor    edx,edx
c002722d:	89 e8                	mov    eax,ebp
c002722f:	f7 f7                	div    edi
c0027231:	89 c6                	mov    esi,eax
c0027233:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027236:	f7 f7                	div    edi
c0027238:	89 c1                	mov    ecx,eax
c002723a:	eb c4                	jmp    c0027200 <__divdi3+0x58>
c002723c:	39 eb                	cmp    ebx,ebp
c002723e:	77 3c                	ja     c002727c <__divdi3+0xd4>
c0027240:	0f bd f3             	bsr    esi,ebx
c0027243:	83 f6 1f             	xor    esi,0x1f
c0027246:	75 40                	jne    c0027288 <__divdi3+0xe0>
c0027248:	39 eb                	cmp    ebx,ebp
c002724a:	72 09                	jb     c0027255 <__divdi3+0xad>
c002724c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002724f:	0f 87 97 00 00 00    	ja     c00272ec <__divdi3+0x144>
c0027255:	b9 01 00 00 00       	mov    ecx,0x1
c002725a:	eb a4                	jmp    c0027200 <__divdi3+0x58>
c002725c:	f7 d9                	neg    ecx
c002725e:	83 d3 00             	adc    ebx,0x0
c0027261:	f7 db                	neg    ebx
c0027263:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027266:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002726a:	89 dd                	mov    ebp,ebx
c002726c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027274:	e9 5f ff ff ff       	jmp    c00271d8 <__divdi3+0x30>
c0027279:	8d 76 00             	lea    esi,[esi+0x0]
c002727c:	31 f6                	xor    esi,esi
c002727e:	31 c9                	xor    ecx,ecx
c0027280:	e9 7b ff ff ff       	jmp    c0027200 <__divdi3+0x58>
c0027285:	8d 76 00             	lea    esi,[esi+0x0]
c0027288:	b8 20 00 00 00       	mov    eax,0x20
c002728d:	29 f0                	sub    eax,esi
c002728f:	89 f1                	mov    ecx,esi
c0027291:	d3 e3                	shl    ebx,cl
c0027293:	89 fa                	mov    edx,edi
c0027295:	88 c1                	mov    cl,al
c0027297:	d3 ea                	shr    edx,cl
c0027299:	09 da                	or     edx,ebx
c002729b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002729f:	89 f1                	mov    ecx,esi
c00272a1:	d3 e7                	shl    edi,cl
c00272a3:	89 eb                	mov    ebx,ebp
c00272a5:	88 c1                	mov    cl,al
c00272a7:	d3 eb                	shr    ebx,cl
c00272a9:	89 f1                	mov    ecx,esi
c00272ab:	d3 e5                	shl    ebp,cl
c00272ad:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00272b0:	88 c1                	mov    cl,al
c00272b2:	d3 ea                	shr    edx,cl
c00272b4:	09 d5                	or     ebp,edx
c00272b6:	89 e8                	mov    eax,ebp
c00272b8:	89 da                	mov    edx,ebx
c00272ba:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00272be:	89 d3                	mov    ebx,edx
c00272c0:	89 c5                	mov    ebp,eax
c00272c2:	f7 e7                	mul    edi
c00272c4:	39 d3                	cmp    ebx,edx
c00272c6:	72 18                	jb     c00272e0 <__divdi3+0x138>
c00272c8:	74 0a                	je     c00272d4 <__divdi3+0x12c>
c00272ca:	89 e9                	mov    ecx,ebp
c00272cc:	31 f6                	xor    esi,esi
c00272ce:	e9 2d ff ff ff       	jmp    c0027200 <__divdi3+0x58>
c00272d3:	90                   	nop
c00272d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00272d7:	89 f1                	mov    ecx,esi
c00272d9:	d3 e7                	shl    edi,cl
c00272db:	39 c7                	cmp    edi,eax
c00272dd:	73 eb                	jae    c00272ca <__divdi3+0x122>
c00272df:	90                   	nop
c00272e0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00272e3:	31 f6                	xor    esi,esi
c00272e5:	e9 16 ff ff ff       	jmp    c0027200 <__divdi3+0x58>
c00272ea:	66 90                	xchg   ax,ax
c00272ec:	31 c9                	xor    ecx,ecx
c00272ee:	e9 0d ff ff ff       	jmp    c0027200 <__divdi3+0x58>
c00272f3:	90                   	nop

c00272f4 <__moddi3>:
c00272f4:	55                   	push   ebp
c00272f5:	57                   	push   edi
c00272f6:	56                   	push   esi
c00272f7:	53                   	push   ebx
c00272f8:	83 ec 2c             	sub    esp,0x2c
c00272fb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00272ff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027303:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027307:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002730b:	85 db                	test   ebx,ebx
c002730d:	0f 88 85 00 00 00    	js     c0027398 <__moddi3+0xa4>
c0027313:	89 de                	mov    esi,ebx
c0027315:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002731d:	89 d7                	mov    edi,edx
c002731f:	85 d2                	test   edx,edx
c0027321:	79 09                	jns    c002732c <__moddi3+0x38>
c0027323:	f7 d8                	neg    eax
c0027325:	83 d2 00             	adc    edx,0x0
c0027328:	f7 da                	neg    edx
c002732a:	89 d7                	mov    edi,edx
c002732c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027330:	89 cd                	mov    ebp,ecx
c0027332:	85 ff                	test   edi,edi
c0027334:	75 52                	jne    c0027388 <__moddi3+0x94>
c0027336:	89 c3                	mov    ebx,eax
c0027338:	39 f0                	cmp    eax,esi
c002733a:	76 24                	jbe    c0027360 <__moddi3+0x6c>
c002733c:	89 c8                	mov    eax,ecx
c002733e:	89 f2                	mov    edx,esi
c0027340:	f7 f3                	div    ebx
c0027342:	89 d6                	mov    esi,edx
c0027344:	89 f0                	mov    eax,esi
c0027346:	31 d2                	xor    edx,edx
c0027348:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002734c:	85 c9                	test   ecx,ecx
c002734e:	74 07                	je     c0027357 <__moddi3+0x63>
c0027350:	f7 d8                	neg    eax
c0027352:	83 d2 00             	adc    edx,0x0
c0027355:	f7 da                	neg    edx
c0027357:	83 c4 2c             	add    esp,0x2c
c002735a:	5b                   	pop    ebx
c002735b:	5e                   	pop    esi
c002735c:	5f                   	pop    edi
c002735d:	5d                   	pop    ebp
c002735e:	c3                   	ret    
c002735f:	90                   	nop
c0027360:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027364:	85 db                	test   ebx,ebx
c0027366:	75 0d                	jne    c0027375 <__moddi3+0x81>
c0027368:	b8 01 00 00 00       	mov    eax,0x1
c002736d:	31 d2                	xor    edx,edx
c002736f:	f7 f7                	div    edi
c0027371:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027375:	89 f0                	mov    eax,esi
c0027377:	31 d2                	xor    edx,edx
c0027379:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002737d:	f7 f7                	div    edi
c002737f:	89 e8                	mov    eax,ebp
c0027381:	f7 f7                	div    edi
c0027383:	89 d6                	mov    esi,edx
c0027385:	eb bd                	jmp    c0027344 <__moddi3+0x50>
c0027387:	90                   	nop
c0027388:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002738c:	39 f7                	cmp    edi,esi
c002738e:	76 20                	jbe    c00273b0 <__moddi3+0xbc>
c0027390:	89 c8                	mov    eax,ecx
c0027392:	89 f2                	mov    edx,esi
c0027394:	eb b2                	jmp    c0027348 <__moddi3+0x54>
c0027396:	66 90                	xchg   ax,ax
c0027398:	f7 d9                	neg    ecx
c002739a:	83 d3 00             	adc    ebx,0x0
c002739d:	f7 db                	neg    ebx
c002739f:	89 de                	mov    esi,ebx
c00273a1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00273a9:	e9 6f ff ff ff       	jmp    c002731d <__moddi3+0x29>
c00273ae:	66 90                	xchg   ax,ax
c00273b0:	0f bd c7             	bsr    eax,edi
c00273b3:	83 f0 1f             	xor    eax,0x1f
c00273b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00273ba:	75 24                	jne    c00273e0 <__moddi3+0xec>
c00273bc:	39 f7                	cmp    edi,esi
c00273be:	72 06                	jb     c00273c6 <__moddi3+0xd2>
c00273c0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00273c4:	77 0c                	ja     c00273d2 <__moddi3+0xde>
c00273c6:	89 e9                	mov    ecx,ebp
c00273c8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00273cc:	19 fe                	sbb    esi,edi
c00273ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00273d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00273d6:	89 f2                	mov    edx,esi
c00273d8:	e9 6b ff ff ff       	jmp    c0027348 <__moddi3+0x54>
c00273dd:	8d 76 00             	lea    esi,[esi+0x0]
c00273e0:	b8 20 00 00 00       	mov    eax,0x20
c00273e5:	89 c2                	mov    edx,eax
c00273e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00273eb:	29 da                	sub    edx,ebx
c00273ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00273f1:	88 d9                	mov    cl,bl
c00273f3:	d3 e7                	shl    edi,cl
c00273f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00273f9:	88 d1                	mov    cl,dl
c00273fb:	d3 e8                	shr    eax,cl
c00273fd:	09 c7                	or     edi,eax
c00273ff:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027403:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027407:	89 d8                	mov    eax,ebx
c0027409:	88 d9                	mov    cl,bl
c002740b:	d3 e7                	shl    edi,cl
c002740d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027411:	89 f3                	mov    ebx,esi
c0027413:	88 d1                	mov    cl,dl
c0027415:	d3 eb                	shr    ebx,cl
c0027417:	89 c7                	mov    edi,eax
c0027419:	88 c1                	mov    cl,al
c002741b:	d3 e6                	shl    esi,cl
c002741d:	89 e8                	mov    eax,ebp
c002741f:	88 d1                	mov    cl,dl
c0027421:	d3 e8                	shr    eax,cl
c0027423:	09 f0                	or     eax,esi
c0027425:	89 f9                	mov    ecx,edi
c0027427:	d3 e5                	shl    ebp,cl
c0027429:	89 da                	mov    edx,ebx
c002742b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002742f:	89 d3                	mov    ebx,edx
c0027431:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027435:	89 c6                	mov    esi,eax
c0027437:	89 d1                	mov    ecx,edx
c0027439:	39 d3                	cmp    ebx,edx
c002743b:	72 27                	jb     c0027464 <__moddi3+0x170>
c002743d:	74 21                	je     c0027460 <__moddi3+0x16c>
c002743f:	29 f5                	sub    ebp,esi
c0027441:	19 cb                	sbb    ebx,ecx
c0027443:	89 de                	mov    esi,ebx
c0027445:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027449:	d3 e6                	shl    esi,cl
c002744b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002744f:	89 f9                	mov    ecx,edi
c0027451:	d3 ed                	shr    ebp,cl
c0027453:	09 ee                	or     esi,ebp
c0027455:	89 f0                	mov    eax,esi
c0027457:	d3 eb                	shr    ebx,cl
c0027459:	89 da                	mov    edx,ebx
c002745b:	e9 e8 fe ff ff       	jmp    c0027348 <__moddi3+0x54>
c0027460:	39 c5                	cmp    ebp,eax
c0027462:	73 db                	jae    c002743f <__moddi3+0x14b>
c0027464:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027468:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002746c:	89 d1                	mov    ecx,edx
c002746e:	89 c6                	mov    esi,eax
c0027470:	eb cd                	jmp    c002743f <__moddi3+0x14b>
c0027472:	66 90                	xchg   ax,ax

c0027474 <__udivdi3>:
c0027474:	55                   	push   ebp
c0027475:	57                   	push   edi
c0027476:	56                   	push   esi
c0027477:	53                   	push   ebx
c0027478:	83 ec 1c             	sub    esp,0x1c
c002747b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002747f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027483:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027487:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002748b:	85 d2                	test   edx,edx
c002748d:	75 41                	jne    c00274d0 <__udivdi3+0x5c>
c002748f:	39 f7                	cmp    edi,esi
c0027491:	76 15                	jbe    c00274a8 <__udivdi3+0x34>
c0027493:	89 e8                	mov    eax,ebp
c0027495:	89 f2                	mov    edx,esi
c0027497:	f7 f7                	div    edi
c0027499:	31 db                	xor    ebx,ebx
c002749b:	89 da                	mov    edx,ebx
c002749d:	83 c4 1c             	add    esp,0x1c
c00274a0:	5b                   	pop    ebx
c00274a1:	5e                   	pop    esi
c00274a2:	5f                   	pop    edi
c00274a3:	5d                   	pop    ebp
c00274a4:	c3                   	ret    
c00274a5:	8d 76 00             	lea    esi,[esi+0x0]
c00274a8:	89 f9                	mov    ecx,edi
c00274aa:	85 ff                	test   edi,edi
c00274ac:	75 0b                	jne    c00274b9 <__udivdi3+0x45>
c00274ae:	b8 01 00 00 00       	mov    eax,0x1
c00274b3:	31 d2                	xor    edx,edx
c00274b5:	f7 f7                	div    edi
c00274b7:	89 c1                	mov    ecx,eax
c00274b9:	31 d2                	xor    edx,edx
c00274bb:	89 f0                	mov    eax,esi
c00274bd:	f7 f1                	div    ecx
c00274bf:	89 c3                	mov    ebx,eax
c00274c1:	89 e8                	mov    eax,ebp
c00274c3:	f7 f1                	div    ecx
c00274c5:	89 da                	mov    edx,ebx
c00274c7:	83 c4 1c             	add    esp,0x1c
c00274ca:	5b                   	pop    ebx
c00274cb:	5e                   	pop    esi
c00274cc:	5f                   	pop    edi
c00274cd:	5d                   	pop    ebp
c00274ce:	c3                   	ret    
c00274cf:	90                   	nop
c00274d0:	39 f2                	cmp    edx,esi
c00274d2:	77 1c                	ja     c00274f0 <__udivdi3+0x7c>
c00274d4:	0f bd da             	bsr    ebx,edx
c00274d7:	83 f3 1f             	xor    ebx,0x1f
c00274da:	75 24                	jne    c0027500 <__udivdi3+0x8c>
c00274dc:	39 f2                	cmp    edx,esi
c00274de:	72 08                	jb     c00274e8 <__udivdi3+0x74>
c00274e0:	39 ef                	cmp    edi,ebp
c00274e2:	0f 87 84 00 00 00    	ja     c002756c <__udivdi3+0xf8>
c00274e8:	b8 01 00 00 00       	mov    eax,0x1
c00274ed:	eb ac                	jmp    c002749b <__udivdi3+0x27>
c00274ef:	90                   	nop
c00274f0:	31 db                	xor    ebx,ebx
c00274f2:	31 c0                	xor    eax,eax
c00274f4:	89 da                	mov    edx,ebx
c00274f6:	83 c4 1c             	add    esp,0x1c
c00274f9:	5b                   	pop    ebx
c00274fa:	5e                   	pop    esi
c00274fb:	5f                   	pop    edi
c00274fc:	5d                   	pop    ebp
c00274fd:	c3                   	ret    
c00274fe:	66 90                	xchg   ax,ax
c0027500:	b8 20 00 00 00       	mov    eax,0x20
c0027505:	29 d8                	sub    eax,ebx
c0027507:	88 d9                	mov    cl,bl
c0027509:	d3 e2                	shl    edx,cl
c002750b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002750f:	89 fa                	mov    edx,edi
c0027511:	88 c1                	mov    cl,al
c0027513:	d3 ea                	shr    edx,cl
c0027515:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027519:	09 d1                	or     ecx,edx
c002751b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002751f:	88 d9                	mov    cl,bl
c0027521:	d3 e7                	shl    edi,cl
c0027523:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027527:	89 f7                	mov    edi,esi
c0027529:	88 c1                	mov    cl,al
c002752b:	d3 ef                	shr    edi,cl
c002752d:	88 d9                	mov    cl,bl
c002752f:	d3 e6                	shl    esi,cl
c0027531:	89 ea                	mov    edx,ebp
c0027533:	88 c1                	mov    cl,al
c0027535:	d3 ea                	shr    edx,cl
c0027537:	09 d6                	or     esi,edx
c0027539:	89 f0                	mov    eax,esi
c002753b:	89 fa                	mov    edx,edi
c002753d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027541:	89 d7                	mov    edi,edx
c0027543:	89 c6                	mov    esi,eax
c0027545:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027549:	39 d7                	cmp    edi,edx
c002754b:	72 13                	jb     c0027560 <__udivdi3+0xec>
c002754d:	74 09                	je     c0027558 <__udivdi3+0xe4>
c002754f:	89 f0                	mov    eax,esi
c0027551:	31 db                	xor    ebx,ebx
c0027553:	e9 43 ff ff ff       	jmp    c002749b <__udivdi3+0x27>
c0027558:	88 d9                	mov    cl,bl
c002755a:	d3 e5                	shl    ebp,cl
c002755c:	39 c5                	cmp    ebp,eax
c002755e:	73 ef                	jae    c002754f <__udivdi3+0xdb>
c0027560:	8d 46 ff             	lea    eax,[esi-0x1]
c0027563:	31 db                	xor    ebx,ebx
c0027565:	e9 31 ff ff ff       	jmp    c002749b <__udivdi3+0x27>
c002756a:	66 90                	xchg   ax,ax
c002756c:	31 c0                	xor    eax,eax
c002756e:	e9 28 ff ff ff       	jmp    c002749b <__udivdi3+0x27>
c0027573:	90                   	nop

c0027574 <__umoddi3>:
c0027574:	55                   	push   ebp
c0027575:	57                   	push   edi
c0027576:	56                   	push   esi
c0027577:	53                   	push   ebx
c0027578:	83 ec 1c             	sub    esp,0x1c
c002757b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002757f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027583:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027587:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002758b:	89 da                	mov    edx,ebx
c002758d:	85 c0                	test   eax,eax
c002758f:	75 37                	jne    c00275c8 <__umoddi3+0x54>
c0027591:	39 df                	cmp    edi,ebx
c0027593:	76 13                	jbe    c00275a8 <__umoddi3+0x34>
c0027595:	89 f0                	mov    eax,esi
c0027597:	f7 f7                	div    edi
c0027599:	89 d0                	mov    eax,edx
c002759b:	31 d2                	xor    edx,edx
c002759d:	83 c4 1c             	add    esp,0x1c
c00275a0:	5b                   	pop    ebx
c00275a1:	5e                   	pop    esi
c00275a2:	5f                   	pop    edi
c00275a3:	5d                   	pop    ebp
c00275a4:	c3                   	ret    
c00275a5:	8d 76 00             	lea    esi,[esi+0x0]
c00275a8:	89 fd                	mov    ebp,edi
c00275aa:	85 ff                	test   edi,edi
c00275ac:	75 0b                	jne    c00275b9 <__umoddi3+0x45>
c00275ae:	b8 01 00 00 00       	mov    eax,0x1
c00275b3:	31 d2                	xor    edx,edx
c00275b5:	f7 f7                	div    edi
c00275b7:	89 c5                	mov    ebp,eax
c00275b9:	89 d8                	mov    eax,ebx
c00275bb:	31 d2                	xor    edx,edx
c00275bd:	f7 f5                	div    ebp
c00275bf:	89 f0                	mov    eax,esi
c00275c1:	f7 f5                	div    ebp
c00275c3:	89 d0                	mov    eax,edx
c00275c5:	eb d4                	jmp    c002759b <__umoddi3+0x27>
c00275c7:	90                   	nop
c00275c8:	89 f1                	mov    ecx,esi
c00275ca:	39 d8                	cmp    eax,ebx
c00275cc:	76 0a                	jbe    c00275d8 <__umoddi3+0x64>
c00275ce:	89 f0                	mov    eax,esi
c00275d0:	83 c4 1c             	add    esp,0x1c
c00275d3:	5b                   	pop    ebx
c00275d4:	5e                   	pop    esi
c00275d5:	5f                   	pop    edi
c00275d6:	5d                   	pop    ebp
c00275d7:	c3                   	ret    
c00275d8:	0f bd e8             	bsr    ebp,eax
c00275db:	83 f5 1f             	xor    ebp,0x1f
c00275de:	75 1c                	jne    c00275fc <__umoddi3+0x88>
c00275e0:	39 d8                	cmp    eax,ebx
c00275e2:	72 04                	jb     c00275e8 <__umoddi3+0x74>
c00275e4:	39 f7                	cmp    edi,esi
c00275e6:	77 08                	ja     c00275f0 <__umoddi3+0x7c>
c00275e8:	89 da                	mov    edx,ebx
c00275ea:	29 fe                	sub    esi,edi
c00275ec:	19 c2                	sbb    edx,eax
c00275ee:	89 f1                	mov    ecx,esi
c00275f0:	89 c8                	mov    eax,ecx
c00275f2:	83 c4 1c             	add    esp,0x1c
c00275f5:	5b                   	pop    ebx
c00275f6:	5e                   	pop    esi
c00275f7:	5f                   	pop    edi
c00275f8:	5d                   	pop    ebp
c00275f9:	c3                   	ret    
c00275fa:	66 90                	xchg   ax,ax
c00275fc:	ba 20 00 00 00       	mov    edx,0x20
c0027601:	29 ea                	sub    edx,ebp
c0027603:	89 e9                	mov    ecx,ebp
c0027605:	d3 e0                	shl    eax,cl
c0027607:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002760b:	89 f8                	mov    eax,edi
c002760d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027611:	88 d1                	mov    cl,dl
c0027613:	d3 e8                	shr    eax,cl
c0027615:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027619:	09 c1                	or     ecx,eax
c002761b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002761f:	89 e9                	mov    ecx,ebp
c0027621:	d3 e7                	shl    edi,cl
c0027623:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027627:	89 d8                	mov    eax,ebx
c0027629:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002762d:	88 d1                	mov    cl,dl
c002762f:	d3 e8                	shr    eax,cl
c0027631:	89 c7                	mov    edi,eax
c0027633:	89 e9                	mov    ecx,ebp
c0027635:	d3 e3                	shl    ebx,cl
c0027637:	89 f0                	mov    eax,esi
c0027639:	88 d1                	mov    cl,dl
c002763b:	d3 e8                	shr    eax,cl
c002763d:	09 d8                	or     eax,ebx
c002763f:	89 e9                	mov    ecx,ebp
c0027641:	d3 e6                	shl    esi,cl
c0027643:	89 f3                	mov    ebx,esi
c0027645:	89 fa                	mov    edx,edi
c0027647:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002764b:	89 d1                	mov    ecx,edx
c002764d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027651:	89 c6                	mov    esi,eax
c0027653:	89 d7                	mov    edi,edx
c0027655:	39 d1                	cmp    ecx,edx
c0027657:	72 27                	jb     c0027680 <__umoddi3+0x10c>
c0027659:	74 21                	je     c002767c <__umoddi3+0x108>
c002765b:	89 ca                	mov    edx,ecx
c002765d:	29 f3                	sub    ebx,esi
c002765f:	19 fa                	sbb    edx,edi
c0027661:	89 d0                	mov    eax,edx
c0027663:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027667:	d3 e0                	shl    eax,cl
c0027669:	89 e9                	mov    ecx,ebp
c002766b:	d3 eb                	shr    ebx,cl
c002766d:	09 d8                	or     eax,ebx
c002766f:	d3 ea                	shr    edx,cl
c0027671:	83 c4 1c             	add    esp,0x1c
c0027674:	5b                   	pop    ebx
c0027675:	5e                   	pop    esi
c0027676:	5f                   	pop    edi
c0027677:	5d                   	pop    ebp
c0027678:	c3                   	ret    
c0027679:	8d 76 00             	lea    esi,[esi+0x0]
c002767c:	39 c3                	cmp    ebx,eax
c002767e:	73 db                	jae    c002765b <__umoddi3+0xe7>
c0027680:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027684:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027688:	89 d7                	mov    edi,edx
c002768a:	89 c6                	mov    esi,eax
c002768c:	eb cd                	jmp    c002765b <__umoddi3+0xe7>

c002768e <__addsf3>:
c002768e:	55                   	push   ebp
c002768f:	89 e5                	mov    ebp,esp
c0027691:	57                   	push   edi
c0027692:	56                   	push   esi
c0027693:	53                   	push   ebx
c0027694:	83 ec 08             	sub    esp,0x8
c0027697:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002769a:	89 fa                	mov    edx,edi
c002769c:	89 f8                	mov    eax,edi
c002769e:	c1 f8 17             	sar    eax,0x17
c00276a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00276a4:	c1 e2 08             	shl    edx,0x8
c00276a7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00276ad:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00276b0:	89 de                	mov    esi,ebx
c00276b2:	c1 fe 17             	sar    esi,0x17
c00276b5:	c1 e3 08             	shl    ebx,0x8
c00276b8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00276be:	31 f0                	xor    eax,esi
c00276c0:	0f 88 3b 01 00 00    	js     c0027801 <__addsf3+0x173>
c00276c6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00276c9:	29 f1                	sub    ecx,esi
c00276cb:	85 c9                	test   ecx,ecx
c00276cd:	7e 54                	jle    c0027723 <__addsf3+0x95>
c00276cf:	89 f0                	mov    eax,esi
c00276d1:	84 c0                	test   al,al
c00276d3:	75 10                	jne    c00276e5 <__addsf3+0x57>
c00276d5:	85 db                	test   ebx,ebx
c00276d7:	0f 84 aa 02 00 00    	je     c0027987 <__addsf3+0x2f9>
c00276dd:	49                   	dec    ecx
c00276de:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00276e1:	74 38                	je     c002771b <__addsf3+0x8d>
c00276e3:	eb 13                	jmp    c00276f8 <__addsf3+0x6a>
c00276e5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00276e8:	f7 d0                	not    eax
c00276ea:	84 c0                	test   al,al
c00276ec:	0f 84 95 02 00 00    	je     c0027987 <__addsf3+0x2f9>
c00276f2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00276f8:	83 f9 1f             	cmp    ecx,0x1f
c00276fb:	0f 8f 86 02 00 00    	jg     c0027987 <__addsf3+0x2f9>
c0027701:	89 de                	mov    esi,ebx
c0027703:	d3 ee                	shr    esi,cl
c0027705:	b8 20 00 00 00       	mov    eax,0x20
c002770a:	29 c8                	sub    eax,ecx
c002770c:	89 c1                	mov    ecx,eax
c002770e:	d3 e3                	shl    ebx,cl
c0027710:	31 c0                	xor    eax,eax
c0027712:	85 db                	test   ebx,ebx
c0027714:	0f 95 c0             	setne  al
c0027717:	09 f0                	or     eax,esi
c0027719:	01 d0                	add    eax,edx
c002771b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002771e:	e9 b6 00 00 00       	jmp    c00277d9 <__addsf3+0x14b>
c0027723:	74 5c                	je     c0027781 <__addsf3+0xf3>
c0027725:	89 f1                	mov    ecx,esi
c0027727:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002772a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002772d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027731:	75 14                	jne    c0027747 <__addsf3+0xb9>
c0027733:	85 d2                	test   edx,edx
c0027735:	0f 84 4c 02 00 00    	je     c0027987 <__addsf3+0x2f9>
c002773b:	49                   	dec    ecx
c002773c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002773f:	0f 84 94 00 00 00    	je     c00277d9 <__addsf3+0x14b>
c0027745:	eb 12                	jmp    c0027759 <__addsf3+0xcb>
c0027747:	89 f0                	mov    eax,esi
c0027749:	f7 d0                	not    eax
c002774b:	84 c0                	test   al,al
c002774d:	0f 84 34 02 00 00    	je     c0027987 <__addsf3+0x2f9>
c0027753:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027759:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002775c:	83 f9 1f             	cmp    ecx,0x1f
c002775f:	0f 8f 22 02 00 00    	jg     c0027987 <__addsf3+0x2f9>
c0027765:	89 d7                	mov    edi,edx
c0027767:	d3 ef                	shr    edi,cl
c0027769:	b8 20 00 00 00       	mov    eax,0x20
c002776e:	29 c8                	sub    eax,ecx
c0027770:	89 c1                	mov    ecx,eax
c0027772:	d3 e2                	shl    edx,cl
c0027774:	31 c0                	xor    eax,eax
c0027776:	85 d2                	test   edx,edx
c0027778:	0f 95 c0             	setne  al
c002777b:	09 f8                	or     eax,edi
c002777d:	01 d8                	add    eax,ebx
c002777f:	eb 58                	jmp    c00277d9 <__addsf3+0x14b>
c0027781:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027784:	8d 70 01             	lea    esi,[eax+0x1]
c0027787:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002778d:	75 32                	jne    c00277c1 <__addsf3+0x133>
c002778f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027793:	75 1f                	jne    c00277b4 <__addsf3+0x126>
c0027795:	85 d2                	test   edx,edx
c0027797:	0f 84 e0 01 00 00    	je     c002797d <__addsf3+0x2ef>
c002779d:	85 db                	test   ebx,ebx
c002779f:	0f 84 e2 01 00 00    	je     c0027987 <__addsf3+0x2f9>
c00277a5:	89 d0                	mov    eax,edx
c00277a7:	01 d8                	add    eax,ebx
c00277a9:	0f 89 a9 01 00 00    	jns    c0027958 <__addsf3+0x2ca>
c00277af:	e9 9d 01 00 00       	jmp    c0027951 <__addsf3+0x2c3>
c00277b4:	85 d2                	test   edx,edx
c00277b6:	0f 85 cb 01 00 00    	jne    c0027987 <__addsf3+0x2f9>
c00277bc:	e9 bc 01 00 00       	jmp    c002797d <__addsf3+0x2ef>
c00277c1:	31 c0                	xor    eax,eax
c00277c3:	89 f1                	mov    ecx,esi
c00277c5:	f7 d1                	not    ecx
c00277c7:	84 c9                	test   cl,cl
c00277c9:	0f 84 90 01 00 00    	je     c002795f <__addsf3+0x2d1>
c00277cf:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00277d2:	d1 e8                	shr    eax,1
c00277d4:	e9 86 01 00 00       	jmp    c002795f <__addsf3+0x2d1>
c00277d9:	85 c0                	test   eax,eax
c00277db:	0f 89 7e 01 00 00    	jns    c002795f <__addsf3+0x2d1>
c00277e1:	46                   	inc    esi
c00277e2:	89 f2                	mov    edx,esi
c00277e4:	f7 d2                	not    edx
c00277e6:	84 d2                	test   dl,dl
c00277e8:	0f 84 6f 01 00 00    	je     c002795d <__addsf3+0x2cf>
c00277ee:	89 c2                	mov    edx,eax
c00277f0:	83 e2 01             	and    edx,0x1
c00277f3:	d1 e8                	shr    eax,1
c00277f5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277fa:	09 d0                	or     eax,edx
c00277fc:	e9 5e 01 00 00       	jmp    c002795f <__addsf3+0x2d1>
c0027801:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027805:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027808:	89 f0                	mov    eax,esi
c002780a:	0f b6 c0             	movzx  eax,al
c002780d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027810:	29 c1                	sub    ecx,eax
c0027812:	85 c9                	test   ecx,ecx
c0027814:	7e 55                	jle    c002786b <__addsf3+0x1dd>
c0027816:	85 c0                	test   eax,eax
c0027818:	75 11                	jne    c002782b <__addsf3+0x19d>
c002781a:	85 db                	test   ebx,ebx
c002781c:	0f 84 65 01 00 00    	je     c0027987 <__addsf3+0x2f9>
c0027822:	49                   	dec    ecx
c0027823:	75 19                	jne    c002783e <__addsf3+0x1b0>
c0027825:	89 d0                	mov    eax,edx
c0027827:	29 d8                	sub    eax,ebx
c0027829:	eb 38                	jmp    c0027863 <__addsf3+0x1d5>
c002782b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002782e:	f7 d0                	not    eax
c0027830:	84 c0                	test   al,al
c0027832:	0f 84 4f 01 00 00    	je     c0027987 <__addsf3+0x2f9>
c0027838:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002783e:	83 f9 1f             	cmp    ecx,0x1f
c0027841:	0f 8f 40 01 00 00    	jg     c0027987 <__addsf3+0x2f9>
c0027847:	89 de                	mov    esi,ebx
c0027849:	d3 ee                	shr    esi,cl
c002784b:	b8 20 00 00 00       	mov    eax,0x20
c0027850:	29 c8                	sub    eax,ecx
c0027852:	89 c1                	mov    ecx,eax
c0027854:	d3 e3                	shl    ebx,cl
c0027856:	31 c0                	xor    eax,eax
c0027858:	85 db                	test   ebx,ebx
c002785a:	0f 95 c0             	setne  al
c002785d:	09 f0                	or     eax,esi
c002785f:	29 c2                	sub    edx,eax
c0027861:	89 d0                	mov    eax,edx
c0027863:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027866:	e9 af 00 00 00       	jmp    c002791a <__addsf3+0x28c>
c002786b:	74 5c                	je     c00278c9 <__addsf3+0x23b>
c002786d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027870:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027873:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027877:	75 14                	jne    c002788d <__addsf3+0x1ff>
c0027879:	85 d2                	test   edx,edx
c002787b:	0f 84 06 01 00 00    	je     c0027987 <__addsf3+0x2f9>
c0027881:	48                   	dec    eax
c0027882:	75 1b                	jne    c002789f <__addsf3+0x211>
c0027884:	89 d8                	mov    eax,ebx
c0027886:	29 d0                	sub    eax,edx
c0027888:	e9 8d 00 00 00       	jmp    c002791a <__addsf3+0x28c>
c002788d:	89 f1                	mov    ecx,esi
c002788f:	f7 d1                	not    ecx
c0027891:	84 c9                	test   cl,cl
c0027893:	0f 84 ee 00 00 00    	je     c0027987 <__addsf3+0x2f9>
c0027899:	81 ca 00 00 00 80    	or     edx,0x80000000
c002789f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278a2:	83 f8 1f             	cmp    eax,0x1f
c00278a5:	0f 8f dc 00 00 00    	jg     c0027987 <__addsf3+0x2f9>
c00278ab:	89 d7                	mov    edi,edx
c00278ad:	88 c1                	mov    cl,al
c00278af:	d3 ef                	shr    edi,cl
c00278b1:	b9 20 00 00 00       	mov    ecx,0x20
c00278b6:	29 c1                	sub    ecx,eax
c00278b8:	d3 e2                	shl    edx,cl
c00278ba:	31 c0                	xor    eax,eax
c00278bc:	85 d2                	test   edx,edx
c00278be:	0f 95 c0             	setne  al
c00278c1:	09 f8                	or     eax,edi
c00278c3:	29 c3                	sub    ebx,eax
c00278c5:	89 d8                	mov    eax,ebx
c00278c7:	eb 51                	jmp    c002791a <__addsf3+0x28c>
c00278c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00278cc:	40                   	inc    eax
c00278cd:	a8 fe                	test   al,0xfe
c00278cf:	75 3d                	jne    c002790e <__addsf3+0x280>
c00278d1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00278d5:	0f 85 a7 00 00 00    	jne    c0027982 <__addsf3+0x2f4>
c00278db:	85 d2                	test   edx,edx
c00278dd:	75 12                	jne    c00278f1 <__addsf3+0x263>
c00278df:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278e2:	85 db                	test   ebx,ebx
c00278e4:	0f 85 9d 00 00 00    	jne    c0027987 <__addsf3+0x2f9>
c00278ea:	31 ff                	xor    edi,edi
c00278ec:	e9 96 00 00 00       	jmp    c0027987 <__addsf3+0x2f9>
c00278f1:	85 db                	test   ebx,ebx
c00278f3:	0f 84 8e 00 00 00    	je     c0027987 <__addsf3+0x2f9>
c00278f9:	89 d0                	mov    eax,edx
c00278fb:	29 d8                	sub    eax,ebx
c00278fd:	79 06                	jns    c0027905 <__addsf3+0x277>
c00278ff:	89 d8                	mov    eax,ebx
c0027901:	29 d0                	sub    eax,edx
c0027903:	eb 5a                	jmp    c002795f <__addsf3+0x2d1>
c0027905:	bf 00 00 00 00       	mov    edi,0x0
c002790a:	74 7b                	je     c0027987 <__addsf3+0x2f9>
c002790c:	eb 4a                	jmp    c0027958 <__addsf3+0x2ca>
c002790e:	89 d0                	mov    eax,edx
c0027910:	29 d8                	sub    eax,ebx
c0027912:	79 12                	jns    c0027926 <__addsf3+0x298>
c0027914:	89 d8                	mov    eax,ebx
c0027916:	29 d0                	sub    eax,edx
c0027918:	eb 09                	jmp    c0027923 <__addsf3+0x295>
c002791a:	85 c0                	test   eax,eax
c002791c:	79 41                	jns    c002795f <__addsf3+0x2d1>
c002791e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027923:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027926:	31 f6                	xor    esi,esi
c0027928:	85 c0                	test   eax,eax
c002792a:	74 33                	je     c002795f <__addsf3+0x2d1>
c002792c:	0f bd c8             	bsr    ecx,eax
c002792f:	83 f1 1f             	xor    ecx,0x1f
c0027932:	d3 e0                	shl    eax,cl
c0027934:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027938:	39 ca                	cmp    edx,ecx
c002793a:	7f 10                	jg     c002794c <__addsf3+0x2be>
c002793c:	29 d1                	sub    ecx,edx
c002793e:	41                   	inc    ecx
c002793f:	d3 e8                	shr    eax,cl
c0027941:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027944:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002794a:	eb 13                	jmp    c002795f <__addsf3+0x2d1>
c002794c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002794f:	29 ce                	sub    esi,ecx
c0027951:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027956:	eb 07                	jmp    c002795f <__addsf3+0x2d1>
c0027958:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002795b:	eb 02                	jmp    c002795f <__addsf3+0x2d1>
c002795d:	31 c0                	xor    eax,eax
c002795f:	89 c2                	mov    edx,eax
c0027961:	c1 ea 08             	shr    edx,0x8
c0027964:	a8 7f                	test   al,0x7f
c0027966:	0f 95 c1             	setne  cl
c0027969:	09 d1                	or     ecx,edx
c002796b:	83 e1 01             	and    ecx,0x1
c002796e:	c1 e8 07             	shr    eax,0x7
c0027971:	21 c8                	and    eax,ecx
c0027973:	c1 e6 17             	shl    esi,0x17
c0027976:	09 d6                	or     esi,edx
c0027978:	8d 3c 30             	lea    edi,[eax+esi*1]
c002797b:	eb 0a                	jmp    c0027987 <__addsf3+0x2f9>
c002797d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027980:	eb 05                	jmp    c0027987 <__addsf3+0x2f9>
c0027982:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027987:	89 f8                	mov    eax,edi
c0027989:	5a                   	pop    edx
c002798a:	59                   	pop    ecx
c002798b:	5b                   	pop    ebx
c002798c:	5e                   	pop    esi
c002798d:	5f                   	pop    edi
c002798e:	5d                   	pop    ebp
c002798f:	c3                   	ret    

c0027990 <__subsf3>:
c0027990:	55                   	push   ebp
c0027991:	89 e5                	mov    ebp,esp
c0027993:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027996:	05 00 00 00 80       	add    eax,0x80000000
c002799b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002799e:	5d                   	pop    ebp
c002799f:	e9 ea fc ff ff       	jmp    c002768e <__addsf3>

c00279a4 <__negsf2>:
c00279a4:	55                   	push   ebp
c00279a5:	89 e5                	mov    ebp,esp
c00279a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00279aa:	05 00 00 00 80       	add    eax,0x80000000
c00279af:	5d                   	pop    ebp
c00279b0:	c3                   	ret    

c00279b1 <__mulsf3>:
c00279b1:	55                   	push   ebp
c00279b2:	89 e5                	mov    ebp,esp
c00279b4:	57                   	push   edi
c00279b5:	56                   	push   esi
c00279b6:	53                   	push   ebx
c00279b7:	83 ec 1c             	sub    esp,0x1c
c00279ba:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00279bd:	89 f0                	mov    eax,esi
c00279bf:	89 f1                	mov    ecx,esi
c00279c1:	c1 f9 17             	sar    ecx,0x17
c00279c4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00279c7:	c1 e0 08             	shl    eax,0x8
c00279ca:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00279cf:	89 c1                	mov    ecx,eax
c00279d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279d4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00279d7:	89 c7                	mov    edi,eax
c00279d9:	c1 ff 17             	sar    edi,0x17
c00279dc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00279e0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00279e3:	89 f8                	mov    eax,edi
c00279e5:	0f b6 c0             	movzx  eax,al
c00279e8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279eb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00279ef:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00279f2:	42                   	inc    edx
c00279f3:	80 e2 fe             	and    dl,0xfe
c00279f6:	75 7b                	jne    c0027a73 <__mulsf3+0xc2>
c00279f8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00279fc:	74 54                	je     c0027a52 <__mulsf3+0xa1>
c00279fe:	85 c9                	test   ecx,ecx
c0027a00:	0f 85 64 01 00 00    	jne    c0027b6a <__mulsf3+0x1b9>
c0027a06:	8d 57 01             	lea    edx,[edi+0x1]
c0027a09:	80 e2 fe             	and    dl,0xfe
c0027a0c:	75 1f                	jne    c0027a2d <__mulsf3+0x7c>
c0027a0e:	85 c0                	test   eax,eax
c0027a10:	b8 00 00 00 00       	mov    eax,0x0
c0027a15:	74 29                	je     c0027a40 <__mulsf3+0x8f>
c0027a17:	53                   	push   ebx
c0027a18:	53                   	push   ebx
c0027a19:	50                   	push   eax
c0027a1a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a1d:	e8 96 05 00 00       	call   c0027fb8 <__nesf2>
c0027a22:	83 c4 10             	add    esp,0x10
c0027a25:	85 c0                	test   eax,eax
c0027a27:	0f 85 3a 01 00 00    	jne    c0027b67 <__mulsf3+0x1b6>
c0027a2d:	85 ff                	test   edi,edi
c0027a2f:	0f 89 35 01 00 00    	jns    c0027b6a <__mulsf3+0x1b9>
c0027a35:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027a3b:	e9 2a 01 00 00       	jmp    c0027b6a <__mulsf3+0x1b9>
c0027a40:	51                   	push   ecx
c0027a41:	51                   	push   ecx
c0027a42:	50                   	push   eax
c0027a43:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a46:	e8 6d 05 00 00       	call   c0027fb8 <__nesf2>
c0027a4b:	83 c4 10             	add    esp,0x10
c0027a4e:	85 c0                	test   eax,eax
c0027a50:	eb 15                	jmp    c0027a67 <__mulsf3+0xb6>
c0027a52:	85 c9                	test   ecx,ecx
c0027a54:	74 0b                	je     c0027a61 <__mulsf3+0xb0>
c0027a56:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027a59:	01 c9                	add    ecx,ecx
c0027a5b:	78 16                	js     c0027a73 <__mulsf3+0xc2>
c0027a5d:	89 d3                	mov    ebx,edx
c0027a5f:	eb f5                	jmp    c0027a56 <__mulsf3+0xa5>
c0027a61:	89 f8                	mov    eax,edi
c0027a63:	f7 d0                	not    eax
c0027a65:	84 c0                	test   al,al
c0027a67:	75 c4                	jne    c0027a2d <__mulsf3+0x7c>
c0027a69:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027a6e:	e9 f7 00 00 00       	jmp    c0027b6a <__mulsf3+0x1b9>
c0027a73:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027a76:	c1 e6 08             	shl    esi,0x8
c0027a79:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027a7f:	8d 57 01             	lea    edx,[edi+0x1]
c0027a82:	80 e2 fe             	and    dl,0xfe
c0027a85:	75 63                	jne    c0027aea <__mulsf3+0x139>
c0027a87:	85 c0                	test   eax,eax
c0027a89:	74 2f                	je     c0027aba <__mulsf3+0x109>
c0027a8b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027a8f:	0f 89 d2 00 00 00    	jns    c0027b67 <__mulsf3+0x1b6>
c0027a95:	52                   	push   edx
c0027a96:	52                   	push   edx
c0027a97:	6a 00                	push   0x0
c0027a99:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a9c:	e8 dc 04 00 00       	call   c0027f7d <__eqsf2>
c0027aa1:	83 c4 10             	add    esp,0x10
c0027aa4:	85 c0                	test   eax,eax
c0027aa6:	0f 85 bb 00 00 00    	jne    c0027b67 <__mulsf3+0x1b6>
c0027aac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027aaf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027ab5:	e9 b0 00 00 00       	jmp    c0027b6a <__mulsf3+0x1b9>
c0027aba:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027abd:	50                   	push   eax
c0027abe:	50                   	push   eax
c0027abf:	6a 00                	push   0x0
c0027ac1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ac4:	e8 b4 04 00 00       	call   c0027f7d <__eqsf2>
c0027ac9:	83 c4 10             	add    esp,0x10
c0027acc:	85 c0                	test   eax,eax
c0027ace:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ad1:	75 0c                	jne    c0027adf <__mulsf3+0x12e>
c0027ad3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ad7:	0f 89 8a 00 00 00    	jns    c0027b67 <__mulsf3+0x1b6>
c0027add:	eb cd                	jmp    c0027aac <__mulsf3+0xfb>
c0027adf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ae2:	01 f6                	add    esi,esi
c0027ae4:	78 04                	js     c0027aea <__mulsf3+0x139>
c0027ae6:	89 c3                	mov    ebx,eax
c0027ae8:	eb f5                	jmp    c0027adf <__mulsf3+0x12e>
c0027aea:	89 c8                	mov    eax,ecx
c0027aec:	0d 00 00 00 80       	or     eax,0x80000000
c0027af1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027af7:	f7 e6                	mul    esi
c0027af9:	85 c0                	test   eax,eax
c0027afb:	0f 95 c0             	setne  al
c0027afe:	0f b6 c0             	movzx  eax,al
c0027b01:	09 c2                	or     edx,eax
c0027b03:	78 03                	js     c0027b08 <__mulsf3+0x157>
c0027b05:	01 d2                	add    edx,edx
c0027b07:	4b                   	dec    ebx
c0027b08:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027b0e:	7f 22                	jg     c0027b32 <__mulsf3+0x181>
c0027b10:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027b16:	85 db                	test   ebx,ebx
c0027b18:	7f 23                	jg     c0027b3d <__mulsf3+0x18c>
c0027b1a:	83 fb e9             	cmp    ebx,0xffffffe9
c0027b1d:	7c 1a                	jl     c0027b39 <__mulsf3+0x188>
c0027b1f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027b25:	b9 01 00 00 00       	mov    ecx,0x1
c0027b2a:	29 d9                	sub    ecx,ebx
c0027b2c:	d3 ea                	shr    edx,cl
c0027b2e:	31 db                	xor    ebx,ebx
c0027b30:	eb 0b                	jmp    c0027b3d <__mulsf3+0x18c>
c0027b32:	bb ff 00 00 00       	mov    ebx,0xff
c0027b37:	eb 02                	jmp    c0027b3b <__mulsf3+0x18a>
c0027b39:	31 db                	xor    ebx,ebx
c0027b3b:	31 d2                	xor    edx,edx
c0027b3d:	89 d0                	mov    eax,edx
c0027b3f:	c1 e8 08             	shr    eax,0x8
c0027b42:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027b45:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027b4b:	09 fb                	or     ebx,edi
c0027b4d:	c1 e3 17             	shl    ebx,0x17
c0027b50:	09 c3                	or     ebx,eax
c0027b52:	f6 c2 7f             	test   dl,0x7f
c0027b55:	0f 95 c1             	setne  cl
c0027b58:	09 c8                	or     eax,ecx
c0027b5a:	83 e0 01             	and    eax,0x1
c0027b5d:	c1 ea 07             	shr    edx,0x7
c0027b60:	21 c2                	and    edx,eax
c0027b62:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027b65:	eb 03                	jmp    c0027b6a <__mulsf3+0x1b9>
c0027b67:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027b6a:	89 f0                	mov    eax,esi
c0027b6c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b6f:	5b                   	pop    ebx
c0027b70:	5e                   	pop    esi
c0027b71:	5f                   	pop    edi
c0027b72:	5d                   	pop    ebp
c0027b73:	c3                   	ret    

c0027b74 <__divsf3>:
c0027b74:	55                   	push   ebp
c0027b75:	89 e5                	mov    ebp,esp
c0027b77:	57                   	push   edi
c0027b78:	56                   	push   esi
c0027b79:	53                   	push   ebx
c0027b7a:	83 ec 1c             	sub    esp,0x1c
c0027b7d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b80:	89 d8                	mov    eax,ebx
c0027b82:	89 d9                	mov    ecx,ebx
c0027b84:	c1 f9 17             	sar    ecx,0x17
c0027b87:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027b8a:	c1 e0 08             	shl    eax,0x8
c0027b8d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027b92:	89 c1                	mov    ecx,eax
c0027b94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b97:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b9a:	89 c7                	mov    edi,eax
c0027b9c:	c1 ff 17             	sar    edi,0x17
c0027b9f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027ba3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027ba6:	89 f8                	mov    eax,edi
c0027ba8:	0f b6 c0             	movzx  eax,al
c0027bab:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bae:	29 c6                	sub    esi,eax
c0027bb0:	83 c6 7f             	add    esi,0x7f
c0027bb3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027bb6:	42                   	inc    edx
c0027bb7:	80 e2 fe             	and    dl,0xfe
c0027bba:	0f 85 9c 00 00 00    	jne    c0027c5c <__divsf3+0xe8>
c0027bc0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027bc4:	74 33                	je     c0027bf9 <__divsf3+0x85>
c0027bc6:	85 c9                	test   ecx,ecx
c0027bc8:	0f 85 c7 01 00 00    	jne    c0027d95 <__divsf3+0x221>
c0027bce:	8d 57 01             	lea    edx,[edi+0x1]
c0027bd1:	80 e2 fe             	and    dl,0xfe
c0027bd4:	75 2f                	jne    c0027c05 <__divsf3+0x91>
c0027bd6:	85 c0                	test   eax,eax
c0027bd8:	74 2b                	je     c0027c05 <__divsf3+0x91>
c0027bda:	51                   	push   ecx
c0027bdb:	51                   	push   ecx
c0027bdc:	6a 00                	push   0x0
c0027bde:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027be1:	e8 d2 03 00 00       	call   c0027fb8 <__nesf2>
c0027be6:	83 c4 10             	add    esp,0x10
c0027be9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027bec:	85 c0                	test   eax,eax
c0027bee:	0f 85 a1 01 00 00    	jne    c0027d95 <__divsf3+0x221>
c0027bf4:	e9 92 01 00 00       	jmp    c0027d8b <__divsf3+0x217>
c0027bf9:	85 c9                	test   ecx,ecx
c0027bfb:	75 1b                	jne    c0027c18 <__divsf3+0xa4>
c0027bfd:	8d 57 01             	lea    edx,[edi+0x1]
c0027c00:	80 e2 fe             	and    dl,0xfe
c0027c03:	74 1e                	je     c0027c23 <__divsf3+0xaf>
c0027c05:	85 ff                	test   edi,edi
c0027c07:	0f 89 88 01 00 00    	jns    c0027d95 <__divsf3+0x221>
c0027c0d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027c13:	e9 7d 01 00 00       	jmp    c0027d95 <__divsf3+0x221>
c0027c18:	8d 56 ff             	lea    edx,[esi-0x1]
c0027c1b:	01 c9                	add    ecx,ecx
c0027c1d:	78 3d                	js     c0027c5c <__divsf3+0xe8>
c0027c1f:	89 d6                	mov    esi,edx
c0027c21:	eb f5                	jmp    c0027c18 <__divsf3+0xa4>
c0027c23:	85 c0                	test   eax,eax
c0027c25:	b8 00 00 00 00       	mov    eax,0x0
c0027c2a:	74 18                	je     c0027c44 <__divsf3+0xd0>
c0027c2c:	52                   	push   edx
c0027c2d:	52                   	push   edx
c0027c2e:	50                   	push   eax
c0027c2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c32:	e8 81 03 00 00       	call   c0027fb8 <__nesf2>
c0027c37:	83 c4 10             	add    esp,0x10
c0027c3a:	85 c0                	test   eax,eax
c0027c3c:	0f 85 50 01 00 00    	jne    c0027d92 <__divsf3+0x21e>
c0027c42:	eb c1                	jmp    c0027c05 <__divsf3+0x91>
c0027c44:	56                   	push   esi
c0027c45:	56                   	push   esi
c0027c46:	50                   	push   eax
c0027c47:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c4a:	e8 69 03 00 00       	call   c0027fb8 <__nesf2>
c0027c4f:	83 c4 10             	add    esp,0x10
c0027c52:	85 c0                	test   eax,eax
c0027c54:	0f 84 31 01 00 00    	je     c0027d8b <__divsf3+0x217>
c0027c5a:	eb a9                	jmp    c0027c05 <__divsf3+0x91>
c0027c5c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027c5f:	c1 e3 08             	shl    ebx,0x8
c0027c62:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027c68:	8d 57 01             	lea    edx,[edi+0x1]
c0027c6b:	80 e2 fe             	and    dl,0xfe
c0027c6e:	75 71                	jne    c0027ce1 <__divsf3+0x16d>
c0027c70:	85 c0                	test   eax,eax
c0027c72:	ba 00 00 00 00       	mov    edx,0x0
c0027c77:	74 2f                	je     c0027ca8 <__divsf3+0x134>
c0027c79:	51                   	push   ecx
c0027c7a:	51                   	push   ecx
c0027c7b:	52                   	push   edx
c0027c7c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c7f:	e8 f9 02 00 00       	call   c0027f7d <__eqsf2>
c0027c84:	83 c4 10             	add    esp,0x10
c0027c87:	85 c0                	test   eax,eax
c0027c89:	0f 85 03 01 00 00    	jne    c0027d92 <__divsf3+0x21e>
c0027c8f:	31 d2                	xor    edx,edx
c0027c91:	89 d3                	mov    ebx,edx
c0027c93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c96:	31 f8                	xor    eax,edi
c0027c98:	0f 89 f7 00 00 00    	jns    c0027d95 <__divsf3+0x221>
c0027c9e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027ca3:	e9 ed 00 00 00       	jmp    c0027d95 <__divsf3+0x221>
c0027ca8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027cab:	50                   	push   eax
c0027cac:	50                   	push   eax
c0027cad:	52                   	push   edx
c0027cae:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cb1:	e8 c7 02 00 00       	call   c0027f7d <__eqsf2>
c0027cb6:	83 c4 10             	add    esp,0x10
c0027cb9:	85 c0                	test   eax,eax
c0027cbb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027cbe:	75 16                	jne    c0027cd6 <__divsf3+0x162>
c0027cc0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027cc3:	31 fb                	xor    ebx,edi
c0027cc5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027ccb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027cd1:	e9 bf 00 00 00       	jmp    c0027d95 <__divsf3+0x221>
c0027cd6:	8d 46 01             	lea    eax,[esi+0x1]
c0027cd9:	01 db                	add    ebx,ebx
c0027cdb:	78 04                	js     c0027ce1 <__divsf3+0x16d>
c0027cdd:	89 c6                	mov    esi,eax
c0027cdf:	eb f5                	jmp    c0027cd6 <__divsf3+0x162>
c0027ce1:	89 c8                	mov    eax,ecx
c0027ce3:	0d 00 00 00 80       	or     eax,0x80000000
c0027ce8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027cee:	31 d2                	xor    edx,edx
c0027cf0:	39 d8                	cmp    eax,ebx
c0027cf2:	72 07                	jb     c0027cfb <__divsf3+0x187>
c0027cf4:	29 d8                	sub    eax,ebx
c0027cf6:	ba 01 00 00 00       	mov    edx,0x1
c0027cfb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027d02:	01 d2                	add    edx,edx
c0027d04:	89 c1                	mov    ecx,eax
c0027d06:	01 c0                	add    eax,eax
c0027d08:	85 c9                	test   ecx,ecx
c0027d0a:	78 04                	js     c0027d10 <__divsf3+0x19c>
c0027d0c:	39 c3                	cmp    ebx,eax
c0027d0e:	77 05                	ja     c0027d15 <__divsf3+0x1a1>
c0027d10:	29 d8                	sub    eax,ebx
c0027d12:	83 ca 01             	or     edx,0x1
c0027d15:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027d18:	75 e8                	jne    c0027d02 <__divsf3+0x18e>
c0027d1a:	85 c0                	test   eax,eax
c0027d1c:	0f 95 c0             	setne  al
c0027d1f:	0f b6 c0             	movzx  eax,al
c0027d22:	c1 e2 06             	shl    edx,0x6
c0027d25:	09 c2                	or     edx,eax
c0027d27:	78 03                	js     c0027d2c <__divsf3+0x1b8>
c0027d29:	01 d2                	add    edx,edx
c0027d2b:	4e                   	dec    esi
c0027d2c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027d32:	7f 22                	jg     c0027d56 <__divsf3+0x1e2>
c0027d34:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d3a:	85 f6                	test   esi,esi
c0027d3c:	7f 23                	jg     c0027d61 <__divsf3+0x1ed>
c0027d3e:	83 fe e9             	cmp    esi,0xffffffe9
c0027d41:	7c 1a                	jl     c0027d5d <__divsf3+0x1e9>
c0027d43:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d49:	b9 01 00 00 00       	mov    ecx,0x1
c0027d4e:	29 f1                	sub    ecx,esi
c0027d50:	d3 ea                	shr    edx,cl
c0027d52:	31 f6                	xor    esi,esi
c0027d54:	eb 0b                	jmp    c0027d61 <__divsf3+0x1ed>
c0027d56:	be ff 00 00 00       	mov    esi,0xff
c0027d5b:	eb 02                	jmp    c0027d5f <__divsf3+0x1eb>
c0027d5d:	31 f6                	xor    esi,esi
c0027d5f:	31 d2                	xor    edx,edx
c0027d61:	89 d0                	mov    eax,edx
c0027d63:	c1 e8 08             	shr    eax,0x8
c0027d66:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027d69:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027d6f:	09 fe                	or     esi,edi
c0027d71:	c1 e6 17             	shl    esi,0x17
c0027d74:	09 c6                	or     esi,eax
c0027d76:	f6 c2 7f             	test   dl,0x7f
c0027d79:	0f 95 c1             	setne  cl
c0027d7c:	09 c8                	or     eax,ecx
c0027d7e:	83 e0 01             	and    eax,0x1
c0027d81:	c1 ea 07             	shr    edx,0x7
c0027d84:	21 c2                	and    edx,eax
c0027d86:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027d89:	eb 0a                	jmp    c0027d95 <__divsf3+0x221>
c0027d8b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027d90:	eb 03                	jmp    c0027d95 <__divsf3+0x221>
c0027d92:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027d95:	89 d8                	mov    eax,ebx
c0027d97:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027d9a:	5b                   	pop    ebx
c0027d9b:	5e                   	pop    esi
c0027d9c:	5f                   	pop    edi
c0027d9d:	5d                   	pop    ebp
c0027d9e:	c3                   	ret    

c0027d9f <__floatsisf>:
c0027d9f:	55                   	push   ebp
c0027da0:	89 e5                	mov    ebp,esp
c0027da2:	53                   	push   ebx
c0027da3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027da6:	85 d2                	test   edx,edx
c0027da8:	7e 2b                	jle    c0027dd5 <__floatsisf+0x36>
c0027daa:	0f bd ca             	bsr    ecx,edx
c0027dad:	83 f1 1f             	xor    ecx,0x1f
c0027db0:	d3 e2                	shl    edx,cl
c0027db2:	89 d0                	mov    eax,edx
c0027db4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027db9:	89 c3                	mov    ebx,eax
c0027dbb:	c1 eb 08             	shr    ebx,0x8
c0027dbe:	80 e2 7f             	and    dl,0x7f
c0027dc1:	0f 95 c2             	setne  dl
c0027dc4:	09 da                	or     edx,ebx
c0027dc6:	83 e2 01             	and    edx,0x1
c0027dc9:	c1 e8 07             	shr    eax,0x7
c0027dcc:	21 c2                	and    edx,eax
c0027dce:	b8 9e 00 00 00       	mov    eax,0x9e
c0027dd3:	eb 32                	jmp    c0027e07 <__floatsisf+0x68>
c0027dd5:	b8 00 00 00 00       	mov    eax,0x0
c0027dda:	74 34                	je     c0027e10 <__floatsisf+0x71>
c0027ddc:	f7 da                	neg    edx
c0027dde:	0f bd ca             	bsr    ecx,edx
c0027de1:	83 f1 1f             	xor    ecx,0x1f
c0027de4:	d3 e2                	shl    edx,cl
c0027de6:	89 d0                	mov    eax,edx
c0027de8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ded:	89 c3                	mov    ebx,eax
c0027def:	c1 eb 08             	shr    ebx,0x8
c0027df2:	80 e2 7f             	and    dl,0x7f
c0027df5:	0f 95 c2             	setne  dl
c0027df8:	09 da                	or     edx,ebx
c0027dfa:	83 e2 01             	and    edx,0x1
c0027dfd:	c1 e8 07             	shr    eax,0x7
c0027e00:	21 c2                	and    edx,eax
c0027e02:	b8 9e 01 00 00       	mov    eax,0x19e
c0027e07:	29 c8                	sub    eax,ecx
c0027e09:	c1 e0 17             	shl    eax,0x17
c0027e0c:	09 d8                	or     eax,ebx
c0027e0e:	01 d0                	add    eax,edx
c0027e10:	5b                   	pop    ebx
c0027e11:	5d                   	pop    ebp
c0027e12:	c3                   	ret    

c0027e13 <__floatunsisf>:
c0027e13:	55                   	push   ebp
c0027e14:	89 e5                	mov    ebp,esp
c0027e16:	53                   	push   ebx
c0027e17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027e1a:	31 c0                	xor    eax,eax
c0027e1c:	85 d2                	test   edx,edx
c0027e1e:	74 32                	je     c0027e52 <__floatunsisf+0x3f>
c0027e20:	0f bd ca             	bsr    ecx,edx
c0027e23:	83 f1 1f             	xor    ecx,0x1f
c0027e26:	d3 e2                	shl    edx,cl
c0027e28:	89 d0                	mov    eax,edx
c0027e2a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027e2f:	89 c3                	mov    ebx,eax
c0027e31:	c1 eb 08             	shr    ebx,0x8
c0027e34:	80 e2 7f             	and    dl,0x7f
c0027e37:	0f 95 c2             	setne  dl
c0027e3a:	09 da                	or     edx,ebx
c0027e3c:	83 e2 01             	and    edx,0x1
c0027e3f:	c1 e8 07             	shr    eax,0x7
c0027e42:	21 c2                	and    edx,eax
c0027e44:	b8 9e 00 00 00       	mov    eax,0x9e
c0027e49:	29 c8                	sub    eax,ecx
c0027e4b:	c1 e0 17             	shl    eax,0x17
c0027e4e:	09 d8                	or     eax,ebx
c0027e50:	01 d0                	add    eax,edx
c0027e52:	5b                   	pop    ebx
c0027e53:	5d                   	pop    ebp
c0027e54:	c3                   	ret    

c0027e55 <__fixsfsi>:
c0027e55:	55                   	push   ebp
c0027e56:	89 e5                	mov    ebp,esp
c0027e58:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027e5b:	89 d1                	mov    ecx,edx
c0027e5d:	c1 e1 08             	shl    ecx,0x8
c0027e60:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027e66:	c1 fa 17             	sar    edx,0x17
c0027e69:	78 1c                	js     c0027e87 <__fixsfsi+0x32>
c0027e6b:	83 ea 7f             	sub    edx,0x7f
c0027e6e:	31 c0                	xor    eax,eax
c0027e70:	83 fa 1e             	cmp    edx,0x1e
c0027e73:	77 40                	ja     c0027eb5 <__fixsfsi+0x60>
c0027e75:	89 c8                	mov    eax,ecx
c0027e77:	0d 00 00 00 80       	or     eax,0x80000000
c0027e7c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e81:	29 d1                	sub    ecx,edx
c0027e83:	d3 e8                	shr    eax,cl
c0027e85:	eb 2e                	jmp    c0027eb5 <__fixsfsi+0x60>
c0027e87:	31 c0                	xor    eax,eax
c0027e89:	81 c2 81 00 00 00    	add    edx,0x81
c0027e8f:	78 24                	js     c0027eb5 <__fixsfsi+0x60>
c0027e91:	83 fa 1e             	cmp    edx,0x1e
c0027e94:	7e 09                	jle    c0027e9f <__fixsfsi+0x4a>
c0027e96:	83 fa 1f             	cmp    edx,0x1f
c0027e99:	75 18                	jne    c0027eb3 <__fixsfsi+0x5e>
c0027e9b:	85 c9                	test   ecx,ecx
c0027e9d:	75 14                	jne    c0027eb3 <__fixsfsi+0x5e>
c0027e9f:	89 c8                	mov    eax,ecx
c0027ea1:	0d 00 00 00 80       	or     eax,0x80000000
c0027ea6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027eab:	29 d1                	sub    ecx,edx
c0027ead:	d3 e8                	shr    eax,cl
c0027eaf:	f7 d8                	neg    eax
c0027eb1:	eb 02                	jmp    c0027eb5 <__fixsfsi+0x60>
c0027eb3:	31 c0                	xor    eax,eax
c0027eb5:	5d                   	pop    ebp
c0027eb6:	c3                   	ret    

c0027eb7 <__fixunssfsi>:
c0027eb7:	55                   	push   ebp
c0027eb8:	89 e5                	mov    ebp,esp
c0027eba:	53                   	push   ebx
c0027ebb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ebe:	89 d3                	mov    ebx,edx
c0027ec0:	c1 fb 17             	sar    ebx,0x17
c0027ec3:	83 eb 7f             	sub    ebx,0x7f
c0027ec6:	31 c0                	xor    eax,eax
c0027ec8:	83 fb 1f             	cmp    ebx,0x1f
c0027ecb:	77 18                	ja     c0027ee5 <__fixunssfsi+0x2e>
c0027ecd:	89 d0                	mov    eax,edx
c0027ecf:	c1 e0 08             	shl    eax,0x8
c0027ed2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027ed7:	0d 00 00 00 80       	or     eax,0x80000000
c0027edc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ee1:	29 d9                	sub    ecx,ebx
c0027ee3:	d3 e8                	shr    eax,cl
c0027ee5:	5b                   	pop    ebx
c0027ee6:	5d                   	pop    ebp
c0027ee7:	c3                   	ret    

c0027ee8 <__cmpsf2>:
c0027ee8:	55                   	push   ebp
c0027ee9:	89 e5                	mov    ebp,esp
c0027eeb:	57                   	push   edi
c0027eec:	56                   	push   esi
c0027eed:	53                   	push   ebx
c0027eee:	83 ec 24             	sub    esp,0x24
c0027ef1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ef4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027ef7:	e8 4f 10 00 00       	call   c0028f4b <__truncdfsf2>
c0027efc:	5a                   	pop    edx
c0027efd:	59                   	pop    ecx
c0027efe:	89 c3                	mov    ebx,eax
c0027f00:	c1 e8 17             	shr    eax,0x17
c0027f03:	0f b6 f0             	movzx  esi,al
c0027f06:	89 d8                	mov    eax,ebx
c0027f08:	c1 e8 1f             	shr    eax,0x1f
c0027f0b:	31 c6                	xor    esi,eax
c0027f0d:	c1 e3 08             	shl    ebx,0x8
c0027f10:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027f13:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027f16:	e8 30 10 00 00       	call   c0028f4b <__truncdfsf2>
c0027f1b:	83 c4 10             	add    esp,0x10
c0027f1e:	89 c1                	mov    ecx,eax
c0027f20:	c1 e9 17             	shr    ecx,0x17
c0027f23:	0f b6 c9             	movzx  ecx,cl
c0027f26:	89 c7                	mov    edi,eax
c0027f28:	c1 ef 1f             	shr    edi,0x1f
c0027f2b:	89 ca                	mov    edx,ecx
c0027f2d:	31 fa                	xor    edx,edi
c0027f2f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f32:	c1 e0 08             	shl    eax,0x8
c0027f35:	89 c2                	mov    edx,eax
c0027f37:	89 d8                	mov    eax,ebx
c0027f39:	09 d0                	or     eax,edx
c0027f3b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027f40:	09 f0                	or     eax,esi
c0027f42:	75 08                	jne    c0027f4c <__cmpsf2+0x64>
c0027f44:	31 c0                	xor    eax,eax
c0027f46:	39 f9                	cmp    ecx,edi
c0027f48:	75 0c                	jne    c0027f56 <__cmpsf2+0x6e>
c0027f4a:	eb 29                	jmp    c0027f75 <__cmpsf2+0x8d>
c0027f4c:	b8 01 00 00 00       	mov    eax,0x1
c0027f51:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027f54:	7f 1f                	jg     c0027f75 <__cmpsf2+0x8d>
c0027f56:	83 c8 ff             	or     eax,0xffffffff
c0027f59:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027f5c:	7c 17                	jl     c0027f75 <__cmpsf2+0x8d>
c0027f5e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027f64:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027f6a:	b8 01 00 00 00       	mov    eax,0x1
c0027f6f:	39 d3                	cmp    ebx,edx
c0027f71:	77 02                	ja     c0027f75 <__cmpsf2+0x8d>
c0027f73:	19 c0                	sbb    eax,eax
c0027f75:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027f78:	5b                   	pop    ebx
c0027f79:	5e                   	pop    esi
c0027f7a:	5f                   	pop    edi
c0027f7b:	5d                   	pop    ebp
c0027f7c:	c3                   	ret    

c0027f7d <__eqsf2>:
c0027f7d:	55                   	push   ebp
c0027f7e:	89 e5                	mov    ebp,esp
c0027f80:	83 ec 24             	sub    esp,0x24
c0027f83:	6a 01                	push   0x1
c0027f85:	83 ec 0c             	sub    esp,0xc
c0027f88:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027f8b:	e8 df 10 00 00       	call   c002906f <__extendsfdf2>
c0027f90:	83 c4 10             	add    esp,0x10
c0027f93:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027f96:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027f99:	52                   	push   edx
c0027f9a:	50                   	push   eax
c0027f9b:	50                   	push   eax
c0027f9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027f9f:	e8 cb 10 00 00       	call   c002906f <__extendsfdf2>
c0027fa4:	59                   	pop    ecx
c0027fa5:	59                   	pop    ecx
c0027fa6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027fa9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027fac:	52                   	push   edx
c0027fad:	50                   	push   eax
c0027fae:	e8 35 ff ff ff       	call   c0027ee8 <__cmpsf2>
c0027fb3:	83 c4 20             	add    esp,0x20
c0027fb6:	c9                   	leave  
c0027fb7:	c3                   	ret    

c0027fb8 <__nesf2>:
c0027fb8:	eb c3                	jmp    c0027f7d <__eqsf2>

c0027fba <__gtsf2>:
c0027fba:	55                   	push   ebp
c0027fbb:	89 e5                	mov    ebp,esp
c0027fbd:	83 ec 24             	sub    esp,0x24
c0027fc0:	6a ff                	push   0xffffffff
c0027fc2:	83 ec 0c             	sub    esp,0xc
c0027fc5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027fc8:	e8 a2 10 00 00       	call   c002906f <__extendsfdf2>
c0027fcd:	83 c4 10             	add    esp,0x10
c0027fd0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027fd3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027fd6:	52                   	push   edx
c0027fd7:	50                   	push   eax
c0027fd8:	50                   	push   eax
c0027fd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027fdc:	e8 8e 10 00 00       	call   c002906f <__extendsfdf2>
c0027fe1:	59                   	pop    ecx
c0027fe2:	59                   	pop    ecx
c0027fe3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027fe6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027fe9:	52                   	push   edx
c0027fea:	50                   	push   eax
c0027feb:	e8 f8 fe ff ff       	call   c0027ee8 <__cmpsf2>
c0027ff0:	83 c4 20             	add    esp,0x20
c0027ff3:	c9                   	leave  
c0027ff4:	c3                   	ret    

c0027ff5 <__gesf2>:
c0027ff5:	eb c3                	jmp    c0027fba <__gtsf2>

c0027ff7 <__ltsf2>:
c0027ff7:	eb 84                	jmp    c0027f7d <__eqsf2>

c0027ff9 <__lesf2>:
c0027ff9:	eb 82                	jmp    c0027f7d <__eqsf2>

c0027ffb <__adddf3>:
c0027ffb:	55                   	push   ebp
c0027ffc:	89 e5                	mov    ebp,esp
c0027ffe:	57                   	push   edi
c0027fff:	56                   	push   esi
c0028000:	53                   	push   ebx
c0028001:	83 ec 24             	sub    esp,0x24
c0028004:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028007:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002800a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002800d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028010:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028013:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028016:	89 c8                	mov    eax,ecx
c0028018:	89 ce                	mov    esi,ecx
c002801a:	c1 fe 14             	sar    esi,0x14
c002801d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0028020:	89 fb                	mov    ebx,edi
c0028022:	89 fa                	mov    edx,edi
c0028024:	c1 e2 0b             	shl    edx,0xb
c0028027:	c1 e0 0b             	shl    eax,0xb
c002802a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002802f:	c1 eb 15             	shr    ebx,0x15
c0028032:	09 d8                	or     eax,ebx
c0028034:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028037:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002803a:	c1 fe 14             	sar    esi,0x14
c002803d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028040:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028043:	89 f3                	mov    ebx,esi
c0028045:	c1 e3 0b             	shl    ebx,0xb
c0028048:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002804b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002804e:	c1 e3 0b             	shl    ebx,0xb
c0028051:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0028057:	c1 ee 15             	shr    esi,0x15
c002805a:	09 f3                	or     ebx,esi
c002805c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002805f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0028062:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0028065:	0f 88 5f 02 00 00    	js     c00282ca <__adddf3+0x2cf>
c002806b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002806e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0028071:	85 db                	test   ebx,ebx
c0028073:	0f 8e c7 00 00 00    	jle    c0028140 <__adddf3+0x145>
c0028079:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0028080:	75 1a                	jne    c002809c <__adddf3+0xa1>
c0028082:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028085:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028088:	0f 84 b2 05 00 00    	je     c0028640 <__adddf3+0x645>
c002808e:	4b                   	dec    ebx
c002808f:	75 23                	jne    c00280b4 <__adddf3+0xb9>
c0028091:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0028094:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028097:	e9 99 00 00 00       	jmp    c0028135 <__adddf3+0x13a>
c002809c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002809f:	f7 d6                	not    esi
c00280a1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280a7:	0f 84 93 05 00 00    	je     c0028640 <__adddf3+0x645>
c00280ad:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00280b4:	83 fb 1f             	cmp    ebx,0x1f
c00280b7:	7e 42                	jle    c00280fb <__adddf3+0x100>
c00280b9:	83 fb 3f             	cmp    ebx,0x3f
c00280bc:	0f 8f 7e 05 00 00    	jg     c0028640 <__adddf3+0x645>
c00280c2:	83 e3 1f             	and    ebx,0x1f
c00280c5:	89 d9                	mov    ecx,ebx
c00280c7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280ca:	d3 ef                	shr    edi,cl
c00280cc:	31 db                	xor    ebx,ebx
c00280ce:	85 c9                	test   ecx,ecx
c00280d0:	74 15                	je     c00280e7 <__adddf3+0xec>
c00280d2:	be 20 00 00 00       	mov    esi,0x20
c00280d7:	29 ce                	sub    esi,ecx
c00280d9:	89 f1                	mov    ecx,esi
c00280db:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280de:	d3 e6                	shl    esi,cl
c00280e0:	31 db                	xor    ebx,ebx
c00280e2:	85 f6                	test   esi,esi
c00280e4:	0f 95 c3             	setne  bl
c00280e7:	31 c9                	xor    ecx,ecx
c00280e9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280ed:	0f 95 c1             	setne  cl
c00280f0:	09 cf                	or     edi,ecx
c00280f2:	09 fb                	or     ebx,edi
c00280f4:	01 da                	add    edx,ebx
c00280f6:	83 d0 00             	adc    eax,0x0
c00280f9:	eb 3a                	jmp    c0028135 <__adddf3+0x13a>
c00280fb:	bf 20 00 00 00       	mov    edi,0x20
c0028100:	29 df                	sub    edi,ebx
c0028102:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028105:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028108:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002810b:	d3 e6                	shl    esi,cl
c002810d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028110:	88 d9                	mov    cl,bl
c0028112:	d3 ef                	shr    edi,cl
c0028114:	09 fe                	or     esi,edi
c0028116:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028119:	88 d9                	mov    cl,bl
c002811b:	d3 ef                	shr    edi,cl
c002811d:	89 fb                	mov    ebx,edi
c002811f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028122:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028125:	d3 e7                	shl    edi,cl
c0028127:	85 ff                	test   edi,edi
c0028129:	0f 95 c1             	setne  cl
c002812c:	0f b6 c9             	movzx  ecx,cl
c002812f:	09 ce                	or     esi,ecx
c0028131:	01 f2                	add    edx,esi
c0028133:	11 d8                	adc    eax,ebx
c0028135:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028138:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002813b:	e9 52 01 00 00       	jmp    c0028292 <__adddf3+0x297>
c0028140:	0f 84 d5 00 00 00    	je     c002821b <__adddf3+0x220>
c0028146:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028149:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002814c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002814f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028152:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028159:	75 20                	jne    c002817b <__adddf3+0x180>
c002815b:	89 d6                	mov    esi,edx
c002815d:	09 c6                	or     esi,eax
c002815f:	0f 84 db 04 00 00    	je     c0028640 <__adddf3+0x645>
c0028165:	4b                   	dec    ebx
c0028166:	75 29                	jne    c0028191 <__adddf3+0x196>
c0028168:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002816b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002816e:	01 d1                	add    ecx,edx
c0028170:	11 c6                	adc    esi,eax
c0028172:	89 f0                	mov    eax,esi
c0028174:	89 ca                	mov    edx,ecx
c0028176:	e9 17 01 00 00       	jmp    c0028292 <__adddf3+0x297>
c002817b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002817e:	f7 d6                	not    esi
c0028180:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028186:	0f 84 b4 04 00 00    	je     c0028640 <__adddf3+0x645>
c002818c:	0d 00 00 00 80       	or     eax,0x80000000
c0028191:	83 fb 1f             	cmp    ebx,0x1f
c0028194:	7e 48                	jle    c00281de <__adddf3+0x1e3>
c0028196:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028199:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002819c:	83 fb 3f             	cmp    ebx,0x3f
c002819f:	0f 8f 9b 04 00 00    	jg     c0028640 <__adddf3+0x645>
c00281a5:	83 e3 1f             	and    ebx,0x1f
c00281a8:	89 d9                	mov    ecx,ebx
c00281aa:	89 c7                	mov    edi,eax
c00281ac:	d3 ef                	shr    edi,cl
c00281ae:	31 db                	xor    ebx,ebx
c00281b0:	85 c9                	test   ecx,ecx
c00281b2:	74 12                	je     c00281c6 <__adddf3+0x1cb>
c00281b4:	be 20 00 00 00       	mov    esi,0x20
c00281b9:	29 ce                	sub    esi,ecx
c00281bb:	89 f1                	mov    ecx,esi
c00281bd:	d3 e0                	shl    eax,cl
c00281bf:	31 db                	xor    ebx,ebx
c00281c1:	85 c0                	test   eax,eax
c00281c3:	0f 95 c3             	setne  bl
c00281c6:	31 c0                	xor    eax,eax
c00281c8:	85 d2                	test   edx,edx
c00281ca:	0f 95 c0             	setne  al
c00281cd:	09 c7                	or     edi,eax
c00281cf:	09 fb                	or     ebx,edi
c00281d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281d4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281d7:	01 da                	add    edx,ebx
c00281d9:	83 d6 00             	adc    esi,0x0
c00281dc:	eb 39                	jmp    c0028217 <__adddf3+0x21c>
c00281de:	be 20 00 00 00       	mov    esi,0x20
c00281e3:	29 de                	sub    esi,ebx
c00281e5:	89 c7                	mov    edi,eax
c00281e7:	89 f1                	mov    ecx,esi
c00281e9:	d3 e7                	shl    edi,cl
c00281eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281ee:	89 d7                	mov    edi,edx
c00281f0:	88 d9                	mov    cl,bl
c00281f2:	d3 ef                	shr    edi,cl
c00281f4:	89 f9                	mov    ecx,edi
c00281f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281f9:	09 cf                	or     edi,ecx
c00281fb:	88 d9                	mov    cl,bl
c00281fd:	d3 e8                	shr    eax,cl
c00281ff:	89 f1                	mov    ecx,esi
c0028201:	d3 e2                	shl    edx,cl
c0028203:	85 d2                	test   edx,edx
c0028205:	0f 95 c2             	setne  dl
c0028208:	0f b6 d2             	movzx  edx,dl
c002820b:	09 d7                	or     edi,edx
c002820d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028210:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028213:	01 fa                	add    edx,edi
c0028215:	11 c6                	adc    esi,eax
c0028217:	89 f0                	mov    eax,esi
c0028219:	eb 77                	jmp    c0028292 <__adddf3+0x297>
c002821b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002821e:	46                   	inc    esi
c002821f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028222:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028228:	75 41                	jne    c002826b <__adddf3+0x270>
c002822a:	89 d3                	mov    ebx,edx
c002822c:	09 c3                	or     ebx,eax
c002822e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028235:	75 27                	jne    c002825e <__adddf3+0x263>
c0028237:	85 db                	test   ebx,ebx
c0028239:	0f 84 fb 03 00 00    	je     c002863a <__adddf3+0x63f>
c002823f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028242:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028245:	0f 84 f5 03 00 00    	je     c0028640 <__adddf3+0x645>
c002824b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002824e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028251:	85 c0                	test   eax,eax
c0028253:	0f 89 91 03 00 00    	jns    c00285ea <__adddf3+0x5ef>
c0028259:	e9 85 03 00 00       	jmp    c00285e3 <__adddf3+0x5e8>
c002825e:	85 db                	test   ebx,ebx
c0028260:	0f 85 da 03 00 00    	jne    c0028640 <__adddf3+0x645>
c0028266:	e9 cf 03 00 00       	jmp    c002863a <__adddf3+0x63f>
c002826b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002826e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028271:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028274:	f7 d1                	not    ecx
c0028276:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002827c:	0f 84 70 03 00 00    	je     c00285f2 <__adddf3+0x5f7>
c0028282:	d1 ea                	shr    edx,1
c0028284:	89 c1                	mov    ecx,eax
c0028286:	c1 e1 1f             	shl    ecx,0x1f
c0028289:	09 ca                	or     edx,ecx
c002828b:	d1 e8                	shr    eax,1
c002828d:	e9 6f 03 00 00       	jmp    c0028601 <__adddf3+0x606>
c0028292:	85 c0                	test   eax,eax
c0028294:	0f 89 67 03 00 00    	jns    c0028601 <__adddf3+0x606>
c002829a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002829d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00282a0:	f7 d1                	not    ecx
c00282a2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00282a8:	0f 84 44 03 00 00    	je     c00285f2 <__adddf3+0x5f7>
c00282ae:	89 d1                	mov    ecx,edx
c00282b0:	d1 e9                	shr    ecx,1
c00282b2:	83 e2 01             	and    edx,0x1
c00282b5:	09 ca                	or     edx,ecx
c00282b7:	89 c1                	mov    ecx,eax
c00282b9:	c1 e1 1f             	shl    ecx,0x1f
c00282bc:	09 ca                	or     edx,ecx
c00282be:	d1 e8                	shr    eax,1
c00282c0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00282c5:	e9 37 03 00 00       	jmp    c0028601 <__adddf3+0x606>
c00282ca:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00282cd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00282d3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00282d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00282d9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282df:	29 de                	sub    esi,ebx
c00282e1:	85 f6                	test   esi,esi
c00282e3:	0f 8e bd 00 00 00    	jle    c00283a6 <__adddf3+0x3ab>
c00282e9:	85 db                	test   ebx,ebx
c00282eb:	75 17                	jne    c0028304 <__adddf3+0x309>
c00282ed:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00282f0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00282f3:	0f 84 47 03 00 00    	je     c0028640 <__adddf3+0x645>
c00282f9:	4e                   	dec    esi
c00282fa:	75 20                	jne    c002831c <__adddf3+0x321>
c00282fc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00282ff:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028302:	eb 5b                	jmp    c002835f <__adddf3+0x364>
c0028304:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028307:	f7 d3                	not    ebx
c0028309:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002830f:	0f 84 2b 03 00 00    	je     c0028640 <__adddf3+0x645>
c0028315:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002831c:	83 fe 1f             	cmp    esi,0x1f
c002831f:	7e 49                	jle    c002836a <__adddf3+0x36f>
c0028321:	83 fe 3f             	cmp    esi,0x3f
c0028324:	0f 8f 16 03 00 00    	jg     c0028640 <__adddf3+0x645>
c002832a:	83 e6 1f             	and    esi,0x1f
c002832d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028330:	89 f1                	mov    ecx,esi
c0028332:	d3 ef                	shr    edi,cl
c0028334:	31 db                	xor    ebx,ebx
c0028336:	85 f6                	test   esi,esi
c0028338:	74 13                	je     c002834d <__adddf3+0x352>
c002833a:	b9 20 00 00 00       	mov    ecx,0x20
c002833f:	29 f1                	sub    ecx,esi
c0028341:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028344:	d3 e6                	shl    esi,cl
c0028346:	31 db                	xor    ebx,ebx
c0028348:	85 f6                	test   esi,esi
c002834a:	0f 95 c3             	setne  bl
c002834d:	31 c9                	xor    ecx,ecx
c002834f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028353:	0f 95 c1             	setne  cl
c0028356:	09 cf                	or     edi,ecx
c0028358:	09 fb                	or     ebx,edi
c002835a:	29 da                	sub    edx,ebx
c002835c:	83 d8 00             	sbb    eax,0x0
c002835f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028362:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028365:	e9 aa 01 00 00       	jmp    c0028514 <__adddf3+0x519>
c002836a:	bf 20 00 00 00       	mov    edi,0x20
c002836f:	29 f7                	sub    edi,esi
c0028371:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028374:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028377:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002837a:	d3 e3                	shl    ebx,cl
c002837c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002837f:	89 f1                	mov    ecx,esi
c0028381:	d3 ef                	shr    edi,cl
c0028383:	09 fb                	or     ebx,edi
c0028385:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028388:	89 f1                	mov    ecx,esi
c002838a:	d3 ef                	shr    edi,cl
c002838c:	89 fe                	mov    esi,edi
c002838e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028391:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028394:	d3 e7                	shl    edi,cl
c0028396:	85 ff                	test   edi,edi
c0028398:	0f 95 c1             	setne  cl
c002839b:	0f b6 c9             	movzx  ecx,cl
c002839e:	09 cb                	or     ebx,ecx
c00283a0:	29 da                	sub    edx,ebx
c00283a2:	19 f0                	sbb    eax,esi
c00283a4:	eb b9                	jmp    c002835f <__adddf3+0x364>
c00283a6:	0f 84 cd 00 00 00    	je     c0028479 <__adddf3+0x47e>
c00283ac:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00283af:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283b2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283b5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00283b9:	75 1b                	jne    c00283d6 <__adddf3+0x3db>
c00283bb:	89 d6                	mov    esi,edx
c00283bd:	09 c6                	or     esi,eax
c00283bf:	0f 84 7b 02 00 00    	je     c0028640 <__adddf3+0x645>
c00283c5:	4b                   	dec    ebx
c00283c6:	75 24                	jne    c00283ec <__adddf3+0x3f1>
c00283c8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00283cb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00283ce:	29 d1                	sub    ecx,edx
c00283d0:	19 c6                	sbb    esi,eax
c00283d2:	89 ca                	mov    edx,ecx
c00283d4:	eb 61                	jmp    c0028437 <__adddf3+0x43c>
c00283d6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00283d9:	f7 d6                	not    esi
c00283db:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283e1:	0f 84 59 02 00 00    	je     c0028640 <__adddf3+0x645>
c00283e7:	0d 00 00 00 80       	or     eax,0x80000000
c00283ec:	83 fb 1f             	cmp    ebx,0x1f
c00283ef:	7e 4d                	jle    c002843e <__adddf3+0x443>
c00283f1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283f7:	83 fb 3f             	cmp    ebx,0x3f
c00283fa:	0f 8f 40 02 00 00    	jg     c0028640 <__adddf3+0x645>
c0028400:	83 e3 1f             	and    ebx,0x1f
c0028403:	89 d9                	mov    ecx,ebx
c0028405:	89 c7                	mov    edi,eax
c0028407:	d3 ef                	shr    edi,cl
c0028409:	31 db                	xor    ebx,ebx
c002840b:	85 c9                	test   ecx,ecx
c002840d:	74 12                	je     c0028421 <__adddf3+0x426>
c002840f:	be 20 00 00 00       	mov    esi,0x20
c0028414:	29 ce                	sub    esi,ecx
c0028416:	89 f1                	mov    ecx,esi
c0028418:	d3 e0                	shl    eax,cl
c002841a:	31 db                	xor    ebx,ebx
c002841c:	85 c0                	test   eax,eax
c002841e:	0f 95 c3             	setne  bl
c0028421:	31 c0                	xor    eax,eax
c0028423:	85 d2                	test   edx,edx
c0028425:	0f 95 c0             	setne  al
c0028428:	09 c7                	or     edi,eax
c002842a:	09 fb                	or     ebx,edi
c002842c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002842f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028432:	29 da                	sub    edx,ebx
c0028434:	83 de 00             	sbb    esi,0x0
c0028437:	89 f0                	mov    eax,esi
c0028439:	e9 d6 00 00 00       	jmp    c0028514 <__adddf3+0x519>
c002843e:	be 20 00 00 00       	mov    esi,0x20
c0028443:	29 de                	sub    esi,ebx
c0028445:	89 c7                	mov    edi,eax
c0028447:	89 f1                	mov    ecx,esi
c0028449:	d3 e7                	shl    edi,cl
c002844b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002844e:	89 d7                	mov    edi,edx
c0028450:	88 d9                	mov    cl,bl
c0028452:	d3 ef                	shr    edi,cl
c0028454:	89 f9                	mov    ecx,edi
c0028456:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028459:	09 cf                	or     edi,ecx
c002845b:	88 d9                	mov    cl,bl
c002845d:	d3 e8                	shr    eax,cl
c002845f:	89 f1                	mov    ecx,esi
c0028461:	d3 e2                	shl    edx,cl
c0028463:	85 d2                	test   edx,edx
c0028465:	0f 95 c2             	setne  dl
c0028468:	0f b6 d2             	movzx  edx,dl
c002846b:	09 d7                	or     edi,edx
c002846d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028470:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028473:	29 fa                	sub    edx,edi
c0028475:	19 c6                	sbb    esi,eax
c0028477:	eb be                	jmp    c0028437 <__adddf3+0x43c>
c0028479:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002847c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002847f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028485:	75 6a                	jne    c00284f1 <__adddf3+0x4f6>
c0028487:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002848b:	75 58                	jne    c00284e5 <__adddf3+0x4ea>
c002848d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028490:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028493:	89 d6                	mov    esi,edx
c0028495:	09 c6                	or     esi,eax
c0028497:	75 17                	jne    c00284b0 <__adddf3+0x4b5>
c0028499:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002849c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002849f:	85 db                	test   ebx,ebx
c00284a1:	0f 85 99 01 00 00    	jne    c0028640 <__adddf3+0x645>
c00284a7:	31 ff                	xor    edi,edi
c00284a9:	31 c9                	xor    ecx,ecx
c00284ab:	e9 90 01 00 00       	jmp    c0028640 <__adddf3+0x645>
c00284b0:	85 db                	test   ebx,ebx
c00284b2:	0f 84 88 01 00 00    	je     c0028640 <__adddf3+0x645>
c00284b8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00284bb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00284be:	85 c0                	test   eax,eax
c00284c0:	79 10                	jns    c00284d2 <__adddf3+0x4d7>
c00284c2:	31 c9                	xor    ecx,ecx
c00284c4:	f7 da                	neg    edx
c00284c6:	0f 95 c1             	setne  cl
c00284c9:	01 c8                	add    eax,ecx
c00284cb:	f7 d8                	neg    eax
c00284cd:	e9 2f 01 00 00       	jmp    c0028601 <__adddf3+0x606>
c00284d2:	31 ff                	xor    edi,edi
c00284d4:	31 c9                	xor    ecx,ecx
c00284d6:	89 c3                	mov    ebx,eax
c00284d8:	09 d3                	or     ebx,edx
c00284da:	0f 84 60 01 00 00    	je     c0028640 <__adddf3+0x645>
c00284e0:	e9 05 01 00 00       	jmp    c00285ea <__adddf3+0x5ef>
c00284e5:	31 ff                	xor    edi,edi
c00284e7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00284ec:	e9 4f 01 00 00       	jmp    c0028640 <__adddf3+0x645>
c00284f1:	89 c1                	mov    ecx,eax
c00284f3:	89 d0                	mov    eax,edx
c00284f5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00284f8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00284fb:	89 ca                	mov    edx,ecx
c00284fd:	85 c9                	test   ecx,ecx
c00284ff:	79 2c                	jns    c002852d <__adddf3+0x532>
c0028501:	31 c9                	xor    ecx,ecx
c0028503:	f7 d8                	neg    eax
c0028505:	0f 95 c1             	setne  cl
c0028508:	01 ca                	add    edx,ecx
c002850a:	f7 da                	neg    edx
c002850c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002850f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028512:	eb 19                	jmp    c002852d <__adddf3+0x532>
c0028514:	85 c0                	test   eax,eax
c0028516:	0f 89 e5 00 00 00    	jns    c0028601 <__adddf3+0x606>
c002851c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028521:	89 c1                	mov    ecx,eax
c0028523:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028526:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028529:	89 d0                	mov    eax,edx
c002852b:	89 ca                	mov    edx,ecx
c002852d:	85 d2                	test   edx,edx
c002852f:	74 59                	je     c002858a <__adddf3+0x58f>
c0028531:	0f bd da             	bsr    ebx,edx
c0028534:	83 f3 1f             	xor    ebx,0x1f
c0028537:	88 d9                	mov    cl,bl
c0028539:	d3 e2                	shl    edx,cl
c002853b:	bf 20 00 00 00       	mov    edi,0x20
c0028540:	89 f9                	mov    ecx,edi
c0028542:	29 d9                	sub    ecx,ebx
c0028544:	89 c6                	mov    esi,eax
c0028546:	d3 ee                	shr    esi,cl
c0028548:	09 d6                	or     esi,edx
c002854a:	88 d9                	mov    cl,bl
c002854c:	d3 e0                	shl    eax,cl
c002854e:	89 c2                	mov    edx,eax
c0028550:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028553:	25 ff 07 00 00       	and    eax,0x7ff
c0028558:	39 d8                	cmp    eax,ebx
c002855a:	7f 22                	jg     c002857e <__adddf3+0x583>
c002855c:	29 c3                	sub    ebx,eax
c002855e:	43                   	inc    ebx
c002855f:	88 d9                	mov    cl,bl
c0028561:	d3 ea                	shr    edx,cl
c0028563:	29 df                	sub    edi,ebx
c0028565:	89 f9                	mov    ecx,edi
c0028567:	89 f0                	mov    eax,esi
c0028569:	d3 e0                	shl    eax,cl
c002856b:	09 c2                	or     edx,eax
c002856d:	89 f0                	mov    eax,esi
c002856f:	88 d9                	mov    cl,bl
c0028571:	d3 e8                	shr    eax,cl
c0028573:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028576:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002857c:	eb 6f                	jmp    c00285ed <__adddf3+0x5f2>
c002857e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028581:	29 d8                	sub    eax,ebx
c0028583:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028586:	89 f0                	mov    eax,esi
c0028588:	eb 59                	jmp    c00285e3 <__adddf3+0x5e8>
c002858a:	85 c0                	test   eax,eax
c002858c:	74 6a                	je     c00285f8 <__adddf3+0x5fd>
c002858e:	0f bd c8             	bsr    ecx,eax
c0028591:	83 f1 1f             	xor    ecx,0x1f
c0028594:	d3 e0                	shl    eax,cl
c0028596:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028599:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002859f:	83 c1 20             	add    ecx,0x20
c00285a2:	39 cb                	cmp    ebx,ecx
c00285a4:	7f 35                	jg     c00285db <__adddf3+0x5e0>
c00285a6:	29 d9                	sub    ecx,ebx
c00285a8:	8d 71 01             	lea    esi,[ecx+0x1]
c00285ab:	83 fe 1f             	cmp    esi,0x1f
c00285ae:	7e 09                	jle    c00285b9 <__adddf3+0x5be>
c00285b0:	83 e9 1f             	sub    ecx,0x1f
c00285b3:	d3 e8                	shr    eax,cl
c00285b5:	89 c3                	mov    ebx,eax
c00285b7:	eb 11                	jmp    c00285ca <__adddf3+0x5cf>
c00285b9:	b9 20 00 00 00       	mov    ecx,0x20
c00285be:	29 f1                	sub    ecx,esi
c00285c0:	89 c3                	mov    ebx,eax
c00285c2:	d3 e3                	shl    ebx,cl
c00285c4:	89 f1                	mov    ecx,esi
c00285c6:	d3 e8                	shr    eax,cl
c00285c8:	89 c2                	mov    edx,eax
c00285ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00285cd:	25 00 f8 ff ff       	and    eax,0xfffff800
c00285d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285d5:	89 d0                	mov    eax,edx
c00285d7:	89 da                	mov    edx,ebx
c00285d9:	eb 26                	jmp    c0028601 <__adddf3+0x606>
c00285db:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285de:	29 cf                	sub    edi,ecx
c00285e0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285e3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285e8:	eb 17                	jmp    c0028601 <__adddf3+0x606>
c00285ea:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285ed:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285f0:	eb 0f                	jmp    c0028601 <__adddf3+0x606>
c00285f2:	31 d2                	xor    edx,edx
c00285f4:	31 c0                	xor    eax,eax
c00285f6:	eb 09                	jmp    c0028601 <__adddf3+0x606>
c00285f8:	89 c2                	mov    edx,eax
c00285fa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028601:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028604:	c1 e1 14             	shl    ecx,0x14
c0028607:	89 c3                	mov    ebx,eax
c0028609:	c1 eb 0b             	shr    ebx,0xb
c002860c:	09 d9                	or     ecx,ebx
c002860e:	89 d3                	mov    ebx,edx
c0028610:	c1 eb 0b             	shr    ebx,0xb
c0028613:	c1 e0 15             	shl    eax,0x15
c0028616:	09 d8                	or     eax,ebx
c0028618:	89 c7                	mov    edi,eax
c002861a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028620:	0f 95 c0             	setne  al
c0028623:	89 c6                	mov    esi,eax
c0028625:	09 f3                	or     ebx,esi
c0028627:	83 e3 01             	and    ebx,0x1
c002862a:	c1 ea 0a             	shr    edx,0xa
c002862d:	21 da                	and    edx,ebx
c002862f:	89 f8                	mov    eax,edi
c0028631:	01 d0                	add    eax,edx
c0028633:	83 d1 00             	adc    ecx,0x0
c0028636:	89 c7                	mov    edi,eax
c0028638:	eb 06                	jmp    c0028640 <__adddf3+0x645>
c002863a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002863d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028640:	89 f8                	mov    eax,edi
c0028642:	89 ca                	mov    edx,ecx
c0028644:	83 c4 24             	add    esp,0x24
c0028647:	5b                   	pop    ebx
c0028648:	5e                   	pop    esi
c0028649:	5f                   	pop    edi
c002864a:	5d                   	pop    ebp
c002864b:	c3                   	ret    

c002864c <__subdf3>:
c002864c:	55                   	push   ebp
c002864d:	89 e5                	mov    ebp,esp
c002864f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028652:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028655:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002865b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002865e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028661:	5d                   	pop    ebp
c0028662:	e9 94 f9 ff ff       	jmp    c0027ffb <__adddf3>

c0028667 <__negdf2>:
c0028667:	55                   	push   ebp
c0028668:	89 e5                	mov    ebp,esp
c002866a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002866d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028670:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028676:	5d                   	pop    ebp
c0028677:	c3                   	ret    

c0028678 <__muldf3>:
c0028678:	55                   	push   ebp
c0028679:	89 e5                	mov    ebp,esp
c002867b:	57                   	push   edi
c002867c:	56                   	push   esi
c002867d:	53                   	push   ebx
c002867e:	83 ec 24             	sub    esp,0x24
c0028681:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028684:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028687:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002868a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002868d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028690:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028693:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028696:	89 c8                	mov    eax,ecx
c0028698:	c1 f8 14             	sar    eax,0x14
c002869b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002869e:	89 f8                	mov    eax,edi
c00286a0:	89 fb                	mov    ebx,edi
c00286a2:	c1 e3 0b             	shl    ebx,0xb
c00286a5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00286a8:	c1 e1 0b             	shl    ecx,0xb
c00286ab:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00286b1:	c1 e8 15             	shr    eax,0x15
c00286b4:	09 c1                	or     ecx,eax
c00286b6:	89 d6                	mov    esi,edx
c00286b8:	89 d0                	mov    eax,edx
c00286ba:	c1 f8 14             	sar    eax,0x14
c00286bd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00286c0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00286c3:	89 c3                	mov    ebx,eax
c00286c5:	c1 e3 0b             	shl    ebx,0xb
c00286c8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00286cb:	c1 e6 0b             	shl    esi,0xb
c00286ce:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00286d4:	c1 e8 15             	shr    eax,0x15
c00286d7:	09 c6                	or     esi,eax
c00286d9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286dc:	25 ff 07 00 00       	and    eax,0x7ff
c00286e1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286e4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00286e7:	25 ff 07 00 00       	and    eax,0x7ff
c00286ec:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286ef:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00286f2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00286f5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00286fc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286ff:	40                   	inc    eax
c0028700:	a9 fe 07 00 00       	test   eax,0x7fe
c0028705:	0f 85 8d 00 00 00    	jne    c0028798 <__muldf3+0x120>
c002870b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002870e:	09 c8                	or     eax,ecx
c0028710:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028714:	74 44                	je     c002875a <__muldf3+0xe2>
c0028716:	85 c0                	test   eax,eax
c0028718:	0f 85 31 02 00 00    	jne    c002894f <__muldf3+0x2d7>
c002871e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028721:	40                   	inc    eax
c0028722:	a9 fe 07 00 00       	test   eax,0x7fe
c0028727:	75 13                	jne    c002873c <__muldf3+0xc4>
c0028729:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002872c:	09 f1                	or     ecx,esi
c002872e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028732:	74 22                	je     c0028756 <__muldf3+0xde>
c0028734:	85 c9                	test   ecx,ecx
c0028736:	0f 85 0d 02 00 00    	jne    c0028949 <__muldf3+0x2d1>
c002873c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028740:	0f 89 09 02 00 00    	jns    c002894f <__muldf3+0x2d7>
c0028746:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028749:	05 00 00 00 80       	add    eax,0x80000000
c002874e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028751:	e9 f9 01 00 00       	jmp    c002894f <__muldf3+0x2d7>
c0028756:	85 c9                	test   ecx,ecx
c0028758:	eb 2e                	jmp    c0028788 <__muldf3+0x110>
c002875a:	85 c0                	test   eax,eax
c002875c:	74 20                	je     c002877e <__muldf3+0x106>
c002875e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028761:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028764:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028767:	c1 ef 1f             	shr    edi,0x1f
c002876a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002876d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028770:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028773:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028776:	09 f9                	or     ecx,edi
c0028778:	78 1e                	js     c0028798 <__muldf3+0x120>
c002877a:	89 c3                	mov    ebx,eax
c002877c:	eb e0                	jmp    c002875e <__muldf3+0xe6>
c002877e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028781:	f7 d0                	not    eax
c0028783:	a9 ff 07 00 00       	test   eax,0x7ff
c0028788:	75 b2                	jne    c002873c <__muldf3+0xc4>
c002878a:	31 ff                	xor    edi,edi
c002878c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028793:	e9 b7 01 00 00       	jmp    c002894f <__muldf3+0x2d7>
c0028798:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002879b:	40                   	inc    eax
c002879c:	a9 fe 07 00 00       	test   eax,0x7fe
c00287a1:	75 57                	jne    c00287fa <__muldf3+0x182>
c00287a3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00287a6:	09 f0                	or     eax,esi
c00287a8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00287ac:	74 23                	je     c00287d1 <__muldf3+0x159>
c00287ae:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00287b2:	0f 89 91 01 00 00    	jns    c0028949 <__muldf3+0x2d1>
c00287b8:	85 c0                	test   eax,eax
c00287ba:	0f 85 89 01 00 00    	jne    c0028949 <__muldf3+0x2d1>
c00287c0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00287c3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00287c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00287cc:	e9 7e 01 00 00       	jmp    c002894f <__muldf3+0x2d7>
c00287d1:	85 c0                	test   eax,eax
c00287d3:	75 0c                	jne    c00287e1 <__muldf3+0x169>
c00287d5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00287d9:	0f 89 6a 01 00 00    	jns    c0028949 <__muldf3+0x2d1>
c00287df:	eb df                	jmp    c00287c0 <__muldf3+0x148>
c00287e1:	01 f6                	add    esi,esi
c00287e3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00287e6:	c1 ea 1f             	shr    edx,0x1f
c00287e9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00287ec:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00287ef:	8d 43 ff             	lea    eax,[ebx-0x1]
c00287f2:	09 d6                	or     esi,edx
c00287f4:	78 04                	js     c00287fa <__muldf3+0x182>
c00287f6:	89 c3                	mov    ebx,eax
c00287f8:	eb e7                	jmp    c00287e1 <__muldf3+0x169>
c00287fa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028800:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028806:	89 c8                	mov    eax,ecx
c0028808:	f7 e6                	mul    esi
c002880a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002880d:	89 c7                	mov    edi,eax
c002880f:	89 c8                	mov    eax,ecx
c0028811:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028814:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028817:	89 c1                	mov    ecx,eax
c0028819:	89 f0                	mov    eax,esi
c002881b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002881e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028821:	89 c6                	mov    esi,eax
c0028823:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028826:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028829:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002882c:	31 c0                	xor    eax,eax
c002882e:	01 f1                	add    ecx,esi
c0028830:	0f 92 c0             	setb   al
c0028833:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028836:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028839:	83 d6 00             	adc    esi,0x0
c002883c:	01 c7                	add    edi,eax
c002883e:	83 d6 00             	adc    esi,0x0
c0028841:	01 ca                	add    edx,ecx
c0028843:	0f 92 c1             	setb   cl
c0028846:	0f b6 c9             	movzx  ecx,cl
c0028849:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002884c:	83 d6 00             	adc    esi,0x0
c002884f:	01 cf                	add    edi,ecx
c0028851:	83 d6 00             	adc    esi,0x0
c0028854:	31 c9                	xor    ecx,ecx
c0028856:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028859:	0f 95 c1             	setne  cl
c002885c:	09 cf                	or     edi,ecx
c002885e:	85 f6                	test   esi,esi
c0028860:	78 0c                	js     c002886e <__muldf3+0x1f6>
c0028862:	01 f6                	add    esi,esi
c0028864:	89 f8                	mov    eax,edi
c0028866:	c1 e8 1f             	shr    eax,0x1f
c0028869:	09 c6                	or     esi,eax
c002886b:	01 ff                	add    edi,edi
c002886d:	4b                   	dec    ebx
c002886e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028874:	0f 8f 85 00 00 00    	jg     c00288ff <__muldf3+0x287>
c002887a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028880:	85 db                	test   ebx,ebx
c0028882:	0f 8f 84 00 00 00    	jg     c002890c <__muldf3+0x294>
c0028888:	83 fb cc             	cmp    ebx,0xffffffcc
c002888b:	7c 79                	jl     c0028906 <__muldf3+0x28e>
c002888d:	ba 01 00 00 00       	mov    edx,0x1
c0028892:	29 da                	sub    edx,ebx
c0028894:	81 ce 00 00 00 80    	or     esi,0x80000000
c002889a:	83 fa 1f             	cmp    edx,0x1f
c002889d:	7e 30                	jle    c00288cf <__muldf3+0x257>
c002889f:	83 fa 20             	cmp    edx,0x20
c00288a2:	75 0b                	jne    c00288af <__muldf3+0x237>
c00288a4:	31 c0                	xor    eax,eax
c00288a6:	85 ff                	test   edi,edi
c00288a8:	0f 95 c0             	setne  al
c00288ab:	89 c7                	mov    edi,eax
c00288ad:	eb 1a                	jmp    c00288c9 <__muldf3+0x251>
c00288af:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00288b2:	89 f0                	mov    eax,esi
c00288b4:	d3 e0                	shl    eax,cl
c00288b6:	09 f8                	or     eax,edi
c00288b8:	0f 95 c0             	setne  al
c00288bb:	0f b6 c0             	movzx  eax,al
c00288be:	89 c7                	mov    edi,eax
c00288c0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00288c5:	29 d9                	sub    ecx,ebx
c00288c7:	d3 ee                	shr    esi,cl
c00288c9:	09 f7                	or     edi,esi
c00288cb:	31 db                	xor    ebx,ebx
c00288cd:	eb 3b                	jmp    c002890a <__muldf3+0x292>
c00288cf:	83 c3 1f             	add    ebx,0x1f
c00288d2:	89 f0                	mov    eax,esi
c00288d4:	88 d9                	mov    cl,bl
c00288d6:	d3 e0                	shl    eax,cl
c00288d8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00288db:	89 f8                	mov    eax,edi
c00288dd:	88 d1                	mov    cl,dl
c00288df:	d3 e8                	shr    eax,cl
c00288e1:	89 c1                	mov    ecx,eax
c00288e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00288e6:	09 c8                	or     eax,ecx
c00288e8:	88 d9                	mov    cl,bl
c00288ea:	d3 e7                	shl    edi,cl
c00288ec:	31 db                	xor    ebx,ebx
c00288ee:	85 ff                	test   edi,edi
c00288f0:	0f 95 c3             	setne  bl
c00288f3:	89 df                	mov    edi,ebx
c00288f5:	09 c7                	or     edi,eax
c00288f7:	88 d1                	mov    cl,dl
c00288f9:	d3 ee                	shr    esi,cl
c00288fb:	31 db                	xor    ebx,ebx
c00288fd:	eb 0d                	jmp    c002890c <__muldf3+0x294>
c00288ff:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028904:	eb 02                	jmp    c0028908 <__muldf3+0x290>
c0028906:	31 db                	xor    ebx,ebx
c0028908:	31 ff                	xor    edi,edi
c002890a:	31 f6                	xor    esi,esi
c002890c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002890f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028912:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028917:	09 c3                	or     ebx,eax
c0028919:	c1 e3 14             	shl    ebx,0x14
c002891c:	89 f0                	mov    eax,esi
c002891e:	c1 e8 0b             	shr    eax,0xb
c0028921:	09 c3                	or     ebx,eax
c0028923:	89 f8                	mov    eax,edi
c0028925:	c1 e8 0b             	shr    eax,0xb
c0028928:	c1 e6 15             	shl    esi,0x15
c002892b:	09 c6                	or     esi,eax
c002892d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028933:	0f 95 c1             	setne  cl
c0028936:	09 c8                	or     eax,ecx
c0028938:	83 e0 01             	and    eax,0x1
c002893b:	c1 ef 0a             	shr    edi,0xa
c002893e:	21 c7                	and    edi,eax
c0028940:	01 f7                	add    edi,esi
c0028942:	83 d3 00             	adc    ebx,0x0
c0028945:	89 da                	mov    edx,ebx
c0028947:	eb 03                	jmp    c002894c <__muldf3+0x2d4>
c0028949:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002894c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002894f:	89 f8                	mov    eax,edi
c0028951:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028954:	83 c4 24             	add    esp,0x24
c0028957:	5b                   	pop    ebx
c0028958:	5e                   	pop    esi
c0028959:	5f                   	pop    edi
c002895a:	5d                   	pop    ebp
c002895b:	c3                   	ret    

c002895c <__divdf3>:
c002895c:	55                   	push   ebp
c002895d:	89 e5                	mov    ebp,esp
c002895f:	57                   	push   edi
c0028960:	56                   	push   esi
c0028961:	53                   	push   ebx
c0028962:	83 ec 2c             	sub    esp,0x2c
c0028965:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028968:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002896b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002896e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028971:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028974:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028977:	89 ce                	mov    esi,ecx
c0028979:	89 c8                	mov    eax,ecx
c002897b:	c1 f8 14             	sar    eax,0x14
c002897e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028981:	89 f8                	mov    eax,edi
c0028983:	89 fb                	mov    ebx,edi
c0028985:	c1 e3 0b             	shl    ebx,0xb
c0028988:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002898b:	c1 e6 0b             	shl    esi,0xb
c002898e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028994:	c1 e8 15             	shr    eax,0x15
c0028997:	09 c6                	or     esi,eax
c0028999:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002899c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002899f:	89 c2                	mov    edx,eax
c00289a1:	c1 fa 14             	sar    edx,0x14
c00289a4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00289a7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00289aa:	89 de                	mov    esi,ebx
c00289ac:	c1 e6 0b             	shl    esi,0xb
c00289af:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00289b2:	c1 e0 0b             	shl    eax,0xb
c00289b5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00289ba:	c1 eb 15             	shr    ebx,0x15
c00289bd:	09 d8                	or     eax,ebx
c00289bf:	89 c2                	mov    edx,eax
c00289c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00289c4:	25 ff 07 00 00       	and    eax,0x7ff
c00289c9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00289cc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00289cf:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00289d5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00289d8:	29 d8                	sub    eax,ebx
c00289da:	05 ff 03 00 00       	add    eax,0x3ff
c00289df:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00289e2:	46                   	inc    esi
c00289e3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00289e9:	0f 85 a5 00 00 00    	jne    c0028a94 <__divdf3+0x138>
c00289ef:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00289f2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00289f5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00289f9:	74 2a                	je     c0028a25 <__divdf3+0xc9>
c00289fb:	85 f6                	test   esi,esi
c00289fd:	0f 85 cc 02 00 00    	jne    c0028ccf <__divdf3+0x373>
c0028a03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028a06:	40                   	inc    eax
c0028a07:	a9 fe 07 00 00       	test   eax,0x7fe
c0028a0c:	75 26                	jne    c0028a34 <__divdf3+0xd8>
c0028a0e:	85 db                	test   ebx,ebx
c0028a10:	74 22                	je     c0028a34 <__divdf3+0xd8>
c0028a12:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028a15:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028a18:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a1b:	09 d0                	or     eax,edx
c0028a1d:	0f 85 ac 02 00 00    	jne    c0028ccf <__divdf3+0x373>
c0028a23:	eb 63                	jmp    c0028a88 <__divdf3+0x12c>
c0028a25:	85 f6                	test   esi,esi
c0028a27:	75 22                	jne    c0028a4b <__divdf3+0xef>
c0028a29:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028a2c:	40                   	inc    eax
c0028a2d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028a32:	74 36                	je     c0028a6a <__divdf3+0x10e>
c0028a34:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028a38:	0f 89 91 02 00 00    	jns    c0028ccf <__divdf3+0x373>
c0028a3e:	89 f8                	mov    eax,edi
c0028a40:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028a46:	e9 80 02 00 00       	jmp    c0028ccb <__divdf3+0x36f>
c0028a4b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028a4e:	01 f6                	add    esi,esi
c0028a50:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028a53:	c1 ef 1f             	shr    edi,0x1f
c0028a56:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028a59:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028a5c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028a5f:	09 f7                	or     edi,esi
c0028a61:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028a64:	78 2e                	js     c0028a94 <__divdf3+0x138>
c0028a66:	89 c8                	mov    eax,ecx
c0028a68:	eb e1                	jmp    c0028a4b <__divdf3+0xef>
c0028a6a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a6d:	09 d0                	or     eax,edx
c0028a6f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028a73:	74 0f                	je     c0028a84 <__divdf3+0x128>
c0028a75:	85 c0                	test   eax,eax
c0028a77:	74 bb                	je     c0028a34 <__divdf3+0xd8>
c0028a79:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028a7c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028a7f:	e9 4b 02 00 00       	jmp    c0028ccf <__divdf3+0x373>
c0028a84:	85 c0                	test   eax,eax
c0028a86:	75 ac                	jne    c0028a34 <__divdf3+0xd8>
c0028a88:	31 ff                	xor    edi,edi
c0028a8a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028a8f:	e9 3b 02 00 00       	jmp    c0028ccf <__divdf3+0x373>
c0028a94:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028a97:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028a9a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028aa0:	75 6b                	jne    c0028b0d <__divdf3+0x1b1>
c0028aa2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028aa5:	09 d6                	or     esi,edx
c0028aa7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028aab:	74 28                	je     c0028ad5 <__divdf3+0x179>
c0028aad:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028ab0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028ab3:	85 f6                	test   esi,esi
c0028ab5:	0f 85 14 02 00 00    	jne    c0028ccf <__divdf3+0x373>
c0028abb:	31 ff                	xor    edi,edi
c0028abd:	31 c9                	xor    ecx,ecx
c0028abf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028ac2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028ac5:	0f 89 04 02 00 00    	jns    c0028ccf <__divdf3+0x373>
c0028acb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028ad0:	e9 fa 01 00 00       	jmp    c0028ccf <__divdf3+0x373>
c0028ad5:	85 f6                	test   esi,esi
c0028ad7:	75 1b                	jne    c0028af4 <__divdf3+0x198>
c0028ad9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028adc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028adf:	25 00 00 00 80       	and    eax,0x80000000
c0028ae4:	31 c9                	xor    ecx,ecx
c0028ae6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028aeb:	89 cf                	mov    edi,ecx
c0028aed:	89 c1                	mov    ecx,eax
c0028aef:	e9 db 01 00 00       	jmp    c0028ccf <__divdf3+0x373>
c0028af4:	01 d2                	add    edx,edx
c0028af6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028af9:	c1 eb 1f             	shr    ebx,0x1f
c0028afc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028aff:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028b02:	8d 48 01             	lea    ecx,[eax+0x1]
c0028b05:	09 da                	or     edx,ebx
c0028b07:	78 04                	js     c0028b0d <__divdf3+0x1b1>
c0028b09:	89 c8                	mov    eax,ecx
c0028b0b:	eb e7                	jmp    c0028af4 <__divdf3+0x198>
c0028b0d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028b10:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028b16:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028b1c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028b1f:	39 d6                	cmp    esi,edx
c0028b21:	77 0d                	ja     c0028b30 <__divdf3+0x1d4>
c0028b23:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028b26:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028b29:	72 1b                	jb     c0028b46 <__divdf3+0x1ea>
c0028b2b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028b2e:	75 16                	jne    c0028b46 <__divdf3+0x1ea>
c0028b30:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028b33:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028b36:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028b39:	83 de 00             	sbb    esi,0x0
c0028b3c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028b3f:	ba 01 00 00 00       	mov    edx,0x1
c0028b44:	eb 02                	jmp    c0028b48 <__divdf3+0x1ec>
c0028b46:	31 d2                	xor    edx,edx
c0028b48:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028b4f:	31 ff                	xor    edi,edi
c0028b51:	01 ff                	add    edi,edi
c0028b53:	89 d1                	mov    ecx,edx
c0028b55:	c1 e9 1f             	shr    ecx,0x1f
c0028b58:	09 cf                	or     edi,ecx
c0028b5a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028b5d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028b60:	89 da                	mov    edx,ebx
c0028b62:	89 f3                	mov    ebx,esi
c0028b64:	8d 34 36             	lea    esi,[esi+esi*1]
c0028b67:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028b6a:	c1 e9 1f             	shr    ecx,0x1f
c0028b6d:	09 ce                	or     esi,ecx
c0028b6f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028b72:	01 c9                	add    ecx,ecx
c0028b74:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028b77:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028b7a:	85 db                	test   ebx,ebx
c0028b7c:	78 29                	js     c0028ba7 <__divdf3+0x24b>
c0028b7e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028b81:	72 07                	jb     c0028b8a <__divdf3+0x22e>
c0028b83:	75 3c                	jne    c0028bc1 <__divdf3+0x265>
c0028b85:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028b88:	77 37                	ja     c0028bc1 <__divdf3+0x265>
c0028b8a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028b8d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028b90:	31 d2                	xor    edx,edx
c0028b92:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028b95:	0f 97 c2             	seta   dl
c0028b98:	29 d6                	sub    esi,edx
c0028b9a:	89 d9                	mov    ecx,ebx
c0028b9c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028b9f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028ba2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028ba5:	eb 17                	jmp    c0028bbe <__divdf3+0x262>
c0028ba7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028baa:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028bad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028bb0:	0f 97 c1             	seta   cl
c0028bb3:	0f b6 c9             	movzx  ecx,cl
c0028bb6:	29 ce                	sub    esi,ecx
c0028bb8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028bbb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028bbe:	83 ca 01             	or     edx,0x1
c0028bc1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028bc4:	75 8b                	jne    c0028b51 <__divdf3+0x1f5>
c0028bc6:	c1 e7 09             	shl    edi,0x9
c0028bc9:	89 d1                	mov    ecx,edx
c0028bcb:	c1 e9 17             	shr    ecx,0x17
c0028bce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028bd1:	09 f3                	or     ebx,esi
c0028bd3:	0f 95 c3             	setne  bl
c0028bd6:	0f b6 db             	movzx  ebx,bl
c0028bd9:	c1 e2 09             	shl    edx,0x9
c0028bdc:	09 d3                	or     ebx,edx
c0028bde:	89 ca                	mov    edx,ecx
c0028be0:	09 fa                	or     edx,edi
c0028be2:	78 0c                	js     c0028bf0 <__divdf3+0x294>
c0028be4:	01 d2                	add    edx,edx
c0028be6:	89 d9                	mov    ecx,ebx
c0028be8:	c1 e9 1f             	shr    ecx,0x1f
c0028beb:	09 ca                	or     edx,ecx
c0028bed:	01 db                	add    ebx,ebx
c0028bef:	48                   	dec    eax
c0028bf0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028bf5:	0f 8f 83 00 00 00    	jg     c0028c7e <__divdf3+0x322>
c0028bfb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028c01:	85 c0                	test   eax,eax
c0028c03:	0f 8f 82 00 00 00    	jg     c0028c8b <__divdf3+0x32f>
c0028c09:	83 f8 cc             	cmp    eax,0xffffffcc
c0028c0c:	7c 77                	jl     c0028c85 <__divdf3+0x329>
c0028c0e:	be 01 00 00 00       	mov    esi,0x1
c0028c13:	29 c6                	sub    esi,eax
c0028c15:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028c1b:	83 fe 1f             	cmp    esi,0x1f
c0028c1e:	7e 2f                	jle    c0028c4f <__divdf3+0x2f3>
c0028c20:	83 fe 20             	cmp    esi,0x20
c0028c23:	75 0a                	jne    c0028c2f <__divdf3+0x2d3>
c0028c25:	85 db                	test   ebx,ebx
c0028c27:	0f 95 c3             	setne  bl
c0028c2a:	0f b6 db             	movzx  ebx,bl
c0028c2d:	eb 1a                	jmp    c0028c49 <__divdf3+0x2ed>
c0028c2f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028c32:	89 d7                	mov    edi,edx
c0028c34:	d3 e7                	shl    edi,cl
c0028c36:	89 f9                	mov    ecx,edi
c0028c38:	09 d9                	or     ecx,ebx
c0028c3a:	0f 95 c3             	setne  bl
c0028c3d:	0f b6 db             	movzx  ebx,bl
c0028c40:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028c45:	29 c1                	sub    ecx,eax
c0028c47:	d3 ea                	shr    edx,cl
c0028c49:	09 d3                	or     ebx,edx
c0028c4b:	31 c0                	xor    eax,eax
c0028c4d:	eb 3a                	jmp    c0028c89 <__divdf3+0x32d>
c0028c4f:	83 c0 1f             	add    eax,0x1f
c0028c52:	89 d7                	mov    edi,edx
c0028c54:	88 c1                	mov    cl,al
c0028c56:	d3 e7                	shl    edi,cl
c0028c58:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028c5b:	89 df                	mov    edi,ebx
c0028c5d:	89 f1                	mov    ecx,esi
c0028c5f:	d3 ef                	shr    edi,cl
c0028c61:	89 f9                	mov    ecx,edi
c0028c63:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028c66:	09 cf                	or     edi,ecx
c0028c68:	88 c1                	mov    cl,al
c0028c6a:	d3 e3                	shl    ebx,cl
c0028c6c:	85 db                	test   ebx,ebx
c0028c6e:	0f 95 c3             	setne  bl
c0028c71:	0f b6 db             	movzx  ebx,bl
c0028c74:	09 fb                	or     ebx,edi
c0028c76:	89 f1                	mov    ecx,esi
c0028c78:	d3 ea                	shr    edx,cl
c0028c7a:	31 c0                	xor    eax,eax
c0028c7c:	eb 0d                	jmp    c0028c8b <__divdf3+0x32f>
c0028c7e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028c83:	eb 02                	jmp    c0028c87 <__divdf3+0x32b>
c0028c85:	31 c0                	xor    eax,eax
c0028c87:	31 db                	xor    ebx,ebx
c0028c89:	31 d2                	xor    edx,edx
c0028c8b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028c8e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028c91:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028c97:	09 c8                	or     eax,ecx
c0028c99:	c1 e0 14             	shl    eax,0x14
c0028c9c:	89 d1                	mov    ecx,edx
c0028c9e:	c1 e9 0b             	shr    ecx,0xb
c0028ca1:	09 c8                	or     eax,ecx
c0028ca3:	89 c6                	mov    esi,eax
c0028ca5:	89 d9                	mov    ecx,ebx
c0028ca7:	c1 e9 0b             	shr    ecx,0xb
c0028caa:	c1 e2 15             	shl    edx,0x15
c0028cad:	09 ca                	or     edx,ecx
c0028caf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028cb5:	0f 95 c0             	setne  al
c0028cb8:	09 c1                	or     ecx,eax
c0028cba:	83 e1 01             	and    ecx,0x1
c0028cbd:	c1 eb 0a             	shr    ebx,0xa
c0028cc0:	21 cb                	and    ebx,ecx
c0028cc2:	01 d3                	add    ebx,edx
c0028cc4:	89 d8                	mov    eax,ebx
c0028cc6:	83 d6 00             	adc    esi,0x0
c0028cc9:	89 f2                	mov    edx,esi
c0028ccb:	89 c7                	mov    edi,eax
c0028ccd:	89 d1                	mov    ecx,edx
c0028ccf:	89 f8                	mov    eax,edi
c0028cd1:	89 ca                	mov    edx,ecx
c0028cd3:	83 c4 2c             	add    esp,0x2c
c0028cd6:	5b                   	pop    ebx
c0028cd7:	5e                   	pop    esi
c0028cd8:	5f                   	pop    edi
c0028cd9:	5d                   	pop    ebp
c0028cda:	c3                   	ret    

c0028cdb <__floatsidf>:
c0028cdb:	55                   	push   ebp
c0028cdc:	89 e5                	mov    ebp,esp
c0028cde:	56                   	push   esi
c0028cdf:	53                   	push   ebx
c0028ce0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ce3:	85 db                	test   ebx,ebx
c0028ce5:	7e 15                	jle    c0028cfc <__floatsidf+0x21>
c0028ce7:	0f bd cb             	bsr    ecx,ebx
c0028cea:	83 f1 1f             	xor    ecx,0x1f
c0028ced:	d3 e3                	shl    ebx,cl
c0028cef:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028cf5:	b8 1e 04 00 00       	mov    eax,0x41e
c0028cfa:	eb 21                	jmp    c0028d1d <__floatsidf+0x42>
c0028cfc:	b8 00 00 00 00       	mov    eax,0x0
c0028d01:	ba 00 00 00 00       	mov    edx,0x0
c0028d06:	74 2a                	je     c0028d32 <__floatsidf+0x57>
c0028d08:	f7 db                	neg    ebx
c0028d0a:	0f bd cb             	bsr    ecx,ebx
c0028d0d:	83 f1 1f             	xor    ecx,0x1f
c0028d10:	d3 e3                	shl    ebx,cl
c0028d12:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028d18:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028d1d:	29 c8                	sub    eax,ecx
c0028d1f:	c1 e0 14             	shl    eax,0x14
c0028d22:	89 c1                	mov    ecx,eax
c0028d24:	89 de                	mov    esi,ebx
c0028d26:	c1 ee 0b             	shr    esi,0xb
c0028d29:	09 f1                	or     ecx,esi
c0028d2b:	89 ca                	mov    edx,ecx
c0028d2d:	c1 e3 15             	shl    ebx,0x15
c0028d30:	89 d8                	mov    eax,ebx
c0028d32:	5b                   	pop    ebx
c0028d33:	5e                   	pop    esi
c0028d34:	5d                   	pop    ebp
c0028d35:	c3                   	ret    

c0028d36 <__floatunsidf>:
c0028d36:	55                   	push   ebp
c0028d37:	89 e5                	mov    ebp,esp
c0028d39:	56                   	push   esi
c0028d3a:	53                   	push   ebx
c0028d3b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028d3e:	85 db                	test   ebx,ebx
c0028d40:	74 2a                	je     c0028d6c <__floatunsidf+0x36>
c0028d42:	0f bd cb             	bsr    ecx,ebx
c0028d45:	83 f1 1f             	xor    ecx,0x1f
c0028d48:	d3 e3                	shl    ebx,cl
c0028d4a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028d50:	b8 1e 04 00 00       	mov    eax,0x41e
c0028d55:	29 c8                	sub    eax,ecx
c0028d57:	c1 e0 14             	shl    eax,0x14
c0028d5a:	89 c1                	mov    ecx,eax
c0028d5c:	89 de                	mov    esi,ebx
c0028d5e:	c1 ee 0b             	shr    esi,0xb
c0028d61:	09 f1                	or     ecx,esi
c0028d63:	89 ca                	mov    edx,ecx
c0028d65:	c1 e3 15             	shl    ebx,0x15
c0028d68:	89 d8                	mov    eax,ebx
c0028d6a:	eb 04                	jmp    c0028d70 <__floatunsidf+0x3a>
c0028d6c:	31 c0                	xor    eax,eax
c0028d6e:	31 d2                	xor    edx,edx
c0028d70:	5b                   	pop    ebx
c0028d71:	5e                   	pop    esi
c0028d72:	5d                   	pop    ebp
c0028d73:	c3                   	ret    

c0028d74 <__fixdfsi>:
c0028d74:	55                   	push   ebp
c0028d75:	89 e5                	mov    ebp,esp
c0028d77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028d7a:	89 d1                	mov    ecx,edx
c0028d7c:	c1 e1 0b             	shl    ecx,0xb
c0028d7f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028d88:	c1 e8 15             	shr    eax,0x15
c0028d8b:	09 c1                	or     ecx,eax
c0028d8d:	c1 fa 14             	sar    edx,0x14
c0028d90:	78 1f                	js     c0028db1 <__fixdfsi+0x3d>
c0028d92:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028d98:	31 c0                	xor    eax,eax
c0028d9a:	83 fa 1e             	cmp    edx,0x1e
c0028d9d:	77 40                	ja     c0028ddf <__fixdfsi+0x6b>
c0028d9f:	89 c8                	mov    eax,ecx
c0028da1:	0d 00 00 00 80       	or     eax,0x80000000
c0028da6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028dab:	29 d1                	sub    ecx,edx
c0028dad:	d3 e8                	shr    eax,cl
c0028daf:	eb 2e                	jmp    c0028ddf <__fixdfsi+0x6b>
c0028db1:	31 c0                	xor    eax,eax
c0028db3:	81 c2 01 04 00 00    	add    edx,0x401
c0028db9:	78 24                	js     c0028ddf <__fixdfsi+0x6b>
c0028dbb:	83 fa 1e             	cmp    edx,0x1e
c0028dbe:	7e 09                	jle    c0028dc9 <__fixdfsi+0x55>
c0028dc0:	83 fa 1f             	cmp    edx,0x1f
c0028dc3:	75 18                	jne    c0028ddd <__fixdfsi+0x69>
c0028dc5:	85 c9                	test   ecx,ecx
c0028dc7:	75 14                	jne    c0028ddd <__fixdfsi+0x69>
c0028dc9:	89 c8                	mov    eax,ecx
c0028dcb:	0d 00 00 00 80       	or     eax,0x80000000
c0028dd0:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028dd5:	29 d1                	sub    ecx,edx
c0028dd7:	d3 e8                	shr    eax,cl
c0028dd9:	f7 d8                	neg    eax
c0028ddb:	eb 02                	jmp    c0028ddf <__fixdfsi+0x6b>
c0028ddd:	31 c0                	xor    eax,eax
c0028ddf:	5d                   	pop    ebp
c0028de0:	c3                   	ret    

c0028de1 <__fixunsdfsi>:
c0028de1:	55                   	push   ebp
c0028de2:	89 e5                	mov    ebp,esp
c0028de4:	53                   	push   ebx
c0028de5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028de8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028deb:	89 d3                	mov    ebx,edx
c0028ded:	c1 fb 14             	sar    ebx,0x14
c0028df0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028df6:	31 c0                	xor    eax,eax
c0028df8:	83 fb 1f             	cmp    ebx,0x1f
c0028dfb:	77 1d                	ja     c0028e1a <__fixunsdfsi+0x39>
c0028dfd:	89 d0                	mov    eax,edx
c0028dff:	c1 e0 0b             	shl    eax,0xb
c0028e02:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028e07:	c1 e9 15             	shr    ecx,0x15
c0028e0a:	09 c8                	or     eax,ecx
c0028e0c:	0d 00 00 00 80       	or     eax,0x80000000
c0028e11:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028e16:	29 d9                	sub    ecx,ebx
c0028e18:	d3 e8                	shr    eax,cl
c0028e1a:	5b                   	pop    ebx
c0028e1b:	5d                   	pop    ebp
c0028e1c:	c3                   	ret    

c0028e1d <__cmpdf2>:
c0028e1d:	55                   	push   ebp
c0028e1e:	89 e5                	mov    ebp,esp
c0028e20:	57                   	push   edi
c0028e21:	56                   	push   esi
c0028e22:	53                   	push   ebx
c0028e23:	83 ec 0c             	sub    esp,0xc
c0028e26:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028e29:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028e2c:	89 ca                	mov    edx,ecx
c0028e2e:	c1 ea 14             	shr    edx,0x14
c0028e31:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028e37:	89 cb                	mov    ebx,ecx
c0028e39:	c1 fb 1f             	sar    ebx,0x1f
c0028e3c:	31 da                	xor    edx,ebx
c0028e3e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028e41:	89 df                	mov    edi,ebx
c0028e43:	c1 e7 0b             	shl    edi,0xb
c0028e46:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028e49:	c1 e1 0b             	shl    ecx,0xb
c0028e4c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028e52:	c1 eb 15             	shr    ebx,0x15
c0028e55:	09 d9                	or     ecx,ebx
c0028e57:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028e5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028e5d:	89 ce                	mov    esi,ecx
c0028e5f:	c1 ee 14             	shr    esi,0x14
c0028e62:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028e68:	89 cb                	mov    ebx,ecx
c0028e6a:	c1 fb 1f             	sar    ebx,0x1f
c0028e6d:	31 de                	xor    esi,ebx
c0028e6f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028e72:	89 df                	mov    edi,ebx
c0028e74:	c1 e7 0b             	shl    edi,0xb
c0028e77:	c1 e1 0b             	shl    ecx,0xb
c0028e7a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028e80:	c1 eb 15             	shr    ebx,0x15
c0028e83:	09 d9                	or     ecx,ebx
c0028e85:	89 d3                	mov    ebx,edx
c0028e87:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028e8d:	43                   	inc    ebx
c0028e8e:	83 fb 01             	cmp    ebx,0x1
c0028e91:	77 08                	ja     c0028e9b <__cmpdf2+0x7e>
c0028e93:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028e96:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028e99:	75 68                	jne    c0028f03 <__cmpdf2+0xe6>
c0028e9b:	89 f3                	mov    ebx,esi
c0028e9d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028ea3:	43                   	inc    ebx
c0028ea4:	83 fb 01             	cmp    ebx,0x1
c0028ea7:	77 06                	ja     c0028eaf <__cmpdf2+0x92>
c0028ea9:	89 fb                	mov    ebx,edi
c0028eab:	09 cb                	or     ebx,ecx
c0028ead:	75 54                	jne    c0028f03 <__cmpdf2+0xe6>
c0028eaf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028eb2:	09 f8                	or     eax,edi
c0028eb4:	09 c8                	or     eax,ecx
c0028eb6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028eb9:	75 12                	jne    c0028ecd <__cmpdf2+0xb0>
c0028ebb:	8d 42 01             	lea    eax,[edx+0x1]
c0028ebe:	83 f8 01             	cmp    eax,0x1
c0028ec1:	77 0a                	ja     c0028ecd <__cmpdf2+0xb0>
c0028ec3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028ec6:	31 c0                	xor    eax,eax
c0028ec8:	83 fb 01             	cmp    ebx,0x1
c0028ecb:	76 36                	jbe    c0028f03 <__cmpdf2+0xe6>
c0028ecd:	b8 01 00 00 00       	mov    eax,0x1
c0028ed2:	39 f2                	cmp    edx,esi
c0028ed4:	7f 2d                	jg     c0028f03 <__cmpdf2+0xe6>
c0028ed6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028edb:	7c 26                	jl     c0028f03 <__cmpdf2+0xe6>
c0028edd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028ee0:	77 07                	ja     c0028ee9 <__cmpdf2+0xcc>
c0028ee2:	72 16                	jb     c0028efa <__cmpdf2+0xdd>
c0028ee4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028ee7:	76 0a                	jbe    c0028ef3 <__cmpdf2+0xd6>
c0028ee9:	89 d0                	mov    eax,edx
c0028eeb:	c1 f8 1f             	sar    eax,0x1f
c0028eee:	83 c8 01             	or     eax,0x1
c0028ef1:	eb 10                	jmp    c0028f03 <__cmpdf2+0xe6>
c0028ef3:	b8 00 00 00 00       	mov    eax,0x0
c0028ef8:	73 09                	jae    c0028f03 <__cmpdf2+0xe6>
c0028efa:	89 d0                	mov    eax,edx
c0028efc:	c1 f8 1f             	sar    eax,0x1f
c0028eff:	83 e0 02             	and    eax,0x2
c0028f02:	48                   	dec    eax
c0028f03:	83 c4 0c             	add    esp,0xc
c0028f06:	5b                   	pop    ebx
c0028f07:	5e                   	pop    esi
c0028f08:	5f                   	pop    edi
c0028f09:	5d                   	pop    ebp
c0028f0a:	c3                   	ret    

c0028f0b <__eqdf2>:
c0028f0b:	55                   	push   ebp
c0028f0c:	89 e5                	mov    ebp,esp
c0028f0e:	50                   	push   eax
c0028f0f:	6a 01                	push   0x1
c0028f11:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028f14:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028f17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028f1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028f1d:	e8 fb fe ff ff       	call   c0028e1d <__cmpdf2>
c0028f22:	83 c4 18             	add    esp,0x18
c0028f25:	c9                   	leave  
c0028f26:	c3                   	ret    

c0028f27 <__nedf2>:
c0028f27:	eb e2                	jmp    c0028f0b <__eqdf2>

c0028f29 <__gtdf2>:
c0028f29:	55                   	push   ebp
c0028f2a:	89 e5                	mov    ebp,esp
c0028f2c:	50                   	push   eax
c0028f2d:	6a ff                	push   0xffffffff
c0028f2f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028f32:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028f35:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028f38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028f3b:	e8 dd fe ff ff       	call   c0028e1d <__cmpdf2>
c0028f40:	83 c4 18             	add    esp,0x18
c0028f43:	c9                   	leave  
c0028f44:	c3                   	ret    

c0028f45 <__gedf2>:
c0028f45:	eb e2                	jmp    c0028f29 <__gtdf2>

c0028f47 <__ltdf2>:
c0028f47:	eb c2                	jmp    c0028f0b <__eqdf2>

c0028f49 <__ledf2>:
c0028f49:	eb c0                	jmp    c0028f0b <__eqdf2>

c0028f4b <__truncdfsf2>:
c0028f4b:	55                   	push   ebp
c0028f4c:	89 e5                	mov    ebp,esp
c0028f4e:	57                   	push   edi
c0028f4f:	56                   	push   esi
c0028f50:	53                   	push   ebx
c0028f51:	83 ec 0c             	sub    esp,0xc
c0028f54:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028f57:	89 d1                	mov    ecx,edx
c0028f59:	c1 f9 14             	sar    ecx,0x14
c0028f5c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028f5f:	89 df                	mov    edi,ebx
c0028f61:	c1 e7 0b             	shl    edi,0xb
c0028f64:	89 d0                	mov    eax,edx
c0028f66:	c1 e0 0b             	shl    eax,0xb
c0028f69:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028f6e:	c1 eb 15             	shr    ebx,0x15
c0028f71:	09 d8                	or     eax,ebx
c0028f73:	89 cb                	mov    ebx,ecx
c0028f75:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028f7b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028f81:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028f87:	0f 86 9e 00 00 00    	jbe    c002902b <__truncdfsf2+0xe0>
c0028f8d:	85 db                	test   ebx,ebx
c0028f8f:	75 0a                	jne    c0028f9b <__truncdfsf2+0x50>
c0028f91:	c1 fa 17             	sar    edx,0x17
c0028f94:	30 d2                	xor    dl,dl
c0028f96:	e9 84 00 00 00       	jmp    c002901f <__truncdfsf2+0xd4>
c0028f9b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028fa1:	83 fe 83             	cmp    esi,0xffffff83
c0028fa4:	7d 4b                	jge    c0028ff1 <__truncdfsf2+0xa6>
c0028fa6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028fab:	29 f1                	sub    ecx,esi
c0028fad:	83 f9 1f             	cmp    ecx,0x1f
c0028fb0:	7f 6b                	jg     c002901d <__truncdfsf2+0xd2>
c0028fb2:	0d 00 00 00 80       	or     eax,0x80000000
c0028fb7:	89 c3                	mov    ebx,eax
c0028fb9:	d3 eb                	shr    ebx,cl
c0028fbb:	be 01 00 00 00       	mov    esi,0x1
c0028fc0:	d3 e6                	shl    esi,cl
c0028fc2:	4e                   	dec    esi
c0028fc3:	21 f0                	and    eax,esi
c0028fc5:	09 f8                	or     eax,edi
c0028fc7:	0f 95 c0             	setne  al
c0028fca:	0f b6 c0             	movzx  eax,al
c0028fcd:	09 c3                	or     ebx,eax
c0028fcf:	89 d9                	mov    ecx,ebx
c0028fd1:	c1 e9 08             	shr    ecx,0x8
c0028fd4:	f6 c3 7f             	test   bl,0x7f
c0028fd7:	0f 95 c0             	setne  al
c0028fda:	09 c8                	or     eax,ecx
c0028fdc:	83 e0 01             	and    eax,0x1
c0028fdf:	c1 eb 07             	shr    ebx,0x7
c0028fe2:	21 c3                	and    ebx,eax
c0028fe4:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028fea:	09 d1                	or     ecx,edx
c0028fec:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028fef:	eb 76                	jmp    c0029067 <__truncdfsf2+0x11c>
c0028ff1:	83 c6 80             	add    esi,0xffffff80
c0028ff4:	7e 1d                	jle    c0029013 <__truncdfsf2+0xc8>
c0028ff6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028ffc:	75 0b                	jne    c0029009 <__truncdfsf2+0xbe>
c0028ffe:	09 f8                	or     eax,edi
c0029000:	74 09                	je     c002900b <__truncdfsf2+0xc0>
c0029002:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0029007:	eb 02                	jmp    c002900b <__truncdfsf2+0xc0>
c0029009:	31 c0                	xor    eax,eax
c002900b:	c1 fa 17             	sar    edx,0x17
c002900e:	80 ca ff             	or     dl,0xff
c0029011:	eb 0e                	jmp    c0029021 <__truncdfsf2+0xd6>
c0029013:	c1 fa 1f             	sar    edx,0x1f
c0029016:	c1 e2 08             	shl    edx,0x8
c0029019:	09 ca                	or     edx,ecx
c002901b:	eb 04                	jmp    c0029021 <__truncdfsf2+0xd6>
c002901d:	31 d2                	xor    edx,edx
c002901f:	31 c0                	xor    eax,eax
c0029021:	c1 e2 17             	shl    edx,0x17
c0029024:	c1 e8 08             	shr    eax,0x8
c0029027:	09 d0                	or     eax,edx
c0029029:	eb 3c                	jmp    c0029067 <__truncdfsf2+0x11c>
c002902b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0029031:	89 ca                	mov    edx,ecx
c0029033:	c1 fa 0b             	sar    edx,0xb
c0029036:	c1 e2 08             	shl    edx,0x8
c0029039:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002903c:	31 db                	xor    ebx,ebx
c002903e:	85 ff                	test   edi,edi
c0029040:	0f 95 c3             	setne  bl
c0029043:	09 d8                	or     eax,ebx
c0029045:	89 c3                	mov    ebx,eax
c0029047:	c1 eb 08             	shr    ebx,0x8
c002904a:	a8 7f                	test   al,0x7f
c002904c:	0f 95 c2             	setne  dl
c002904f:	89 d6                	mov    esi,edx
c0029051:	09 de                	or     esi,ebx
c0029053:	83 e6 01             	and    esi,0x1
c0029056:	c1 e8 07             	shr    eax,0x7
c0029059:	21 f0                	and    eax,esi
c002905b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002905e:	09 ca                	or     edx,ecx
c0029060:	c1 e2 17             	shl    edx,0x17
c0029063:	09 da                	or     edx,ebx
c0029065:	01 d0                	add    eax,edx
c0029067:	83 c4 0c             	add    esp,0xc
c002906a:	5b                   	pop    ebx
c002906b:	5e                   	pop    esi
c002906c:	5f                   	pop    edi
c002906d:	5d                   	pop    ebp
c002906e:	c3                   	ret    

c002906f <__extendsfdf2>:
c002906f:	55                   	push   ebp
c0029070:	89 e5                	mov    ebp,esp
c0029072:	57                   	push   edi
c0029073:	56                   	push   esi
c0029074:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0029077:	89 d1                	mov    ecx,edx
c0029079:	c1 f9 17             	sar    ecx,0x17
c002907c:	c1 e2 08             	shl    edx,0x8
c002907f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0029085:	89 c8                	mov    eax,ecx
c0029087:	80 e4 f8             	and    ah,0xf8
c002908a:	8d 71 01             	lea    esi,[ecx+0x1]
c002908d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0029093:	75 27                	jne    c00290bc <__extendsfdf2+0x4d>
c0029095:	81 e1 ff 00 00 00    	and    ecx,0xff
c002909b:	75 18                	jne    c00290b5 <__extendsfdf2+0x46>
c002909d:	85 d2                	test   edx,edx
c002909f:	74 20                	je     c00290c1 <__extendsfdf2+0x52>
c00290a1:	41                   	inc    ecx
c00290a2:	01 d2                	add    edx,edx
c00290a4:	79 fb                	jns    c00290a1 <__extendsfdf2+0x32>
c00290a6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00290ac:	29 c8                	sub    eax,ecx
c00290ae:	05 81 03 00 00       	add    eax,0x381
c00290b3:	eb 0c                	jmp    c00290c1 <__extendsfdf2+0x52>
c00290b5:	05 00 07 00 00       	add    eax,0x700
c00290ba:	eb 05                	jmp    c00290c1 <__extendsfdf2+0x52>
c00290bc:	05 80 03 00 00       	add    eax,0x380
c00290c1:	c1 e0 14             	shl    eax,0x14
c00290c4:	89 c1                	mov    ecx,eax
c00290c6:	89 d0                	mov    eax,edx
c00290c8:	c1 e8 0b             	shr    eax,0xb
c00290cb:	09 c1                	or     ecx,eax
c00290cd:	c1 e2 15             	shl    edx,0x15
c00290d0:	89 d0                	mov    eax,edx
c00290d2:	89 ca                	mov    edx,ecx
c00290d4:	5e                   	pop    esi
c00290d5:	5f                   	pop    edi
c00290d6:	5d                   	pop    ebp
c00290d7:	c3                   	ret    
c00290d8:	66 90                	xchg   ax,ax
c00290da:	66 90                	xchg   ax,ax
c00290dc:	66 90                	xchg   ax,ax
c00290de:	66 90                	xchg   ax,ax

c00290e0 <fabs>:
c00290e0:	83 ec 0c             	sub    esp,0xc
c00290e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00290ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00290ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00290f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00290f7:	dd 04 24             	fld    QWORD PTR [esp]
c00290fa:	83 c4 0c             	add    esp,0xc
c00290fd:	c3                   	ret    
c00290fe:	66 90                	xchg   ax,ax

c0029100 <lrint>:
c0029100:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0029104:	83 ec 04             	sub    esp,0x4
c0029107:	db 1c 24             	fistp  DWORD PTR [esp]
c002910a:	58                   	pop    eax
c002910b:	c3                   	ret    

c002910c <lrintf>:
c002910c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0029110:	83 ec 04             	sub    esp,0x4
c0029113:	db 1c 24             	fistp  DWORD PTR [esp]
c0029116:	58                   	pop    eax
c0029117:	c3                   	ret    

Disassembly of section .init:

c0029118 <_init>:
c0029118:	55                   	push   ebp
c0029119:	89 e5                	mov    ebp,esp
c002911b:	e8 f8 6f fd ff       	call   c0000118 <frame_dummy>
c0029120:	e8 5b e0 ff ff       	call   c0027180 <__do_global_ctors_aux>
c0029125:	5d                   	pop    ebp
c0029126:	c3                   	ret    

Disassembly of section .fini:

c0029127 <_fini>:
c0029127:	55                   	push   ebp
c0029128:	89 e5                	mov    ebp,esp
c002912a:	e8 79 6f fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002912f:	5d                   	pop    ebp
c0029130:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0029132 <Computer::~Computer()>:
c0029132:	83 ec 0c             	sub    esp,0xc
c0029135:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c002913a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913e:	89 10                	mov    DWORD PTR [eax],edx
c0029140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029144:	83 ec 0c             	sub    esp,0xc
c0029147:	50                   	push   eax
c0029148:	e8 c1 ac fe ff       	call   c0013e0e <Device::~Device()>
c002914d:	83 c4 10             	add    esp,0x10
c0029150:	90                   	nop
c0029151:	83 c4 0c             	add    esp,0xc
c0029154:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029156 <Computer::~Computer()>:
c0029156:	83 ec 0c             	sub    esp,0xc
c0029159:	83 ec 0c             	sub    esp,0xc
c002915c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029160:	e8 cd ff ff ff       	call   c0029132 <Computer::~Computer()>
c0029165:	83 c4 10             	add    esp,0x10
c0029168:	83 ec 08             	sub    esp,0x8
c002916b:	68 ec 01 00 00       	push   0x1ec
c0029170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029174:	e8 ae 98 fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029179:	83 c4 10             	add    esp,0x10
c002917c:	83 c4 0c             	add    esp,0xc
c002917f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029180 <idleCommon()>:
c0029180:	83 ec 0c             	sub    esp,0xc
c0029183:	fa                   	cli    
c0029184:	ff 05 e8 26 03 c0    	inc    DWORD PTR ds:0xc00326e8
c002918a:	e8 bb 52 ff ff       	call   c001e44a <schedule()>
c002918f:	a1 e8 26 03 c0       	mov    eax,ds:0xc00326e8
c0029194:	48                   	dec    eax
c0029195:	a3 e8 26 03 c0       	mov    ds:0xc00326e8,eax
c002919a:	75 01                	jne    c002919d <idleCommon()+0x1d>
c002919c:	fb                   	sti    
c002919d:	83 c4 0c             	add    esp,0xc
c00291a0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00291a2 <LinkedList<UnixFile>::~LinkedList()>:
c00291a2:	90                   	nop
c00291a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00291a4 <LinkedList<UnixFile>::LinkedList()>:
c00291a4:	83 ec 0c             	sub    esp,0xc
c00291a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291e7:	83 ec 0c             	sub    esp,0xc
c00291ea:	68 26 b0 02 c0       	push   0xc002b026
c00291ef:	e8 13 99 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00291f4:	83 c4 10             	add    esp,0x10
c00291f7:	90                   	nop
c00291f8:	83 c4 0c             	add    esp,0xc
c00291fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00291fc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00291fc:	83 ec 0c             	sub    esp,0xc
c00291ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029204:	75 10                	jne    c0029216 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029206:	83 ec 0c             	sub    esp,0xc
c0029209:	68 40 b0 02 c0       	push   0xc002b040
c002920e:	e8 84 14 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921a:	8b 00                	mov    eax,DWORD PTR [eax]
c002921c:	85 c0                	test   eax,eax
c002921e:	74 34                	je     c0029254 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029224:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029227:	85 c0                	test   eax,eax
c0029229:	74 29                	je     c0029254 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002922b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029232:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029236:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029241:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029248:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002924b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029252:	eb 65                	jmp    c00292b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029258:	8b 00                	mov    eax,DWORD PTR [eax]
c002925a:	85 c0                	test   eax,eax
c002925c:	75 4b                	jne    c00292a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002925e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029262:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029265:	85 c0                	test   eax,eax
c0029267:	75 40                	jne    c00292a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029271:	89 10                	mov    DWORD PTR [eax],edx
c0029273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029277:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002927b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002927e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029282:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029285:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002928c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029290:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029293:	85 c0                	test   eax,eax
c0029295:	74 22                	je     c00292b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029297:	83 ec 0c             	sub    esp,0xc
c002929a:	68 62 b0 02 c0       	push   0xc002b062
c002929f:	e8 f3 13 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c00292a4:	83 c4 10             	add    esp,0x10
c00292a7:	eb 10                	jmp    c00292b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00292a9:	83 ec 0c             	sub    esp,0xc
c00292ac:	68 6c b0 02 c0       	push   0xc002b06c
c00292b1:	e8 e1 13 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c00292b6:	83 c4 10             	add    esp,0x10
c00292b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292c0:	8d 50 01             	lea    edx,[eax+0x1]
c00292c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00292ca:	90                   	nop
c00292cb:	83 c4 0c             	add    esp,0xc
c00292ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00292d0 <LinkedList<UnixFile>::getFirstElement()>:
c00292d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00292d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00292d8 <LinkedList<UnixFile>::removeFirst()>:
c00292d8:	83 ec 0c             	sub    esp,0xc
c00292db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292df:	8b 00                	mov    eax,DWORD PTR [eax]
c00292e1:	85 c0                	test   eax,eax
c00292e3:	75 12                	jne    c00292f7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00292e5:	83 ec 0c             	sub    esp,0xc
c00292e8:	68 78 b0 02 c0       	push   0xc002b078
c00292ed:	e8 a5 13 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c00292f2:	83 c4 10             	add    esp,0x10
c00292f5:	eb 7e                	jmp    c0029375 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00292f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029301:	85 c0                	test   eax,eax
c0029303:	74 10                	je     c0029315 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029305:	83 ec 0c             	sub    esp,0xc
c0029308:	68 c3 b0 02 c0       	push   0xc002b0c3
c002930d:	e8 85 13 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029312:	83 c4 10             	add    esp,0x10
c0029315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029319:	8b 00                	mov    eax,DWORD PTR [eax]
c002931b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002931e:	85 c0                	test   eax,eax
c0029320:	75 33                	jne    c0029355 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029326:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002932c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029330:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002933e:	83 f8 01             	cmp    eax,0x1
c0029341:	74 21                	je     c0029364 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029343:	83 ec 0c             	sub    esp,0xc
c0029346:	68 9c b0 02 c0       	push   0xc002b09c
c002934b:	e8 47 13 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029350:	83 c4 10             	add    esp,0x10
c0029353:	eb 0f                	jmp    c0029364 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029359:	8b 00                	mov    eax,DWORD PTR [eax]
c002935b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002935e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029362:	89 10                	mov    DWORD PTR [eax],edx
c0029364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029368:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002936b:	8d 50 ff             	lea    edx,[eax-0x1]
c002936e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029372:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029375:	83 c4 0c             	add    esp,0xc
c0029378:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002937a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002937a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002937e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029381:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029382 <DriverlessDevice::~DriverlessDevice()>:
c0029382:	ba 7c b8 02 c0       	mov    edx,0xc002b87c
c0029387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002938b:	89 10                	mov    DWORD PTR [eax],edx
c002938d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029391:	50                   	push   eax
c0029392:	e8 77 aa fe ff       	call   c0013e0e <Device::~Device()>
c0029397:	83 c4 04             	add    esp,0x4
c002939a:	90                   	nop
c002939b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002939c <DriverlessDevice::~DriverlessDevice()>:
c002939c:	83 ec 0c             	sub    esp,0xc
c002939f:	83 ec 0c             	sub    esp,0xc
c00293a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293a6:	e8 d7 ff ff ff       	call   c0029382 <DriverlessDevice::~DriverlessDevice()>
c00293ab:	83 c4 10             	add    esp,0x10
c00293ae:	83 ec 08             	sub    esp,0x8
c00293b1:	68 58 01 00 00       	push   0x158
c00293b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ba:	e8 68 96 fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c00293bf:	83 c4 10             	add    esp,0x10
c00293c2:	83 c4 0c             	add    esp,0xc
c00293c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00293c6 <LinkedList<Device>::addElement(Device*)>:
c00293c6:	83 ec 0c             	sub    esp,0xc
c00293c9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00293ce:	75 10                	jne    c00293e0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00293d0:	83 ec 0c             	sub    esp,0xc
c00293d3:	68 40 b0 02 c0       	push   0xc002b040
c00293d8:	e8 ba 12 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c00293dd:	83 c4 10             	add    esp,0x10
c00293e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00293e6:	85 c0                	test   eax,eax
c00293e8:	74 3a                	je     c0029424 <LinkedList<Device>::addElement(Device*)+0x5e>
c00293ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293f1:	85 c0                	test   eax,eax
c00293f3:	74 2f                	je     c0029424 <LinkedList<Device>::addElement(Device*)+0x5e>
c00293f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029400:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002940e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029415:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029418:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029422:	eb 68                	jmp    c002948c <LinkedList<Device>::addElement(Device*)+0xc6>
c0029424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029428:	8b 00                	mov    eax,DWORD PTR [eax]
c002942a:	85 c0                	test   eax,eax
c002942c:	75 4e                	jne    c002947c <LinkedList<Device>::addElement(Device*)+0xb6>
c002942e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029432:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029435:	85 c0                	test   eax,eax
c0029437:	75 43                	jne    c002947c <LinkedList<Device>::addElement(Device*)+0xb6>
c0029439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002943d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029441:	89 10                	mov    DWORD PTR [eax],edx
c0029443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029447:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002944b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002944e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029455:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002945f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029463:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029466:	85 c0                	test   eax,eax
c0029468:	74 22                	je     c002948c <LinkedList<Device>::addElement(Device*)+0xc6>
c002946a:	83 ec 0c             	sub    esp,0xc
c002946d:	68 62 b0 02 c0       	push   0xc002b062
c0029472:	e8 20 12 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029477:	83 c4 10             	add    esp,0x10
c002947a:	eb 10                	jmp    c002948c <LinkedList<Device>::addElement(Device*)+0xc6>
c002947c:	83 ec 0c             	sub    esp,0xc
c002947f:	68 6c b0 02 c0       	push   0xc002b06c
c0029484:	e8 0e 12 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029489:	83 c4 10             	add    esp,0x10
c002948c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029490:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029493:	8d 50 01             	lea    edx,[eax+0x1]
c0029496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002949d:	90                   	nop
c002949e:	83 c4 0c             	add    esp,0xc
c00294a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00294a2 <LinkedList<Device>::LinkedList()>:
c00294a2:	83 ec 0c             	sub    esp,0xc
c00294a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294be:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00294c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00294e5:	83 ec 0c             	sub    esp,0xc
c00294e8:	68 26 b0 02 c0       	push   0xc002b026
c00294ed:	e8 15 96 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00294f2:	83 c4 10             	add    esp,0x10
c00294f5:	90                   	nop
c00294f6:	83 c4 0c             	add    esp,0xc
c00294f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00294fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0029500:	85 c0                	test   eax,eax
c0029502:	75 0e                	jne    c0029512 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002950b:	85 c0                	test   eax,eax
c002950d:	75 03                	jne    c0029512 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002950f:	b0 01                	mov    al,0x1
c0029511:	c3                   	ret    
c0029512:	b0 00                	mov    al,0x0
c0029514:	90                   	nop
c0029515:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002951a:	8b 00                	mov    eax,DWORD PTR [eax]
c002951c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002951e:	83 ec 0c             	sub    esp,0xc
c0029521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029525:	8b 00                	mov    eax,DWORD PTR [eax]
c0029527:	85 c0                	test   eax,eax
c0029529:	75 15                	jne    c0029540 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002952b:	83 ec 0c             	sub    esp,0xc
c002952e:	68 78 b0 02 c0       	push   0xc002b078
c0029533:	e8 5f 11 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029538:	83 c4 10             	add    esp,0x10
c002953b:	e9 88 00 00 00       	jmp    c00295c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029547:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002954a:	85 c0                	test   eax,eax
c002954c:	0f 95 c0             	setne  al
c002954f:	84 c0                	test   al,al
c0029551:	74 10                	je     c0029563 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029553:	83 ec 0c             	sub    esp,0xc
c0029556:	68 c3 b0 02 c0       	push   0xc002b0c3
c002955b:	e8 37 11 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029560:	83 c4 10             	add    esp,0x10
c0029563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029567:	8b 00                	mov    eax,DWORD PTR [eax]
c0029569:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002956c:	85 c0                	test   eax,eax
c002956e:	0f 94 c0             	sete   al
c0029571:	84 c0                	test   al,al
c0029573:	74 33                	je     c00295a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029579:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002957f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029583:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002958a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029591:	83 f8 01             	cmp    eax,0x1
c0029594:	74 21                	je     c00295b7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029596:	83 ec 0c             	sub    esp,0xc
c0029599:	68 9c b0 02 c0       	push   0xc002b09c
c002959e:	e8 f4 10 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c00295a3:	83 c4 10             	add    esp,0x10
c00295a6:	eb 0f                	jmp    c00295b7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00295a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00295ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00295b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b5:	89 10                	mov    DWORD PTR [eax],edx
c00295b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295be:	8d 50 ff             	lea    edx,[eax-0x1]
c00295c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00295c8:	83 c4 0c             	add    esp,0xc
c00295cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00295cc:	83 ec 0c             	sub    esp,0xc
c00295cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00295d4:	75 10                	jne    c00295e6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00295d6:	83 ec 0c             	sub    esp,0xc
c00295d9:	68 40 b0 02 c0       	push   0xc002b040
c00295de:	e8 b4 10 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c00295e3:	83 c4 10             	add    esp,0x10
c00295e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00295ec:	85 c0                	test   eax,eax
c00295ee:	74 34                	je     c0029624 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00295f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295f7:	85 c0                	test   eax,eax
c00295f9:	74 29                	je     c0029624 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00295fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029602:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029606:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029611:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029618:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002961b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029622:	eb 65                	jmp    c0029689 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029628:	8b 00                	mov    eax,DWORD PTR [eax]
c002962a:	85 c0                	test   eax,eax
c002962c:	75 4b                	jne    c0029679 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002962e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029632:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029635:	85 c0                	test   eax,eax
c0029637:	75 40                	jne    c0029679 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029641:	89 10                	mov    DWORD PTR [eax],edx
c0029643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029647:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002964b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002964e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029652:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029655:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002965c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029660:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029663:	85 c0                	test   eax,eax
c0029665:	74 22                	je     c0029689 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029667:	83 ec 0c             	sub    esp,0xc
c002966a:	68 62 b0 02 c0       	push   0xc002b062
c002966f:	e8 23 10 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029674:	83 c4 10             	add    esp,0x10
c0029677:	eb 10                	jmp    c0029689 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029679:	83 ec 0c             	sub    esp,0xc
c002967c:	68 6c b0 02 c0       	push   0xc002b06c
c0029681:	e8 11 10 ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029686:	83 c4 10             	add    esp,0x10
c0029689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029690:	8d 50 01             	lea    edx,[eax+0x1]
c0029693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029697:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002969a:	90                   	nop
c002969b:	83 c4 0c             	add    esp,0xc
c002969e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00296a0 <ACPI::~ACPI()>:
c00296a0:	83 ec 0c             	sub    esp,0xc
c00296a3:	ba dc c2 02 c0       	mov    edx,0xc002c2dc
c00296a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ac:	89 10                	mov    DWORD PTR [eax],edx
c00296ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b2:	83 ec 0c             	sub    esp,0xc
c00296b5:	50                   	push   eax
c00296b6:	e8 53 a7 fe ff       	call   c0013e0e <Device::~Device()>
c00296bb:	83 c4 10             	add    esp,0x10
c00296be:	90                   	nop
c00296bf:	83 c4 0c             	add    esp,0xc
c00296c2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00296c4 <ACPI::~ACPI()>:
c00296c4:	83 ec 0c             	sub    esp,0xc
c00296c7:	83 ec 0c             	sub    esp,0xc
c00296ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296ce:	e8 cd ff ff ff       	call   c00296a0 <ACPI::~ACPI()>
c00296d3:	83 c4 10             	add    esp,0x10
c00296d6:	83 ec 08             	sub    esp,0x8
c00296d9:	68 68 12 00 00       	push   0x1268
c00296de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296e2:	e8 40 93 fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c00296e7:	83 c4 10             	add    esp,0x10
c00296ea:	83 c4 0c             	add    esp,0xc
c00296ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00296ee <LinkedList<Device>::~LinkedList()>:
c00296ee:	90                   	nop
c00296ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00296f0 <LinkedList<Device>::isEmpty()>:
c00296f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00296f6:	85 c0                	test   eax,eax
c00296f8:	75 0e                	jne    c0029708 <LinkedList<Device>::isEmpty()+0x18>
c00296fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029701:	85 c0                	test   eax,eax
c0029703:	75 03                	jne    c0029708 <LinkedList<Device>::isEmpty()+0x18>
c0029705:	b0 01                	mov    al,0x1
c0029707:	c3                   	ret    
c0029708:	b0 00                	mov    al,0x0
c002970a:	90                   	nop
c002970b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002970c <LinkedList<Device>::getFirstElement()>:
c002970c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029710:	8b 00                	mov    eax,DWORD PTR [eax]
c0029712:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029714 <LinkedList<Device>::removeFirst()>:
c0029714:	83 ec 0c             	sub    esp,0xc
c0029717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002971b:	8b 00                	mov    eax,DWORD PTR [eax]
c002971d:	85 c0                	test   eax,eax
c002971f:	75 15                	jne    c0029736 <LinkedList<Device>::removeFirst()+0x22>
c0029721:	83 ec 0c             	sub    esp,0xc
c0029724:	68 78 b0 02 c0       	push   0xc002b078
c0029729:	e8 69 0f ff ff       	call   c001a697 <Krnl::panic(char const*)>
c002972e:	83 c4 10             	add    esp,0x10
c0029731:	e9 87 00 00 00       	jmp    c00297bd <LinkedList<Device>::removeFirst()+0xa9>
c0029736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002973a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002973d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029743:	85 c0                	test   eax,eax
c0029745:	74 10                	je     c0029757 <LinkedList<Device>::removeFirst()+0x43>
c0029747:	83 ec 0c             	sub    esp,0xc
c002974a:	68 c3 b0 02 c0       	push   0xc002b0c3
c002974f:	e8 43 0f ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029754:	83 c4 10             	add    esp,0x10
c0029757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002975b:	8b 00                	mov    eax,DWORD PTR [eax]
c002975d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029763:	85 c0                	test   eax,eax
c0029765:	75 33                	jne    c002979a <LinkedList<Device>::removeFirst()+0x86>
c0029767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029775:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002977c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029780:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029783:	83 f8 01             	cmp    eax,0x1
c0029786:	74 24                	je     c00297ac <LinkedList<Device>::removeFirst()+0x98>
c0029788:	83 ec 0c             	sub    esp,0xc
c002978b:	68 9c b0 02 c0       	push   0xc002b09c
c0029790:	e8 02 0f ff ff       	call   c001a697 <Krnl::panic(char const*)>
c0029795:	83 c4 10             	add    esp,0x10
c0029798:	eb 12                	jmp    c00297ac <LinkedList<Device>::removeFirst()+0x98>
c002979a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002979e:	8b 00                	mov    eax,DWORD PTR [eax]
c00297a0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00297a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297aa:	89 10                	mov    DWORD PTR [eax],edx
c00297ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00297b3:	8d 50 ff             	lea    edx,[eax-0x1]
c00297b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00297bd:	83 c4 0c             	add    esp,0xc
c00297c0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00297c2 <CPU::~CPU()>:
c00297c2:	83 ec 0c             	sub    esp,0xc
c00297c5:	ba cc c6 02 c0       	mov    edx,0xc002c6cc
c00297ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ce:	89 10                	mov    DWORD PTR [eax],edx
c00297d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d4:	83 ec 0c             	sub    esp,0xc
c00297d7:	50                   	push   eax
c00297d8:	e8 31 a6 fe ff       	call   c0013e0e <Device::~Device()>
c00297dd:	83 c4 10             	add    esp,0x10
c00297e0:	90                   	nop
c00297e1:	83 c4 0c             	add    esp,0xc
c00297e4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00297e6 <CPU::~CPU()>:
c00297e6:	83 ec 0c             	sub    esp,0xc
c00297e9:	83 ec 0c             	sub    esp,0xc
c00297ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297f0:	e8 cd ff ff ff       	call   c00297c2 <CPU::~CPU()>
c00297f5:	83 c4 10             	add    esp,0x10
c00297f8:	83 ec 08             	sub    esp,0x8
c00297fb:	68 98 11 00 00       	push   0x1198
c0029800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029804:	e8 1e 92 fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029809:	83 c4 10             	add    esp,0x10
c002980c:	83 c4 0c             	add    esp,0xc
c002980f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029810 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029810:	90                   	nop
c0029811:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029812 <ThreadControlBlock::ThreadControlBlock()>:
c0029812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029816:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002981d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029821:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002982c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029833:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029837:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002983e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029842:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029849:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002984d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029855:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029859:	90                   	nop
c002985a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002985c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002985c:	83 ec 0c             	sub    esp,0xc
c002985f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029863:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002986d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029878:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002987f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029883:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029898:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002989f:	83 ec 0c             	sub    esp,0xc
c00298a2:	68 26 b0 02 c0       	push   0xc002b026
c00298a7:	e8 5b 92 fe ff       	call   c0012b07 <Dbg::kprintf(char const*, ...)>
c00298ac:	83 c4 10             	add    esp,0x10
c00298af:	90                   	nop
c00298b0:	83 c4 0c             	add    esp,0xc
c00298b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00298b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00298b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00298b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00298bb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00298bc <Vm::_FPUState::_FPUState()>:
c00298bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00298c0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00298c7:	90                   	nop
c00298c8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00298ca <PCI::~PCI()>:
c00298ca:	83 ec 0c             	sub    esp,0xc
c00298cd:	ba f8 d7 02 c0       	mov    edx,0xc002d7f8
c00298d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298d6:	89 10                	mov    DWORD PTR [eax],edx
c00298d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298dc:	83 ec 0c             	sub    esp,0xc
c00298df:	50                   	push   eax
c00298e0:	e8 f9 9e fe ff       	call   c00137de <Bus::~Bus()>
c00298e5:	83 c4 10             	add    esp,0x10
c00298e8:	90                   	nop
c00298e9:	83 c4 0c             	add    esp,0xc
c00298ec:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00298ee <PCI::~PCI()>:
c00298ee:	83 ec 0c             	sub    esp,0xc
c00298f1:	83 ec 0c             	sub    esp,0xc
c00298f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298f8:	e8 cd ff ff ff       	call   c00298ca <PCI::~PCI()>
c00298fd:	83 c4 10             	add    esp,0x10
c0029900:	83 ec 08             	sub    esp,0x8
c0029903:	68 58 01 00 00       	push   0x158
c0029908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002990c:	e8 16 91 fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029911:	83 c4 10             	add    esp,0x10
c0029914:	83 c4 0c             	add    esp,0xc
c0029917:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029918 <IDE::~IDE()>:
c0029918:	83 ec 0c             	sub    esp,0xc
c002991b:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0029920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029924:	89 10                	mov    DWORD PTR [eax],edx
c0029926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002992a:	83 ec 0c             	sub    esp,0xc
c002992d:	50                   	push   eax
c002992e:	e8 f1 a9 fe ff       	call   c0014324 <HardDiskController::~HardDiskController()>
c0029933:	83 c4 10             	add    esp,0x10
c0029936:	90                   	nop
c0029937:	83 c4 0c             	add    esp,0xc
c002993a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002993c <IDE::~IDE()>:
c002993c:	83 ec 0c             	sub    esp,0xc
c002993f:	83 ec 0c             	sub    esp,0xc
c0029942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029946:	e8 cd ff ff ff       	call   c0029918 <IDE::~IDE()>
c002994b:	83 c4 10             	add    esp,0x10
c002994e:	83 ec 08             	sub    esp,0x8
c0029951:	68 70 02 00 00       	push   0x270
c0029956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002995a:	e8 c8 90 fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c002995f:	83 c4 10             	add    esp,0x10
c0029962:	83 c4 0c             	add    esp,0xc
c0029965:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029966 <SATABus::~SATABus()>:
c0029966:	83 ec 0c             	sub    esp,0xc
c0029969:	ba 3c db 02 c0       	mov    edx,0xc002db3c
c002996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029972:	89 10                	mov    DWORD PTR [eax],edx
c0029974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029978:	83 ec 0c             	sub    esp,0xc
c002997b:	50                   	push   eax
c002997c:	e8 a3 a9 fe ff       	call   c0014324 <HardDiskController::~HardDiskController()>
c0029981:	83 c4 10             	add    esp,0x10
c0029984:	90                   	nop
c0029985:	83 c4 0c             	add    esp,0xc
c0029988:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002998a <SATABus::~SATABus()>:
c002998a:	83 ec 0c             	sub    esp,0xc
c002998d:	83 ec 0c             	sub    esp,0xc
c0029990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029994:	e8 cd ff ff ff       	call   c0029966 <SATABus::~SATABus()>
c0029999:	83 c4 10             	add    esp,0x10
c002999c:	83 ec 08             	sub    esp,0x8
c002999f:	68 64 01 00 00       	push   0x164
c00299a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299a8:	e8 7a 90 fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c00299ad:	83 c4 10             	add    esp,0x10
c00299b0:	83 c4 0c             	add    esp,0xc
c00299b3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00299b4 <ATA::~ATA()>:
c00299b4:	83 ec 0c             	sub    esp,0xc
c00299b7:	ba 88 db 02 c0       	mov    edx,0xc002db88
c00299bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c0:	89 10                	mov    DWORD PTR [eax],edx
c00299c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c6:	83 ec 0c             	sub    esp,0xc
c00299c9:	50                   	push   eax
c00299ca:	e8 47 aa fe ff       	call   c0014416 <PhysicalDisk::~PhysicalDisk()>
c00299cf:	83 c4 10             	add    esp,0x10
c00299d2:	90                   	nop
c00299d3:	83 c4 0c             	add    esp,0xc
c00299d6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00299d8 <ATA::~ATA()>:
c00299d8:	83 ec 0c             	sub    esp,0xc
c00299db:	83 ec 0c             	sub    esp,0xc
c00299de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e2:	e8 cd ff ff ff       	call   c00299b4 <ATA::~ATA()>
c00299e7:	83 c4 10             	add    esp,0x10
c00299ea:	83 ec 08             	sub    esp,0x8
c00299ed:	68 7c 01 00 00       	push   0x17c
c00299f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299f6:	e8 2c 90 fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c00299fb:	83 c4 10             	add    esp,0x10
c00299fe:	83 c4 0c             	add    esp,0xc
c0029a01:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029a02 <ATAPI::~ATAPI()>:
c0029a02:	83 ec 0c             	sub    esp,0xc
c0029a05:	ba c0 db 02 c0       	mov    edx,0xc002dbc0
c0029a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a0e:	89 10                	mov    DWORD PTR [eax],edx
c0029a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a14:	83 ec 0c             	sub    esp,0xc
c0029a17:	50                   	push   eax
c0029a18:	e8 f9 a9 fe ff       	call   c0014416 <PhysicalDisk::~PhysicalDisk()>
c0029a1d:	83 c4 10             	add    esp,0x10
c0029a20:	90                   	nop
c0029a21:	83 c4 0c             	add    esp,0xc
c0029a24:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029a26 <ATAPI::~ATAPI()>:
c0029a26:	83 ec 0c             	sub    esp,0xc
c0029a29:	83 ec 0c             	sub    esp,0xc
c0029a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a30:	e8 cd ff ff ff       	call   c0029a02 <ATAPI::~ATAPI()>
c0029a35:	83 c4 10             	add    esp,0x10
c0029a38:	83 ec 08             	sub    esp,0x8
c0029a3b:	68 80 01 00 00       	push   0x180
c0029a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a44:	e8 de 8f fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029a49:	83 c4 10             	add    esp,0x10
c0029a4c:	83 c4 0c             	add    esp,0xc
c0029a4f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029a50 <SATA::~SATA()>:
c0029a50:	83 ec 0c             	sub    esp,0xc
c0029a53:	ba 74 dc 02 c0       	mov    edx,0xc002dc74
c0029a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a5c:	89 10                	mov    DWORD PTR [eax],edx
c0029a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a62:	83 ec 0c             	sub    esp,0xc
c0029a65:	50                   	push   eax
c0029a66:	e8 ab a9 fe ff       	call   c0014416 <PhysicalDisk::~PhysicalDisk()>
c0029a6b:	83 c4 10             	add    esp,0x10
c0029a6e:	90                   	nop
c0029a6f:	83 c4 0c             	add    esp,0xc
c0029a72:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029a74 <SATA::~SATA()>:
c0029a74:	83 ec 0c             	sub    esp,0xc
c0029a77:	83 ec 0c             	sub    esp,0xc
c0029a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a7e:	e8 cd ff ff ff       	call   c0029a50 <SATA::~SATA()>
c0029a83:	83 c4 10             	add    esp,0x10
c0029a86:	83 ec 08             	sub    esp,0x8
c0029a89:	68 7c 01 00 00       	push   0x17c
c0029a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a92:	e8 90 8f fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029a97:	83 c4 10             	add    esp,0x10
c0029a9a:	83 c4 0c             	add    esp,0xc
c0029a9d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029a9e <SATAPI::~SATAPI()>:
c0029a9e:	83 ec 0c             	sub    esp,0xc
c0029aa1:	ba 50 dd 02 c0       	mov    edx,0xc002dd50
c0029aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aaa:	89 10                	mov    DWORD PTR [eax],edx
c0029aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ab0:	83 ec 0c             	sub    esp,0xc
c0029ab3:	50                   	push   eax
c0029ab4:	e8 5d a9 fe ff       	call   c0014416 <PhysicalDisk::~PhysicalDisk()>
c0029ab9:	83 c4 10             	add    esp,0x10
c0029abc:	90                   	nop
c0029abd:	83 c4 0c             	add    esp,0xc
c0029ac0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029ac2 <SATAPI::~SATAPI()>:
c0029ac2:	83 ec 0c             	sub    esp,0xc
c0029ac5:	83 ec 0c             	sub    esp,0xc
c0029ac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029acc:	e8 cd ff ff ff       	call   c0029a9e <SATAPI::~SATAPI()>
c0029ad1:	83 c4 10             	add    esp,0x10
c0029ad4:	83 ec 08             	sub    esp,0x8
c0029ad7:	68 80 01 00 00       	push   0x180
c0029adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ae0:	e8 42 8f fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029ae5:	83 c4 10             	add    esp,0x10
c0029ae8:	83 c4 0c             	add    esp,0xc
c0029aeb:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029aec <AVX::~AVX()>:
c0029aec:	83 ec 0c             	sub    esp,0xc
c0029aef:	ba 90 dd 02 c0       	mov    edx,0xc002dd90
c0029af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af8:	89 10                	mov    DWORD PTR [eax],edx
c0029afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029afe:	83 ec 0c             	sub    esp,0xc
c0029b01:	50                   	push   eax
c0029b02:	e8 93 a9 fe ff       	call   c001449a <FPU::~FPU()>
c0029b07:	83 c4 10             	add    esp,0x10
c0029b0a:	90                   	nop
c0029b0b:	83 c4 0c             	add    esp,0xc
c0029b0e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029b10 <AVX::~AVX()>:
c0029b10:	83 ec 0c             	sub    esp,0xc
c0029b13:	83 ec 0c             	sub    esp,0xc
c0029b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b1a:	e8 cd ff ff ff       	call   c0029aec <AVX::~AVX()>
c0029b1f:	83 c4 10             	add    esp,0x10
c0029b22:	83 ec 08             	sub    esp,0x8
c0029b25:	68 58 01 00 00       	push   0x158
c0029b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b2e:	e8 f4 8e fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029b33:	83 c4 10             	add    esp,0x10
c0029b36:	83 c4 0c             	add    esp,0xc
c0029b39:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029b3a <MMX::~MMX()>:
c0029b3a:	83 ec 0c             	sub    esp,0xc
c0029b3d:	ba d0 dd 02 c0       	mov    edx,0xc002ddd0
c0029b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b46:	89 10                	mov    DWORD PTR [eax],edx
c0029b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b4c:	83 ec 0c             	sub    esp,0xc
c0029b4f:	50                   	push   eax
c0029b50:	e8 45 a9 fe ff       	call   c001449a <FPU::~FPU()>
c0029b55:	83 c4 10             	add    esp,0x10
c0029b58:	90                   	nop
c0029b59:	83 c4 0c             	add    esp,0xc
c0029b5c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029b5e <MMX::~MMX()>:
c0029b5e:	83 ec 0c             	sub    esp,0xc
c0029b61:	83 ec 0c             	sub    esp,0xc
c0029b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b68:	e8 cd ff ff ff       	call   c0029b3a <MMX::~MMX()>
c0029b6d:	83 c4 10             	add    esp,0x10
c0029b70:	83 ec 08             	sub    esp,0x8
c0029b73:	68 58 01 00 00       	push   0x158
c0029b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b7c:	e8 a6 8e fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029b81:	83 c4 10             	add    esp,0x10
c0029b84:	83 c4 0c             	add    esp,0xc
c0029b87:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029b88 <SSE::~SSE()>:
c0029b88:	83 ec 0c             	sub    esp,0xc
c0029b8b:	ba 10 de 02 c0       	mov    edx,0xc002de10
c0029b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b94:	89 10                	mov    DWORD PTR [eax],edx
c0029b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b9a:	83 ec 0c             	sub    esp,0xc
c0029b9d:	50                   	push   eax
c0029b9e:	e8 f7 a8 fe ff       	call   c001449a <FPU::~FPU()>
c0029ba3:	83 c4 10             	add    esp,0x10
c0029ba6:	90                   	nop
c0029ba7:	83 c4 0c             	add    esp,0xc
c0029baa:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029bac <SSE::~SSE()>:
c0029bac:	83 ec 0c             	sub    esp,0xc
c0029baf:	83 ec 0c             	sub    esp,0xc
c0029bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bb6:	e8 cd ff ff ff       	call   c0029b88 <SSE::~SSE()>
c0029bbb:	83 c4 10             	add    esp,0x10
c0029bbe:	83 ec 08             	sub    esp,0x8
c0029bc1:	68 58 01 00 00       	push   0x158
c0029bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bca:	e8 58 8e fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029bcf:	83 c4 10             	add    esp,0x10
c0029bd2:	83 c4 0c             	add    esp,0xc
c0029bd5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029bd6 <x87::~x87()>:
c0029bd6:	83 ec 0c             	sub    esp,0xc
c0029bd9:	ba 50 de 02 c0       	mov    edx,0xc002de50
c0029bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029be2:	89 10                	mov    DWORD PTR [eax],edx
c0029be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029be8:	83 ec 0c             	sub    esp,0xc
c0029beb:	50                   	push   eax
c0029bec:	e8 a9 a8 fe ff       	call   c001449a <FPU::~FPU()>
c0029bf1:	83 c4 10             	add    esp,0x10
c0029bf4:	90                   	nop
c0029bf5:	83 c4 0c             	add    esp,0xc
c0029bf8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029bfa <x87::~x87()>:
c0029bfa:	83 ec 0c             	sub    esp,0xc
c0029bfd:	83 ec 0c             	sub    esp,0xc
c0029c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c04:	e8 cd ff ff ff       	call   c0029bd6 <x87::~x87()>
c0029c09:	83 c4 10             	add    esp,0x10
c0029c0c:	83 ec 08             	sub    esp,0x8
c0029c0f:	68 58 01 00 00       	push   0x158
c0029c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c18:	e8 0a 8e fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029c1d:	83 c4 10             	add    esp,0x10
c0029c20:	83 c4 0c             	add    esp,0xc
c0029c23:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029c24 <IOAPIC::~IOAPIC()>:
c0029c24:	83 ec 0c             	sub    esp,0xc
c0029c27:	ba a8 df 02 c0       	mov    edx,0xc002dfa8
c0029c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c30:	89 10                	mov    DWORD PTR [eax],edx
c0029c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c36:	83 ec 0c             	sub    esp,0xc
c0029c39:	50                   	push   eax
c0029c3a:	e8 cf a1 fe ff       	call   c0013e0e <Device::~Device()>
c0029c3f:	83 c4 10             	add    esp,0x10
c0029c42:	90                   	nop
c0029c43:	83 c4 0c             	add    esp,0xc
c0029c46:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029c48 <IOAPIC::~IOAPIC()>:
c0029c48:	83 ec 0c             	sub    esp,0xc
c0029c4b:	83 ec 0c             	sub    esp,0xc
c0029c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c52:	e8 cd ff ff ff       	call   c0029c24 <IOAPIC::~IOAPIC()>
c0029c57:	83 c4 10             	add    esp,0x10
c0029c5a:	83 ec 08             	sub    esp,0x8
c0029c5d:	68 68 01 00 00       	push   0x168
c0029c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c66:	e8 bc 8d fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029c6b:	83 c4 10             	add    esp,0x10
c0029c6e:	83 c4 0c             	add    esp,0xc
c0029c71:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029c72 <APIC::~APIC()>:
c0029c72:	83 ec 0c             	sub    esp,0xc
c0029c75:	ba 60 df 02 c0       	mov    edx,0xc002df60
c0029c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c7e:	89 10                	mov    DWORD PTR [eax],edx
c0029c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c84:	83 ec 0c             	sub    esp,0xc
c0029c87:	50                   	push   eax
c0029c88:	e8 d7 ac fe ff       	call   c0014964 <InterruptController::~InterruptController()>
c0029c8d:	83 c4 10             	add    esp,0x10
c0029c90:	90                   	nop
c0029c91:	83 c4 0c             	add    esp,0xc
c0029c94:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029c96 <APIC::~APIC()>:
c0029c96:	83 ec 0c             	sub    esp,0xc
c0029c99:	83 ec 0c             	sub    esp,0xc
c0029c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ca0:	e8 cd ff ff ff       	call   c0029c72 <APIC::~APIC()>
c0029ca5:	83 c4 10             	add    esp,0x10
c0029ca8:	83 ec 08             	sub    esp,0x8
c0029cab:	68 58 21 00 00       	push   0x2158
c0029cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cb4:	e8 6e 8d fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029cb9:	83 c4 10             	add    esp,0x10
c0029cbc:	83 c4 0c             	add    esp,0xc
c0029cbf:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029cc0 <PIC::~PIC()>:
c0029cc0:	83 ec 0c             	sub    esp,0xc
c0029cc3:	ba f8 df 02 c0       	mov    edx,0xc002dff8
c0029cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ccc:	89 10                	mov    DWORD PTR [eax],edx
c0029cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cd2:	83 ec 0c             	sub    esp,0xc
c0029cd5:	50                   	push   eax
c0029cd6:	e8 89 ac fe ff       	call   c0014964 <InterruptController::~InterruptController()>
c0029cdb:	83 c4 10             	add    esp,0x10
c0029cde:	90                   	nop
c0029cdf:	83 c4 0c             	add    esp,0xc
c0029ce2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029ce4 <PIC::~PIC()>:
c0029ce4:	83 ec 0c             	sub    esp,0xc
c0029ce7:	83 ec 0c             	sub    esp,0xc
c0029cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cee:	e8 cd ff ff ff       	call   c0029cc0 <PIC::~PIC()>
c0029cf3:	83 c4 10             	add    esp,0x10
c0029cf6:	83 ec 08             	sub    esp,0x8
c0029cf9:	68 58 21 00 00       	push   0x2158
c0029cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d02:	e8 20 8d fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029d07:	83 c4 10             	add    esp,0x10
c0029d0a:	83 c4 0c             	add    esp,0xc
c0029d0d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029d0e <APICTimer::~APICTimer()>:
c0029d0e:	83 ec 0c             	sub    esp,0xc
c0029d11:	ba 4c e0 02 c0       	mov    edx,0xc002e04c
c0029d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d1a:	89 10                	mov    DWORD PTR [eax],edx
c0029d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d20:	83 ec 0c             	sub    esp,0xc
c0029d23:	50                   	push   eax
c0029d24:	e8 cb cc fe ff       	call   c00169f4 <Timer::~Timer()>
c0029d29:	83 c4 10             	add    esp,0x10
c0029d2c:	90                   	nop
c0029d2d:	83 c4 0c             	add    esp,0xc
c0029d30:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029d32 <APICTimer::~APICTimer()>:
c0029d32:	83 ec 0c             	sub    esp,0xc
c0029d35:	83 ec 0c             	sub    esp,0xc
c0029d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d3c:	e8 cd ff ff ff       	call   c0029d0e <APICTimer::~APICTimer()>
c0029d41:	83 c4 10             	add    esp,0x10
c0029d44:	83 ec 08             	sub    esp,0x8
c0029d47:	68 60 01 00 00       	push   0x160
c0029d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d50:	e8 d2 8c fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029d55:	83 c4 10             	add    esp,0x10
c0029d58:	83 c4 0c             	add    esp,0xc
c0029d5b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029d5c <PIT::~PIT()>:
c0029d5c:	83 ec 0c             	sub    esp,0xc
c0029d5f:	ba 9c e0 02 c0       	mov    edx,0xc002e09c
c0029d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d68:	89 10                	mov    DWORD PTR [eax],edx
c0029d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d6e:	83 ec 0c             	sub    esp,0xc
c0029d71:	50                   	push   eax
c0029d72:	e8 7d cc fe ff       	call   c00169f4 <Timer::~Timer()>
c0029d77:	83 c4 10             	add    esp,0x10
c0029d7a:	90                   	nop
c0029d7b:	83 c4 0c             	add    esp,0xc
c0029d7e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029d80 <PIT::~PIT()>:
c0029d80:	83 ec 0c             	sub    esp,0xc
c0029d83:	83 ec 0c             	sub    esp,0xc
c0029d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d8a:	e8 cd ff ff ff       	call   c0029d5c <PIT::~PIT()>
c0029d8f:	83 c4 10             	add    esp,0x10
c0029d92:	83 ec 08             	sub    esp,0x8
c0029d95:	68 5c 01 00 00       	push   0x15c
c0029d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d9e:	e8 84 8c fe ff       	call   c0012a27 <operator delete(void*, unsigned long)>
c0029da3:	83 c4 10             	add    esp,0x10
c0029da6:	83 c4 0c             	add    esp,0xc
c0029da9:	c3                   	ret    
